name: HumanEval_44_change_base
language: python
results:
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdwmj1liz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdwmj1liz.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpdwmj1liz.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpna0vpvup.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpna0vpvup.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpna0vpvup.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_sms848u.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_sms848u.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_sms848u.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xnzultx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2xnzultx.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp2xnzultx.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n\
    \    while x > 0:\n        result.append(str(x % base))\n        x //= base\n\
    \    return ''.join(reversed(result))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x != 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n\
    \    while x:\n        digits.append(str(x % base))\n        x //= base\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x == 0:\n        return '0'\n\
    \    result = ''\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x //= base\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpich_68r3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpich_68r3.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpich_68r3.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7hz1206.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpe7hz1206.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpe7hz1206.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    # TODO: implement this function\n    if x == 0:\n\
    \        return '0'\n    else:\n        result = ''\n        while x > 0:\n  \
    \          result = str(x % base) + result\n            x = x // base\n      \
    \  return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10, \"base must be less than 10\"\n\
    \    if x < base:\n        return str(x)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2vnzp01.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb2vnzp01.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpb2vnzp01.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x < base:\n        return\
    \ str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x != 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    result = \"\"\
    \n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        result = str(x\
    \ % base) + result\n        x //= base\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplar2o3p8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplar2o3p8.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmplar2o3p8.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2da6qzr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpa2da6qzr.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpa2da6qzr.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rp7h2tx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1rp7h2tx.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp1rp7h2tx.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnaci3i_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsnaci3i_.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpsnaci3i_.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x < 0:\n\
    \        return '-' + change_base(-x, base)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qaotftm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8qaotftm.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp8qaotftm.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp208om0u7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp208om0u7.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp208om0u7.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10, \"base must be less than 10\"\n\
    \    if x == 0:\n        return \"0\"\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpw40t_2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvpw40t_2.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpvpw40t_2.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd1s3cl4c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpd1s3cl4c.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpd1s3cl4c.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x < base:\n        return\
    \ str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x == 0:\n        return '0'\n\
    \    result = ''\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x //= base\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpligdmojk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpligdmojk.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpligdmojk.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_e1r8a4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2_e1r8a4.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp2_e1r8a4.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x == 0:\n        return '0'\n\
    \    result = ''\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x //= base\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5zpt0q2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc5zpt0q2.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpc5zpt0q2.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ly5uosy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_ly5uosy.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_ly5uosy.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n   \
    \ while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphcj5y3kc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphcj5y3kc.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmphcj5y3kc.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_s3_njup.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_s3_njup.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_s3_njup.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgmibmn7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxgmibmn7.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpxgmibmn7.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x != 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x < 0:\n\
    \        return '-' + change_base(-x, base)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo24pqh3y.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo24pqh3y.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpo24pqh3y.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n  \
    \      return '-' + change_base(-x, base)\n    if x % base == 0:\n        return\
    \ change_base(x // base, base)\n    return change_base(x // base, base) + str(x\
    \ % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n   \
    \ assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7m3969ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7m3969ti.py\", line 36,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp7m3969ti.py\", line\
    \ 22, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9ia72tx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps9ia72tx.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmps9ia72tx.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6voouno.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv6voouno.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpv6voouno.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x == 1:\n\
    \        return '1'\n    else:\n        return change_base(x // base, base) +\
    \ str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3ftgnhs.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy3ftgnhs.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpy3ftgnhs.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcncy7q_s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcncy7q_s.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpcncy7q_s.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x == 0:\n        return '0'\n\
    \    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x\
    \ //= base\n    return res\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x != 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpga4e5owm.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpga4e5owm.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpga4e5owm.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30p_72m3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp30p_72m3.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp30p_72m3.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base <= 10, \"base must be less than 10\"\n\
    \    if x == 0:\n        return \"0\"\n    elif x < 0:\n        return \"-\" +\
    \ change_base(-x, base)\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpls9ntxcv.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpls9ntxcv.py\", line 36,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpls9ntxcv.py\", line\
    \ 22, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_y0waqi9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_y0waqi9.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_y0waqi9.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplaezjym0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplaezjym0.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmplaezjym0.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8cyfwc7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmph8cyfwc7.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmph8cyfwc7.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcj2jnvb_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcj2jnvb_.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpcj2jnvb_.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n\
    \    while x > 0:\n        result.append(str(x % base))\n        x //= base\n\
    \    return ''.join(reversed(result))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n  \
    \      return '-' + change_base(-x, base)\n    if x % base == 0:\n        return\
    \ change_base(x // base, base)\n    return change_base(x // base, base) + str(x\
    \ % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n   \
    \ assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0r4h0kk_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0r4h0kk_.py\", line 36,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp0r4h0kk_.py\", line\
    \ 22, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if x < 0:\n  \
    \      return '-' + change_base(-x, base)\n    if x % base == 0:\n        return\
    \ change_base(x // base, base)\n    return change_base(x // base, base) + str(x\
    \ % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n   \
    \ assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0ekd_9t.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_0ekd_9t.py\", line 36,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_0ekd_9t.py\", line\
    \ 22, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz84ak967.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpz84ak967.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpz84ak967.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    return change_base(x\
    \ // base, base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x == 0:\n        return '0'\n\
    \    result = ''\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x //= base\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt96a3678.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt96a3678.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpt96a3678.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksoh32yt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpksoh32yt.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpksoh32yt.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfa5z3aj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkfa5z3aj.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpkfa5z3aj.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x != 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    return change_base(x\
    \ // base, base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x == 0:\n        return '0'\n\
    \    else:\n        return change_base(x // base, base) + str(x % base)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps28prl32.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps28prl32.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmps28prl32.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf82uoxe3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpf82uoxe3.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpf82uoxe3.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x < base:\n        return\
    \ str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp22u0037r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp22u0037r.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp22u0037r.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x == 1:\n\
    \        return '1'\n    else:\n        return change_base(x // base, base) +\
    \ str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdf_4k5in.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdf_4k5in.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpdf_4k5in.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x < base:\n        return\
    \ str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2t7f679o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2t7f679o.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp2t7f679o.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = []\n\
    \    while x > 0:\n        result.append(str(x % base))\n        x //= base\n\
    \    return ''.join(reversed(result))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4nzs8sy9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4nzs8sy9.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp4nzs8sy9.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lenex8z.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0lenex8z.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp0lenex8z.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    assert base < 10\n    if x < base:\n        return\
    \ str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x < 0:\n\
    \        return '-' + change_base(-x, base)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj95byt3u.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpj95byt3u.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpj95byt3u.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93mjb0y0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp93mjb0y0.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp93mjb0y0.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    else:\n      \
    \  return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4g790j3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpf4g790j3.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpf4g790j3.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n \
    \       return change_base(x // base, base) + str(x % base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n\
    \    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
