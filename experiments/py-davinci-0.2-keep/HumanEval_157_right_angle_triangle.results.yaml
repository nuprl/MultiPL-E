name: HumanEval_157_right_angle_triangle
language: python
results:
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ds8fv30.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9ds8fv30.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9ds8fv30.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == 0 or b == 0 or c == 0:\n        return\
    \ False\n    if a == b == c:\n        return False\n    if a > b and a > c:\n\
    \        return a ** 2 == b ** 2 + c ** 2\n    if b > a and b > c:\n        return\
    \ b ** 2 == a ** 2 + c ** 2\n    if c > a and c > b:\n        return c ** 2 ==\
    \ a ** 2 + b ** 2\n    return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93o30qsn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp93o30qsn.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp93o30qsn.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptva0bl20.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptva0bl20.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptva0bl20.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppo7_9bz1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppo7_9bz1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppo7_9bz1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwws6h_po.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwws6h_po.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwws6h_po.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfh5zt9ez.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfh5zt9ez.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfh5zt9ez.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzr7erzl.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxzr7erzl.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxzr7erzl.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5p8bb2tp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5p8bb2tp.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5p8bb2tp.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fh0_r4a.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9fh0_r4a.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9fh0_r4a.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfs_jcll4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfs_jcll4.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfs_jcll4.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == 0 or b == 0 or c == 0:\n        return\
    \ False\n    if a > b and a > c:\n        return a ** 2 == b ** 2 + c ** 2\n \
    \   elif b > a and b > c:\n        return b ** 2 == a ** 2 + c ** 2\n    else:\n\
    \        return c ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzob6q354.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzob6q354.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzob6q354.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw38olat0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw38olat0.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw38olat0.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcn3pi8q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqcn3pi8q.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqcn3pi8q.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg08fw4lh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpg08fw4lh.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpg08fw4lh.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodrvcqig.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpodrvcqig.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpodrvcqig.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1wyuh8x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpy1wyuh8x.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy1wyuh8x.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3d9rua4n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3d9rua4n.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3d9rua4n.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvay1x8p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsvay1x8p.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsvay1x8p.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgw3oojm1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgw3oojm1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgw3oojm1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3uhmb32.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp3uhmb32.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp3uhmb32.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6_nkslj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_6_nkslj.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_6_nkslj.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2xirqy7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx2xirqy7.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpx2xirqy7.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpisje89hs.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpisje89hs.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpisje89hs.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6ideg_v.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa6ideg_v.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpa6ideg_v.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4lphgw6e.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4lphgw6e.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4lphgw6e.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lf3pmcv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8lf3pmcv.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8lf3pmcv.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_a38223.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo_a38223.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpo_a38223.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuce64nf4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuce64nf4.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpuce64nf4.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj_duxaz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfj_duxaz.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfj_duxaz.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a**2 ==\
    \ b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n\
    \    elif c > a and c > b:\n        return c**2 == a**2 + b**2\n    else:\n  \
    \      return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccv1h45s.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpccv1h45s.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpccv1h45s.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e5csnf_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4e5csnf_.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4e5csnf_.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # your code here\n    return a**2 + b**2 ==\
    \ c**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n   \
    \ assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xehia78.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9xehia78.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9xehia78.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppwisnj4q.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppwisnj4q.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppwisnj4q.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n    if a**2 + b**2 == c**2:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t7557i5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9t7557i5.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9t7557i5.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7kqe8s_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi7kqe8s_.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi7kqe8s_.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1m99gm70.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1m99gm70.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1m99gm70.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps070ao6q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmps070ao6q.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmps070ao6q.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0o8_bla.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpy0o8_bla.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy0o8_bla.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8d6i9yu5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8d6i9yu5.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8d6i9yu5.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfq9z6p7d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfq9z6p7d.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfq9z6p7d.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0mbj9x1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa0mbj9x1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpa0mbj9x1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk96u32yd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk96u32yd.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpk96u32yd.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    elif a ** 2 + c ** 2 == b ** 2:\n        return True\n    elif b **\
    \ 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    else:\n        return c ** 2 == a ** 2 + b ** 2\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxikay6j9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxikay6j9.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxikay6j9.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ihy9l83.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3ihy9l83.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3ihy9l83.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0ye0ig9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb0ye0ig9.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb0ye0ig9.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhx5q76a.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvhx5q76a.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvhx5q76a.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ux3kspa.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8ux3kspa.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8ux3kspa.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxt1v_6l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzxt1v_6l.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzxt1v_6l.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwa4omavf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwa4omavf.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwa4omavf.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrotxoy8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgrotxoy8.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgrotxoy8.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85ixh61k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp85ixh61k.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp85ixh61k.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    else:\n        return c ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznzl20h0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpznzl20h0.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpznzl20h0.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgq2w42z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxgq2w42z.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxgq2w42z.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0j6o66h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx0j6o66h.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpx0j6o66h.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpriirz397.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpriirz397.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpriirz397.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    else:\n        return c ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnjdsapz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbnjdsapz.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbnjdsapz.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n    if a**2 + b**2 == c**2:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7dwxtydq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7dwxtydq.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7dwxtydq.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo8v9m_t4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpo8v9m_t4.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpo8v9m_t4.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40dromtw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp40dromtw.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp40dromtw.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhnxshyb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfhnxshyb.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfhnxshyb.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwcpa6_y.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprwcpa6_y.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprwcpa6_y.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzb9ibf8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyzb9ibf8.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpyzb9ibf8.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmp9e1xac.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmp9e1xac.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmp9e1xac.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzs291624.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzs291624.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzs291624.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqiuinoir.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqiuinoir.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqiuinoir.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8ed642l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpm8ed642l.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpm8ed642l.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a**2 ==\
    \ b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n\
    \    elif c > a and c > b:\n        return c**2 == a**2 + b**2\n    else:\n  \
    \      return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppy807ljr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppy807ljr.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppy807ljr.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu42z2im3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu42z2im3.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpu42z2im3.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6225c_1x.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6225c_1x.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6225c_1x.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ih4h6bq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0ih4h6bq.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ih4h6bq.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    else:\n        return c ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6i64hb1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq6i64hb1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpq6i64hb1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppf0ssmw9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppf0ssmw9.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppf0ssmw9.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvv1x1pf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwvv1x1pf.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwvv1x1pf.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpke3orxdz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpke3orxdz.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpke3orxdz.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbrr59q_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjbrr59q_.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjbrr59q_.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2\
    \ == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    else:\n        return c ** 2 == a ** 2 + b ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp033kqpg3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp033kqpg3.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp033kqpg3.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu56xajjk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu56xajjk.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpu56xajjk.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdshoew0l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdshoew0l.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdshoew0l.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76brp9uy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp76brp9uy.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp76brp9uy.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepryjp97.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpepryjp97.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpepryjp97.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatiozjzi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpatiozjzi.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpatiozjzi.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkkdalqe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkkkdalqe.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpkkkdalqe.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpef1aih2t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpef1aih2t.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpef1aih2t.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ol9fijx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2ol9fijx.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp2ol9fijx.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprii5jvts.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprii5jvts.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprii5jvts.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cbzxcw0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1cbzxcw0.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1cbzxcw0.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw720x2k2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw720x2k2.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw720x2k2.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkczplr4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkkczplr4.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpkkczplr4.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36njsh0o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp36njsh0o.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp36njsh0o.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5har8oam.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5har8oam.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5har8oam.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbimyfm95.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbimyfm95.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbimyfm95.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeyx6mmf1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpeyx6mmf1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpeyx6mmf1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a**2 ==\
    \ b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n\
    \    else:\n        return c**2 == a**2 + b**2\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3q6klhw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpy3q6klhw.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy3q6klhw.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kjzqxc1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5kjzqxc1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5kjzqxc1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4hynu9p2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4hynu9p2.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4hynu9p2.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwnkdgv0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptwnkdgv0.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptwnkdgv0.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfr_kc3pr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfr_kc3pr.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfr_kc3pr.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpriktssy5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpriktssy5.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpriktssy5.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbap3huzr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbap3huzr.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbap3huzr.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmlo685l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbmlo685l.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbmlo685l.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvq_12x1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbvq_12x1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbvq_12x1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsc21cp06.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsc21cp06.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsc21cp06.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_cy1zre.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr_cy1zre.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpr_cy1zre.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmr2ionjt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmr2ionjt.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmr2ionjt.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsmherbp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppsmherbp.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppsmherbp.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptle36z85.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptle36z85.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptle36z85.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt9rpyv4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvt9rpyv4.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvt9rpyv4.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps19s6f62.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps19s6f62.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmps19s6f62.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp53ke5jsx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp53ke5jsx.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp53ke5jsx.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1c1pdtd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz1c1pdtd.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpz1c1pdtd.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n    return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gxn2pb4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7gxn2pb4.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7gxn2pb4.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a**2 ==\
    \ b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n\
    \    elif c > a and c > b:\n        return c**2 == a**2 + b**2\n    else:\n  \
    \      return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi41aq_b9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi41aq_b9.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi41aq_b9.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn66eg58_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn66eg58_.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn66eg58_.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpak21ttvg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpak21ttvg.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpak21ttvg.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4k0uevvo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4k0uevvo.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4k0uevvo.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5tib7c0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_5tib7c0.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_5tib7c0.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgr8zxcv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxgr8zxcv.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxgr8zxcv.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8i9l55y1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8i9l55y1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8i9l55y1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpamq6ewnd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpamq6ewnd.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpamq6ewnd.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8br1cun.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpw8br1cun.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw8br1cun.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_89dhn59.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_89dhn59.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_89dhn59.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return True if (a ** 2 + b ** 2 == c ** 2) or\
    \ (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2) else False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 +\
    \ c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q7dptii.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3q7dptii.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3q7dptii.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07_dadpb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp07_dadpb.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp07_dadpb.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8cqw79aa.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8cqw79aa.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8cqw79aa.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 +\
    \ c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3d5fkyx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt3d5fkyx.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt3d5fkyx.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqjk5vm4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcqjk5vm4.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcqjk5vm4.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a > c:\n\
    \        a, c = c, a\n    if b > c:\n        b, c = c, b\n    if a**2 + b**2 ==\
    \ c**2:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpguxp7sxz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpguxp7sxz.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpguxp7sxz.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxf10w40.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsxf10w40.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsxf10w40.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2kkx178.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpm2kkx178.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpm2kkx178.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a < b and a < c:\n        return a**2 + b**2\
    \ == c**2\n    elif b < a and b < c:\n        return b**2 + c**2 == a**2\n   \
    \ else:\n        return a**2 + c**2 == b**2\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8agfkr4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg8agfkr4.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpg8agfkr4.py\"\
    , line 26, in check\n    assert candidate(15, 8, 17) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gkq4uvf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7gkq4uvf.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7gkq4uvf.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6epzm3lu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6epzm3lu.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6epzm3lu.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsj4083lz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsj4083lz.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsj4083lz.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ec94qcv.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3ec94qcv.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3ec94qcv.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0d6_mz2b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0d6_mz2b.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0d6_mz2b.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmgoc220.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjmgoc220.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjmgoc220.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9zcxrzb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_9zcxrzb.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_9zcxrzb.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsckcr_o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfsckcr_o.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfsckcr_o.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7v17ryt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpf7v17ryt.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpf7v17ryt.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputlpjlx1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmputlpjlx1.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmputlpjlx1.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bsfifno.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3bsfifno.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3bsfifno.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
