name: HumanEval_124_valid_date
language: python
results:
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month not in range(1, 13):\n            return False\n\
    \        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day not in range(1,\
    \ 32):\n                return False\n        elif month in [4, 6, 9, 11]:\n \
    \           if day not in range(1, 31):\n                return False\n      \
    \  elif month == 2:\n            if day not in range(1, 30):\n               \
    \ return False\n        return True\n    except:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb4v03jum.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpb4v03jum.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpb4v03jum.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpb4v03jum.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    if date.month not in range(1, 13):\n        return False\n    if\
    \ date.month in [1, 3, 5, 7, 8, 10, 12] and date.day not in range(1, 32):\n  \
    \      return False\n    if date.month in [4, 6, 9, 11] and date.day not in range(1,\
    \ 31):\n        return False\n    if date.month == 2 and date.day not in range(1,\
    \ 30):\n        return False\n    return True\n\n\ndef check(candidate):\n   \
    \ assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') ==\
    \ False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa04bhgxp.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpa04bhgxp.py\", line 57,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpa04bhgxp.py\", line 39,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpa04bhgxp.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        day, month,\
    \ year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\
    \    if not 1 <= month <= 12:\n        return False\n    if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n \
    \   elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n           \
    \ return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuu9ajjbi.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpuu9ajjbi.py\", line 60,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpuu9ajjbi.py\", line 43,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    try:\n        month, day, year\
    \ = int(date[0]), int(date[1]), int(date[2])\n    except ValueError:\n       \
    \ return False\n    if month not in range(1, 13):\n        return False\n    if\
    \ month in [1, 3, 5, 7, 8, 10, 12]:\n        if day not in range(1, 32):\n   \
    \         return False\n    elif month in [4, 6, 9, 11]:\n        if day not in\
    \ range(1, 31):\n            return False\n    elif month == 2:\n        if day\
    \ not in range(1, 30):\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    try:\n        month, day, year\
    \ = int(date[0]), int(date[1]), int(date[2])\n    except ValueError:\n       \
    \ return False\n    if month < 1 or month > 12:\n        return False\n    if\
    \ month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n       \
    \     return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day\
    \ > 30:\n            return False\n    elif month == 2:\n        if day < 1 or\
    \ day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqiryoyrb.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpqiryoyrb.py\", line 62,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpqiryoyrb.py\", line 44,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpqiryoyrb.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    date_list = date.split(\"\
    -\")\n    if len(date_list) != 3:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if date[2] != '-' or\
    \ date[5] != '-':\n        return False\n    if len(date) != 10:\n        return\
    \ False\n    month, day, year = date.split('-')\n    if int(month) < 1 or int(month)\
    \ > 12:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(day) < 1 or int(day) > 31:\n            return False\n    elif\
    \ int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n  \
    \          return False\n    elif int(month) == 2:\n        if int(day) < 1 or\
    \ int(day) > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    try:\n        month = int(date_list[0])\n \
    \       day = int(date_list[1])\n        year = int(date_list[2])\n    except\
    \ ValueError:\n        return False\n    if month < 1 or month > 12:\n       \
    \ return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or\
    \ day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n    \
    \    if day < 1 or day > 30:\n            return False\n    elif month == 2:\n\
    \        if day < 1 or day > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month not in range(1, 13):\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day not in range(1, 32):\n\
    \            return False\n    elif month in (4, 6, 9, 11):\n        if day not\
    \ in range(1, 31):\n            return False\n    elif month == 2:\n        if\
    \ day not in range(1, 30):\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdbqb1yze.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpdbqb1yze.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpdbqb1yze.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpdbqb1yze.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if date[2] != '-' or date[5] != '-':\n        return\
    \ False\n    month, day, year = date.split('-')\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return\
    \ False\n    if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n\
    \    if int(date[0:2]) == 2 and int(date[3:5]) > 29:\n        return False\n \
    \   if int(date[0:2]) in [4, 6, 9, 11] and int(date[3:5]) > 30:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not 1 <= month <= 12:\n        return False\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n          \
    \  return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n      \
    \      return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if day < 1\
    \ or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day >\
    \ 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not (1 <= month <= 12 and 1 <= day <= 31 and year > 0):\n    \
    \    return False\n    if month in (4, 6, 9, 11) and day > 30:\n        return\
    \ False\n    if month == 2 and day > 29:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if date[2] != '-' or date[5] != '-':\n        return\
    \ False\n    if not date[:2].isdigit() or not date[3:5].isdigit() or not date[6:].isdigit():\n\
    \        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n \
    \   year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if day < 1\
    \ or day > 31:\n        return False\n    if month in (4, 6, 9, 11) and day >\
    \ 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if date[2] != '-' or date[5] != '-':\n        return\
    \ False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n\
    \    if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n   \
    \ if int(date[0:2]) == 2 and int(date[3:5]) > 29:\n        return False\n    if\
    \ int(date[0:2]) in [4, 6, 9, 11] and int(date[3:5]) > 30:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpje7e6m29.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpje7e6m29.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpje7e6m29.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpje7e6m29.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    months = {\n        1: 31,\n        2: 29,\n        3: 31,\n\
    \        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n\
    \        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n   \
    \ if date == '':\n        return False\n    if date.count('-') != 2:\n       \
    \ return False\n    date = date.split('-')\n    if len(date) != 3:\n        return\
    \ False\n    if not date[0].isdigit() or not date[1].isdigit() or not date[2].isdigit():\n\
    \        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n       \
    \ return False\n    if int(date[1]) < 1 or int(date[1]) > months[int(date[0])]:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    # your code here\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4ve1o9h.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpa4ve1o9h.py\", line 44,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpa4ve1o9h.py\", line 26,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppys2cy1w.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmppys2cy1w.py\", line 48,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmppys2cy1w.py\", line 30,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmppys2cy1w.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month not in range(1, 13):\n            return False\n\
    \        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day not in range(1,\
    \ 32):\n                return False\n        elif month in [4, 6, 9, 11]:\n \
    \           if day not in range(1, 31):\n                return False\n      \
    \  elif month == 2:\n            if day not in range(1, 30):\n               \
    \ return False\n        return True\n    except:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpez5ijwl1.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpez5ijwl1.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpez5ijwl1.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpez5ijwl1.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if len(date_list[0]) !=\
    \ 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return False\n\
    \    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not (1 <= month <= 12 and 1 <= day <= 31 and year > 0):\n    \
    \    return False\n    if month in (4, 6, 9, 11) and day > 30:\n        return\
    \ False\n    if month == 2 and day > 29:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    month, day, year = date.split('-')\n    if not\
    \ month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n    month, day, year = int(month), int(day), int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0pia8aoe.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0pia8aoe.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp0pia8aoe.py\", line 31,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp0pia8aoe.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp45pvqge0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp45pvqge0.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp45pvqge0.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp45pvqge0.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n    month, day, year = int(month), int(day), int(year)\n  \
    \  if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except Exception:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if date[0:2].isdigit() is False or date[3:5].isdigit() is\
    \ False or date[6:10].isdigit() is False:\n        return False\n    if int(date[0:2])\
    \ < 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[0:2]) in\
    \ [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[3:5]) < 1 or int(date[3:5]) >\
    \ 31:\n            return False\n    elif int(date[0:2]) in [4, 6, 9, 11]:\n \
    \       if int(date[3:5]) < 1 or int(date[3:5]) > 30:\n            return False\n\
    \    elif int(date[0:2]) == 2:\n        if int(date[3:5]) < 1 or int(date[3:5])\
    \ > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsthaozo2.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpsthaozo2.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpsthaozo2.py\", line 31,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpsthaozo2.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        date = [int(i)\
    \ for i in date]\n        if date[0] > 12 or date[0] < 1:\n            return\
    \ False\n        elif date[0] in [1, 3, 5, 7, 8, 10, 12]:\n            if date[1]\
    \ > 31 or date[1] < 1:\n                return False\n        elif date[0] in\
    \ [4, 6, 9, 11]:\n            if date[1] > 30 or date[1] < 1:\n              \
    \  return False\n        elif date[0] == 2:\n            if date[1] > 29 or date[1]\
    \ < 1:\n                return False\n        return True\n    except:\n     \
    \   return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpecp2w6bm.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpecp2w6bm.py\", line 62,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpecp2w6bm.py\", line 44,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpecp2w6bm.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    date_list = date.split(\"\
    -\")\n    if len(date_list) != 3:\n        return False\n    if len(date_list[0])\
    \ != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    elif int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    else:\n        if int(date_list[1]) < 1\
    \ or int(date_list[1]) > 30:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    month, day, year = date.split('-')\n    if not\
    \ month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n    month, day, year = int(month), int(day), int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        if len(date) !=\
    \ 3:\n            return False\n        month, day, year = date\n        month\
    \ = int(month)\n        day = int(day)\n        year = int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n\
    \        year = int(year)\n    except ValueError:\n        return False\n    if\
    \ month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7,\
    \ 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n   \
    \ elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return\
    \ False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fphesrr.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp6fphesrr.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp6fphesrr.py\", line 31,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp6fphesrr.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeos1ke4e.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpeos1ke4e.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpeos1ke4e.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpeos1ke4e.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ao4ojbt.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmp7ao4ojbt.py\", line 62,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp7ao4ojbt.py\", line 44,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp7ao4ojbt.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    if int(date[0:2]) < 1 or\
    \ int(date[0:2]) > 12:\n        return False\n    if int(date[3:5]) < 1 or int(date[3:5])\
    \ > 31:\n        return False\n    if int(date[0:2]) == 2 and int(date[3:5]) >\
    \ 29:\n        return False\n    if int(date[0:2]) in [4, 6, 9, 11] and int(date[3:5])\
    \ > 30:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp48r569gm.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp48r569gm.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp48r569gm.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp48r569gm.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        if not (1 <= int(month) <= 12):\n     \
    \       return False\n        if int(month) in (1, 3, 5, 7, 8, 10, 12):\n    \
    \        if not (1 <= int(day) <= 31):\n                return False\n       \
    \ elif int(month) in (4, 6, 9, 11):\n            if not (1 <= int(day) <= 30):\n\
    \                return False\n        elif int(month) == 2:\n            if not\
    \ (1 <= int(day) <= 29):\n                return False\n        return True\n\
    \    except ValueError:\n        return False\n\n\ndef check(candidate):\n   \
    \ assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') ==\
    \ False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    if date.month < 1 or date.month > 12:\n        return False\n   \
    \ if date.month in (1, 3, 5, 7, 8, 10, 12):\n        if date.day < 1 or date.day\
    \ > 31:\n            return False\n    elif date.month in (4, 6, 9, 11):\n   \
    \     if date.day < 1 or date.day > 30:\n            return False\n    elif date.month\
    \ == 2:\n        if date.day < 1 or date.day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplxhm6yjq.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmplxhm6yjq.py\", line 60,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmplxhm6yjq.py\", line 42,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmplxhm6yjq.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n    month, day, year = int(month), int(day), int(year)\n  \
    \  if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    date_list = date.split(\"\
    -\")\n    if len(date_list) != 3:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if date[0:2].isdigit() is False or date[3:5].isdigit() is\
    \ False or date[6:10].isdigit() is False:\n        return False\n    if int(date[0:2])\
    \ < 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[0:2]) ==\
    \ 2:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 29:\n            return\
    \ False\n    elif int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[3:5])\
    \ < 1 or int(date[3:5]) > 31:\n            return False\n    elif int(date[0:2])\
    \ in [4, 6, 9, 11]:\n        if int(date[3:5]) < 1 or int(date[3:5]) > 30:\n \
    \           return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    if date.month not in range(1, 13):\n        return False\n    if\
    \ date.month in [1, 3, 5, 7, 8, 10, 12] and date.day not in range(1, 32):\n  \
    \      return False\n    if date.month in [4, 6, 9, 11] and date.day not in range(1,\
    \ 31):\n        return False\n    if date.month == 2 and date.day not in range(1,\
    \ 30):\n        return False\n    return True\n\n\ndef check(candidate):\n   \
    \ assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') ==\
    \ False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp37qxnsr6.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp37qxnsr6.py\", line 57,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp37qxnsr6.py\", line 39,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp37qxnsr6.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    try:\n        month, day, year\
    \ = int(date[0]), int(date[1]), int(date[2])\n    except ValueError:\n       \
    \ return False\n    if month < 1 or month > 12:\n        return False\n    if\
    \ month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n       \
    \     return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day\
    \ > 30:\n            return False\n    elif month == 2:\n        if day < 1 or\
    \ day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        day, month,\
    \ year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\
    \    if not 1 <= month <= 12:\n        return False\n    if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n \
    \   elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n           \
    \ return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vn9w70g.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp0vn9w70g.py\", line 60,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp0vn9w70g.py\", line 43,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    if date.month > 12 or date.month < 1:\n        return False\n   \
    \ if date.month in [1, 3, 5, 7, 8, 10, 12]:\n        if date.day > 31 or date.day\
    \ < 1:\n            return False\n    elif date.month in [4, 6, 9, 11]:\n    \
    \    if date.day > 30 or date.day < 1:\n            return False\n    elif date.month\
    \ == 2:\n        if date.day > 29 or date.day < 1:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_3ztz0be.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp_3ztz0be.py\", line 60,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp_3ztz0be.py\", line 42,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp_3ztz0be.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = datetime.strptime(date, '%m-%d-%Y')\n  \
    \      return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdmy63wn.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpvdmy63wn.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpvdmy63wn.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpvdmy63wn.py\"\
    , line 22, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqiucawk.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpdqiucawk.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpdqiucawk.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpdqiucawk.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75bb88zs.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp75bb88zs.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp75bb88zs.py\", line 31,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp75bb88zs.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        if len(date) !=\
    \ 3:\n            return False\n        month, day, year = date\n        month\
    \ = int(month)\n        day = int(day)\n        year = int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    month, day, year = date.split('-')\n    if not\
    \ month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n    month, day, year = int(month), int(day), int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    if date.count('/') != 0:\n        return False\n\
    \    date_list = date.split('-')\n    if len(date_list) != 3:\n        return\
    \ False\n    if len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2])\
    \ != 4:\n        return False\n    if int(date_list[0]) > 12 or int(date_list[0])\
    \ < 1:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month not in range(1, 13):\n            return False\n\
    \        if month in (1, 3, 5, 7, 8, 10, 12):\n            if day not in range(1,\
    \ 32):\n                return False\n        elif month in (4, 6, 9, 11):\n \
    \           if day not in range(1, 31):\n                return False\n      \
    \  elif month == 2:\n            if day not in range(1, 30):\n               \
    \ return False\n        return True\n    except ValueError:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if day < 1\
    \ or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day >\
    \ 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n\
    \        year = int(date[2])\n        if month < 1 or month > 12:\n          \
    \  return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if\
    \ day < 1 or day > 31:\n                return False\n        elif month in [4,\
    \ 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n\
    \        elif month == 2:\n            if day < 1 or day > 29:\n             \
    \   return False\n        if year < 0:\n            return False\n        return\
    \ True\n    except:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    # your code here\n    if len(date) == 0:\n        return False\n\
    \    if date.count('-') != 2:\n        return False\n    if date.count('/') !=\
    \ 0:\n        return False\n    if date.count('.') != 0:\n        return False\n\
    \    if date.count(' ') != 0:\n        return False\n    if date.count('\\\\')\
    \ != 0:\n        return False\n    if date.count('_') != 0:\n        return False\n\
    \    if date.count('*') != 0:\n        return False\n    if date.count('+') !=\
    \ 0:\n        return False\n    if date.count('#') != 0:\n        return False\n\
    \    if date.count('$') != 0:\n        return False\n    if date.count('%') !=\
    \ 0:\n        return False\n    if date.count('^') != 0:\n        return False\n\
    \    if date.count('&') != 0:\n        return False\n    if date.count('(') !=\
    \ 0:\n        return False\n    if date.count(')') != 0:\n        return False\n\
    \    if date.count('=') != 0:\n        return False\n    if date.count('@') !=\
    \ 0:\n        return False\n    if date.count('!') != 0:\n        return False\n\
    \    if date.count('~') != 0:\n        return False\n    if date.count('`') !=\
    \ 0:\n        return False\n    if date.count('{') != 0:\n        return False\n\
    \    if date.count('}') != 0:\n        return False\n    if date.count('[') !=\
    \ 0:\n        return False\n    if date.count(']') != 0:\n        return False\n\
    \    if date.count('|') != 0:\n        return False\n    if date.count(';') !=\
    \ 0:\n        return False\n    if date.count(':') != 0:\n        return False\n\
    \    if date.count('\"') != 0:\n        return False\n    if date.count(\"'\"\
    ) != 0:\n        return False\n    if date.count('<') != 0:\n        return False\n\
    \    if date.count('>') != 0:\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp33zbuk2c.py\", line 85\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if '-' not in date:\n\
    \        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    month, day, year = date_list\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        if len(date) !=\
    \ 3:\n            return False\n        month, day, year = date\n        month\
    \ = int(month)\n        day = int(day)\n        year = int(year)\n        if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day > 31:\n         \
    \       return False\n        elif month in (4, 6, 9, 11):\n            if day\
    \ < 1 or day > 30:\n                return False\n        elif month == 2:\n \
    \           if day < 1 or day > 29:\n                return False\n        else:\n\
    \            return False\n        if month < 1 or month > 12:\n            return\
    \ False\n        if year < 1:\n            return False\n        return True\n\
    \    except:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if len(date_list[0]) !=\
    \ 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n\
    \    if not (date_list[0].isdigit() and date_list[1].isdigit() and date_list[2].isdigit()):\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ date.split('-')\n        if len(date) != 3:\n            return False\n    \
    \    month, day, year = date\n        month = int(month)\n        day = int(day)\n\
    \        year = int(year)\n        if month < 1 or month > 12:\n            return\
    \ False\n        if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1\
    \ or day > 31:\n                return False\n        elif month in (4, 6, 9,\
    \ 11):\n            if day < 1 or day > 30:\n                return False\n  \
    \      elif month == 2:\n            if day < 1 or day > 29:\n               \
    \ return False\n        return True\n    except ValueError:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpner41hzk.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpner41hzk.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpner41hzk.py\", line 31,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpner41hzk.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not 1 <= month <= 12:\n        return False\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n          \
    \  return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n      \
    \      return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh_qjtm8.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpxh_qjtm8.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpxh_qjtm8.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpxh_qjtm8.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not 1 <= month <= 12:\n        return False\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n          \
    \  return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n      \
    \      return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    date_list = date.split('-')\n    if len(date_list) != 3:\n  \
    \      return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month not in range(1, 13):\n        return False\n    if day not\
    \ in range(1, 32):\n        return False\n    if month in (4, 6, 9, 11) and day\
    \ == 31:\n        return False\n    if month == 2 and day > 29:\n        return\
    \ False\n    if month == 2 and day == 29 and not is_leap_year(year):\n       \
    \ return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    try:\n        date\
    \ = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n\
    \        year = int(date[2])\n        if month < 1 or month > 12:\n          \
    \  return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if\
    \ day < 1 or day > 31:\n                return False\n        elif month in [4,\
    \ 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n\
    \        elif month == 2:\n            if day < 1 or day > 29:\n             \
    \   return False\n        return True\n    except:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgbbw2p6.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmplgbbw2p6.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmplgbbw2p6.py\", line 31,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmplgbbw2p6.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    # your code here\n    if date == '':\n        return False\n\
    \    else:\n        date = date.split('-')\n        if len(date) != 3:\n     \
    \       return False\n        else:\n            month = int(date[0])\n      \
    \      day = int(date[1])\n            year = int(date[2])\n            if month\
    \ < 1 or month > 12:\n                return False\n            elif month in\
    \ [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1 or day > 31:\n        \
    \            return False\n            elif month in [4, 6, 9, 11]:\n        \
    \        if day < 1 or day > 30:\n                    return False\n         \
    \   elif month == 2:\n                if day < 1 or day > 29:\n              \
    \      return False\n            return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[0:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n    month, day, year = int(month), int(day), int(year)\n  \
    \  if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n    month, day, year = int(month), int(day), int(year)\n  \
    \  if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = date.split('-')\n\
    \    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptqw472vu.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmptqw472vu.py\", line 62,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmptqw472vu.py\", line 44,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmptqw472vu.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    date_list = date.split(\"\
    -\")\n    if len(date_list) != 3:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if day < 1\
    \ or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day >\
    \ 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    if date.count(\"\
    -\") != 2:\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n\
    \        year = int(year)\n    except ValueError:\n        return False\n    if\
    \ month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7,\
    \ 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n   \
    \ elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return\
    \ False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except Exception:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not (1 <= month <= 12 and 1 <= day <= 31 and year > 0):\n    \
    \    return False\n    if month in (4, 6, 9, 11) and day > 30:\n        return\
    \ False\n    if month == 2 and day > 29:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    date_list = date.split(\"\
    -\")\n    if len(date_list) != 3:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        day, month,\
    \ year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\
    \    if not 1 <= month <= 12:\n        return False\n    if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n \
    \   elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n           \
    \ return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb83jos5o.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpb83jos5o.py\", line 60,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpb83jos5o.py\", line 43,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        if len(date) !=\
    \ 3:\n            return False\n        month, day, year = date\n        month\
    \ = int(month)\n        day = int(day)\n        year = int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n\
    \            return False\n        if month in [4, 6, 9, 11] and day > 30:\n \
    \           return False\n        if month == 2 and day > 29:\n            return\
    \ False\n        return True\n    except:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n\
    \        year = int(date[2])\n        if month < 1 or month > 12:\n          \
    \  return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if\
    \ day < 1 or day > 31:\n                return False\n        elif month in [4,\
    \ 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n\
    \        elif month == 2:\n            if day < 1 or day > 29:\n             \
    \   return False\n        return True\n    except:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        if len(date) !=\
    \ 3:\n            return False\n        day, month, year = date\n        if not\
    \ day.isdigit() or not month.isdigit() or not year.isdigit():\n            return\
    \ False\n        day, month, year = int(day), int(month), int(year)\n        if\
    \ month < 1 or month > 12:\n            return False\n        if month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppr0_d5iv.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmppr0_d5iv.py\", line 64,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmppr0_d5iv.py\", line 47,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return\
    \ False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ in [4, 6, 9, 11]:\n        if int(date_list[1]) > 30 or int(date_list[1]) <\
    \ 1:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ > 29 or int(date_list[1]) < 1:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n    except ValueError:\n        return False\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph32tdije.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmph32tdije.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmph32tdije.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmph32tdije.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5l_ciotd.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5l_ciotd.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp5l_ciotd.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp5l_ciotd.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n    except ValueError:\n        return False\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if int(date_list[0]) not\
    \ in range(1, 13):\n        return False\n    if int(date_list[0]) in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if int(date_list[1]) not in range(1, 32):\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ not in range(1, 31):\n            return False\n    elif int(date_list[0]) ==\
    \ 2:\n        if int(date_list[1]) not in range(1, 30):\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month not in range(1, 13):\n        return False\n    if month\
    \ in (1, 3, 5, 7, 8, 10, 12):\n        if day not in range(1, 32):\n         \
    \   return False\n    elif month in (4, 6, 9, 11):\n        if day not in range(1,\
    \ 31):\n            return False\n    elif month == 2:\n        if day not in\
    \ range(1, 30):\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if date[2] != '-' or\
    \ date[5] != '-':\n        return False\n    if len(date) != 10:\n        return\
    \ False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n\
    \    if int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n   \
    \ if int(date[6:10]) < 1:\n        return False\n    if int(date[0:2]) == 2 and\
    \ int(date[3:5]) > 29:\n        return False\n    if int(date[0:2]) in [4, 6,\
    \ 9, 11] and int(date[3:5]) > 30:\n        return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[0:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month == 2:\n        if day < 1 or day >\
    \ 29:\n            return False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    month, day, year = date\n \
    \   if not month.isdigit() or not day.isdigit() or not year.isdigit():\n     \
    \   return False\n    month, day, year = int(month), int(day), int(year)\n   \
    \ if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    if date.count('/') != 0:\n        return False\n\
    \    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit()\
    \ or not year.isdigit():\n        return False\n    month = int(month)\n    day\
    \ = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if date[0:2].isdigit() and date[3:5].isdigit() and date[6:10].isdigit():\n\
    \        month = int(date[0:2])\n        day = int(date[3:5])\n        year =\
    \ int(date[6:10])\n        if month < 1 or month > 12:\n            return False\n\
    \        if month == 2:\n            if day < 1 or day > 29:\n               \
    \ return False\n        elif month == 1 or month == 3 or month == 5 or month ==\
    \ 7 or month == 8 or month == 10 or month == 12:\n            if day < 1 or day\
    \ > 31:\n                return False\n        else:\n            if day < 1 or\
    \ day > 30:\n                return False\n        return True\n    else:\n  \
    \      return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in (1, 3, 5, 7, 8, 10, 12):\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in (4, 6, 9, 11):\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    if date.count(\"\
    -\") != 2:\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ > 12 or int(date_list[0]) < 1:\n        return False\n    if int(date_list[1])\
    \ > 31 or int(date_list[1]) < 1:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) > 31:\n          \
    \  return False\n    if int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30:\n            return False\n    if int(date_list[0]) == 2:\n        if\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    month, day, year = date.split('-')\n    if not\
    \ month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n    month, day, year = int(month), int(day), int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    if date.count(\"\
    -\") != 2:\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    if len(date_list[2])\
    \ != 4:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not (1 <= month <= 12 and 1 <= day <= 31 and year > 0):\n    \
    \    return False\n    if month in (4, 6, 9, 11) and day > 30:\n        return\
    \ False\n    if month == 2 and day > 29:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66oitmat.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp66oitmat.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp66oitmat.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp66oitmat.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    month, day, year = date.split('-')\n    if not\
    \ month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n    month, day, year = int(month), int(day), int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if date[0:2].isdigit() and date[3:5].isdigit() and date[6:10].isdigit():\n\
    \        if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n            return False\n\
    \        if int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n            if int(date[3:5])\
    \ < 1 or int(date[3:5]) > 31:\n                return False\n        if int(date[0:2])\
    \ in [4, 6, 9, 11]:\n            if int(date[3:5]) < 1 or int(date[3:5]) > 30:\n\
    \                return False\n        if int(date[0:2]) == 2:\n            if\
    \ int(date[3:5]) < 1 or int(date[3:5]) > 29:\n                return False\n \
    \       return True\n    return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if date[2] != '-' or date[5] != '-':\n        return\
    \ False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except\
    \ ValueError:\n        return False\n    if month < 1 or month > 12:\n       \
    \ return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or\
    \ day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n    \
    \    if day < 1 or day > 30:\n            return False\n    elif month == 2:\n\
    \        if day < 1 or day > 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlxrxid3.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmprlxrxid3.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmprlxrxid3.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmprlxrxid3.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    date_list = date.split('-')\n\
    \    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnaqounk.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpmnaqounk.py\", line 62,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpmnaqounk.py\", line 44,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpmnaqounk.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        day, month,\
    \ year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2g0c6wn.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpv2g0c6wn.py\", line 60,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpv2g0c6wn.py\", line 43,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    month, day, year = date.split('-')\n    if not\
    \ month.isdigit() or not day.isdigit() or not year.isdigit():\n        return\
    \ False\n    month, day, year = int(month), int(day), int(year)\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    if date[2] != '-' or\
    \ date[5] != '-':\n        return False\n    if len(date) != 10:\n        return\
    \ False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6znwo4o.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpz6znwo4o.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpz6znwo4o.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpz6znwo4o.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if day < 1\
    \ or day > 31:\n        return False\n    if month in (4, 6, 9, 11) and day >\
    \ 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n    month, day, year = int(month), int(day), int(year)\n  \
    \  if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        month = int(date[0])\n\
    \        day = int(date[1])\n        year = int(date[2])\n        if month < 1\
    \ or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n            if day < 1 or day > 31:\n                return False\n\
    \        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n \
    \               return False\n        elif month == 2:\n            if day < 1\
    \ or day > 29:\n                return False\n        return True\n    except:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if date[2] != '-' or date[5] != '-':\n        return\
    \ False\n    month, day, year = date.split('-')\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    if date.count('/') != 0:\n        return False\n\
    \    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        year = int(date[2])\n\
    \        month = int(date[0])\n        day = int(date[1])\n        if year < 0\
    \ or month < 1 or month > 12 or day < 1:\n            return False\n        if\
    \ month in [1, 3, 5, 7, 8, 10, 12]:\n            if day > 31:\n              \
    \  return False\n        elif month in [4, 6, 9, 11]:\n            if day > 30:\n\
    \                return False\n        elif month == 2:\n            if day >\
    \ 29:\n                return False\n        return True\n    except:\n      \
    \  return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if '/' in date:\n   \
    \     return False\n    date_list = date.split('-')\n    if len(date_list) !=\
    \ 3:\n        return False\n    month, day, year = date_list\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if len(date) != 10:\n\
    \        return False\n    if date[2] != '-' or date[5] != '-':\n        return\
    \ False\n    try:\n        month, day, year = date.split('-')\n        month =\
    \ int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n\
    \        return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month not in range(1, 13):\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12] and day not in range(1, 32):\n      \
    \  return False\n    if month in [4, 6, 9, 11] and day not in range(1, 31):\n\
    \        return False\n    if month == 2 and day not in range(1, 30):\n      \
    \  return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxrdog_uc.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpxrdog_uc.py\", line 56,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpxrdog_uc.py\", line 38,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpxrdog_uc.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not 1 <= month <= 12:\n        return False\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n          \
    \  return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n      \
    \      return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    try:\n        month, day, year\
    \ = map(int, date)\n    except ValueError:\n        return False\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10,\
    \ 12):\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    # your code here\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpwkkr13.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmphpwkkr13.py\", line 44,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmphpwkkr13.py\", line 26,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    if not date[0].isdigit() or\
    \ not date[1].isdigit() or not date[2].isdigit():\n        return False\n    month\
    \ = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month\
    \ < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if int(date_list[0]) not\
    \ in range(1, 13):\n        return False\n    if int(date_list[0]) in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if int(date_list[1]) not in range(1, 32):\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ not in range(1, 31):\n            return False\n    elif int(date_list[0]) ==\
    \ 2:\n        if int(date_list[1]) not in range(1, 30):\n            return False\n\
    \    if len(date_list[2]) != 4:\n        return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    try:\n        day,\
    \ month, year = date.split('-')\n        day, month, year = int(day), int(month),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvvjxg8c.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpmvvjxg8c.py\", line 61,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpmvvjxg8c.py\", line 44,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n        if month < 1 or month > 12:\n            return False\n \
    \       if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day >\
    \ 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n  \
    \          if day < 1 or day > 30:\n                return False\n        elif\
    \ month == 2:\n            if day < 1 or day > 29:\n                return False\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = date.split('-')\n        month = int(date[0])\n\
    \        day = int(date[1])\n        year = int(date[2])\n        if month < 1\
    \ or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n            if day < 1 or day > 31:\n                return False\n\
    \        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n \
    \               return False\n        elif month == 2:\n            if day < 1\
    \ or day > 29:\n                return False\n        return True\n    except:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if date.count('-')\
    \ != 2:\n        return False\n    if date.count('/') != 0:\n        return False\n\
    \    if date.count(' ') != 0:\n        return False\n    if date.count('.') !=\
    \ 0:\n        return False\n    if date.count('\\\\') != 0:\n        return False\n\
    \    if date.count('_') != 0:\n        return False\n    if date.count('*') !=\
    \ 0:\n        return False\n    if date.count('#') != 0:\n        return False\n\
    \    if date.count('@') != 0:\n        return False\n    if date.count('$') !=\
    \ 0:\n        return False\n    if date.count('%') != 0:\n        return False\n\
    \    if date.count('^') != 0:\n        return False\n    if date.count('&') !=\
    \ 0:\n        return False\n    if date.count('(') != 0:\n        return False\n\
    \    if date.count(')') != 0:\n        return False\n    if date.count('+') !=\
    \ 0:\n        return False\n    if date.count('=') != 0:\n        return False\n\
    \    if date.count('[') != 0:\n        return False\n    if date.count(']') !=\
    \ 0:\n        return False\n    if date.count('{') != 0:\n        return False\n\
    \    if date.count('}') != 0:\n        return False\n    if date.count(';') !=\
    \ 0:\n        return False\n    if date.count(':') != 0:\n        return False\n\
    \    if date.count('\"') != 0:\n        return False\n    if date.count(\"'\"\
    ) != 0:\n        return False\n    if date.count('<') != 0:\n        return False\n\
    \    if date.count('>') != 0:\n        return False\n    if date.count(',') !=\
    \ 0:\n        return False\n    if date.count('?') != 0:\n        return False\n\
    \    if date.count('!') != 0:\n        return False\n    if date.count('~') !=\
    \ 0:\n        return False\n   \ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmper8ueqbu.py\", line\
    \ 107, in <module>\n    test_check()\n  File \"/tmp/tmper8ueqbu.py\", line 105,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmper8ueqbu.py\", line 87,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    try:\n        month,\
    \ day, year = date.split('-')\n        month, day, year = int(month), int(day),\
    \ int(year)\n    except ValueError:\n        return False\n    if month not in\
    \ range(1, 13):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day not in range(1, 32):\n            return False\n    elif month\
    \ in [4, 6, 9, 11]:\n        if day not in range(1, 31):\n            return False\n\
    \    elif month == 2:\n        if day not in range(1, 30):\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n\
    \        return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjcvxtor.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmppjcvxtor.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmppjcvxtor.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmppjcvxtor.py\"\
    , line 22, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlrmfglh.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpdlrmfglh.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpdlrmfglh.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpdlrmfglh.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if not 1 <= month <= 12:\n        return False\n    if month in (1,\
    \ 3, 5, 7, 8, 10, 12):\n        if not 1 <= day <= 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if not 1 <= day <= 30:\n          \
    \  return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n      \
    \      return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if date.count('-') !=\
    \ 2:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    month, day, year = date_list\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month > 12 or month < 1:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day > 31 or day < 1:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day > 30\
    \ or day < 1:\n            return False\n    elif month == 2:\n        if day\
    \ > 29 or day < 1:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaun7ktx.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpkaun7ktx.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpkaun7ktx.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpkaun7ktx.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    try:\n        date = datetime.strptime(date, '%m-%d-%Y')\n  \
    \      return True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytgac0c6.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpytgac0c6.py\", line 47,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpytgac0c6.py\", line 29,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpytgac0c6.py\"\
    , line 22, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    # Your code here\n    if len(date) == 0:\n        return False\n\
    \    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5]\
    \ != '-':\n        return False\n    if int(date[0:2]) > 12 or int(date[0:2])\
    \ < 1:\n        return False\n    if int(date[3:5]) > 31 or int(date[3:5]) < 1:\n\
    \        return False\n    if int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n   \
    \     if int(date[3:5]) > 31:\n            return False\n    if int(date[0:2])\
    \ in [4, 6, 9, 11]:\n        if int(date[3:5]) > 30:\n            return False\n\
    \    if int(date[0:2]) == 2:\n        if int(date[3:5]) > 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = map(int, date.split('-'))\n    except ValueError:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if month in\
    \ (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return\
    \ False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n \
    \           return False\n    elif month == 2:\n        if day < 1 or day > 29:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month not in range(1, 13):\n        return False\n\
    \    if day not in range(1, 32):\n        return False\n    if month in (4, 6,\
    \ 9, 11) and day == 31:\n        return False\n    if month == 2 and day > 29:\n\
    \        return False\n    if month == 2 and day == 29 and not is_leap_year(year):\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7yournva.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp7yournva.py\", line 58,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp7yournva.py\", line 40,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp7yournva.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    date_list = date.split('-')\n    if len(date_list) != 3:\n  \
    \      return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        month,\
    \ day, year = [int(i) for i in date.split('-')]\n    except ValueError:\n    \
    \    return False\n    if month < 1 or month > 12:\n        return False\n   \
    \ if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n    \
    \        return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n\
    \    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n    \
    \    return False\n    month, day, year = int(month), int(day), int(year)\n  \
    \  if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == \"\":\n        return False\n    elif date[2] != \"\
    -\" or date[5] != \"-\":\n        return False\n    else:\n        month = int(date[0:2])\n\
    \        day = int(date[3:5])\n        year = int(date[6:])\n        if month\
    \ < 1 or month > 12:\n            return False\n        elif month == 2 and day\
    \ > 29:\n            return False\n        elif month in [1, 3, 5, 7, 8, 10, 12]\
    \ and day > 31:\n            return False\n        elif month in [4, 6, 9, 11]\
    \ and day > 30:\n            return False\n        else:\n            return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    if not re.match(r'^\\\
    d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int,\
    \ date.split('-'))\n    if month < 1 or month > 12:\n        return False\n  \
    \  if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n   \
    \         return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day <\
    \ 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1qrsomf.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpi1qrsomf.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpi1qrsomf.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpi1qrsomf.py\"\
    , line 23, in valid_date\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) !=\
    \ 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n      \
    \  return False\n    if not date[0:2].isdigit() or not date[3:5].isdigit() or\
    \ not date[6:].isdigit():\n        return False\n    month = int(date[0:2])\n\
    \    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month\
    \ > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \    if day < 1 or day > 31:\n            return False\n    elif month in [4,\
    \ 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif\
    \ month == 2:\n        if day < 1 or day > 29:\n            return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if not date:\n        return False\n    try:\n        date =\
    \ datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_t2axrd.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp9_t2axrd.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp9_t2axrd.py\", line 31,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp9_t2axrd.py\"\
    , line 24, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\
    \n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\
    \n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\
    \    \"\"\"\n    if date == '':\n        return False\n    date_list = date.split('-')\n\
    \    if len(date_list) != 3:\n        return False\n    if not date_list[0].isdigit()\
    \ or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return\
    \ False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year\
    \ = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
