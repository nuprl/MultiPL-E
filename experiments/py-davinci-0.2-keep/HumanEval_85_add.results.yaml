name: HumanEval_85_add
language: python
results:
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    print(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\n\
    \ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2\
    \ != 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    print(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4, 88])\
    \ == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([i for i in lst[1::2] if i % 2 == 0])\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\n\nprint(add([4, 2, 6, 7]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2\
    \ == 0])\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\
    \    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
