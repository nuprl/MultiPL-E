name: HumanEval_97_multiply
language: python
results:
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzjlg99_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphzjlg99_.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmphzjlg99_.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmmzqf9o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcmmzqf9o.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpcmmzqf9o.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfs12nsq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxfs12nsq.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpxfs12nsq.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17_b8gay.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp17_b8gay.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp17_b8gay.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8z6dhsh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx8z6dhsh.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpx8z6dhsh.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2idduuf3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2idduuf3.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp2idduuf3.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7py0ff_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu7py0ff_.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpu7py0ff_.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwpojo5i.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfwpojo5i.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpfwpojo5i.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyl2j34pg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyl2j34pg.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpyl2j34pg.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8l99i3rh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8l99i3rh.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp8l99i3rh.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
