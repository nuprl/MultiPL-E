name: HumanEval_158_find_max
language: python
results:
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vt14mv_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3vt14mv_.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3vt14mv_.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7wbu67ch.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7wbu67ch.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7wbu67ch.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_cll843.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo_cll843.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo_cll843.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp575vkjl1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp575vkjl1.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp575vkjl1.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9s5p2oix.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9s5p2oix.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9s5p2oix.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkl7k9qt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnkl7k9qt.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnkl7k9qt.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2e0h8vd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm2e0h8vd.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpm2e0h8vd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpioh4ksf3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpioh4ksf3.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpioh4ksf3.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb80lg6l2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpb80lg6l2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpb80lg6l2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bp40q2a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9bp40q2a.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9bp40q2a.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vkaujd4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0vkaujd4.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0vkaujd4.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyup56lm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoyup56lm.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpoyup56lm.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\nprint(find_max([\"name\"\
    , \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_jp2dh3.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpm_jp2dh3.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpm_jp2dh3.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_vrflqnp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_vrflqnp.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_vrflqnp.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\nprint(find_max([\"name\", \"\
    of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeu5d4xmq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpeu5d4xmq.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpeu5d4xmq.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgermbo2f.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgermbo2f.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgermbo2f.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\nprint(find_max([\"name\"\
    , \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1hir23kn.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp1hir23kn.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1hir23kn.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01raw53w.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp01raw53w.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp01raw53w.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpssnu0uju.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpssnu0uju.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpssnu0uju.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjv8657_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkjv8657_.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkjv8657_.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnibw3wn0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnibw3wn0.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnibw3wn0.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_count = len(set(word))\n        if unique_count > max_count:\n\
    \            max_count = unique_count\n            max_word = word\n    return\
    \ max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqi7szj4.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpkqi7szj4.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkqi7szj4.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpig7p2nl7.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpig7p2nl7.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpig7p2nl7.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_j3ri9w.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpt_j3ri9w.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpt_j3ri9w.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\nprint(find_max([\"name\", \"\
    of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2m6p6aif.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2m6p6aif.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2m6p6aif.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcu2nznzb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcu2nznzb.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcu2nznzb.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\
    \        if unique_count > max_count:\n            max_count = unique_count\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpbhvyrt.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjpbhvyrt.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpjpbhvyrt.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    max_word = words[0]\n\
    \    max_len = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnb49ogcv.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnb49ogcv.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnb49ogcv.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn__6kjji.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpn__6kjji.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpn__6kjji.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0uyq1cve.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0uyq1cve.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0uyq1cve.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrsabl3g.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqrsabl3g.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqrsabl3g.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    max_word = words[0]\n\
    \    max_unique_chars = len(set(max_word))\n    for word in words[1:]:\n     \
    \   unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \      elif unique_chars == max_unique_chars:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpricrjx2y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpricrjx2y.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpricrjx2y.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0nh4tym.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj0nh4tym.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpj0nh4tym.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv0e2rtaq.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpv0e2rtaq.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpv0e2rtaq.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3mg7y7_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk3mg7y7_.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk3mg7y7_.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    max_word = words[0]\n\
    \    max_len = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnm3cjxun.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnm3cjxun.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnm3cjxun.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwit253q.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuwit253q.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpuwit253q.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmapt94i1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmapt94i1.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpmapt94i1.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_tbhwck.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7_tbhwck.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7_tbhwck.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps0_k6ze1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps0_k6ze1.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps0_k6ze1.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jy4_f2j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0jy4_f2j.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0jy4_f2j.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitzb_f0t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpitzb_f0t.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpitzb_f0t.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirdcd24i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpirdcd24i.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpirdcd24i.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgk8hbva.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfgk8hbva.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfgk8hbva.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75_109b2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp75_109b2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp75_109b2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\nprint(find_max([\"\
    name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\n\
    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsdsspid2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpsdsspid2.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpsdsspid2.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5zj9itm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpu5zj9itm.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu5zj9itm.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95_cn9_2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp95_cn9_2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp95_cn9_2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpobzif6dy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpobzif6dy.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpobzif6dy.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\nprint(find_max([\"name\"\
    , \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu395tns.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwu395tns.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwu395tns.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_d79w94.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2_d79w94.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2_d79w94.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyk6qqb72.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyk6qqb72.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpyk6qqb72.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjzk3x7zu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjzk3x7zu.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpjzk3x7zu.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_jjnnxr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx_jjnnxr.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpx_jjnnxr.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfo0wp3_4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfo0wp3_4.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfo0wp3_4.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04smn3s1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp04smn3s1.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp04smn3s1.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_char = 0\n    for word in words:\n\
    \        unique_char = len(set(word))\n        if unique_char > max_unique_char:\n\
    \            max_unique_char = unique_char\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmn31ghu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpmmn31ghu.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpmmn31ghu.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwjkix_e.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzwjkix_e.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzwjkix_e.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1serzm7t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1serzm7t.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1serzm7t.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\nprint(find_max([\"name\"\
    , \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcosq9u4j.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpcosq9u4j.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcosq9u4j.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprb2nc7pl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprb2nc7pl.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmprb2nc7pl.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6t7g3zk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi6t7g3zk.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpi6t7g3zk.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_count = len(set(word))\n        if unique_count > max_count:\n\
    \            max_count = unique_count\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_es2bb2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7_es2bb2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7_es2bb2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6acs20k8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp6acs20k8.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6acs20k8.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8a4m74o.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpt8a4m74o.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpt8a4m74o.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp40qo5wr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp40qo5wr.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpp40qo5wr.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4a75kev.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpu4a75kev.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu4a75kev.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0qgun9s.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpp0qgun9s.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpp0qgun9s.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq7x1gyvy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq7x1gyvy.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpq7x1gyvy.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcyclul1v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcyclul1v.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcyclul1v.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81i_cxt6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp81i_cxt6.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp81i_cxt6.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_count = 0\n    for word in words:\n\
    \        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n\
    \            max_unique_count = unique_count\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1egxlmh8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1egxlmh8.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1egxlmh8.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    max_word = words[0]\n\
    \    max_unique_chars = len(set(words[0]))\n    for word in words[1:]:\n     \
    \   unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \      elif unique_chars == max_unique_chars:\n            if word < max_word:\n\
    \                max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ct7vva9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9ct7vva9.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9ct7vva9.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n\
    \        chars = set(word)\n        if len(chars) > max_chars:\n            max_chars\
    \ = len(chars)\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_k79qwd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpp_k79qwd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpp_k79qwd.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    elif len(words)\
    \ == 1:\n        return words[0]\n    else:\n        max_word = words[0]\n   \
    \     for word in words[1:]:\n            if len(set(word)) > len(set(max_word)):\n\
    \                max_word = word\n            elif len(set(word)) == len(set(max_word)):\n\
    \                if word < max_word:\n                    max_word = word\n  \
    \      return max_word\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqapvj7q3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqapvj7q3.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqapvj7q3.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\nprint(find_max([\"\
    name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\n\
    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu73sfqid.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu73sfqid.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu73sfqid.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsok8zjy_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsok8zjy_.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpsok8zjy_.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbix2zrod.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbix2zrod.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbix2zrod.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hktqv5c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3hktqv5c.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3hktqv5c.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6gb_zqp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpg6gb_zqp.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpg6gb_zqp.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpke0h8k1v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpke0h8k1v.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpke0h8k1v.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrd80hd7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfrd80hd7.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfrd80hd7.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptsyafcx_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptsyafcx_.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptsyafcx_.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqkp7lq5f.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqkp7lq5f.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqkp7lq5f.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj19wd0zz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpj19wd0zz.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpj19wd0zz.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # TODO: Implement me\n    pass\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprknppae.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpprknppae.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpprknppae.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwhjgtuv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgwhjgtuv.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgwhjgtuv.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpehr4w12b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpehr4w12b.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpehr4w12b.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp693n0h3w.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp693n0h3w.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp693n0h3w.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe15mxhl2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpe15mxhl2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpe15mxhl2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcd7kung2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcd7kung2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcd7kung2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kf4i2gg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6kf4i2gg.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6kf4i2gg.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8cz3k5q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm8cz3k5q.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpm8cz3k5q.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6x5ysoi.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpb6x5ysoi.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpb6x5ysoi.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n\
    \            max_unique_chars = len(unique_chars)\n            max_word = word\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yy8ex6v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3yy8ex6v.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3yy8ex6v.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__ha4oty.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp__ha4oty.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp__ha4oty.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_len = len(set(words[0]))\n    for\
    \ word in words[1:]:\n        if len(set(word)) > max_len:\n            max_word\
    \ = word\n            max_len = len(set(word))\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugrkxmub.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpugrkxmub.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpugrkxmub.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjlbu__g.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptjlbu__g.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptjlbu__g.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvtqza56.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmvtqza56.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpmvtqza56.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoiqsxqbc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoiqsxqbc.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpoiqsxqbc.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa149p6va.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa149p6va.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpa149p6va.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvh375bt3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvh375bt3.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvh375bt3.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # TODO: write your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvn13qn3o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvn13qn3o.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvn13qn3o.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfp6bghjw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfp6bghjw.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfp6bghjw.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0_myg0w.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf0_myg0w.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpf0_myg0w.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wmzzuw_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5wmzzuw_.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp5wmzzuw_.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsuzw514.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxsuzw514.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpxsuzw514.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zzof0r1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8zzof0r1.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8zzof0r1.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb61qos73.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb61qos73.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpb61qos73.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_count = len(set(word))\n        if unique_count > max_count:\n\
    \            max_count = unique_count\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoa6i7r3k.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoa6i7r3k.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpoa6i7r3k.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpus7wkyyq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpus7wkyyq.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpus7wkyyq.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpe2pd9y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmptpe2pd9y.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptpe2pd9y.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb9mu31xc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpb9mu31xc.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpb9mu31xc.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2mp9itq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc2mp9itq.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpc2mp9itq.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6fbjrrs.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe6fbjrrs.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpe6fbjrrs.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b4mgol2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2b4mgol2.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2b4mgol2.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74d3j9p5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp74d3j9p5.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp74d3j9p5.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvy1_2yec.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvy1_2yec.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvy1_2yec.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_l8rqh0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpu_l8rqh0.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu_l8rqh0.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5h3295s.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpa5h3295s.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpa5h3295s.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaujmxyet.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaujmxyet.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaujmxyet.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2faingmy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2faingmy.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2faingmy.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcn1tduhl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcn1tduhl.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcn1tduhl.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6hg8yl9j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6hg8yl9j.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6hg8yl9j.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpco8fvv3e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpco8fvv3e.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpco8fvv3e.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjh98s9ik.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjh98s9ik.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpjh98s9ik.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_unique_chars = len(set(words[0]))\n\
    \    for word in words[1:]:\n        unique_chars = len(set(word))\n        if\
    \ unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        elif unique_chars == max_unique_chars:\n\
    \            if word < max_word:\n                max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavvv6yys.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpavvv6yys.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpavvv6yys.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_len = len(set(words[0]))\n    for\
    \ word in words[1:]:\n        if len(set(word)) > max_len:\n            max_word\
    \ = word\n            max_len = len(set(word))\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbacrzl91.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbacrzl91.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbacrzl91.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6lswr9r.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpz6lswr9r.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpz6lswr9r.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl11dzohp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpl11dzohp.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpl11dzohp.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv18gsobs.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv18gsobs.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpv18gsobs.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\nprint(find_max([\"\
    name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\n\
    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb0lzbrk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpyb0lzbrk.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpyb0lzbrk.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9a0_eg4_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9a0_eg4_.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9a0_eg4_.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp32v65_bl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp32v65_bl.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp32v65_bl.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2fe3o3sw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2fe3o3sw.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2fe3o3sw.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0d5mp0it.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0d5mp0it.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0d5mp0it.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnxwcag2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmnxwcag2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpmnxwcag2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcostt8s.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwcostt8s.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwcostt8s.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a7_5xbl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8a7_5xbl.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8a7_5xbl.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyh30h_j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptyh30h_j.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptyh30h_j.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgztlsu1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphgztlsu1.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmphgztlsu1.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy5f7wiv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqy5f7wiv.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqy5f7wiv.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcamea8nr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcamea8nr.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcamea8nr.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76eyna24.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp76eyna24.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp76eyna24.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpayb02q2r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpayb02q2r.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpayb02q2r.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    max_word = words[0]\n\
    \    max_len = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_len:\n            max_word = word\n            max_len = len(set(word))\n\
    \    return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvg9xrhu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqvg9xrhu.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqvg9xrhu.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2oadxqrp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2oadxqrp.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2oadxqrp.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_ce_dng.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpe_ce_dng.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpe_ce_dng.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24vzen6y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp24vzen6y.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp24vzen6y.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejnkh735.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpejnkh735.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpejnkh735.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemmvtgtu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpemmvtgtu.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpemmvtgtu.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdukfzmrr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdukfzmrr.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpdukfzmrr.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpef_debmv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpef_debmv.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpef_debmv.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqtz0lpf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoqtz0lpf.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpoqtz0lpf.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      unique_chars = set(word)\n        if len(unique_chars) > max_len:\n   \
    \         max_len = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1pocfbg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi1pocfbg.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpi1pocfbg.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp37t8txp2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp37t8txp2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp37t8txp2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rxbvf_8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7rxbvf_8.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7rxbvf_8.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\nprint(find_max([\"name\", \"\
    of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_ztovc8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4_ztovc8.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp4_ztovc8.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_unique_chars = len(set(words[0]))\n\
    \    for word in words[1:]:\n        unique_chars = len(set(word))\n        if\
    \ unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        elif unique_chars == max_unique_chars:\n\
    \            if word < max_word:\n                max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsztyzpm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppsztyzpm.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppsztyzpm.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgotc5cty.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgotc5cty.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgotc5cty.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_vv63_q9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_vv63_q9.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_vv63_q9.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsxgceo4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfsxgceo4.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfsxgceo4.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3hg3l7r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps3hg3l7r.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps3hg3l7r.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd49o96km.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd49o96km.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpd49o96km.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvf47ri41.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvf47ri41.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvf47ri41.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95ldlzou.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp95ldlzou.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp95ldlzou.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbh6fz1y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphbh6fz1y.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmphbh6fz1y.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaogc5um4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaogc5um4.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaogc5um4.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppq_q33n1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmppq_q33n1.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppq_q33n1.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptr097olf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmptr097olf.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptr097olf.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fnozu9q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6fnozu9q.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6fnozu9q.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0y5hhi2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk0y5hhi2.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk0y5hhi2.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2eq2jk0r.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2eq2jk0r.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2eq2jk0r.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\nprint(find_max([\"name\"\
    , \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd_ydyxs.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdd_ydyxs.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpdd_ydyxs.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdcfv3d_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvdcfv3d_.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvdcfv3d_.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpay47317q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpay47317q.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpay47317q.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2kbosxw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpd2kbosxw.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpd2kbosxw.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8by04zom.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8by04zom.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8by04zom.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyqz_e_5v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpyqz_e_5v.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpyqz_e_5v.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8z96dsbz.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8z96dsbz.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8z96dsbz.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_num = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_num:\n            max_num = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplpv8nk40.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplpv8nk40.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplpv8nk40.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6wbtj635.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6wbtj635.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6wbtj635.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wo95of_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5wo95of_.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp5wo95of_.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1h3qrngj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1h3qrngj.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1h3qrngj.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n\
    \            max_count = len(unique_chars)\n            max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wv0y3qp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0wv0y3qp.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0wv0y3qp.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjuv6nr5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkjuv6nr5.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkjuv6nr5.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdckd9d2n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdckd9d2n.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpdckd9d2n.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        if len(set(word)) > max_count:\n            max_count = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hxxeb6h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2hxxeb6h.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2hxxeb6h.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmztojhii.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmztojhii.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpmztojhii.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_891ft1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe_891ft1.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpe_891ft1.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n\
    \            max_unique_chars = len(unique_chars)\n            max_word = word\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgf2vvhi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwgf2vvhi.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwgf2vvhi.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvay9bn3d.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvay9bn3d.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvay9bn3d.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda word: len(set(word)))\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84d0xyp8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp84d0xyp8.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp84d0xyp8.py\", line 17,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n\
    \            max_unique_chars = len(unique_chars)\n            max_word = word\n\
    \    return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk28ug7ht.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk28ug7ht.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk28ug7ht.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoooqxptq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoooqxptq.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpoooqxptq.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
