name: HumanEval_99_closest_integer
language: python
results:
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcysla1l.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwcysla1l.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwcysla1l.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu76yc51i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu76yc51i.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu76yc51i.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6jz_jqs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt6jz_jqs.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt6jz_jqs.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4r9n1jhj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4r9n1jhj.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4r9n1jhj.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0aic7i_m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0aic7i_m.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0aic7i_m.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0u5_axhr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0u5_axhr.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0u5_axhr.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3i1qy6sa.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3i1qy6sa.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3i1qy6sa.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpspr1omm1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpspr1omm1.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpspr1omm1.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl34r1217.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl34r1217.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpl34r1217.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9r98kq6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc9r98kq6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpc9r98kq6.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp00xma47u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp00xma47u.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp00xma47u.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwkmczgiz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwkmczgiz.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwkmczgiz.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphenwz_nq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphenwz_nq.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphenwz_nq.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphh3w7poy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphh3w7poy.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphh3w7poy.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2sapjcb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm2sapjcb.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpm2sapjcb.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvq1q4j4c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvq1q4j4c.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvq1q4j4c.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfm94mxj6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfm94mxj6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfm94mxj6.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0woufr2c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0woufr2c.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0woufr2c.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp03w1a24n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp03w1a24n.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp03w1a24n.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2rx6p9n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps2rx6p9n.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps2rx6p9n.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5azovts8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5azovts8.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5azovts8.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxmfgl8z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuxmfgl8z.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuxmfgl8z.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo86tu3tf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo86tu3tf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo86tu3tf.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8xkuowc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps8xkuowc.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps8xkuowc.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy75hrb0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy75hrb0p.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpy75hrb0p.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3ih_fe0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf3ih_fe0.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpf3ih_fe0.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppkzq6ob.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpppkzq6ob.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpppkzq6ob.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh17fphf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyh17fphf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyh17fphf.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqs5b9ag.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprqs5b9ag.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprqs5b9ag.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4p1efvz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpe4p1efvz.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe4p1efvz.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswvhd_il.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpswvhd_il.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpswvhd_il.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvofg7mk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplvofg7mk.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplvofg7mk.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpookownov.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpookownov.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpookownov.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qnl69pt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4qnl69pt.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4qnl69pt.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jpz4n0d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2jpz4n0d.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2jpz4n0d.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fxrv0rb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0fxrv0rb.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0fxrv0rb.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_krs8ejj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_krs8ejj.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_krs8ejj.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s60hpgf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8s60hpgf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8s60hpgf.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz96xj31l.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpz96xj31l.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz96xj31l.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqg_y1uu6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqg_y1uu6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqg_y1uu6.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpmcfocp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphpmcfocp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphpmcfocp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpba8wwel3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpba8wwel3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpba8wwel3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3m6tpdr4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3m6tpdr4.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3m6tpdr4.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqd8a1_oj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqd8a1_oj.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqd8a1_oj.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphc3gud1t.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphc3gud1t.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphc3gud1t.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugsdleap.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpugsdleap.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpugsdleap.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcz2l1nrf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcz2l1nrf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcz2l1nrf.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ba20lij.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ba20lij.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0ba20lij.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq02khokv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpq02khokv.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpq02khokv.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphe4vmb1g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphe4vmb1g.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphe4vmb1g.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pswj8z9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6pswj8z9.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6pswj8z9.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfloxj3op.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfloxj3op.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfloxj3op.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpne9wzg2o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpne9wzg2o.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpne9wzg2o.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeoa4vqre.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeoa4vqre.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpeoa4vqre.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqui2j3vp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqui2j3vp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqui2j3vp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5v5vsm0o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5v5vsm0o.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5v5vsm0o.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptszykjrn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptszykjrn.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptszykjrn.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtsxnhrt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwtsxnhrt.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwtsxnhrt.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjvmsv59.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppjvmsv59.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppjvmsv59.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1t62zyn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpx1t62zyn.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpx1t62zyn.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxrip5iy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfxrip5iy.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfxrip5iy.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35sjty8e.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp35sjty8e.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp35sjty8e.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrt5rkuv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprrt5rkuv.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprrt5rkuv.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7o920uke.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7o920uke.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7o920uke.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5g7uyey.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy5g7uyey.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpy5g7uyey.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2v8xv4sj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2v8xv4sj.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2v8xv4sj.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdpv54as.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwdpv54as.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwdpv54as.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpibnaptej.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpibnaptej.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpibnaptej.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqbrti62.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsqbrti62.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsqbrti62.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnnmhq781.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnnmhq781.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnnmhq781.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiheaop7r.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpiheaop7r.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiheaop7r.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqnrxjpi.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmqnrxjpi.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmqnrxjpi.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpww0hh_0_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpww0hh_0_.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpww0hh_0_.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmwd3jok.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzmwd3jok.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzmwd3jok.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1a9z4nnm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1a9z4nnm.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1a9z4nnm.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_sqcvim.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4_sqcvim.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4_sqcvim.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_lbsze2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk_lbsze2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpk_lbsze2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmytng3in.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmytng3in.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmytng3in.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjs0svag.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnjs0svag.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnjs0svag.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppi73glq8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppi73glq8.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppi73glq8.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsh_rrijx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsh_rrijx.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsh_rrijx.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiu1diugw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpiu1diugw.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiu1diugw.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69whtp3b.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp69whtp3b.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp69whtp3b.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghch9qny.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpghch9qny.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpghch9qny.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lqxkxpr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_lqxkxpr.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_lqxkxpr.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppj1qjjdt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppj1qjjdt.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppj1qjjdt.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_sw6xror.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_sw6xror.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_sw6xror.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaw3x2_7o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpaw3x2_7o.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpaw3x2_7o.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlr__7yv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjlr__7yv.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpjlr__7yv.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl8kpridp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl8kpridp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpl8kpridp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpept9fmcf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpept9fmcf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpept9fmcf.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprez0_7if.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprez0_7if.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprez0_7if.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n6ibzg_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_n6ibzg_.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_n6ibzg_.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdr1k706a.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdr1k706a.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdr1k706a.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt29smjkh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt29smjkh.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt29smjkh.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparw50efv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmparw50efv.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmparw50efv.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49b3mgs7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp49b3mgs7.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp49b3mgs7.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1jgjj1k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo1jgjj1k.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo1jgjj1k.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdk2g569u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdk2g569u.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdk2g569u.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprr8i7wff.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprr8i7wff.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprr8i7wff.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0h5gdlf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp0h5gdlf.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpp0h5gdlf.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpklnegw18.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpklnegw18.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpklnegw18.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gd52r0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7gd52r0p.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gd52r0p.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbqidhd2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsbqidhd2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsbqidhd2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7jf_gar.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc7jf_gar.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpc7jf_gar.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpweulcf2n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpweulcf2n.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpweulcf2n.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6cbt6ab.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_6cbt6ab.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_6cbt6ab.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjr7cqwp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzjr7cqwp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzjr7cqwp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglccj2eu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpglccj2eu.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpglccj2eu.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdg44laby.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdg44laby.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdg44laby.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmsxw1e3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqmsxw1e3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqmsxw1e3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzeueasg5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzeueasg5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzeueasg5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6s54pd0m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6s54pd0m.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6s54pd0m.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohz8vw8m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpohz8vw8m.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpohz8vw8m.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3t2b5ej.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu3t2b5ej.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu3t2b5ej.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoa8ptdvu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpoa8ptdvu.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpoa8ptdvu.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh9evol2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeh9evol2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpeh9evol2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprb1vz0x9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprb1vz0x9.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprb1vz0x9.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajlwlu98.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpajlwlu98.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpajlwlu98.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_j5wtlh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpg_j5wtlh.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpg_j5wtlh.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzbg790f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbzbg790f.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbzbg790f.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bjwxdi4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4bjwxdi4.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4bjwxdi4.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjn9b8gr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxjn9b8gr.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxjn9b8gr.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8_ek932.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpe8_ek932.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe8_ek932.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzquvum0k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzquvum0k.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzquvum0k.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw0asztl9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw0asztl9.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw0asztl9.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3thklvn8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3thklvn8.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3thklvn8.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefkjmgch.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpefkjmgch.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpefkjmgch.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfy9ydg4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgfy9ydg4.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgfy9ydg4.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1i9jbpb5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1i9jbpb5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1i9jbpb5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_k9cswc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpz_k9cswc.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz_k9cswc.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nlt839g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9nlt839g.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9nlt839g.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_k86mbb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8_k86mbb.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8_k86mbb.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqmgnbs2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmqmgnbs2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmqmgnbs2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpri4uewcd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpri4uewcd.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpri4uewcd.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmp0yxu_o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmp0yxu_o.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmp0yxu_o.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkbjtu2i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfkbjtu2i.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfkbjtu2i.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfthbmx2g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfthbmx2g.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfthbmx2g.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqveq79y8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqveq79y8.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqveq79y8.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3zmyj18.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc3zmyj18.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpc3zmyj18.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvy5sbobh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvy5sbobh.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvy5sbobh.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzgrrof4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnzgrrof4.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnzgrrof4.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9izw3ck7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9izw3ck7.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9izw3ck7.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87rnnn0m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp87rnnn0m.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp87rnnn0m.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pr7doi6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2pr7doi6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2pr7doi6.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctqrbqwe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpctqrbqwe.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpctqrbqwe.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxz0z_s6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyxz0z_s6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyxz0z_s6.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxbsh6a1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdxbsh6a1.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdxbsh6a1.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2fn6jya1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2fn6jya1.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2fn6jya1.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2ib06re.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc2ib06re.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpc2ib06re.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69n0a1i3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp69n0a1i3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp69n0a1i3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ygk7set.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_ygk7set.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_ygk7set.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtmlf7rb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwtmlf7rb.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwtmlf7rb.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4l71iav.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw4l71iav.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw4l71iav.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9_9wmj3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp9_9wmj3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpp9_9wmj3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzza38u9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwzza38u9.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwzza38u9.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu16hnhyl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu16hnhyl.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu16hnhyl.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4l_6d19w.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4l_6d19w.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4l_6d19w.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_7ju1_q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpg_7ju1_q.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpg_7ju1_q.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcys8sq4o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcys8sq4o.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcys8sq4o.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbudct_pl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbudct_pl.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbudct_pl.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sp06eih.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2sp06eih.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2sp06eih.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3iq761m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm3iq761m.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpm3iq761m.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprohle4a3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprohle4a3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprohle4a3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybhglpry.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpybhglpry.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpybhglpry.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7lpzl7b.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7lpzl7b.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_7lpzl7b.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc633dou.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgc633dou.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgc633dou.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1yx6w3r8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1yx6w3r8.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1yx6w3r8.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkq80mu0q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkq80mu0q.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkq80mu0q.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnt3tm5e.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmnt3tm5e.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmnt3tm5e.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyif0ael.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgyif0ael.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgyif0ael.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iqhr5z5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0iqhr5z5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0iqhr5z5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfzae7j7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgfzae7j7.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgfzae7j7.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6a6nm18f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6a6nm18f.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6a6nm18f.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprarmx2uo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprarmx2uo.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprarmx2uo.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkvz1x24.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmkvz1x24.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmkvz1x24.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdy9fz4dm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdy9fz4dm.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdy9fz4dm.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xrgfxdw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1xrgfxdw.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1xrgfxdw.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6pw7m9f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps6pw7m9f.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps6pw7m9f.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_zqpbym.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpe_zqpbym.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe_zqpbym.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4f4cb7pe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4f4cb7pe.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4f4cb7pe.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhsryt6d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzhsryt6d.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzhsryt6d.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpns9pty47.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpns9pty47.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpns9pty47.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwasnwgz5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwasnwgz5.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwasnwgz5.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgr0ar_3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptgr0ar_3.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptgr0ar_3.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplydfkvqu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplydfkvqu.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplydfkvqu.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx828g87l.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpx828g87l.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpx828g87l.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6eoprdwp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6eoprdwp.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6eoprdwp.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9fqqbyx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpe9fqqbyx.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe9fqqbyx.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_axoe31a.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_axoe31a.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_axoe31a.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpff05l2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfpff05l2.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfpff05l2.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyd25t4ph.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyd25t4ph.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyd25t4ph.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwrlq6ho6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwrlq6ho6.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwrlq6ho6.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rg7fe6j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6rg7fe6j.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6rg7fe6j.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8wa511z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi8wa511z.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpi8wa511z.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5yzi1f7q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5yzi1f7q.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5yzi1f7q.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_rw_0zr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2_rw_0zr.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2_rw_0zr.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpylqyexmu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpylqyexmu.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpylqyexmu.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v2konjy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4v2konjy.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4v2konjy.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n \
    \   >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t_buzoc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5t_buzoc.py\", line 30,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5t_buzoc.py\", line\
    \ 24, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
