name: HumanEval_70_strange_sort_list
language: r
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list(c(1, 2, 3, 4))\n\
  # c(1, 4, 2, 3)\n# >>> strange_sort_list(c(5, 5, 5, 5))\n# c(5, 5, 5, 5)\n# >>>\
  \ strange_sort_list(c())\n# c()\nstrange_sort_list <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- strange_sort_list\n    if(!identical(candidate(c(1,\
  \ 2, 3, 4)), c(1, 4, 2, 3))){quit('no', 1)}\n    if(!identical(candidate(c(5, 6,\
  \ 7, 8, 9)), c(5, 9, 6, 8, 7))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 2, 3, 4, 5)), c(1, 5, 2, 4, 3))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 6, 7, 8, 9, 1)), c(1, 9, 5, 8, 6, 7))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 5, 5, 5)), c(5, 5, 5, 5))){quit('no', 1)}\n    if(!identical(candidate(c()), c())){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8)), c(1, 8, 2, 7, 3,\
  \ 6, 4, 5))){quit('no', 1)}\n    if(!identical(candidate(c(0, 2, 2, 2, 5, 5, -5,\
  \ -5)), c(-5, 5, -5, 5, 0, 2, 2, 2))){quit('no', 1)}\n    if(!identical(candidate(c(111111)),\
  \ c(111111))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (length(lst) == 0) {\n    return(list())\n  }\n  return(c(min(lst),\
    \ max(lst), strange_sort_list(lst[-c(which.min(lst), which.max(lst))])))\n}\n",
  "\n    n <- length(lst)\n    order <- 1:n\n    order <- order[order %% 2 == 1]\n\
    \    order <- c(order, order[n:1])\n    lst[order]\n}\nstrange_sort_list(1:4)\n\
    strange_sort_list(rep(5, 4))\nstrange_sort_list(c())\n", "\n  if (length(lst)\
    \ < 1) {\n    return(c())\n  }\n  else {\n    res <- c()\n    while (length(lst)\
    \ > 0) {\n      res <- c(res, c(min(lst), max(lst)))\n      lst <- lst[-which(lst\
    \ %in% c(min(lst), max(lst)))]\n    }\n    return(res)\n  }\n}\nstrange_sort_list(c(1,\
    \ 2, 3, 4))\nstrange_sort_list(c(5, 5, 5, 5))\nstrange_sort_list(c())\n ", "\n\
    \    if(length(lst) == 0) {\n        lst\n    } else {\n        lst <- lst[order(lst)]\n\
    \        rbind(lst[1], lst[length(lst)],\n              strange_sort_list(lst[-c(1,\
    \ length(lst))]))\n    }\n}\n", "\n\t# YOUR CODE HERE\n}\n", "\n  res <- sort(lst)\n\
    \  if (length(res) <= 2) {\n    return(res)\n  }\n  for (idx in seq(1, length(res),\
    \ 2)) {\n    res <- c(res[1:idx], rev(res[(idx + 1):length(res)]))\n  }\n  return(res)\n\
    }\n\nstrange_sort_list(c(1, 2, 3, 4))\nstrange_sort_list(c(5, 5, 5, 5))\nstrange_sort_list(c())\n",
  "\n  if (length(lst) == 0) return(c())\n  min_index <- which.min(lst)\n  max_index\
    \ <- which.max(lst[-min_index])\n  c(lst[min_index], lst[max_index],\n    strange_sort_list(lst[-c(min_index,\
    \ max_index)]))\n}\n\nprint(strange_sort_list(c(1, 2, 3, 4)))\nprint(strange_sort_list(c(5,\
    \ 5, 5, 5)))\nprint(strange_sort_list(c()))\n", "\n    if (length(lst) <= 1) return(lst)\n\
    \    ret <- c()\n    while (length(lst) > 0) {\n        ret <- c(ret, min(lst),\
    \ max(lst))\n        lst <- lst[lst != min(lst) & lst != max(lst)]\n    }\n  \
    \  return(ret)\n}", "\n  # Your code here\n}\n", "\n  # TODO\n}\n", "\n  if (length(lst)\
    \ == 0) return(c())\n  if (length(lst) == 1) return(lst)\n  lst[order(lst)]\n\
    }\n\nstrange_sort_list(c(1, 2, 3, 4))\nstrange_sort_list(c(5, 5, 5, 5))\nstrange_sort_list(c())\n\
    \ ", "\n  # TODO\n}\n ", "\n  ordered_list <- lst\n  ordered_list <- ordered_list[order(ordered_list)]\n\
    \  if (length(ordered_list) %% 2 == 0) {\n    mid <- length(ordered_list) / 2\n\
    \  } else {\n    mid <- length(ordered_list) / 2 + 1\n  }\n  print(mid)\n  ordered_list\
    \ <- ordered_list[c(1:mid, mid:1)]\n  return(ordered_list)\n}\n", "\n  if (length(lst)\
    \ == 0) return(c())\n  rev_lst <- rev(lst)\n  # Split list in 2 parts, the first\
    \ one starts with the\n  # minimum value of the given list\n  # the second one\
    \ starts with the maximum value\n  rev_lst_1 <- rev_lst[seq(1, length(rev_lst),\
    \ 2)]\n  rev_lst_2 <- rev_lst[seq(2, length(rev_lst), 2)]\n  # Sort both parts\n\
    \  rev_lst_1 <- sort(rev_lst_1)\n  rev_lst_2 <- sort(rev_lst_2)\n  # Get back\
    \ to original list\n  lst_1 <- rev(rev_lst_1)\n  lst_2 <- rev(rev_lst_2)\n  #\
    \ Concatenate both parts\n  c(lst_1, lst_2)\n}\n", "\n  rle(unlist(strange_sort(lst)))\n\
    }\n", "\n    if (length(lst) == 0) {\n        return(c())\n    } else {\n    \
    \    lst_min <- min(lst)\n        lst_max <- max(lst)\n        lst_min_max <-\
    \ c(lst_min, lst_max)\n        lst_reversed <- sort(lst, decreasing = TRUE)\n\
    \        lst_reversed <- lst_reversed[-which(lst_reversed %in% lst_min_max)]\n\
    \        return(c(lst_min, lst_max, strange_sort_list(lst_reversed)))\n    }\n\
    }", "\n\tif (length(lst) <= 1) {\n\t\treturn(lst)\n\t} else {\n\t\tsub_lst = lst[-which.min(lst)]\n\
    \t\treturn(c(lst[which.min(lst)], strange_sort_list(sub_lst[which.max(sub_lst)]),\
    \ strange_sort_list(sub_lst[-which.max(sub_lst)])))\n\t}\n}", "\n  if (length(lst)\
    \ == 0) {\n    return(lst)\n  } else {\n    start_min <- min(lst)\n    lst <-\
    \ lst[-which(lst == start_min)]\n    if (length(lst) == 0) {\n      return(c(start_min))\n\
    \    } else {\n      start_max <- max(lst)\n      lst <- lst[-which(lst == start_max)]\n\
    \      if (length(lst) == 0) {\n        return(c(start_min, start_max))\n    \
    \  } else {\n        return(c(start_min, start_max, strange_sort_list(lst)))\n\
    \      }\n    }\n  }\n}", "\n  if (length(lst) == 0) {\n    return(c())\n  }\n\
    \  new_lst <- c()\n  nums <- sort(lst)\n  for (i in 1:length(nums)) {\n    if\
    \ (i %% 2 == 1) {\n      new_lst <- c(new_lst, nums[i])\n    } else {\n      new_lst\
    \ <- c(new_lst, nums[length(nums) - i + 1])\n    }\n  }\n  return(new_lst)\n}\n",
  "\n  if(length(lst) < 2) {\n    return(lst)\n  }\n  min_idx <- which.min(lst)\n\
    \  max_idx <- which.max(lst[-min_idx]) + 1\n  return(c(lst[min_idx], lst[max_idx],\
    \ strange_sort_list(lst[-c(min_idx, max_idx)])))\n}\n \nstrange_sort_list(c(1,\
    \ 2, 3, 4))\nstrange_sort_list(c(5, 5, 5, 5))\nstrange_sort_list(c())\n "]
stop_tokens:
- "\n#"
- "\n```"
