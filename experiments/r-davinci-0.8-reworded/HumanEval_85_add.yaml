name: HumanEval_85_add
language: r
prompt: "# Given a non-empty list of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# >>> add(c(4, 2, 6, 7))\n# 2\nadd <- function(lst)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- add\n    if(!identical(candidate(c(4,\
  \ 88)), 88)){quit('no', 1)}\n    if(!identical(candidate(c(4, 5, 6, 7, 2, 122)),\
  \ 122)){quit('no', 1)}\n    if(!identical(candidate(c(4, 0, 6, 7)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(4, 4, 6, 8)), 12)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    sum(lst[seq(2,length(lst),2)])\n}\n", "\n    sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n\nadd(c(4, 2, 6, 7))\n", "\n  indices = seq(1, length(lst), 2)\n  indices\
    \ = lapply(indices, function(x) x == as.integer(x))\n  indices = which(indices)\n\
    \  evens = lst[indices]\n  return(sum(evens))\n}\n", "\n    sum(lst[2:2:length(lst)])\n\
    }", "\n    evens <- lst[lst %% 2 == 0]\n    evens[seq(2, length(evens), 2)]\n\
    }\n\nadd(c(4, 2, 6, 7))\n", "\n  ind <- which(lst %% 2 == 0)\n  ind <- ind[ind\
    \ %% 2 == 1]\n  sum(lst[ind])\n}\n", "\n  sum(lst[c(TRUE, FALSE)])\n}\n\ntest_that(\"\
    add() works with some simple numbers\",\n          {\n            expect_equal(add(c(4,\
    \ 2, 6, 7)), 2)\n            expect_equal(add(c(1, 2, 3, 4, 5, 6)), 12)\n    \
    \        expect_equal(add(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 30)\n          })\n\
    \ ", "\n  idx <- seq(1, length(lst), 2)\n  lst[idx][lst[idx] %% 2 == 0]\n}\n\n\
    add(c(4, 2, 6, 7))\n", "\n    i <- 1\n    sum <- 0\n    for (i in 1:length(lst))\
    \ {\n        if (i %% 2 == 1 && lst[i] %% 2 == 0) {\n            sum <- sum +\
    \ lst[i]\n        }\n    }\n    return(sum)\n}\n \nadd(c(4, 2, 6, 7))\n", "\n\
    \    odd_ele <- lst[seq(1, length(lst), 2)]\n    return(sum(odd_ele[which(odd_ele\
    \ %% 2 == 0)]))\n}", "\n    sum(lst[which(seq_along(lst) %% 2 == 1)])\n}\n", "\n\
    \  ans <- 0\n  for (i in seq(1, length(lst), 2)) {\n    if (lst[i] %% 2 == 0)\
    \ {\n      ans <- ans + lst[i]\n    }\n  }\n  return(ans)\n}\n\nadd(c(4, 2, 6,\
    \ 7))\n\n", "\n  x <- 0\n  for (i in seq(2,length(lst),2)) {\n    x <- x + lst[i]\n\
    \  }\n  return(x)\n}\n\nlst <- c(4, 2, 6, 7)\nadd(lst)\n", "\n  lst[seq(1, length(lst),\
    \ 2)] <- lst[seq(1, length(lst), 2)] * 2\n  sum(lst)\n}\n", "\n  sum(lst[seq(2,\
    \ length(lst), by = 2)])\n}\n\nlst <- 1:10\nlst[seq(2, length(lst), by = 2)]\n",
  "\n  sum(c(lst[seq(1, length(lst), by = 2)])[seq(2, length(lst), by = 2)])\n}\n",
  "\n    add <- lst[seq(1, length(lst), 2)]\n    add[add %% 2 == 0]\n}\n\nprint(\"\
    Problem 24\")\nprint(add(c(4, 2, 6, 7)))\nprint(add(c(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10)))\n", "\n    sum(lst[seq(2,length(lst),2)])\n}\n", "\n  even <- lst[seq(2,\
    \ length(lst), by=2)]\n  return(sum(even))\n}\n", "\n  sum(lst[seq(1, length(lst),\
    \ 2)][lst %% 2 == 0])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
