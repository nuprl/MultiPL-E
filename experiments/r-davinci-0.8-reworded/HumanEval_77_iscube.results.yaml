name: HumanEval_77_iscube
language: r
results:
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    (a == 0) || (a == 1)\
    \ || (a > 0 & round(a ^ (1/3)) ^ 3 == a) || (a < 0 & round(a ^ (1/3)) ^ 3 == -a)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  if (a == 0) {\n    return(TRUE)\n\
    \  }\n  else if (a < 0) {\n    a <- -a\n  }\n  if (floor(a ^ (1/3)) == a ^ (1/3))\
    \ {\n    return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(180), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(1729), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  if (a == 0) {\n    return(TRUE)\n\
    \  }\n  if (a < 0) {\n    a = -a\n  }\n  return(round(a^(1/3))^3 == a)\n}\n\n\
    test_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    if (a == 0) return(TRUE)\n\
    \    c <- round(a^(1/3))\n    if (a == c^3) return(TRUE)\n    else return(FALSE)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (a == c^3) return(TRUE) else return(FALSE) : \\n  missing value\
    \ where TRUE/FALSE needed\\nCalls: test_humaneval -> identical -> candidate\\\
    nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    return(a == round(a^(1/3))^3)\n\
    }\niscube(2)\n\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    v<-floor(a^(1/3))\n \
    \   if (v==a^(1/3)) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\n\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (v == a^(1/3)) { : missing value where TRUE/FALSE needed\\\
    nCalls: test_humaneval -> identical -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    return(a %% length(seq(0,\
    \ floor(a^(1/3)), 1)) == 0)\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ iscube\n    if(!identical(candidate(1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n    if(!identical(candidate(180),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    if (a == 0) {\n     \
    \   return(TRUE)\n    } else if (a < 0) {\n        a = -a\n    }\n    x = round(cbrt(a))\n\
    \    if (x^3 == a) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\n\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in cbrt(a) : could not find function \"cbrt\"\\nCalls: test_humaneval\
    \ -> identical -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  # Write the body of the\
    \ function\n  if(a==0)\n    return(TRUE)\n  a = abs(a)\n  i = 0\n  while(i*i*i\
    \ < a)\n    i = i + 1\n  if(i*i*i == a)\n    return(TRUE)\n  else\n    return(FALSE)\n\
    }\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n\treturn (sqrt(a) %% 1 ==\
    \ 0)\n}\n\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning message:\\nIn sqrt(a) : NaNs produced\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  return(any(a == 0) || length(floor(cbrt(a)))\
    \ == 1)\n}\ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in cbrt(a) : could not find function \"cbrt\"\\nCalls: test_humaneval\
    \ -> identical -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    if (a == 0 | a == 1)\
    \ {\n        TRUE\n    } else if (a < 0) {\n        TRUE\n    } else {\n     \
    \   x <- a%%3\n        y <- a - x\n        y%%3 == 0\n    }\n}\na <- seq(-200,\
    \ 200)\nb <- a[iscube(a)]\nprint(b)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n    if(!identical(candidate(180),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (a == 0 | a == 1) { : the condition has length > 1\\nCalls:\
    \ iscube\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  is_square <- function(n)\
    \ {\n    sqrt_n <- sqrt(n)\n    if (sqrt_n - floor(sqrt_n) == 0)\n      TRUE\n\
    \    else\n      FALSE\n  }\n  if (a == 0) {\n    TRUE\n  } else if (a < 0) {\n\
    \    is_square(-a)\n  } else {\n    is_square(a)\n  }\n}\niscube(1)\niscube(2)\n\
    iscube(-1)\niscube(64)\niscube(0)\niscube(180)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(180), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(1729), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] TRUE\n[1] FALSE\n[1] TRUE\n[1] TRUE\n[1] TRUE\n[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  \n  # Your code here\n\
    \  b <- (a)^(1/3)\n  if(b %% 1 == 0) return (TRUE)\n  return (FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(180), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(1729), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in if (b%%1 == 0) return(TRUE) : \\n  missing value where TRUE/FALSE\
    \ needed\\nCalls: test_humaneval -> identical -> candidate\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  \n}\n\ntest_humaneval <-\
    \ function() {\ncandidate <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(180), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(1729), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    c <- a\n    a <- abs(a)\n\
    \    for (i in 0:100) {\n        if (a == i^3) {\n            if (c == 0) {\n\
    \                return(TRUE)\n            } else if (c > 0) {\n             \
    \   return(TRUE)\n            } else {\n                return(FALSE)\n      \
    \      }\n        }\n    }\n    return(FALSE)\n}\niscube(180)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(180), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(1729), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    sqrt(a) %% 1 == 0\n}\n\
    \ntest_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning message:\\nIn sqrt(a) : NaNs produced\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n    cube <- function(x) {\n\
    \        x ^ 3\n    }\n    a == cube(round(exp(log(a)/3)))\n}\niscube(-1)\n\n\
    test_humaneval <- function() {\ncandidate <- iscube\n    if(!identical(candidate(1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2), FALSE)){quit('no', 1)}\n\
    \    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(64),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(180), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no', 1)}\n    if(!identical(candidate(0),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] NA\n'
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning message:\\nIn log(a) : NaNs produced\\nWarning message:\\nIn log(a)\
    \ : NaNs produced\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  if (a == 0) {\n    return(TRUE)\n\
    \  }\n  return(sqrt(a) == trunc(sqrt(a)))\n}\n\ntest_humaneval <- function() {\n\
    candidate <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no', 1)}\n \
    \   if(!identical(candidate(2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(180), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(1729), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning messages:\\n1: In sqrt(a) : NaNs produced\\n2: In sqrt(a) : NaNs\
    \ produced\\n'"
  exit_code: 1
  status: Exception
- program: "# Write a function that takes an integer a and returns TRUE \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n\
    # >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n\
    # >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  # YOUR CODE HERE\n  if\
    \ (a == 0 | a == 1 | a == -1){\n    return(TRUE)\n  }\n  x = ceiling(abs(a)^(1/3))\n\
    \  y = (x^3)\n  z = (x^3)*(-1)\n  if (y == a | z == a){\n    return(TRUE)\n  }\n\
    \  else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- iscube\n    if(!identical(candidate(1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(-1), TRUE)){quit('no', 1)}\n\
    \    if(!identical(candidate(64), TRUE)){quit('no', 1)}\n    if(!identical(candidate(180),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(1000), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(0), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1729),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
