name: HumanEval_78_hex_key
language: r
prompt: "# You have been tasked to write a function that receives \n# a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n# digits that are primes\
  \ (prime number, or a prime, is a natural number \n# greater than 1 that is not\
  \ a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n# So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is\
  \ always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n\
  # Examples:\n# >>> hex_key('AB')\n# 1\n# >>> hex_key('1077E')\n# 2\n# >>> hex_key('ABED1A33')\n\
  # 4\n# >>> hex_key('123456789ABCDEF0')\n# 6\n# >>> hex_key('2020')\n# 2\nhex_key\
  \ <- function(num) {"
tests: "test_humaneval <- function() {\ncandidate <- hex_key\n    if(!identical(candidate('AB'),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate('1077E'), 2)){quit('no', 1)}\n\
  \    if(!identical(candidate('ABED1A33'), 4)){quit('no', 1)}\n    if(!identical(candidate('2020'),\
  \ 2)){quit('no', 1)}\n    if(!identical(candidate('123456789ABCDEF0'), 6)){quit('no',\
  \ 1)}\n    if(!identical(candidate('112233445566778899AABBCCDDEEFF00'), 12)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n\t# Create vector of primes.\n\tprimes <- c(2, 3, 5, 7, 11, 13)\n\
    \t# Create vector of primes in hexadecimal.\n\thex_primes <- c('2', '3', '5',\
    \ '7', 'B', 'D')\n\t# For each digit in hex_primes.\n\treturn(sum(sapply(hex_primes,\
    \ function(x) {\n\t\t# Count the number of times x appears in num.\n\t\tsum(strsplit(num,\
    \ '')[[1]] == x)\n\t})))\n}\n", "\n  vals <- c(2, 3, 5, 7, 11, 13)\n  digits <-\
    \ 0\n  for (i in 1:nchar(num)) {\n    ch <- substr(num, i, i)\n    if (ch %in%\
    \ LETTERS[1:6]) {\n      digits <- digits + 1\n    }\n  }\n  return(digits)\n}",
  "\n  if(str_length(num) == 0)\n    return(0)\n  is_prime <- function(n) {\n    if(n\
    \ == 2) return(TRUE)\n    if(any(n %% 2:(n-1) == 0))\n      return(FALSE)\n  \
    \  return(TRUE)\n  }\n  num <- toupper(num)\n  x <- ifelse(num %in% c('A', 'B',\
    \ 'C', 'D', 'E', 'F'), \n              str_extract(num, '[A-F]'), num)\n  if(length(x)\
    \ == 1)\n    return(ifelse(is_prime(as.numeric(x)), 1, 0))\n  count <- 0\n  for(i\
    \ in x) {\n    if(is_prime(as.numeric(i)))\n      count <- count + 1\n  }\n  return(count)\n\
    }\n ", "\n  n <- nchar(num)\n  if (n == 0) {\n    return(0)\n  }\n  else {\n \
    \   if (substr(num,1,1) %in% c('2','3','5','7','B','D')) {\n      if (n == 1)\
    \ {\n        return(1)\n      }\n      else {\n        return(1 + hex_key(substr(num,2,n)))\n\
    \      }\n    }\n    else {\n      return(hex_key(substr(num,2,n)))\n    }\n \
    \ }\n}\nhex_key('AB')\nhex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\n\
    hex_key('2020')\n", "\n  letters <- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    )\n  index <-  ifelse(c(rep(0, 9),letters) %in% letters, \n                  \
    \ c(rep(0, 9),letters), \n                   1:16)\n  digits <- unlist(strsplit(num,\
    \ \"\"))\n  digit_indices <- index[digits]\n  prime_indices <- c(2, 3, 5, 7, 11,\
    \ 13)\n  length(which(digit_indices %in% prime_indices))\n}\n\nhex_key(\"AB\"\
    )\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\")\nhex_key(\"123456789ABCDEF0\")\n\
    hex_key(\"2020\")\n", "\n  # Get primes\n  primes = c(2, 3, 5, 7, 11, 13)\n  #\
    \ Get all hex numbers\n  hex = c('0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F')\n  # Get numbers in hex\n  numbers = as.numeric(hex)\n\
    \  # Count how many times prime number appears in HEX\n  sum(numbers %in% primes)\n\
    }\n", "\n\tx <- 0\n\thex <- c(2,3,5,7,11,13)\n\tnum <- strsplit(num,\"\")[[1]]\n\
    \tnum <- toupper(num)\n\tfor (i in 1:length(num)) {\n\t\tfor (j in 1:length(hex))\
    \ {\n\t\t\tif (num[i] == hex[j]) {\n\t\t\t\tx <- x + 1\n\t\t\t}\n\t\t}\n\t}\n\t\
    return(x)\n}\n", "\n  # ...\n  if(num == \"\"){\n    return(0)\n  }\n  num <-\
    \ toupper(num)\n  digits <- c(0:9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n\
    \  primes <- c(2, 3, 5, 7, 11, 13)\n  nums <- strsplit(num, \"\")[[1]]\n  return(sum(nums\
    \ %in% primes))\n}\n", "\n    # Create the vector of prime hex digits\n    prime_hex\
    \ <- c(2, 3, 5, 7, 'B', 'D')\n    # Create a vector with each character of the\
    \ string\n    num_vector <- strsplit(num, '')[[1]]\n    # Loop through the vector,\
    \ and count the number of occurrences\n    # of the prime hex digits\n    count\
    \ <- 0\n    for (i in num_vector) {\n        if (i %in% prime_hex) {\n       \
    \     count <- count + 1\n        }\n    }\n    # Return the count\n    return(count)\n\
    }\n", "\n    if(length(num) == 0) return(0)\n    digits <- c(0:9, letters[c(10:15)])\n\
    \    sum(digits[num] %in% c('2', '3', '5', '7', 'B', 'D'))\n}\n\nif(!all(hex_key(c('AB',\
    \ '1077E', 'ABED1A33', '123456789ABCDEF0', '2020')) == c(1, 2, 4, 6, 2))) {\n\
    \    stop('failed')\n}\n", "\n  # your code here\n}", "\n  n <- unlist(strsplit(num,\
    \ split = \"\"))\n  prime <- c(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n  n\
    \ == prime\n}", "\n    # your code here\n    length(grep(c('2','3','5','7','B','D'),num))\n\
    }\n", "\n  # your code here\n}\n\n\n", "\n  decimal.digits <- strsplit(num, \"\
    \")[[1]]\n  decimal.digits <- ifelse(decimal.digits == \"A\", 10, decimal.digits)\n\
    \  decimal.digits <- ifelse(decimal.digits == \"B\", 11, decimal.digits)\n  decimal.digits\
    \ <- ifelse(decimal.digits == \"C\", 12, decimal.digits)\n  decimal.digits <-\
    \ ifelse(decimal.digits == \"D\", 13, decimal.digits)\n  decimal.digits <- ifelse(decimal.digits\
    \ == \"E\", 14, decimal.digits)\n  decimal.digits <- ifelse(decimal.digits ==\
    \ \"F\", 15, decimal.digits)\n  decimal.digits <- as.numeric(decimal.digits)\n\
    \  sum(is.prime(decimal.digits))\n}", "\n  l <- nchar(num)\n  if (l == 0) return(0)\n\
    \  hex_list <- c(0:9,'A','B','C','D','E','F')\n  hex_list_prime <- c(2,3,5,7,11,13)\n\
    \  sum_hex <- 0\n  for (i in 1:l) {\n    for (j in 1:length(hex_list_prime)) {\n\
    \      if (num[i] == hex_list[hex_list_prime[j]]) sum_hex <- sum_hex + 1\n   \
    \ }\n  }\n  return(sum_hex)\n}", "\n  a <- unlist(strsplit(num, \"\"))\n  b <-\
    \ length(a[a %in% c(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")])\n  return(b)\n\
    }\n", "\n  num <- toupper(num)\n  flag <- 0\n  key <- c(\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\")\n  for (i in 1:nchar(num)) {\n    if (substr(num, i, i) %in%\
    \ key) {\n      flag <- flag + 1\n    }\n  }\n  return(flag)\n}\n", "\n  dec_vec\
    \ <- as.numeric(strsplit(num, split = \"\")[[1]])\n  prime_vec <- c(2, 3, 5, 7,\
    \ 11, 13)\n  sum(dec_vec %in% prime_vec)\n}\n\nhex_key(\"AB\")\nhex_key(\"1077E\"\
    )\nhex_key(\"ABED1A33\")\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")\n",
  "\n  num <- tolower(num)\n  #convert from hex to dec and then determine the type\
    \ of number\n  num <- strtoi(num, base = 16)\n  primes <- c(2, 3, 5, 7, 11, 13)\n\
    \  cnt <- 0\n  for (i in num) {\n    if (i %in% primes) cnt <- cnt + 1\n  }\n\
    \  return(cnt)\n}\n", "\n  if (is.na(num)) return(0)\n  is_prime <- function(i)\
    \ {\n    if (i == 0) return(FALSE)\n    if (i == 1) return(FALSE)\n    j <- 2\n\
    \    while (j <= i - 1) {\n      if (i %% j == 0) return(FALSE)\n      j <- j\
    \ + 1\n    }\n    return(TRUE)\n  }\n  primes <- c(2, 3, 5, 7, 11, 13)\n  num\
    \ <- as.character(num)\n  lst <- unlist(strsplit(num, split = \"\"))\n  cnt <-\
    \ 0\n  for (i in lst) {\n    i <- as.integer(i, base = 16)\n    if (is_prime(i))\
    \ cnt <- cnt + 1\n  }\n  return(cnt)\n}\n", "\n  primes <- c(2, 3, 5, 7, 11, 13)\n\
    \  sum(num %in% primes)\n}\nhex_key(\"ABED1A33\")\n", "\n  # your code here\n}",
  "\n    pn <- c(2,3,5,7,11,13)\n    val <- 0\n    num <- strsplit(num, split = '')[[1]]\n\
    \    for (i in 1:length(num)) {\n        if (as.numeric(num[i], 16) %in% pn) {\n\
    \            val <- val + 1\n        }\n    }\n    return(val)\n}\n", "\n    #\
    \ Let's prepare a vector of all possible hexadecimal digits.\n    hex = c(0:9,\
    \ letters[10:15])\n    # Now we convert our number to decimal.\n    decimal =\
    \ as.numeric(strtoi(num, 16))\n    # We'll now determine all prime digits in the\
    \ hexadecimal system.\n    primes = c(2, 3, 5, 7, 11, 13)\n    # Now we count\
    \ how many prime digits are in our number.\n    return(sum(decimal %in% primes))\n\
    }", "\n  num <- toupper(num)\n  primes <- data.frame(number = c('2', '3', '5',\
    \ '7', 'B', 'D'), \n                       prime = TRUE)\n  count <- 0\n  for\
    \ (digit in strsplit(num, '')[[1]]) {\n    if (primes$prime[primes$number == digit])\
    \ {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nhex_key('AB')\n\
    hex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\nhex_key('2020')\n",
  "\n    n <- nchar(num)\n    primes <- c(2,3,5,7,11,13)\n    prime_count <- 0\n \
    \   for (i in 1:n) {\n        if (substr(num, i, i) %in% primes) {\n         \
    \   prime_count <- prime_count + 1\n        }\n    }\n    return(prime_count)\n\
    }\n", "\n    # ...\n    cnt = 0\n    for (i in strsplit(num, \"\")[[1]]) {\n \
    \     #log(i)\n      if (i == \"2\" | i == \"3\" | i == \"5\" | i == \"7\" | i\
    \ == \"B\" | i == \"D\") {\n        cnt = cnt + 1\n      }\n    }\n    return(cnt)\n\
    }\n", "\n    arr <- c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n\
    \    res <- 0\n    for (i in 1:length(num)){\n        if(arr[i] %in% c('2','3','5','7','B','D')){\n\
    \            res <- res + 1\n        }\n    }\n    return(res)\n}", "\n  if(nchar(num)\
    \ == 0) {\n    return(0)\n  }\n  hex_nums <- c(0:9, \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\")\n  hex_prime_index <- c(3, 5, 7, 9, 11, 13)\n  return(sum(tabulate(as.numeric(strsplit(num,\
    \ \"\")[[1]]), length(hex_nums), '==', hex_prime_index)))\n}\n", "\n    # check\
    \ each element of hexadecimal number\n    # if it is equal to 2, 3, 5, 7, B, D,\
    \ then add 1 to result, else add 0\n    # return the result\n    sum(sapply(strsplit(num,\
    \ '')[[1]], function(x) { \n        if (x %in% c('2', '3', '5', '7', 'B', 'D'))\
    \ 1 else 0\n    }))\n}", "\n    int <- as.integer(strsplit(num, '')[[1]])\n  \
    \  int[int > 9] <- c(10, 11, 12, 13, 14, 15)\n    sum(is.prime(int))\n}\nhex_key('AB')\n\
    hex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\nhex_key('2020')\n",
  "\n  if (num==\"\") return(0)\n  num <- unlist(strsplit(num, \"\"))\n  HKEY <- c(\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n  sum(HKEY %in% num)\n}", "\n    return(sum(num\
    \ %in% c('2','3','5','7','B','D')))\n}\n", "\n  if(nchar(num)==0) return(0)\n\
    \  if(grepl(\"([abcd]|[ef])\", num, ignore.case = TRUE)) return(1)\n  if(grepl(\"\
    2|3|5|7\", num, ignore.case = TRUE)) return(1)\n  return(0)\n}\nhex_key <- function(hex)\
    \ {\n  count <- 0\n  for(c in unlist(strsplit(hex, ''))) {\n    if(c %in% c('2',\
    \ '3', '5', '7', 'B', 'D')) count <- count + 1\n  }\n  return(count)\n}\n", "\n\
    \  # Your code here\n  num = toupper(num)\n  primes = c(\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\")\n  count = 0\n  for (prime in primes) {\n    count = count\
    \ + str_count(num, prime)\n  }\n  return(count)\n}\n\ncat(hex_key(\"AB\"), \"\\\
    n\")\ncat(hex_key(\"1077E\"), \"\\n\")\ncat(hex_key(\"ABED1A33\"), \"\\n\")\n\
    cat(hex_key(\"123456789ABCDEF0\"), \"\\n\")\ncat(hex_key(\"2020\"), \"\\n\")\n",
  "\n    # your code here\n}\n ", "\n    # your code goes here\n    n=nchar(num)\n\
    \    c=0\n    for(i in 1:n){\n      tmp=substr(num,i,i)\n      if(tmp==\"2\" |\
    \ tmp==\"3\" | tmp==\"5\" | tmp==\"7\" | tmp==\"B\" | tmp==\"D\"){\n        c=c+1\n\
    \      }\n    }\n    return(c)\n}\nlibrary(testthat)\n\ntest_that(\"Multiple examples\"\
    , {\n  expect_equal(hex_key('AB'), 1)\n  expect_equal(hex_key('1077E'), 2)\n \
    \ expect_equal(hex_key('ABED1A33'), 4)\n  expect_equal(hex_key('123456789ABCDEF0'),\
    \ 6)\n  expect_equal(hex_key('2020'), 2)\n})\n\ntest_that(\"longer example\",\
    \ {\n  hex_key(\n    'AADC2E06B8B36B64B7AD30E96745B0F8D61C7A7B0B50F36B7E0F1CAAE0ACE9B9CED5F8F5D5E5F5C5F5A6F8C6A3E6A4A6E4F6A8A6F4A6F4C6A4E6A8A6F4A6E4C6A4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A8C6A4A6E4F6A",
  "\n  primeNums <- c(2, 3, 5, 7, 11, 13)\n  library(stringr)\n  base.to.dec <- function(str,\
    \ base) {\n    vals <- str_split(str, \"\")\n    pattern <- str_extract(str, \"\
    \\\\d+\")\n    pattern[is.na(pattern)] <- \"\"\n    pattern <- str_split(pattern,\
    \ \"\")\n    sum(vals[[1]] * base^(seq_along(vals[[1]]) - 1)) + sum(pattern[[1]]\
    \ * base^(seq_along(pattern[[1]]) - 1))\n  }\n  num <- base.to.dec(num, 16)\n\
    \  isPrime <- function(n) {\n    for (i in 2:(n - 1)) {\n      if (n %% i == 0)\
    \ {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  }\n  count <-\
    \ 0\n  digits <- str_split(num, \"\")\n  digits <- digits[[1]]\n  for (i in 1:length(digits))\
    \ {\n    if (isPrime(digits[i])) {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }", "\n  digits <- c(1:9, letters[c(1:6)])\n  primes <- c(2, 3, 5, 7, 11, 13)\n\
    \  return(sum(num %in% digits[primes]))\n}\n", "\n  primes <- c(2, 3, 5, 7, 11,\
    \ 13)\n  num <- toupper(num)\n  num <- unlist(strsplit(num, ''))\n  num <- as.numeric(num,\
    \ 16)\n  sum(num %in% primes)\n}\n", "\n  sum(grepl('[2357BDF]', toupper(num)))\n\
    }\n", "\n  count = 0\n  for (dig in unlist(strsplit(num, \"\"))) {\n    if (dig\
    \ %in% c('2', '3', '5', '7', 'B', 'D')) count = count + 1\n  }\n  return(count)\n\
    }\n", "\n    # num is a string\n    # convert num to integer\n    # get digits\n\
    \    # check for the primes\n    # count the total\n    # return the total\n \
    \   digits <- strsplit(num, '')[[1]]\n    # digits\n    count <- 0\n    for (i\
    \ in digits) {\n        dec_num <- 0\n        if (i %in% c(0:9)) {\n         \
    \   dec_num <- as.integer(i)\n        } else if (i == 'A') {\n            dec_num\
    \ <- 10\n        } else if (i == 'B') {\n            dec_num <- 11\n        }\
    \ else if (i == 'C') {\n            dec_num <- 12\n        } else if (i == 'D')\
    \ {\n            dec_num <- 13\n        } else if (i == 'E') {\n            dec_num\
    \ <- 14\n        } else if (i == 'F') {\n            dec_num <- 15\n        }\
    \ else {\n            stop('Invalid number')\n        }\n        # printf('%d\\\
    n', dec_num)\n        if (dec_num %in% c(2, 3, 5, 7, 11, 13)) {\n            count\
    \ <- count + 1\n        }\n    }\n    count\n}\nhex_key <- function(num) {\n \
    \   # num is a string\n    # convert num to integer\n    # get digits\n    # check\
    \ for the primes\n    # count the total\n    # return the total\n    digits <-\
    \ strsplit(num, '')[[1]]\n    # digits\n    count <- 0\n    for (i in digits)\
    \ {\n        dec_num <- 0\n        if (i %in% c(0:9)) {\n            dec_num <-\
    \ as.integer(i)\n        } else if (i == 'A') {\n            dec_num <- 10\n \
    \       } else if (i == 'B') {\n            dec_num <- 11\n        } else if (i\
    \ == 'C') {\n            dec_num <- 12\n        } else if (i == 'D') {\n     \
    \       dec_num <- 13\n        } else if (i == 'E') {\n            dec_num <-\
    \ 14\n        } else if (i == 'F", "\n\tnum_array <- strsplit(num, split = \"\"\
    )[[1]]\n\tnum_array <- toupper(num_array)\n\t\n\tis_prime <- function(num) {\n\
    \t\tif (num < 2) {\n\t\t\treturn(FALSE)\n\t\t} else if (num == 2 || num == 3)\
    \ {\n\t\t\treturn(TRUE)\n\t\t} else if (num %% 2 == 0 || num %% 3 == 0) {\n\t\t\
    \treturn(FALSE)\n\t\t}\n\t\t\n\t\ti <- 5\n\t\twhile (i*i <= num) {\n\t\t\tif (num\
    \ %% i == 0 || num %% (i+2) == 0) {\n\t\t\t\treturn(FALSE)\n\t\t\t}\n\t\t\ti <-\
    \ i + 6\n\t\t}\n\t\treturn(TRUE)\n\t}\n\t\n\thex_prime_count <- 0\n\tfor (i in\
    \ num_array) {\n\t\tas.integer(i, 16)\n\t\tif (is_prime(as.integer(i, 16))) {\n\
    \t\t\thex_prime_count <- hex_prime_count + 1\n\t\t}\n\t}\n\t\n\treturn(hex_prime_count)\n\
    }", "\n  # your code here\n}\n ", "\n  hex_prime_num <- c(2, 3, 5, 7, 11, 13)\n\
    \  num <- toupper(num)\n  num <- stringr::str_extract_all(num, \"[2-7ABD]\")\n\
    \  return(length(num[[1]]))\n}", "\n  num <- stringr::str_to_upper(num)\n  base16\
    \ <- stringr::str_extract_all(num, \"[0-9A-F]\")\n  base10 <- as.numeric(base(base16,\
    \ 16, 10))\n  base10 <- base10[base10 > 1]\n  base10 <- base10[base10 %% seq(2,\
    \ ceiling(base10 / 2)) != 0]\n  length(base10)\n}\n", "\n\tnum <- toupper(num)\n\
    \tcount <- 0\n\tfor (i in 1:nchar(num)) {\n\t\tif (num[i] %in% c(\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\")) {\n\t\t\tcount <- count + 1\n\t\t}\n\t}\n\treturn(count)\n\
    }\n", "\n  num_split <- unlist(strsplit(num, split = \"\"))\n  num_split <- as.integer(num_split,\
    \ base = 16)\n  num_primes <- num_split[which(num_split %in% c(2, 3, 5, 7, 11,\
    \ 13))]\n  length(num_primes)\n}\n\nset.seed(42)\nshuffled <- sample(1:100, 10)\n\
    shuffled", "\n  # your code here\n}\n", "\n  num <- toupper(num)\n  digits <-\
    \ c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n  prime_digits\
    \ <- c('2','3','5','7','B','D')\n  length(intersect(strsplit(num, split = '')[[1]],\
    \ prime_digits))\n}\n", "\n  digits <- as.character(c(0:9, \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"))\n  decimals <- c(0:9, 10:15)\n  # get the decimal numbers\n\
    \  dec <- decimals[match(strsplit(num, split = \"\")[[1]], digits)]\n  # get all\
    \ prime numbers\n  primes <- c(2, 3, 5, 7, 11, 13)\n  # count the number of primes\n\
    \  sum(dec %in% primes)\n}", "\n    dec <- as.integer(as.hexmode(num))\n    length(dec[is.prime(dec)])\n\
    }\n", "\n    num <- toupper(num)\n    if (num == \"\") return(0)\n    N <- length(num)\n\
    \    res <- vector(\"numeric\", N)\n    for (i in 1:N) {\n        res[i] <- substr(num,\
    \ i, i)\n    }\n    return(sum(res %in% c(\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\")))\n}", "\n  if (nchar(num) == 0) {\n    return(0)\n  }\n  digit <- substring(num,\
    \ 1, 1)\n  rest <- substring(num, 2, nchar(num))\n  if (digit %in% c('2', '3',\
    \ '5', '7', 'B', 'D')) {\n    return(1 + hex_key(rest))\n  } else {\n    return(hex_key(rest))\n\
    \  }\n}", "\n  # your code here\n  key <- c(0,1,2,3,4,5,6,7,8,9,\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\")\n  prime <- c(2,3,5,7,11,13)\n  strsplit(num,NULL)[[1]]\
    \ %in% prime\n}\n", "\n    primes <- c(2, 3, 5, 7, 11, 13)\n    digits <- c(0:9,\
    \ letters[11:15])\n    x <- length(unlist(strsplit(num, split=\"\")))\n    length(setdiff(x,\
    \ primes))\n}\nhex_key('AB')\nhex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\n\
    hex_key('2020')\n", "\n  nums <- as.vector(num)\n  nums <- toupper(nums)\n  #\
    \ if is.na(nums) return(0)\n  digits <- c(0:9, LETTERS[1:6])\n  prime_digits <-\
    \ c(2, 3, 5, 7, 11, 13)\n  hex_values <- digits[match(nums, digits)]\n  return(sum(hex_values\
    \ %in% prime_digits))\n}\nhex_key <- function(num) {\n  nums <- as.vector(num)\n\
    \  nums <- toupper(nums)\n  # if is.na(nums) return(0)\n  digits <- c(0:9, LETTERS[1:6])\n\
    \  prime_digits <- c(2, 3, 5, 7, 11, 13)\n  # hex_values <- digits[match(nums,\
    \ digits)]\n  return(sum(nums %in% prime_digits))\n}\nhex_key <- function(num)\
    \ {\n  if(!nchar(num)) return(0)\n  nums <- toupper(num)\n  prime_digits <- c(2,\
    \ 3, 5, 7, 11, 13)\n  return(sum(nums %in% prime_digits))\n}\nhex_key <- function(num)\
    \ {\n  nums <- toupper(num)\n  # nums <- c(0:9, LETTERS[1:6])\n  prime_digits\
    \ <- c(2, 3, 5, 7, 11, 13)\n  sum(nums %in% prime_digits)\n}\nhex_key <- function(num)\
    \ {\n  digits <- c(0:9, LETTERS[1:6])\n  prime_digits <- c(2, 3, 5, 7, 11, 13)\n\
    \  sum(digits[match(num, digits)] %in% prime_digits)\n}", "\n  # Please write\
    \ your code here!\n}\n", "\n  num <- toupper(num)\n  # convert to decimal\n  num\
    \ <- as.numeric(paste(as.character(num), sep = \"\", collapse = \"\"))\n  num\
    \ <- sum(num)\n  num <- as.numeric(num)\n  # determine if is prime\n  num <- is.prime(num)\n\
    \  # return number\n  return(num)\n}\n", "\n  n <- nchar(num)\n  primes <- c(2,\
    \ 3, 5, 7, 11, 13)\n  count <- 0\n  for (i in 1:n) {\n    if (any(num[i] == toupper(letters[seq(10,\
    \ 15)]))) {\n      if (any(toupper(letters[seq(10, 15)])[num[i]] == primes)) count\
    \ <- count + 1\n    } else {\n      if (any(num[i] == primes)) count <- count\
    \ + 1\n    }\n  }\n  return(count)\n}\n", "\n    hex_digits <- c('2','3','5','7','B','D')\n\
    \    if(nchar(num) == 0) return(0)\n    if(is.element(substr(num, 1, 1), hex_digits))\
    \ return(1 + hex_key(substr(num, 2, nchar(num))))\n    return(hex_key(substr(num,\
    \ 2, nchar(num))))\n}\n", "\n    # your code goes here\n}\n", "\n  str_extract_all(num,\
    \ '[[:upper:]]')[[1]] %>%\n    paste(collapse = '') %>%\n    str_split('(?<=.{2})')\
    \ %>%\n    vapply(function(x) as.integer(str_to_upper(x), 16L), double(1)) %>%\n\
    \    sum(is.prime(.))\n}\n", "\n    if(is.character(num)) {\n        as.numeric(strsplit(num,\
    \ split = \"\")[[1]])\n    } else {\n        num\n    }\n}\n", "\n  # Create an\
    \ array with the digits\n  digits <- unlist(strsplit(num, \"\"))\n  # Create an\
    \ array with the digit values\n  digits_vals <- as.numeric(as.character(digits),\
    \ 16)\n  # Filter out the digits that are not primes\n  digits_vals <- digits_vals[digits_vals\
    \ %in% c(2, 3, 5, 7, 11, 13)]\n  # Count the number of primes\n  length(digits_vals)\n\
    }\n\nhex_key(\"123456789ABCDEF0\")\n", "\n  n <- nchar(num)\n  count <- 0\n  for\
    \ (i in 1:n) {\n    c <- substr(num, i, i)\n    if (c %in% c('2', '3', '5', '7',\
    \ 'B', 'D')) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\nhex_key('AB')\n\
    \nhex_key('1077E')\n\nhex_key('ABED1A33')\n\nhex_key('123456789ABCDEF0')\n\nhex_key('2020')\n",
  "\n    if (num == \"\") return(0)\n    reg <- \"[^0-9A-F]\"\n    num <- str_replace_all(num,\
    \ reg, \"\")\n    reg <- \"([A-F])\"\n    num <- str_replace_all(num, reg, \"\
    11\")\n    reg <- \"([0-9])\"\n    num <- str_replace_all(num, reg, \"\\\\1\"\
    )\n    num <- strsplit(num, \"\")[[1]]\n    num <- sapply(num, as.numeric)\n \
    \   is.prime <- function(x) {\n        if (x == 2) return(TRUE)\n        if (x\
    \ %% 2 == 0) return(FALSE)\n        for (i in seq(3, floor(sqrt(x)), 2)) {\n \
    \           if (x %% i == 0) return(FALSE)\n        }\n        return(TRUE)\n\
    \    }\n    sum(sapply(num, is.prime))\n}\n", "\n    is_prime <- function(x) x\
    \ > 1 && all(x %% 2:(x-1) != 0)\n    hex_list <- strsplit(num, split = '')[[1]]\n\
    \    dec_list <- as.integer(hex_list, 16)\n    sum(is_prime(dec_list))\n}", "\n\
    \    lennum <- nchar(num)\n    prime_list <- c(2,3,5,7,11,13)\n    counter <-\
    \ 0\n    for (i in 1:lennum) {\n        if (substr(num,i,i) %in% prime_list) counter\
    \ <- counter + 1\n    }\n    return(counter)\n}\n", "\n  primes = c(2, 3, 5, 7,\
    \ 11, 13)\n  num = toupper(num)\n  num = unlist(strsplit(num, \"\"))\n  num =\
    \ as.numeric(num, 16)\n  sum(num %in% primes)\n}\n", "\n  count <- 0\n  to_check\
    \ <- as.numeric(c(\"A\", \"B\", \"D\"))\n  # to_check <- c(2, 3, 5, 7, 11, 13)\n\
    \  for (i in 1:nchar(num)) {\n    check <- strsplit(num, split=\"\")[[1]][i]\n\
    \    if (check %in% to_check) {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\nhex_key('AB')\nhex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\n\
    hex_key('2020')\n", "\n   # your code here\n}", "\n  num_primes <- 0\n  for (digit\
    \ in strsplit(num, \"\")[[1]]) {\n    if (digit %in% c('2', '3', '5', '7', 'B',\
    \ 'D')) {\n      num_primes <- num_primes + 1\n    }\n  }\n  return(num_primes)\n\
    }", "\n  num <- toupper(num)\n  prime_digits <- c('2', '3', '5', '7', 'B', 'D')\n\
    \  sum(sapply(strsplit(num, '')[[1]], function(x) x %in% prime_digits))\n}\nhex_key('AB')\n\
    hex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\nhex_key('2020')\n",
  "\n  primes <- c('2', '3', '5', '7', 'B', 'D')\n  as.numeric(str_count(num, primes))\n\
    }\nhex_key('AB')\nhex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\n\
    hex_key('2020')\n", "\n  # define the prime hexa numbers\n  hexprime = c(2,3,5,7,11,13)\n\
    \  # convert the hexadecimal to decimal\n  dex = as.numeric(strtoi(num, 16))\n\
    \  # determin the numbers of prime digits\n  sum(dex %in% hexprime)\n}\n", "\n\
    \  # write your code here\n}", "\n    num <- toupper(num)\n    num_prime <- c(\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    num_prime <- list(num_prime)\n  \
    \  if (num == \"\") {\n        return(0)\n    } else {\n        return(sum(str_count(num,\
    \ num_prime)))\n    }\n}\n", "\n  # YOUR CODE HERE\n  num <- sub(\"^0*\", \"\"\
    , num)\n  if (nchar(num) == 0) return(0)\n  if (grepl(\"[g-zG-Z]\", num)) return(0)\n\
    \  primes <- c(2, 3, 5, 7, 11, 13)\n  return(sum(substr(num, 1, 1) %in% primes))\n\
    }\n ", "\n  return (sum(hex2dec(strsplit(num, split = \"\")[[1]]) %in% c(2, 3,\
    \ 5, 7, 11, 13)))\n}\n", "\n  if (num == \"\") {\n    return(0)\n  } else {\n\
    \    digits <- strsplit(num, \"\")[[1]]\n    primes <- c(2, 3, 5, 7, 11, 13)\n\
    \    vapply(digits, function(digit) {\n      if (as.character(digit) %in% primes)\
    \ {\n        1\n      } else {\n        0\n      }\n    }, FUN.VALUE = 1)\n  }\n\
    }\n", "\n  digits <- substr(num, start = seq_along(num), stop = seq_along(num))\n\
    \  sum(digits %in% c(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"))\n}\n", "\n   \
    \ # num: hexadecimal number as a string\n    # return: number of prime hexadecimal\
    \ digits\n    # your code here\n}\n", "\n  primes <- c(2, 3, 5, 7, 11, 13)\n \
    \ res <- 0\n  for (i in 1:nchar(num)) {\n    if (substr(num, i, i) %in% primes)\
    \ {\n      res <- res + 1\n    }\n  }\n  return(res)\n}", "\n    # Your code here\n\
    }\n", "\n    # Your code here\n}\n", "\n  count <- 0\n  for (i in num) {\n   \
    \ if (i == 'A' | i == 'B' | i == 'D') {\n      count <- count + 1\n    }\n   \
    \ if (i == '2' | i == '3' | i == '5' | i == '7') {\n      count <- count + 1\n\
    \    }\n  }\n  count\n}\n\nhex_key('1077E')\nhex_key('1077')\nhex_key('ABED1A33')\n\
    hex_key('123456789ABCDEF0')\nhex_key('2020')\n", "\n  # set to uppercase\n  num\
    \ <- toupper(num)\n  # remove non-hexadecimal digits\n  num <- gsub(\"[^0-9A-F]\"\
    , \"\", num)\n  # make a list of individual hexadecimal digits\n  num <- strsplit(num,\
    \ \"\")[[1]]\n  # convert to decimal numbers\n  num <- as.numeric(num, 16)\n \
    \ # get list of primes for these digits\n  num <- num[num %in% c(2, 3, 5, 7, 11,\
    \ 13)]\n  # return the length of the list\n  return(length(num))\n}", "\n  count\
    \ <- 0\n  for (i in 1:nchar(num)) {\n    if (substr(num, i, i) %in% c('2', '3',\
    \ '5', '7', 'B', 'D')) {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\n\
    print(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))\n ", "\n  hex_digits\
    \ = 0\n  prime_hex_digits = 0\n  for (i in seq_along(num)) {\n    # hex_digits\
    \ = hex_digits + as.numeric(num[i])\n    if (num[i] == \"A\" | num[i] == \"B\"\
    \ | num[i] == \"D\" | num[i] == \"E\") {\n      prime_hex_digits = prime_hex_digits\
    \ + 1\n    } else if (num[i] == \"3\" | num[i] == \"5\" | num[i] == \"7\") {\n\
    \      prime_hex_digits = prime_hex_digits + 1\n    }\n  }\n  print(prime_hex_digits)\n\
    }\n", "\n    a <- as.integer(strsplit(num, \"\")[[1]])\n    sum(a %in% c(2,3,5,7,11,13))\n\
    }\n", "\n  new <- list()\n  total <- 0\n  for (i in strsplit(num, '')[[1]]) {\n\
    \    if (i == 'A' | i == 'B' | i == 'D') {\n      total <- total + 1\n    } else\
    \ if (i == 'C' | i == 'E' | i == 'F') {\n      next\n    } else {\n      if (is.prime(as.numeric(i)))\
    \ {\n        total <- total + 1\n      }\n    }\n  }\n  return(total)\n}", "\n\
    \    # your code goes here.\n    # numbers 2, 3, 5, 7, B (=decimal 11), D (=decimal\
    \ 13)\n    is_prime = function(x) {\n        if (x == 1) {\n            return(FALSE)\n\
    \        }\n        for (i in 2:(x - 1)) {\n            if (x %% i == 0) {\n \
    \               return(FALSE)\n            }\n        }\n        return(TRUE)\n\
    \    }\n    num = toupper(num)\n    hex_primes = c('2', '3', '5', '7', 'B', 'D')\n\
    \    count = 0\n    for (i in seq_along(num)) {\n        if (hex_primes %in% num[i])\
    \ {\n            count = count + 1\n        }\n    }\n    return(count)\n}", "\n\
    \  \n  # Create a list of prime hexadecimal numbers\n  primes <- c('2', '3', '5',\
    \ '7', 'B', 'D')\n  \n  # If the num is a string of length 0, return 0\n  if (length(num)\
    \ == 0) {\n    return(0)\n  }\n  \n  # Else for each character in the num string,\n\
    \  # check if it is a prime hexadecimal digit,\n  # and return the number of prime\
    \ hexadecimal\n  # digits\n  else {\n    return(sum(num %in% primes))\n  }\n}\n",
  "\n\t# Your code here\n}", "\n    num <- strsplit(num, \"\")[[1]]\n    count <-\
    \ 0\n    primes <- c(2, 3, 5, 7, 11, 13)\n    for (digit in num) {\n        if\
    \ (digit %in% primes) {\n            count <- count + 1\n        }\n    }\n  \
    \  return(count)\n}\n\nhex_key(\"AB\")\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\"\
    )\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")\n", "\n  dec <- as.numeric(stringr::str_extract_all(num,\
    \ '[0-9A-F]')[[1]])\n  primes <- which(primenumber::primenumber(dec) == TRUE)\n\
    \  return(length(primes))\n}\n\nhex_key('AB')\nhex_key('1077E')\nhex_key('ABED1A33')\n\
    hex_key('123456789ABCDEF0')\nhex_key('2020')\n ", "\n\t# regex matches 1 or more\
    \ digits (0-9)\n\t# or a digit (0-9) followed by a letter (A-F)\n\t# or a letter\
    \ (A-F) followed by a digit (0-9)\n\t# or a letter (A-F)\n\tdigits <- str_extract_all(num,\
    \ '[0-9]+|[0-9][A-F]|[A-F][0-9]|[A-F]')\n\tprimes <- c(2, 3, 5, 7, 11, 13)\n\t\
    # count the number of primes\n\tsum(sapply(digits, function(x) {\n\t\tas.numeric(x)\
    \ %in% primes\n\t}))\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in num)\
    \ {\n    if (i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\"\
    \ || i == \"D\") {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n\
    assertthat::assert_that(hex_key('AB'), equals(1))\nassertthat::assert_that(hex_key('1077E'),\
    \ equals(2))\nassertthat::assert_that(hex_key('ABED1A33'), equals(4))\nassertthat::assert_that(hex_key('123456789ABCDEF0'),\
    \ equals(6))\nassertthat::assert_that(hex_key('2020'), equals(2))\n ", "\n\t#\
    \ Create a vector of hex primes\n\thex_primes <- c(2, 3, 5, 7, 11, 13)\n\t# Create\
    \ a vector of digits\n\tdigits <- unlist(strsplit(num, ''))\n\t# The function\
    \ to convert a hex digit to decimal\n\tget_digit <- function(digit) {\n\t\tif\
    \ (digit %in% c('A', 'B', 'C', 'D', 'E', 'F')) {\n\t\t\treturn(as.numeric(digit,\
    \ 16))\n\t\t} else {\n\t\t\treturn(as.numeric(digit))\n\t\t}\n\t}\n\t# Apply the\
    \ function to the digits\n\tdigits <- sapply(digits, get_digit)\n\t# Count the\
    \ number of digits\n\treturn(sum(digits %in% hex_primes))\n}\n", "\n  # your code\
    \ here\n}\n", "\n  nums <- c(2, 3, 5, 7, 11, 13)\n  sum(sapply(strsplit(num, \"\
    \")[[1]], function(x) as.numeric(x, 16) %in% nums))\n}", "\n  # put your code\
    \ here\n  c(2,3,5,7,11,13) %in% as.numeric(as.hexmode(num)) %>% sum\n}\nhex_key(\"\
    AB\")\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\")\nhex_key(\"123456789ABCDEF0\"\
    )\nhex_key(\"2020\")\n", "\n    newNum <- gsub(\"A\", \"11\", num)\n    newNum\
    \ <- gsub(\"B\", \"12\", newNum)\n    newNum <- gsub(\"C\", \"13\", newNum)\n\
    \    newNum <- gsub(\"D\", \"14\", newNum)\n    newNum <- gsub(\"E\", \"15\",\
    \ newNum)\n    newNum <- gsub(\"F\", \"16\", newNum)\n    num2 <- as.numeric(unlist(strsplit(newNum,\
    \ \"\")))\n    n <- sum(is.prime(num2))\n    return(n)\n}", "\n  if (num == \"\
    \") return(0)\n  hex_digits <- c(0:9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    )\n  n <- nchar(num)\n  primes <- matrix(FALSE, nrow = n, ncol = n)\n  n_primes\
    \ <- 0\n  for (i in 1:n) {\n    i_num <- as.numeric(substr(num, i, i))\n    if\
    \ (hex_digits[i_num + 1] %in% c(\"B\", \"D\"))\n      n_primes <- n_primes + 1\n\
    \  }\n  return(n_primes)\n}\nhex_key(num)", "\n  primes <- c(2, 3, 5, 7, 11, 13)\n\
    \  count <- 0\n  num_splited <- strsplit(num, \"\")[[1]]\n  for (i in 1:length(num_splited))\
    \ {\n    if (num_splited[i] %in% primes | num_splited[i] %in% seq(0,9)) {\n  \
    \    count <- count + 1\n    }\n  }\n  return(count)\n}\nhex_key(\"1077E\")\n",
  "\n    sum(str_detect(num, '^[2357BD]$'))\n}", "\n    is_prime <- function(n) {\n\
    \        n <- as.integer(n)\n        n > 1 && n == 2 || n %% 2 != 0 && n == 3\
    \ || n %% 3 != 0 && n == 5 || n %% 5 != 0 && n == 7 || n %% 7 != 0 && n == 11\
    \ || n %% 11 != 0 && n == 13 || n %% 13 != 0 && n == 17 || n %% 17 != 0 && n ==\
    \ 19 || n %% 19 != 0 && n == 23 || n %% 23 != 0 && n == 29 || n %% 29 != 0 &&\
    \ n == 31 || n %% 31 != 0 && n == 37 || n %% 37 != 0 && n == 41 || n %% 41 !=\
    \ 0 && n == 43 || n %% 43 != 0 && n == 47 || n %% 47 != 0 && n == 53 || n %% 53\
    \ != 0 && n == 59 || n %% 59 != 0 && n == 61 || n %% 61 != 0 && n == 67 || n %%\
    \ 67 != 0 && n == 71 || n %% 71 != 0 && n == 73 || n %% 73 != 0 && n == 79 ||\
    \ n %% 79 != 0 && n == 83 || n %% 83 != 0 && n == 89 || n %% 89 != 0 && n == 97\
    \ || n %% 97 != 0 && n == 101 || n %% 101 != 0 && n == 103 || n %% 103 != 0 &&\
    \ n == 107 || n %% 107 != 0 && n == 109 || n %% 109 != 0 && n == 113 || n %% 113\
    \ != 0 && n == 127 || n %% 127 != 0 && n == 131 || n %% 131 != 0 && n == 137 ||\
    \ n %% 137 != 0 && n == 139 || n %% 139 != 0 && n == 149 || n %% 149 != 0 && n\
    \ == 151 || n %% 151 != 0 && n == 157 || n %% 157 != 0 && n == 163 || n %% 163\
    \ != 0 && n == 167 || n %% 167 != 0 && n == 173 || n %% 173 != 0 && n == 179 ||\
    \ n %% 179 != 0 && n == 181 || n %% 181 != 0 && n == 191 || n %% 191 != 0 && n\
    \ == 193 || n %% 193 != 0 && n == 197 || n %% 197 != 0 && n == 199 || n %% 199\
    \ != 0 && n == 211 || n %% 211 != 0 && n == 223 || n %% 223 != 0 && n == 227 ||",
  "\n    library(Hexadecimal)\n    library(primes)\n    vector <- as.hexadecimal(num)\n\
    \    primes_vector <- primes(15)\n    counts <- 0\n    for (i in vector) {\n \
    \       if (i %in% primes_vector) {\n            counts <- counts + 1\n      \
    \  }\n    }\n    return(counts)\n}\n\nhex_key('AB')\nhex_key('1077E')\nhex_key('ABED1A33')\n\
    hex_key('123456789ABCDEF0')\nhex_key('2020')\n", "\n  # replace any digits with\
    \ 0\n  num <- str_replace_all(num, \"[0-9]\", \"0\")\n  # replace any non-hex\
    \ characters with empty space\n  num <- str_replace_all(num, \"[^0-9A-F]\", \"\
    \")\n  # if the string is empty, return 0\n  if (str_length(num) == 0) {\n   \
    \ return(0)\n  }\n  # remove all digits\n  num <- str_replace_all(num, \"[0-9]\"\
    , \"\")\n  # count number of remaining letters\n  return(str_length(num))\n}\n",
  "\n  sum(hex_key_aux(num))\n}\n", "\n  digits <- letters[c(10:15)]\n  is_prime <-\
    \ vector(mode = \"logical\", length = nchar(num))\n  for (i in 1:nchar(num)) {\n\
    \    is_prime[i] <- is.prime(as.numeric(substr(num, i, i)))\n  }\n  output <-\
    \ sum(is_prime)\n  return(output)\n}", "\n\tas.numeric(unlist(strsplit(num, \"\
    \"))) %in% c(2, 3, 5, 7, 11, 13) %>% sum()\n}\n", "\n\t# YOUR CODE HERE\n}", "\n\
    \  hex_key <- strsplit(num, \"\")\n  hex_key <- unlist(hex_key)\n  dec_key <-\
    \ c()\n  for (i in 1:length(hex_key)) {\n    if (hex_key[i] %in% c(\"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\")) {\n      dec_key[i] <- as.numeric(as.character(as.hexmode(hex_key[i])))\n\
    \    } else {\n      dec_key[i] <- as.numeric(hex_key[i])\n    }\n  }\n  prime_key\
    \ <- sum(is.prime(dec_key))\n  return(prime_key)\n}\n", "\n    primes <- c(2,\
    \ 3, 5, 7, 11, 13)\n    temp <- intToUtf8(primes)\n    key <- c(2, 3, 5, 7, temp[1],\
    \ temp[2])\n    if (is.null(num)) {\n        return(0)\n    }\n    else {\n  \
    \      return(sum(key %in% unlist(strsplit(num, \"\"))))\n    }\n}\nhex_key(\"\
    1077E\")\n", "\n    length(grep(\"^[2357BD]$\", unlist(strsplit(num, ''))))\n\
    }\n", "\n  # number of prime digits = number of digits in num that are primes\n\
    \  # prime digits are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13)\n  # convert\
    \ num to a list of digits\n  num.list <- strsplit(num, \"\")[[1]]\n  # length\
    \ of list is number of digits\n  num.list.length <- length(num.list)\n  # number\
    \ of digits that are prime\n  num.primes <- 0\n  # iterate through the digits\n\
    \  for (i in 1:num.list.length) {\n    # is the digit a prime?\n    if (num.list[i]\
    \ %in% c(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")) {\n      # increment the count\
    \ of prime digits\n      num.primes <- num.primes + 1\n    }\n  }\n  # return\
    \ the number of prime digits\n  return(num.primes)\n}\n", "\n\tcnt <- 0\n\tfor\
    \ (elem in strsplit(num, \"\")[[1]]) {\n\t\tif (elem %in% c(\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\")) {\n\t\t\tcnt <- cnt + 1\n\t\t}\n\t}\n\treturn(cnt)\n}",
  "\n\t# num <- \"AB\"\n\t# num <- \"1077E\"\n\t# num <- \"ABED1A33\"\n\t# num <-\
    \ \"123456789ABCDEF0\"\n\t# num <- \"2020\"\n\tprimes_hex <- c(2, 3, 5, 7, 11,\
    \ 13)\n\n\t# convert each string character to the integer\n\t# num_int <- as.integer(strsplit(num,\
    \ '')[[1]])\n\tnum_int <- as.integer(strsplit(num, '')[[1]])\n\n\t# if num_int[i]\
    \ is in primes_hex, then\n\t# num_int[i] == TRUE, else FALSE\n\tis_prime <- num_int\
    \ %in% primes_hex\n\n\t# sum(is_prime) = count the number of primes in the given\
    \ string\n\tsum(is_prime)\n}\n", "\n  # your code here\n  # placeholder\n  prime_number\
    \ <- c(2,3,5,7,11,13)\n  prime_letter <- c(\"B\",\"D\")\n  prime_number_letter\
    \ <- c(prime_number,prime_letter)\n  number_letter <- toupper(strsplit(num,\"\"\
    )[[1]])\n  return(sum(number_letter %in% prime_number_letter))\n}", "\n  hex =\
    \ c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n  primes\
    \ = c(2,3,5,7,11,13)\n  hex_positions = match(num, hex)\n  hex_positions = intersect(hex_positions,\
    \ primes)\n  length(hex_positions)\n}", "\n  \n  if (nchar(num) == 0) return(0)\n\
    \  \n  count <- 0\n  for (i in 1:nchar(num)) {\n    if (num[i] %in% c('2', '3',\
    \ '5', '7', 'B', 'D')) count <- count + 1\n  }\n  \n  return(count)\n}\n\nhex_key('AB')\n\
    \nhex_key('1077E')\n\nhex_key('ABED1A33')\n\nhex_key('123456789ABCDEF0')\n\nhex_key('2020')\n",
  "\n    num <- toupper(num)\n    n <- nchar(num)\n    prime <- c(2,3,5,7,11,13)\n\
    \    val <- 16^(n-1):1\n    digi <- substr(num,1,n)\n    digi <- switch(digi,\n\
    \                   A = 10,\n                   B = 11,\n                   C\
    \ = 12,\n                   D = 13,\n                   E = 14,\n            \
    \       F = 15)\n    digi <- sapply(1:n,function(i) digi[i]*val[i])\n    return(sum(digi\
    \ %in% prime))\n}\n\nhex_key2 <- function(num) {\n    num <- toupper(num)\n  \
    \  sum(num %in% c('2','3','5','7','B','D'))\n}\n\nhex_key3 <- function(num) {\n\
    \    n <- nchar(num)\n    prime <- c(2,3,5,7,11,13)\n    val <- 16^(n-1):1\n \
    \   digi <- substr(num,1,n)\n    digi <- switch(digi,\n                   A =\
    \ 10,\n                   B = 11,\n                   C = 12,\n              \
    \     D = 13,\n                   E = 14,\n                   F = 15)\n    digi\
    \ <- sapply(1:n,function(i) digi[i]*val[i])\n    return(sum(digi %in% prime))\n\
    }\nhex_key('AB')\nhex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\n\
    hex_key('2020')\n\nhex_key2('AB')\nhex_key2('1077E')\nhex_key2('ABED1A33')\nhex_key2('123456789ABCDEF0')\n\
    hex_key2('2020')\n\nhex_key3('AB')\nhex_key3('1077E')\nhex_key3('ABED1A33')\n\
    hex_key3('123456789ABCDEF0')\nhex_key3('2020')\n\nlibrary(microbenchmark)\nmicrobench",
  "\n  \n}\n", "\n  num <- strsplit(num, \"\")[[1]]\n  num <- as.numeric(num, 16)\n\
    \  is.prime <- function(x) {\n    x <- as.numeric(x)\n    if (x < 2) return(FALSE)\n\
    \    for (div in 2:(x-1)) {\n      if (x %% div == 0) return(FALSE)\n    }\n \
    \   return(TRUE)\n  }\n  sum(is.prime(num))\n}\n", "\n\tnum <- toupper(num)\n\t\
    num <- gsub(\"[ABCDEF]\", \"[11, 12, 13, 14, 15, 16]\", num)\n\tnum <- as.numeric(unlist(strsplit(num,\
    \ split = \"\")))\n\tsum(num %% 2 != 0 & num %% 3 != 0 & num %% 5 != 0 & num %%\
    \ 7 != 0 & num != 1)\n}\ntest_that(\"Basic examples (2)\", {\n\texpect_equal(hex_key(\"\
    2020\"), 2)\n\texpect_equal(hex_key(\"AB\"), 1)\n\texpect_equal(hex_key(\"1077E\"\
    ), 2)\n\texpect_equal(hex_key(\"ABED1A33\"), 4)\n\texpect_equal(hex_key(\"123456789ABCDEF0\"\
    ), 6)\n})\n", "\n  total_prime <- 0\n  for (i in strsplit(num, NULL)[[1]]) {\n\
    \    if (i %in% c('2', '3', '5', '7', 'B', 'D')) {\n      total_prime <- total_prime\
    \ + 1\n    }\n  }\n  return(total_prime)\n}\n", "\n  num <- chartr('abcdef', 'ABCDEF',\
    \ num)\n  n <- nchar(num)\n  if (n == 0) return(0)\n  prime_hex_chars <- c('2',\
    \ '3', '5', '7', 'B', 'D')\n  count <- 0\n  for (i in 1:n) {\n    if (num[i] %in%\
    \ prime_hex_chars) count <- count + 1\n  }\n  return(count)\n}\n", "\n    hex_key\
    \ <- c(0,1,2,3,4,5,6,7,8,9, 10, 11, 12, 13, 14, 15)\n    # hex_key_primes <- c(2,3,5,7,11,13)\n\
    \    num <- toupper(num)\n    num <- strsplit(num, split = \"\")[[1]]\n    num\
    \ <- as.numeric(num)\n    num <- num[num %in% hex_key]\n    sum(num %in% c(2,3,5,7,11,13))\n\
    }\n\n", "\n  primes <- c(2, 3, 5, 7, 11, 13)\n  hex_num <- c(0:9, \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\")\n  is_prime <- function(n) {\n    n < 2 || any(n\
    \ %% 2:(n-1) == 0)\n  }\n  n <- nchar(num)\n  sum(is_prime(hex_num[substr(num,\
    \ i, i)]))\n}\ncat(hex_key(\"AB\"), \"= 1\\n\")\ncat(hex_key(\"1077E\"), \"= 2\\\
    n\")\ncat(hex_key(\"ABED1A33\"), \"= 4\\n\")\ncat(hex_key(\"123456789ABCDEF0\"\
    ), \"= 6\\n\")\ncat(hex_key(\"2020\"), \"= 2\\n\")", "\n    hex <- c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n\
    \    primes <- c(2,3,5,7,11,13)\n    result <- 0\n    for (i in 1:nchar(num))\
    \ {\n        if (match(substr(num,i,i),hex) %in% primes) {\n            result\
    \ <- result + 1\n        }\n    }\n    return(result)\n}", "\n  # num is the input\
    \ number\n  # FILL IN THE BODY OF THIS FUNCTION ACCORDING TO THE DESCRIPTION ABOVE\n\
    }", "\n    # your code here\n    n <- nchar(num)\n    count <- 0\n    for (i in\
    \ 1:n) {\n        if (num[i] == '2' | num[i] == '3' | num[i] == '5' | \n     \
    \       num[i] == '7' | num[i] == 'B' | num[i] == 'D') {\n            count <-\
    \ count + 1\n        }\n    }\n    return(count)\n}\n", "\n    # how many prime\
    \ hex values are in num\n    # create a vector of all prime hex values\n    primes\
    \ <- c(2,3,5,7,11,13)\n    # convert the string to a vector\n    vec <- strsplit(num,\
    \ '')[[1]]\n    # check if each element of vec is in primes\n    # if it is then\
    \ add it to a new vector (res)\n    res <- numeric(0)\n    for (x in vec) {\n\
    \        if (x %in% primes) {\n            res <- c(res, x)\n        }\n    }\n\
    \    # return the length of the res vector\n    return(length(res))\n}\n", "\n\
    \  if(length(num) == 0) return(0)\n  num <- gsub(\"[^A-F0-9]\", \"\", num)\n \
    \ num <- toupper(num)\n  num <- as.integer(gsub(\"^0x\", \"\", paste0(\"0x\",\
    \ num)))\n  hex_prime <- c(2, 3, 5, 7, 11, 13)\n  sum(num %in% hex_prime)\n}\n",
  "\n  # Your code here\n  num_list <- c(0,1,2,3,4,5,6,7,8,9,\"A\",\"B\",\"C\",\"\
    D\",\"E\",\"F\")\n  # Consider only 0,2,3,5,7 and A,B,D\n  primes <- c(0,2,3,5,7,\"\
    A\",\"B\",\"D\")\n  ans <- 0\n  for(i in 1:length(num)){\n    if(num[i] %in% primes){\n\
    \      ans <- ans + 1\n    }\n  }\n  ans\n}", "\n  # your code goes here\n  return(sum(!num\
    \ %in% c(\"0\",\"1\",\"4\",\"6\",\"8\",\"9\",\"A\",\"C\")))\n}\n", "\n    library(hexView)\n\
    \    n <- nchar(num)\n    a <- hexToRaw(num)\n    b <- rawToChar(a)\n    l <-\
    \ stringr::str_split(b, \"\")\n    d <- data.frame(l)\n    d <- as.numeric(as.character(d$l))\n\
    \    c <- sum(d %in% c(2,3,5,7,11,13))\n    c\n}", "\n  num <- strsplit(num, '')[[1]]\n\
    \  return(sum(num %in% c(2, 3, 5, 7, 11, 13)))\n}", "\n  # your code here\n}",
  "\n    # your code here\n    return(0)\n}\n ", "\n  # Create a vector of possible\
    \ prime hex digits\n  # Use `charToRaw` to convert these to bytes\n  primes <-\
    \ charToRaw(c(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"))\n  \n  # Convert `num`\
    \ from hex to raw bytes\n  num <- hexToRaw(num)\n  \n  # Count the number of prime\
    \ hex digits in `num`\n  # Return the result\n  return(sum(num %in% primes))\n\
    }\n", "\n    # YOUR CODE HERE\n    if(nchar(num)==0) {\n        return(0)\n  \
    \  }\n    result <- 0\n    for(i in 1:nchar(num)) {\n        if(num[i]=='2'|num[i]=='3'|num[i]=='5'|num[i]=='7'|num[i]=='B'|num[i]=='D')\
    \ {\n            result <- result + 1\n        }\n    }\n    return(result)\n\
    }\n", "\n  # your code\n  primes <- c(2,3,5,7,11,13)\n  digits <- strsplit(num,\
    \ split=\"\")[[1]]\n  return(sum(primes %in% digits))\n}\n\nhex_key('AB')\nhex_key('1077E')\n\
    hex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\nhex_key('2020')\n", "\n  library(stringr)\n\
    \  library(pracma)\n  num <- str_split(num, \"\")[[1]]\n  num <- as.numeric(paste(num,\
    \ collapse = \"\"))\n  if (isprime(num)) {\n    return(1)\n  } else {\n    return(0)\n\
    \  }\n}\n", "\n  num <- toupper(num)\n  if (nchar(num) == 0) return(0)\n  if (nchar(num)\
    \ == 1) return(1)\n  if (num == '00') return(0)\n  if (num == '01') return(0)\n\
    \  if (num == '02') return(1)\n  if (num == '03') return(1)\n  if (num == '04')\
    \ return(0)\n  if (num == '05') return(1)\n  if (num == '06') return(0)\n  if\
    \ (num == '07') return(1)\n  if (num == '08') return(0)\n  if (num == '09') return(0)\n\
    \  if (num == '0A') return(1)\n  if (num == '0B') return(1)\n  if (num == '0C')\
    \ return(0)\n  if (num == '0D') return(1)\n  if (num == '0E') return(0)\n  if\
    \ (num == '0F') return(1)\n  num <- paste(num,'0',sep='')\n  i <- nchar(num)\n\
    \  c <- 0\n  for (i in i:1) {\n    c <- c + hex_key(substr(num,i,i))\n  }\n  return(c)\n\
    }", "\n  valid_digits <- c('2', '3', '5', '7', 'B', 'D')\n  digit_count <- 0\n\
    \  for (digit in num) {\n    if (any(digit == valid_digits)) digit_count <- digit_count\
    \ + 1\n  }\n  return(digit_count)\n}\n ", "\n  \n  # Convert input string to vector\
    \ of single characters\n  num = strsplit(num, '')[[1]]\n  \n  # Create vector\
    \ of prime hexadecimal digits\n  prime_nums = c(2, 3, 5, 7, 11, 13)\n  \n  # Create\
    \ vector of hexadecimal characters from 0 - F\n  hex_chars = c(0:9, 'A', 'B',\
    \ 'C', 'D', 'E', 'F')\n  \n  # Create vector of digits in input string\n  digits\
    \ = as.numeric(factor(num, levels = hex_chars))\n  \n  # Return number of digits\
    \ that are prime\n  sum(digits %in% prime_nums)\n}\n\nhex_key('2020')\n\nhex_key('123456789ABCDEF0')\n\
    \nhex_key('ABED1A33')\n\nhex_key('1077E')\n\nhex_key('AB')\n", "\n\t# Convert\
    \ number to upper case and separate the string\n\tnum <- toupper(num)\n\t# Create\
    \ list of valid prime hex digits\n\thex_list <- c(\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\")\n\t# Match valid hex digits with number and return the length\
    \ of the string\n\tlength(stringr::str_match(num, paste0(\"[\", paste0(hex_list,\
    \ collapse = \"\"), \"]\")))\n}", "\n  # create a vector of the hexadecimal digits\n\
    \  hex <- c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n\
    \  # get the position of elements in hex that are in num\n  positions <- match(strsplit(num,split='')[[1]],hex)\n\
    \  # get the value of those positions\n  positions <- hex[positions]\n  # create\
    \ a vector of hexadecimal primes\n  primes <- c('2','3','5','7','B','D')\n  #\
    \ get the position of elements in primes that are in positions\n  primes <- match(primes,positions)\n\
    \  # return the length of this vector\n  return(length(primes))\n}", "\n  digits\
    \ <- strsplit(num, split = \"\")[[1]]\n  hexes <- c(\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\")\n  digits[!(digits %in% hexes)] <- '1'\n  sum(as.numeric(digits))\n\
    }\nhex_key <- function(num) {\n  num = toupper(num)\n  count = 0\n  for (i in\
    \ seq_along(num)) {\n    if (num[i] %in% c(\"2\", \"3\", \"5\", \"7\", \"B\",\
    \ \"D\")) {\n      count = count + 1\n    }\n  }\n  return(count)\n}", "\n   \
    \ # Return the number of prime hexadecimal digits in `num`\n    digits <- unlist(strsplit(num,\
    \ \"\"))\n    primes <- c(2, 3, 5, 7, 11, 13)\n    sum(as.numeric(digits) %in%\
    \ primes)\n}", "\n  number_of_primes <- 0\n  num_upper <- toupper(num)\n  num_list\
    \ <- strsplit(num_upper, \"\")[[1]]\n  valid_list <- c(\"A\", \"B\", \"D\", \"\
    2\", \"3\", \"5\", \"7\")\n  for (i in num_list) {\n    if (i %in% valid_list)\
    \ {\n      number_of_primes <- number_of_primes + 1\n    }\n  }\n  return(number_of_primes)\n\
    }\n", "\n  if (is.null(num)) {\n    return(0)\n  }\n  num = toupper(num)\n  prime_hex\
    \ = c(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n  count = 0\n  for (i in 1:nchar(num))\
    \ {\n    if (substr(num, i, i) %in% prime_hex) {\n      count = count + 1\n  \
    \  }\n  }\n  return(count)\n}\n ", "\n  \n  a <- strsplit(num, \"\")\n  b <- unlist(a)\n\
    \  c <- as.numeric(b, base = 16)\n  d <- sum(c %in% c(2, 3, 5, 7, 11, 13))\n \
    \ \n  return(d)\n  \n}", "\n  prime_digits <- c(2, 3, 5, 7, 11, 13)\n  d <- strtoi(strsplit(num,\
    \ \"\")[[1]], 16)\n  sum(d %in% prime_digits)\n}\nhex_key('AB')\n\nhex_key('1077E')\n\
    \nhex_key('ABED1A33')\n\nhex_key('123456789ABCDEF0')\n\nhex_key('2020')\n", "\n\
    \  num <- toupper(num)\n  prime_hex_digits <- c(2, 3, 5, 7, \"B\", \"D\")\n  hex_digits\
    \ <- c(0:9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n  numbers <- strsplit(num,\
    \ split = \"\")[[1]]\n  sum(numbers %in% prime_hex_digits)\n}\n", "\n  count <-\
    \ 0\n  primes <- c(2,3,5,7,11,13)\n  for (p in primes) {\n    count <- count +\
    \ str_count(num, paste0(toString(p), collapse=\"\"))\n  }\n  count\n}\n\nhex_key('AB')\n\
    hex_key('1077E')\nhex_key('ABED1A33')\nhex_key('123456789ABCDEF0')\nhex_key('2020')\n",
  "\n  # your code here\n  # left open since a numeric string as input is not really\
    \ a valid hexadecimal number\n}\ntest_that('Solution is correct', {\n    expect_equal(hex_key('AB'),\
    \ 1)\n    expect_equal(hex_key('1077E'), 2)\n    expect_equal(hex_key('ABED1A33'),\
    \ 4)\n    expect_equal(hex_key('123456789ABCDEF0'), 6)\n    expect_equal(hex_key('2020'),\
    \ 2)\n})\nprint(\"Success!\")\n ", "\n    # create dictionary for hexa values\n\
    \    hexa_dict <- c('0'=0, '1'=1, '2'=2, '3'=3, '4'=4, '5'=5, '6'=6, '7'=7, \n\
    \                   '8'=8, '9'=9, 'A'=10, 'B'=11, 'C'=12, 'D'=13, 'E'=14, 'F'=15)\n\
    \    # create vector of prime numbers\n    prime_vec <- c(2, 3, 5, 7, 11, 13)\n\
    \    # create vector of hexa numbers to check\n    hexa_to_check <- numeric()\n\
    \    # convert hexadecimal to decimal\n    decimal <- strtoi(num, base=16)\n \
    \   # convert decimal to vector of characters\n    decimal_vec <- unlist(strsplit(as.character(decimal),\
    \ split=\"\"))\n    # for each char in vector, convert to number and add to vec\n\
    \    for (i in decimal_vec) {\n        hexa_to_check <- c(hexa_to_check, hexa_dict[i])\n\
    \    }\n    # count the number of primes in the vector\n    sum(hexa_to_check\
    \ %in% prime_vec)\n}\n", "\n  hex <- c(0:9, \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\")\n  prime_num <- c(2, 3, 5, 7, 11, 13)\n  primes <- rep(FALSE, length(hex))\n\
    \  primes[1:6] <- TRUE\n  count <- 0\n  for (i in 1:length(num)) {\n    if (primes[num[i]\
    \ == hex]) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n\
    \  counter = 0\n  num = toupper(num)\n  for (i in 1:nchar(num)) {\n    # print(substr(num,\
    \ i, i))\n    if (substr(num, i, i) %in% c(\"2\", \"3\", \"5\", \"7\", \"B\",\
    \ \"D\")) {\n      counter = counter + 1\n    }\n  }\n  return(counter)\n}\n",
  "\n  primes <- c(2, 3, 5, 7, 11, 13)\n  num <- toupper(num)\n  total <- 0\n  for\
    \ (i in 1:nchar(num)) {\n    if (num[i] %in% primes) {\n      total <- total +\
    \ 1\n    }\n  }\n  return(total)\n}\n", "\n  key_list <- c(2, 3, 5, 7, 11, 13)\n\
    \  result <- strsplit(num, \"\")[[1]]\n  result <- as.numeric(result, 16)\n  result\
    \ <- length(result[result %in% key_list])\n  return(result)\n}\n", "\n    return(sum(prime(as.numeric(charToRaw(num),\
    \ 16))))\n}\n", "\n    num <- toupper(num)\n    num <- gsub('[^0-9A-F]', '', num)\n\
    \    primes <- c('2', '3', '5', '7', 'B', 'D')\n    sum(num %in% primes)\n}",
  "\n  if(nchar(num) == 0) {\n    return(0)\n  }\n  else {\n    num = toupper(num)\n\
    \    number_of_prime_hex_digits = 0\n    for(i in 1:nchar(num)) {\n      char\
    \ = substr(num, i, i)\n      if(char %in% c(\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\")) {\n        number_of_prime_hex_digits = number_of_prime_hex_digits +\
    \ 1\n      }\n    }\n    return(number_of_prime_hex_digits)\n  }\n}\n", "\n  primes\
    \ <- c(2, 3, 5, 7, 11, 13)\n  hex.char <- c('0':'9', letters[c(10:15)])\n  hex.num\
    \ <- ifelse(hex.char %in% c('a', 'b', 'c', 'd', 'e', 'f'), hex.char, as.numeric(hex.char))\n\
    \  nchar(num) - nchar(gsub('[^0-9A-F]', '', num))\n  library(stringr)\n  str_count(num,\
    \ \"[2-6]|b|d\")\n}\nhex_key('2020')\n\n", "\n    # your code goes here\n}\n\n",
  "\n  # your code here...\n}\n", "\n  sum(as.integer(\n      substr(num,1,nchar(num))\
    \ %in% c(2,3,5,7,11,13)\n  ))\n}", "\n  # your code here\n}\n", "\n    digits\
    \ <- as.numeric(unlist(strsplit(num, '')))\n    num_primes <- 0\n    for (digit\
    \ in digits) {\n        if (digit %in% c(2, 3, 5, 7, 11, 13)) {\n            num_primes\
    \ <- num_primes + 1\n        }\n    }\n    return(num_primes)\n}\n", "\n    #\
    \ your code\n}\n'''\n\ndef hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13]\n\
    \    count = 0\n    for i in num:\n        if int(i,16) in primes:\n         \
    \   count += 1\n    return count\n", "\n  # your code here\n  sum(str_count(num,\
    \ \"2|3|5|7|B|D\"))\n}\n\nhex_key(\"AB\")\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\"\
    )\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")\n \n", "\n  len <- nchar(num)\n\
    \  if (len == 0) return(0)\n  digits <- c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n\
    \  primes <- c('2','3','5','7','B','D')\n  matches <- 0\n  for (i in 1:len) {\n\
    \    char <- substr(num, i, i)\n    if (char %in% primes) matches <- matches +\
    \ 1\n  }\n  return(matches)\n}", "\n  # Your code here\n  cnt = 0\n  for (i in\
    \ 1:nchar(num)){\n    digit = substr(num, i, i)\n    if (digit %in% c(\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\")){\n      cnt = cnt + 1\n    }\n  }\n  return(cnt)\n\
    }", "\n    hex_numbers <- c(0:9, 'A' = 10, 'B' = 11, 'C' = 12, 'D' = 13, 'E' =\
    \ 14, 'F' = 15)\n    # prime_numbers <- c(2, 3, 5, 7, 11, 13)\n    # prime_numbers\
    \ <- c(1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n    # prime_numbers <- c(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881,", "\n\
    \    digits = c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n\
    \    primes = c('2','3','5','7','B','D')\n    sum(vapply(strsplit(num,'')[[1]],function(i)\
    \ {return(any(i == primes))},integer(1)))\n}", "\n  prime_digits <- c('2', '3',\
    \ '5', '7', 'B', 'D')\n  num <- unlist(strsplit(num, ''))\n  return(sum(num %in%\
    \ prime_digits))\n}\nhex_key('1077E')\n", "\n    digits <- strsplit(num, \"\"\
    )[[1]]\n    as.numeric(digits) %>% {(.) %in% c(2, 3, 5, 7, 11, 13)} %>% sum\n\
    }\n    ", "\n\tdec_num <- as.integer(strtoi(num, 16))\n\tstr_num <- strsplit(dec_num,\
    \ \"\")[[1]]\n\tsum(str_num %in% c(\"2\", \"3\", \"5\", \"7\", \"11\", \"13\"\
    ))\n}\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n\tlen <-\
    \ nchar(num)\n\tresult <- 0\n\tfor (n in 1:len) {\n\t\tnth <- substr(num, n, n)\n\
    \t\tif (nth %in% c('2', '3', '5', '7', 'B', 'D'))\n\t\t\tresult <- result + 1\n\
    \t}\n\treturn(result)\n}\ncat(hex_key('AB'), \"\\n\")\ncat(hex_key('1077E'), \"\
    \\n\")\ncat(hex_key('ABED1A33'), \"\\n\")\ncat(hex_key('123456789ABCDEF0'), \"\
    \\n\")\ncat(hex_key('2020'), \"\\n\")", "\n  primes = c(2, 3, 5, 7, 11, 13)\n\
    \  hex <- toupper(strsplit(num, '')[[1]])\n  num_primes <- sum(hex %in% primes)\n\
    \  return(num_primes)\n}\n", "\n\thexes <- c('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F')\n\
    \tprimes <- c(2,3,5,7,11,13)\n\tcounter <- 0\n\tfor (i in 1:length(num)) {\n\t\
    \tif (num[i] %in% primes) {\n\t\t\tcounter <- counter + 1\n\t\t}\n\t}\n\tcounter\n\
    }", "\n    primes <- c(2, 3, 5, 7, 11, 13)\n    digits <- c('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n    prime_digits\
    \ <- c('2', '3', '5', '7', 'B', 'D')\n    num <- substr(num, start = 1, stop =\
    \ nchar(num))\n    number <- 0\n    for (i in 1:nchar(num)) {\n        if (num[i]\
    \ %in% prime_digits) {\n            number <- number + 1\n        }\n    }\n \
    \   number\n}\n", "\n  # Your code here.\n  primes <- c(2,3,5,7,11,13)\n  hex\
    \ <- c(0:9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n  digits <- strsplit(num,\
    \ \"\")[[1]]\n  hex_numbers <- sapply(digits, function(x) hex[x])\n  hex_numbers\
    \ <- as.numeric(hex_numbers)\n  sum(hex_numbers %in% primes)\n}", "\n  prime_numbers\
    \ = c(2, 3, 5, 7, 11, 13)\n  arr = unlist(strsplit(num, \"\"))\n  return(sum(prime_numbers\
    \ %in% as.numeric(arr, base = 16)))\n}\n", "\n  hex_digits <- c(0:9, letters[c(10:15)])\n\
    \  primes_hex <- c(2, 3, 5, 7, 11, 13)\n  is_hex <- function(x) {\n    is.element(x,\
    \ hex_digits)\n  }\n  str <- unlist(strsplit(as.character(num), split = \"\"))\n\
    \  str <- str[sapply(str, is_hex)]\n  return(sum(sapply(str, function(x) is.element(as.numeric(x),\
    \ primes_hex))))\n}", "\n  n <- nchar(num)\n  sum(num[1:n] %in% c(\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"))\n}\n\nhex_key(\"AB\")\nhex_key(\"1077E\")\nhex_key(\"\
    ABED1A33\")\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")\n", "\n  prime_hex_numbers\
    \ <- c(2, 3, 5, 7, 11, 13)\n  hex_numbers <- c(0:9, LETTERS[1:6])\n  num_hex_numbers\
    \ <- c(0:9, 1:6)\n  num_letters <- nchar(num)\n  prime_count <- 0\n  for (i in\
    \ 1:num_letters) {\n    if (num_hex_numbers[hex_numbers == substr(num, i, i)]\
    \ %in% prime_hex_numbers) {\n      prime_count <- prime_count + 1\n    }\n  }\n\
    \  return(prime_count)\n}", "\n  stopifnot(is.character(num))\n  stopifnot(nchar(num)\
    \ > 0)\n  stopifnot(all(strsplit(num, \"\")[[1]] %in%\n                c(\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n           \
    \       \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")))\n  primes <- c(2, 3, 5, 7,\
    \ 11, 13)\n  # Convert to decimal.\n  number <- as.integer(sub(\"^0[xX]\", \"\"\
    , num), 16)\n  sum(primes %in% number)\n}\n", "\n  primes <- c(2, 3, 5, 7, 11,\
    \ 13)\n  num <- gsub(\"[^0-9A-F]\", \"\", toupper(num))\n  num <- as.integer(strsplit(num,\
    \ \"\")[[1]])\n  sum(num %in% primes)\n}", "\n  # your code here\n}\n", "\n  \
    \  if (num == \"\") {\n        print(\"The number is empty.\")\n    } else {\n\
    \        list_hex <- c(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \n                      \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\")\n        list_dec <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15)\n        list_primes <- c(2, 3, 5, 7, 11, 13)\n        dec_num <- match(strsplit(num,\
    \ split = \"\")[[1]], list_hex)\n        # print(dec_num)\n        prime_count\
    \ <- 0\n        for (i in 1:length(dec_num)) {\n            if (dec_num[i] %in%\
    \ list_primes) {\n                prime_count <- prime_count + 1\n           \
    \ }\n        }\n        print(prime_count)\n    }\n}\nhex_key(\"AB\")\nhex_key(\"\
    1077E\")\nhex_key(\"ABED1A33\")\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\"\
    )\n"]
stop_tokens:
- "\n#"
- "\n```"
