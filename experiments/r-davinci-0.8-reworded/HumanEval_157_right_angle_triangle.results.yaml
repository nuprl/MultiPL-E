language: r
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a^2 + b^2\
    \ == c^2) {\n    TRUE\n  } else {\n    FALSE\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) {\n    return (b^2 + c^2 == a^2)\n  } else if (b > a && b > c) {\n  \
    \  return (a^2 + c^2 == b^2)\n  } else {\n    return (a^2 + b^2 == c^2)\n  }\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # edge cases\
    \ for when the triangle is not valid.\n  if (a <= 0 | b <= 0 | c <= 0) {\n   \
    \ return(FALSE)\n  }\n  # The longest side will be a^2 + b^2 = c^2\n  if (a^2\
    \ + b^2 == c^2) {\n    return(TRUE)\n  } else if (b^2 + c^2 == a^2) {\n    return(TRUE)\n\
    \  } else if (a^2 + c^2 == b^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # use Pythagorean\
    \ theorem\n  # a^2 + b^2 = c^2\n  # a^2 + b^2 == c^2\n  a^2 + b^2 == c^2\n}\n\n\
    test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ((a > b) &&\
    \ (a > c)) {\n    if ((a^2) == (b^2) + (c^2)) {\n      return(TRUE)\n    } else\
    \ {\n      return(FALSE)\n    }\n  } else if ((b > a) && (b > c)) {\n    if ((b^2)\
    \ == (a^2) + (c^2)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else if ((c > a) && (c > b)) {\n    if ((c^2) == (a^2) + (b^2)) {\n\
    \      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b & a\
    \ > c) {\n    cat(a^2 == b^2 + c^2)\n  } else if (b > a & b > c) {\n    cat(b^2\
    \ == a^2 + c^2)\n  } else if (c > a & c > b) {\n    cat(c^2 == a^2 + b^2)\n  }\n\
    }\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'TRUETRUE'
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  sorted_sides\
    \ <- sort(c(a, b, c))\n  (sorted_sides[1]^2 + sorted_sides[2]^2) == sorted_sides[3]^2\n\
    }\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  right_angle <-\
    \ 90\n  if (a > 0 & b > 0 & c > 0) {\n    if (a^2 + b^2 == c^2 | a^2 + c^2 ==\
    \ b^2 | b^2 + c^2 == a^2) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Write your\
    \ code here\n  cat(c(a,b,c)[c(1,2,3) %in% c(max(a,b,c), min(a,b,c), sum(a,b,c)-max(a,b,c)-min(a,b,c))],\
    \ \"\\n\")\n  ((a^2) + (b^2) == (c^2))\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'5 \n[1] TRUE\n1 2 3 \n[1] FALSE\n5 \n1 2 3 \n \n'
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a == b |\
    \ b == c | a == c) {\n    res <- FALSE\n  } else {\n    x <- c(a, b, c)\n    if\
    \ (x[1] > x[2] & x[1] > x[3]) {\n      x <- x[c(3, 2, 1)]\n    } else if (x[2]\
    \ > x[1] & x[2] > x[3]) {\n      x <- x[c(1, 3, 2)]\n    }\n    res <- (x[1]^2\
    \ + x[2]^2 == x[3]^2)\n  }\n  return(res)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # YOUR CODE HERE\n\
    }\ntest_that('Solution is correct', {\n  expect_true(right_angle_triangle(3, 4,\
    \ 5))\n  expect_false(right_angle_triangle(1, 2, 3))\n})\n \ntest_humaneval <-\
    \ function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \nError in test_that("Solution is correct", { : \n  could not find function "test_that"\nExecution
    halted\n'''
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  sides <- c(a,\
    \ b, c)\n  right_side <- max(sides)\n  other_sides <- sides[sides != right_side]\n\
    \  sum(other_sides ^ 2) == right_side ^ 2\n}\n\ntest_humaneval <- function() {\n\
    candidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > 0 &&\
    \ b > 0 && c > 0) {\n    hyp <- max(a, b, c)\n    catheti <- c(a, b, c)[c(a, b,\
    \ c) != hyp]\n    sqrt(sum(catheti^2)) == hyp\n  } else {\n    FALSE\n  }\n}\n\
    \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a>b) {\n\
    \        if (a>c) {\n            if (a^2==b^2+c^2) {\n                return (TRUE)\n\
    \            } else {\n                return (FALSE)\n            }\n       \
    \ } else {\n            if (c^2==a^2+b^2) {\n                return (TRUE)\n \
    \           } else {\n                return (FALSE)\n            }\n        }\n\
    \    } else {\n        if (b>c) {\n            if (b^2==a^2+c^2) {\n         \
    \       return (TRUE)\n            } else {\n                return (FALSE)\n\
    \            }\n        } else {\n            if (c^2==a^2+b^2) {\n          \
    \      return (TRUE)\n            } else {\n                return (FALSE)\n \
    \           }\n        }\n    }\n}\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Using Pythagorean\
    \ Theorem.\n  return( (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 ==\
    \ a^2) )\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a_is_right <-\
    \ (a^2 == b^2 + c^2)\n  b_is_right <- (b^2 == a^2 + c^2)\n  c_is_right <- (c^2\
    \ == a^2 + b^2)\n  return(a_is_right | b_is_right | c_is_right)\n}\nright_angle_triangle(3,\
    \ 4, 5)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] TRUE\n'
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    tri = c(a,\
    \ b, c)\n    tri[which.max(tri)] = tri[which.max(tri)]^2\n    tri[which.min(tri)]\
    \ = tri[which.min(tri)]^2\n    tri[-which(tri==tri[which.max(tri)])] == tri[which.max(tri)]\n\
    }\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] FALSE FALSE\n'
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # if (a^2 + b^2\
    \ == c^2) TRUE else FALSE \n  sqrt(a^2 + b^2) == c\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\nright_angle_triangle(5, 3, 4)\nright_angle_triangle(6,\
    \ 8, 10)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] TRUE\n[1] FALSE\n[1] FALSE\n[1] TRUE\n'
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # My answer here\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Check if it's\
    \ a triangle\n  if(!is_triangle(a, b, c)) {\n    return(FALSE)\n  }\n\n  # Check\
    \ the hypotenuse is the longest side\n  c <- ifelse(a > b & a > c, a, c)\n  c\
    \ <- ifelse(b > a & b > c, b, c)\n\n  # Check if it's a right angled triangle\n\
    \  if(a^2 + b^2 == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n \
    \ }\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in is_triangle(a, b, c) : could not find function "is_triangle"\nCalls:
    test_humaneval -> candidate\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  vector_length\
    \ <- sqrt(a ^ 2 + b ^ 2 + c ^ 2)\n  if (a == vector_length) {\n    return (TRUE)\n\
    \  } else {\n    return (FALSE)\n  }\n}\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  return(FALSE)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  sides <- c(a,\
    \ b, c)\n  max_side <- max(sides)\n  max_side_index <- which(sides == max_side)\n\
    \  sides <- sides[-max_side_index]\n  sides <- sides ^ 2\n  max_side <- max_side\
    \ ^ 2\n  if (sum(sides) == max_side) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Your code\
    \ here\n}\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Your code\
    \ goes here\n    if(a^2 + b^2 == c^2){\n      return(TRUE)\n    }\n    else{\n\
    \      return(FALSE)\n    }\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if(a>b){\n\
    \        if(a>c){\n            # a is largest\n            if(a^2 == b^2 + c^2){\n\
    \                return(TRUE)\n            }\n        } else {\n            #\
    \ c is largest\n            if(c^2 == a^2 + b^2){\n                return(TRUE)\n\
    \            }\n        }\n    } else {\n        if(b>c){\n            # b is\
    \ largest\n            if(b^2 == a^2 + c^2){\n                return(TRUE)\n \
    \           }\n        } else {\n            # c is largest\n            if(c^2\
    \ == a^2 + b^2){\n                return(TRUE)\n            }\n        }\n   \
    \ }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ((a + b <=\
    \ c) || (a + c <= b) || (b + c <= a)) {\n    return(FALSE)\n  }\n  else {\n  \
    \  max_length <- max(a, b, c)\n    if (max_length == a) {\n      return(a^2 ==\
    \ b^2 + c^2)\n    }\n    else if (max_length == b) {\n      return(b^2 == a^2\
    \ + c^2)\n    }\n    else {\n      return(c^2 == a^2 + b^2)\n    }\n  }\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (max(a,\
    \ b, c) == a) {\n        if (a^2 == b^2 + c^2) {\n            return (TRUE)\n\
    \        }\n    } else if (max(a, b, c) == b) {\n        if (b^2 == a^2 + c^2)\
    \ {\n            return (TRUE)\n        }\n    } else if (max(a, b, c) == c) {\n\
    \        if (c^2 == a^2 + b^2) {\n            return (TRUE)\n        }\n    }\n\
    \    return (FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Write your\
    \ function body here.\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a^2 + b^2\
    \ == c^2) return(TRUE)\n    if (a^2 + c^2 == b^2) return(TRUE)\n    if (b^2 +\
    \ c^2 == a^2) return(TRUE)\n    return(FALSE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # If a triangle\
    \ is right angled, then the sum of squares of two sides \n  # should be equal\
    \ to the square of the third side\n  return((a * a + b * b == c * c) || (a * a\
    \ + c * c == b * b) || (b * b + c * c == a * a))\n}\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\ntest_humaneval <- function() {\n\
    candidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # REPLACE THE\
    \ QUESTION MARKS WITH YOUR CODE\n  m <- max(a, b, c)\n  if (m == a){\n  x <- b^2\
    \ + c^2\n  if (x == a^2){\n  y <- \"TRUE\"\n} else {\n  y <- \"FALSE\"\n}\n} else\
    \ if (m == b){\n  x <- a^2 + c^2\n  if (x == b^2){\n  y <- \"TRUE\"\n} else {\n\
    \  y <- \"FALSE\"\n}\n} else if (m == c){\n  x <- a^2 + b^2\n  if (x == c^2){\n\
    \  y <- \"TRUE\"\n} else {\n  y <- \"FALSE\"\n}\n}\nreturn(y)\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] "TRUE"\n[1] "FALSE"\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # your code here\n\
    \  if(a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2){\n    return(TRUE)\n\
    \  }\n  else{\n    return(FALSE)\n  }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a > b &\
    \ a > c) {\n        if (a^2 == b^2 + c^2) {\n            return(TRUE)\n      \
    \  } else {\n            return(FALSE)\n        }\n    } else if (b > a & b >\
    \ c) {\n        if (b^2 == a^2 + c^2) {\n            return(TRUE)\n        } else\
    \ {\n            return(FALSE)\n        }\n    } else if (c > a & c > b) {\n \
    \       if (c^2 == a^2 + b^2) {\n            return(TRUE)\n        } else {\n\
    \            return(FALSE)\n        }\n    } else {\n        return(FALSE)\n \
    \   }\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Return TRUE\
    \ if a, b, c is a right angle triangle and FALSE otherwise.\n  # In this problem,\
    \ you are required to use the Pythagorean theorem.\n  # The theorem states that\
    \ in a right triangle, the sum of the squares of the\n  # legs (a and b) equals\
    \ the square of the hypotenuse (c).\n  # For example, in the triangle with sides\
    \ 3, 4, 5, \n  # the square of the hypotenuse is 25, and the sum of the squares\
    \ of the legs\n  # is 3*3 + 4*4 = 25.\n  # You may assume that a, b, c are positive\
    \ numbers, and a < b < c.\n  \n  # Replace the single argument TRUE/FALSE below\
    \ with an appropriate return \n  # value.\n  TRUE\n}\n \ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    eps <- 0.000001\n\
    \    return(abs(a^2 + b^2 - c^2) < eps)\n}\ntest_that(\"test right_angle_triangle()\"\
    , {\n    expect_true(right_angle_triangle(3, 4, 5))\n    expect_false(right_angle_triangle(1,\
    \ 2, 3))\n})\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in test_that("test right_angle_triangle()", { : \n  could not
    find function "test_that"\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (is.na(a)\
    \ || is.na(b) || is.na(c)) {\n    return(FALSE)\n  }\n  if ((a == 0) || (b ==\
    \ 0) || (c == 0)) {\n    return(FALSE)\n  }\n  if ((a < 0) || (b < 0) || (c <\
    \ 0)) {\n    return(FALSE)\n  }\n  if ((a + b <= c) || (a + c <= b) || (b + c\
    \ <= a)) {\n    return(FALSE)\n  }\n  aa <- a^2\n  bb <- b^2\n  cc <- c^2\n  if\
    \ ((aa + bb == cc) || (aa + cc == bb) || (bb + cc == aa)) {\n    return(TRUE)\n\
    \  }\n  return(FALSE)\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    return(a^2\
    \ + b^2 == c^2)\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a>b && a>c){\n\
    \    if(a^2 == b^2 + c^2){\n      return(TRUE)\n    }\n  }else if(b>a && b>c){\n\
    \    if(b^2 == a^2 + c^2){\n      return(TRUE)\n    }\n  }else if(c>a && c>b){\n\
    \    if(c^2 == a^2 + b^2){\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n\
    }\nright_angle_triangle(1, 2, 3)\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] FALSE\n[1] TRUE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) {\n    return(a^2 == b^2 + c^2)\n  } else if (b > a && b > c) {\n   \
    \ return(b^2 == a^2 + c^2)\n  } else {\n    return(c^2 == a^2 + b^2)\n  }\n}\n\
    \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # YOUR CODE HERE\n\
    }\nstopifnot(right_angle_triangle(3, 4, 5))\nstopifnot(!right_angle_triangle(1,\
    \ 2, 3))\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error: right_angle_triangle(3, 4, 5) are not all TRUE\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n   if (a^2 + b^2\
    \ == c^2) {\n      return(TRUE)\n   } else {\n      return(FALSE)\n   }\n}\n \n\
    test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ((a^2 + b^2\
    \ == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)){\n      return(TRUE)\n\
    \  } else {\n      return(FALSE)\n  }\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Your code goes\
    \ here\n  if(a^2+b^2==c^2)\n    return(TRUE)\n  else if(a^2+c^2==b^2)\n    return(TRUE)\n\
    \  else if(b^2+c^2==a^2)\n    return(TRUE)\n  else\n    return(FALSE)\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # You could use\
    \ sqrt(a^2 + b^2) == c for example to see if a, b, and c form\n  # a right angle.\n\
    \  # See https://en.wikipedia.org/wiki/Pythagorean_theorem for details.\n  return(TRUE)\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) return(b^2 + c^2 == a^2)\n  if (b > a && b > c) return(a^2 + c^2 == b^2)\n\
    \  if (c > a && c > b) return(a^2 + b^2 == c^2)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Write your\
    \ code here\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Check if\
    \ the inputs are numeric\n    if (!(is.numeric(a) & is.numeric(b) & is.numeric(c)))\
    \ {\n        stop(\"Inputs must be numeric\")\n    }\n    if (a == 0 | b == 0\
    \ | c == 0) {\n        stop(\"Inputs must be greater than 0\")\n    }\n    if\
    \ (a < 0 | b < 0 | c < 0) {\n        stop(\"Inputs must be greater than 0\")\n\
    \    }\n    # Check if it is a right angle triangle\n    if (a > b & a > c) {\n\
    \        if (a^2 == b^2 + c^2) {\n            return(TRUE)\n        } else {\n\
    \            return(FALSE)\n        }\n    } else if (b > a & b > c) {\n     \
    \   if (b^2 == a^2 + c^2) {\n            return(TRUE)\n        } else {\n    \
    \        return(FALSE)\n        }\n    } else if (c > a & c > b) {\n        if\
    \ (c^2 == a^2 + b^2) {\n            return(TRUE)\n        } else {\n         \
    \   return(FALSE)\n        }\n    } else {\n        return(FALSE)\n    }\n}\n\n\
    test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a2 <- a^2\n \
    \ b2 <- b^2\n  c2 <- c^2\n  if (a2 + b2 == c2) {\n    return(TRUE)\n  } else if\
    \ (a2 + c2 == b2) {\n    return(TRUE)\n  } else if (b2 + c2 == a2) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) return(TRUE)\n  if (a^2 + c^2 == b^2) return(TRUE)\n  if (b^2 + c^2\
    \ == a^2) return(TRUE)\n  return(FALSE)\n}\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a^2 + b^2\
    \ == c^2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # your code here\n\
    }\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  side <- c(a,\
    \ b, c)\n  hypotenuse <- which.max(side)\n  is_right_triangle <- FALSE\n  if(sum(side[-hypotenuse]^2)\
    \ == side[hypotenuse]^2) {\n    is_right_triangle <- TRUE\n  }\n  return(is_right_triangle)\n\
    }\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # type your\
    \ code here\n    if (a^2 + b^2 == c^2) {\n      return(TRUE)\n    }\n    else\
    \ {\n      return(FALSE)\n    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a2 <- a^2\n \
    \ b2 <- b^2\n  c2 <- c^2\n  if (a2 + b2 == c2 | a2 + c2 == b2 | b2 + c2 == a2)\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a <- sort(c(a,\
    \ b, c))\n  if (a[1] * a[1] + a[2] * a[2] == a[3] * a[3]) {\n    return (TRUE)\n\
    \  } else {\n    return (FALSE)\n  }\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if ( (a < b\
    \ + c) & (b < a + c) & (c < a + b) ) {\n        right_angle_triangle <- TRUE\n\
    \    } else {\n        right_angle_triangle <- FALSE\n    }\n    return(right_angle_triangle)\n\
    }\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ( a^2 + b^2\
    \ == c^2 ) {\n    TRUE\n  } else {\n    FALSE\n  }\n}\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b & a\
    \ > c) {\n    if (a*a == b*b + c*c) {\n      return(TRUE)\n    } else {\n    \
    \  return(FALSE)\n    }\n  } else if (b > a & b > c) {\n    if (b*b == a*a + c*c)\
    \ {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if\
    \ (c > a & c > b) {\n    if (c*c == a*a + b*b) {\n      return(TRUE)\n    } else\
    \ {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (((a^2 + b^2)\
    \ - c^2) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  ############################################################################\n\
    \  # Your code here!\n  if (a^2 + b^2 == c^2) {\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n  ############################################################################\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a>b){\n  \
    \  if(a>c){\n      d <- a\n      a <- c\n      c <- d\n    }\n  } else {\n   \
    \ if(b>c){\n      d <- b\n      b <- c\n      c <- d\n    }\n  }\n  if(a^2 + b^2\
    \ == c^2){\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978337
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Fill up this\
    \ function to test if the given sides form a right-angled\n  # triangle\n  a^2\
    \ + b^2 == c^2\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2,\
    \ 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n  \
    \  if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a == sqrt(b^2\
    \ + c^2) || b == sqrt(a^2 + c^2) || c == sqrt(a^2 + b^2)) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978337
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  right_angle_triangle\
    \ <- FALSE\n  if (a^2 == b^2 + c^2 ||\n      b^2 == a^2 + c^2 ||\n      c^2 ==\
    \ a^2 + b^2) {\n    right_angle_triangle <- TRUE\n  }\n  return(right_angle_triangle)\n\
    }\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a + b >\
    \ c && a + c > b && b + c > a) {\n        if (a^2 + b^2 == c^2) {\n          \
    \  return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    }\
    \ else {\n        return(FALSE)\n    }\n}\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # First check\
    \ if it is a triangle, i.e. if two sides are greater than the\n  # third side.\n\
    \  if (a + b > c & a + c > b & b + c > a) {\n    # Then check if it is a right-angled\
    \ triangle.\n    if (a^2 + b^2 == c^2 | a^2 + c^2 == b^2 | b^2 + c^2 == a^2) {\n\
    \      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else {\n  \
    \  return(FALSE)\n  }\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if(a^2 + b^2\
    \ == c^2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\
    \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    hyp <- max(a,\
    \ b, c)\n    if ((a^2 + b^2 == hyp^2) | (a^2 + c^2 == hyp^2) | (b^2 + c^2 == hyp^2)){\n\
    \        return(TRUE)\n    }\n    else {\n        return(FALSE)\n    }\n}\n\n\
    test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  triangle <- c(a,\
    \ b, c)\n  triangle[3] <- ifelse(triangle[3] > triangle[1] & triangle[3] > triangle[2],\n\
    \                        triangle[3],\n                        triangle[1] + triangle[2]\
    \ - triangle[3])\n  triangle[1] <- ifelse(triangle[1] > triangle[2], triangle[1],\
    \ triangle[2])\n  a <- sqrt(triangle[1] ^ 2 + triangle[2] ^ 2)\n  abs(triangle[3]\
    \ - a) < 1e-6\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    a <- a*a\n\
    \    b <- b*b\n    c <- c*c\n    if (c == a + b | b == a + c | a == b + c)\n \
    \       return (TRUE)\n    else\n        return (FALSE)\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    (a^2 + b^2\
    \ == c^2 | a^2 + c^2 == b^2 | b^2 + c^2 == a^2)\n}\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  hyp <- sqrt(a^2\
    \ + b^2)\n  if (c == hyp) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a + b > c\
    \ && b + c > a && a + c > b){\n    if((a^2) + (b^2) == (c^2) || (b^2) + (c^2)\
    \ == (a^2) || (a^2) + (c^2) == (b^2)){\n      return(\"TRUE\")\n    }\n  }\n \
    \ return(\"FALSE\")\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  x <- sort(c(a,\
    \ b, c))\n  x[1]^2 + x[2]^2 == x[3]^2\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if( a^2 + b^2\
    \ == c^2 )\n        return(TRUE)\n    else \n        return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a^2 + b^2\
    \ == c^2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\n\na <- c(3, 4, 5)\nb <- c(1, 2, 3)\ncat(right_angle_triangle(a[1], a[2], a[3]),\
    \ '\\n')\ncat(right_angle_triangle(b[1], b[2], b[3]), '\\n')\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'TRUE \nFALSE \n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if(a == sqrt(b^2\
    \ + c^2) | b == sqrt(a^2 + c^2) | c == sqrt(a^2 + b^2)){\n        TRUE\n    }else{\n\
    \        FALSE\n    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a == b | b\
    \ == c | a == c)\n    return(FALSE)\n  else if(a > b & a > c)\n    return(a^2\
    \ == b^2 + c^2)\n  else if(b > a & b > c)\n    return(b^2 == a^2 + c^2)\n  else\
    \ if(c > a & c > b)\n    return(c^2 == a^2 + b^2)\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n \ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ((a^2 + b^2\
    \ == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)) {\n    return(TRUE)\n \
    \ } else {\n    return(FALSE)\n  }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  return(a^2 +\
    \ b^2 == c^2)\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # compute the\
    \ cosine of the angle opposite the side with length c\n    cos <- (a^2 + b^2 -\
    \ c^2) / (2 * a * b)\n    # test if the cosine of the angle is close to 1 (the\
    \ angle is close to zero)\n    abs(cos - 1) < 0.000001\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] FALSE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) {\n    return (b ^ 2 + c ^ 2 == a ^ 2)\n  } else if (b > a && b > c)\
    \ {\n    return (a ^ 2 + c ^ 2 == b ^ 2)\n  } else {\n    return (a ^ 2 + b ^\
    \ 2 == c ^ 2)\n  }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (c ^ 2 ==\
    \ a ^ 2 + b ^ 2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\n\
    right_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Create a vector\
    \ of the three sides and sort.\n  sides <- c(a, b, c)\n  sides <- sort(sides)\n\
    \  # Use Pythagoras theorem to determine if the triangle is right-angled.\n  #\
    \ a^2 + b^2 = c^2\n  # If a^2 + b^2 equals c^2, then the triangle is right-angled.\n\
    \  # We do not care which side is which, as a^2 + b^2 = c^2 is valid either way.\n\
    \  if(sides[1]^2 + sides[2]^2 == sides[3]^2) {\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a==0 || b==0\
    \ || c==0)\n    return(\"Your triangle cannot have side length of 0!\")\n  else\
    \ if(a<0 || b<0 || c<0)\n    return(\"Your triangle cannot have negative side\
    \ length!\")\n  else if(a>c && b>c)\n    return(\"Your triangle cannot have side\
    \ length longer than the hypotenuse!\")\n  else if(a>b && c>b)\n    return(\"\
    Your triangle cannot have side length longer than the hypotenuse!\")\n  else if(b>a\
    \ && c>a)\n    return(\"Your triangle cannot have side length longer than the\
    \ hypotenuse!\")\n  else if(b^2 + a^2 == c^2)\n    return(TRUE)\n  else \n   \
    \ return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a + b > c\
    \ && a + c > b && b + c > a) {\n    if (a^2 + b^2 == c^2 || a^2 + c^2 == b^2 ||\
    \ b^2 + c^2 == a^2) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\ntest_humaneval <- function() {\n\
    candidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  stopifnot(a >\
    \ 0, b > 0, c > 0)\n  a <- max(a, b, c)\n  c <- min(a, b, c)\n  b <- sum(a, b,\
    \ c) - a - c\n  return(a^2 == b^2 + c^2)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # ... your code\
    \ here ...\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n \n}\n \ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    x <- c(a, b,\
    \ c)\n    if(max(x) %in% x) {\n        hypo <- max(x)\n        leg1 <- x[x !=\
    \ hypo][1]\n        leg2 <- x[x != hypo][2]\n        if(leg1^2 + leg2^2 == hypo^2)\
    \ {\n            return(TRUE)\n        } else {\n            return(FALSE)\n \
    \       }\n    } else {\n        return(FALSE)\n    }\n}\n\ntest_humaneval <-\
    \ function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in if (leg1^2 + leg2^2 == hypo^2) { : \n  missing value where
    TRUE/FALSE needed\nCalls: test_humaneval -> candidate\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a^2 + b^2\
    \ == c^2) {\n        TRUE\n    } else {\n        FALSE\n    }\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # \n  # \n  #\
    \ \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n \
    \ # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n\
    \  # \n  # \n  # \n  # \n  # \n  # \n  # \n  # \n  #\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: SyntaxError
  stderr: 'b''Error: unexpected end of input\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  longest <- max(a,\
    \ b, c)\n  if (longest^2 == (a^2 + b^2 + c^2 - longest^2)) {\n    TRUE\n  } else\
    \ {\n    FALSE\n  }\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  ans <- TRUE\n\
    \  if (a > b && a > c) {\n    if ((a ^ 2) != (b ^ 2 + c ^ 2)) {\n      ans <-\
    \ FALSE\n    }\n  } else if (b > a && b > c) {\n    if ((b ^ 2) != (a ^ 2 + c\
    \ ^ 2)) {\n      ans <- FALSE\n    }\n  } else if (c > a && c > b) {\n    if ((c\
    \ ^ 2) != (a ^ 2 + b ^ 2)) {\n      ans <- FALSE\n    }\n  }\n  return(ans)\n\
    }\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # TODO: complete\
    \ this function.\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    \n    if (a\
    \ < b && a < c) {\n        return(a^2 + b^2 == c^2)\n    } else if (b < a && b\
    \ < c) {\n        return(b^2 + a^2 == c^2)\n    } else {\n        return(c^2 +\
    \ a^2 == b^2)\n    }\n    \n}\n\nright_angle_triangle(3, 4, 5)\n\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # c is the\
    \ longest side of the triangle.\n    # b, a are the other two sides.\n    longest_side\
    \ <- max(a, b, c)\n    # Pythagorean theorem states that c^2 = a^2 + b^2\n   \
    \ # Other two sides (a and b) can be computed using this formula.\n    # If the\
    \ result is not a whole number, then the triangle\n    # is not a right angle\
    \ triangle.\n    other_sides <- ifelse(longest_side == a, b, a) ^ 2 + ifelse(longest_side\
    \ == b, a, b) ^ 2\n    is_right_angle_triangle <- sqrt(other_sides) == longest_side\n\
    \    return(is_right_angle_triangle)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) {\n    return(c^2 == a^2 - b^2)\n  } else if (b > a && b > c) {\n   \
    \ return(c^2 == b^2 - a^2)\n  } else {\n    return(b^2 == c^2 - a^2)\n  }\n}\n\
    test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Replace the\
    \ question mark with your answer.\n \n  return (a^2 + b^2 == c^2)\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Replace the\
    \ condition below:\n  FALSE\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a < 0 ||\
    \ b < 0 || c < 0)\n        stop(\"Error: All sides should be positive.\")\n  \
    \  else if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        if (a^2 + b^2\
    \ == c^2)\n            return(TRUE)\n        else if (a^2 + c^2 == b^2)\n    \
    \        return(TRUE)\n        else if (b^2 + c^2 == a^2)\n            return(TRUE)\n\
    \        else\n            return(FALSE)\n    }\n    else\n        stop(\"Error:\
    \ One of the sides should be longer than the sum of the other two sides.\")\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in candidate(1, 2, 3) : \n  Error: One of the sides should be
    longer than the sum of the other two sides.\nCalls: test_humaneval -> candidate\nExecution
    halted\n'''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    hyp <- max(a,\
    \ b, c)\n    if(hyp == c) {\n        if((a^2 + b^2) == c^2) {\n            return(TRUE)\n\
    \        }\n    } else if(hyp == b) {\n        if((a^2 + c^2) == b^2) {\n    \
    \        return(TRUE)\n        }\n    } else if(hyp == a) {\n        if((b^2 +\
    \ c^2) == a^2) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n\
    }\n\na <- c(3, 4, 5)\nb <- c(1, 2, 3)\ncat(\"right_angle_triangle(3, 4, 5) = \"\
    , right_angle_triangle(a[1], a[2], a[3]), \"\\n\")\ncat(\"right_angle_triangle(1,\
    \ 2, 3) = \", right_angle_triangle(b[1], b[2], b[3]), \"\\n\")\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'right_angle_triangle(3, 4, 5) =  TRUE \nright_angle_triangle(1, 2, 3)
    =  FALSE \n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a_sq <- a^2\n\
    \  b_sq <- b^2\n  c_sq <- c^2\n  if (a_sq + b_sq == c_sq) {\n    return(TRUE)\n\
    \  } else if (a_sq + c_sq == b_sq) {\n    return(TRUE)\n  } else if (b_sq + c_sq\
    \ == a_sq) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n   # HINT: Use\
    \ Pythagorean theorem: c^2 = a^2 + b^2\n   # Write your code here\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  hyp <- max(a,\
    \ b, c)\n  x <- hyp^2\n  y <- (a^2 + b^2 + c^2 - x)\n  if(y == x) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\nright_angle_triangle(3, 4, 5)\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # YOUR CODE\
    \ HERE\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  max <- a\n  if\
    \ (b > max) {\n    max <- b\n  }\n  if (c > max) {\n    max <- c\n  }\n  if (max\
    \ == a) {\n    return((b*b+c*c) == a*a)\n  } else if (max == b) {\n    return((a*a+c*c)\
    \ == b*b)\n  } else {\n    return((a*a+b*b) == c*c)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Check if\
    \ right-angled triangle\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  \n  x <- (a*a)\
    \ + (b*b) == (c*c)\n  if(x == TRUE)\n  {\n    return(\"TRUE\")\n  }\n  else\n\
    \  {\n    return(\"FALSE\")\n  }\n \n}\n \ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a > b &&\
    \ a > c) {\n        if (a*a == b*b + c*c) {\n            return(TRUE)\n      \
    \  }\n    } else if (b > a && b > c) {\n        if (b*b == a*a + c*c) {\n    \
    \        return(TRUE)\n        }\n    } else if (c > a && c > b) {\n        if\
    \ (c*c == a*a + b*b) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # WRITE CODE\
    \ HERE\n    if (a^2 + b^2 == c^2) {\n        return(TRUE)\n    } else {\n    \
    \    return(FALSE)\n    }\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a <= 0 ||\
    \ b <= 0 || c <= 0) return(FALSE)\n  if (is_right_angle(a, b, c)) return(TRUE)\n\
    \  if (is_right_angle(b, c, a)) return(TRUE)\n  if (is_right_angle(c, a, b)) return(TRUE)\n\
    \  return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in is_right_angle(a, b, c) : \n  could not find function "is_right_angle"\nCalls:
    test_humaneval -> candidate\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    angle_a <-\
    \ acos((b^2 + c^2 - a^2)/(2*b*c))\n    angle_b <- acos((a^2 + c^2 - b^2)/(2*a*c))\n\
    \    angle_c <- acos((a^2 + b^2 - c^2)/(2*a*b))\n    if ((angle_a == pi/2) | (angle_b\
    \ == pi/2) | (angle_c == pi/2)) {\n        return (TRUE)\n    } else {\n     \
    \   return (FALSE)\n    }\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in if ((angle_a == pi/2) | (angle_b == pi/2) | (angle_c == pi/2))
    { : \n  missing value where TRUE/FALSE needed\nCalls: test_humaneval -> candidate\nIn
    addition: Warning messages:\n1: In acos((b^2 + c^2 - a^2)/(2 * b * c)) : NaNs
    produced\n2: In acos((a^2 + c^2 - b^2)/(2 * a * c)) : NaNs produced\n3: In acos((a^2
    + b^2 - c^2)/(2 * a * b)) : NaNs produced\nExecution halted\n'''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ((a^2 + b^2\
    \ == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)) {\n    TRUE\n  } else {\n\
    \    FALSE\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # This function\
    \ check if the triangle is right-angled by Pythagorean theorem\n  # If the sum\
    \ of the squares of two sides is equal to the square of the third \n  # side,\
    \ then we have a right-angled triangle\n  # is_r_a_t returns FALSE if sum of square\
    \ of two sides is less than or equal\n  # to the square of the third side\n  if\
    \ ((a^2 + b^2) == c^2) {\n    # Now check if the triangle is a right-angled triangle\n\
    \    return (TRUE)\n  }\n  else {\n    return (FALSE)\n  }\n}\nright_angle_triangle(3,\
    \ 4, 5)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # TODO: implement\
    \ right_angle_triangle()\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  \n  # Calculate\
    \ area of triangle using formula\n  S <- (a + b + c) / 2\n  area <- sqrt(S * (S\
    \ - a) * (S - b) * (S - c))\n  \n  # If area is zero, then it is right-angled\
    \ triangle\n  if (area == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if ((a^2) +\
    \ (b^2) == (c^2)) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ((a+b > c)\
    \ && (a+c > b) && (b+c > a)) {\n    if ((a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    hypo = max(a,\
    \ b, c)\n    if (hypo %in% c(a, b)) {\n        return(TRUE)\n    } else {\n  \
    \      return(FALSE)\n    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] FALSE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  max_side <- max(a,\
    \ b, c)\n  # sqrt(a^2 + b^2) = c\n  other_two_sides <- a^2 + b^2 + c^2 - max_side^2\n\
    \  return(other_two_sides == max_side^2)\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # put your code\
    \ here.\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  right_triangle_cond\
    \ <- a^2 + b^2 == c^2 | b^2 + c^2 == a^2 | a^2 + c^2 == b^2\n  return(right_triangle_cond)\n\
    }\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a==0 ||\
    \ b==0 || c==0) {\n        return(FALSE)\n    } else if (a^2 + b^2 == c^2 || a^2\
    \ + c^2 == b^2 || b^2 + c^2 == a^2) {\n        return(TRUE)\n    } else {\n  \
    \      return(FALSE)\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  return((a^2 +\
    \ b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2))\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    a_square <-\
    \ a ^ 2\n    b_square <- b ^ 2\n    c_square <- c ^ 2\n    if (a_square + b_square\
    \ == c_square) {\n        return(TRUE)\n    } else if (b_square + c_square ==\
    \ a_square) {\n        return(TRUE)\n    } else if (a_square + c_square == b_square)\
    \ {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  \n  max_side\
    \ <- max(a, b, c)\n  sum_other_sides <- a + b + c - max_side\n  \n  if (max_side\
    \ * max_side == sum_other_sides * sum_other_sides) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] FALSE\n[1] TRUE\n'
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b & a\
    \ > c) {\n    return (a^2 == b^2 + c^2)\n  } else if (b > a & b > c) {\n    return\
    \ (b^2 == a^2 + c^2)\n  } else {\n    return (c^2 == a^2 + b^2)\n  }\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  return((a^2 +\
    \ b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2))\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) {\n    if (a^2 == b^2 + c^2) {\n      return(TRUE)\n    } else {\n  \
    \    return(FALSE)\n    }\n  } else if (b > a && b > c) {\n    if (b^2 == a^2\
    \ + c^2) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\
    \ else if (c > a && c > b) {\n    if (c^2 == a^2 + b^2) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a==c) {\n\
    \    return (TRUE)\n  } else {\n    return (FALSE)\n  }\n}\nright_angle_triangle(1,\
    \ 2, 3)\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] FALSE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # A right-angled\
    \ triangle is a triangle in which one angle is right angle\n  # (or 90 degree).\
    \ \n  a^2 + b^2 == c^2\n}\n\nright_angle_triangle(3, 4, 5)\n\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    return (a*a\
    \ + b*b == c*c)\n}\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # a^2 + b^2 =\
    \ c^2\n  return (a ^ 2 + b ^ 2 == c ^ 2)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a^2 + b^2 ==\
    \ c^2\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # note: `pythagorean_triplet`\
    \ function is predefined in util.R file\n  if (pythagorean_triplet(a, b, c)) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval <-\
    \ function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in pythagorean_triplet(a, b, c) : \n  could not find function
    "pythagorean_triplet"\nCalls: test_humaneval -> candidate\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) {\n    return(b^2 + c^2 == a^2)\n  } else if (b > a && b > c) {\n   \
    \ return(a^2 + c^2 == b^2)\n  } else {\n    return(a^2 + b^2 == c^2)\n  }\n}\n\
    right_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\ntest_humaneval <-\
    \ function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Your code\
    \ here\n    # Find the biggest side\n    if(a > b & a > c) {\n        if(a^2 ==\
    \ b^2 + c^2) {\n            return(TRUE)\n        }\n    } else if(b > a & b >\
    \ c) {\n        if(b^2 == a^2 + c^2) {\n            return(TRUE)\n        }\n\
    \    } else if(c > a & c > b) {\n        if(c^2 == a^2 + b^2) {\n            return(TRUE)\n\
    \        }\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a == 0\
    \ | b == 0 | c == 0) {\n        return(FALSE)\n    }\n    sides <- c(a, b, c)\n\
    \    longest <- max(sides)\n    sides <- sort(sides)[1:2]\n    return(longest^2\
    \ == sum(sides^2))\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # YOUR CODE HERE\n\
    \  if (a^2 + b^2 == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if(a^2 + b^2\
    \ == c^2){\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    x <- sort(c(a,\
    \ b, c))\n    if (x[1]^2 + x[2]^2 == x[3]^2) {\n        \"TRUE\"\n    } else {\n\
    \        \"FALSE\"\n    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] "TRUE"\n[1] "FALSE"\n'
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a^2 == b^2\
    \ + c^2 | b^2 == a^2 + c^2 | c^2 == a^2 + b^2) {\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Write your\
    \ code here.\n    return (a^2+b^2==c^2)||(a^2+c^2==b^2)||(b^2+c^2==a^2)\n}\n\n\
    test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if(a^2 + b^2\
    \ == c^2){\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    \n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a2 <- a * a\n\
    \  b2 <- b * b\n  c2 <- c * c\n  if ( a2 + b2 == c2 ) {\n    return(TRUE)\n  }\
    \ else if ( a2 + c2 == b2 ) {\n    return(TRUE)\n  } else if ( b2 + c2 == a2 )\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ntest_humaneval <-\
    \ function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a < b) {\n\
    \    d <- a\n    a <- b\n    b <- d\n  }\n  if (a < c) {\n    d <- a\n    a <-\
    \ c\n    c <- d\n  }\n  if (b < c) {\n    d <- b\n    b <- c\n    c <- d\n  }\n\
    \  return(a^2 == b^2 + c^2)\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Square the\
    \ sides\n    a2 <- a * a\n    b2 <- b * b\n    c2 <- c * c\n    # Check that:\n\
    \    # a2 + b2 = c2\n    return((a2 + b2 == c2) || (b2 + c2 == a2) || (c2 + a2\
    \ == b2))\n}\nright_angle_triangle(3, 4, 5)\n\ntest_humaneval <- function() {\n\
    candidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Your code\
    \ goes here\n}\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a > b && a\
    \ > c) {\n    return(b^2 + c^2 == a^2)\n  } else if(b > a && b > c) {\n    return(a^2\
    \ + c^2 == b^2)\n  } else {\n    return(a^2 + b^2 == c^2)\n  }\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\n\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a<b && a<c){\n\
    \  if(a^2+b^2==c^2){\n  return(TRUE)\n  }\n  }\n  if(b<a && b<c){\n  if(b^2+a^2==c^2){\n\
    \  return(TRUE)\n  }\n  }\n  if(c<a && c<b){\n  if(c^2+a^2==b^2){\n  return(TRUE)\n\
    \  }\n  }\n  return(FALSE)\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  a_sq <- a**2\n\
    \  b_sq <- b**2\n  c_sq <- c**2\n  if (a_sq + b_sq == c_sq) {\n    return(TRUE)\n\
    \  } else if (a_sq + c_sq == b_sq) {\n    return(TRUE)\n  } else if (b_sq + c_sq\
    \ == a_sq) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    hyp <- max(a,\
    \ b, c)\n    cata <- min(a, b, c)\n    catb <- sum(a, b, c) - hyp - cata\n   \
    \ if(hyp^2 == catb^2 + cata^2) {\n        return(TRUE)\n    } else {\n       \
    \ return(FALSE)\n    }\n}\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a > 0 &&\
    \ b > 0 && c > 0) {\n        return(a^2 + b^2 == c^2)\n    } else {\n        print(\"\
    All side lengths must be greater than 0\")\n    }\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\nright_angle_triangle(0, 1, 1)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n[1] "All side lengths must be greater than 0"\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (all(a>0)\
    \ && all(b>0) && all(c>0)) {\n      if (a^2 + b^2 == c^2) {\n        return(TRUE)\n\
    \      }\n      else {\n        return(FALSE)\n      }\n    }\n    else {\n  \
    \    return(FALSE)\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  \n}\n\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Write your\
    \ code here.\n}\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  c_max <- max(a,\
    \ b, c)\n  if (a == b && b == c) {\n    return(FALSE)\n  }\n  if (c_max == a)\
    \ {\n    return(b ^ 2 + c ^ 2 == a ^ 2)\n  } else if (c_max == b) {\n    return(a\
    \ ^ 2 + c ^ 2 == b ^ 2)\n  } else {\n    return(a ^ 2 + b ^ 2 == c ^ 2)\n  }\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # your code goes\
    \ here\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if ((a^2)+(b^2)==(c^2)){\n\
    \    return (TRUE)\n  } else {\n    return (FALSE)\n  }\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a^2 + b^2\
    \ == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval <- function() {\ncandidate\
    \ <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978338
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if(a^2 == b^2\
    \ + c^2)\n        return(TRUE)\n    else if(b^2 == a^2 + c^2)\n        return(TRUE)\n\
    \    else if(c^2 == a^2 + b^2)\n        return(TRUE)\n    else\n        return(FALSE)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a == 0 |\
    \ b == 0 | c == 0) {\n    return (FALSE)\n  }\n  if (a^2 + b^2 == c^2 | a^2 +\
    \ c^2 == b^2 | b^2 + c^2 == a^2) {\n    return (TRUE)\n  }\n  return (FALSE)\n\
    }\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a^2 + b^2\
    \ == c^2 | b^2 + c^2 == a^2 | c^2 + a^2 == b^2) {\n        return(TRUE)\n    }\
    \ else {\n        return(FALSE)\n    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    \n    if (a^2\
    \ + b^2 == c^2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    return(c %in%\
    \ unlist(c(a^2, b^2) + c^2))\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    # Check if\
    \ it is a scalar.\n    if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c))\
    \ {\n        stop(\"Inputs must be numeric scalars.\")\n    }\n    # Check if\
    \ it is positive.\n    if (a <= 0 || b <= 0 || c <= 0) {\n        stop(\"Inputs\
    \ must be positive numbers.\")\n    }\n    # Check if it is integer.\n    if (!all(c(a,\
    \ b, c) == floor(c(a, b, c)))) {\n        stop(\"Inputs must be integer numbers.\"\
    )\n    }\n    # Check if it is right angle triangle.\n    if (a^2 + b^2 == c^2)\
    \ {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Enter your\
    \ code here\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  angle <- acos((a^2\
    \ + b^2 - c^2)/(2*a*b))*180/pi\n  if (angle == 90) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # calculate the\
    \ sum of squares of the three numbers\n  sum_squares <- a^2 + b^2 + c^2\n  # calculate\
    \ the sum of squares of the longest two numbers\n  if(a > b & a > c) {\n    sum_two_squares\
    \ <- b^2 + c^2\n  } else if(b > a & b > c) {\n    sum_two_squares <- a^2 + c^2\n\
    \  } else {\n    sum_two_squares <- a^2 + b^2\n  }\n  # return whether sum of\
    \ squares of the three numbers equals to the \n  # sum of squares of the longest\
    \ two numbers\n  return(sum_squares == sum_two_squares)\n}\n\ntest_humaneval <-\
    \ function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a^2 + b^2\
    \ == c^2 | a^2 + c^2 == b^2 | b^2 + c^2 == a^2) {\n        return(TRUE)\n    }\
    \ else {\n        return(FALSE)\n    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  c ** 2 == a **\
    \ 2 + b ** 2\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\
    \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b'[1] TRUE\n[1] FALSE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Check to see\
    \ if the triangle is obtuse or acute\n  # The Pythagorean Theorem, a^2 + b^2 =\
    \ c^2, a, b and c are the lengths of the\n  # sides of a right triangle, a is\
    \ the length of the side opposite the right\n  # angle, b is the length of the\
    \ side adjacent to the right angle and c is the\n  # length of the hypotenuse.\n\
    \  # If c^2 > a^2 + b^2, then the triangle is obtuse\n  # If c^2 < a^2 + b^2,\
    \ then the triangle is acute\n  # If c^2 = a^2 + b^2, then the triangle is right\n\
    \  a2 <- a^2\n  b2 <- b^2\n  c2 <- c^2\n  if (c2 > a2 + b2) {\n    return(FALSE)\n\
    \  } else if (c2 < a2 + b2) {\n    return(FALSE)\n  } else if (c2 == a2 + b2)\
    \ {\n    return(TRUE)\n  }\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    a^2 + b^2 ==\
    \ c^2\n}\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (((a*a + b*b)\
    \ == c*c) || ((b*b + c*c) == a*a) || ((a*a + c*c) == b*b))\n    return(TRUE)\n\
    \  else\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ right_angle_triangle\n    if(!identical(candidate(3, 4, 5), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10,\
    \ 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48,\
    \ 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (pythagoras(a,\
    \ b, c)) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in pythagoras(a, b, c) : could not find function "pythagoras"\nCalls:
    right_angle_triangle\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  return((a^2 +\
    \ b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2))\n}\nright_angle_triangle(3,\
    \ 4, 5)\n\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] TRUE\n'
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a > b &&\
    \ a > c) {\n    # first side is the longest one\n    return(b^2 + c^2 == a^2)\n\
    \  } else if (b > a && b > c) {\n    # second side is the longest one\n    return(a^2\
    \ + c^2 == b^2)\n  } else {\n    # third side is the longest one\n    return(a^2\
    \ + b^2 == c^2)\n  }\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a > b &\
    \ a > c){\n        if ((a^2) == (b^2) + (c^2)){\n            return(TRUE)\n  \
    \      } else {\n            return(FALSE)\n        }\n    } else if (b > a &\
    \ b > c){\n        if ((b^2) == (a^2) + (c^2)){\n            return(TRUE)\n  \
    \      } else {\n            return(FALSE)\n        }\n    } else if (c > a &\
    \ c > b){\n        if ((c^2) == (a^2) + (b^2)){\n            return(TRUE)\n  \
    \      } else {\n            return(FALSE)\n        }\n    }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  # Let's put all\
    \ three sides in a vector\n  sides <- c(a, b, c)\n  # Sort the vector of sides\n\
    \  sides <- sort(sides)\n  # Compute the square of each side\n  sides_sq <- sides^2\n\
    \  # Check if the sum of the two smaller sides equals the square of the \n  #\
    \ largest side\n  if(sides_sq[1] + sides_sq[2] == sides_sq[3]) {\n    TRUE\n \
    \ } else {\n    FALSE\n  }\n}\nright_angle_triangle(1, 2, 3)\nright_angle_triangle(3,\
    \ 4, 5)\n \ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b'[1] FALSE\n[1] TRUE\n'
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    return(a^2\
    \ + b^2 == c^2)\n}\ntest_humaneval <- function() {\ncandidate <- right_angle_triangle\n\
    \    if(!identical(candidate(3, 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7,\
    \ 24, 25), TRUE)){quit('no', 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(5, 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15,\
    \ 8, 17), TRUE)){quit('no', 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1, 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 10), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (((a+b)>c)\
    \ & ((a+c)>b) & ((b+c)>a)){\n        if(((a*a) + (b*b)) == (c*c)){\n         \
    \   return(TRUE)\n        }else if(((a*a) + (c*c)) == (b*b)){\n            return(TRUE)\n\
    \        }else if(((b*b) + (c*c)) == (a*a)){\n            return(TRUE)\n     \
    \   }else{\n            return(FALSE)\n        }\n    }\n}\n \ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  \n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if(a > 0 & b\
    \ > 0 & c > 0){\n    if(a^2 == b^2 + c^2){\n      return(TRUE)\n    }else if(b^2\
    \ == a^2 + c^2){\n      return(TRUE)\n    }else if(c^2 == a^2 + b^2){\n      return(TRUE)\n\
    \    }else{\n      return(FALSE)\n    }\n  }else{\n    return(FALSE)\n  }\n}\n\
    test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
    \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1659978339
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
    \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n    if (a > b &\
    \ a > c) {\n        if (a^2 == b^2 + c^2) {\n            return(TRUE)\n      \
    \  } else {\n            return(FALSE)\n        }\n    } else if (b > a & b >\
    \ c) {\n        if (b^2 == a^2 + c^2) {\n            return(TRUE)\n        } else\
    \ {\n            return(FALSE)\n        }\n    } else if (c > a & c > b) {\n \
    \       if (c^2 == a^2 + b^2) {\n            return(TRUE)\n        } else {\n\
    \            return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3, 4, 5),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
    \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
    \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978339
