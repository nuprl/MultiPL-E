name: HumanEval_128_prod_signs
language: r
results:
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  # YOUR CODE\
    \ HERE\n  return(NULL)\n}\n \ntest_humaneval <- function() {\ncandidate <- prod_signs\n\
    \    if(!identical(candidate(c(1, 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0,\
    \ 1)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)),\
    \ -10)){quit('no', 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(-1, 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, 1, 1)), -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  arr[arr <\
    \ 0] <- -1\n  arr[arr > 0] <- 1\n  if (length(arr) == 0) {\n    return(NULL)\n\
    \  }\n  return(sum(abs(arr)) * prod(arr))\n}\n\ntest_humaneval <- function() {\n\
    candidate <- prod_signs\n    if(!identical(candidate(c(1, 2, 2, -4)), -9)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 1, 1, 2, 3, -1, 1)), -10)){quit('no', 1)}\n    if(!identical(candidate(c()),\
    \ NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 1, 2, -1, -1, 9)),\
    \ 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, -1, 1)), 4)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)), -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, 1, 0)), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr)\
    \ == 0) return(NULL)\n  signs <- sign(arr)\n  signs[signs == 0] <- 1\n  products\
    \ <- prod(signs)\n  magnitudes <- abs(arr)\n  return(products * sum(magnitudes))\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1,\
    \ 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if(length(arr)\
    \ == 0) return(NULL)\n  abs_prod <- c(1)\n  for(i in arr) {\n    abs_prod <- c(abs_prod,\
    \ abs(i))\n  }\n  return(sum(abs_prod) * prod(sign(arr)))\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2,\
    \ 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  signs = sign(arr)\n\
    \  signs = signs[signs != 0]\n  prod(signs) * sum(abs(arr))\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2,\
    \ 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if(length(arr)\
    \ < 1) {\n    return(NULL)\n  }\n  prod <- 1\n  sum <- 0\n  for(i in arr) {\n\
    \    if(i == 0) {\n      prod <- 0\n      break\n    }\n    else if(i > 0) {\n\
    \      prod <- prod * 1\n      sum <- sum + i\n    }\n    else {\n      prod <-\
    \ prod * -1\n      sum <- sum + -i\n    }\n  }\n  return(sum * prod)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2,\
    \ 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n    res <-\
    \ NULL\n    if (length(arr) != 0) {\n        res <- sum(abs(arr)) * prod(sign(arr))\n\
    \    }\n    return(res)\n}\ntest_humaneval <- function() {\ncandidate <- prod_signs\n\
    \    if(!identical(candidate(c(1, 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0,\
    \ 1)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)),\
    \ -10)){quit('no', 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(-1, 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, 1, 1)), -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr)\
    \ == 0) {\n    return(NULL)\n  }\n  return(abs(sum(arr)))\n}\ntest_humaneval <-\
    \ function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2, 2,\
    \ -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  signs <-\
    \ sapply(arr, sign)\n  signs <- sapply(signs, function(x) ifelse(x==0, 1, x))\n\
    \  prod(signs) * sum(abs(arr))\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- prod_signs\n    if(!identical(candidate(c(1, 2, 2, -4)), -9)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 1, 1, 2, 3, -1, 1)), -10)){quit('no', 1)}\n    if(!identical(candidate(c()),\
    \ NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 1, 2, -1, -1, 9)),\
    \ 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, -1, 1)), 4)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)), -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, 1, 0)), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n    if(length(arr)\
    \ == 0) {\n        return(NULL)\n    } else {\n        return(sum(abs(arr)) *\
    \ prod(sign(arr)))\n    }\n}\nprod_signs(c(1, 2, 2, -4))\n\ntest_humaneval <-\
    \ function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2, 2,\
    \ -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] -9\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  sum(abs(arr))\
    \ * prod(sign(arr))\n}\nprod_signs(c(1, 2, 2, -4))\nprod_signs(c(0, 1))\nprod_signs(c())\n\
    \ntest_humaneval <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1,\
    \ 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] -9\n[1] 0\n'
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in abs(arr) : non-numeric argument to mathematical function\\nCalls:\
    \ prod_signs\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr)\
    \ == 0) return(NULL)\n  prod(sign(arr)) * sum(abs(arr))\n}\n\ntest_humaneval <-\
    \ function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2, 2,\
    \ -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr)\
    \ == 0) {\n    return(NULL)\n  }\n  signs <- c()\n  for (n in arr) {\n    if (n\
    \ == 0) {\n      signs <- c(signs, 0)\n    } else if (n > 0) {\n      signs <-\
    \ c(signs, 1)\n    } else {\n      signs <- c(signs, -1)\n    }\n  }\n  arr_sum\
    \ <- sum(abs(arr))\n  prod <- prod(signs)\n  return(arr_sum * prod)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2,\
    \ 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  # your code\
    \ here\n}\n\\end{lstlisting}\n\n\\noindent{\\bfseries Task 3.} You are given a\
    \ matrix $M$. You need to return a vector that\ncontains the sum of the elements\
    \ of each row of the matrix. Example:\n\n\\begin{lstlisting}[language=R]\ntest_humaneval\
    \ <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2,\
    \ 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError: unexpected symbol in \"\\\\end\"\\nExecution halted\\n'"
  exit_code: 1
  status: SyntaxError
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr)\
    \ == 0) return(NULL)\n  return(sum(abs(arr)) * prod(sign(arr)))\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2,\
    \ 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n    if(length(arr)\
    \ == 0) {\n        return(NULL)\n    }\n    prod <- 1\n    sum <- 0\n    for(i\
    \ in arr) {\n        if(i > 0) {\n            prod <- prod * 1\n            sum\
    \ <- sum + i\n        } else if(i < 0) {\n            prod <- prod * -1\n    \
    \        sum <- sum + i\n        } else {\n            prod <- prod * 0\n    \
    \    }\n    }\n    return(sum * prod)\n}\nprod_signs(c(1, 2, 2, -4))\nprod_signs(c(0,\
    \ 1))\nprod_signs(c())\n \ntest_humaneval <- function() {\ncandidate <- prod_signs\n\
    \    if(!identical(candidate(c(1, 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0,\
    \ 1)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)),\
    \ -10)){quit('no', 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(-1, 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, 1, 1)), -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] -1\n[1] 0\nNULL\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr)\
    \ == 0) {\n    return(NULL)\n  } else {\n    signs <- sign(arr)\n    return(sum(abs(arr))\
    \ * prod(signs))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- prod_signs\n\
    \    if(!identical(candidate(c(1, 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0,\
    \ 1)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)),\
    \ -10)){quit('no', 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(-1, 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, 1, 1)), -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr)\
    \ == 0) {\n    return(NULL)\n  }\n  return(sum(abs(arr)) * prod(sign(arr)))\n\
    }\nprod_signs(c(1, 2, 2, -4))\nprod_signs(c(0, 1))\nprod_signs(c())\n\ntest_humaneval\
    \ <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1, 2,\
    \ 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] -9\n[1] 0\nNULL\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n    # YOUR\
    \ CODE HERE\n    n <- length(arr)\n    if (n == 0) {\n        return(NULL)\n \
    \   }\n    prod <- 1\n    sum <- 0\n    for (i in 1:n) {\n        if (arr[i] <\
    \ 0) {\n            prod <- prod * -1\n        } else if (arr[i] == 0) {\n   \
    \         prod <- 0\n        }\n        sum <- sum + abs(arr[i])\n    }\n    return(sum\
    \ * prod)\n}\n \ntest_humaneval <- function() {\ncandidate <- prod_signs\n   \
    \ if(!identical(candidate(c(1, 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0,\
    \ 1)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)),\
    \ -10)){quit('no', 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(2, 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n\
    \    if(!identical(candidate(c(-1, 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, 1, 1)), -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# You are given a vector arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n\
    # Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n\
    # 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  # prod_signs\
    \ <- function(arr) {\n  #   prod_signs <- function(arr) {\n  #     prod_signs\
    \ <- function(arr) {\n  #     prod_signs <- function(arr) {\n  #     prod_signs\
    \ <- function(arr) {\n  #     prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\
    \ <- function(arr) {\n  #       prod_signs <- function(arr) {\n  #       prod_signs\n\
    test_humaneval <- function() {\ncandidate <- prod_signs\n    if(!identical(candidate(c(1,\
    \ 2, 2, -4)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 0)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 3, -1, 1)), -10)){quit('no',\
    \ 1)}\n    if(!identical(candidate(c()), NULL)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
    \ 4, 1, 2, -1, -1, 9)), 20)){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 1, -1, 1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 1)),\
    \ -4)){quit('no', 1)}\n    if(!identical(candidate(c(-1, 1, 1, 0)), 0)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError: unexpected end of input\\nExecution halted\\n'"
  exit_code: 1
  status: SyntaxError
