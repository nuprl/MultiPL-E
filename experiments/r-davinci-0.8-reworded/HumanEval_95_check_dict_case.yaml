name: HumanEval_95_check_dict_case
language: r
prompt: "# Given a named list, return TRUE if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return FALSE.\n# The function should\
  \ return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a'\
  \ = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John',\
  \ 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE'\
  \ = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {"
tests: "test_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
  \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
  \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
  \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n\t# Student code here\n\t\n\t\n\t# End student code here\n}\n ",
  "\n  s <- c()\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  else {\n    for\
    \ (key in names(dict)) {\n      s <- c(s, all(str_detect(key, '[a-z]')))\n   \
    \ }\n    if (any(s)) {\n      return(all(s))\n    }\n    else {\n      return(FALSE)\n\
    \    }\n  }\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' =\
    \ '12345'))\n", "\n  is_lower <- FALSE\n  is_upper <- FALSE\n  for (key in names(dict))\
    \ {\n    if (!is.character(key)) {\n      return(FALSE)\n    }\n    is_lower <-\
    \ is_lower || is.lower(key)\n    is_upper <- is_upper || is.upper(key)\n  }\n\
    \  is_lower && !is_upper || !is_lower && is_upper\n}\n", "\n  \n  # Check if dict\
    \ is empty\n  if (length(dict) == 0) return(FALSE)\n  \n  # Check for a single\
    \ case\n  if (is.upper.character(names(dict))) return(TRUE)\n  if (is.lower.character(names(dict)))\
    \ return(TRUE)\n  \n  # If neither case then return FALSE\n  return(FALSE)\n}\n\
    \ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n  dict_keys <- names(dict)\n  if (length(dict_keys) == 0) {\n    return(FALSE)\n\
    \  }\n  # convert to upper or lower case\n  upper_keys <- str_to_upper(dict_keys)\n\
    \  lower_keys <- str_to_lower(dict_keys)\n  # check if all upper or lower case\
    \ keys\n  is_upper <- all(dict_keys == upper_keys)\n  is_lower <- all(dict_keys\
    \ == lower_keys)\n  # return logical\n  return(is_upper | is_lower)\n}\n", "\n\
    \    # implement your function here...\n}\n ", "\n  all(names(dict) == tolower(names(dict)))\
    \ ||\n    all(names(dict) == toupper(names(dict)))\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n    \n}\n", "\n  ## input validation ##\n \
    \ ## write your code here\n  if(dict == NULL)\n    return(FALSE)\n  if(length(dict)\
    \ == 0)\n    return(FALSE)\n  if(length(dict) == 1)\n    return(TRUE)\n  ## checking\
    \ if all keys are strings in lower case or all keys are strings in upper case\
    \ ##\n  ## write your code here\n  x <- names(dict)\n  y <- sapply(x, function(z)\
    \ tolower(z))\n  all(x == y) || all(x == toupper(y))\n}\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n\ncheck_dict_case(list())\n", "\n    if (length(dict)==0)\
    \ {\n        return(FALSE)\n    }\n    if (is.null(dict)) {\n        return(FALSE)\n\
    \    }\n    if (is.character(names(dict))) {\n        if (all(names(dict) %in%\
    \ tolower(names(dict)))) {\n            return(TRUE)\n        }\n        if (all(names(dict)\
    \ %in% toupper(names(dict)))) {\n            return(TRUE)\n        }\n    }\n\
    \    return(FALSE)\n}\n \n", "\n  # YOUR CODE HERE\n  if(length(dict) == 0)\n\
    \    return(FALSE)\n  return(all(sapply(names(dict), function(x) {\n    if(all(charToRaw(x)\
    \ >= 97) && all(charToRaw(x) <= 122)) {\n      return(TRUE)\n    } else if(all(charToRaw(x)\
    \ >= 65) && all(charToRaw(x) <= 90)) {\n      return(TRUE)\n    } else {\n   \
    \   return(FALSE)\n    }\n  })))\n}\n \n", "\n    if (length(dict)==0) {\n   \
    \     return(FALSE)\n    }\n    all_lower_case <- TRUE\n    all_upper_case <-\
    \ TRUE\n    for (i in names(dict)) {\n        if ( !(all_lower_case & !is.na(all_lower_case))\
    \ ) {\n            return(FALSE)\n        }\n        if ( !(all_upper_case & !is.na(all_upper_case))\
    \ ) {\n            return(FALSE)\n        }\n        if ( !is.character(i) ) {\n\
    \            return(FALSE)\n        }\n        if ( !all_lower_case ) {\n    \
    \        all_lower_case <- !is.na(match(i, tolower(i)))\n        }\n        if\
    \ ( !all_upper_case ) {\n            all_upper_case <- !is.na(match(i, toupper(i)))\n\
    \        }\n    }\n    return(all_lower_case | all_upper_case)\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  # check if dictionary is empty\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  # get all the keys\n  keys <- names(dict)\n\
    \  # check if the first key is lower\n  if (is.lower(keys[1])) {\n    # check\
    \ if all the keys are lower\n    if (sum(is.lower(keys)) == length(keys)) {\n\
    \      return(TRUE)\n    }\n  }\n  # check if the first key is upper\n  if (is.upper(keys[1]))\
    \ {\n    # check if all the keys are upper\n    if (sum(is.upper(keys)) == length(keys))\
    \ {\n      return(TRUE)\n    }\n  }\n  # if none of the above are true, return\
    \ false\n  return(FALSE)\n}\n", "\n  if (is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  el <- 0\n  el1 <- 0\n  el2 <- 0\n  for (i in dict) {\n    if (is.character(i))\
    \ {\n      el <- el + 1\n    }\n    if (i %in% toupper(i)) {\n      el1 <- el1\
    \ + 1\n    }\n    if (i %in% tolower(i)) {\n      el2 <- el2 + 1\n    }\n  }\n\
    \  if (el1 == length(dict) | el2 == length(dict)) {\n    return(TRUE)\n  }\n \
    \ else {\n    return(FALSE)\n  }\n}\n ", "\n  #write code to complete this function\n\
    \  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  lower_case <- c()\n  upper_case\
    \ <- c()\n  for(key in names(dict)) {\n    if(is.na(key)) {\n      return(FALSE)\n\
    \    }\n    if(all(is.lower(key))) {\n      lower_case <- c(lower_case, key)\n\
    \    } else if(all(is.upper(key))) {\n      upper_case <- c(upper_case, key)\n\
    \    } else {\n      return(FALSE)\n    }\n  }\n  if(length(lower_case) > 0 &&\
    \ length(upper_case) > 0) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  names <- names(dict)\n  if (length(names)\
    \ == 0) {\n    return(FALSE)\n  }\n  first_name <- names[1]\n  if (first_name\
    \ %in% c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'))\
    \ {\n    for (n in names) {\n      if (n %in% c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\
    \ {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  } else if (first_name\
    \ %in% c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\
    \ {\n    for (n in names) {\n      if (n %in% c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'))\
    \ {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  } else {\n   \
    \ return(FALSE)\n  }\n}\n", "\n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  upper_case <- logical(length(dict))\n  lower_case <- logical(length(dict))\n\
    \  for(i in 1:length(dict)) {\n    upper_case[i] <- is.character(names(dict)[i])\
    \ & all(names(dict)[i] %in% letters) & all(names(dict)[i] == toupper(names(dict)[i]))\n\
    \    lower_case[i] <- is.character(names(dict)[i]) & all(names(dict)[i] %in% letters)\
    \ & all(names(dict)[i] == tolower(names(dict)[i]))\n  }\n  return(all(upper_case)\
    \ | all(lower_case))\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\
    \ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\n", "\n    if (length(dict) == 0) {\n        return(FALSE)\n   \
    \ }\n    return(all(is.na(grep(\"[[:upper:]]\", names(dict)))))\n}\n", "\n  #\
    \ Create a boolean vector that represents whether or not the keys are\n  # all\
    \ lower case.\n  lower_case <- all(sapply(names(dict), function(x) x == tolower(x)))\n\
    \  # Create a boolean vector that represents whether or not the keys are\n  #\
    \ all upper case.\n  upper_case <- all(sapply(names(dict), function(x) x == toupper(x)))\n\
    \  # Return whether or not the keys are all lower case OR upper case\n  return(lower_case\
    \ | upper_case)\n}\n", "\n  # Your code here\n}\n\ncheck_dict_case(list('a' =\
    \ 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n ", "\n    if(!is.named(dict)) {\n        return(FALSE)\n\
    \    }\n    if(length(dict) == 0) {\n        return(FALSE)\n    }\n    all_lower\
    \ <- TRUE\n    all_upper <- TRUE\n    names(dict) %>% \n        sapply(function(x)\
    \ {\n            if(!is.string(x)) {\n                return(FALSE)\n        \
    \    }\n            if(x != tolower(x)) {\n                all_lower <- FALSE\n\
    \            }\n            if(x != toupper(x)) {\n                all_upper <-\
    \ FALSE\n            }\n        })\n    if(all_lower || all_upper) {\n       \
    \ return(TRUE)\n    }\n    return(FALSE)\n}\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' =\
    \ 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n    l <- length(dict)\n    if (l == 0) {\n\
    \        return(FALSE)\n    }\n    if (all(lapply(dict, class) == \"numeric\"\
    )) {\n        return(FALSE)\n    }\n    if (all(lapply(dict, class) == \"character\"\
    )) {\n        if (all(lapply(dict, tolower) == names(dict))) {\n            return(TRUE)\n\
    \        } else if (all(lapply(dict, toupper) == names(dict))) {\n           \
    \ return(TRUE)\n        } else {\n            return(FALSE)\n        }\n    }\n\
    }\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n  # Return FALSE if the given named list is empty.\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  # Get all the keys of the given named list.\n \
    \ all_keys <- names(dict)\n  # Return FALSE if any key of the given named list\
    \ is not a string.\n  if (any(!is.character(all_keys))) {\n    return(FALSE)\n\
    \  }\n  # Return TRUE if all keys are strings in lower case or all keys are strings\
    \ in upper case.\n  if (all(all_keys == tolower(all_keys)) || all(all_keys ==\
    \ toupper(all_keys))) {\n    return(TRUE)\n  }\n  # Return FALSE if any key is\
    \ a string in mixed case.\n  if (any(all_keys != tolower(all_keys)) || any(all_keys\
    \ != toupper(all_keys))) {\n    return(FALSE)\n  }\n}", "\n    if(length(dict)\
    \ == 0) return(FALSE)\n    vec <- NULL\n    for(key in names(dict)) {\n      \
    \  if(all(grepl('[a-z]', key))) vec <- c(vec, 1)\n        else if(all(grepl('[A-Z]',\
    \ key))) vec <- c(vec, 0)\n        else return(FALSE)\n    }\n    length(unique(vec))\
    \ == 1\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' =\
    \ '12345'))\n", "\n  \n}\n ", "\n  \n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  \n  keys <- names(dict)\n  first_key <- keys[1]\n  \n  if(all(first_key\
    \ == toupper(first_key))) {\n    return(all(toupper(keys) == keys))\n  } else\
    \ {\n    return(all(tolower(keys) == keys))\n  }\n}\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' =\
    \ 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n\
    \ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n\ncheck_dict_case(list())\n",
  "\n  if(length(dict) == 0) return(FALSE)\n  if(length(grep('[A-Z]', names(dict)))\
    \ == 0) return(TRUE)\n  if(length(grep('[a-z]', names(dict))) == 0) return(TRUE)\n\
    \  return(FALSE)\n}\n\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\n\
    check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\n\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana', 'c' = 'cat'))\n\
    \ncheck_dict_case(list('A' = 'apple', 'B' = 'banana', 'C' = 'cat'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'B' = 'banana', 'c' = 'cat'))\n\ncheck_dict_case(list('A' = 'apple',\
    \ 'b' = 'banana', 'C' = 'cat'))\n\ncheck_dict_case(list())\n\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'B' = 'cat'))\n", "\n  if(length(dict) == 0) {\n  \
    \  return(FALSE)\n  }\n  lowercase_pattern <- \"^[a-z]*$\"\n  uppercase_pattern\
    \ <- \"^[A-Z]*$\"\n  lowercase_count <- 0\n  uppercase_count <- 0\n  keys <- names(dict)\n\
    \  for(key in keys) {\n    if(grepl(lowercase_pattern, key)) {\n      lowercase_count\
    \ <- lowercase_count + 1\n    } else if(grepl(uppercase_pattern, key)) {\n   \
    \   uppercase_count <- uppercase_count + 1\n    }\n  }\n  if(lowercase_count ==\
    \ length(dict) || uppercase_count == length(dict)) {\n    return(TRUE)\n  }\n\
    \  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n\
    \  values <- unlist(dict)\n  keys <- names(dict)\n  if (all(keys %in% tolower(keys))\
    \ == TRUE | all(keys %in% toupper(keys)) == TRUE) {\n    TRUE\n  } else {\n  \
    \  FALSE\n  }\n}\n", "\n  all_keys_are_lower <- isTRUE(all(sapply(names(dict),\
    \ function(x) \n    isTRUE(all(x == tolower(x)))))\n  )\n  all_keys_are_upper\
    \ <- isTRUE(all(sapply(names(dict), function(x) \n    isTRUE(all(x == toupper(x)))))\n\
    \  )\n  return(isTRUE(all_keys_are_lower | all_keys_are_upper))\n}\n", "\n  return(all(is.character(names(dict)))\
    \ & length(names(dict))>0 & length(unique(names(dict)))==1 & \n         all(grepl('^[a-z]*$',\
    \ names(dict))) | all(grepl('^[A-Z]*$', names(dict))))\n}\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  # Convert all keys to lower case, and keep only characters in the key\n\
    \  # strings.\n  lower_keys <- tolower(sapply(names(dict), function(x) {\n   \
    \ paste(gsub(\"[^[:alpha:]]\", \"\", x), collapse = \"\")\n  }))\n  # Convert\
    \ all keys to upper case, and keep only characters in the key\n  # strings.\n\
    \  upper_keys <- toupper(sapply(names(dict), function(x) {\n    paste(gsub(\"\
    [^[:alpha:]]\", \"\", x), collapse = \"\")\n  }))\n  # If the strings in lower_keys\
    \ are the same as the strings in upper_keys,\n  # then all keys were converted\
    \ to the same case.\n  if (all(lower_keys == upper_keys)) {\n    return(TRUE)\n\
    \  }\n  return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n  if(length(dict) == 0) {\n\
    \    return(FALSE)\n  } else {\n    if(all(names(dict) %in% c(tolower(names(dict)),\
    \ toupper(names(dict))))) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  }\n}\n\nrm(list = ls())", "\n    if(length(dict) > 0) {\n        key_types\
    \ <- sapply(dict, class)\n        bool_vals <- key_types == \"character\"\n  \
    \      if(all(bool_vals)) {\n            keys <- names(dict)\n            lower\
    \ <- grepl(\"^[a-z]+$\", keys)\n            upper <- grepl(\"^[A-Z]+$\", keys)\n\
    \            if(all(lower) || all(upper)) {\n                return(TRUE)\n  \
    \          }\n        }\n    }\n    return(FALSE)\n}\n", "\n    #check if dictionary\
    \ is not empty\n    if(length(dict) == 0) return(FALSE)\n    #check if all keys\
    \ are strings\n    if(all(lapply(dict, is.character))) {\n        #check if all\
    \ keys are in lower case\n        if(all(lapply(dict, tolower) == lapply(dict,\
    \ toupper))) return(TRUE)\n        #check if all keys are in upper case\n    \
    \    if(all(lapply(dict, tolower) == lapply(dict, toupper))) return(TRUE)\n  \
    \  }\n    return(FALSE)\n}\n ", "\n    if (length(dict) == 0) {\n        return(FALSE)\n\
    \    }\n    keys <- names(dict)\n    if (length(grep('[A-Z]', keys)) == 0) {\n\
    \        return(TRUE)\n    }\n    if (length(grep('[a-z]', keys)) == 0) {\n  \
    \      return(TRUE)\n    }\n    return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n \
    \ if(length(dict) == 0) return(FALSE)\n  if(length(dict) == 1) return(TRUE)\n\
    \  if(names(dict) == toupper(names(dict))) return(TRUE)\n  if(names(dict) == tolower(names(dict)))\
    \ return(TRUE)\n  return(FALSE)\n}", "\n  # need a way to extract the keys from\
    \ the dict and determine if they are all\n  # upper or lower case\n  # if one\
    \ is upper and one is lower, then FALSE\n  # if they are all upper or all lower,\
    \ then TRUE\n  # create a vector to hold the keys\n  key_vec <- as.vector(unlist(dict))\n\
    \  # remove the empty key\n  key_vec <- key_vec[key_vec != '']\n  # check to see\
    \ if the vector is all lower case\n  if(all(str_detect(key_vec, '[:lower:]')))\
    \ {\n    return(TRUE)\n  } else if(all(str_detect(key_vec, '[:upper:]'))) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n  \n}\n", "\n    if(length(dict)\
    \ == 0) {\n        return(FALSE)\n    }\n    keys <- names(dict)\n    is_upper\
    \ <- all(tools::toTitleCase(keys) == keys)\n    is_lower <- all(tools::toLower(keys)\
    \ == keys)\n    return(is_upper | is_lower)\n}\n", "\n    lapply(names(dict),\
    \ function(x) any(x == toupper(x)))\n    all(lapply(names(dict), function(x) any(x\
    \ == toupper(x))))\n}\n\nprint(paste0(\"check_dict_case(list('a' = 'apple', 'b'\
    \ = 'banana'))\"),check_dict_case(list('a' = 'apple', 'b' = 'banana')))\nprint(paste0(\"\
    check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\"),check_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana')))\nprint(paste0(\"check_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\"),check_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple')))\nprint(paste0(\"check_dict_case(list('Name' =\
    \ 'John', 'Age' = '36', 'City' = 'Houston'))\"),check_dict_case(list('Name' =\
    \ 'John', 'Age' = '36', 'City' = 'Houston')))\nprint(paste0(\"check_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\"),check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345')))\n",
  "\n    kv_pairs <- names(dict)\n    is_lower <- nchar(kv_pairs) == nchar(tolower(kv_pairs))\n\
    \    is_upper <- nchar(kv_pairs) == nchar(toupper(kv_pairs))\n    return(is_lower\
    \ | is_upper)\n}\n\nprint(check_dict_case(list('a' = 'apple', 'b' = 'banana')))\n\
    print(check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana')))\n\
    print(check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple')))\nprint(check_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')))\nprint(check_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')))\n", "\n    upper <- 0\n    lower <- 0\n    for (name\
    \ in names(dict)) {\n        if (all(is.na(grep(\"[A-Z]\", name)))) {\n      \
    \      lower <- lower + 1\n        } else if (all(is.na(grep(\"[a-z]\", name))))\
    \ {\n            upper <- upper + 1\n        } else {\n            return(FALSE)\n\
    \        }\n    }\n    if (lower == 0 && upper == 0) {\n        return(FALSE)\n\
    \    } else if (lower == 0 || upper == 0) {\n        return(TRUE)\n    } else\
    \ {\n        return(FALSE)\n    }\n}", "\n  cond1 <- all(names(dict) == tolower(names(dict)))\n\
    \  cond2 <- all(names(dict) == toupper(names(dict)))\n  cond3 <- length(dict)\
    \ > 0\n  return(cond1 | cond2 & cond3)\n}\n", "\n    keys <- names(dict)\n   \
    \ if (length(keys) == 0) {\n        return(FALSE)\n    }\n    is_lower <- all(grepl(\"\
    ^[a-z]+$\", keys))\n    is_upper <- all(grepl(\"^[A-Z]+$\", keys))\n    return(is_lower\
    \ | is_upper)\n}\nprint(check_dict_case(list('a' = 'apple', 'b' = 'banana')))\n\
    print(check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana')))\n\
    print(check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple')))\nprint(check_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')))\nprint(check_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')))\n", "\n    stopifnot(is.list(dict))\n    names(dict)\n\
    }\n", "\n  dict <- as.list(dict)\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  key_char <- sapply(dict, function(key) substr(key, 1, 1))\n  return(all(key_char\
    \ == 'a') || all(key_char == 'A'))\n}", "\n  # if it's empty, return FALSE, if\
    \ not, check the keys\n  if(length(dict) > 0) {\n    # get the key names, uppercase\
    \ and lowercase\n    key_names <- names(dict)\n    key_names_upper <- toupper(key_names)\n\
    \    key_names_lower <- tolower(key_names)\n    # check if they're the same\n\
    \    all(key_names == key_names_upper) || all(key_names == key_names_lower)\n\
    \  } else {\n    FALSE\n  }\n}\n", "\n    len <- length(dict)\n    # Return FALSE\
    \ if length is 0\n    if (len == 0) return(FALSE)\n    # Determine if all of the\
    \ keys are upper or lower case\n    all_upper <- all(names(dict) == toupper(names(dict)))\n\
    \    all_lower <- all(names(dict) == tolower(names(dict)))\n    # Return TRUE\
    \ if all the keys are upper or lower case\n    if (all_upper || all_lower) return(TRUE)\n\
    \    # Return FALSE otherwise\n    return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  # Checks to see if dictionary is empty, returns FALSE if it is\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  # Create a vector of the keys and turn it\
    \ into a string\n  keys <- names(dict)\n  keys_string <- paste(keys, collapse\
    \ = \"\")\n  # Check if all the keys are uppercase and if so return TRUE\n  if\
    \ (all(!grepl(\"[a-z]\", keys_string))) {\n    return(TRUE)\n  }\n  # Check if\
    \ all the keys are lowercase and if so return TRUE\n  if (all(!grepl(\"[A-Z]\"\
    , keys_string))) {\n    return(TRUE)\n  }\n  # If none of the above is true then\
    \ return FALSE\n  return(FALSE)\n}\n\ncheck_dict_case(list('a' = 'apple', 'b'\
    \ = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\
    check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' =\
    \ 'NC', 'ZIP' = '12345'))\ncheck_dict_case(list())\n", "\n  \n  # return FALSE\
    \ if named list is empty\n  if (length(dict) == 0) return(FALSE)\n  \n  # check\
    \ case of keys\n  if (all(unlist(lapply(dict, function(x) identical(tolower(x),\
    \ x))))) {\n    return(TRUE)\n  } else if (all(unlist(lapply(dict, function(x)\
    \ identical(toupper(x), x))))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}", "\n  all(sapply(dict, function(x) is.character(x))) &\n    all(sapply(names(dict),\
    \ is.character)) &\n    ((all(sapply(names(dict), function(x) str_detect(x, '^[a-z]+$'))))\
    \ |\n      (all(sapply(names(dict), function(x) str_detect(x, '^[A-Z]+$')))))\n\
    }\n ", "\n  #use sapply to check each key of the list and apply is.upper (r base)\
    \ to each one, returns a logical vector\n  is.upper.list <- sapply(names(dict),\
    \ is.upper)\n  #check if entire list is TRUE (all uppercase)\n  if(all(is.upper.list)){\n\
    \    return(TRUE)\n  }else{\n    #check if entire list is FALSE (all lowercase)\n\
    \    if(all(!is.upper.list)){\n      return(TRUE)\n    }else{\n      return(FALSE)\n\
    \    }\n  }\n}\n", "\n  \n  if(length(dict) == 0) return(FALSE)\n  \n  keys <-\
    \ names(dict)\n  values <- dict\n  \n  for(i in 1:length(keys)){\n    if(is.character(keys[i])){\n\
    \      if(!all(is.na(grep(\"[A-Z]\", keys[i])))) return(FALSE)\n    } else {\n\
    \      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}", "\n  if (length(dict)\
    \ == 0) return(FALSE)\n \n  lowercase_keys <- all(unlist(strsplit(names(dict),\
    \ \"\")) %in% letters)\n  uppercase_keys <- all(unlist(strsplit(names(dict), \"\
    \")) %in% LETTERS)\n  if (lowercase_keys || uppercase_keys) return(TRUE)\n  return(FALSE)\n\
    }\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' =\
    \ '12345'))\n", "\n    # YOUR CODE HERE\n    t = TRUE\n    if(length(dict) ==\
    \ 0) {\n        t = FALSE\n    } else {\n        for(key in names(dict)) {\n \
    \           if(toupper(key) != key && tolower(key) != key) {\n               \
    \ t = FALSE\n            }\n        }\n    }\n    return(t)\n}\n", "\n  upper\
    \ <- FALSE\n  lower <- FALSE\n  string <- FALSE\n  for (key in names(dict)) {\n\
    \    if (key == toupper(key)) {\n      upper <- TRUE\n    }\n    if (key == tolower(key))\
    \ {\n      lower <- TRUE\n    }\n    if (is.string(key)) {\n      string <- TRUE\n\
    \    }\n  }\n  if ((upper & lower) | !string) {\n    return(FALSE)\n  }\n  else\
    \ {\n    return(TRUE)\n  }\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  is_lower <- all(lapply(names(dict), is.lower))\n  is_upper <- all(lapply(names(dict),\
    \ is.upper))\n  if (is_lower || is_upper) {\n    return(TRUE)\n  } else {\n  \
    \  return(FALSE)\n  }\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  is_lower <- TRUE\n  is_upper <- TRUE\n  for (key in names(dict)) {\n \
    \   if (!is.character(key)) {\n      return(FALSE)\n    }\n    if (key != tolower(key))\
    \ {\n      is_lower <- FALSE\n    }\n    if (key != toupper(key)) {\n      is_upper\
    \ <- FALSE\n    }\n  }\n  return(is_lower | is_upper)\n}\n    \n    ", "\n  if(length(dict)\
    \ == 0) return(FALSE)\n  keys <- names(dict)\n  return(all(tolower(keys) == keys)\
    \ | all(toupper(keys) == keys))\n}", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  key_type = typeof(names(dict)[1])\n  if (key_type != \"character\") {\n\
    \    return(FALSE)\n  }\n  upper_case = is.na(tolower(names(dict)[1]))\n  is_upper\
    \ = all(upper_case == is.na(tolower(names(dict))))\n  is_lower = all(!upper_case\
    \ == is.na(toupper(names(dict))))\n  return(is_upper | is_lower)\n}\n", "\n  names(dict)\
    \ <- tolower(names(dict))\n  names(dict) == names(dict)\n}\n", "\n  # get the\
    \ keys\n  keys <- names(dict)\n  # for each key, check if it is upper or lower\
    \ case\n  tolower <- sapply(keys, function(key) all(tolower(key) == key))\n  toupper\
    \ <- sapply(keys, function(key) all(toupper(key) == key))\n  # return TRUE if\
    \ all keys are in the same case, else return FALSE\n  # use first to get boolean\
    \ values of vector\n  return(length(keys) == 0 | (first(tolower) & !first(toupper))\
    \ | (!first(tolower) & first(toupper)))\n}\n", "\n    stopifnot(is.list(dict))\n\
    \    if (length(dict) == 0)\n        return(FALSE)\n    upper <- is.upper(names(dict))\n\
    \    lower <- is.lower(names(dict))\n    return(all(upper) || all(lower))\n}\n\
    \nis.upper <- function(x) {\n    return(tolower(x) == x)\n}\n\nis.lower <- function(x)\
    \ {\n    return(toupper(x) == x)\n}\ntest_that('Task 1.1', {\n    expect_true(check_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana')))\n    expect_false(check_dict_case(list('a' = 'apple',\
    \ 'A' = 'banana', 'B' = 'banana')))\n    expect_false(check_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple')))\n    expect_false(check_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')))\n    expect_true(check_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')))\n})\n \n", "\n    lower <- all(sapply(names(dict),\
    \ is.lower))\n    upper <- all(sapply(names(dict), is.upper))\n    lower || upper\n\
    }", "\n  # write your code here\n}\n", "\n    # Check if the given list is empty\n\
    \    if (length(dict) == 0) {\n        return(FALSE)\n    }\n    \n    # Check\
    \ if all keys are in lower or upper case\n    for (item in dict) {\n        if\
    \ (is.numeric(item)) {\n            return(FALSE)\n        }\n        if (exists('is_upper_case'))\
    \ {\n            if (is_upper_case && !is.null(str_detect(item, \"[a-z]\"))) {\n\
    \                return(FALSE)\n            }\n            if (!is_upper_case\
    \ && !is.null(str_detect(item, \"[A-Z]\"))) {\n                return(FALSE)\n\
    \            }\n        } else {\n            if (is.null(str_detect(item, \"\
    [a-z]\"))) {\n                is_upper_case <- TRUE\n            } else {\n  \
    \              is_upper_case <- FALSE\n            }\n        }\n    }\n    return(TRUE)\n\
    }", "\n  if (length(dict) == 0)\n    return(FALSE)\n  if (is.null(dict))\n   \
    \ return(FALSE)\n  keys <- names(dict)\n  #print(keys)\n  if (all(tolower(keys)\
    \ == keys))\n    return(TRUE)\n  if (all(toupper(keys) == keys))\n    return(TRUE)\n\
    \  return(FALSE)\n}\n\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\
    check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\ncheck_dict_case(list())\ncheck_dict_case(NULL)\n", "\n    # check\
    \ if the length of the dictionary is zero; if so, return FALSE\n    if (length(dict)\
    \ == 0) {\n        return(FALSE)\n    }\n    # check if the dictionary has all\
    \ strings in lower case; if so, return TRUE\n    if (sum(sapply(dict, is.character)\
    \ & sapply(dict, is.lower)) == length(dict)) {\n        return(TRUE)\n    }\n\
    \    # check if the dictionary has all strings in upper case; if so, return TRUE\n\
    \    if (sum(sapply(dict, is.character) & sapply(dict, is.upper)) == length(dict))\
    \ {\n        return(TRUE)\n    }\n    # if it is not the case that dictionary\
    \ has all strings in lower case or in upper case, return FALSE\n    return(FALSE)\n\
    }\n", "\n  stopifnot(!is.null(dict))\n  if (length(dict) == 0) return(FALSE)\n\
    \  if (is.character(names(dict))) {\n    return(all(grepl(\"^[a-z]\", names(dict)))\
    \ | all(grepl(\"^[A-Z]\", names(dict))))\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  if(is.numeric(unlist(dict)))\
    \ {\n    return(FALSE)\n  }\n  if(sum(startsWith(names(dict), \"a\")) == length(dict))\
    \ {\n    return(TRUE)\n  }\n  if(sum(startsWith(names(dict), \"A\")) == length(dict))\
    \ {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  # use length(dict) function\
    \ to get the length of the dict\n  if (length(dict) == 0)\n    return(FALSE)\n\
    \  # use length(unique(names(dict))) function to get the length of the unique\
    \ names of the dict\n  if (length(unique(names(dict))) == 1)\n    return(TRUE)\n\
    \  # use names(dict) to get the names of the dict\n  # names_dict <- names(dict)\n\
    \  # use tolower(names_dict) to convert the names of the dict to lower case\n\
    \  # names_lower <- tolower(names_dict)\n  # use toupper(names_dict) to convert\
    \ the names of the dict to upper case\n  # names_upper <- toupper(names_dict)\n\
    \  # use all(names_dict == names_lower) function to check if the names of the\
    \ dict are all lower case\n  # if (all(names_dict == names_lower))\n  #   return(TRUE)\n\
    \  # else if (all(names_dict == names_upper))\n  #   return(TRUE)\n  # else\n\
    \  #   return(FALSE)\n  if (all(tolower(names(dict)) == names(dict)))\n    return(TRUE)\n\
    \  else if (all(toupper(names(dict)) == names(dict)))\n    return(TRUE)\n  else\n\
    \    return(FALSE)\n}\n", "\n  lower = 0\n  upper = 0\n  for (key in names(dict))\
    \ {\n    if (grepl(\"[[:lower:]]\", key)) {\n      lower = lower + 1\n    } else\
    \ if (grepl(\"[[:upper:]]\", key)) {\n      upper = upper + 1\n    }\n  }\n  if\
    \ (lower == 0 & upper == 0) {\n    return(FALSE)\n  } else if (lower == length(dict)\
    \ | upper == length(dict)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n  \n  #checks if dict is not empty\n  if(length(dict) == 0)\n    return(FALSE)\n\
    \  \n  # checks if the dictionary only has lower case or only has upper case \
    \ \n  else\n    return(all(names(dict) == toupper(names(dict))) | all(names(dict)\
    \ == tolower(names(dict))))\n}\n\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\
    check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\n", "\n  # check if the input is a named list\n  if(!is.list(dict))\
    \ {\n    message(\"ERROR: input is not a named list\")\n    return(FALSE)\n  }\n\
    \  # check if the input list is empty\n  if(length(dict) == 0) {\n    message(\"\
    ERROR: input list is empty\")\n    return(FALSE)\n  }\n  # initialize key_case\
    \ variable\n  key_case <- NA\n  # check each key in the list\n  for(key in names(dict))\
    \ {\n    # check if the key is a character string\n    if(!is.character(key))\
    \ {\n      message(\"ERROR: key is not a character string\")\n      return(FALSE)\n\
    \    }\n    # check if the key is all upper or lower case\n    if(nchar(key) ==\
    \ sum(is.upper(key)) | nchar(key) == sum(is.lower(key))) {\n      if(is.na(key_case))\
    \ {\n        # check if key_case has a value\n        key_case <- key\n      }\
    \ else {\n        # check if key_case does not match the key\n        if(key_case\
    \ != key) {\n          message(\"ERROR: key case does not match\")\n         \
    \ return(FALSE)\n        }\n      }\n    } else {\n      message(\"ERROR: key\
    \ case is not all upper or lower\")\n      return(FALSE)\n    }\n  }\n  # return\
    \ TRUE if all checks pass\n  return(TRUE)\n}\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B'\
    \ = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    \ncheck_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n\n\
    check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n\ncheck_dict_case(list())\n\
    \ncheck_", "\n  if (length(dict) == 0) return(FALSE)\n  # Detect if all keys are\
    \ lower case or upper case\n  all.lower <- TRUE\n  all.upper <- TRUE\n  for (k\
    \ in names(dict)) {\n    if (!identical(k, tolower(k))) all.lower <- FALSE\n \
    \   if (!identical(k, toupper(k))) all.upper <- FALSE\n  }\n  return(all.lower\
    \ | all.upper)\n}\n", "\n    if(length(dict) == 0) {\n        return(FALSE)\n\
    \    } else {\n        if(!(all(sapply(dict,function(x) x == tolower(x))))) {\n\
    \            return(FALSE)\n        } else {\n            return(TRUE)\n     \
    \   }\n    }\n}", "\n  if (length(dict) == 0) return(FALSE)\n  lower <- TRUE\n\
    \  upper <- TRUE\n  if (!is.named(dict)) stop(\"dict should be a named list\"\
    )\n  names(dict) %>% map_lgl(function(x) {\n    if (!is.character(x)) stop(\"\
    dict should contain only string keys\")\n    lower <- lower & is.lower(x)\n  \
    \  upper <- upper & is.upper(x)\n  })\n  lower | upper\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  \n  if(is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  \n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  \n  if(is.character(names(dict)))\
    \ {\n    return(FALSE)\n  }\n  \n  if(sum(grepl('[a-z]', names(dict))) == length(names(dict)))\
    \ {\n    return(TRUE)\n  }\n  \n  if(sum(grepl('[A-Z]', names(dict))) == length(names(dict)))\
    \ {\n    return(TRUE)\n  }\n  \n  return(FALSE)\n}\n", "\n  n <- length(dict)\n\
    \  if (n == 0) return(FALSE)\n  vn <- names(dict)\n  check_upper <- function(n)\
    \ n == toupper(n)\n  check_lower <- function(n) n == tolower(n)\n  ok_lower <-\
    \ all(sapply(vn, check_lower))\n  ok_upper <- all(sapply(vn, check_upper))\n \
    \ ok_lower || ok_upper\n}\n", "\n  # check for empty list\n  if (length(dict)\
    \ == 0) return(FALSE)\n  # check for lowercase keys\n  if (all(lapply(dict, function(x)\
    \ grepl('^[a-z]+$', x)))) {\n    return(TRUE)\n  }\n  # check for uppercase keys\n\
    \  if (all(lapply(dict, function(x) grepl('^[A-Z]+$', x)))) {\n    return(TRUE)\n\
    \  }\n  # if not all lower or upper case\n  return(FALSE)\n}", "\n    if(is.null(dict))\
    \ {\n        return(FALSE)\n    } else {\n        return(all(names(dict) == tolower(names(dict)))\
    \ | all(names(dict) == toupper(names(dict))))\n    }\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' =\
    \ 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n\
    \ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n\ncheck_dict_case(list())\n",
  "\n  all_upper <- TRUE\n  all_lower <- TRUE\n  for (key in names(dict)) {\n    if\
    \ (is.null(key)) {\n      return(FALSE)\n    }\n    all_upper <- all_upper & is.null(grep(\"\
    [[:lower:]]\", key))\n    all_lower <- all_lower & is.null(grep(\"[[:upper:]]\"\
    , key))\n  }\n  all_upper | all_lower\n}\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B'\
    \ = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    \ncheck_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n\n\
    check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n", "\n  x <- sort(dict)\n\
    \  y <- sort(dict, decreasing = TRUE)\n  m <- identical(names(x), tolower(names(x)))\n\
    \  n <- identical(names(y), toupper(names(y)))\n  p <- length(dict) > 0\n  r <-\
    \ ifelse(p, m | n, FALSE)\n  return(r)\n}\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' =\
    \ 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  if (length(dict) == 0) return(FALSE)\n  k\
    \ <- names(dict)\n  if (all(tolower(k) == k)) return(TRUE)\n  if (all(toupper(k)\
    \ == k)) return(TRUE)\n  return(FALSE)\n}\n\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' =\
    \ 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n\ncheck_dict_case(list())\n", "\n    # Extract keys\
    \ and values from given dict\n    keys <- names(dict)\n    values <- unname(dict)\n\
    \    \n    # check whether the given dict is empty\n    if (length(keys) == 0)\
    \ {\n        return(FALSE)\n    }\n    \n    # check the first element in keys\n\
    \    if (all(is.lower(keys[1]))) {\n        # if all elements are lower, check\
    \ all elements\n        if (all(is.lower(keys))) {\n            return(TRUE)\n\
    \        } else {\n            return(FALSE)\n        }\n    } else if (all(is.upper(keys[1])))\
    \ {\n        # if all elements are upper, check all elements\n        if (all(is.upper(keys)))\
    \ {\n            return(TRUE)\n        } else {\n            return(FALSE)\n \
    \       }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  if(length(dict)==0)\
    \ return(FALSE)\n  if(all(names(dict)==tolower(names(dict)))) return(TRUE)\n \
    \ if(all(names(dict)==toupper(names(dict)))) return(TRUE)\n  return(FALSE)\n}\n\
    \ \ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  all_lower = TRUE\n  all_upper\
    \ = TRUE\n  for (key in names(dict)) {\n    if (is.na(key)) {\n      return(FALSE)\n\
    \    }\n    if (all_lower & !all(key == tolower(key))) {\n      all_lower = FALSE\n\
    \    }\n    if (all_upper & !all(key == toupper(key))) {\n      all_upper = FALSE\n\
    \    }\n  }\n  return(all_lower | all_upper)\n}", "\n  # YOUR CODE HERE\n  l <-\
    \ length(dict)\n  if(l==0){\n    return(FALSE)\n  }else{\n    temp = names(dict)\n\
    \    islower = all(str_detect(temp, regex('^[a-z]+$')))\n    isupper = all(str_detect(temp,\
    \ regex('^[A-Z]+$')))\n    return(islower || isupper)\n  }\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  if (length(dict) == 0) {\n    FALSE\n  }\
    \ else {\n    lower <- all(sapply(names(dict), function(x) { x == tolower(x) }))\n\
    \    upper <- all(sapply(names(dict), function(x) { x == toupper(x) }))\n    lower\
    \ | upper\n  }\n}\n", "\n    return(length(unique(lapply(dict, \n            \
    \                    function(x) {\n                                    if(is.character(names(dict)[x]))\
    \ {\n                                        return(is.upper(names(dict)[x]))\n\
    \                                    } else {\n                              \
    \          return(NULL)\n                                    }\n             \
    \                   }))) < 2)\n}\n", "\n  # for each element, check to see if\
    \ it is in all lower or all upper\n  # if it is, don't do anything, if it isn't,\
    \ return FALSE\n  # if you get through each element and don't return, return TRUE\n\
    \  for (key in names(dict)) {\n    if (length(grep(\"[A-Z]\", key)) && length(grep(\"\
    [a-z]\", key))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}", "\n  \n\
    }\n", "\n\tif(length(dict) == 0) {\n\t\treturn(FALSE)\n\t}\n\tkeys <- names(dict)\n\
    \tlower <- 0\n\tupper <- 0\n\tfor(key in keys) {\n\t\tif(tolower(key) == key)\
    \ {\n\t\t\tlower <- lower + 1\n\t\t} else if(toupper(key) == key) {\n\t\t\tupper\
    \ <- upper + 1\n\t\t}\n\t}\n\tif(lower == length(keys) || upper == length(keys))\
    \ {\n\t\treturn(TRUE)\n\t}\n\treturn(FALSE)\n}\n", "\n  # Write your code here\n\
    \  mixed_case <- FALSE\n  if(length(dict) == 0) return(FALSE)\n  for(key in names(dict)){\n\
    \    if(key != toupper(key) && key != tolower(key)){\n      mixed_case <- TRUE\n\
    \      break\n    }\n  }\n  if(mixed_case) return(FALSE)\n  return(TRUE)\n}\n",
  "\n  \n  is_not_string <- function(x) {\n    class(x) != \"character\"\n  }\n  \n\
    \  is_uppercase <- function(x) {\n    x == toupper(x)\n  }\n  \n  is_lowercase\
    \ <- function(x) {\n    x == tolower(x)\n  }\n  \n  names <- names(dict)\n  \n\
    \  if (length(names) == 0) return(FALSE)\n  \n  if (any(lapply(names, is_not_string)))\
    \ return(FALSE)\n  \n  upper_case <- all(lapply(names, is_uppercase))\n  lower_case\
    \ <- all(lapply(names, is_lowercase))\n  \n  if (upper_case | lower_case) return(TRUE)\n\
    \  \n  return(FALSE)\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\
    \ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\n\ncheck_dict_case(list())\n", "\n\t# Create a list of all keys\
    \ and values of the dictionary\n\tkey_list <- names(dict)\n\tvalue_list <- dict\n\
    \t# If the key_list is empty, return FALSE\n\tif (length(key_list) == 0) {\n\t\
    \treturn(FALSE)\n\t}\n\t# Set the first element of the list as TRUE\n\tcheck <-\
    \ TRUE\n\t# If it is not a string, return FALSE\n\tif (typeof(key_list[1]) !=\
    \ \"character\") {\n\t\treturn(FALSE)\n\t}\n\t# Check if all keys are in lower\
    \ case\n\tfor (i in 1:length(key_list)) {\n\t\tif (typeof(key_list[i]) != \"character\"\
    ) {\n\t\t\tcheck <- FALSE\n\t\t\tbreak\n\t\t}\n\t\tif (key_list[i] != tolower(key_list[i]))\
    \ {\n\t\t\tcheck <- FALSE\n\t\t\tbreak\n\t\t}\n\t}\n\t# If all keys are in lower\
    \ case, return TRUE\n\tif (check == TRUE) {\n\t\treturn(TRUE)\n\t}\n\t# Check\
    \ if all keys are in upper case\n\tfor (i in 1:length(key_list)) {\n\t\tif (typeof(key_list[i])\
    \ != \"character\") {\n\t\t\tcheck <- FALSE\n\t\t\tbreak\n\t\t}\n\t\tif (key_list[i]\
    \ != toupper(key_list[i])) {\n\t\t\tcheck <- FALSE\n\t\t\tbreak\n\t\t}\n\t}\n\t\
    # If all keys are in upper case, return TRUE\n\tif (check == TRUE) {\n\t\treturn(TRUE)\n\
    \t}\n\t# If all keys are not in either lower case or upper case, return FALSE\n\
    \treturn(FALSE)\n}\n", "\n  \n}\n ", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if (length(grep(\"[A-Z]\", names(dict))) == 0) {\n    return(TRUE)\n \
    \ }\n  if (length(grep(\"[a-z]\", names(dict))) == 0) {\n    return(TRUE)\n  }\n\
    \  return(FALSE)\n}", "\n    dict_keys <- names(dict)\n    if (is.null(dict_keys))\
    \ {\n        return(FALSE)\n    }\n    tolower_flag <- TRUE\n    toupper_flag\
    \ <- TRUE\n    for (key in dict_keys) {\n        if (!(key == tolower(key))) {\n\
    \            tolower_flag <- FALSE\n        }\n        if (!(key == toupper(key)))\
    \ {\n            toupper_flag <- FALSE\n        }\n    }\n    if (tolower_flag\
    \ | toupper_flag) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\n", "\n  upper <- TRUE\n  for (key in names(dict)) {\n    if (!is.na(key))\
    \ {\n      if (upper) {\n        if (is.character(key) && !identical(key, toupper(key)))\
    \ {\n          upper <- FALSE\n        }\n      } else {\n        if (is.character(key)\
    \ && !identical(key, tolower(key))) {\n          return(FALSE)\n        }\n  \
    \    }\n    }\n  }\n  return(upper)\n}\n", "\n  # case where dict is null\n  if\
    \ (length(dict) == 0) {\n    return(FALSE)\n  }\n  # case where dict has only\
    \ one element\n  elif (length(dict) == 1) {\n    return(TRUE)\n  }\n  # case where\
    \ dict has more than one element\n  else {\n    # whether dict is lower case\n\
    \    is_lower_case <- all(grep('[A-Z]', names(dict)) == integer(0))\n    # whether\
    \ dict is upper case\n    is_upper_case <- all(grep('[a-z]', names(dict)) == integer(0))\n\
    \    # whether dict is correctly case\n    return(is_lower_case | is_upper_case)\n\
    \  }\n}", "\n  # initialize variable with default value\n  check_dict_case_result\
    \ <- FALSE\n  # define variable for checking key type\n  key_type <- NULL\n  #\
    \ iterate through keys in list\n  for (key in names(dict)) {\n    # check if key\
    \ is string\n    if (is.character(key)) {\n      # check if key is upper case\n\
    \      if (key == toupper(key)) {\n        # update key type\n        key_type\
    \ <- 'upper'\n      } else {\n        # update key type\n        key_type <- 'lower'\n\
    \      }\n    } else {\n      # stop iterating, since a key is not a string\n\
    \      break\n    }\n  }\n  # check if all keys are the same type\n  if (length(unique(names(dict)))\
    \ == 1) {\n    # set result to TRUE\n    check_dict_case_result <- TRUE\n  }\n\
    \  # return result\n  return(check_dict_case_result)\n}", "\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  key_vect <- names(dict)\n  return(all(key_vect\
    \ %in% tolower(key_vect)) | all(key_vect %in% toupper(key_vect)))\n}\n", "\n \
    \ keys <- names(dict)\n  if (length(keys) == 0) return(FALSE)\n  if (all(str_detect(keys,\
    \ \"^[A-Z]*$\"))) return(TRUE)\n  if (all(str_detect(keys, \"^[a-z]*$\"))) return(TRUE)\n\
    \  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n    FALSE\n  } else {\n\
    \    upper_count <- 0\n    lower_count <- 0\n    for (key in names(dict)) {\n\
    \      if (key == toupper(key)) {\n        upper_count <- upper_count + 1\n  \
    \    } else if (key == tolower(key)) {\n        lower_count <- lower_count + 1\n\
    \      }\n    }\n    if (upper_count == length(dict) || lower_count == length(dict))\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }\n}\n", "\n\t\n\tif(length(dict)==0)\
    \ {\n\t\treturn(FALSE)\n\t}\n\tlower <- TRUE\n\tupper <- TRUE\n\tfor(key in names(dict))\
    \ {\n\t\tlower <- lower & is.character(key) & identical(key,tolower(key))\n\t\t\
    upper <- upper & is.character(key) & identical(key,toupper(key))\n\t}\n\treturn(upper\
    \ | lower)\n}\n\n", "\n    if (is.null(dict))\n        return(FALSE)\n    else\
    \ if (length(dict) == 0)\n        return(FALSE)\n    else {\n        keys <- names(dict)\n\
    \        vals <- dict\n        return(all(is.character(keys)) &&\n           \
    \    (any(tolower(keys) == keys) & any(toupper(keys) == keys)))\n    }\n}\n",
  "\n    #count the number of keys that are string in lower case\n    lowercount =\
    \ 0\n    #count the number of keys that are string in upper case\n    uppercount\
    \ = 0\n    #count the number of keys that are strings\n    countkeys = 0\n   \
    \ #count the number of keys that are not strings\n    countkeysnotstring = 0\n\
    \    #for every key in the named list\n    for (key in names(dict)) {\n      \
    \  #if the key is a string in lower case\n        if (is.character(key) && all(key\
    \ >= 'a' & key <= 'z')) {\n            #add one to the lowercase counter\n   \
    \         lowercount = lowercount + 1\n        }\n        #if the key is a string\
    \ in upper case\n        if (is.character(key) && all(key >= 'A' & key <= 'Z'))\
    \ {\n            #add one to the uppercase counter\n            uppercount = uppercount\
    \ + 1\n        }\n        #if the key is a string\n        if (is.character(key))\
    \ {\n            #add one to the number of keys that are strings\n           \
    \ countkeys = countkeys + 1\n        }\n        #if the key is not a string\n\
    \        if (!is.character(key)) {\n            #add one to the number of keys\
    \ that are not strings\n            countkeysnotstring = countkeysnotstring +\
    \ 1\n        }\n    }\n    #if the number of keys that are strings is zero or\
    \ the number of keys that are not strings is zero and the number of keys that\
    \ are strings is not zero, return TRUE\n    if (lowercount == 0 || uppercount\
    \ == 0 && countkeys != 0) {\n        return(TRUE)\n    }\n    #if the number of\
    \ keys that are strings is zero and the number of keys that are not strings is\
    \ not zero, return FALSE\n    if (lowercount == 0 && countkeysnotstring != 0)\
    \ {\n        return(FALSE)\n    }\n    #if the number of keys that are strings\
    \ is not zero and the number of keys that are not strings is zero, return FALSE\n\
    \    if (lowercount != 0 && countkeysnotstring == 0) {\n        return(FALSE)\n\
    \    }\n    #if the number of keys that are strings", "\n  \n}\n ", "\n  # Create\
    \ a logical vector of all the keys in dict, where TRUE means the\n  # key is a\
    \ string, and FALSE means the key is not a string.\n  is_string <- sapply(names(dict),\
    \ is.character)\n  # Return FALSE if at least one of the keys is not a string.\n\
    \  if (any(!is_string)) return(FALSE)\n  # Create a logical vector of all the\
    \ keys in dict, where TRUE means the\n  # key is in lower case, and FALSE means\
    \ the key is not in lower case.\n  is_lower <- sapply(names(dict), is.lower)\n\
    \  # Return TRUE if all the keys are in lower case or if all the keys are\n  #\
    \ in upper case.\n  all(is_lower) || all(!is_lower)\n}\n", "\n  \n  # Test for\
    \ empty dict\n  if (length(dict) == 0) {\n    FALSE\n  } else {\n    # Get all\
    \ the keys\n    all_keys <- unlist(strsplit(names(dict), split = \"\"))\n    \n\
    \    # Test for all upper case\n    if (all(all_keys %in% letters)) {\n      TRUE\n\
    \    } else {\n      # Test for all lower case\n      if (all(all_keys %in% LETTERS))\
    \ {\n        TRUE\n      } else {\n        FALSE\n      }\n    }\n  }\n}\n", "\n\
    \  if(all(is.character(names(dict)))){\n    if(all(identical(tolower(names(dict)),\
    \ names(dict)))){\n      return(TRUE)\n    }\n    else if(all(identical(toupper(names(dict)),\
    \ names(dict)))){\n      return(TRUE)\n    }\n    else{\n      return(FALSE)\n\
    \    }\n  }\n  else{\n    return(FALSE)\n  }\n}\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B'\
    \ = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    \ncheck_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n\n\
    check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n", "\n  dict_names <-\
    \ names(dict)\n  if (length(dict_names) == 0) {\n    return(FALSE)\n  }\n  string_dict_names\
    \ <- sapply(dict_names, function(x) {return(is.character(x))})\n  if (all(string_dict_names))\
    \ {\n    return(all(tolower(dict_names) == dict_names) | all(toupper(dict_names)\
    \ == dict_names))\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  # dictionary\
    \ is empty\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  # check the\
    \ first character of the first key\n  first_char <- substr(names(dict)[1],1,1)\n\
    \  first_char <- toupper(first_char)\n  # check rest of characters in first key\n\
    \  first_key <- tolower(names(dict)[1])\n  # for all keys if first char is upper\
    \ case \n  if (first_char == \"A\") {\n    for (key in names(dict)) {\n      if\
    \ (tolower(key) != key) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n\
    \  } else {\n    for (key in names(dict)) {\n      if (toupper(key) != key) {\n\
    \        return(FALSE)\n      }\n    }\n    return(TRUE)\n  }\n}", "\n  # your\
    \ code here\n  keys <- names(dict)\n  is_lower <- all(as.character(keys) == tolower(as.character(keys)))\n\
    \  is_upper <- all(as.character(keys) == toupper(as.character(keys)))\n  return(is_lower\
    \ | is_upper)\n}\n ", "\n  # check if dict is empty\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  # check if all the keys are strings\n  if (is.character(names(dict))\
    \ == FALSE) {\n    return(FALSE)\n  }\n  # check if all the keys are in lower\
    \ case\n  if (all(nchar(names(dict)) == nchar(tolower(names(dict))))) {\n    return(TRUE)\n\
    \  }\n  # check if all the keys are in upper case\n  if (all(nchar(names(dict))\
    \ == nchar(toupper(names(dict))))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n    is_lower = is_upper = TRUE\n    lower_keys = upper_keys = c()\n \
    \   for (k in names(dict)) {\n        if (is.character(k)) {\n            if (is.na(k))\
    \ {\n                is_lower = is_upper = FALSE\n                break\n    \
    \        }\n            if (is_lower) {\n                if (all(k %in% lower_keys))\n\
    \                    is_lower = FALSE\n                else\n                \
    \    lower_keys = c(lower_keys, k)\n            }\n            if (is_upper) {\n\
    \                if (all(k %in% upper_keys))\n                    is_upper = FALSE\n\
    \                else\n                    upper_keys = c(upper_keys, k)\n   \
    \         }\n        } else {\n            is_lower = is_upper = FALSE\n     \
    \       break\n        }\n    }\n    is_lower\n}", "\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  # Check if first element is string\n  if (is.character(names(dict)[1]))\
    \ {\n    s <- str_to_lower(names(dict)[1])\n    # If first element is lowercase,\
    \ check if all following \n    # elements are lowercase\n    if (s == names(dict)[1])\
    \ {\n      for (i in 1:length(dict)) {\n        if (is.character(names(dict)[i]))\
    \ {\n          s <- str_to_lower(names(dict)[i])\n          if (s != names(dict)[i])\
    \ {\n            return(FALSE)\n          }\n        } else {\n          return(FALSE)\n\
    \        }\n      }\n      return(TRUE)\n    }\n    # If first element is uppercase,\
    \ check if all following \n    # elements are uppercase\n    if (s == str_to_upper(names(dict)[1]))\
    \ {\n      for (i in 1:length(dict)) {\n        if (is.character(names(dict)[i]))\
    \ {\n          s <- str_to_upper(names(dict)[i])\n          if (s != names(dict)[i])\
    \ {\n            return(FALSE)\n          }\n        } else {\n          return(FALSE)\n\
    \        }\n      }\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n", "\n\
    \    \n}\n ", "\n  # your code here\n}", "\n\tlower <- 0\n\tupper <- 0\n\tfor\
    \ (i in names(dict)) {\n\t\tif (is.na(i)) {\n\t\t\tnext\n\t\t}\n\t\tif (i == tolower(i))\
    \ {\n\t\t\tlower <- lower + 1\n\t\t} else if (i == toupper(i)) {\n\t\t\tupper\
    \ <- upper + 1\n\t\t} else {\n\t\t\treturn(FALSE)\n\t\t}\n\t}\n\tif (length(dict)\
    \ == 0) {\n\t\treturn(FALSE)\n\t}\n\tif (lower > 0 && upper > 0) {\n\t\treturn(FALSE)\n\
    \t}\n\treturn(TRUE)\n}\n", "\n    if(length(dict) == 0) {\n        return(FALSE)\n\
    \    } else {\n        key_types <- sapply(names(dict), class)\n        return(all(key_types\
    \ == \"character\"))\n    }\n}\n ", "\n  if (length(dict)==0) return(FALSE)\n\
    \  lc=TRUE\n  uc=TRUE\n  for (key in names(dict)) {\n    if (!is.character(key))\
    \ {\n      return(FALSE)\n    }\n    if (key!=tolower(key)) {\n      lc=FALSE\n\
    \    }\n    if (key!=toupper(key)) {\n      uc=FALSE\n    }\n  }\n  return(uc\
    \ || lc)\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  } else {\n\
    \    all_l <- sapply(names(dict), function(x) { x == tolower(x) })\n    all_u\
    \ <- sapply(names(dict), function(x) { x == toupper(x) })\n    return(all(all_l)\
    \ | all(all_u))\n  }\n}", "\n  # YOUR CODE HERE\n  is_all_lower = function(s)\
    \ {\n    return (tolower(s) == s)\n  }\n  is_all_upper = function(s) {\n    return\
    \ (toupper(s) == s)\n  }\n  all_keys = names(dict)\n  if (length(all_keys) ==\
    \ 0) {\n    return (FALSE)\n  }\n  for (key in all_keys) {\n    if (is.numeric(key))\
    \ {\n      return (FALSE)\n    }\n  }\n  if (is_all_lower(all_keys[1])) {\n  \
    \  for (key in all_keys) {\n      if (!is_all_lower(key)) {\n        return (FALSE)\n\
    \      }\n    }\n  } else if (is_all_upper(all_keys[1])) {\n    for (key in all_keys)\
    \ {\n      if (!is_all_upper(key)) {\n        return (FALSE)\n      }\n    }\n\
    \  } else {\n    return (FALSE)\n  }\n  return (TRUE)\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' =\
    \ 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n\
    \ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n", "\n  upper_key <-\
    \ 0\n  lower_key <- 0\n  for (key in names(dict)) {\n    if (is.string(key)) {\n\
    \      if (identical(key, toupper(key))) {\n        upper_key <- upper_key + 1\n\
    \      } else if (identical(key, tolower(key))) {\n        lower_key <- lower_key\
    \ + 1\n      }\n    }\n  }\n  if (length(dict) != 0) {\n    if (lower_key == length(dict)\
    \ || upper_key == length(dict)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  keys <- names(dict)\n  # if all keys are lower\
    \ case\n  if (all(str_detect(keys, \"[[:lower:]]\"))) {\n    return(TRUE)\n  }\n\
    \  # if all keys are upper case\n  if (all(str_detect(keys, \"[[:upper:]]\")))\
    \ {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  if(length(dict)==0)\n\
    \    return(FALSE)\n  \n  if(all(sapply(names(dict),function(x) all(strsplit(x,\
    \ '')[[1]] == toupper(strsplit(x, '')[[1]])))))\n    return(TRUE)\n  else if(all(sapply(names(dict),function(x)\
    \ all(strsplit(x, '')[[1]] == tolower(strsplit(x, '')[[1]])))))\n    return(TRUE)\n\
    \  else\n    return(FALSE)\n}\n\ndict <- list('Name' = 'John', 'Age' = '36', 'City'\
    \ = 'Houston')\n\ncheck_dict_case(dict)\n\ndict <- list('a' = 'apple', 'b' = 'banana')\n\
    \ncheck_dict_case(dict)\n\ndict <- list('a' = 'apple', 'A' = 'banana', 'B' = 'banana')\n\
    \ncheck_dict_case(dict)\n\ndict <- list('a' = 'apple', 8 = 'banana', 'a' = 'apple')\n\
    \ncheck_dict_case(dict)\n\ndict <- list('STATE' = 'NC', 'ZIP' = '12345')\n\ncheck_dict_case(dict)\n\
    \ndict <- list()\n\ncheck_dict_case(dict)\n", "\n    # use `return`\n}\n ", "\n\
    \  if (length(dict) == 0)\n    return(FALSE)\n  if (all(unlist(lapply(names(dict),\
    \ toupper)) == names(dict)))\n    return(TRUE)\n  if (all(unlist(lapply(names(dict),\
    \ tolower)) == names(dict)))\n    return(TRUE)\n  else return(FALSE)\n}\n", "\n\
    \  keys <- names(dict)\n  if (length(keys) == 0) return(FALSE)\n  up <- all(stringr::str_detect(keys,\
    \ \"[[:upper:]]\"))\n  down <- all(stringr::str_detect(keys, \"[[:lower:]]\"))\n\
    \  up | down\n}\n", "\n    # Check if the named list is empty, if empty return\
    \ FALSE\n    if (length(dict) == 0) {\n        return(FALSE)\n    }\n    # Create\
    \ vectors of keys, lower case keys, and upper case keys\n    keys <- names(dict)\n\
    \    lower <- tolower(keys)\n    upper <- toupper(keys)\n    # Check if all keys\
    \ are in lower case or upper case\n    return(all(keys == lower) | all(keys ==\
    \ upper))\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' =\
    \ '12345'))\n", "\n    for (k in names(dict)) {\n        if (sum(grepl(\"[[:upper:]]\"\
    , k)) == 0 | sum(grepl(\"[[:lower:]]\", k)) == 0) {\n            return(FALSE)\n\
    \        }\n    }\n    return(TRUE)\n}\n\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' =\
    \ 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  all_names <- names(dict)\n  if (any(all_names != tolower(all_names)))\
    \ {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  if (length(dict) == 1) {\n    return(TRUE)\n  }\n\
    \  all_lower <- !all(sapply(names(dict), function(x) {x != tolower(x)}))\n  all_upper\
    \ <- !all(sapply(names(dict), function(x) {x != toupper(x)}))\n  return(all_lower\
    \ | all_upper)\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n  if (length(dict) == 0) return(FALSE)\n  if (min(nchar(names(dict))) != max(nchar(names(dict))))\
    \ return(FALSE)\n  if (min(nchar(names(dict))) == 1) {\n    return(ifelse(min(names(dict))\
    \ >= 'a' & max(names(dict)) <= 'z', TRUE, FALSE))\n  } else {\n    return(ifelse(min(names(dict))\
    \ >= 'A' & max(names(dict)) <= 'Z', TRUE, FALSE))\n  }\n}", "\n    keys <- names(dict)\n\
    \    #check if empty list\n    if(length(keys) == 0) return(FALSE)\n    #check\
    \ if lower\n    if(all(is.na(match(keys, toupper(keys))))){\n        return(TRUE)\n\
    \    } else if(all(is.na(match(keys, tolower(keys))))){\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n  if(is.list(dict) == F)\
    \ {\n    return(\"Not a list\")\n  }\n  keys <- names(dict)\n  l <- length(keys)\n\
    \  lcase <- c()\n  ucase <- c()\n  if(l == 0) {\n    return(F)\n  }\n  for(i in\
    \ 1:l) {\n    if(is.na(match(keys[i], ucase))) {\n      if(is.na(match(keys[i],\
    \ lcase))) {\n        if(grepl(\"[[:upper:]]\", keys[i])) {\n          ucase <-\
    \ c(ucase, keys[i])\n        } else {\n          lcase <- c(lcase, keys[i])\n\
    \        }\n      }\n    }\n  }\n  if(length(ucase) > 0 & length(lcase) > 0) {\n\
    \    return(F)\n  } else {\n    return(T)\n  }\n}\n", "\n    if(length(dict) ==\
    \ 0) {\n        return(FALSE)\n    }\n    else {\n        lower <- all(sapply(names(dict),\
    \ function(x) x == tolower(x)))\n        upper <- all(sapply(names(dict), function(x)\
    \ x == toupper(x)))\n        if(lower | upper) {\n            return(TRUE)\n \
    \       }\n        else {\n            return(FALSE)\n        }\n    }\n}\ncheck_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' =\
    \ 'NC', 'ZIP' = '12345'))\n", "\n  if(length(dict) == 0) {\n    FALSE\n  } else\
    \ {\n    l_c <- tolower(names(dict))\n    u_c <- toupper(names(dict))\n    length(unique(names(dict)))\
    \ == length(unique(l_c)) || \n      length(unique(names(dict))) == length(unique(u_c))\n\
    \  }\n}", "\n  if (length(dict) == 0)\n    return(FALSE)\n  lower = 0\n  upper\
    \ = 0\n  for (key in names(dict)) {\n    if (identical(as.character(key), tolower(key)))\n\
    \      lower += 1\n    else if (identical(as.character(key), toupper(key)))\n\
    \      upper += 1\n    else\n      return(FALSE)\n  }\n  if (lower == 0 || upper\
    \ == 0)\n    return(TRUE)\n  return(FALSE)\n}\n", "\n    if(length(dict) == 0)\
    \ {\n        return(FALSE)\n    }\n    check_list <- c(0,0)\n    for(i in 1:length(dict))\
    \ {\n        if(is.character(names(dict)[i])) {\n            if(tolower(names(dict)[i])\
    \ == names(dict)[i]) {\n                check_list[1] = 1\n            }\n   \
    \         if(toupper(names(dict)[i]) == names(dict)[i]) {\n                check_list[2]\
    \ = 1\n            }\n        }\n    }\n    if(sum(check_list) == 1) {\n     \
    \   return(TRUE)\n    }\n    return(FALSE)\n}\n", "\n  if(length(dict) == 0) {\n\
    \    return(FALSE)\n  }\n  else {\n    lower_case <- TRUE\n    upper_case <- TRUE\n\
    \    for(element in names(dict)) {\n      if(!(grepl(\"^[a-z]+$\", element)))\
    \ {\n        lower_case <- FALSE\n      }\n      if(!(grepl(\"^[A-Z]+$\", element)))\
    \ {\n        upper_case <- FALSE\n      }\n    }\n    return(lower_case | upper_case)\n\
    \  }\n}\n", "\n  is_upper <- unlist(lapply(names(dict), function(x) is.upper.character(x)))\n\
    \  is_lower <- unlist(lapply(names(dict), function(x) is.lower.character(x)))\n\
    \  is_char <- unlist(lapply(names(dict), function(x) is.character(x)))\n  cond\
    \ <- length(dict) > 0 &\n    sum(is_upper) == length(dict) | sum(is_lower) ==\
    \ length(dict)\n  cond & sum(is_char) == length(dict)\n}\n", "\n  # returns FALSE\
    \ if the given list is empty\n  if (length(dict) == 0) return(FALSE)\n  \n  #\
    \ gets the keys in the list\n  keys <- names(dict)\n  \n  # gets the first key\
    \ in the list\n  firstKey <- keys[1]\n  \n  # gets the type of the first key\n\
    \  typeOfFirstKey <- typeof(firstKey)\n  \n  # returns FALSE if the type of the\
    \ first key is not a string\n  if (typeOfFirstKey != \"character\") return(FALSE)\n\
    \  \n  # gets the first character of the first key in the list\n  firstCharacterOfFirstKey\
    \ <- substr(firstKey, 1, 1)\n  \n  # checks if the first character of the first\
    \ key is upper case\n  firstCharacterIsUpperCase <- ifelse(firstCharacterOfFirstKey\
    \ == toupper(firstCharacterOfFirstKey), TRUE, FALSE)\n  \n  # returns FALSE if\
    \ the first character of the first key is neither upper case nor lower case\n\
    \  if (firstCharacterIsUpperCase == FALSE && firstCharacterOfFirstKey != tolower(firstCharacterOfFirstKey))\
    \ return(FALSE)\n  \n  # checks if the first character of the first key is upper\
    \ case\n  if (firstCharacterIsUpperCase) {\n    # creates a regular expression\
    \ to check if the keys are in upper case\n    regex <- \"^[A-Z]+$\"\n  } else\
    \ {\n    # creates a regular expression to check if the keys are in lower case\n\
    \    regex <- \"^[a-z]+$\"\n  }\n  \n  # checks if all the keys in the list match\
    \ the regular expression\n  if (all(keys %in% regmatches(keys, regexpr(regex,\
    \ keys)))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n ", "\n\
    \  # If dict is empty, return false\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  # Check for values that are not strings\n  for (i in names(dict)) {\n\
    \    if (!is.character(i)) {\n      return(FALSE)\n    }\n  }\n  # If all keys\
    \ are upper case, return true\n  if (all(grepl(\"^[A-Z]*$\", names(dict)))) {\n\
    \    return(TRUE)\n  }\n  # If all keys are lower case, return true\n  if (all(grepl(\"\
    ^[a-z]*$\", names(dict)))) {\n    return(TRUE)\n  }\n  # Otherwise, return false\n\
    \  return(FALSE)\n}\n ", "\n  keys <- dict.keys(dict)\n  return(identical(is.na(grep('[A-Z]',\
    \ keys)), is.na(grep('[a-z]', keys))))\n}\n", "\n  if(length(dict)==0) return(FALSE)\n\
    \  matches <- grepl(\"[A-Z]\",names(dict))\n  is_all_upper <- sum(matches)==length(matches)\n\
    \  is_all_lower <- sum(matches)==0\n  is_all_upper | is_all_lower\n}\n", "\n \
    \ c(\"Not Yet Implemented\")\n}\n \ncheck_dict_case(list('a' = 'apple', 'b' =\
    \ 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\
    \ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n ", "\n\t# check whether list is empty\n\tif (is.null(dict))\
    \ {\n\t\treturn(FALSE)\n\t}\n\t# check if keys are in lower or upper case\n\t\
    is.lower <- all(names(dict) == tolower(names(dict)))\n\tis.upper <- all(names(dict)\
    \ == toupper(names(dict)))\n\t# return TRUE if keys are in lower or upper case,\
    \ else return FALSE\n\tif (is.lower || is.upper) {\n\t\treturn(TRUE)\n\t} else\
    \ {\n\t\treturn(FALSE)\n\t}\n}\n", "\n    if (length(dict) == 0) return(FALSE)\n\
    \    keys <- names(dict)\n    #keys <- as.character(keys)\n    for (key in keys)\
    \ {\n        if (!is.character(key)) {\n            return(FALSE)\n        }\n\
    \    }\n    tolower(dict) == toupper(dict)\n}\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' =\
    \ 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n ", "\n  c <- character(0)\n  i <- integer(0)\n \
    \ names(dict) %>%\n    lapply(., is.character) %>%\n    unlist() %>%\n    which(.)\
    \ %>%\n    length %>%\n    {if(.) {c <- names(dict)[.]} else {i <- which(is.integer(names(dict)))}}\n\
    \  all(c %in% tolower(c)) | all(toupper(c) %in% c) | all(c %in% toupper(c)) |\n\
    \    all(tolower(c) %in% c) | all(i == integer(0))\n}\n", "\n  \n  # if named\
    \ list is empty return FALSE\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  \n  # create vectors to store keys that are upper and lower case\n  upper_case\
    \ <- vector()\n  lower_case <- vector()\n  \n  # loop through each key and put\
    \ it in the appropriate vector\n  for (key in names(dict)) {\n    if (key == toupper(key))\
    \ {\n      upper_case <- c(upper_case, key)\n    } else if (key == tolower(key))\
    \ {\n      lower_case <- c(lower_case, key)\n    }\n  }\n  \n  # if all keys are\
    \ upper or lower case return TRUE, else return FALSE\n  if (length(upper_case)\
    \ == length(dict) || length(lower_case) == length(dict)) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\ncheck_dict_case(list('a' = 'apple', 'b'\
    \ = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\
    check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' =\
    \ 'NC', 'ZIP' = '12345'))\n", "\n  # Create a vector containing the names of the\
    \ elements in the named list.\n  key_names <- names(dict)\n  # Create vectors\
    \ containing the number of lower and upper case \n  # characters in the string\
    \ vector.\n  # Use `is.na` to determine if the named list is empty.\n  is_empty\
    \ <- any(is.na(key_names))\n  # Use `str_length` to determine the number of lower\
    \ case characters\n  # in the string vector.\n  lower_case <- str_length(str_detect(key_names,\
    \ '[a-z]'))\n  # Use `str_length` to determine the number of upper case characters\n\
    \  # in the string vector.\n  upper_case <- str_length(str_detect(key_names, '[A-Z]'))\n\
    \  # If the named list is empty, return FALSE.\n  if (is_empty) {\n    return(FALSE)\n\
    \  } else {\n    # If all strings are lower case or all strings are upper case,\
    \ \n    # return TRUE, else return FALSE.\n    if (lower_case == length(key_names)\
    \ | upper_case == length(key_names)) {\n      return(TRUE)\n    } else {\n   \
    \   return(FALSE)\n    }\n  }\n}\n", "\n    # check for empty named list\n   \
    \ if(length(dict) == 0) {\n        return(FALSE)\n    }\n\n    # check for all\
    \ lower case\n    if(all(substr(names(dict), 1, 1) == substr(names(dict), 1, 1)))\
    \ {\n        return(TRUE)\n    }\n\n    # check for all upper case\n    if(all(substr(names(dict),\
    \ 1, 1) == toupper(substr(names(dict), 1, 1)))) {\n        return(TRUE)\n    }\n\
    \    \n    return(FALSE)\n}", "\n  keys <- names(dict)\n  if (length(keys) ==\
    \ 0) return(FALSE)\n  if (sum(!(tolower(keys) == keys)) == 0) return(TRUE)\n \
    \ if (sum(!(toupper(keys) == keys)) == 0) return(TRUE)\n  return(FALSE)\n}\n",
  "\n  if (length(dict) == 0) return(FALSE)\n  if (sum(sapply(names(dict), FUN = function(x)\
    \ typeof(x) != 'string')) != 0) {\n    return(FALSE)\n  }\n  return(all(names(dict)\
    \ == tolower(names(dict))) | \n           all(names(dict) == toupper(names(dict))))\n\
    }\n", "\n  # Your code here\n}\n", "\n  if (length(dict) == 0) return(FALSE)\n\
    \  if (!is.named(dict)) return(FALSE)\n  if (any(!is.character(names(dict))))\
    \ return(FALSE)\n  if (all(is.character(names(dict)) & tolower(names(dict)) ==\
    \ names(dict))) return(TRUE)\n  if (all(is.character(names(dict)) & toupper(names(dict))\
    \ == names(dict))) return(TRUE)\n  return(FALSE)\n}\n", "\n  keys <- names(dict)\n\
    \  if (length(keys) == 0) return(FALSE)\n  is_lower <- keys == tolower(keys)\n\
    \  is_upper <- keys == toupper(keys)\n  all(is_lower) || all(is_upper)\n}\n\n\
    check_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n    if (length(dict) == 0) {\n        return(FALSE)\n    }\n    first_key <-\
    \ names(dict)[1]\n    if (typeof(first_key) != 'character') {\n        return(FALSE)\n\
    \    }\n    for (key in names(dict)) {\n        if (typeof(key) != 'character')\
    \ {\n            return(FALSE)\n        }\n        if (key != first_key) {\n \
    \           return(FALSE)\n        }\n    }\n    return(TRUE)\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n    if(length(dict) == 0) return(FALSE)\n \
    \   is_lower <- is.lower(names(dict))\n    is_upper <- is.upper(names(dict))\n\
    \    all(is_lower) || all(is_upper)\n}\n", "\n    \n    checker <- function(dict){\n\
    \        #is.character(names(dict))\n        #is.na(names(dict))\n        #!all(names(dict)\
    \ %in% c(letters, LETTERS))\n        #is.null(dict)\n        #length(dict) ==\
    \ 0\n        if(all(names(dict) %in% c(letters, LETTERS)) | is.null(dict) | length(dict)\
    \ == 0){\n            return (TRUE)\n        }\n        return (FALSE)\n    }\n\
    \    \n    dict_names <- names(dict)\n    dict_names_upper <- toupper(dict_names)\n\
    \    dict_names_lower <- tolower(dict_names)\n    \n    checker(dict) & checker(dict_names)\
    \ & checker(dict_names_upper) & checker(dict_names_lower)\n}\n", "\n  list_names\
    \ = names(dict)\n  is_upper = all(list_names == tolower(list_names))\n  is_lower\
    \ = all(list_names == toupper(list_names))\n  return(is_upper | is_lower)\n}\n",
  "\n  all(sapply(dict, function(x) x)) \n}\n\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' =\
    \ 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  if(length(dict) == 0)\n    return(FALSE)\n\
    \  else {\n    all_lower <- TRUE\n    all_upper <- TRUE\n    for(i in names(dict))\
    \ {\n      if(!is.character(i)) {\n        return(FALSE)\n      }\n      else\
    \ {\n        if(i != tolower(i)) {\n          all_lower <- FALSE\n        }\n\
    \        if(i != toupper(i)) {\n          all_upper <- FALSE\n        }\n    \
    \  }\n    }\n    return(all_lower | all_upper)\n  }\n}\n", "\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  # check if all keys are upper case\n  if\
    \ (all(sapply(names(dict), toupper) == names(dict))) {\n    return(TRUE)\n  }\n\
    \  # check if all keys are lower case\n  if (all(sapply(names(dict), tolower)\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n    if(length(dict)\
    \ == 0) {\n        return(FALSE)\n    } else {\n        keys <- names(dict)\n\
    \        all_lower <- !any(grepl('[[:upper:]]', keys))\n        all_upper <- !any(grepl('[[:lower:]]',\
    \ keys))\n        return(all_lower | all_upper)\n    }\n}\n", "\n  keys <- names(dict)\n\
    \  if (length(keys) == 0) {\n    return(FALSE)\n  }\n  lc <- toupper(keys) ==\
    \ keys\n  if (all(lc)) {\n    return(TRUE)\n  }\n  uc <- tolower(keys) == keys\n\
    \  if (all(uc)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n    # Your code here\n}\n \n    ", "\n  n <-\
    \ length(dict)\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (is.null(dict))\
    \ {\n    return(FALSE)\n  }\n  for (k in names(dict)) {\n    if (!is.character(k))\
    \ {\n      return(FALSE)\n    }\n    if (length(k) == 0) {\n      return(FALSE)\n\
    \    }\n    if (any(k == toupper(k))) {\n      if (any(k == tolower(k))) {\n \
    \       return(FALSE)\n      }\n    } else {\n      if (any(k == toupper(k)))\
    \ {\n        return(FALSE)\n      }\n    }\n  }\n  return(TRUE)\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  \n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  \n  if (length(names(dict)) > 0) {\n    lower_chars <- grepl(\"[a-z]\"\
    , names(dict))\n    upper_chars <- grepl(\"[A-Z]\", names(dict))\n    \n    if\
    \ (all(lower_chars) | all(upper_chars)) {\n      return(TRUE)\n    }\n  }\n  \n\
    \  return(FALSE)\n}\n\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\
    check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\n", "\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ if( all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  else\
    \ if( all(names(dict) == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  else\
    \ {\n    return(FALSE)\n  }\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\
    check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\n", "\n    if (length(dict) == 0) {\n        return(FALSE)\n   \
    \ } else {\n        if (all(sapply(names(dict), function(x) identical(all(strsplit(x,\
    \ \"\")[[1]], USE.NAMES = FALSE) %in% c(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"), FALSE), TRUE))\
    \ | all(sapply(names(dict), function(x) identical(all(strsplit(x, \"\")[[1]],\
    \ USE.NAMES = FALSE) %in% c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"\
    H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"\
    S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"), FALSE), TRUE))) {\n   \
    \         return(TRUE)\n        } else {\n            return(FALSE)\n        }\n\
    \    }\n}\n", "\n    keys <- names(dict)\n    if (length(keys)==0) {\n       \
    \ return(FALSE)\n    }\n    first_char <- substr(keys[1], 1, 1)\n    if (is.na(first_char))\
    \ {\n        return(FALSE)\n    }\n    if (first_char==first_char) {\n       \
    \ for (key in keys) {\n            if (key!=key) {\n                return(FALSE)\n\
    \            }\n        }\n    } else {\n        for (key in keys) {\n       \
    \     if (key!=tolower(key)) {\n                return(FALSE)\n            }\n\
    \        }\n    }\n    return(TRUE)\n}\ncheck_dict_case(list('a' = 'apple', 'b'\
    \ = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\
    check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' =\
    \ 'NC', 'ZIP' = '12345'))\n", "\n  if(length(dict)==0) return(FALSE) #if empty\n\
    \  else if(any(is.na(names(dict)))) return(FALSE) #if any key is NA\n  else if(any(!(is.na(grep(\"\
    [A-Z]\", names(dict)))))) {\n    if(any(!(is.na(grep(\"[a-z]\", names(dict))))))\
    \ return(FALSE) #if mixed\n    else return(TRUE) #if all upper case\n  }\n  else\
    \ if(any(!(is.na(grep(\"[a-z]\", names(dict)))))) return(TRUE) #if all lower case\n\
    \  else return(FALSE) #if neither upper case nor lower case\n}\n", "\n  # Initialize\
    \ variables\n  if (length(dict) == 0) return(FALSE)\n  all_lower <- FALSE\n  all_upper\
    \ <- FALSE\n  # Extract the keys from the dictionary\n  keys <- names(dict)\n\
    \  # If all keys are upper case\n  if (all(toupper(keys) == keys)) all_upper <-\
    \ TRUE\n  # If all keys are lower case\n  if (all(tolower(keys) == keys)) all_lower\
    \ <- TRUE\n  # If keys are all upper case OR all lower case\n  if (all_upper ||\
    \ all_lower) return(TRUE)\n  return(FALSE)\n}\n\ncheck_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' =\
    \ 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n ", "\n    if (length(dict) == 0)\n        return(FALSE)\n\
    \    if (length(dict) == 1)\n        return(TRUE)\n    keys <- names(dict)\n \
    \   case_up <- TRUE\n    case_low <- TRUE\n    for (i in keys) {\n        if (is.numeric(i))\n\
    \            return(FALSE)\n        else if (is.character(i)) {\n            if\
    \ (is.element(i, toupper(keys)))\n                case_up <- FALSE\n         \
    \   if (is.element(i, tolower(keys)))\n                case_low <- FALSE\n   \
    \     }\n    }\n    if (case_up || case_low)\n        return(TRUE)\n    else\n\
    \        return(FALSE)\n}\n", "\n    \n    return(all(length(grep(\"[A-Z]\", names(dict)))\
    \ == 0) | all(length(grep(\"[a-z]\", names(dict))) == 0))\n    \n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  # MY CODE HERE\n  for (key in names(dict))\
    \ {\n    if (all(grepl(\"[A-Z]\", key, perl = TRUE))) {\n      return(TRUE)\n\
    \    } else if (all(grepl(\"[a-z]\", key, perl = TRUE))) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  }\n}\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  is_lower <- all(lapply(dict, is.lower))\n\
    \  is_upper <- all(lapply(dict, is.upper))\n  return(is_lower || is_upper)\n}",
  "\n  # if the list is empty, return FALSE\n  if (length(dict) == 0) return(FALSE)\n\
    \  # check if all keys are strings\n  if (!all(sapply(dict, inherits, \"character\"\
    ))) return(FALSE)\n  # check if all keys are in lower case\n  if (all(sapply(dict,\
    \ tolower) == names(dict))) return(TRUE)\n  # check if all keys are in upper case\n\
    \  if (all(sapply(dict, toupper) == names(dict))) return(TRUE)\n  # otherwise\
    \ return FALSE\n  return(FALSE)\n}\nprint(check_dict_case(list('a' = 'apple',\
    \ 'b' = 'banana')))\nprint(check_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana')))\nprint(check_dict_case(list('a' = 'apple', 8 = 'banana', 'a'\
    \ = 'apple')))\nprint(check_dict_case(list('Name' = 'John', 'Age' = '36', 'City'\
    \ = 'Houston')))\nprint(check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345')))\n\
    print(check_dict_case(list()))\n", "\n  \n  # If the length of the named list\
    \ is 0, then return FALSE.\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n\
    \  \n  # Check if keys are strings in lower case.\n  check_lower <- all(x = unlist(strsplit(dict,\
    \ split = \"\")), FUN = function(x) x %in% letters | x == \" \")\n  \n  # Check\
    \ if keys are strings in upper case.\n  check_upper <- all(x = unlist(strsplit(dict,\
    \ split = \"\")), FUN = function(x) x %in% LETTERS | x == \" \")\n  \n  # Check\
    \ if any cases are true.\n  if (check_lower == TRUE | check_upper == TRUE) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  keys <- names(dict)\n  if (length(keys) ==\
    \ 0)\n    return(FALSE)\n  else {\n    ucase <- toupper(keys)\n    if (all(keys\
    \ == ucase))\n      return(TRUE)\n    else {\n      lcase <- tolower(keys)\n \
    \     if (all(keys == lcase))\n        return(TRUE)\n      else \n        return(FALSE)\n\
    \    }\n  }\n}\n", "\n  # check if dictionary is empty, if yes then return FALSE\n\
    \  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  # check if all characters\
    \ in keys are lower case and store in a variable\n  lower_keys = all(x = str_split(dict,\
    \ \"\")[[1]][,1] ==\n                     str_to_lower(str_split(dict, \"\")[[1]][,1]))\n\
    \  # check if all characters in keys are upper case and store in a variable\n\
    \  upper_keys = all(x = str_split(dict, \"\")[[1]][,1] ==\n                  \
    \   str_to_upper(str_split(dict, \"\")[[1]][,1]))\n  # return TRUE if one of the\
    \ previous cases are TRUE\n  return(lower_keys | upper_keys)\n}", "\n  # Create\
    \ a vector of all the keys in the named list, convert to characters and make a\
    \ copy of it.\n  str.keys <- as.character(names(dict))\n  check.keys <- str.keys\n\
    \  # If any keys contain non-alphabetic characters, return FALSE.\n  if (any(grepl(\"\
    [^[:alpha:]]\", check.keys))) {\n    return(FALSE)\n  }\n  # If all keys contain\
    \ lower case characters, convert the characters in \n  # the copy of the key vector\
    \ to upper case and return TRUE if both character vectors are equal.\n  if (all(str_detect(str.keys,\
    \ fixed(\"[a-z]\")))) {\n    check.keys <- toupper(check.keys)\n    if (str.keys\
    \ == check.keys) {\n      return(TRUE)\n    }\n  }\n  # If all keys contain upper\
    \ case characters, convert the characters in \n  # the copy of the key vector\
    \ to lower case and return TRUE if both character vectors are equal.\n  if (all(str_detect(str.keys,\
    \ fixed(\"[A-Z]\")))) {\n    check.keys <- tolower(check.keys)\n    if (str.keys\
    \ == check.keys) {\n      return(TRUE)\n    }\n  }\n  # Otherwise, return FALSE.\n\
    \  return(FALSE)\n}\n", "\n  if(length(dict)==0) return(FALSE)\n  else return(length(unlist(lapply(dict,function(x)\
    \ { if(is.na(x)) return(\"NA\") else return(x) })))==0)\n}", "\n  # dict: a named\
    \ list\n  check_lower <- function(x) {\n    !is.na(x) && x == tolower(x)\n  }\n\
    \  check_upper <- function(x) {\n    !is.na(x) && x == toupper(x)\n  }\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  res <- Reduce(`&`, lapply(names(dict), check_lower))\n\
    \  res_upper <- Reduce(`&`, lapply(names(dict), check_upper))\n  return(res |\
    \ res_upper)\n}\n", "\n  # Your code goes here\n}\n", "\n  # solution here\n}\n\
    library(testthat)\ntest_that('Solution is correct', {\n    expect_true(check_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana')))\n    expect_false(check_dict_case(list('a' = 'apple',\
    \ 'A' = 'banana', 'B' = 'banana')))\n    expect_false(check_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple')))\n    expect_false(check_dict_case(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')))\n    expect_true(check_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')))\n    expect_false(check_dict_case(list()))\n    })\n\
    print(\"Success!\")\n \n", "\n  lower <- sapply(names(dict), function(x) x ==\
    \ tolower(x))\n  upper <- sapply(names(dict), function(x) x == toupper(x))\n \
    \ if(all(lower)) return(TRUE)\n  if(all(upper)) return(TRUE)\n  return(FALSE)\n\
    }\n", "\n  \n  if (length(dict) == 0) {\n    return(FALSE)\n  } else {\n    if\
    \ (length(dict) == 1) {\n      return(TRUE)\n    } else {\n      if (is.character(names(dict)[1]))\
    \ {\n        if (is.lower.character(names(dict)[1])) {\n          for (name in\
    \ names(dict)) {\n            if (!is.lower.character(name)) {\n             \
    \ return(FALSE)\n            }\n          }\n          return(TRUE)\n        }\
    \ else {\n          for (name in names(dict)) {\n            if (!is.upper.character(name))\
    \ {\n              return(FALSE)\n            }\n          }\n          return(TRUE)\n\
    \        }\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' =\
    \ 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n\
    \ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n\ncheck_dict_case(list())\n",
  "\n  n <- length(dict)\n  if (n == 0) {\n    FALSE\n  } else {\n    k <- names(dict)\n\
    \    upper <- all(tolower(k) == k)\n    lower <- all(toupper(k) == k)\n    return(upper\
    \ || lower)\n  }\n}", "\n  upper <- sapply(names(dict), function(x) is.na(x) ||\
    \ !x %in% c(letters, LETTERS))\n  lower <- sapply(names(dict), function(x) is.na(x)\
    \ || !x %in% c(letters, LETTERS))\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  } else if (sum(upper) == 0) {\n    return(TRUE)\n  } else if (sum(lower) ==\
    \ 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n    if(!any(names(dict)))\
    \ return(FALSE)\n    if(identical(tolower(names(dict)),names(dict))) return(TRUE)\n\
    \    if(identical(toupper(names(dict)),names(dict))) return(TRUE)\n    return(FALSE)\n\
    }", "\n    return(TRUE)\n}\n", "\n  lc <- TRUE\n  uc <- TRUE\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  names(dict) %>% \n    {\n      for (name\
    \ in .) {\n        if (is.character(name)) {\n          if (name != tolower(name))\
    \ {\n            lc <- FALSE\n          }\n          if (name != toupper(name))\
    \ {\n            uc <- FALSE\n          }\n        } else {\n          return(FALSE)\n\
    \        }\n      }\n    }\n  return(lc || uc)\n}\n", "\n  cases <- sapply(names(dict),\
    \ function(name) substr(name, 1, 1))\n  cases <- as.factor(cases)\n  if(length(dict)\
    \ == 0) { return(FALSE) }\n  if(length(levels(cases)) == 1) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (length(dict) == 0) {\n   \
    \ return(FALSE)\n  }\n  lower_case <- TRUE\n  upper_case <- TRUE\n  for (i in\
    \ names(dict)) {\n    if (is.na(i)) {\n      return(FALSE)\n    }\n    if (i !=\
    \ tolower(i)) {\n      lower_case <- FALSE\n    }\n    if (i != toupper(i)) {\n\
    \      upper_case <- FALSE\n    }\n  }\n  return(lower_case | upper_case)\n}\n\
    \ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n  test_lst <- strsplit(names(dict), split = '')\n  test_lst <- unlist(test_lst)\n\
    \  upper <- which(test_lst == test_lst)\n  lower <- which(test_lst == tolower(test_lst))\n\
    \  if (length(upper) == length(test_lst) | length(lower) == length(test_lst))\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
