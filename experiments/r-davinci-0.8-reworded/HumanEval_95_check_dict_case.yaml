name: HumanEval_95_check_dict_case
language: r
prompt: "# Given a named list, return TRUE if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return FALSE.\n# The function should\
  \ return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a'\
  \ = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John',\
  \ 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE'\
  \ = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {"
tests: "test_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
  \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
  \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
  \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n\t# Student code here\n\t\n\t\n\t# End student code here\n}\n ",
  "\n  s <- c()\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  else {\n    for\
    \ (key in names(dict)) {\n      s <- c(s, all(str_detect(key, '[a-z]')))\n   \
    \ }\n    if (any(s)) {\n      return(all(s))\n    }\n    else {\n      return(FALSE)\n\
    \    }\n  }\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' =\
    \ '12345'))\n", "\n  is_lower <- FALSE\n  is_upper <- FALSE\n  for (key in names(dict))\
    \ {\n    if (!is.character(key)) {\n      return(FALSE)\n    }\n    is_lower <-\
    \ is_lower || is.lower(key)\n    is_upper <- is_upper || is.upper(key)\n  }\n\
    \  is_lower && !is_upper || !is_lower && is_upper\n}\n", "\n  \n  # Check if dict\
    \ is empty\n  if (length(dict) == 0) return(FALSE)\n  \n  # Check for a single\
    \ case\n  if (is.upper.character(names(dict))) return(TRUE)\n  if (is.lower.character(names(dict)))\
    \ return(TRUE)\n  \n  # If neither case then return FALSE\n  return(FALSE)\n}\n\
    \ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a'\
    \ = 'apple', 'A' = 'banana', 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple',\
    \ 8 = 'banana', 'a' = 'apple'))\ncheck_dict_case(list('Name' = 'John', 'Age' =\
    \ '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n",
  "\n  dict_keys <- names(dict)\n  if (length(dict_keys) == 0) {\n    return(FALSE)\n\
    \  }\n  # convert to upper or lower case\n  upper_keys <- str_to_upper(dict_keys)\n\
    \  lower_keys <- str_to_lower(dict_keys)\n  # check if all upper or lower case\
    \ keys\n  is_upper <- all(dict_keys == upper_keys)\n  is_lower <- all(dict_keys\
    \ == lower_keys)\n  # return logical\n  return(is_upper | is_lower)\n}\n", "\n\
    \    # implement your function here...\n}\n ", "\n  all(names(dict) == tolower(names(dict)))\
    \ ||\n    all(names(dict) == toupper(names(dict)))\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n    \n}\n", "\n  ## input validation ##\n \
    \ ## write your code here\n  if(dict == NULL)\n    return(FALSE)\n  if(length(dict)\
    \ == 0)\n    return(FALSE)\n  if(length(dict) == 1)\n    return(TRUE)\n  ## checking\
    \ if all keys are strings in lower case or all keys are strings in upper case\
    \ ##\n  ## write your code here\n  x <- names(dict)\n  y <- sapply(x, function(z)\
    \ tolower(z))\n  all(x == y) || all(x == toupper(y))\n}\n\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n\ncheck_dict_case(list())\n", "\n    if (length(dict)==0)\
    \ {\n        return(FALSE)\n    }\n    if (is.null(dict)) {\n        return(FALSE)\n\
    \    }\n    if (is.character(names(dict))) {\n        if (all(names(dict) %in%\
    \ tolower(names(dict)))) {\n            return(TRUE)\n        }\n        if (all(names(dict)\
    \ %in% toupper(names(dict)))) {\n            return(TRUE)\n        }\n    }\n\
    \    return(FALSE)\n}\n \n", "\n  # YOUR CODE HERE\n  if(length(dict) == 0)\n\
    \    return(FALSE)\n  return(all(sapply(names(dict), function(x) {\n    if(all(charToRaw(x)\
    \ >= 97) && all(charToRaw(x) <= 122)) {\n      return(TRUE)\n    } else if(all(charToRaw(x)\
    \ >= 65) && all(charToRaw(x) <= 90)) {\n      return(TRUE)\n    } else {\n   \
    \   return(FALSE)\n    }\n  })))\n}\n \n", "\n    if (length(dict)==0) {\n   \
    \     return(FALSE)\n    }\n    all_lower_case <- TRUE\n    all_upper_case <-\
    \ TRUE\n    for (i in names(dict)) {\n        if ( !(all_lower_case & !is.na(all_lower_case))\
    \ ) {\n            return(FALSE)\n        }\n        if ( !(all_upper_case & !is.na(all_upper_case))\
    \ ) {\n            return(FALSE)\n        }\n        if ( !is.character(i) ) {\n\
    \            return(FALSE)\n        }\n        if ( !all_lower_case ) {\n    \
    \        all_lower_case <- !is.na(match(i, tolower(i)))\n        }\n        if\
    \ ( !all_upper_case ) {\n            all_upper_case <- !is.na(match(i, toupper(i)))\n\
    \        }\n    }\n    return(all_lower_case | all_upper_case)\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  # check if dictionary is empty\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  # get all the keys\n  keys <- names(dict)\n\
    \  # check if the first key is lower\n  if (is.lower(keys[1])) {\n    # check\
    \ if all the keys are lower\n    if (sum(is.lower(keys)) == length(keys)) {\n\
    \      return(TRUE)\n    }\n  }\n  # check if the first key is upper\n  if (is.upper(keys[1]))\
    \ {\n    # check if all the keys are upper\n    if (sum(is.upper(keys)) == length(keys))\
    \ {\n      return(TRUE)\n    }\n  }\n  # if none of the above are true, return\
    \ false\n  return(FALSE)\n}\n", "\n  if (is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  el <- 0\n  el1 <- 0\n  el2 <- 0\n  for (i in dict) {\n    if (is.character(i))\
    \ {\n      el <- el + 1\n    }\n    if (i %in% toupper(i)) {\n      el1 <- el1\
    \ + 1\n    }\n    if (i %in% tolower(i)) {\n      el2 <- el2 + 1\n    }\n  }\n\
    \  if (el1 == length(dict) | el2 == length(dict)) {\n    return(TRUE)\n  }\n \
    \ else {\n    return(FALSE)\n  }\n}\n ", "\n  #write code to complete this function\n\
    \  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  lower_case <- c()\n  upper_case\
    \ <- c()\n  for(key in names(dict)) {\n    if(is.na(key)) {\n      return(FALSE)\n\
    \    }\n    if(all(is.lower(key))) {\n      lower_case <- c(lower_case, key)\n\
    \    } else if(all(is.upper(key))) {\n      upper_case <- c(upper_case, key)\n\
    \    } else {\n      return(FALSE)\n    }\n  }\n  if(length(lower_case) > 0 &&\
    \ length(upper_case) > 0) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\ncheck_dict_case(list('a'\
    \ = 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n", "\n  names <- names(dict)\n  if (length(names)\
    \ == 0) {\n    return(FALSE)\n  }\n  first_name <- names[1]\n  if (first_name\
    \ %in% c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'))\
    \ {\n    for (n in names) {\n      if (n %in% c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\
    \ {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  } else if (first_name\
    \ %in% c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\
    \ {\n    for (n in names) {\n      if (n %in% c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'))\
    \ {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  } else {\n   \
    \ return(FALSE)\n  }\n}\n", "\n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  upper_case <- logical(length(dict))\n  lower_case <- logical(length(dict))\n\
    \  for(i in 1:length(dict)) {\n    upper_case[i] <- is.character(names(dict)[i])\
    \ & all(names(dict)[i] %in% letters) & all(names(dict)[i] == toupper(names(dict)[i]))\n\
    \    lower_case[i] <- is.character(names(dict)[i]) & all(names(dict)[i] %in% letters)\
    \ & all(names(dict)[i] == tolower(names(dict)[i]))\n  }\n  return(all(upper_case)\
    \ | all(lower_case))\n}\ncheck_dict_case(list('a' = 'apple', 'b' = 'banana'))\n\
    \ncheck_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n\ncheck_dict_case(list('a'\
    \ = 'apple', 8 = 'banana', 'a' = 'apple'))\n\ncheck_dict_case(list('Name' = 'John',\
    \ 'Age' = '36', 'City' = 'Houston'))\n\ncheck_dict_case(list('STATE' = 'NC', 'ZIP'\
    \ = '12345'))\n", "\n    if (length(dict) == 0) {\n        return(FALSE)\n   \
    \ }\n    return(all(is.na(grep(\"[[:upper:]]\", names(dict)))))\n}\n", "\n  #\
    \ Create a boolean vector that represents whether or not the keys are\n  # all\
    \ lower case.\n  lower_case <- all(sapply(names(dict), function(x) x == tolower(x)))\n\
    \  # Create a boolean vector that represents whether or not the keys are\n  #\
    \ all upper case.\n  upper_case <- all(sapply(names(dict), function(x) x == toupper(x)))\n\
    \  # Return whether or not the keys are all lower case OR upper case\n  return(lower_case\
    \ | upper_case)\n}\n", "\n  # Your code here\n}\n\ncheck_dict_case(list('a' =\
    \ 'apple', 'b' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 'A' = 'banana',\
    \ 'B' = 'banana'))\ncheck_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n\
    check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\ncheck_dict_case(list('STATE'\
    \ = 'NC', 'ZIP' = '12345'))\n "]
stop_tokens:
- "\n#"
- "\n```"
