name: HumanEval_80_is_happy
language: r
prompt: "# You are given a string s.\n# Your task is to check if the string is hapr\
  \ or not.\n# A string is hapr if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy(a)\n# FALSE\n# >>> is_happy(aa)\n\
  # FALSE\n# >>> is_happy(abcd)\n# TRUE\n# >>> is_happy(aabb)\n# FALSE\n# >>> is_happy(adb)\n\
  # TRUE\n# >>> is_happy(xyy)\n# FALSE\nis_happy <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- is_happy\n    if(!identical(candidate('a'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('aa'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('abcd'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('aabb'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('adb'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('xyy'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('iopaxpoi'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('iopaxioi'), FALSE)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  if (nchar(s) < 3) {\n    return(FALSE)\n  }\n  else {\n    for\
    \ (i in 1:(nchar(s)-2)) {\n      if (substr(s, i, i) == substr(s, i+1, i+1) |\
    \ substr(s, i, i) == substr(s, i+2, i+2) | substr(s, i+1, i+1) == substr(s, i+2,\
    \ i+2)) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  }\n}\n ",
  "\n  ## YOUR CODE HERE\n  if(nchar(s) < 3) return(FALSE)\n  else{\n    i = 1\n \
    \   while(i < nchar(s)-1){\n      if(substr(s,i,i+2)==substr(s,i+1,i+3))\n   \
    \     return(FALSE)\n      i = i + 1\n    }\n    return(TRUE)\n  }\n}\n", "\n\
    \    # your code here\n    s = as.character(s)\n    if(nchar(s) < 3) {\n     \
    \   return(FALSE)\n    }\n    for(i in 3:nchar(s)) {\n        if(substr(s, i-2,\
    \ i) == substr(s, i-1, i+1)) {\n            return(FALSE)\n        }\n    }\n\
    \    return(TRUE)\n}\n ", "\n  if (nchar(s) < 3) return(FALSE)\n  if (isTRUE(anyDuplicated(strsplit(s,\
    \ '')[[1]]))) return(FALSE)\n  return(TRUE)\n}\nis_happy(a)\nis_happy(aa)\nis_happy(abcd)\n\
    is_happy(aabb)\nis_happy(adb)\nis_happy(xyy)\n", "\n  len <- nchar(s)\n  if (len\
    \ < 3) {\n    return(FALSE)\n  }\n  for (i in 1:(len - 2)) {\n    if (substr(s,\
    \ i, i + 2) == substr(s, i + 1, i + 3)) {\n      return(FALSE)\n    }\n  }\n \
    \ return(TRUE)\n}\n\ntest <- function(test_case, expected) {\n  if (is_happy(test_case)\
    \ == expected) {\n    print(paste(\"Passed: \", test_case))\n  } else {\n    print(paste(\"\
    Failed: \", test_case))\n  }\n}\n\ntest(\"a\", FALSE)\ntest(\"aa\", FALSE)\ntest(\"\
    abcd\", TRUE)\ntest(\"aabb\", FALSE)\ntest(\"adb\", TRUE)\ntest(\"xyy\", FALSE)\n",
  "\n    # YOUR CODE HERE\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "\n  # Do your magic\
    \ here\n}\nis_happy(\"aa\")\nis_happy(\"abcd\")\nis_happy(\"aabb\")\nis_happy(\"\
    adb\")\nis_happy(\"xyy\")\n ", "\n  if(nchar(s) < 3) {\n    return(FALSE)\n  }\n\
    \  # solution 1\n  # ifelse(length(s) < 3, FALSE, !any(duplicated(substring(s,\
    \ 1:3))))\n  for(i in 1:(nchar(s) - 2)) {\n    if(substring(s, i, i + 2) == substring(s,\
    \ i + 1, i + 3)) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\ncat(\"\
    # c. ifelse()\\n\")\nifelse_test <- list(\n  list(input = 'a', output = FALSE),\n\
    \  list(input = 'aa', output = FALSE),\n  list(input = 'abcd', output = TRUE),\n\
    \  list(input = 'aabb', output = FALSE),\n  list(input = 'adb', output = TRUE),\n\
    \  list(input = 'xyy', output = FALSE)\n)\nresult <- lapply(ifelse_test, function(x)\
    \ is_happy(x$input) == x$output)\ncat(ifelse(all(unlist(result)), \"Correct\"\
    , \"Incorrect\"))\n", "\n  # You can write your solution here\n  # check input\n\
    \  if (is.na(s)) {\n    return(\"Type a string!\")\n  }\n  if (! is.character(s))\
    \ {\n    return(\"Type a string!\")\n  }\n  if (length(s) < 3) {\n    return(FALSE)\n\
    \  }\n  # get all 3 consecutive combinations\n  all.comb <- combn(x = s, m = 3,\
    \ simplify = FALSE)\n  # check if all combinations have three distinct letters\n\
    \  test.results <- lapply(all.comb, function(x) all(rle(x)$lengths == 1))\n  #\
    \ return TRUE if all combinations have three distinct letters\n  return(all(test.results))\n\
    }\n", "\n  if (length(s) < 3)\n    return(FALSE)\n  else\n    for (i in 1:(length(s)-2))\n\
    \      if (s[i] == s[i+1] | s[i] == s[i+2] | s[i+1] == s[i+2])\n        return(FALSE)\n\
    \  return(TRUE)\n}\n", "\n  s <- strsplit(s, \"\")[[1]]\n  length(s) >= 3 &&\n\
    \    !any(table(s) > 1)\n}\n\n", "\n  # You code goes here\n}", "\n  # This function\
    \ takes a string s and returns TRUE if it is happy and FALSE otherwise\n  # It\
    \ first checks if s is a string with at least 3 letters, and if not returns FALSE\n\
    \  # If s is 3 letters or more, it creates a vector of 3 consecutive letters\n\
    \  # If this vector has more than 1 unique letter, it continues to the next group\
    \ of 3 letters\n  # If it finds two identical groups of 3 letters, it returns\
    \ FALSE\n  # If all the groups of 3 letters are unique, it returns TRUE\n  # I\
    \ have included checks to ensure that the vector is correct\n  # This function\
    \ is case sensitive\n  if (length(s) < 3) {\n    return(FALSE)\n  }\n  else {\n\
    \    i <- 1\n    groups <- list()\n    while (length(s) - i > 2) {\n      groups[[i]]\
    \ <- substring(s, i, i + 2)\n      i <- i + 1\n    }\n    length(groups)\n   \
    \ if (length(unique(groups)) < length(groups)) {\n      return(FALSE)\n    }\n\
    \    else {\n      return(TRUE)\n    }\n  }\n}\n", "\n    if (nchar(s) < 3)\n\
    \        return(FALSE)\n    else {\n        for (i in 1:(nchar(s)-2)) {\n    \
    \        if (substr(s, i, i+2) == substr(s, i+1, i+3))\n                return(FALSE)\n\
    \        }\n        return(TRUE)\n    }\n}\n", "\n  if (length(s) < 3) {\n   \
    \ FALSE\n  } else {\n    ss <- strsplit(s, \"\")[[1]]\n    sapply(1:(length(ss)\
    \ - 2), function(i) ss[i] != ss[i + 1] && ss[i + 1] != ss[i + 2] && ss[i] != ss[i\
    \ + 2])\n  }\n}\n\nis_happy(s)\n\nx <- \"abcd\"", "\n  s <- unlist(strsplit(s,\
    \ ''))\n  length(s) >= 3 && length(unique(s)) == length(s)\n}", "\n  if (nchar(s)\
    \ < 3) {\n    return(FALSE)\n  }\n  else if (nchar(s) >= 3) {\n    for (i in 3:nchar(s))\
    \ {\n      if (substr(s, i-2, i) == substr(s, i-1, i)) {\n        return(FALSE)\n\
    \      }\n    }\n    return(TRUE)\n  }\n}\n", "\n  if(length(s) < 3) {\n    return(FALSE)\n\
    \  }\n  else {\n    for(i in 1:(length(s)-2)) {\n      if(s[i] == s[i+1] | s[i]\
    \ == s[i+2] | s[i+1] == s[i+2]) {\n        return(FALSE)\n      }\n    }\n   \
    \ return(TRUE)\n  }\n}\n", "\n  n <- nchar(s)\n  if (n < 3) return(FALSE)\n  if\
    \ (n == 3) return(length(unique(strsplit(s, \"\")[[1]])) == 3)\n  m <- strsplit(s,\
    \ \"\")[[1]]\n  for (i in 1:(n - 2)) {\n    if (m[i] == m[i + 1] || m[i] == m[i\
    \ + 2] || m[i + 1] == m[i + 2]) return(FALSE)\n  }\n  return(TRUE)\n}\n\na <-\
    \ \"a\"\naa <- \"aa\"\nabcd <- \"abcd\"\naabb <- \"aabb\"\nadb <- \"adb\"\nxyy\
    \ <- \"xyy\"", "\n    nchar(s) >= 3 && nchar(gsub(\"(.{3})\\\\1+\", \"\\\\1\"\
    , s)) == nchar(s)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
