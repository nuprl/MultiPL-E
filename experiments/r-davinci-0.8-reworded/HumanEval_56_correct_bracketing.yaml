name: HumanEval_56_correct_bracketing
language: r
prompt: "# brackets is a string of \"<\" and \">\".\n# return TRUE if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing('<')\n\
  # FALSE\n# >>> correct_bracketing('<>')\n# TRUE\n# >>> correct_bracketing('<<><>>')\n\
  # TRUE\n# >>> correct_bracketing('><<>')\n# FALSE\ncorrect_bracketing <- function(brackets)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- correct_bracketing\n    if(!identical(candidate('<>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<><>>'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<<><>>>>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('><<>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<<<'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<>'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<><><<><>><>><<>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>>><>'), FALSE)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n\t\n\tbracket_stack <- list()\n\t# For each character in brackets\n\
    \tfor (b in strsplit(brackets, \"\")[[1]]) {\n\t\t# Add open brackets to stack\n\
    \t\tif (b == \"<\") {\n\t\t\tbracket_stack <- c(bracket_stack, b)\n\t\t# Remove\
    \ closed brackets from stack\n\t\t} else if (b == \">\") {\n\t\t\tbracket_stack\
    \ <- bracket_stack[-length(bracket_stack)]\n\t\t}\n\t}\n\t\n\t# Return TRUE if\
    \ there are 0 brackets in the stack\n\treturn(length(bracket_stack) == 0)\n}\n",
  "\n  return(TRUE)\n}\n", "\n    mismatch <- 0\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == '<')\n            mismatch <- mismatch\
    \ + 1\n        else\n            mismatch <- mismatch - 1\n        if (mismatch\
    \ < 0)\n            return(FALSE)\n    }\n    if (mismatch == 0)\n        return(TRUE)\n\
    \    else\n        return(FALSE)\n}\n ", "\n    n <- nchar(brackets)\n    if (n%%2\
    \ != 0) return(FALSE)\n    if (brackets[1] == '>') return(FALSE)\n    if (brackets[n]\
    \ == '<') return(FALSE)\n    while (nchar(brackets) > 0) {\n        brackets <-\
    \ gsub('<>', '', brackets)\n    }\n    return(nchar(brackets) == 0)\n}\n", "\n\
    \    bracket_count <- 0\n    for (bracket in strsplit(brackets, '')[[1]]) {\n\
    \        if (bracket == '<') {\n            bracket_count <- bracket_count + 1\n\
    \        } else if (bracket == '>') {\n            bracket_count <- bracket_count\
    \ - 1\n        }\n        if (bracket_count < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    return(bracket_count == 0)\n}\n", "\n  return(!any(nchar(brackets)%%2))\n\
    }\n ", "\n  count_opening <- 0\n  count_closing <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      count_opening <- count_opening\
    \ + 1\n    } else {\n      count_closing <- count_closing + 1\n    }\n  }\n  return(count_opening\
    \ == count_closing)\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      j <- find_closing_bracket(brackets,\
    \ i)\n      if (j == 0) return(FALSE)\n      brackets <- substr(brackets, i, j)\n\
    \    }\n  }\n  return(TRUE)\n}\n", "\n    # initialize a stack\n    stack <- list()\n\
    \    # traverse through the string\n    for (bracket in brackets) {\n        #\
    \ if the character is \"<\", push it onto the stack\n        if (bracket == \"\
    <\") {\n            stack <- c(stack, bracket)\n        }\n        # if the character\
    \ is \">\", pop from the stack\n        else if (bracket == \">\") {\n       \
    \     # if there is nothing to pop, return FALSE\n            if (length(stack)\
    \ == 0) {\n                return(FALSE)\n            }\n            # otherwise,\
    \ pop the element off the stack\n            else {\n                stack <-\
    \ stack[-length(stack)]\n            }\n        }\n    }\n    # if the stack is\
    \ empty, return TRUE\n    if (length(stack) == 0) {\n        return(TRUE)\n  \
    \  }\n    # otherwise, return FALSE\n    else {\n        return(FALSE)\n    }\n\
    }\n", "\n  # TODO: set this to the result you want to return.\n  result <- NULL\n\
    \  return(result)\n}\n", "\n    bracket_stack <- function(brackets, stack = 0)\
    \ {\n        if (nchar(brackets) == 0) {\n            stack == 0\n        } else\
    \ {\n            stack <- stack + ifelse(substr(brackets, 1, 1) == '<', 1, -1)\n\
    \            if (stack < 0) {\n                FALSE\n            } else {\n \
    \               bracket_stack(substr(brackets, 2, nchar(brackets)), stack)\n \
    \           }\n        }\n    }\n    bracket_stack(brackets)\n}\n", "\n  stack\
    \ <- list()\n  opening <- c(\"<\")\n  closing <- c(\">\")\n  for (symbol in strsplit(brackets,\
    \ split = \"\")[[1]]) {\n    if (symbol %in% opening) {\n      stack <- c(stack,\
    \ symbol)\n    } else if (symbol %in% closing) {\n      if (length(stack) == 0)\
    \ {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\n", "\n  # initialise count\
    \ variable\n  count <- 0\n  # loop through brackets\n  for (bracket in strsplit(brackets,\
    \ '')[[1]]) {\n    # increase count if opening bracket\n    if (bracket == '<')\
    \ count <- count + 1\n    # decrease count if closing bracket\n    if (bracket\
    \ == '>') count <- count - 1\n    # fail early if count < 0\n    if (count < 0)\
    \ return(FALSE)\n  }\n  # check whether count == 0\n  count == 0\n}\n", "\n  \
    \  brackets <- strsplit(brackets, \"\")[[1]]\n    if (brackets[1] == \">\") {\n\
    \        return(FALSE)\n    }\n    if (brackets[length(brackets)] == \"<\") {\n\
    \        return(FALSE)\n    }\n    num_lt <- 0\n    num_gt <- 0\n    for (b in\
    \ brackets) {\n        if (b == \"<\") {\n            num_lt <- num_lt + 1\n \
    \       } else {\n            num_gt <- num_gt + 1\n        }\n        if (num_gt\
    \ > num_lt) {\n            return(FALSE)\n        }\n    }\n    return(num_lt\
    \ == num_gt)\n}\n ", "\n  # if string is empty, then it is ok\n  if (nchar(brackets)\
    \ == 0) {\n    return(TRUE)\n  }\n  # if first and last chars are bracket, then\
    \ call function again\n  # with string without them (for example, \"[<>[>]<>]\"\
    \ -> \"[<>[>]\", \"]\" -> \"\")\n  if (substr(brackets, 1, 1) == \"<\" && substr(brackets,\
    \ nchar(brackets), nchar(brackets)) == \">\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n  }\n  # otherwise it is not correct\n  return(FALSE)\n\
    }\n\n", "\n    brackets <- strsplit(brackets, \"\")[[1]]\n    opening_count <-\
    \ 0\n    closing_count <- 0\n    for (bracket in brackets) {\n        if (bracket\
    \ == \"<\") {\n            opening_count <- opening_count + 1\n        } else\
    \ if (bracket == \">\") {\n            closing_count <- closing_count + 1\n  \
    \      }\n        if (closing_count > opening_count) {\n            return(FALSE)\n\
    \        }\n    }\n    return(opening_count == closing_count)\n}\n ", "\n  stack\
    \ <- list()\n  for (i in seq_along(brackets)) {\n    if (brackets[i] == '<') {\n\
    \      stack <- c(stack, '<')\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\ncorrect_bracketing('><<>')\n",
  "\n    #\n    # store the number of left and right brackets in the \"opening\" and\
    \ \"closing\"\n    # vector.\n    #\n    opening <- str_count(brackets, \"<\"\
    )\n    closing <- str_count(brackets, \">\")\n    #\n    # return TRUE if the\
    \ number of left and right brackets match\n    #\n    opening == closing\n}",
  "\n  m.c <- 0\n  for (i in seq_along(brackets)) {\n    if (brackets[i] == '<') m.c\
    \ <- m.c + 1\n    if (brackets[i] == '>') m.c <- m.c - 1\n    if (m.c < 0) return(FALSE)\n\
    \  }\n  return(m.c == 0)\n}\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  # YOUR CODE\
    \ HERE\n  count = 0\n  for (i in brackets) {\n    if (i == '<') {\n      count\
    \ = count + 1\n    } else {\n      count = count - 1\n    }\n    if (count < 0)\
    \ {\n      return(FALSE)\n    }\n  }\n  if (count == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n    is_closed <- function(x) {\n\
    \        return(x[1] == '<' & x[2] == '>')\n    }\n    if (length(brackets) ==\
    \ 0) return(TRUE)\n    if (length(brackets) == 1) return(FALSE)\n    if (is_closed(brackets[1:2]))\
    \ return(correct_bracketing(brackets[3:length(brackets)]))\n    return(correct_bracketing(paste(brackets[2:length(brackets)],\
    \ collapse = '')))\n}", "\n  bracket_list <- list()\n  for (i in brackets) {\n\
    \    if (i == '<') {\n      bracket_list <- c(bracket_list, i)\n    } else if\
    \ (i == '>') {\n      if (length(bracket_list) > 0) {\n        bracket_list <-\
    \ tail(bracket_list, -1)\n      } else {\n        return(FALSE)\n      }\n   \
    \ }\n  }\n  if (length(bracket_list) == 0) {\n    return(TRUE)\n  } else {\n \
    \   return(FALSE)\n  }\n}\n", "\n    \n    opening <- c(0)\n    closing <- c(0)\n\
    \    \n    for (bracket in strsplit(brackets, \"\")[[1]]) {\n        if (bracket\
    \ == \"<\") {\n            opening <- c(opening, 1)\n        } else if (bracket\
    \ == \">\") {\n            closing <- c(closing, 1)\n        }\n    }\n    \n\
    \    return(sum(opening) == sum(closing))\n}\n", "\n  counter <- 0\n  for (i in\
    \ 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == '<') {\n      counter\
    \ <- counter + 1\n    } else {\n      counter <- counter - 1\n    }\n  }\n  if\
    \ (counter == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\
    correct_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  # Detects whether brackets are unbalanced.\n\
    \  # >>> correct_bracketing('><<>')\n  # FALSE\n  # >>> correct_bracketing('<><<<>')\n\
    \  # FALSE\n  # >>> correct_bracketing('<><<<>>')\n  # TRUE\n  # >>> correct_bracketing('<><<<<>>')\n\
    \  # FALSE\n  if (brackets == '<>') {\n    # Base case: brackets contains 0 or\
    \ 1 opening bracket.\n    return(TRUE)\n  } else if (substr(brackets, 1, 1) ==\
    \ '<') {\n    # Case: brackets contains an opening bracket.\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  } else {\n    # Case: brackets contains a closing bracket.\n\
    \    return(FALSE)\n  }\n}\n", "\n    \n}\n", "\n  if (grepl(\"<<>\", brackets)\
    \ | grepl(\"<><>\", brackets) | grepl(\"<>>\", brackets)) {\n    return (FALSE)\n\
    \  } else {\n    return (TRUE)\n  }\n}\n", "\n  if (identical(brackets, '')) {\n\
    \    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == '<') {\n    if (substr(brackets,\
    \ nchar(brackets), nchar(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n    # if(brackets=='<>'){\n    #     return(TRUE)\n\
    \    # }\n    # else{\n    #     return(FALSE)\n    # }\n    count=0\n    for(i\
    \ in seq_along(brackets)){\n        if(brackets[i]=='<'){\n            count=count+1\n\
    \        }\n        else{\n            count=count-1\n        }\n        if(count<0){\n\
    \            return(FALSE)\n        }\n    }\n    if(count==0){\n        return(TRUE)\n\
    \    }\n    else{\n        return(FALSE)\n    }\n}", "\n    # initialize counters\n\
    \    left_count <- 0\n    right_count <- 0\n    # loop through brackets\n    for\
    \ (i in brackets) {\n        # increment left count for \"<\"\n        if (i ==\
    \ \"<\") {\n            left_count <- left_count + 1\n        }\n        # check\
    \ if left count greater than right count\n        # otherwise return FALSE\n \
    \       if (right_count > left_count) {\n            return(FALSE)\n        }\n\
    \        # increment right count for \">\"\n        if (i == \">\") {\n      \
    \      right_count <- right_count + 1\n        }\n    }\n    # return TRUE if\
    \ right and left counts are equal\n    if (right_count == left_count) {\n    \
    \    return(TRUE)\n    }\n    # otherwise return FALSE\n    return(FALSE)\n}",
  "\n  bracket_stack <- character(0)\n  stopifnot(is.character(brackets))\n  for (b\
    \ in brackets) {\n    if (b == '<') {\n      bracket_stack <- c(bracket_stack,\
    \ b)\n    } else if (b == '>') {\n      if (length(bracket_stack) == 0) {\n  \
    \      return(FALSE)\n      } else {\n        bracket_stack <- bracket_stack[-length(bracket_stack)]\n\
    \      }\n    } else {\n      stop('brackets can only have < and >')\n    }\n\
    \  }\n  return(length(bracket_stack) == 0)\n}\n", "\n    match_count = 0\n   \
    \ for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == '<') {\n\
    \            match_count = match_count + 1\n        } else {\n            match_count\
    \ = match_count - 1\n        }\n        if (match_count < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    if (match_count == 0) {\n        return(TRUE)\n    } else\
    \ {\n        return(FALSE)\n    }\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  count_opened\
    \ <- 0\n  count_closed <- 0\n  for ( bracket in strsplit(brackets, \"\")[[1]]\
    \ ) {\n    if ( bracket == \"<\" ) {\n      count_opened <- count_opened + 1\n\
    \    } else if ( bracket == \">\" ) {\n      count_closed <- count_closed + 1\n\
    \    }\n    if ( count_closed > count_opened ) {\n      return(FALSE)\n    }\n\
    \  }\n  if ( count_opened == count_closed ) {\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  opening = length(grep('<', brackets))\n  closing\
    \ = length(grep('>', brackets))\n  return(opening == closing)\n}\n", "\n  # TODO\n\
    }\n", "\n  if (length(brackets) == 0) return(TRUE)\n  if (substr(brackets, 1,\
    \ 1) == '<') {\n    if (substr(brackets, length(brackets), length(brackets)) ==\
    \ '>') {\n      correct_bracketing(substr(brackets, 2, length(brackets) - 1))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n    c <- 0\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets,\
    \ i, i) == '<') {\n            c <- c + 1\n        } else {\n            c <-\
    \ c - 1\n        }\n        if (c < 0) {\n            return(FALSE)\n        }\n\
    \    }\n    if (c != 0) {\n        return(FALSE)\n    }\n    return(TRUE)\n}\n\
    correct_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  open <- 0\n  close <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      open <- open + 1\n    }\
    \ else {\n      close <- close + 1\n    }\n    if (close > open) {\n      return(FALSE)\n\
    \    }\n  }\n  if (open == close) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\
    <<><>>\")\ncorrect_bracketing(\"<><<>\")\ncorrect_bracketing(\">>>><><<<>>\")\n",
  "\n    # YOUR CODE HERE\n    brackets  <- unlist(strsplit(brackets,split = NULL))\n\
    \    count_left <- sum(brackets=='<')\n    count_right <- sum(brackets=='>')\n\
    \    if(count_left == count_right){\n        return(TRUE)\n    }else{\n      \
    \  return(FALSE)\n    }\n}\n", "\n\t# Use if-else statement to check if there\
    \ is more \"<\" than \">\"\n\tif (substr_count(brackets, \"<\") > substr_count(brackets,\
    \ \">\")) {\n\t\treturn (FALSE)\n\t} else {\n\t\treturn (TRUE)\n\t}\n}\n", "\n\
    \  num_of_open <- 0\n  for (i in seq_along(brackets)) {\n    if (brackets[i] ==\
    \ '<') {\n      num_of_open <- num_of_open + 1\n    } else {\n      num_of_open\
    \ <- num_of_open - 1\n    }\n    if (num_of_open < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (num_of_open == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # base case: no more brackets\n  if (length(brackets) == 0) {\n\
    \    return(TRUE)\n  }\n  # base case: first character is \">\"\n  if (substr(brackets,\
    \ 1, 1) == \">\") {\n    return(FALSE)\n  }\n  # recursive case: remove the first\
    \ \"<\" and last \">\" and recurse\n  return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n}\n", "\n  result <- TRUE\n  count <- 0\n  for (letter\
    \ in strsplit(brackets, \"\")[[1]]) {\n    if (letter == \"<\") {\n      count\
    \ <- count + 1\n    } else if (letter == \">\") {\n      count <- count - 1\n\
    \    }\n    if (count < 0) {\n      result <- FALSE\n    }\n  }\n  if (count >\
    \ 0) {\n    result <- FALSE\n  }\n  return(result)\n}\n\ntest_that(\"correct_bracketing\
    \ gives correct answers\", {\n  expect_true(correct_bracketing(\"<<><>>\"))\n\
    \  expect_false(correct_bracketing(\"<\"))\n  expect_false(correct_bracketing(\"\
    ><<>\"))\n})\n ", "\n  stack <- list()\n  for (i in seq_along(brackets)) {\n \
    \   if (brackets[i] == '<') {\n      stack <- c(stack, '<')\n    } else {\n  \
    \    if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n      \
    \  stack <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  if (nchar(brackets)==0) {\n    return(T)\n\
    \  } else if (nchar(brackets)==1) {\n    return(F)\n  } else {\n    if (substr(brackets,\
    \ 1, 1)==\"<\") {\n      if (substr(brackets, nchar(brackets), nchar(brackets))==\"\
    >\") {\n        return(correct_bracketing(substr(brackets, 2, nchar(brackets)-1)))\n\
    \      } else {\n        return(F)\n      }\n    } else {\n      return(F)\n \
    \   }\n  }\n}\n", "\n  \n  open_brackets <- 0\n  close_brackets <- 0\n  \n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n   \
    \   open_brackets <- open_brackets + 1\n    } else {\n      close_brackets <-\
    \ close_brackets + 1\n    }\n    \n    if (close_brackets > open_brackets) {\n\
    \      return(FALSE)\n    }\n  }\n  \n  if (open_brackets == close_brackets) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n  \n}\n\ncorrect_bracketing(\"\
    <\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"\
    ><<>\")\n", "\n  bracket_count <- 0\n\n  for (i in 1:nchar(brackets)) {\n    bracket\
    \ <- substr(brackets, i, i)\n\n    if (bracket == '<') {\n      bracket_count\
    \ <- bracket_count + 1\n    }\n    else if (bracket == '>') {\n      bracket_count\
    \ <- bracket_count - 1\n    }\n\n    if (bracket_count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n\n  return(bracket_count == 0)\n}\n", "\n    left <- right <- 0\n\
    \    for (x in brackets) {\n        left <- left + x == \"<\"\n        right <-\
    \ right + x == \">\"\n        if (right > left) {\n            return(FALSE)\n\
    \        }\n    }\n    return(left == right)\n}\n ", "\n    # Add your code here\n\
    }\n", "\n  n_open <- sum(brackets == \"<\")\n  n_close <- sum(brackets == \">\"\
    )\n  if (n_open == n_close) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n    bracket_count <- 0\n    for (bracket in strsplit(brackets,\
    \ '')[[1]]) {\n        if (bracket == '<') {\n            bracket_count <- bracket_count\
    \ + 1\n        } else if (bracket == '>') {\n            bracket_count <- bracket_count\
    \ - 1\n        }\n        if (bracket_count < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    return(bracket_count == 0)\n}\ncorrect_bracketing('<')\n\
    correct_bracketing('<>')\ncorrect_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n\
    \ ", "\n    \n}\n", "\n  # EITHER\n  #   1. we did NOT find the matching close\
    \ bracket\n  #   2. we've gone through the entire string and no unclosed bracket\
    \ was found\n  # THEN\n  #   return FALSE\n  # ELSE\n  #   return TRUE\n  if (\n\
    \    is.null(match_close_bracket(brackets)) |\n    !any(brackets == \">\")\n \
    \ ) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n\ncorrect_bracketing(\"\
    <\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"\
    ><<>\")\n", "\n  if (length(brackets) == 0) {\n    return(TRUE)\n  } else if (substr(brackets,\
    \ 1, 1) == '<') {\n    if (substr(brackets, length(brackets), length(brackets))\
    \ == '>') {\n      correct_bracketing(substr(brackets, 2, length(brackets) - 1))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }", "\n  bad <- FALSE\n  open_brackets <- brackets[brackets == '<']\n  for (i\
    \ in 1:length(open_brackets)) {\n    if (brackets[i] == '<') {\n      if (brackets[i+1]\
    \ != '>') {\n        bad <- TRUE\n      }\n    }\n  }\n  return(!bad)\n}\n\ncorrect_bracketing('<')\n\
    correct_bracketing('<>')\ncorrect_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n",
  "\n\tstack <- list()\n\tfor (i in 1:nchar(brackets)) {\n\t\tif (substr(brackets,\
    \ i, i) == '<') {\n\t\t\tstack <- c(stack, '<')\n\t\t} else {\n\t\t\tif (length(stack)\
    \ == 0) {\n\t\t\t\treturn(FALSE)\n\t\t\t} else {\n\t\t\t\tstack <- stack[-length(stack)]\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (length(stack) > 0) {\n\t\treturn(FALSE)\n\t} else {\n\
    \t\treturn(TRUE)\n\t}\n}\n", "\n    if (str_length(brackets) %% 2 != 0) {\n  \
    \      return(FALSE)\n    }\n    else {\n        for (i in 1:((str_length(brackets))/2))\
    \ {\n            if (str_sub(brackets, i, i) != \"<\" | str_sub(brackets, str_length(brackets)-i+1,\
    \ str_length(brackets)-i+1) != \">\") {\n                return(FALSE)\n     \
    \       }\n        }\n        return(TRUE)\n    }\n}\ncorrect_bracketing(\"<>\"\
    )\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\
    ><<>\")\n", "\n    return(brackets[1]==\"<\" && brackets[length(brackets)]==\"\
    >\")\n}\n\n\nlibrary(testthat)\ntest_that(\"Returns the correct test\", {\n  \
    \  expect_true(correct_bracketing('<'))\n    expect_true(correct_bracketing('<>'))\n\
    \    expect_true(correct_bracketing('<<><>>'))\n    expect_true(correct_bracketing('><<>'))\n\
    })\n", "\n  stack <- c()\n  for (bracket in strsplit(brackets, \"\")[[1]]) {\n\
    \    if (bracket == \"<\") {\n      stack <- c(stack, bracket)\n    } else if\
    \ (bracket == \">\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  return(length(stack) == 0)\n}\n\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"><<>\")\n", "\n  #\
    \ YOUR CODE HERE\n  brackets <- stringr::str_split(brackets, \"\")[[1]]\n  return(reduce(brackets,\
    \ function(x, y) {\n    if (y == \"<\") x <- x + 1\n    if (y == \">\") x <- x\
    \ - 1\n    if (x < 0) return(FALSE)\n    return(x)\n  }, 0) == 0)\n}", "\n  brackets\
    \ <- strsplit(brackets, \"\")[[1]]\n  require(plyr)\n  results <- ldply(c(1,which(brackets\
    \ == \">\")), function(start) {\n    end <- c(which(brackets[(start+1):length(brackets)]\
    \ == \"<\"), length(brackets))[1]\n    setNames(data.frame(\n      sum(brackets[start:end]\
    \ == \"<\"),\n      sum(brackets[start:end] == \">\")\n    ), c(\"total_open\"\
    , \"total_close\"))\n  })\n  return(all(results$total_open == results$total_close))\n\
    }\n", "\n  lg = str_length(brackets)\n  lg.max = lg\n  lg.counter = 0\n  for (i\
    \ in seq(1, lg)) {\n    if (str_sub(brackets, i, i) == '<') {\n      lg.counter\
    \ = lg.counter + 1\n    } else {\n      lg.counter = lg.counter - 1\n    }\n \
    \   if (lg.counter < 0) {\n      return(FALSE)\n    }\n    if (lg.counter < lg.max)\
    \ {\n      lg.max = lg.counter\n    }\n  }\n  if (lg.max == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  \n  # YOUR CODE\
    \ HERE\n}", "\n    # Calculate the opening and closing brackets.\n    opening_brackets\
    \ <- sum(strsplit(brackets, '')[[1]] == '<')\n    closing_brackets <- sum(strsplit(brackets,\
    \ '')[[1]] == '>')\n    # Check if the number of closing brackets is equal to\
    \ the number of opening brackets.\n    closing_brackets == opening_brackets\n\
    }\n\nprint(\"Is the number of closing brackets equal to the number of opening\
    \ brackets?\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"\
    ><<>\")\n", "\n    return(FALSE)\n}\n", "\n  # your code here\n  # your code here\n\
    \  if (nchar(brackets) == 1){\n    return(FALSE)\n  }\n  if (nchar(brackets) ==\
    \ 2){\n    if(brackets == '<>'){\n      return(TRUE)\n    }else{\n      return(FALSE)\n\
    \    }\n  }else{\n    for(i in seq(1,nchar(brackets))){\n      if(substr(brackets,i,i)\
    \ == '<'){\n        break\n      }\n    }\n    for(j in seq(nchar(brackets),1,-1)){\n\
    \      if(substr(brackets,j,j) == '>'){\n        break\n      }\n    }\n    if(i\
    \ == j){\n      return(FALSE)\n    }else{\n      return(correct_bracketing(substr(brackets,i+1,j-1)))\n\
    \    }\n  }\n}\n\n", "\n  # function to be completed\n  return(FALSE)\n}\n\n",
  "\n  return(grepl(\"<*>\", brackets))\n}\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')", "\n  if (is.element(brackets[1],\
    \ c(\"<\", \">\"))) {\n    return(FALSE)\n  }\n  if (is.element(brackets[length(brackets)],\
    \ c(\"<\", \">\"))) {\n    return(FALSE)\n  }\n  return(all(brackets == c(\"<\"\
    , \">\")[cumsum(brackets) %/% 2 + 1]))\n}\n", "\n  # your code here\n}\n", "\n\
    \  count <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i)\
    \ == '<') {\n      count <- count + 1\n    } else {\n      count <- count - 1\n\
    \    }\n    if (count < 0) {\n      return(FALSE)\n    }\n  }\n  if (count ==\
    \ 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing('<')\n\
    correct_bracketing('<>')\ncorrect_bracketing('<<><>>')\ncorrect_bracketing('><<>')",
  "\n    if (empty(brackets)) {\n        return(TRUE)\n    }\n    if (substr(brackets,\
    \ 1, 1) == '<') {\n        if (substr(brackets, 2, 2) == '>') {\n            return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n        } else {\n            return(FALSE)\n       \
    \ }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  open_brackets <- 0\n\
    \  for (bracket in brackets) {\n    if (bracket == '<') {\n      open_brackets\
    \ <- open_brackets + 1\n    } else if (bracket == '>') {\n      open_brackets\
    \ <- open_brackets - 1\n    }\n    if (open_brackets < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  return(open_brackets == 0)\n}\n", "\n  if (brackets == \"\") {\n\
    \    return(TRUE)\n  }\n  else if (brackets[1] == \"<\") {\n    if (brackets[length(brackets)]\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack = c()\n  for (i in 1:nchar(brackets))\
    \ {\n    brack = substr(brackets, i, i)\n    if (brack == '<') {\n      stack\
    \ = c(stack, brack)\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack = stack[-length(stack)]\n      }\n    }\n  }\n\
    \  return(length(stack) == 0)\n}\n ", "\n  ## YOUR CODE HERE ##\n  count_left\
    \ <- length(str_extract_all(brackets, \"<<\"))\n  count_right <- length(str_extract_all(brackets,\
    \ \">>\"))\n  return(count_left == count_right)\n}\n\ncorrect_bracketing('<')\n\
    correct_bracketing('<>')\ncorrect_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n",
  "\n    # use stack\n    stack <- c()\n    for (i in 1:nchar(brackets)) {\n     \
    \   bracket <- substr(brackets, i, i)\n        if (bracket == '<') {\n       \
    \     stack <- c(stack, bracket)\n        } else {\n            if (length(stack)\
    \ == 0) {\n                return(FALSE)\n            } else {\n             \
    \   stack <- stack[-length(stack)]\n            }\n        }\n    }\n    return(length(stack)\
    \ == 0)\n}\n", "\n  if (sum(strsplit(brackets, \"\")[[1]]) == 0) {\n    return(TRUE)\n\
    \  } else if (sum(strsplit(brackets, \"\")[[1]]) < 0) {\n    return(FALSE)\n \
    \ } else {\n    return(correct_bracketing(brackets[-1]))\n  }\n}\ncorrect_bracketing('<>')\n\
    correct_bracketing('<><><>')\n", "\n  # split brackets into a list of characters\n\
    \  char_list <- strsplit(brackets, \"\")[[1]]\n  # add a starting \"-\" value\
    \ so the list is always even\n  char_list <- c(\"-\", char_list)\n  # initialize\
    \ a counter\n  count <- 0\n  # for each character in the list\n  for (char in\
    \ char_list) {\n    # if the character is a closing bracket\n    if (char == \"\
    >\") {\n      # decrement the counter\n      count <- count - 1\n    } else {\n\
    \      # else if the character is an opening bracket\n      if (char == \"<\"\
    ) {\n        # increment the counter\n        count <- count + 1\n      }\n  \
    \  }\n    # if the counter is ever negative\n    if (count < 0) {\n      # return\
    \ FALSE\n      return(FALSE)\n    }\n  }\n  # if the counter is ever anything\
    \ other than 0 at the end\n  if (count != 0) {\n    # return FALSE\n    return(FALSE)\n\
    \  }\n  # else return TRUE\n  return(TRUE)\n}\n", "\n  stack = list()\n  for (bracket\
    \ in brackets) {\n    if (bracket == '<') {\n      stack = append(stack, bracket)\n\
    \    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\
    \ else {\n        stack = stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')", "\n  idx = 1\n  counter = 0\n  if (length(brackets)\
    \ == 1) {\n    return(FALSE)\n  }\n  for (b in brackets) {\n    if (b == '<')\
    \ {\n      counter = counter + 1\n    } else {\n      counter = counter - 1\n\
    \    }\n    if (counter < 0) {\n      return(FALSE)\n    }\n    idx = idx + 1\n\
    \  }\n  if (counter != 0) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n\
    \    # your code here\n    counter <- 0\n    for (i in brackets) {\n        if\
    \ (i == '<') {\n            counter <- counter + 1\n        } else {\n       \
    \     counter <- counter - 1\n        }\n        if (counter < 0) {\n        \
    \    return(FALSE)\n        }\n    }\n    if (counter == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n    # your code here\n}\n",
  "\n    count <- 0\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets,\
    \ i, i) == '<') {\n            count <- count + 1\n        } else {\n        \
    \    count <- count - 1\n        }\n        if (count < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    if (count == 0) {\n        return(TRUE)\n    } else {\n\
    \        return(FALSE)\n    }\n}\n", "\n    correct_bracketing <- brackets[1]==\"\
    <\"\n    for (i in 2:length(brackets)) {\n        if (brackets[i]==\"<\") {\n\
    \            correct_bracketing <- correct_bracketing+1\n        } else {\n  \
    \          correct_bracketing <- correct_bracketing-1\n        }\n        if (correct_bracketing==0)\
    \ {\n            return(FALSE)\n        }\n    }\n    return(correct_bracketing==0)\n\
    }\n", "\n    open <- 0\n    for (letter in brackets) {\n        if (letter ==\
    \ '<') {\n            open <- open + 1\n        } else {\n            open <-\
    \ open - 1\n        }\n        if (open < 0) {\n            return(FALSE)\n  \
    \      }\n    }\n    return(open == 0)\n}\n", "\n    lefts <- sum(brackets ==\
    \ \"<\")\n    rights <- sum(brackets == \">\")\n    return(lefts == rights)\n\
    }\n", "\n  stack <- 0\n  for (b in strsplit(brackets, \"\")[[1]]) {\n    if (b\
    \ == \"<\") {\n      stack <- stack + 1\n    } else if (b == \">\") {\n      stack\
    \ <- stack - 1\n    }\n    if (stack < 0) {\n      return(FALSE)\n    }\n  }\n\
    \  if (stack == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
  "\n  l <- length(brackets)\n  if (l==0){\n    return(TRUE)\n  }\n  if (substr(brackets,1,1)\
    \ == '<'){\n    brackets <- substr(brackets,2,l)\n    bracketing <- correct_bracketing(brackets)\n\
    \    if (bracketing == FALSE){\n      return(FALSE)\n    }\n    else{\n      if\
    \ (length(brackets)==0){\n        return(FALSE)\n      }\n      brackets <- substr(brackets,2,l)\n\
    \      return(correct_bracketing(brackets))\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  # your code goes here\n}\n", "\n    count\
    \ <- 0\n    for (bracket in strsplit(brackets, '')[[1]]) {\n        if (bracket\
    \ == '<') {\n            count <- count + 1\n        } else if (bracket == '>')\
    \ {\n            count <- count - 1\n        }\n        if (count < 0) {\n   \
    \         return(FALSE)\n        }\n    }\n    return(count == 0)\n}", "\n   \
    \ \n    # YOUR CODE HERE\n    score = 0\n    for (b in strsplit(brackets, split\
    \ = '')[[1]]) {\n        if (b == '<') score = score + 1\n        if (b == '>')\
    \ score = score - 1\n        if (score < 0) return(FALSE)\n    }\n    if (score\
    \ == 0) return(TRUE)\n    return(FALSE)\n}\n ", "\n  # your code here\n  brackets\
    \ <- as.character(brackets)\n  count = 0\n  for ( i in brackets) {\n    if (i\
    \ == \"<\") {\n      count = count + 1\n    } else if (i == \">\") {\n      count\
    \ = count - 1\n    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  bracket_list\
    \ <- strsplit(brackets, \"\")[[1]]\n\n  open <- list()\n  for (bracket in bracket_list)\
    \ {\n    if (bracket == \"<\") {\n      open <- c(open, \"<\")\n    } else if\
    \ (bracket == \">\") {\n      if (length(open) == 0) {\n        return(FALSE)\n\
    \      } else {\n        open <- open[-length(open)]\n      }\n    }\n  }\n\n\
    \  return(length(open) == 0)\n}\ntest_that(\"open and close brackets are balanced\"\
    , {\n  expect_false(correct_bracketing(\"<\"))\n  expect_true(correct_bracketing(\"\
    <>\"))\n  expect_true(correct_bracketing(\"<<><>>\"))\n  expect_false(correct_bracketing(\"\
    ><<>\"))\n})", "\n  # Your code here.\n}\n", "\n  ############################\n\
    \  # Insert your code here...\n  ############################\n  # if the count\
    \ of closing brackets does not equal the count of opening brackets,\n  # we can\
    \ immediately return FALSE.\n  if (sum(strsplit(brackets, \"\")[[1]] == \">\"\
    ) != sum(strsplit(brackets, \"\")[[1]] == \"<\")) {\n    return(FALSE)\n  }\n\
    \  # otherwise, we will use the for loop to check if there is any closing bracket\
    \ in front of opening brackets.\n  # we need a variable to record the number of\
    \ opening brackets.\n  # every time there is a closing bracket, we will minus\
    \ one to the variable.\n  # if there is a opening bracket, we add one to the variable.\n\
    \  # if the variable is bigger than 0, it means there is a closing bracket before\
    \ the opening bracket.\n  # if the variable is less than 0, it means there is\
    \ a opening bracket before the closing bracket.\n  # if there is any situation\
    \ mentioned above, we will return FALSE.\n  count <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \">\") {\n      count <- count - 1\n  \
    \  } else {\n      count <- count + 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  # finally, if nothing happens above, we will return TRUE.\n  return(TRUE)\n\
    }\n", "\n  \n  parens = 0\n  for (b in brackets) {\n    if (b == '<') {\n    \
    \  parens = parens + 1\n    } else {\n      parens = parens - 1\n    }\n    if\
    \ (parens < 0) {\n      return(FALSE)\n    }\n  }\n  if (parens == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (nchar(brackets) %% 2 != 0)\
    \ {\n    return(FALSE)\n  }\n  nopen <- length(gregexpr(\"<\", brackets)[[1]])\n\
    \  nclose <- length(gregexpr(\">\", brackets)[[1]])\n  if (nopen != nclose) {\n\
    \    return(FALSE)\n  }\n  brackets <- gsub(\">\", \"-\", brackets)\n  brackets\
    \ <- gsub(\"<\", \">\", brackets)\n  brackets <- gsub(\"-\", \"<\", brackets)\n\
    \  if (brackets == stringr::str_reverse(brackets)) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  left_brackets <- length(grep(\"<\", brackets))\n\
    \  right_brackets <- length(grep(\">\", brackets))\n  if (left_brackets == right_brackets)\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}", "\n  if(nchar(brackets)\
    \ %% 2 == 1) return(FALSE)\n  open <- grepl(\"<\", brackets)\n  closed <- grepl(\"\
    >\", brackets)\n  if(sum(open) != sum(closed)) return(FALSE)\n  brackets[open]\
    \ <- \"x\"\n  brackets[closed] <- \"o\"\n  if(! all(cumsum(brackets == \"x\")\
    \ >= cumsum(brackets == \"o\"))) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n",
  "\n  bracket_list <- strsplit(brackets, \"\")[[1]]\n  open_count <- sum(bracket_list\
    \ == \"<\")\n  close_count <- sum(bracket_list == \">\")\n  if (open_count ==\
    \ close_count) return(TRUE)\n  return(FALSE)\n}\n", "\n    count = 0\n    for\
    \ (b in brackets) {\n        if (b == '<') {\n            count = count + 1\n\
    \        } else {\n            count = count - 1\n        }\n        if (count\
    \ < 0) {\n            return(FALSE)\n        }\n    }\n    return(count == 0)\n\
    }\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  sum(strsplit(brackets, '')[[1]] == c('<',\
    \ '>')) == length(brackets)\n}\n", "\n    count <- 0\n    for (i in seq_along(brackets))\
    \ {\n        if (brackets[i] == '<') count <- count + 1\n        if (brackets[i]\
    \ == '>') count <- count - 1\n        if (count < 0) return(FALSE)\n    }\n  \
    \  return(count == 0)\n}\n", "\n    x = 0\n    for (i in 1:nchar(brackets)) {\n\
    \        if (substr(brackets, i, i) == '<') {\n            x = x + 1\n       \
    \ } else {\n            x = x - 1\n        }\n        if (x < 0) {\n         \
    \   return(FALSE)\n        }\n    }\n    if (x == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n  opening_brackets <- grep(\"\
    <\", brackets)\n  if (length(opening_brackets) == 0) {\n    return(FALSE)\n  }\n\
    \  if (length(opening_brackets) == 1) {\n    return(TRUE)\n  }\n  # set up the\
    \ loop\n  is_correct <- TRUE\n  previous_bracket <- opening_brackets[1]\n  for\
    \ (bracket in opening_brackets[-1]) {\n    if (bracket - previous_bracket == 1)\
    \ {\n      is_correct <- FALSE\n      break\n    }\n    previous_bracket <- bracket\n\
    \  }\n  return(is_correct)\n}\n", "\n  chk <- FALSE\n  if(substr(brackets, 1,\
    \ 1) == \">\") return(chk)\n  if(substr(brackets, 1, 1) == \"<\") {\n    if(substr(brackets,\
    \ length(brackets), length(brackets)) == \">\") {\n      chk <- TRUE\n      brk\
    \ <- brackets\n      while(substr(brk, 1, 1) == \"<\") {\n        brk <- substr(brk,\
    \ 2, length(brk))\n        if(substr(brk, 1, 1) == \">\") {\n          brk <-\
    \ substr(brk, 2, length(brk))\n        } else {\n          chk <- FALSE\n    \
    \      break\n        }\n      }\n    }\n  }\n  return(chk)\n}", "\n  error_count\
    \ <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == '<')\
    \ {\n      error_count <- error_count + 1\n    } else {\n      error_count <-\
    \ error_count - 1\n    }\n    if (error_count < 0) {\n      return(FALSE)\n  \
    \  }\n  }\n  if (error_count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\n", "\n  # your code here\n  open_bracket_count <- length(grep(\"<\"\
    , brackets))\n  close_bracket_count <- length(grep(\">\", brackets))\n  if (open_bracket_count\
    \ == close_bracket_count) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if (nchar(brackets) == 0) {\n    TRUE\n  } else if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, nchar(brackets), nchar(brackets))\
    \ == \">\") {\n      correct_bracketing(substr(brackets, 2, nchar(brackets) -\
    \ 1))\n    } else {\n      FALSE\n    }\n  } else {\n    FALSE\n  }\n}\n", "\n\t\
    \n}\n", "\n  bracketStack <- Stack$new()\n  for (bracket in strsplit(brackets,\
    \ \"\")[[1]]) {\n    if (bracket == \"<\") {\n      bracketStack$push(bracket)\n\
    \    } else if (bracket == \">\") {\n      bracketStack$pop()\n    }\n  }\n  return(bracketStack$length()\
    \ == 0)\n}\n\ncorret_bracketing_test <- function() {\n  test <- function(brackets,\
    \ expected) {\n    message(paste(\"Correct bracketing of '\", brackets, \"' is\
    \ \", expected))\n    message(paste(\"Got '\", correct_bracketing(brackets), \"\
    '\"))\n    message(if (correct_bracketing(brackets) == expected) {\n      \"SUCCESS!\"\
    \n    } else {\n      \"FAILURE!\"\n    })\n  }\n  test(\"<\", FALSE)\n  test(\"\
    <>\", TRUE)\n  test(\"<<><>>\", TRUE)\n  test(\"><<>\", FALSE)\n}\n", "\n  \n\
    }\n", "\n}\n", "\n    if (length(brackets) == 0) return(TRUE)\n    if (length(brackets)\
    \ == 1) return(FALSE)\n    if (brackets[1] == '<') {\n        if (brackets[length(brackets)]\
    \ == '>') {\n            return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n        } else {\n            return(FALSE)\n        }\n    } else {\n\
    \        return(FALSE)\n    }\n}\n", "\n  # check that length of brackets is even\n\
    \  if(length(brackets) %% 2 != 0) {\n    return(FALSE)\n  }\n  # create a vector\
    \ of the positions of '<' and the positions of '>'\n  pos_left <- grep('<', brackets)\n\
    \  pos_right <- grep('>', brackets)\n  # if there are more '<' than '>' we can't\
    \ have a balanced set of brackets\n  if(length(pos_left) > length(pos_right))\
    \ {\n    return(FALSE)\n  }\n  # iterate over all of the '<' characters\n  for(i\
    \ in 1:length(pos_left)) {\n    # use the position of the '<' to determine the\
    \ position of the closing bracket\n    # note the use of the '+' operator to add\
    \ the value i to the vector pos_right\n    closing_bracket <- min(pos_right[pos_right\
    \ > pos_left[i]])\n    # if we didn't find a closing bracket, then this is not\
    \ a valid set of brackets\n    if(is.na(closing_bracket)) {\n      return(FALSE)\n\
    \    }\n    # otherwise we found a closing bracket, so remove it from the vector\n\
    \    pos_right <- pos_right[-which(pos_right == closing_bracket)]\n  }\n  # if\
    \ we got through all of the iterations, then the brackets must be balanced\n \
    \ return(TRUE)\n}\n ", "\n  # ...\n}\n", "\n  valid.brackets <- 0\n  for (i in\
    \ 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n      valid.brackets\
    \ <- valid.brackets + 1\n    } else {\n      valid.brackets <- valid.brackets\
    \ - 1\n    }\n  }\n  if (valid.brackets == 0) {\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n\ncorrect_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n",
  "\n  stack = c()\n  for (i in 1:nchar(brackets)) {\n    b = substr(brackets, i,\
    \ i)\n    if (b == '<') {\n      stack = c(stack, b)\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack = stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  stack <- list()\n  for (i in 1:nchar(brackets))\
    \ {\n    symbol <- substr(brackets, i, i)\n    if (symbol == '<') {\n      stack\
    \ <- c(stack, '<')\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}", "\n    stack <- c()\n    for (bracket in strsplit(brackets, \"\")[[1]])\
    \ {\n        if (bracket == \"<\") {\n            stack <- c(stack, bracket)\n\
    \        } else if (bracket == \">\") {\n            if (length(stack) == 0) {\n\
    \                return(FALSE)\n            } else {\n                stack <-\
    \ stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack)\
    \ == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\n", "\n  bracket_count <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == '<') bracket_count <- bracket_count + 1\n    if (substr(brackets, i,\
    \ i) == '>') bracket_count <- bracket_count - 1\n    if (bracket_count < 0) return(FALSE)\n\
    \  }\n  if (bracket_count == 0) return(TRUE)\n  return(FALSE)\n}\n", "\n    brackets_open\
    \ <- str_count(brackets, '<')\n    brackets_close <- str_count(brackets, '>')\n\
    \    return(brackets_open == brackets_close)\n}\n\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n \n", "\n  # your code\
    \ here\n  counter <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      counter <- counter + 1\n    } else {\n      counter\
    \ <- counter - 1\n    }\n    if (counter < 0) {\n      return(FALSE)\n    }\n\
    \  }\n  if (counter == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  } else if (substr(brackets,1,1) == \"<\") {\n    return(substr(brackets, length(brackets),\
    \ length(brackets)) == \">\" & correct_bracketing(substr(brackets, 2, length(brackets)-1)))\n\
    \  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\ncorrect_bracketing('<<><<>>')\n",
  "\n  if(!is.character(brackets)) {\n    return(FALSE)\n  }\n  temp <- brackets[brackets\
    \ == '<']\n  temp <- length(temp)\n  temp2 <- brackets[brackets == '>']\n  temp2\
    \ <- length(temp2)\n  if(temp == temp2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i\
    \ in seq_along(brackets)) {\n    bracket <- brackets[i]\n    if (bracket == '<')\
    \ {\n      stack <- c(stack, bracket)\n    } else if (bracket == '>') {\n    \
    \  if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack\
    \ <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack) == 0)\n\
    }\n", "\n  if (length(brackets) == 0) {\n    TRUE\n  } else if (length(brackets)\
    \ == 1) {\n    FALSE\n  } else if (substr(brackets, 1, 1) == '<') {\n    if (substr(brackets,\
    \ 2, 2) == '>') {\n      correct_bracketing(substr(brackets, 3, nchar(brackets)))\n\
    \    } else {\n      FALSE\n    }\n  } else {\n    FALSE\n  }\n}\n", "\n  \n}\n",
  "\n    # initialize stack and set a counter to 0\n    stack <- c()\n    counter\
    \ <- 0\n    # loop over brackets\n    for (bracket in brackets) {\n        # if\
    \ the bracket is an opening bracket, add to stack and increment counter\n    \
    \    if (bracket == '<') {\n            stack <- c(stack, bracket)\n         \
    \   counter <- counter + 1\n        }\n        # if the bracket is a closing bracket,\
    \ remove element from stack and decrement counter\n        else if (bracket ==\
    \ '>') {\n            stack <- stack[-length(stack)]\n            counter <- counter\
    \ - 1\n        }\n        # if counter is negative, then closing bracket found\
    \ before opening bracket\n        if (counter < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    # return FALSE if counter is positive, otherwise return\
    \ TRUE\n    if (counter > 0) {\n        return(FALSE)\n    }\n    else {\n   \
    \     return(TRUE)\n    }\n}\n", "\n  brackets_stack <- c()\n  for (char in strsplit(brackets,\
    \ split = '')[[1]]) {\n    if (char == '<') {\n      brackets_stack <- c(brackets_stack,\
    \ '<')\n    } else if (char == '>') {\n      if (length(brackets_stack) == 0)\
    \ {\n        return(FALSE)\n      } else {\n        brackets_stack <- brackets_stack[-length(brackets_stack)]\n\
    \      }\n    }\n  }\n  return(length(brackets_stack) == 0)\n}\n \nprint(correct_bracketing('<'))\n\
    print(correct_bracketing('<>'))\nprint(correct_bracketing('<<><>>'))\nprint(correct_bracketing('><<>'))\n",
  "\n  stack <- c()\n  for (bracket in strsplit(brackets, \"\")[[1]]) {\n    if (bracket\
    \ == \"<\") {\n      stack <- c(stack, bracket)\n    } else if (bracket == \"\
    >\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\n\ntest_that(\"test_correct_bracketing\", {\n  expect_true(correct_bracketing(\"\
    <><>\"))\n  expect_true(correct_bracketing(\"<<><>>\"))\n  expect_false(correct_bracketing(\"\
    <>\"))\n  expect_false(correct_bracketing(\"><<><>>\"))\n  expect_false(correct_bracketing(\"\
    <<><>>>\"))\n  expect_false(correct_bracketing(\"<<<><>>>\"))\n})\n\n", "\n\t\
    if (length(grep(\"[^<>]\", brackets)) > 0)\n\t\tstop(\"Invalid input: Only '<'\
    \ and '>' are allowed.\")\n\tif (length(grep(\"^>\", brackets)) > 0)\n\t\treturn(FALSE)\n\
    \tif (length(grep(\"<$\", brackets)) > 0)\n\t\treturn(FALSE)\n\tif (length(grep(\"\
    <>\", brackets)) == 0)\n\t\treturn(TRUE)\n\treturn(correct_bracketing(gsub(\"\
    <>\", \"\", brackets)))\n}\n", "\n  lefts <- grepl(\"<\", brackets)\n  rights\
    \ <- grepl(\">\", brackets)\n  sum(lefts) == sum(rights)\n}\n", "\n    open =\
    \ 0\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) ==\
    \ '<') {\n            open = open + 1\n        } else {\n            open = open\
    \ - 1\n        }\n        if (open < 0) {\n            return(FALSE)\n       \
    \ }\n    }\n    if (open == 0) {\n        return(TRUE)\n    } else {\n       \
    \ return(FALSE)\n    }\n}\n", "\n  n <- nchar(brackets)\n  stack <- character(0)\n\
    \  for (i in 1:n) {\n    stack <- c(stack, substr(brackets, i, i))\n    if (stack[length(stack)]\
    \ == '>') {\n      if (length(stack) < 2 || stack[length(stack) - 1] != '<') {\n\
    \        return(FALSE)\n      }\n      stack <- stack[-c(length(stack) - 1, length(stack))]\n\
    \    }\n  }\n  return(length(stack) == 0)\n}\n", "\n  left_brackets <- brackets\
    \ %>% str_count(\"<\")\n  right_brackets <- brackets %>% str_count(\">\")\n  if(left_brackets\
    \ == right_brackets) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n    # create a stack by using a list\n    bracketStack <- list()\n  \
    \  # loop through each bracket in the string\n    for (bracket in brackets) {\n\
    \        # if the bracket is an opening bracket\n        if (bracket == '<') {\n\
    \            # push it onto the stack\n            bracketStack <- c(bracketStack,\
    \ '<')\n        } else {\n            # else if the bracket is a closing bracket\n\
    \            if (bracket == '>') {\n                # if the stack is empty\n\
    \                if (length(bracketStack) == 0) {\n                    # return\
    \ FALSE\n                    return(FALSE)\n                } else {\n       \
    \             # pop off the opening bracket from the stack\n                 \
    \   bracketStack <- bracketStack[-length(bracketStack)]\n                }\n \
    \           }\n        }\n    }\n    # if the stack is empty\n    if (length(bracketStack)\
    \ == 0) {\n        # return TRUE\n        return(TRUE)\n    } else {\n       \
    \ # else return FALSE\n        return(FALSE)\n    }\n}\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  # if the length\
    \ of brackets is even, return TRUE.\n  if (nchar(brackets) %% 2 == 0) {\n    return(TRUE)\n\
    \  }\n  else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  # ...\n}\n",
  "\n    # init counter\n    counter <- 0\n    # iterate over brackets\n    for (bracket\
    \ in brackets) {\n        # if bracket is '<' counter add 1\n        if (bracket\
    \ == '<') {\n            counter <- counter + 1\n        }\n        # if bracket\
    \ is '>' counter minus 1\n        if (bracket == '>') {\n            counter <-\
    \ counter - 1\n        }\n        # test counter\n        if (counter < 0) {\n\
    \            return(FALSE)\n        }\n    }\n    # test counter\n    if (counter\
    \ == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\n ", "\n    stack <- c()\n    for (i in seq_along(brackets)) {\n        if (brackets[i]\
    \ == '<') {\n            stack <- c(stack, '<')\n        } else {\n          \
    \  if (length(stack) == 0) {\n                return(FALSE)\n            } else\
    \ {\n                stack <- stack[-length(stack)]\n            }\n        }\n\
    \    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n  \
    \      return(FALSE)\n    }\n}\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n", "\n  if (brackets\
    \ == \"\") return(TRUE)\n  if (substr(brackets, 1, 1) == \">\") return(FALSE)\n\
    \  correct_bracketing(substr(brackets, 2, nchar(brackets)))\n}\n", "\n  # your\
    \ code here\n}", "\n  # Get the number of opening brackets\n  n_open <- nchar(gsub(\"\
    [^<]\", \"\", brackets))\n  # Get the number of closing brackets\n  n_close <-\
    \ nchar(gsub(\"[^>]\", \"\", brackets))\n  # Check if they are the same\n  n_open\
    \ == n_close\n}\n", "\n  # check if there is closing without opening bracket\n\
    \  if (startsWith(brackets, \">\")) {\n    return(FALSE)\n  }\n\n  if (endsWith(brackets,\
    \ \"<\")) {\n    return(FALSE)\n  }\n\n  if (grepl(\"<<\", brackets)) {\n    return(FALSE)\n\
    \  }\n\n  if (grepl(\">>\", brackets)) {\n    return(FALSE)\n  }\n\n  return(TRUE)\n\
    }\n", "\n  ## True if brackets are correct\n  ## False if brackets are not correct\n\
    \  correct <- TRUE\n  bracket_counter <- 0\n  for (character in brackets) {\n\
    \    if (character == \"<\") {\n      bracket_counter <- bracket_counter + 1\n\
    \    } else if (character == \">\") {\n      bracket_counter <- bracket_counter\
    \ - 1\n    }\n    if (bracket_counter < 0) {\n      correct <- FALSE\n    }\n\
    \  }\n  if (bracket_counter != 0) {\n    correct <- FALSE\n  }\n  return(correct)\n\
    }", "\n    \n}\n", "\n    if (length(brackets) %% 2 != 0) {\n        return(FALSE)\n\
    \    }\n    i <- 1\n    while (i <= length(brackets)) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '>') {\n                return(FALSE)\n\
    \            }\n            else {\n                i <- i + 2\n            }\n\
    \        }\n        else {\n            i <- i + 1\n        }\n    }\n    return(TRUE)\n\
    }\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  left <- 0\n  right <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    bracket <- substr(brackets, i, i)\n    if (bracket == \"<\") {\n    \
    \  left <- left + 1\n    } else if (bracket == \">\") {\n      right <- right\
    \ + 1\n    }\n    if (right > left) {\n      return(FALSE)\n    }\n  }\n  return(left\
    \ == right)\n}\n", "\n  return(TRUE)\n}\n ", "\n}\n ", "\n  #############################################################################\n\
    \  ## A nice solution by Xingxing Zeng.\n  if (0 == sum(unlist(strsplit(brackets,\
    \ \"\")) == \"<\")) {\n    return(TRUE)\n  } else if (0 == sum(unlist(strsplit(brackets,\
    \ \"\")) == \">\")) {\n    return(FALSE)\n  } else {\n    return(correct_bracketing(gsub(\"\
    <>\", \"\", brackets)))\n  }\n  #############################################################################\n\
    }", "\n  # YOUR CODE HERE\n}\n", "\n    if (nchar(brackets) % 2 != 0) {\n    \
    \    return(FALSE)\n    }\n    else {\n        for (i in 1:nchar(brackets)) {\n\
    \            if (substr(brackets, i, i) == '<') {\n                for (j in (i+1):nchar(brackets))\
    \ {\n                    if (substr(brackets, j, j) == '>') {\n              \
    \          return(TRUE)\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return(FALSE)\n}\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\n\
    correct_bracketing('<<><>>')\ncorrect_bracketing('><<>')\ncorrect_bracketing('<><>')\n",
  "\n  return(sum(sapply(brackets, function(x) x==\"<\"))==sum(sapply(brackets, function(x)\
    \ x==\">\")))\n}", "\n  if (identical(brackets[1], '<')) {\n    if (identical(brackets[length(brackets)],\
    \ '>')) {\n      correct_bracketing(substr(brackets, 2, length(brackets) - 1))\n\
    \    } else {\n      FALSE\n    }\n  } else {\n    TRUE\n  }\n}\n\n", "\n  # Create\
    \ an empty vector for keeping track of opening brackets\n  stack <- vector()\n\
    \  # Loop through each bracket\n  for (i in 1:nchar(brackets)) {\n    bracket\
    \ <- substr(brackets, i, i)\n    # Is the bracket an opening bracket?\n    if\
    \ (bracket == \"<\") {\n      # If so, add it to the stack\n      stack <- c(stack,\
    \ bracket)\n    } else {\n      # If not, pop the top of the stack (if it's empty,\
    \ return FALSE)\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  #\
    \ All brackets checked. If the stack is empty, we have no unmatched brackets\n\
    \  # If it is not empty, we have unmatched brackets\n  if (length(stack) == 0)\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  correct_bracketing2(brackets,\
    \ 0)\n}\n\ncorrect_bracketing2 <- function(brackets, depth) {\n  depth <- depth\
    \ + count(brackets, \"<\") - count(brackets, \">\")\n  if (depth < 0 || length(brackets)\
    \ == 0) {\n    return(FALSE)\n  } else if (depth == 0 && length(brackets) == 0)\
    \ {\n    return(TRUE)\n  } else {\n    return(correct_bracketing2(str_remove(brackets,\
    \ 1, 1), depth))\n  }\n}\n", "\n  # If the number of < is different than the number\
    \ of >, return FALSE\n  if (sum(grepl(\"<\", brackets)) != sum(grepl(\">\", brackets)))\
    \ {\n    return(FALSE)\n  }\n  # If there are the same number of < and >, then\
    \ the brackets are correct\n  return(TRUE)\n}\n", "\n  \n}\n", "\n  # complete\
    \ this function\n}\n", "\n    bkt <- strsplit(brackets, \"\")[[1]]\n    while\
    \ (length(grep(\"<\", bkt)) != 0) {\n        if (length(grep(\"<\", bkt)) == length(grep(\"\
    >\", bkt))) {\n            bkt <- bkt[-which(bkt %in% c(\"<\", \">\"))]\n    \
    \    } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n\
    }\n", "\n    n_left <- nchar(gsub(\"[^<]\", \"\", brackets))\n    n_right <- nchar(gsub(\"\
    [^>]\", \"\", brackets))\n    n_left == n_right\n}\n", "\n  balance = 0\n  for\
    \ (bracket in strsplit(brackets, \"\")[[1]]) {\n    if (bracket == \"<\") {\n\
    \      balance = balance + 1\n    } else if (bracket == \">\") {\n      balance\
    \ = balance - 1\n    }\n    if (balance < 0) {\n      return(FALSE)\n    }\n \
    \ }\n  return(balance == 0)\n}", "\n  if(!regexpr(\"<\", brackets) == -1 && !regexpr(\"\
    >\", brackets) == -1){\n    if(length(regexpr(\"<\", brackets)) == length(regexpr(\"\
    >\", brackets))){\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n", "\n\
    \    return (all(brackets[brackets == '<'] == '>'))\n}\n\ncorrect_bracketing('<')\n\
    correct_bracketing('<>')\ncorrect_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n",
  "\n  left_brackets <- grep(\"<\", strsplit(brackets, \"\")[[1]])\n  right_brackets\
    \ <- grep(\">\", strsplit(brackets, \"\")[[1]])\n  return(length(left_brackets)\
    \ == length(right_brackets))\n}", "\n    stack <- list()\n    for (x in brackets)\
    \ {\n        if (x == '<') {\n            stack <- c(stack, x)\n        } else\
    \ if (x == '>') {\n            if (length(stack) == 0) {\n                return(FALSE)\n\
    \            } else {\n                stack <- stack[-length(stack)]\n      \
    \      }\n        }\n    }\n    if (length(stack) > 0) {\n        return(FALSE)\n\
    \    } else {\n        return(TRUE)\n    }\n}\n", "\n  \n}\n", "\n  # Your code\
    \ here\n}\n ", "\n    OPEN  <- \"<\"\n    CLOSE <- \">\"\n    i     <- 1\n   \
    \ OPEN_count  <- 0\n    CLOSE_count <- 0\n    while (i <= nchar(brackets)) {\n\
    \        if (substr(brackets, i, i) == OPEN) {\n            OPEN_count <- OPEN_count\
    \ + 1\n        } else if (substr(brackets, i, i) == CLOSE) {\n            CLOSE_count\
    \ <- CLOSE_count + 1\n        }\n        i <- i + 1\n    }\n    return(OPEN_count\
    \ == CLOSE_count)\n}\n", "\n    # YOUR CODE HERE\n    brackets_count = 0\n   \
    \ for (i in brackets) {\n        if (i == '<') {\n            brackets_count =\
    \ brackets_count + 1\n        } else if (i == '>') {\n            brackets_count\
    \ = brackets_count - 1\n        }\n    }\n    if (brackets_count == 0) {\n   \
    \     TRUE\n    } else {\n        FALSE\n    }\n}\n\ncorrect_bracketing(\"<\"\
    )\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"\
    ><<>\")\n", "\n  if (is.null(brackets)) {\n    return(TRUE)\n  }\n  if (grepl('<$',\
    \ brackets)) {\n    return(FALSE)\n  }\n  if (grepl('^>', brackets)) {\n    return(FALSE)\n\
    \  }\n  if (any(grepl('^><', brackets))) {\n    return(FALSE)\n  }\n  if (grepl('><$',\
    \ brackets)) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n  # your code\
    \ goes here!\n}\n", "\n  left = 0\n  right = 0\n  for (b in brackets) {\n    if\
    \ (b == '<') {\n      left = left + 1\n    } else {\n      right = right + 1\n\
    \    }\n  }\n  return(left == right)\n}\n", "\n  par_brackets <- strsplit(brackets,\
    \ \"\")[[1]]\n  par_stack <- c()\n  for (i in 1:length(par_brackets)) {\n    if\
    \ (par_brackets[i] == \"<\") {\n      par_stack <- c(par_stack, \"<\")\n    }\
    \ else {\n      if (length(par_stack) == 0) {\n        return(FALSE)\n      }\
    \ else {\n        par_stack <- par_stack[-length(par_stack)]\n      }\n    }\n\
    \  }\n  if (length(par_stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n    result <- TRUE\n    bracket_stack <- vector()\n    for (bracket\
    \ in strsplit(brackets, split = '')[[1]]) {\n        if (bracket == '<') {\n \
    \           bracket_stack <- c(bracket_stack, bracket)\n        } else if (bracket\
    \ == '>') {\n            if (length(bracket_stack) == 0) {\n                result\
    \ <- FALSE\n                break\n            } else {\n                bracket_stack\
    \ <- bracket_stack[-length(bracket_stack)]\n            }\n        }\n    }\n\
    \    if (length(bracket_stack) > 0) {\n        result <- FALSE\n    }\n    return(result)\n\
    }\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  # Initialize an empty list to store the brackets\n\
    \  stack <- c()\n  # Loop through the characters in the brackets string\n  for\
    \ (bracket in strsplit(brackets, '')[[1]]) {\n    # If the bracket is an opening\
    \ bracket, add it to the stack\n    if (bracket == '<') {\n      stack <- c(stack,\
    \ bracket)\n    } else {\n      # If the bracket is a closing bracket and the\
    \ top of the stack is an opening bracket,\n      # remove it from the stack\n\
    \      if (length(stack) > 0 && stack[length(stack)] == '<') {\n        stack\
    \ <- stack[-length(stack)]\n      } else {\n        # If the bracket is a closing\
    \ bracket and the top of the stack is not an opening bracket,\n        # the brackets\
    \ are not properly bracketed and we can return FALSE\n        return(FALSE)\n\
    \      }\n    }\n  }\n  # If the stack is empty, there were no unclosed brackets\
    \ and we can return TRUE\n  return(length(stack) == 0)\n}\n", "\n    bracket_stack\
    \ <- c()\n    for (i in 1:nchar(brackets)) {\n        current_char <- substr(brackets,\
    \ i, i)\n        if (current_char == '<') {\n            bracket_stack <- c(bracket_stack,\
    \ current_char)\n        } else if (current_char == '>') {\n            if (length(bracket_stack)\
    \ == 0) {\n                return(FALSE)\n            } else {\n             \
    \   bracket_stack <- bracket_stack[-length(bracket_stack)]\n            }\n  \
    \      }\n    }\n    return(length(bracket_stack) == 0)\n}\n", "\n  # your code\
    \ here\n}\n", "\n  while ( length(grep(\"<>\", brackets)) > 0 ) {\n    brackets\
    \ <- gsub(\"<>\", \"\", brackets)\n  }\n  if ( length(brackets) == 0 ) {\n   \
    \ return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"\
    <<><>>\")\n\n", "\n    l = length(brackets)\n    if (l %% 2 == 1) {\n        return(FALSE)\n\
    \    }\n    # Split string into two, begin with the first half\n    check = sub(brackets,\
    \ '', 1:floor(l/2))\n    # Get the reverse of the latter half\n    second = sub(brackets,\
    \ '', ceiling(l/2):l)\n    check_second = sub(second, '', 1:floor(l/2))\n    #\
    \ Check if the result is \"\"\n    return(check == '' && check_second == '')\n\
    }\n\ncorrect_bracketing('<')\ncorrect_bracketing('<>')\ncorrect_bracketing('<<><>>')\n\
    correct_bracketing('><<>')\n", "\n  # YOUR CODE HERE\n}\n", "\n  left = length(grep('<',\
    \ brackets))\n  right = length(grep('>', brackets))\n  if (left == right) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (brackets\
    \ == \"<\"){\n    return(FALSE)\n  }\n  else if (brackets == \">\"){\n    return(FALSE)\n\
    \  }\n  else if (sum(strsplit(brackets, \"\")[[1]] == \">\") + sum(strsplit(brackets,\
    \ \"\")[[1]] == \"<\") != length(strsplit(brackets, \"\")[[1]])){\n    return(FALSE)\n\
    \  }\n  else if (sum(strsplit(brackets, \"\")[[1]] == \">\") != sum(strsplit(brackets,\
    \ \"\")[[1]] == \"<\")){\n    return(FALSE)\n  }\n  else if (strsplit(brackets,\
    \ \"\")[[1]][1] == \">\"){\n    return(FALSE)\n  }\n  else if (strsplit(brackets,\
    \ \"\")[[1]][length(strsplit(brackets, \"\")[[1]])] == \"<\"){\n    return(FALSE)\n\
    \  }\n  else {\n    return(TRUE)\n  }\n}\n ", "\n  while (grepl('<>', brackets))\
    \ brackets <- gsub('<>', '', brackets)\n  return(brackets == '')\n}\n", "\n  if\
    \ (nchar(brackets) == 0) return(TRUE)\n  else if (substr(brackets, 1, 1) == '<')\
    \ return(correct_bracketing(substr(brackets, 2, nchar(brackets))) && substr(brackets,\
    \ nchar(brackets), nchar(brackets)) == '>')\n  else return(FALSE)\n}\n", "\n \
    \ bracket_open <- 0\n  bracket_close <- 0\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"<\") {\n      bracket_open <- bracket_open\
    \ + 1\n    } else {\n      bracket_close <- bracket_close + 1\n    }\n  }\n  if\
    \ (bracket_open == bracket_close) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  left_brackets <- brackets[brackets == '<']\n  right_brackets\
    \ <- brackets[brackets == '>']\n  return(length(left_brackets) == length(right_brackets))\n\
    }\n", "\n  # evaluate if the first bracket is \"<\"\n  # if it is:\n  # - take\
    \ the index of the last bracket in the string\n  # - return FALSE if it is not\
    \ a \">\"\n  # - take the substring of brackets from the second to the last one\n\
    \  # - recall the function recursively\n  # if it is not:\n  # - return FALSE\n\
    \  # the function will return TRUE in the base case:\n  # when the length of the\
    \ substring is 0\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets,\
    \ nchar(brackets), nchar(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\ncorrect_bracketing(\"<>\")\n\ncorrect_bracketing(\"\
    <>>\")\n\ncorrect_bracketing(\"<<><>>\")\n\ncorrect_bracketing(\"><<>\")\n", "\n\
    \    \n    bracket_stack <- c()\n    \n    for (bracket in strsplit(brackets,\
    \ \"\")[[1]]) {\n        if (bracket == \"<\") {\n            bracket_stack <-\
    \ c(bracket_stack, bracket)\n        } else if (bracket == \">\") {\n        \
    \    if (length(bracket_stack) == 0) {\n                return(FALSE)\n      \
    \      } else {\n                bracket_stack <- bracket_stack[-length(bracket_stack)]\n\
    \            }\n        }\n    }\n    \n    if (length(bracket_stack) == 0) {\n\
    \        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n", "\n \
    \ newString <- brackets\n  repeat {\n    newString <- gsub(\"<>\", \"\", newString)\n\
    \    if (nchar(newString) == 0) {\n      return(TRUE)\n    }\n    if (nchar(newString)\
    \ != nchar(gsub(\"<>\", \"\", newString))) {\n      next\n    }\n    return(FALSE)\n\
    \  }\n}\n", "\n  open_count <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == '<') {\n      open_count <- open_count + 1\n    } else {\n      open_count\
    \ <- open_count - 1\n    }\n    if (open_count < 0) {\n      return(FALSE)\n \
    \   }\n  }\n  if (open_count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  brackets_reversed <- stringr::str_reverse(brackets)\n  stringr::str_replace_all(x\
    \ = brackets_reversed, pattern = '<', replacement = '>') == brackets\n}\n", "\n\
    \    if (brackets[1] == '>') {\n        return (FALSE)\n    } else {\n       \
    \ if (length(brackets) == 1) {\n            return (TRUE)\n        } else {\n\
    \            if (brackets[1] == '<') {\n                if (brackets[2] == '>')\
    \ {\n                    return (correct_bracketing(brackets[-c(1, 2)]))\n   \
    \             } else {\n                    return (correct_bracketing(brackets[-1]))\n\
    \                }\n            } else {\n                return (correct_bracketing(brackets[-1]))\n\
    \            }\n        }\n    }\n}\n", "\n  return(\n    # **YOUR CODE HERE**\n\
    \  )\n}\n ", "\n  left  <- length(grep(\"<\", brackets))\n  right <- length(grep(\"\
    >\", brackets))\n  left == right\n}\n\n", "\n  n=nchar(brackets)\n  stack=c()\n\
    \  for (i in 1:n) {\n    chr=substr(brackets,i,i)\n    if (chr=='<')\n      stack=c(stack,chr)\n\
    \    else if (chr=='>') {\n      if (length(stack)==0)\n        return(FALSE)\n\
    \      stack=stack[-length(stack)]\n    }\n  }\n  if (length(stack)==0)\n    return(TRUE)\n\
    \  else\n    return(FALSE)\n}\n", "\n  return(brackets == \"<>\")\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
