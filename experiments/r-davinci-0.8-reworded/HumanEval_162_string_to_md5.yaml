name: HumanEval_162_string_to_md5
language: r
prompt: "# Given a string 'text', return its md5 hash equivalent string.\n# If 'text'\
  \ is an empty string, return NULL.\n# >>> string_to_md5('Hello world')\n# '3e25960a79dbc69b674cd4ec67a72c62'\n\
  string_to_md5 <- function(text) {"
tests: "test_humaneval <- function() {\ncandidate <- string_to_md5\n    if(!identical(candidate('Hello\
  \ world'), '3e25960a79dbc69b674cd4ec67a72c62')){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ NULL)){quit('no', 1)}\n    if(!identical(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')){quit('no',\
  \ 1)}\n    if(!identical(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n\tif (nchar(text) == 0L) {\n\t\tNULL\n\t} else {\n\t\tdigest::digest(text,\
    \ algo = 'md5', serialize = FALSE)\n\t}\n}\n", "\n    if(is.null(text) || text\
    \ == \"\") {\n        return(NULL)\n    }\n    else {\n        return(toString(digest(text,\
    \ algo = \"md5\", serialize = FALSE)))\n    }\n}\n", "\n  if (nchar(text) == 0)\
    \ {\n    return(NULL)\n  } else {\n    return(md5sum(charToRaw(text)))\n  }\n}",
  "\n  if (length(text) == 0) return(NULL)\n  tolower(digest(text, algo = 'md5', serialize\
    \ = FALSE))\n}", "\n  if (nchar(text) == 0) {\n    return(NULL)\n  }\n  digest::digest(text,\
    \ algo = 'md5', serialize = FALSE)\n}\n", "\n  if(length(text) == 0) {\n    NULL\n\
    \  } else {\n    digest::digest(x = text, algo = 'md5', serialize = FALSE)\n \
    \ }\n}\n", "\n    if (str_length(text) == 0) {\n        return(NULL)\n    }\n\
    \    library(digest)\n    md5_hash <- digest(text, algo=\"md5\", raw=TRUE)\n \
    \   return(paste(formatC(md5_hash, width=2, format=\"x\", upper.case=TRUE), collapse=\"\
    \"))\n}\n", "\n  if (nzchar(text)) {\n    digest::digest(text, algo=\"md5\")\n\
    \  } else {\n    NULL\n  }\n}\n", "\n  if(length(text) == 0) {\n    return(NULL)\n\
    \  }\n  out <- digest(text, algo = 'md5', serialize = FALSE)\n  return(out)\n}",
  "\n    if(text == \"\"){\n        return(NULL)\n    }\n    digest(text, algo = \"\
    md5\")\n}\n", "\n    if (length(text) > 0) {\n        return(md5(text))\n    }\
    \ else {\n        return(NULL)\n    }\n}\n", "\n    if (nchar(text) == 0) {\n\
    \        return(NULL)\n    } else {\n        return(sub(\"\\\\.0+$\", \"\", digest(text,\
    \ algo = \"md5\", serialize = FALSE)))\n    }\n}\n", "\n  if(length(text) == 0){\n\
    \    return(NULL)\n  }\n  else {\n    return(digest(text, algo = \"md5\", serialize\
    \ = FALSE))\n  }\n}\n", "\n  require(digest)\n  if (nchar(text) == 0) {\n    return(NULL)\n\
    \  }\n  return(digest(text, algo = 'md5'))\n}", "\n    if (length(text) == 0)\
    \ {\n        return(NULL)\n    }\n    else {\n        m <- digest(text, algo =\
    \ \"md5\", serialize = FALSE)\n        return(paste(m, collapse = \"\"))\n   \
    \ }\n}\n", "\n    if(text == \"\") {\n        return(NULL)\n    }\n    else {\n\
    \        return(digest(text, algo = \"md5\", serialize = FALSE))\n    }\n}\nstring_to_md5('Hello\
    \ world')\n", "\n  if (length(text) == 0) return(NULL)\n  else return(digest(text,\
    \ algo = 'md5', serialize = F))\n}\n", "\n    if (nchar(text) == 0) return(NULL)\n\
    \    return(digest(text, algo = 'md5', serialize = FALSE))\n}\n", "\n  if (text\
    \ == \"\") {\n    NULL\n  } else {\n    digest::digest(text, algo = \"md5\", serialize\
    \ = FALSE)\n  }\n}\n", "\n  if (length(text) == 0) {\n    return(NULL)\n  } else\
    \ {\n    return(digest(text, algo = 'md5', serialize = FALSE))\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
