name: HumanEval_120_maximum
language: r
prompt: "# Given a vector arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum(c(-3,\
  \ -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4, 4), 2)\n# c(4,\
  \ 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n# c(2)\n# Note:\n\
  # 1. The length of the vector will be in the range of [1, 1000].\n# 2. The elements\
  \ in the vector will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n\
  maximum <- function(arr, k) {"
tests: "test_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
  \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
  \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2, -1,\
  \ -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123, 20,\
  \ 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
  \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
  \ 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4), 2),\
  \ c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10), 2), c(-10,\
  \ 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23, 243, -400, 0),\
  \ 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    stopifnot(k >= 0, k <= length(arr))\n    sort(arr, decreasing\
    \ = TRUE)[1:k]\n}\n", "\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n\
    \    sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n    max_index <- c()\n    i <-\
    \ 0\n    while (i < k) {\n        m <- max(arr)\n        max_index <- c(max_index,\
    \ which(arr == m))\n        arr[max_index] <- -Inf\n        i <- i + 1\n    }\n\
    \    return(arr[max_index])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4),\
    \ 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}", "\n  # Your code here\n}", "\n\t# Like in C++, R sort works\
    \ in-place.\n\tarr[order(arr, decreasing = TRUE)][1:k]\n}\nprint(maximum(c(-3,\
    \ -4, 5), 3))\nprint(maximum(c(4, -4, 4), 2))\nprint(maximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1))", "\n  sort(arr, decreasing = TRUE)[1:k]\n}", "\n  min = min(arr)\n\
    \  max = max(arr)\n  temp = rep(min, length(arr))\n  for (i in seq_along(arr))\
    \ {\n    if (arr[i] > temp[i]) {\n      temp[i] = arr[i]\n    }\n  }\n  if (k\
    \ > length(arr)) {\n    return(sort(arr, decreasing = TRUE))\n  } else {\n   \
    \ return(sort(temp, decreasing = TRUE)[1:k])\n  }\n}", "\n    # TODO: Fill in\
    \ the blanks.\n    sorted_arr <- sort(arr, decreasing = TRUE)\n    print(head(sorted_arr,\
    \ k))\n}\n\ntests <- function(v, k) {\n    expected <- sort(v, decreasing = TRUE)[1:k]\n\
    \    print(expected)\n    output <- maximum(v, k)\n    print(output)\n    stopifnot(identical(output,\
    \ expected))\n}\n\narr1 <- c(-3, -4, 5)\nk1 <- 3\ntests(arr1, k1)\n\narr2 <- c(4,\
    \ -4, 4)\nk2 <- 2\ntests(arr2, k2)\n\narr3 <- c(-3, 2, 1, 2, -1, -2, 1)\nk3 <-\
    \ 1\ntests(arr3, k3)\n\narr4 <- c(5, 2, 3, 1, 4)\nk4 <- 2\ntests(arr4, k4)\n\n\
    arr5 <- c(1000, 1001, 857, 1)\nk5 <- 3\ntests(arr5, k5)\n\narr6 <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
  "\n    ord <- order(arr, decreasing = TRUE)\n    res <- arr[ord]\n    return(res[1:k])\n\
    }\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n ", "\n    arr <- sort(arr, decreasing = TRUE)\n    arr[1:k]\n}\n",
  "\n    if (length(arr) < k) stop(\"k is too big\")\n    sort(arr, decreasing = TRUE)[1:k]\n\
    }\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}", "\n  order(arr,\
    \ decreasing = TRUE)[1:k]\n}\n", "\n    if (length(arr) == 1) {\n        return(arr)\n\
    \    }\n    start <- 1\n    end <- length(arr)\n    while (start < end) {\n  \
    \      pivot <- arr[start]\n        i <- start + 1\n        j <- end\n       \
    \ while (i <= j) {\n            while (i <= j && arr[i] >= pivot) {\n        \
    \        i <- i + 1\n            }\n            while (i <= j && arr[j] <= pivot)\
    \ {\n                j <- j - 1\n            }\n            if (i < j) {\n   \
    \             tmp <- arr[i]\n                arr[i] <- arr[j]\n              \
    \  arr[j] <- tmp\n            }\n        }\n        tmp <- arr[start]\n      \
    \  arr[start] <- arr[j]\n        arr[j] <- tmp\n        if (j == k) {\n      \
    \      break\n        } else if (j < k) {\n            start <- j + 1\n      \
    \  } else {\n            end <- j - 1\n        }\n    }\n    arr[1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    if (length(arr) > 1) {\n        for (i in 1:(length(arr) - 1)) {\n      \
    \      if (arr[i] > arr[i + 1]) {\n                arr[i] <- arr[i] + arr[i +\
    \ 1]\n                arr[i + 1] <- arr[i] - arr[i + 1]\n                arr[i]\
    \ <- arr[i] - arr[i + 1]\n            }\n        }\n        maximum(arr[1:(length(arr)\
    \ - 1)], k)\n    } else {\n        arr\n    }\n}", "\n  sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\n", "\n    length <- length(arr)\n \
    \   k <- ifelse(k > length, length, k)\n    for (i in 1:(length - 1)) {\n    \
    \    for (j in (i + 1):length) {\n            if (arr[i] < arr[j]) {\n       \
    \         arr[i] <- arr[i] + arr[j]\n                arr[j] <- arr[i] - arr[j]\n\
    \                arr[i] <- arr[i] - arr[j]\n            }\n        }\n    }\n\
    \    res <- c()\n    for (i in (length - k + 1):length) {\n        res <- c(res,\
    \ arr[i])\n    }\n    return(res)\n}\n", "\n    set.seed(1)\n    temp <- sort(arr)\n\
    \    temp[(length(temp)-k+1):length(temp)]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    sort(arr, decreasing\
    \ = TRUE)[1:k]\n}", "\n    sorted_arr <- sort(arr, decreasing = TRUE)\n    return(sorted_arr[1:k])\n\
    }", "\n    # Your code here\n    maxlist <- NULL\n    for (i in 1:k) {\n     \
    \   max_number <- max(arr)\n        maxlist <- c(maxlist, max_number)\n      \
    \  arr <- arr[arr != max_number]\n    }\n    return(maxlist)\n}\n ", "\n    sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n  sorted_arr <- sort(arr, decreasing\
    \ = TRUE)\n  return(sorted_arr[1:k])\n}", "\n  sort(arr, decreasing = TRUE)[1:k]\n\
    }\n", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n}", "\n    arr[order(arr,\
    \ decreasing = TRUE)[1:k]]\n}\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\n",
  "\n    # Your Code Here\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n ", "\n  if (k <= 0) {\n    return(NULL)\n\
    \  }\n  if (k == 1) {\n    return(max(arr))\n  }\n  for (i in 1:length(arr)) {\n\
    \    for (j in i:length(arr)) {\n      if (arr[i] < arr[j]) {\n        temp <-\
    \ arr[i]\n        arr[i] <- arr[j]\n        arr[j] <- temp\n      }\n    }\n \
    \ }\n  return(arr[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    return(arr[order(arr, decreasing\
    \ = TRUE)[1:k]])\n}\n", "\n    \n    # If vector is sorted, just return the last\
    \ k elements\n    if (is.sorted(arr)) {\n        return(tail(arr, k))\n    }\n\
    \    \n    # If vector is not sorted, sort and return the last k elements\n  \
    \  else {\n        return(tail(sort(arr), k))\n    }\n    \n}\nmaximum(c(-3, -4,\
    \ 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\nmaximum(c(-3,\
    \ -4, 5), 5)\n", "\n    # this is a greedy algorithm\n    # the time complexity\
    \ is O(klogk)\n    # the space complexity is O(k)\n    # to avoid the TLE error\
    \ when we are dealing with a loooooong arr\n    if (length(arr) <= k) return(sort(arr,\
    \ decreasing = TRUE))\n    else {\n        # sort the first k elements\n     \
    \   max_heap <- heapify(arr[1:k])\n        # start from the k + 1 element\n  \
    \      for (i in (k + 1):length(arr)) {\n            # if the arr[i] is bigger\
    \ than the max element in the heap\n            if (arr[i] > max_heap[1]) {\n\
    \                # update the heap: replace the max element\n                max_heap[1]\
    \ <- arr[i]\n                heapify(max_heap)\n            }\n        }\n   \
    \     # sort the max heap\n        sort(max_heap, decreasing = TRUE)\n    }\n\
    }\n\nmaximum <- function(arr, k) {\n    if (length(arr) <= k) return(sort(arr,\
    \ decreasing = TRUE))\n    else {\n        max_heap <- heapify(arr[1:k])\n   \
    \     for (i in (k + 1):length(arr)) {\n            if (arr[i] > max_heap[1])\
    \ {\n                max_heap[1] <- arr[i]\n                heapify(max_heap)\n\
    \            }\n        }\n        sort(max_heap, decreasing = TRUE)\n    }\n\
    }\n", "\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n \
    \   # Write your code here.\n    return (sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n}\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n \
    \   sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n\t# Answer is actually:\n\
    \t# sort(arr, decreasing = TRUE)[1:k]\n\t# But we'll do a quickselect because\
    \ it's more fun!\n\t# First things first...\n\tif (k == 0) {\n\t\treturn(NULL)\n\
    \t}\n\tif (k >= length(arr)) {\n\t\treturn(sort(arr, decreasing = TRUE))\n\t}\n\
    \toutput <- numeric(k)\n\t# Set up our pivot point (first element)\n\tpivot <-\
    \ arr[1]\n\t# Set up the subscripts for our left and right arrays\n\tleft <- arr[arr\
    \ < pivot]\n\tright <- arr[arr > pivot]\n\t# If the length of the left and right\
    \ arrays is the same as our k, we've got\n\t# the answer!\n\tif (length(left)\
    \ == k - 1) {\n\t\toutput[1:length(left)] <- left\n\t\toutput[k] <- pivot\n\t\t\
    return(output)\n\t}\n\t# If the length of the left array is less than our k, search\
    \ in the right\n\t# array, appending the pivot onto the left array.\n\tif (length(left)\
    \ < k - 1) {\n\t\toutput[1:length(left)] <- left\n\t\toutput[length(left) + 1]\
    \ <- pivot\n\t\toutput[(length(left) + 2):k] <- maximum(right, k - length(left)\
    \ - 1)\n\t\treturn(output)\n\t}\n\t# If the length of the left array is greater\
    \ than our k, search in the left\n\t# array, appending the pivot onto the left\
    \ array.\n\tif (length(left) > k - 1) {\n\t\toutput[1:k] <- maximum(left, k)\n\
    \t\treturn(output)\n\t}\n}", "\n    arr <- sort(arr, decreasing = TRUE)\n    return(arr[1:k])\n\
    }\nset.seed(123)\nmaximum(sample(seq(-1000, 1000), 1000), 3)\n", "\n    sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4),\
    \ 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n ", "\n    arr[order(arr, decreasing\
    \ = TRUE)[1:k]]\n}\n", "\n    order(arr, decreasing = TRUE)[1:k]\n}", "\n    sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\n\narr <- c(-3, -4, 5)\nk <- 3", "\n  sort(arr, decreasing\
    \ = TRUE)[1:k]\n}\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}", "\n    sort(arr,\
    \ decreasing = TRUE)[1:k]\n}", "\n    maxs <- sort(arr, decreasing = TRUE)\n \
    \   return(maxs[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    if (length(arr) == 1) {\n   \
    \     return(arr)\n    }\n    if (k == 1) {\n        return(c(max(arr)))\n   \
    \ }\n    pivot <- arr[sample(1:length(arr), 1)]\n    pivot_max <- arr[arr <= pivot]\n\
    \    pivot_min <- arr[arr > pivot]\n    if (length(pivot_max) >= k) {\n      \
    \  return(maximum(pivot_max, k))\n    } else if (length(pivot_max) == k - 1) {\n\
    \        return(pivot_max)\n    } else {\n        return(sort(c(maximum(pivot_max,\
    \ length(pivot_max)), \n                     maximum(pivot_min, k - length(pivot_max)))))\n\
    \    }\n}", "\n  sorted <- sort(arr, decreasing = TRUE)\n  return(sorted[1:k])\n\
    }\n", "\n  maximum <- arr[order(arr, decreasing = TRUE)]\n  maximum[1:k]\n}\n",
  "\n    ans <- arr[order(arr, decreasing = TRUE)]\n    return(ans[1:k])\n}", "\n\
    \  arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n  # Solution 1\n  # output\
    \ <- c()\n  # i <- 1\n  # while (i <= k) {\n  #   output <- c(output, max(arr))\n\
    \  #   arr <- arr[-which.max(arr)]\n  #   i <- i + 1\n  # }\n  # return(output)\n\
    \  \n  # Solution 2\n  output <- c()\n  while (length(output) < k) {\n    max_pos\
    \ <- which.max(arr)\n    output <- c(output, arr[max_pos])\n    arr <- arr[-max_pos]\n\
    \  }\n  return(output)\n}\n", "\n    ## input: arr, a vector of integers, k, a\
    \ positive integer\n    ## output: a vector, containing the maximum k numbers\
    \ in arr\n    ## Your code here\n}\n ", "\n  return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\nprint(maximum(c(-3, -4, 5), 3))\nprint(maximum(c(4, -4, 4), 2))\nprint(maximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1))\n", "\n  # Sorting an array has time complexity O(n*log(n))\n\
    \  sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\n", "\n    #\
    \ write your code here\n}", "\n    length(arr)\n    return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\n", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n    #\
    \ Write your code here\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n ", "\n    arr[order(arr, decreasing =\
    \ TRUE)[1:k]]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\n",
  "\n  x <- sort(arr, decreasing = TRUE)\n  y <- sort(tail(x, k))\n  return(y)\n}\n\
    print(maximum(c(-3, -4, 5), 3))\nprint(maximum(c(4, -4, 4), 2))\nprint(maximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1))\n", "\n    # Write the code here\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4),\
    \ 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    arr[rev(order(arr))][1:k]\n\
    }\n", "\n  #my code here\n}", "\n  arr[order(arr, decreasing = TRUE)][1:k]\n}\n\
    maximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n ", "\n    if (k == 0) {\n        return(vector(mode=\"numeric\"\
    , length=0))\n    }\n    else {\n        return(sort(arr, decreasing=TRUE)[1:k])\n\
    \    }\n}\n", "\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n  temp\
    \ <- arr[order(arr, decreasing = TRUE)][1:k]\n  return(temp)\n}\n", "\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n \narr = c(-3, -4, 5)\nk = 3\nmaximum(arr, k)\n\
    \narr = c(4, -4, 4)\nk = 2\nmaximum(arr, k)\n\narr = c(-3, 2, 1, 2, -1, -2, 1)\n\
    k = 1\nmaximum(arr, k)", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  ##\
    \ your code goes here\n  largest <- arr[order(arr, decreasing = TRUE)]\n  largest[1:k]\n\
    }\n\narr <- c(-3, -4, 5)\nmaximum(arr, 3)\n\narr <- c(4, -4, 4)\nmaximum(arr,\
    \ 2)\n\narr <- c(-3, 2, 1, 2, -1, -2, 1)\nmaximum(arr, 1)\n", "\n    arr[order(arr,\
    \ decreasing = TRUE)][1:k]\n}", "\n  # sort the vector in decreasing order\n \
    \ s <- sort(arr, decreasing = TRUE)\n  # return the first k elements\n  return(s[1:k])\n\
    }\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 3)\n", "\n  sort(arr, decreasing\
    \ = TRUE)[1:k]\n}\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\n",
  "\n    return(arr[order(arr, decreasing = TRUE)[1:k]])\n}\n\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n \
    \ # write your code here\n  if (k == 0) {\n    return(c())\n  }\n  if (k == 1)\
    \ {\n    return(c(max(arr)))\n  }\n  if (k == length(arr)) {\n    return(sort(arr,\
    \ decreasing = TRUE))\n  }\n  output <- c()\n  arr_min <- min(arr)\n  i <- 1\n\
    \  while (i <= k) {\n    i <- i + 1\n    j <- which.max(arr)\n    output <- c(output,\
    \ arr[j])\n    arr[j] <- arr_min\n  }\n  return(output)\n}\n", "\n    arr[order(arr,\
    \ decreasing = TRUE)][1:k]\n}", "\n    if (k > length(arr)) {\n        k <- length(arr)\n\
    \    }\n    return(sort(arr, partial = arr[1:k], decreasing = TRUE))\n}\n", "\n\
    \    if (k == 0) return(numeric(0))\n    arr <- sort(arr, decreasing = TRUE)\n\
    \    arr[1:k]\n}\n", "\n    # sort arr\n    sorted <- sort(arr, decreasing = TRUE)\n\
    \    # return the first k elements of the sorted vector\n    return(sorted[1:k])\n\
    }", "\n    \n}\n ", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4,\
    \ 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n\
    \    heap <- MaxHeap()\n    for (num in arr) {\n        if (heap$length() < k)\
    \ {\n            heap$push(num)\n        } else {\n            if (num > heap$peek())\
    \ {\n                heap$pop()\n                heap$push(num)\n            }\n\
    \        }\n    }\n    return(heap$data)\n}", "\n    \n    # Write your code here\n\
    \    arr <- arr[order(arr, decreasing = TRUE)]\n    arr[1:k]\n}\n ", "\n  # Your\
    \ code here\n}\n", "\n  # Write your code here\n  # Method 1: sort the vector\
    \ using sort() in the descending order (larger to smaller)\n  # and return the\
    \ first k elements\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n   \
    \ return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n  # Your code here\n\
    }", "\n  o <- order(arr, decreasing = TRUE)\n  return(arr[o[1:k]])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)",
  "\n    stopifnot(length(arr) > 0)\n    stopifnot(length(arr) <= 1000)\n    stopifnot(all(arr\
    \ >= -1000) & all(arr <= 1000))\n    stopifnot(k > 0)\n    stopifnot(k <= length(arr))\n\
    \    sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n  if (length(arr) <\
    \ k) stop(\"not enough elements\")\n  out <- arr[which.max(arr)]\n  i <- k - 1\n\
    \  while (i > 0) {\n    m <- which.max(arr)\n    arr[m] <- -Inf\n    out <- c(out,\
    \ arr[m])\n    i <- i - 1\n  }\n  return(out)\n}\n", "\n\t# create a vector with\
    \ the minimum k numbers\n\tres <- arr[order(arr)[1:k]]\n\t# loop over every element\
    \ in arr that is bigger than the minimum and insert\n\t# it at the correct position\
    \ into res\n\tfor (i in 1:length(arr)) {\n\t\tif (arr[i] > min(res)) {\n\t\t\t\
    for (j in 1:length(res)) {\n\t\t\t\tif (arr[i] <= res[j]) {\n\t\t\t\t\tres <-\
    \ c(res[1:(j-1)], arr[i], res[j:length(res)])\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn(res)\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4,\
    \ 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n  # use sort function and\
    \ then return the last k elements\n  sort(arr)[length(arr):(length(arr)-k+1)]\n\
    }\n", "\n  a <- sort(arr, decreasing = TRUE)\n  a[1:k]\n}", "\n\ta <- sort(arr,\
    \ decreasing = TRUE)\n\ta[1:k]\n}\n", "\n  # Your code here\n}", "\n    if (length(arr)\
    \ < k) {\n        stop(\"The vector is too short.\")\n    }\n    if (length(arr)\
    \ == k) {\n        return(sort(arr, decreasing = TRUE))\n    }\n    # find the\
    \ k-th largest number in the array.\n    a <- sort(arr, decreasing = TRUE)\n \
    \   b <- a[k]\n    c <- a[a <= b]\n    return(c)\n}", "\n  # Write your code here\n\
    }", "\n  res <- arr[order(arr, decreasing = TRUE)]\n  res[1:k]\n}\n", "\n  # Please\
    \ add your code here\n  return(arr)\n}", "\n  # write your code here\n}", "\n\
    \    l <- length(arr)\n    if (l == 1 || k == 1) {\n        return(max(arr))\n\
    \    }\n    else if (k == l) {\n        return(sort(arr))\n    }\n    else {\n\
    \        x <- sort(arr)\n        return(x[length(x)-k+1:length(x)])\n    }\n}\n\
    maximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    if (k == 1) {\n        return(max(arr))\n    }\n    else {\n        return(sort(arr,\
    \ decreasing = TRUE)[seq(k)])\n    }\n}", "\n    if (k == 0) {\n        return(NULL)\n\
    \    }\n    if (k == 1) {\n        return(c(max(arr)))\n    }\n    if (k == length(arr))\
    \ {\n        return(sort(arr, decreasing = TRUE))\n    }\n    if (k > length(arr))\
    \ {\n        stop(\"k must be smaller than length of arr!\")\n    }\n    res <-\
    \ arr[1:k]\n    for (i in (k+1):length(arr)) {\n        if (arr[i] > min(res))\
    \ {\n            res[res == min(res)] <- arr[i]\n        }\n    }\n    return(sort(res,\
    \ decreasing = TRUE))\n}\n", "\n    stopifnot(k > 0)\n    stopifnot(length(arr)\
    \ >= k)\n    if (length(arr) == k) {\n        return(sort(arr, decreasing = TRUE))\n\
    \    }\n    least <- function(arr, k) {\n        if (length(arr) <= k) {\n   \
    \         return(arr)\n        }\n        res <- arr[1]\n        for (i in 2:length(arr))\
    \ {\n            if (arr[i] < res) {\n                res <- arr[i]\n        \
    \    }\n        }\n        res\n    }\n    res <- arr[1:k]\n    for (i in (k +\
    \ 1):length(arr)) {\n        max_value <- least(res, k)\n        if (arr[i] >\
    \ max_value) {\n            res <- c(res[res != max_value], arr[i])\n        }\n\
    \    }\n    sort(res, decreasing = TRUE)\n}\n", "\n    return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    if (length(arr) == 1) {\n        return(arr)\n    }\n    new_arr <- arr[order(arr,\
    \ decreasing = TRUE)[1:k]]\n    return(new_arr)\n}", "\n    arr <- arr[arr !=\
    \ -Inf]\n    arr <- arr[arr != Inf]\n    if (length(arr) == 0)\n        return(c())\n\
    \    else if (k > length(arr))\n        return(arr)\n    else {\n        kmax\
    \ <- integer(k)\n        for (i in 1:k) {\n            max_index <- which.max(arr)\n\
    \            kmax[i] <- arr[max_index]\n            arr[max_index] <- -Inf\n \
    \       }\n        return(kmax)\n    }\n}\n", "\n    arr[order(arr, decreasing\
    \ = TRUE)][1:k]\n}", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    # Write your solution here\n}\n ", "\n    arr <- arr[order(arr, decreasing\
    \ = TRUE)]\n    return(arr[1:k])\n}\nprint(\"Example 1:\")\nmaximum(c(-3, -4,\
    \ 5), 3)\nprint(\"Example 2:\")\nmaximum(c(4, -4, 4), 2)\nprint(\"Example 3:\"\
    )\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    arr[order(arr, decreasing\
    \ = TRUE)][1:k]\n}", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n}\nset.seed(12)\n\
    arr <- sample(seq(-1000, 1000), 1000, replace = TRUE)\nmaximum(arr, 1)\n", "\n\
    \    max <- NULL\n    for (n in 1:k) {\n        max <- c(max, max(arr))\n    \
    \    arr <- arr[arr != max(arr)]\n    }\n    max\n}\nmaximum(c(-3, -4, 5), 3)\n\
    maximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\nmaximum(c(-3,\
    \ -4, -5), 3)\n", "\n  sort(arr, partial = k)\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    sort(arr, decreasing\
    \ = TRUE)[1:k]\n}", "\n  n <- length(arr)\n  arr_r <- arr[order(arr, decreasing\
    \ = TRUE)]\n  arr_r[1:k]\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\n\
    maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n  ord <- order(arr, decreasing =\
    \ TRUE)\n  arr[ord[1:k]]\n}\n", "\n    # sort the array and then extract the last\
    \ k elements\n    sort(arr, decreasing = TRUE)[1:k]\n}", "\n  # Your code here\n\
    \  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    if (k == 1) {\n   \
    \     return(max(arr))\n    }\n    return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n  if (k > length(arr))\
    \ {\n    stop(\"invalid value for k\")\n  } else {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n  }\n}\n", "\n    if (length(arr) == 1) return(arr)\n    if (k ==\
    \ 1) return(max(arr))\n    pivot <- arr[1]\n    left <- arr[arr < pivot]\n   \
    \ right <- arr[arr > pivot]\n    if (length(left) >= k) return(maximum(left, k))\n\
    \    if (length(left) + 1 == k) return(c(left, pivot))\n    return(c(left, pivot,\
    \ maximum(right, k - length(left) - 1)))\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    sort(arr, decreasing\
    \ = TRUE)[1:k]\n}\n", "\n  arr <- sort(arr, decreasing = TRUE)\n  arr[1:k]\n}\n\
    maximum(c(-3, -4, 5), 3)\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    \ ", "\n  res <- arr[order(arr, decreasing = TRUE)]\n  res[1:k]\n}\nres1 <- maximum(c(-3,\
    \ -4, 5), 3)\nstopifnot(res1 == c(-4, -3, 5))\nres2 <- maximum(c(4, -4, 4), 2)\n\
    stopifnot(res2 == c(4, 4))\nres3 <- maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\nstopifnot(res3\
    \ == c(2))\nres4 <- maximum(c(-3, 2, 1, 2, -1, -2, 1), 7)\nstopifnot(res4 == c(2,\
    \ 2, 1, 1, -1, -2, -3))", "\n\tnames(arr) <- NULL\n\tsort(arr, decreasing = TRUE)[1:k]\n\
    }\n", "\n  sorted <- sort(arr, decreasing = TRUE)\n  head(sorted, k)\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\n\nmaximum(c(4, -4, 4), 2)\n\nmaximum(c(-3, 2, 1, 2, -1, -2, 1),\
    \ 1)\n", "\n  arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n  sorted = sort(arr,\
    \ decreasing = TRUE)\n  return(sorted[1:k])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4,\
    \ -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n    b <- unique(arr)\n\
    \    b <- sort(b, decreasing = TRUE)\n    return(b[1:k])\n}\nmaximum(c(-3, -4,\
    \ 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n\
    \    return(arr[order(arr, decreasing = TRUE)[1:k]])\n}\n \n", "\n  # Your code\
    \ here\n  result <- arr[order(arr, decreasing = TRUE)]\n  if (k > length(arr))\
    \ {\n    k <- length(arr)\n  }\n  return(result[1:k])\n}\n ", "\n  arr_len <-\
    \ length(arr)\n  if (arr_len < k) {\n    return (arr)\n  }\n  if (arr_len == k)\
    \ {\n    return (sort(arr, decreasing = TRUE))\n  }\n  sorted_arr <- sort(arr,\
    \ decreasing = TRUE)\n  res <- vector(mode = \"character\", length = k)\n  for\
    \ (i in 1:k) {\n    res[i] <- sorted_arr[i]\n  }\n  return (res)\n}", "\n    #\
    \ Write your code here\n    order(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\n", "\n    if (length(arr) <= k) return(sort(arr, decreasing = TRUE))\n\
    \    vec <- numeric(k)\n    vec[1] <- arr[1]\n    k <- k - 1\n    while (k > 0)\
    \ {\n        if (k == 1) {\n            tmp <- arr[1]\n            for (i in 1:length(vec))\
    \ {\n                if (tmp < vec[i]) {\n                    tmp <- vec[i]\n\
    \                    break\n                }\n            }\n            vec[length(vec)]\
    \ <- tmp\n            break\n        }\n        else {\n            tmp <- arr[2]\n\
    \            for (i in 1:length(vec) - 1) {\n                if (tmp < vec[i])\
    \ {\n                    tmp <- vec[i]\n                    break\n          \
    \      }\n            }\n            vec[length(vec) - k + 1] <- tmp\n       \
    \     k <- k - 1\n        }\n    }\n    return(sort(vec, decreasing = TRUE))\n\
    }\n", "\n  k <- min(k, length(arr))\n  res <- numeric(k)\n  for (i in seq_len(k))\
    \ {\n    res[i] <- max(arr)\n    arr <- arr[arr != max(arr)]\n  }\n  return(res)\n\
    }\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n  # Write your code here!\n}\n", "\n  arr <- sort(arr, decreasing\
    \ = TRUE)\n  return(arr[1:k])\n}\n", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n\
    }\n ", "\n    num <- length(arr)\n    if (k <= 0) return (c())\n    for (i in\
    \ 1:(num - 1)) {\n        for (j in (i + 1):num) {\n            if (arr[i] > arr[j])\
    \ {\n                arr[i] <- arr[i] + arr[j]\n                arr[j] <- arr[i]\
    \ - arr[j]\n                arr[i] <- arr[i] - arr[j]\n            }\n       \
    \ }\n    }\n    if (k > num) k <- num\n    return (arr[(num - k + 1):num])\n}\n",
  "\n  stopifnot(is.vector(arr), is.numeric(arr), is.integer(k))\n  stopifnot(k >\
    \ 0 && k <= length(arr))\n  rev(sort(arr)[seq_len(k)])\n}\n", "\n  # Extract length\
    \ of vector\n  n <- length(arr)\n  # Create a vector of k maximal values\n  res\
    \ <- rep(0, k)\n  for (i in 1:n) {\n    if (i <= k) {\n      res[i] <- arr[i]\n\
    \    } else {\n      # Insert the new value at the end\n      res[k] <- arr[i]\n\
    \      # Reorder the vector\n      res <- sort(res, decreasing = TRUE)\n    }\n\
    \  }\n  return(res)\n}\n", "\n  sort(arr, decreasing = TRUE)[1:k]\n}", "\n   \
    \ length(arr) <- k\n    arr[order(arr, decreasing = TRUE)][length(arr)]\n}\n\n\
    maximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    arr[order(arr, decreasing = TRUE)][1:k]\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\n\nmaximum(c(4, -4, 4), 2)\n\nmaximum(c(-3, 2, 1, 2, -1, -2, 1),\
    \ 1)\n", "\n  stopifnot(is.vector(arr), is.numeric(arr), is.integer(k), k > 0)\n\
    \  return(sort(arr, decreasing = TRUE)[1:k])\n}\n\nmax <- maximum(c(-3, -4, 5),\
    \ 3)\nprint(max)\nmax <- maximum(c(4, -4, 4), 2)\nprint(max)\nmax <- maximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\nprint(max)\n", "\n  if (k <= 0) return()\n  sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\n", "\n    if (k == 1) {\n        return(max(arr))\n\
    \    }\n    else {\n        return(max(arr, arr[order(arr, decreasing = TRUE)[-k]]))\n\
    \    }\n}\n\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n", "\n    # Write your code here, and view the results\
    \ using 'View()'\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n  #use\
    \ the array_view function from C++ to make a copy of arr\n  #(to avoid modifying\
    \ the original array). \n  #This is much faster than copying the array \n  #in\
    \ the R script using Rcpp::clone. \n  #We also sort this copy in descending order\
    \ using std::sort.\n  #Next, we take the first k elements, sort them in ascending\
    \ order, \n  #and return the result.\n  array_view <- cppFunction(\n  \"Rcpp::NumericVector\
    \ array_view(Rcpp::NumericVector arr, \n  int len) { \n    Rcpp::NumericVector\
    \ result(len); \n    std::copy(arr.begin(), arr.end(), result.begin()); \n   \
    \ std::sort(result.begin(), result.end(), std::greater<double>()); \n    return\
    \ result; \n  }\")\n  v <- array_view(arr, length(arr))\n  sort(v[1:k])\n}\n",
  "\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n    if (length(arr) ==\
    \ k) return(sort(arr, decreasing = TRUE))\n    ret <- numeric(k)\n    for (i in\
    \ 1:k) {\n        ret[i] <- max(arr)\n        arr <- arr[arr != ret[i]]\n    }\n\
    \    ret\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\n", "\n  sort(arr, decreasing = TRUE)[1:k]\n}", "\n\
    \  ## Write your code here ##\n  ## i <- 1;\n  ## while (i < length(arr)){\n \
    \ ##   if (arr[i] < arr[i+1]){\n  ##     arr[i] <- arr[i+1]\n  ##   }\n  ## }\n\
    \  ## return(arr)\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n  arr <- sort(arr, decreasing = TRUE)\n  return(arr[1:k])\n}", "\n    if (k ==\
    \ 1) {\n        return(max(arr))\n    }\n    else {\n        if (k == length(arr))\
    \ {\n            return(sort(arr, decreasing = TRUE))\n        }\n        else\
    \ {\n            return(sort(arr, decreasing = TRUE)[1:k])\n        }\n    }\n\
    }\n\nprint(maximum(c(-3, -4, 5), 3))\nprint(maximum(c(4, -4, 4), 2))\nprint(maximum(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1))\n", "\n    # Write your code here\n}", "\n\t# #####\n\
    \t# # Your code here\n\t# #####\n\tif (k == 1) return(max(arr))\n\treturn(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n\
    }\n", "\n    # There's a built-in function 'sort' that you can use to get the\n\
    \    # job done (sort the vector in descending order, then take the first k).\n\
    \    #\n    # But there are more efficient ways to do this!\n    #\n    # We can\
    \ look at the problem in two steps:\n    # 1. Get the k largest elements\n   \
    \ # 2. Sort them\n    #\n    # One way to find the k largest elements is to use\
    \ a min-heap\n    # data structure. We can use a heap to store the first k elements.\n\
    \    # Then for each element after the first k, if it's larger than the smallest\n\
    \    # element in the heap, we can replace the min-heap element with the new\n\
    \    # one and re-heapify the heap.\n    #\n    # You can read more about min-heaps\
    \ here:\n    # https://en.wikipedia.org/wiki/Heap_(data_structure)\n    # https://www.studytonight.com/data-structures/heap-data-structure\n\
    \    #\n    # The time complexity of using a min-heap to get the k largest elements\n\
    \    # is O(n * log k). It can be faster if we know the range of possible values\n\
    \    # in the vector (i.e. it is random and not arbitrary).\n    #\n    # Once\
    \ we have the k largest elements, we can sort them in O(k * log k)\n    # time\
    \ using quicksort or any other sorting algorithm.\n    # So the time complexity\
    \ of this algorithm is O(n * log k + k * log k).\n    #\n    # The first part\
    \ of the code below has a function that takes a vector and\n    # a function and\
    \ returns the vector sorted according to the function.\n    #\n    # You can read\
    \ more about sorting algorithms here:\n    # https://en.wikipedia.org/wiki/Sorting_algorithm\n\
    \    #\n    # The second part of the code below has a function that returns a\
    \ min-heap\n    # on a vector.\n    #\n    # The third part of the code below\
    \ has a function that takes a min-heap\n    # and a value and removes the minimum\
    \ value from the heap and adds the\n    #", "\n    k <- (k <= length(arr)) * k\
    \ + (k > length(arr)) * length(arr)\n    sort(arr, decreasing = TRUE)[1:k]\n}\n\
    maximum(c(-3, -4, 5), 3)\n\nmaximum(c(4, -4, 4), 2)\n\nmaximum(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1)\n", "\n        l <- length(arr)\n        if (k == l) {\n    \
    \            arr\n        } else {\n                #arr <- sort(arr, decreasing\
    \ = TRUE)\n                arr <- sort(arr)\n                arr[l-k+1:l]\n  \
    \      }\n}", "\n    return(sort(arr, decreasing = TRUE)[1:k])\n}", "\n  max.heap\
    \ <- NULL\n  for (n in arr) {\n    if (length(max.heap) < k) {\n      max.heap\
    \ <- heap::insert(max.heap, n)\n    } else {\n      root <- heap::extract(max.heap)\n\
    \      if (n > root) {\n        max.heap <- heap::insert(max.heap, n)\n      }\
    \ else {\n        max.heap <- heap::insert(max.heap, root)\n      }\n    }\n \
    \ }\n  sort(max.heap, decreasing = TRUE)\n}", "\n    y = 0\n    for (i in 1:length(arr))\
    \ {\n        if (i == 1) {\n            result <- arr[i]\n        } else {\n \
    \           if (arr[i] < result[1]) {\n                result <- c(result, arr[i])\n\
    \            } else {\n                if (arr[i] > result[length(result)]) {\n\
    \                    result <- c(result, arr[i])\n                } else {\n \
    \                   for (j in 1:length(result)) {\n                        if\
    \ (arr[i] > result[j]) {\n                            result <- c(result[1:j-1],\
    \ arr[i], result[j:length(result)])\n                            break\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return(result[(length(result)-k+1):length(result)])\n}\n\
    maximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n", "\n    # Write code here!\n}\n ", "\n  arr[order(arr, decreasing\
    \ = TRUE)[1:k]]\n}\n", "\n  # write your code here\n  if (k == 1) {\n    return(max(arr))\n\
    \  }\n  return(sort(arr, decreasing = TRUE)[1:k])\n}", "\n    # get a character\
    \ vector of length k\n    arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n \
    \ # Your code here\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  sorted <-\
    \ sort(arr, decreasing = TRUE)\n  return(sorted[1:k])\n}", "\n  res <- c()\n \
    \ if (k <= 0) {\n    return(res)\n  }\n  for (i in seq_len(k)) {\n    maxv <-\
    \ arr[1]\n    maxidx <- 1\n    for (j in seq_len(length(arr))) {\n      if (arr[j]\
    \ > maxv) {\n        maxv <- arr[j]\n        maxidx <- j\n      }\n    }\n   \
    \ res <- c(res, maxv)\n    arr <- arr[-maxidx]\n  }\n  return(res)\n}\n", "\n\
    \  arr[rev(order(arr))][1:k]\n}\n", "\n    arr <- arr[order(arr, decreasing =\
    \ TRUE)]\n    return(arr[1:k])\n}\n\narr <- c(-3, -4, 5)\nprint(maximum(arr, 3))\n\
    \narr <- c(4, -4, 4)\nprint(maximum(arr, 2))\n\narr <- c(-3, 2, 1, 2, -1, -2,\
    \ 1)\nprint(maximum(arr, 1))\n", "\n    # Your Code Here\n}\n ", "\n    if (k\
    \ == 0) {\n        return(c())\n    }\n    qsort <- function(arr) {\n        #\
    \ print(arr)\n        if (length(arr) <= 1) {\n            return(arr)\n     \
    \   }\n        mid <- arr[floor(length(arr)/2)]\n        left <- qsort(arr[arr\
    \ <= mid])\n        right <- qsort(arr[arr > mid])\n        return(c(left, mid,\
    \ right))\n    }\n    return(qsort(arr)[seq(length(arr) - k + 1, length(arr))])\n\
    }", "\n    # Create a function to take vector and return ascending vector.\n \
    \   sort_asc <- function(x) {\n        # If vector length <= 1.\n        if (length(x)\
    \ <= 1) return(x)\n        # If vector length > 1.\n        else {\n         \
    \   # Find the middle of the vector.\n            mid <- length(x) %/% 2\n   \
    \         # Find the left of the vector.\n            left <- sort_asc(x[1:mid])\n\
    \            # Find the right of the vector.\n            right <- sort_asc(x[(mid\
    \ + 1):length(x)])\n            # Merge the left and right.\n            if (length(left)\
    \ == 0) return(right)\n            if (length(right) == 0) return(left)\n    \
    \        merged <- c()\n            while (length(left) > 0 && length(right) >\
    \ 0) {\n                if (left[1] < right[1]) {\n                    merged\
    \ <- c(merged, left[1])\n                    left <- left[-1]\n              \
    \  } else {\n                    merged <- c(merged, right[1])\n             \
    \       right <- right[-1]\n                }\n            }\n            # Return\
    \ the merged vector.\n            return(c(merged, left, right))\n        }\n\
    \    }\n    # Return the sorted k numbers.\n    return(sort_asc(arr)[length(arr):(length(arr)\
    \ - k + 1)])\n}", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4,\
    \ 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n", "\n\
    \    sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n    res <- arr[order(arr, decreasing\
    \ = TRUE)]\n    return(res[1:k])\n}", "\n    arr[order(arr, decreasing = TRUE)[1:k]]\n\
    }", "\n  arr[order(arr, decreasing = TRUE)][1:k]\n}", "\n  arr[order(arr, decreasing\
    \ = TRUE)[1:k]]\n}", "\n    # TODO: Complete the function\n    num=sort(arr, decreasing=TRUE)[1:k]\n\
    \    return(num)\n}\nmaximum(c(-3, -4, 5), 3)\n", "\n  arr[order(arr, decreasing\
    \ = TRUE)][1:k]\n}", "\n    #arr <- sort(arr, decreasing = TRUE)\n    #return(arr[1:k])\n\
    \    l <- length(arr)\n    for (i in 1:(l-1)) {\n        for (j in (i+1):l) {\n\
    \            if (arr[i] < arr[j]) {\n                tmp <- arr[i]\n         \
    \       arr[i] <- arr[j]\n                arr[j] <- tmp\n            }\n     \
    \   }\n    }\n    arr[1:k]\n}\n", "\n  return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\nmaximum(c(-3, -4, 5), 3)\n", "\n    if (length(arr) > 0) {\n        sort(arr,\
    \ decreasing = TRUE)[1:k]\n    } else {\n        arr\n    }\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    maximum(c(), 2)\n", "\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n    if (k == 1) {\n        return(c(max(arr)))\n    }\n    else {\n        vec\
    \ <- c()\n        i <- 1\n        while (i <= k) {\n            vec <- c(vec,\
    \ max(arr))\n            arr <- arr[arr != max(arr)]\n            i <- i + 1\n\
    \        }\n        return(vec)\n    }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
