name: HumanEval_157_right_angle_triangle
language: r
prompt: "# Given the lengths of the three sides of a triangle. Return TRUE if the\
  \ three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1,\
  \ 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {"
tests: "test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
  \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
  \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
  \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  if(a^2 + b^2 == c^2) {\n    TRUE\n  } else {\n    FALSE\n  }\n\
    }\n", "\n  if (a > b && a > c) {\n    return (b^2 + c^2 == a^2)\n  } else if (b\
    \ > a && b > c) {\n    return (a^2 + c^2 == b^2)\n  } else {\n    return (a^2\
    \ + b^2 == c^2)\n  }\n}\n", "\n  if (a^2 + b^2 == c^2) {\n    return(TRUE)\n \
    \ } else {\n    return(FALSE)\n  }\n}\n", "\n  # edge cases for when the triangle\
    \ is not valid.\n  if (a <= 0 | b <= 0 | c <= 0) {\n    return(FALSE)\n  }\n \
    \ # The longest side will be a^2 + b^2 = c^2\n  if (a^2 + b^2 == c^2) {\n    return(TRUE)\n\
    \  } else if (b^2 + c^2 == a^2) {\n    return(TRUE)\n  } else if (a^2 + c^2 ==\
    \ b^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  # use\
    \ Pythagorean theorem\n  # a^2 + b^2 = c^2\n  # a^2 + b^2 == c^2\n  a^2 + b^2\
    \ == c^2\n}\n", "\n  if ((a > b) && (a > c)) {\n    if ((a^2) == (b^2) + (c^2))\
    \ {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if\
    \ ((b > a) && (b > c)) {\n    if ((b^2) == (a^2) + (c^2)) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  } else if ((c > a) && (c > b)) {\n\
    \    if ((c^2) == (a^2) + (b^2)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  }\n}", "\n  if (a > b & a > c) {\n    cat(a^2 == b^2 + c^2)\n  } else\
    \ if (b > a & b > c) {\n    cat(b^2 == a^2 + c^2)\n  } else if (c > a & c > b)\
    \ {\n    cat(c^2 == a^2 + b^2)\n  }\n}\nright_angle_triangle(3, 4, 5)\n", "\n\
    \  sorted_sides <- sort(c(a, b, c))\n  (sorted_sides[1]^2 + sorted_sides[2]^2)\
    \ == sorted_sides[3]^2\n}", "\n  right_angle <- 90\n  if (a > 0 & b > 0 & c >\
    \ 0) {\n    if (a^2 + b^2 == c^2 | a^2 + c^2 == b^2 | b^2 + c^2 == a^2) {\n  \
    \    return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # Write your code here\n  cat(c(a,b,c)[c(1,2,3) %in% c(max(a,b,c),\
    \ min(a,b,c), sum(a,b,c)-max(a,b,c)-min(a,b,c))], \"\\n\")\n  ((a^2) + (b^2) ==\
    \ (c^2))\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n",
  "\n  if (a == b | b == c | a == c) {\n    res <- FALSE\n  } else {\n    x <- c(a,\
    \ b, c)\n    if (x[1] > x[2] & x[1] > x[3]) {\n      x <- x[c(3, 2, 1)]\n    }\
    \ else if (x[2] > x[1] & x[2] > x[3]) {\n      x <- x[c(1, 3, 2)]\n    }\n   \
    \ res <- (x[1]^2 + x[2]^2 == x[3]^2)\n  }\n  return(res)\n}\n", "\n  if (a^2 +\
    \ b^2 == c^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n\
    \  # YOUR CODE HERE\n}\ntest_that('Solution is correct', {\n  expect_true(right_angle_triangle(3,\
    \ 4, 5))\n  expect_false(right_angle_triangle(1, 2, 3))\n})\n ", "\n  sides <-\
    \ c(a, b, c)\n  right_side <- max(sides)\n  other_sides <- sides[sides != right_side]\n\
    \  sum(other_sides ^ 2) == right_side ^ 2\n}\n", "\n  if (a > 0 && b > 0 && c\
    \ > 0) {\n    hyp <- max(a, b, c)\n    catheti <- c(a, b, c)[c(a, b, c) != hyp]\n\
    \    sqrt(sum(catheti^2)) == hyp\n  } else {\n    FALSE\n  }\n}\n", "\n    if\
    \ (a>b) {\n        if (a>c) {\n            if (a^2==b^2+c^2) {\n             \
    \   return (TRUE)\n            } else {\n                return (FALSE)\n    \
    \        }\n        } else {\n            if (c^2==a^2+b^2) {\n              \
    \  return (TRUE)\n            } else {\n                return (FALSE)\n     \
    \       }\n        }\n    } else {\n        if (b>c) {\n            if (b^2==a^2+c^2)\
    \ {\n                return (TRUE)\n            } else {\n                return\
    \ (FALSE)\n            }\n        } else {\n            if (c^2==a^2+b^2) {\n\
    \                return (TRUE)\n            } else {\n                return (FALSE)\n\
    \            }\n        }\n    }\n}", "\n  # Using Pythagorean Theorem.\n  return(\
    \ (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2) )\n}", "\n  a_is_right\
    \ <- (a^2 == b^2 + c^2)\n  b_is_right <- (b^2 == a^2 + c^2)\n  c_is_right <- (c^2\
    \ == a^2 + b^2)\n  return(a_is_right | b_is_right | c_is_right)\n}\nright_angle_triangle(3,\
    \ 4, 5)\n", "\n    tri = c(a, b, c)\n    tri[which.max(tri)] = tri[which.max(tri)]^2\n\
    \    tri[which.min(tri)] = tri[which.min(tri)]^2\n    tri[-which(tri==tri[which.max(tri)])]\
    \ == tri[which.max(tri)]\n}\nright_angle_triangle(3, 4, 5)\n", "\n  # if (a^2\
    \ + b^2 == c^2) TRUE else FALSE \n  sqrt(a^2 + b^2) == c\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\nright_angle_triangle(5, 3, 4)\nright_angle_triangle(6,\
    \ 8, 10)\n"]
stop_tokens:
- "\n#"
- "\n```"
