name: HumanEval_158_find_max
language: r
prompt: "# Write a function that accepts a list of strings.\n# The list contains different\
  \ words. Return the word with maximum number\n# of unique characters. If multiple\
  \ strings have maximum number of unique\n# characters, return the one which comes\
  \ first in lexicographical order.\n# >>> find_max(c('name', 'of', 'string'))\n#\
  \ 'string'\n# >>> find_max(c('name', 'enam', 'game'))\n# 'enam'\n# >>> find_max(c('aaaaaaa',\
  \ 'bb', 'cc'))\n# 'aaaaaaa'\nfind_max <- function(words) {"
tests: "test_humaneval <- function() {\ncandidate <- find_max\n    if(!identical(candidate(c('name',\
  \ 'of', 'string')), 'string')){quit('no', 1)}\n    if(!identical(candidate(c('name',\
  \ 'enam', 'game')), 'enam')){quit('no', 1)}\n    if(!identical(candidate(c('aaaaaaa',\
  \ 'bb', 'cc')), 'aaaaaaa')){quit('no', 1)}\n    if(!identical(candidate(c('abc',\
  \ 'cba')), 'abc')){quit('no', 1)}\n    if(!identical(candidate(c('play', 'this',\
  \ 'game', 'of', 'footbott')), 'footbott')){quit('no', 1)}\n    if(!identical(candidate(c('we',\
  \ 'are', 'gonna', 'rock')), 'gonna')){quit('no', 1)}\n    if(!identical(candidate(c('we',\
  \ 'are', 'a', 'mad', 'nation')), 'nation')){quit('no', 1)}\n    if(!identical(candidate(c('this',\
  \ 'is', 'a', 'prrk')), 'this')){quit('no', 1)}\n    if(!identical(candidate(c('b')),\
  \ 'b')){quit('no', 1)}\n    if(!identical(candidate(c('play', 'play', 'play')),\
  \ 'play')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  n <- nchar(words)\n  max <- 0\n  for (i in 1:length(words)) {\n\
    \    if (n[i] > max) {\n      max <- n[i]\n      ind <- i\n    }\n  }\n  return(words[ind])\n\
    }", "\n  max_len <- 0\n  max_index <- 0\n  for (i in 1:length(words)) {\n    word\
    \ <- words[i]\n    len <- length(unique(unlist(strsplit(word, ''))))\n    if (len\
    \ > max_len) {\n      max_len <- len\n      max_index <- i\n    }\n  }\n  words[max_index]\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    unique_characters <- unlist(lapply(words,\
    \ function(word) length(unique(unlist(strsplit(word, \"\"))))))\n    max_words\
    \ <- words[which(unique_characters == max(unique_characters))]\n    return(max_words[1])\n\
    }\nfind_max(c('name', 'of', 'string'))\n\nfind_max(c('name', 'enam', 'game'))\n\
    \nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  # TODO: return the word with maximum\
    \ number of unique characters\n  y = 0\n  out = \"\"\n  for (x in words) {\n \
    \   uni = unique(strsplit(x, \"\")[[1]])\n    if (length(uni) > y) {\n      y\
    \ = length(uni)\n      out = x\n    }\n  }\n  return(out)\n}\n", "\n  result <-\
    \ NULL\n  n <- length(words)\n  for (i in 1:n) {\n    if (is.null(result) || nchar(result)\
    \ < nchar(words[i])) {\n      result <- words[i]\n    }\n  }\n  return(result)\n\
    }\n", "\n  n <- nchar(words)\n  uniq <- sapply(words, function(x) length(unique(x)))\n\
    \  if (all(uniq == uniq[1])) {\n    if (all(n == n[1])) {\n      return(words[1])\n\
    \    } else {\n      return(words[order(n)][1])\n    }\n  } else {\n    return(words[order(uniq,\
    \ decreasing = TRUE)][1])\n  }\n}\n\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\nfind_max(c('a', 'b', 'c'))\n\
    find_max(c('abc', 'de', 'fg'))\n", "\n  max_word <- \"\"\n  for (word in words)\
    \ {\n    if (is.null(max_word) || \n        length(unique(strsplit(max_word, \"\
    \")[[1]])) < \n          length(unique(strsplit(word, \"\")[[1]]))) {\n      max_word\
    \ <- word\n    }\n  }\n  return(max_word)\n}\n\nfind_max(c(\"name\", \"of\", \"\
    string\"))\nfind_max(c(\"name\", \"enam\", \"game\"))\nfind_max(c(\"aaaaaaa\"\
    , \"bb\", \"cc\"))\n", "\n  word_n_uniques <- sapply(words, length)\n  max_uniques\
    \ <- max(word_n_uniques)\n  words[which.max(word_n_uniques == max_uniques)]\n}",
  "\n    # Your code here\n    # Find max string\n    # max_num <- max(nchar(unlist(strsplit(words,\
    \ ''))))\n    # max_str <- words[which(nchar(unlist(strsplit(words, ''))) == max_num)]\n\
    \    # if(length(max_str) > 1) {\n    #   return(max_str[which.min(max_str)])\n\
    \    # } else {\n    #   return(max_str)\n    # }\n    # Find the first string\
    \ with max number of unique characters\n    words[which.max(sapply(words, unique))]\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\tmax <- 0\n\tres <- \"\"\n\tfor (word\
    \ in words) {\n\t\tif (length(unique(unlist(strsplit(word, \"\")))) > max) {\n\
    \t\t\tmax <- length(unique(unlist(strsplit(word, \"\"))))\n\t\t\tres <- word\n\
    \t\t}\n\t}\n\treturn(res)\n}\n\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n\n", "\n\tlengths <- sapply(words,\
    \ function(x) length(unique(unlist(strsplit(x, '')))))\n\tmax_length <- max(lengths)\n\
    \tindex <- which(lengths == max_length)\n\tif (length(index) == 1) {\n\t\twords[index]\n\
    \t} else {\n\t\tresult <- words[index]\n\t\tresult[which.min(result)]\n\t}\n}",
  "\n  uniq_count <- sapply(words, function(word) length(unique(unlist(strsplit(word,\
    \ \"\")))))\n  words[which.max(uniq_count)]\n}", "\n  maxi <- 0\n  for (w in words)\
    \ {\n    if (length(unique(unlist(strsplit(w, \"\")))) > maxi) {\n      maxi <-\
    \ length(unique(unlist(strsplit(w, \"\"))))\n      word <- w\n    }\n  }\n  return(word)\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  max.length <- 0\n  max.word <- words[1]\n\
    \  for (word in words) {\n    if (length(unique(unlist(strsplit(word, \"\"))))\
    \ > max.length) {\n      max.length <- length(unique(unlist(strsplit(word, \"\"\
    ))))\n      max.word <- word\n    }\n  }\n  return(max.word)\n}\nprint(find_max(c('name',\
    \ 'of', 'string')))\nprint(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')))\n", "\n  words[which.max(nchar(words) / length(unique(words)))]\n\
    }\n", "\n    max <- -1\n    max_word <- ''\n    for (w in words) {\n        num_uniq\
    \ <- length(unique(strsplit(w, '')[[1]]))\n        if (num_uniq > max) {\n   \
    \         max <- num_uniq\n            max_word <- w\n        }\n    }\n    return(max_word)\n\
    }\n\ntest_that('test_find_max', {\n    expect_equal(find_max(c('name', 'of', 'string')),\
    \ 'string')\n    expect_equal(find_max(c('name', 'enam', 'game')), 'enam')\n \
    \   expect_equal(find_max(c('aaaaaaa', 'bb', 'cc')), 'aaaaaaa')\n})\n", "\n  res\
    \ <- list()\n  max <- 0\n  for (word in words) {\n    unique_chars <- unique(unlist(strsplit(word,\
    \ split = \"\")))\n    if (length(unique_chars) > max) {\n      max <- length(unique_chars)\n\
    \      res <- list(word)\n    } else if (length(unique_chars) == max) {\n    \
    \  res <- c(res, word)\n    }\n  }\n  return(res[1])\n}\n", "\n  max_word <- words[1]\n\
    \  max_num_unique_chars <- length(unique(strsplit(max_word, \"\")[[1]]))\n  for\
    \ (i in 2:length(words)) {\n    current_word <- words[i]\n    current_num_unique_chars\
    \ <- length(unique(strsplit(current_word, \"\")[[1]]))\n    if (current_num_unique_chars\
    \ > max_num_unique_chars) {\n      max_word <- current_word\n      max_num_unique_chars\
    \ <- current_num_unique_chars\n    }\n  }\n  return(max_word)\n}\n", "\n    max_uniq\
    \ = 0\n    max_word = \"\"\n    for (word in words) {\n        uniq = length(unique(unlist(strsplit(word,\
    \ \"\"))))\n        if (uniq > max_uniq) {\n            max_uniq = uniq\n    \
    \        max_word = word\n        }\n    }\n    return(max_word)\n}\nwords <-\
    \ c('name', 'of', 'string')\nfind_max(words)\n\nwords <- c('name', 'enam', 'game')\n\
    find_max(words)\n\nwords <- c('aaaaaaa', 'bb', 'cc')\nfind_max(words)\n", "\n\t\
    max_char_len <- max(sapply(words, function(word) length(unique(unlist(strsplit(word,\
    \ \"\"))))))\n\twords[which.max(sapply(words, function(word) length(unique(unlist(strsplit(word,\
    \ \"\"))))))]\n}\n", "\n\t# your code here\n\ttmp <- sapply(words, function(w)\
    \ {\n\t\tdata.frame(word = w, unique_char = length(unique(unlist(strsplit(w, split\
    \ = \"\")))))\n\t})\n\ttmp$word[max(tmp$unique_char) == tmp$unique_char &\n\t\
    \         tmp$unique_char == max(tmp$unique_char)]\n}\n", "\n  max.length <- 0\n\
    \  max.word <- ''\n  for (word in words) {\n    if (nchar(word) > max.length)\
    \ {\n      max.length <- nchar(word)\n      max.word <- word\n    }\n  }\n  return(max.word)\n\
    }\nprint(find_max(c('name', 'of', 'string')))\nprint(find_max(c('name', 'enam',\
    \ 'game')))\nprint(find_max(c('aaaaaaa', 'bb', 'cc')))\n", "\n  words[which.max(sapply(words,\
    \ function(word) length(unique(strsplit(word, '')[[1]]))))]\n}\nprint(find_max(c('name',\
    \ 'of', 'string')))\nprint(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')))\n", "\n    unique_char_map <- unique_char_in_words(words)\n  \
    \  return(find_max_key(unique_char_map))\n}\n", "\n  words[which.max(max_unique_chars(words))]\n\
    }", "\n    max_characters <- NULL\n    for (i in words) {\n        if (is.null(max_characters))\
    \ {\n            max_characters <- i\n        } else {\n            if (length(unique(i))\
    \ > length(unique(max_characters))) {\n                max_characters <- i\n \
    \           }\n        }\n    }\n    max_characters\n}", "\n    max <- 0\n   \
    \ max_word <- ''\n    for (word in words) {\n        if (nchar(word) > max) {\n\
    \            max <- nchar(word)\n            max_word <- word\n        }\n   \
    \ }\n    return(max_word)\n}\nfind_max <- function(words) {\n    max <- 0\n  \
    \  max_word <- ''\n    for (word in words) {\n        if (length(unique(word))\
    \ > max) {\n            max <- length(unique(word))\n            max_word <- word\n\
    \        }\n    }\n    return(max_word)\n}\nfind_max <- function(words) {\n  \
    \  df <- data.frame(words = words, unique_length = sapply(words, unique))\n  \
    \  df[order(df$unique_length, df$words), ]\n}\n", "\n    pos <- 1\n    max <-\
    \ 0\n    for (i in 1:length(words)) {\n        num <- length(unique(strsplit(words[i],\
    \ \"\")[[1]]))\n        if (num > max) {\n            max <- num\n           \
    \ pos <- i\n        }\n    }\n    words[pos]\n}\n", "\n  # empty list\n  # list\
    \ of one element\n  # all distinct\n  # repeated occurences\n  # return the string\
    \ with the maximum number of unique characters\n\n  # we need to\n  # 1. figure\
    \ out how many unique characters are in each string in words\n  # 2. find the\
    \ max of the unique characters\n  # 3. find the position of the max unique characters\
    \ string in words\n  # 4. return the string at that position\n\n  # use strsplit\
    \ with fixed = TRUE to split the strings in words\n  # into list of characters\
    \ and then use lapply to find out the length\n  # of each of these lists.\n  #\
    \ use max to find the max of these lengths and then use\n  # which.max to find\
    \ the index of the max value\n  # use that index to return the string at that\
    \ position in words\n  which.max(\n    sapply(\n      strsplit(words, split =\
    \ '', fixed = TRUE),\n      function(x) length(unique(x))\n    )\n  )\n}\n\n\n\
    find_max <- function(words) {\n  # empty list\n  # list of one element\n  # all\
    \ distinct\n  # repeated occurences\n  # return the string with the maximum number\
    \ of unique characters\n\n  # we need to\n  # 1. figure out how many unique characters\
    \ are in each string in words\n  # 2. find the max of the unique characters\n\
    \  # 3. find the position of the max unique characters string in words\n  # 4.\
    \ return the string at that position\n\n  # use strsplit with fixed = TRUE to\
    \ split the strings in words\n  # into list of characters and then use lapply\
    \ to find out the length\n  # of each of these lists.\n  # use max to find the\
    \ max of these lengths and then use\n  # which.max to find the index of the max\
    \ value\n  # use that index to return the string at that position in words\n \
    \ which.max(\n    sapply(\n      strsplit(words, split = '', fixed = TRUE),\n\
    \      function(x) length(unique(x))\n    )\n  )\n}\n\n", "\n    # Your code goes\
    \ here\n    max_unique_char <- function(word) {\n        # Your code goes here\n\
    \        char_counter <- function(word) {\n            # Your code goes here\n\
    \            no_of_unique_char <- function(word) {\n                # Your code\
    \ goes here\n                count <- 0\n                for (c in word) {\n \
    \                   for (i in 1:nchar(word)) {\n                        if (c\
    \ == substr(word, i, i)) {\n                            count <- count + 1\n \
    \                       }\n                    }\n                }\n        \
    \        return(count)\n            }\n            counts <- sapply(letters, function(x)\
    \ sum(char_counter(word) == x))\n            tibble(char=letters, count=counts)\n\
    \        }\n        max(no_of_unique_char(word))\n    }\n    max_unique_words\
    \ <- function(words) {\n        # Your code goes here\n        max_unique_char_word\
    \ <- function(word) {\n            # Your code goes here\n            max_unique_char(word)\
    \ == max(max_unique_char(words))\n        }\n        words[max_unique_char_word(words)]\n\
    \    }\n    return(max_unique_words(words))\n}", "\n    unique_counts <- unique(sapply(words,\
    \ function(x) length(unique(unlist(strsplit(x, \"\"))))))\n    words[order(unique_counts,\
    \ words)[length(unique_counts)]]\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  best_word <- NULL\n\
    \  max_unique <- 0\n  for (word in words) {\n    unique_chars <- unique(word)\n\
    \    num_unique <- length(unique_chars)\n    if (num_unique > max_unique) {\n\
    \      max_unique <- num_unique\n      best_word <- word\n    }\n  }\n  return(best_word)\n\
    }\nprint(find_max(c('name', 'of', 'string')))\nprint(find_max(c('name', 'enam',\
    \ 'game')))\nprint(find_max(c('aaaaaaa', 'bb', 'cc')))\n", "\n    if(length(words)\
    \ == 0) {\n        return(NULL)\n    }\n\n    max <- length(unique(characters(words[1])))\n\
    \    max_word <- words[1]\n\n    for(i in 2:length(words)) {\n        curr_num_chars\
    \ <- length(unique(characters(words[i])))\n        if(curr_num_chars > max) {\n\
    \            max <- curr_num_chars\n            max_word <- words[i]\n       \
    \ } else if(curr_num_chars == max) {\n            if(words[i] < max_word) {\n\
    \                max_word <- words[i]\n            }\n        }\n    }\n\n   \
    \ return(max_word)\n}\n", "\n  unique_char_freq <- sapply(words, function(word)\
    \ {\n    unique(unlist(strsplit(word, \"\")))\n  })\n  max_unique_chars <- max(unique_char_freq)\n\
    \  words[unique_char_freq == max_unique_chars][1]\n}\n", "\n  if (length(words)\
    \ == 0) return('')\n  temp <- lapply(words, function(s) {\n    # print(s)\n  \
    \  list(s, nchar(unique(unlist(strsplit(s, split='')))))\n  })\n  temp <- unique(temp)\n\
    \  max_value <- max(unlist(lapply(temp, function(t) t[[2]])))\n  temp2 <- temp[unlist(lapply(temp,\
    \ function(t) t[[2]])) == max_value]\n  print(temp2)\n  temp2 <- temp2[order(unlist(lapply(temp2,\
    \ function(t) t[[1]])))]\n  temp2[[1]][[1]]\n}\n", "\n  n_chars <- sapply(words,\
    \ function(word) length(unique(strsplit(word, \"\")[[1]])))\n  i <- which.max(n_chars)\n\
    \  return(words[i])\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  max_unique_chars\
    \ <- max(lapply(words, function(x) length(unique(strsplit(x, '')[[1]]))))\n  sorted_words\
    \ <- sort(words)\n  result <- sorted_words[which(lapply(sorted_words, function(x)\
    \ length(unique(strsplit(x, '')[[1]]))) == max_unique_chars)]\n  return(result[1])\n\
    }\n\ntest_that('find_max works for basic examples', {\n  expect_equal(find_max(c('name',\
    \ 'of', 'string')), 'string')\n  expect_equal(find_max(c('name', 'enam', 'game')),\
    \ 'enam')\n  expect_equal(find_max(c('aaaaaaa', 'bb', 'cc')), 'aaaaaaa')\n})\n\
    \ ", "\n  unique_chars <- sapply(words, function(x) length(unique(strsplit(x,\
    \ \"\")[[1]])))\n  sorted_words <- sort(words)\n  sorted_words[which.max(unique_chars)]\n\
    }\n", "\n  # code goes here\n  # get unique string of each word\n  unique_words\
    \ <- unique(strsplit(words, \"\")[[1]])\n  # count unique strings\n  word_count\
    \ <- sapply(unique_words, function(x) length(unique(x)))\n  # get first word with\
    \ maximum number of unique characters\n  max_word <- unique_words[which.max(word_count)]\n\
    \  max_word[1]\n}\n", "\n    max_unique_chars <- 0\n    best_word <- ''\n    for\
    \ (word in words) {\n        unique_chars <- length(unique(unlist(strsplit(word,\
    \ split = ''))))\n        if (unique_chars > max_unique_chars) {\n           \
    \ max_unique_chars <- unique_chars\n            best_word <- word\n        }\n\
    \    }\n    return(best_word)\n}\nprint('find_max')\nprint(find_max(c('name',\
    \ 'of', 'string')))\nprint(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')))\n", "\n  most_unique_words <- sapply(words, unique_char_count)\n\
    \  unique_max <- max(most_unique_words)\n  return(words[which(most_unique_words\
    \ == unique_max)][1])\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    return(words[which.max(lengths(unique(unlist(strsplit(words,\
    \ \"\")))))]);\n}\n\nprint(find_max(c('name', 'of', 'string')));\nprint(find_max(c('name',\
    \ 'enam', 'game')));\nprint(find_max(c('aaaaaaa', 'bb', 'cc')));\n", "\n    #\
    \ `max` takes a list of numeric values, and returns the\n    # largest of them.\
    \ For example:\n    # max(1, 2, 3)\n    # ## [1] 3\n    # max(c(1, 2, 3))\n  \
    \  # ## [1] 3\n    #\n    # `unique` takes a vector, and return a vector of\n\
    \    # unique elements in the original vector, in lexicographical order.\n   \
    \ # For example:\n    # unique(c(1, 2, 2, 2, 3, 4, 5, 5))\n    # ## [1] 1 2 3\
    \ 4 5\n    #\n    # `which.max` takes a vector, and returns the index\n    # of\
    \ the first location of the maximum element.\n    # For example:\n    # which.max(c(1,\
    \ 2, 3, 2, 1))\n    # ## [1] 3\n    which.max(max(lapply(words, unique)))\n}\n",
  "\n    unique_chars <- function(s) {\n        unlist(strsplit(s, ''))\n    }\n \
    \   words[which.max(sapply(words, unique_chars))]\n}\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  word_lengths <- lapply(words, unique)\n  max_count <- max(lengths(word_lengths))\n\
    \  max_words <- words[which(lengths(word_lengths) == max_count)]\n  paste(max_words[1],\
    \ collapse = ' ')\n}\n\ntest_that('test for find_max function', {\n  expect_equal(find_max(c('name',\
    \ 'of', 'string')), 'string')\n  expect_equal(find_max(c('name', 'enam', 'game')),\
    \ 'enam')\n  expect_equal(find_max(c('aaaaaaa', 'bb', 'cc')), 'aaaaaaa')\n})\n",
  "\n    if(!all( sapply(words, is.character) ))\n        stop(\"words should be all\
    \ character vectors\")\n    max_len <- max( sapply(words, function(x) length(unique(x)))\
    \ )\n    max_words <- words[ sapply(words, function(x) length(unique(x))) == max_len\
    \ ]\n    sorted_max_words <- sort(max_words)\n    return(sorted_max_words[1])\n\
    }", "\n    max_len <- 0\n    max_words <- character(0)\n    for (w in words) {\n\
    \        # Determine the length of the unique characters in each word\n      \
    \  n <- length(unique(unlist(strsplit(w, \"\"))))\n        if (n > max_len) {\n\
    \            max_len <- n\n            max_words <- w\n        } else if (n ==\
    \ max_len) {\n            max_words <- c(max_words, w)\n        }\n    }\n   \
    \ sort(max_words)[1]\n}\nprint(find_max(c('name', 'of', 'string')))\nprint(find_max(c('name',\
    \ 'enam', 'game')))\nprint(find_max(c('aaaaaaa', 'bb', 'cc')))\n", "\n  max_unique\
    \ <- 0\n  max_unique_word <- NA\n  for (word in words) {\n    unique_letters <-\
    \ unique(strsplit(word, '')[[1]])\n    unique_letters_count <- length(unique_letters)\n\
    \    if (unique_letters_count > max_unique) {\n      max_unique <- unique_letters_count\n\
    \      max_unique_word <- word\n    }\n  }\n  return(max_unique_word)\n}\nprint(find_max(c('name',\
    \ 'of', 'string')))\nprint(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')))\n", "\n  words[which.max(sapply(words, function(w) {\n    # [1]\
    \ 5 3 4\n    # [1] TRUE TRUE FALSE\n    # [1] TRUE TRUE TRUE\n    # [1] TRUE FALSE\
    \ FALSE\n    # [1] TRUE TRUE TRUE\n    # [1] TRUE TRUE TRUE\n    # [1] TRUE TRUE\
    \ TRUE\n    # [1] TRUE TRUE TRUE\n    # [1] TRUE TRUE TRUE\n    # [1] TRUE TRUE\
    \ TRUE\n    # [1] TRUE TRUE TRUE\n    # [1] TRUE TRUE TRUE\n    # [1] TRUE TRUE\
    \ TRUE\n    return(sum(table(unlist(strsplit(w, ''))) == 1))\n  }))]\n}\n", "\n\
    \    uniques <- lapply(words, function(x) unique(unlist(strsplit(x, \"\"))))\n\
    \    n_uniques <- lapply(uniques, length)\n    which.max(n_uniques)\n}\n", "\n\
    \  ## Your code here ##\n  max_words <- words[1]\n  for (word in words) {\n  \
    \  if (length(unique(word)) > length(unique(max_words))) {\n      max_words <-\
    \ word\n    }\n  }\n  return(max_words)\n}\n\nfind_max <- function(words) {\n\
    \  max_words <- words[1]\n  for (word in words) {\n    if (length(unique(word))\
    \ > length(unique(max_words))) {\n      max_words <- word\n    }\n  }\n  return(max_words)\n\
    }\n\nfind_max(c('name', 'of', 'string'))\n\nfind_max(c('name', 'enam', 'game'))\n\
    \nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  words <- gsub(\"[^[:alnum:]]\",\
    \ \"\", words)\n  words <- tolower(words)\n  words <- unique(words)\n  words <-\
    \ paste(words, collapse=\"\")\n  unique_chars <- strsplit(words, \"\")\n  unique_chars\
    \ <- unique(unlist(unique_chars))\n  unique_chars <- length(unique_chars)\n  return(words[which.max(unique_chars)])\n\
    }\n", "\n  ##\n  ##\n  ##\n  sorted_words <- sort(words, decreasing = TRUE, index.return\
    \ = TRUE)\n  sorted_words_uniq_size <- sapply(sorted_words$x, function(word) {\n\
    \    uniq_characters <- unique(strsplit(word, \"\")[[1]])\n    length(uniq_characters)\n\
    \  })\n  sorted_words_first_index <- which(sorted_words_uniq_size == max(sorted_words_uniq_size))[1]\n\
    \  return(sorted_words$x[sorted_words_first_index])\n}\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  # your code goes here\n  max_word <- words[1]\n  max_word_uniq_chars\
    \ <- length(unique(words[1]))\n  for (word in words[-1]) {\n    uniq_chars <-\
    \ length(unique(word))\n    if (uniq_chars > max_word_uniq_chars) {\n      max_word\
    \ <- word\n      max_word_uniq_chars <- uniq_chars\n    }\n  }\n  return(max_word)\n\
    }", "\n    m <- max(unlist(lapply(words, strsplit, \"\")), na.rm = TRUE)\n   \
    \ ind <- lapply(words, function(x) length(unique(strsplit(x, \"\")[[1]]))) ==\
    \ m\n    return(words[ind])\n}\ntest <- find_max(c('name', 'of', 'string'))\n\
    test <- find_max(c('name', 'enam', 'game'))\ntest <- find_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\ntest\n", "\n  words_map <- sapply(words, function(word) {\n    chars\
    \ <- paste(sort(unlist(strsplit(word, ''))), collapse = '')\n    return(paste(chars,\
    \ word, sep = '-'))\n  })\n  max_unique_word <- words_map[which.max(nchar(words_map))]\n\
    \  return(strsplit(max_unique_word, '-')[[1]][2])\n}\n\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  max_char_count <- 0\n  max_idx <- 0\n  for (i in 1:length(words))\
    \ {\n    this_word <- words[i]\n    # We do not need to normalize the text, because\
    \ we are only\n    # interested in uniqueness (duplicate characters do not matter).\n\
    \    # We only need the length of the unique values.\n    # length(unique(this_word))\n\
    \    this_word_char_count <- length(strsplit(this_word, \"\")[[1]])\n    if (this_word_char_count\
    \ > max_char_count) {\n      max_char_count <- this_word_char_count\n      max_idx\
    \ <- i\n    }\n  }\n  # Alternatively, we could pass the 'collate' argument to\
    \ sort(),\n  # or we could use sort(unique(words), decreasing=TRUE, index.return=TRUE).\n\
    \  max_word <- words[max_idx]\n  return(max_word)\n}\n", "\n    uniques <- sapply(words,\
    \ function(x) length(unique(unlist(strsplit(x, split=\"\")))))\n    max_index\
    \ <- which.max(uniques)\n    words[max_index]\n}\n", "\n  # ADD YOUR CODE HERE\n\
    \  max_length <- max(stringr::str_count(words, \"[a-zA-Z]\"))\n  output <- words[which.max(stringr::str_count(words,\
    \ \"[a-zA-Z]\"))]\n  for (i in 1:length(words)) {\n    if (stringr::str_count(words[i],\
    \ \"[a-zA-Z]\") == max_length) {\n      if (words[i] < output) {\n        output\
    \ <- words[i]\n      }\n    }\n  }\n  return(output)\n}\n", "\n    max <- lapply(words,\
    \ function(w) length(unique(strsplit(w, \"\")[[1]])))\n    ind <- which.max(max)\n\
    \    words[ind]\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam',\
    \ 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    # YOUR CODE HERE\n \
    \   words[which.max(sapply(words, function(w) {\n        length(unique(strsplit(w,\
    \ \"\")[[1]]))\n    }))]\n}\n", "\n    # Your code here\n\n    return(words)\n\
    }\n ", "\n  if(length(words) == 0) { return(NULL) }\n  word_uniqs <- sapply(words,\
    \ function(word) length(unique(strsplit(word, '')[[1]])))\n  max_word <- which.max(word_uniqs)\n\
    \  if(all(word_uniqs == word_uniqs[max_word])) {\n    return(words[order(words)[1]])\n\
    \  } else {\n    return(words[max_word])\n  }\n}\n", "\n    max_count <- 0\n \
    \   for (word in words) {\n        unique_chars <- unique(strsplit(word, \"\"\
    )[[1]])\n        if (length(unique_chars) > max_count) {\n            max_count\
    \ <- length(unique_chars)\n            max_word <- word\n        }\n    }\n  \
    \  return(max_word)\n}\n", "\n  return(words[which.max(sapply(words, unique))])\n\
    }\n", "\n  unique_chars <- sapply(words, unique)\n  n_uniques <- sapply(unique_chars,\
    \ length)\n  num_max <- max(n_uniques)\n  max_indices <- which(n_uniques == num_max)\n\
    \  return(words[max_indices[1]])\n}", "\n\tmax <- 0\n\tfor (w in words) {\n\t\t\
    if (max == 0) {\n\t\t\tmax <- nchar(w)\n\t\t\tresult <- w\n\t\t} else {\n\t\t\t\
    if (max < nchar(w)) {\n\t\t\t\tmax <- nchar(w)\n\t\t\t\tresult <- w\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn(result)\n}\nprint(find_max(c('name', 'of', 'string')))\n\
    print(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa', 'bb',\
    \ 'cc')))\n", "\n    # YOUR CODE HERE\n    unique_chars <- sapply(words, function(word)\
    \ {\n        # YOUR CODE HERE\n        unique(unlist(strsplit(word, split=\"\"\
    )))\n    })\n    max_unique_chars <- max(unique_chars)\n    words[unique_chars\
    \ == max_unique_chars][1]\n}\ncat(find_max(c('name', 'of', 'string')), '\\n')\n\
    cat(find_max(c('name', 'enam', 'game')), '\\n')\ncat(find_max(c('aaaaaaa', 'bb',\
    \ 'cc')), '\\n')\n", "\n  # List to store nchars of each word\n  nchars <- list()\n\
    \  # Loop through each word\n  for (i in 1:length(words)) {\n    nchars[[i]] <-\
    \ length(unique(unlist(strsplit(words[i], ''))))\n  }\n  nchars <- unlist(nchars)\n\
    \  # Find the index of the word with the maximum number of unique characters\n\
    \  max_index <- which.max(nchars)\n  # Return word\n  return(words[max_index])\n\
    }\n", "\n  \n  word_len <- length(words)\n  max_unique <- 0\n  index <- 1\n  \n\
    \  for (i in 1:word_len) {\n    if (length(unique(unlist(strsplit(words[i], \"\
    \")))) > max_unique) {\n      max_unique <- length(unique(unlist(strsplit(words[i],\
    \ \"\"))))\n      index <- i\n    }\n  }\n  \n  return(words[index])\n}\n", "\n\
    \    max <- 0\n    result <- words[1]\n    for (word in words) {\n        unique\
    \ <- unique(word)\n        if (length(unique) > max) {\n            max <- length(unique)\n\
    \            result <- word\n        }\n    }\n    return(result)\n}\n", "\n \
    \ # YOUR CODE HERE\n  return(words[1])\n}", "\n    length(unique(words)) == max(sapply(words,\
    \ function(x) length(unique(x))))\n}\n\nwords = c('name', 'of', 'string')\nfind_max(words)\n\
    \nwords = c('name', 'enam', 'game')\nfind_max(words)\n\nwords = c('aaaaaaa', 'bb',\
    \ 'cc')\nfind_max(words)\n", "\n  \n  unique_chars <- sapply(words, function(w)\
    \ length(unique(unlist(strsplit(w, \"\")))))\n  most_unique <- max(unique_chars)\n\
    \  words[which.max(unique_chars)]\n}\n\nfind_max(c('name', 'of', 'string'))\n\
    find_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\
    \  # your code here\n  wchar <- 0\n  wmax <- ' '\n  for (w in words) {\n    u\
    \ <- length(unique(strsplit(w, split = '')[[1]]))\n    if (u > wchar) {\n    \
    \  wchar <- u\n      wmax <- w\n    }\n  }\n  return(wmax)\n}\n", "\n  n <- nchar(words)\n\
    \  uniq <- nchar(unique(words))\n  word <- c()\n  for (i in 1:length(n)) {\n \
    \   if (n[i] == uniq[i]) {\n      word <- c(word, i)\n    }\n  }\n  words[which.min(nchar(words[word]))]\n\
    }", "\n  max(sapply(words, function(x) { sum(!duplicated(strsplit(x, \"\")[[1]]))\
    \ }))\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    # write your code here\n    max_index\
    \ <- 0\n    max_unique <- length(unique(words[1]))\n    max_pos <- 0\n    for\
    \ (i in 2:length(words)) {\n        word <- words[i]\n        n_unique <- length(unique(word))\n\
    \        if (n_unique > max_unique) {\n            max_unique <- n_unique\n  \
    \          max_index <- i\n        } else if (n_unique == max_unique) {\n    \
    \        min_pos <- min(max_pos, which(words == word)[1])\n            max_pos\
    \ <- which(words == word)[1]\n            if (min_pos == max_pos) {\n        \
    \        max_index <- i\n            }\n        }\n    }\n    return(words[max_index])\n\
    }\n\n", "\n    max.uniq <- 0\n    max.word <- \"\"\n    for (word in words) {\n\
    \        uniq <- unique(unlist(strsplit(word, \"\")))\n        if (length(uniq)\
    \ > max.uniq) {\n            max.uniq <- length(uniq)\n            max.word <-\
    \ word\n        }\n    }\n    return(max.word)\n}\n\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  max <- 0\n  max_word <- \"\"\n  for (word in words) {\n    uniques\
    \ <- unique(word)\n    if (length(uniques) > max) {\n      max <- length(uniques)\n\
    \      max_word <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  # Count the\
    \ number of unique characters for each word\n  n_unique <- sapply(words, function(word)\
    \ {\n    # Split word into character vector\n    word_chars <- strsplit(word,\
    \ \"\")[[1]]\n    # Count the number of unique characters using a vector of booleans\n\
    \    # where TRUE indicates an unseen character\n    sum(!word_chars %in% word_chars[1:1])\n\
    \  })\n  # Return the word that has the maximum number of unique characters\n\
    \  words[which.max(n_unique)]\n}", "\n   \n    #  We first create a function that\
    \ calculate the number of unique characters in a string\n    get_uni <- function(x)\
    \ {\n        unique(unlist(strsplit(x, '')))\n    }\n    \n    # Then, we apply\
    \ this function on the words\n    tmp <- sapply(words, get_uni)\n    \n    # And\
    \ we find the index where the number of unique characters is maximal\n    ind\
    \ <- which.max(sapply(tmp, length))\n    \n    # We return the word with this\
    \ index\n    return(words[ind])\n}\ntest_that('test 11', {\n    expect_equal(find_max(c('name',\
    \ 'of', 'string')), 'string')\n    expect_equal(find_max(c('name', 'enam', 'game')),\
    \ 'enam')\n    expect_equal(find_max(c('aaaaaaa', 'bb', 'cc')), 'aaaaaaa')\n})\n\
    \ ", "\n    words_df <- data.frame(words, stringsAsFactors = FALSE)\n    words_df\
    \ <- words_df %>%\n        mutate(num_unique_chars = rowSums(sapply(strsplit(words,\
    \ \"\"), unique))) %>%\n        arrange(desc(num_unique_chars), words)\n    words_df[1,1]\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    word <- ''\n    unique_count <-\
    \ 0\n    for (i in words) {\n        if (length(unique(strsplit(i, split = '')[[1]]))\
    \ > unique_count) {\n            word <- i\n            unique_count <- length(unique(strsplit(i,\
    \ split = '')[[1]]))\n        }\n    }\n    word\n}\n\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  w <- sapply(words, function(w) {\n    list(uniq_chars = length(unique(strsplit(w,\
    \ \"\")[[1]])), word = w)\n  })\n  data.frame(w) %>%\n    filter(uniq_chars ==\
    \ max(uniq_chars)) %>%\n    filter(word == min(word)) %>%\n    pull(word)\n}\n",
  "\n  max_l <- 0\n  max_w <- ''\n  for (w in words) {\n    if (length(unique(strsplit(w,\
    \ '')[[1]])) > max_l) {\n      max_l <- length(unique(strsplit(w, '')[[1]]))\n\
    \      max_w <- w\n    }\n  }\n  return(max_w)\n}\nprint(find_max(c('name', 'of',\
    \ 'string')))\nprint(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')))\n", "\n  words[which.max(unlist(lapply(words, unique)))]\n}\n\n\
    x <- c('name', 'of', 'string')\ny <- c('name', 'enam', 'game')\nz <- c('aaaaaaa',\
    \ 'bb', 'cc')\ncat(find_max(x), find_max(y), find_max(z), '\\n')\n\n", "\n   \
    \ # get the number of unique characters of each word\n    nuc <- sapply(words,\
    \ function(word) {\n        length(unique(unlist(strsplit(word, \"\"))))\n   \
    \ })\n    # get the max number of unique characters\n    max_nuc <- max(nuc)\n\
    \    # create an index of words that have the max number of unique characters\n\
    \    max_idx <- which(nuc == max_nuc)\n    # get the word with the max number\
    \ of unique characters that comes first\n    # in lexicographical order\n    words[which.min(max_idx)]\n\
    }\n", "\n  # Compute the number of unique characters for each word.\n  counts\
    \ <- lengths(table(unlist(strsplit(words, \"\"))))\n  # Which word(s) have the\
    \ maximum number of unique characters?\n  max_words <- words[counts == max(counts)]\n\
    \  # Return the first such word in lexicographical order.\n  return(max_words[1])\n\
    }\n\nfind_max(c(\"name\", \"of\", \"string\"))\nfind_max(c(\"name\", \"enam\"\
    , \"game\"))\nfind_max(c(\"aaaaaaa\", \"bb\", \"cc\"))\n", "\n    max_word <-\
    \ ''\n    max_num_chars <- 0\n    for (word in words) {\n        unique_chars\
    \ <- unique(unlist(strsplit(word, '')))\n        num_chars <- length(unique_chars)\n\
    \        if (num_chars > max_num_chars) {\n            max_word <- word\n    \
    \        max_num_chars <- num_chars\n        }\n    }\n    return(max_word)\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    len <- sapply(strsplit(words, ''),\
    \ length)\n    i <- order(len, words, decreasing = TRUE)\n    return(words[i[1]])\n\
    }\n", "\n    # YOUR CODE HERE\n}\n", "\n    max_len <- max(lapply(words, function(word)\
    \ {nchar(unique(word))}))\n    word <- words[which.max(lapply(words, function(word)\
    \ {nchar(unique(word))}))]\n    return(word)\n}\nfind_max(c('name', 'of', 'string'))\n\
    find_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\
    \  cnt <- lapply(words, function(x) {\n    res <- list()\n    for (y in x) {\n\
    \      res[[y]] <- 1\n    }\n    length(res)\n  })\n  # print(cnt)\n  max_cnt\
    \ <- max(cnt)\n  max_ind <- which(cnt == max_cnt)\n  max_ind <- max_ind[1]\n \
    \ # print(max_ind)\n  words[max_ind]\n}\n\nwords <- c('name', 'of', 'string')\n\
    cat(find_max(words), '\\n')\nwords <- c('name', 'enam', 'game')\ncat(find_max(words),\
    \ '\\n')\nwords <- c('aaaaaaa', 'bb', 'cc')\ncat(find_max(words), '\\n')\n", "\n\
    \  max <- 0\n  max_word <- NULL\n  for (word in words) {\n    nchars <- length(unique(strsplit(word,\
    \ '')[[1]]))\n    if (nchars > max) {\n      max <- nchars\n      max_word <-\
    \ word\n    }\n  }\n  return(max_word)\n}\nfind_max(c('name', 'of', 'string'))\n\
    find_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\
    \  max_word <- words[1]\n  for (word in words) {\n    max_word_length <- length(unique(strsplit(max_word,\
    \ \"\")[[1]]))\n    word_length <- length(unique(strsplit(word, \"\")[[1]]))\n\
    \    if (word_length > max_word_length) {\n      max_word <- word\n    }\n  }\n\
    \  return(max_word)\n}\n", "\n  if (length(words) == 0) {\n    return (NA)\n \
    \ }\n  unique_chars <- unique(unlist(strsplit(words, \"\")))\n  string_unique_chars\
    \ <- lapply(words, function(x) unique(unlist(strsplit(x, \"\"))))\n  max_chars\
    \ <- max(sapply(string_unique_chars, length))\n  max_words <- words[sapply(string_unique_chars,\
    \ length) == max_chars]\n  return (min(max_words))\n}\n", "\n  # Your code goes\
    \ here\n  word = words[1]\n  word_num = length(unique(unlist(strsplit(word, \"\
    \"))))\n  for (str in words) {\n    str_num = length(unique(unlist(strsplit(str,\
    \ \"\"))))\n    if (str_num > word_num) {\n      word = str\n      word_num =\
    \ str_num\n    }\n  }\n  return(word)\n}\n\nprint(find_max(c('name', 'of', 'string')))\n\
    print(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa', 'bb',\
    \ 'cc')))\n", "\n  words <- sort(unique(words))\n  for (w in words) {\n    if\
    \ (is_unique(w)) {\n      return(w)\n    }\n  }\n}", "\n  words <- sort(words,\
    \ decreasing = TRUE, FUN = function(x) uniq_char(x))\n  return(words[1])\n}\n",
  "\n    # create new list to store each words unique char count\n    uniques <- list()\n\
    \    # loop through each word\n    for (word in words) {\n        # set char count\
    \ to zero\n        count <- 0\n        # loop through each character\n       \
    \ for (char in word) {\n            # add to count if the character is unique\
    \ to the word\n            if (grepl(char, word) & !grepl(char, str_split(word,\
    \ \"\")[[1]][1:(count)])) {\n                count <- count + 1\n            }\n\
    \        }\n        # append the word and its unique character count to the list\n\
    \        uniques <- append(uniques, c(word, count))\n    }\n    # calculate the\
    \ maximum number of unique characters\n    max <- max(uniques[[2]], uniques[[4]],\
    \ uniques[[6]])\n    # check if the first word had the max unique characters\n\
    \    if (uniques[[2]] == max) {\n        return(uniques[[1]])\n    # check if\
    \ the second word had the max unique characters\n    } else if (uniques[[4]] ==\
    \ max) {\n        return(uniques[[3]])\n    # the third word had the max unique\
    \ characters\n    } else {\n        return(uniques[[5]])\n    }\n}\n", "\n   \
    \ string_with_max_unique_characters <- \"\"\n    for (word in words) {\n     \
    \   # We use unique_characters here because it's a character vector\n        #\
    \ (like a string), so we can use %in% to check if each character\n        # is\
    \ unique.\n        unique_characters <- word[!word %in% word[-which(word == word)]]\n\
    \        if (length(unique_characters) > length(string_with_max_unique_characters))\
    \ {\n            string_with_max_unique_characters <- word\n        }\n    }\n\
    \    return(string_with_max_unique_characters)\n}\ntest_that(\"find_max() works\
    \ for a single word\", {\n    expect_equal(find_max(c(\"name\")), \"name\")\n\
    })\ntest_that(\"find_max() works for many words\", {\n    expect_equal(find_max(c(\"\
    name\", \"of\", \"string\")), \"string\")\n    expect_equal(find_max(c(\"name\"\
    , \"enam\", \"game\")), \"enam\")\n    expect_equal(find_max(c(\"aaaaaaa\", \"\
    bb\", \"cc\")), \"aaaaaaa\")\n})\n ", "\n  max_unique <- max(\n    mapply(function(word)\
    \ length(unique(unlist(strsplit(word, \"\")))), words)\n  )\n  first_word <- mapply(function(word)\
    \ length(unique(unlist(strsplit(word, \"\")))) == max_unique, words)\n  return(words[first_word])\n\
    }\n", "\n  ## YOUR CODE HERE\n}\n", "\n  x <- strsplit(words, \"\")\n  # This\
    \ is a nasty hack to get the unique letters in each word\n  unique_chars <- sapply(x,\
    \ function(y) length(unique(y)))\n  # Get the highest number of unique chars\n\
    \  num_unique_chars <- max(unique_chars)\n  # Get the index of the string with\
    \ the highest number of unique chars\n  ind <- which(unique_chars == num_unique_chars)\n\
    \  # Get the word with the highest number of unique chars and return it\n  words[ind[1]]\n\
    }\n\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  # your code here\n}\n", "\n  unique_char_count\
    \ <- sapply(words, function(word) length(unique(unlist(strsplit(word, \"\")))))\n\
    \  max_char_count <- max(unique_char_count)\n  max_idx <- which(unique_char_count\
    \ == max_char_count)\n  if (length(max_idx) == 1) {\n    return(words[max_idx])\n\
    \  } else {\n    return(words[which.min(words[max_idx])])\n  }\n}\n\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n    max.word <- NULL\n    max.n.chars <- 0\n    for (w in\
    \ words) {\n        n.chars <- length(unique(unlist(strsplit(w, \"\"))))\n   \
    \     if (is.null(max.word) || n.chars > max.n.chars) {\n            max.word\
    \ <- w\n            max.n.chars <- n.chars\n        }\n    }\n    return(max.word)\n\
    }\n\nwords = c('name', 'of', 'string')\ncat(find_max(words), \"\\n\")\n\nwords\
    \ = c('name', 'enam', 'game')\ncat(find_max(words), \"\\n\")\n\nwords = c('aaaaaaa',\
    \ 'bb', 'cc')\ncat(find_max(words), \"\\n\")", "\n  words[which.max(lapply(words,\
    \ function(x) {\n    length(unique(unlist(strsplit(x, \"\"))))\n  }))]\n}\n\n\
    find_max <- function(words) {\n  words[which.max(lapply(words, function(x) {\n\
    \    length(unique(strsplit(x, \"\")[[1]]))\n  }))]\n}\n", "\n  words <- as.character(words)\n\
    \  length_of_strings <- nchar(words)\n  length_of_strings <- sapply(length_of_strings,\
    \ function(x) x-length(unique(strsplit(words, '')[[1]])))\n  #get rid of the quotes\n\
    \  max_length <- max(length_of_strings)\n  index <- match(max_length, length_of_strings)\n\
    \  #return the first word if there are multiple words with the same max length\n\
    \  return(words[index[1]])\n}\ncat(find_max(c('name', 'of', 'string')))", "\n\
    \    return(words[which.max(nchar(unique(strsplit(as.character(words), \"\")[[1]])))])\n\
    }\nprint(find_max(c('name', 'of', 'string')))\nprint(find_max(c('name', 'enam',\
    \ 'game')))\nprint(find_max(c('aaaaaaa', 'bb', 'cc')))\n", "\n    n_unique_chars\
    \ <- sapply(words, function(word) {\n        unique(strsplit(word, \"\")[[1]])\n\
    \    })\n    max_n_unique_chars <- max(n_unique_chars)\n    words[which.max(n_unique_chars)]\n\
    }\n \n", "\n  # We need to return the word with maximum number of unique characters,\n\
    \  # and in case of a tie, lexicographically first.\n  # Therefore, we can re-write\
    \ this as: return the word with largest number\n  # of UNIQUE characters, and\
    \ in case of a tie, lexicographically smallest.\n  # Sorting is a general way\
    \ to do this:\n  #\n  # sort(unique_char_counts, x)\n  #\n  # returns a new vector\
    \ which is\n  # - ordered lexicographically (since unique_char_counts is numeric,\n\
    \  #   and so is the result of length(unique(x)), so the sorting is not\n  # \
    \  lexicographical by character but by numeric value)\n  # - ordered in ascending\
    \ order since we did not provide any other\n  #   arguments to sort\n  #\n  #\
    \ in the case of ties, the one that comes earlier in the original vector\n  #\
    \ wins, and so the lexicographically smallest word which has maximum\n  # number\
    \ of unique characters is the first element of the sorted vector.\n  #\n  # We\
    \ are not looking for a word with some particular length but a word\n  # which\
    \ has maximum number of unique characters, therefore we do not\n  # need to make\
    \ use of max(...) here.\n  return(words[order(sapply(words, function(x) length(unique(x))))])[1]\n\
    }\n", "\n \n}\n", "\n  max_num_uniq <- 0\n  max_words <- NULL\n  for (word in\
    \ words) {\n    num_uniq <- length(unique(word))\n    if (num_uniq > max_num_uniq)\
    \ {\n      max_num_uniq <- num_uniq\n      max_words <- word\n    } else if (num_uniq\
    \ == max_num_uniq) {\n      if (word < max_words) {\n        max_words <- word\n\
    \      }\n    }\n  }\n  return(max_words)\n}\n", "\n    unique_words = unique(words)\n\
    \    max = 0\n    max_word = ''\n    for (word in unique_words) {\n        number_of_unique_characters\
    \ = length(unique(unlist(strsplit(word, \"\"))))\n        if (number_of_unique_characters\
    \ > max) {\n            max = number_of_unique_characters\n            max_word\
    \ = word\n        }\n    }\n    return(max_word)\n}\n\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  max <- 0\n  max_word <- words[1]\n  for (i in 1:length(words))\
    \ {\n    num_unique <- length(unique(unlist(strsplit(words[i], \"\"))))\n    if\
    \ (num_unique > max) {\n      max <- num_unique\n      max_word <- words[i]\n\
    \    }\n  }\n  return(max_word)\n}\n ", "\n  output_list <- sapply(words, function(x)\
    \ {\n    return(nchar(unique(unlist(strsplit(x, \"\")))))\n  })\n  return(words[which.max(output_list)])\n\
    }\n", "\n  tab <- table(unlist(strsplit(words, \"\")))\n  max <- tab[tab == max(tab)]\n\
    \  return(names(max)[1])\n}", "\n\tmax_word <- words[1]\n\tmax_count <- length(unique(words[1]))\n\
    \tfor (i in seq(2, length(words))) {\n\t\tcount <- length(unique(words[i]))\n\t\
    \tif (count > max_count) {\n\t\t\tmax_word <- words[i]\n\t\t\tmax_count <- count\n\
    \t\t}\n\t}\n\treturn(max_word)\n}\n", "\n  # your code here\n  return(words[which.max(nchar(unique(words)))])\n\
    }\ntest_that('Task10 - find_max', {\n  expect_equal(find_max(c('name', 'of', 'string')),\
    \ 'string')\n  expect_equal(find_max(c('name', 'enam', 'game')), 'enam')\n  expect_equal(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')), 'aaaaaaa')\n})\n ", "\n    max_val <- max(lapply(words, unique))\n\
    \    unique_words <- lapply(words, unique)\n    names(unique_words) <- words\n\
    \    names(unique_words[which(unique_words == max_val)])[1]\n}\n", "\n    max_score\
    \ <- 0\n    max_word <- \"\"\n    for (word in words) {\n        score <- length(unique(strsplit(word,\
    \ \"\")[[1]]))\n        if (score > max_score || (score == max_score && word <\
    \ max_word)) {\n            max_score <- score\n            max_word <- word\n\
    \        }\n    }\n    return(max_word)\n}\n", "\n  max_count <- 0\n  max_word\
    \ <- NULL\n  for (word in words) {\n    if (max_count < length(unique(word)))\
    \ {\n      max_count <- length(unique(word))\n      max_word <- word\n    }\n\
    \  }\n  return(max_word)\n}\n\nwords <- c('name', 'of', 'string')\nprint(find_max(words))\n\
    words <- c('name', 'enam', 'game')\nprint(find_max(words))\nwords <- c('aaaaaaa',\
    \ 'bb', 'cc')\nprint(find_max(words))\n", "\n  # TODO: Write your function here.\n\
    }\n\n", "\n  t <- data.frame(word = words,\n                  unique_count = sapply(words,\
    \ function(w) length(unique(unlist(strsplit(w, \"\"))))))\n  return(t[which.max(t$unique_count),]$word)\n\
    }\n", "\n  max <- \"\"\n  for (word in words) {\n    if (unique_chars(word) >=\
    \ unique_chars(max)) {\n      max <- word\n    }\n  }\n  return(max)\n}", "\n\
    \  # Calculate number of unique letters for each word in words.\n  uniq_chars\
    \ <- sapply(words,\n                       function(word) {\n                \
    \         # Assign a sequence of letters from a to z to each\n               \
    \          # letter in word and return the length of unique\n                \
    \         # letters in word.\n                         return(length(unique(factor(word,\
    \ LETTERS))))\n                       })\n  # Get the index of maximum number\
    \ of unique characters.\n  max_ind <- which.max(uniq_chars)\n  # Return the word\
    \ with maximum number of unique characters.\n  return(words[max_ind])\n}\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n  if (length(words) == 0) {\n    return(NULL)\n  }\n  word_info\
    \ <- sapply(words, function(word) {\n    unique_chars <- unique(strsplit(word,\
    \ '')[[1]])\n    length(unique_chars)\n  })\n  max_word_idx <- which.max(word_info)\n\
    \  words[max_word_idx]\n}\n", "\n    # YOUR CODE HERE\n    max_chars <- max(sapply(words,\
    \ function(x) length(unique(x))))\n    words_with_max_chars <- words[sapply(words,\
    \ function(x) length(unique(x))) == max_chars]\n    words_with_max_chars[1]\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    max <- 0\n    for (i in 1:length(words))\
    \ {\n        if (unique(strsplit(words[i], \"\")[[1]]) > max) {\n            max\
    \ <- unique(strsplit(words[i], \"\")[[1]])\n            result <- words[i]\n \
    \       }\n    }\n    return(result)\n}\n", "\n    words.uniques <- lapply(words,\
    \ function(x) {length(unique(unlist(strsplit(x, \"\"))))})\n    tmp <- sapply(words.uniques,\
    \ max)\n    return(words[which(tmp == words.uniques)])\n}\n\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n    if (length(words) == 0) {\n        return(NA)\n    }\n\
    \    words <- strsplit(words, '')\n    out <- words[[1]]\n    n_max <- nchar(out)\n\
    \    for (i in 2:length(words)) {\n        n <- nchar(words[[i]])\n        if\
    \ (n > n_max) {\n            out <- words[[i]]\n            n_max <- n\n     \
    \   }\n    }\n    return(out)\n}\n\nfind_max <- function(words) {\n    if (length(words)\
    \ == 0) {\n        return(NA)\n    }\n    unique_chars <- function(word) {\n \
    \       return(length(unique(word)))\n    }\n    words <- sapply(words, unique_chars)\n\
    \    return(words)\n}\n", "\n  max_letters <- 0\n  max_word <- ''\n  for (word\
    \ in words) {\n    unique_letters <- unique(word)\n    if (length(unique_letters)\
    \ > max_letters ||\n      (length(unique_letters) == max_letters &&\n        word\
    \ < max_word)) {\n      max_letters <- length(unique_letters)\n      max_word\
    \ <- word\n    }\n  }\n  return(max_word)\n}\n\nprint(find_max(c('name', 'of',\
    \ 'string')))\nprint(find_max(c('name', 'enam', 'game')))\nprint(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')))\n", "\n  find_max_using_sapply <- function(words) {\n    return(words[which.max(sapply(words,\
    \ function(word) {\n      return(length(unique(unlist(strsplit(word, '')))))\n\
    \    }))])\n  }\n  find_max_using_max <- function(words) {\n    return(words[which.max(words,\
    \ function(word) {\n      return(length(unique(unlist(strsplit(word, '')))))\n\
    \    })])\n  }\n  return(find_max_using_max(words))\n}", "\n  n_words <- length(words)\n\
    \  n_unique <- NULL\n  for (i in 1:n_words) {\n    n_unique[i] <- length(unique(unlist(strsplit(words[i],\
    \ \"\"))))\n  }\n  return(words[which.max(n_unique)])\n}\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  words <- as.character(words)\n  unique_chars <- sapply(words,\
    \ function(word) {\n    length(unique(strsplit(word, \"\")[[1]]))\n  })\n  words[which.max(unique_chars)]\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    max = length(strsplit(words[1],\
    \ \"\")[[1]])\n    max_char = words[1]\n    for (word in words) {\n        char_no\
    \ = length(strsplit(word, \"\")[[1]])\n        if (char_no > max) {\n        \
    \    max = char_no\n            max_char = word\n        }\n    }\n    max_char\n\
    }", "\n  max.char <- unlist(lapply(words, function(x) length(unique(strsplit(x,\
    \ \"\")[[1]]))))\n  words[which.max(max.char)]\n}\n", "\n  unique_char_map <-\
    \ lapply(words, function(x) length(unique(strsplit(x, \"\")[[1]])))\n  unique_char_map\
    \ <- unique_char_map[order(unique_char_map, decreasing = TRUE)]\n  words[which(unique_char_map[1]\
    \ == lapply(words, function(x) length(unique(strsplit(x, \"\")[[1]]))))]\n}\n",
  "\n    max_len <- max(sapply(words, FUN = function(w) length(unique(unlist(strsplit(w,\
    \ split = \"\"))))))\n    possible_words <- words[sapply(words, FUN = function(w)\
    \ length(unique(unlist(strsplit(w, split = \"\")))) == max_len)]\n    return(possible_words[which.min(possible_words)])\n\
    }", "\n  max_index <- 1\n  for (i in 2:length(words)) {\n    if (length(unique(strsplit(words[i],\
    \ \"\")[[1]])) > length(unique(strsplit(words[max_index], \"\")[[1]]))) {\n  \
    \    max_index <- i\n    }\n  }\n  return(words[max_index])\n}\n ", "\n  if (length(words)==0)\n\
    \    stop('Not enough words')\n  uc <- sapply(words, function(x) {\n    length(unique(unlist(strsplit(x,'',fixed=TRUE))))\n\
    \  })\n  i <- which.max(uc)\n  words[i]\n}\nwords <- c('name', 'of', 'string')\n\
    find_max(words)\nwords <- c('name', 'enam', 'game')\nfind_max(words)\nwords <-\
    \ c('aaaaaaa', 'bb', 'cc')\nfind_max(words)\nwords <- c()\nfind_max(words)\n",
  "\n  res <- lapply(words, function(x) {\n    strsplit(x, \"\")[[1]]\n  })\n  res\
    \ <- lapply(res, function(x) {\n    unique(x)\n  })\n  res <- lapply(res, function(x)\
    \ {\n    length(x)\n  })\n  res <- sapply(seq_along(res), function(i) {\n    res[i]\
    \ == max(res)\n  })\n  if (sum(res) > 1) {\n    ind <- which(res == T)\n    words[ind[1]]\n\
    \  } else {\n    words[which(res == T)]\n  }\n}\nfind_max(c('name', 'of', 'string'))\n\
    find_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc', 'dd'))", "\n  num_unique_chars <- sapply(words, function(word) {\n\
    \    nchar(word) == length(unique(word))\n  })\n  words[which.max(num_unique_chars)]\n\
    }\n", "\n    max_length <- 0\n    max_word <- \"\"\n    for (word in words) {\n\
    \        if (max_length < length(unique(strsplit(word, \"\")[[1]]))) {\n     \
    \       max_length <- length(unique(strsplit(word, \"\")[[1]]))\n            max_word\
    \ <- word\n        }\n    }\n    return(max_word)\n}\nfind_max(c('name', 'of',\
    \ 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb',\
    \ 'cc'))\n", "\n  max_count <- 0\n  max_word <- \"\"\n  for (w in words) {\n \
    \   count <- length(unique(strsplit(w, \"\")[[1]]))\n    if (count > max_count)\
    \ {\n      max_count <- count\n      max_word <- w\n    }\n  }\n  return(max_word)\n\
    }\n", "\n  words <- strsplit(words, \"\")\n  words <- lapply(words, unique)\n\
    \  word_lens <- sapply(words, length)\n  most_unique <- which.max(word_lens)\n\
    \  words[[most_unique]]\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))", "\n  # Create a list\
    \ of words and their unique character counts\n  unq_chars <- sapply(words, function(word)\
    \ length(unique(word)))\n  max_unq_chars <- max(unq_chars)\n  # Subset to words\
    \ with the maximum number of unique characters\n  max_words <- words[unq_chars\
    \ == max_unq_chars]\n  # Return the word that comes first in lexicographical order\n\
    \  return(max_words[order(max_words)[1]])\n}\n", "\n  max.n.uniq <- max(unlist(sapply(words,\
    \ function(word) {\n    length(unique(unlist(strsplit(word, ''))))\n  })))\n \
    \ max.pos <- which(unlist(sapply(words, function(word) {\n    length(unique(unlist(strsplit(word,\
    \ ''))))\n  })) == max.n.uniq)\n  words[max.pos[1]]\n}", "\n  max_unique <- 0\n\
    \  result <- \"\"\n  for (word in words) {\n    unique_chars <- unique(unlist(strsplit(word,\
    \ \"\")))\n    unique_char_len <- length(unique_chars)\n    if (unique_char_len\
    \ > max_unique) {\n      max_unique <- unique_char_len\n      result <- word\n\
    \    }\n  }\n  return(result)\n}\n", "\n    words <- sort(words)\n    max_length\
    \ <- max(nchar(words))\n    filt <- nchar(words) == max_length\n    max_set <-\
    \ words[filt]\n    return(min(max_set))\n}\n", "\n    # YOUR CODE HERE\n    max\
    \ <- 0\n    ans <- \"\"\n    for (word in words) {\n        if (length(unique(word))\
    \ > max) {\n            max <- length(unique(word))\n            ans <- word\n\
    \        }\n    }\n    return(ans)\n}\n ", "\n  max_length <- 0\n  max_words <-\
    \ c()\n  for (word in words) {\n    if (length(unique(word)) > max_length) {\n\
    \      max_length <- length(unique(word))\n      max_words <- word\n    } else\
    \ if (length(unique(word)) == max_length) {\n      max_words <- c(max_words, word)\n\
    \    }\n  }\n  return(sort(max_words)[1])\n}\nwords <- c('name', 'of', 'string')\n\
    print(find_max(words))\nwords <- c('name', 'enam', 'game')\nprint(find_max(words))\n\
    words <- c('aaaaaaa', 'bb', 'cc')\nprint(find_max(words))\n", "\n  num_uniq <-\
    \ sapply(words, function(x) length(unique(unlist(strsplit(x, \"\")))))\n  num_uniq\
    \ <- max(num_uniq)\n  max_ind <- which(num_uniq == num_uniq)\n  return(words[max_ind[1]])\n\
    }\nwords <- c('name', 'of', 'string')\nfind_max(words)\n", "\n  max_len <- max(nchar(unique(strsplit(words,\
    \ split = \"\")[[1]])))\n  words[nchar(unique(strsplit(words, split = \"\")[[1]]))\
    \ == max_len][1]\n}\nfind_max(c('name', 'of', 'string'))\n", "\n    return (words[which.max(lapply(words,\
    \ function(x) length(unique(unlist(strsplit(x, \"\"))))))])\n}\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n    word_length <- sapply(words, nchar)\n    word_unique\
    \ <- sapply(words, function(x) length(unique(strsplit(x, \"\")[[1]])))\n    data.frame(word\
    \ = words, length = word_length, unique = word_unique)\n}\n", "\n  uniques <-\
    \ sapply(words, function(x) length(unique(strsplit(x, '')[[1]])))\n  max_uniques\
    \ <- max(uniques)\n  max_idx <- uniques == max_uniques\n  words[max_idx]\n}\n\
    find_max(c('name', 'of', 'string'))\n\nfind_max(c('name', 'enam', 'game'))\n\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\t# Write code here\n}", "\n    max_len\
    \ <- max(nchar(unique(strsplit(words, '')[[1]])))\n    subset(words, nchar(unique(strsplit(.,\
    \ '')[[1]])) == max_len)[1]\n}\n", "\n  num <- sapply(words, function(word) {\n\
    \    nchar(word) == length(unique(strsplit(word, \"\")[[1]]))\n  })\n  words[which.max(num)]\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))", "\n  max_word <- \"\"\n  max_len <- 0\n \
    \ for (word in words) {\n    len <- length(unique(unlist(strsplit(word, \"\"))))\n\
    \    if (len > max_len) {\n      max_len <- len\n      max_word <- word\n    }\n\
    \  }\n  return(max_word)\n}\n\nprint(find_max(c(\"name\", \"of\", \"string\")))\n\
    print(find_max(c(\"name\", \"enam\", \"game\")))\nprint(find_max(c(\"aaaaaaa\"\
    , \"bb\", \"cc\")))\n", "\n  word_counts <- unlist(lapply(words, function(word)\
    \ length(unique(strsplit(word, \"\")[[1]]))))\n  idx <- which.max(word_counts)\n\
    \  words[idx]\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam',\
    \ 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    map <- list()\n    for\
    \ (word in words) {\n        map[[word]] <- unique_chars(word)\n    }\n    max\
    \ <- 0\n    selected <- NULL\n    for (key in names(map)) {\n        if (map[[key]]\
    \ > max) {\n            max <- map[[key]]\n            selected <- key\n     \
    \   }\n    }\n    selected\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  ## Check input\n\
    \  if (!is.list(words)) {\n    stop(\"Words must be a list.\")\n  }\n\n  ## This\
    \ function gets the number of unique characters in a string\n  ## and returns\
    \ it\n  n_unique_characters <- function(word) {\n    return(length(unique(strsplit(word,\
    \ '')[[1]])))\n  }\n\n  ## Find the maximum of unique characters\n  max_unique\
    \ <- max(lapply(words, n_unique_characters))\n\n  ## Find the first string with\
    \ maximum unique characters\n  for (i in 1:length(words)) {\n    if (n_unique_characters(words[[i]])\
    \ == max_unique) {\n      return(words[[i]])\n    }\n  }\n}\n\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n  unique_words <- lapply(words, function(word) {\n    unique(strsplit(word,\
    \ '')[[1]])\n  })\n  max_count <- max(lapply(unique_words, length))\n  filtered_words\
    \ <- Filter(function(x) {\n    length(x) == max_count\n  }, unique_words)\n  return(names(filtered_words)[1])\n\
    }\nfind_max(c('name', 'of', 'string'))\n", "\n  maximum_word <- words[1]\n  for\
    \ (word in words) {\n    if (length(unique(unlist(strsplit(word, \"\")))) >\n\
    \      length(unique(unlist(strsplit(maximum_word, \"\"))))) {\n      maximum_word\
    \ <- word\n    }\n  }\n  return(maximum_word)\n}\n\nfind_max <- function(words)\
    \ {\n  length(unique(unlist(strsplit(words[1], \"\"))))\n  vapply(words, function(x)\
    \ {\n    length(unique(unlist(strsplit(x, \"\"))))\n  }, 1)\n  words[which.max(vapply(words,\
    \ function(x) {\n    length(unique(unlist(strsplit(x, \"\"))))\n  }, 1))]\n}\n\
    \nfind_max <- function(words) {\n  vapply(words, function(x) {\n    length(unique(unlist(strsplit(x,\
    \ \"\"))))\n  }, 1)\n  words[which.max(vapply(words, function(x) {\n    length(unique(unlist(strsplit(x,\
    \ \"\"))))\n  }, 1))]\n}\n\nfind_max <- function(words) {\n  words[which.max(vapply(words,\
    \ function(x) {\n    length(unique(unlist(strsplit(x, \"\"))))\n  }, 1))]\n}\n\
    \nfind_max <- function(words) {\n  words[which.max(vapply(words, function(x) {\n\
    \    length(unique(unlist(strsplit(x, \"\"))))\n  }, 1))]\n}\n\nfind_max <- function(words)\
    \ {\n  words[which.max(vapply(words, function(x) {\n    length(unique(unlist(strsplit(x,\
    \ \"\"))))\n  }, 1))]\n}\n\nfind_max <- function(words) {\n  words[which.max(vapply(words,\
    \ function(x) {\n    length(unique(unlist(strsplit(x, \"\"))))\n  }, 1))]\n}\n\
    \nfind_max <- function(words) {\n  words[which.max(vapply(words, function(x)",
  "\n  words <- sort(unlist(lapply(words, function(x) length(unique(x)))))\n  words[length(words)]\n\
    }\n", "\n  max.unique <- 0\n  index <- 0\n  for (i in 1:length(words)) {\n   \
    \ if (max.unique < length(unique(strsplit(words[i], \"\")[[1]]))) {\n      max.unique\
    \ <- length(unique(strsplit(words[i], \"\")[[1]]))\n      index <- i\n    }\n\
    \  }\n  return(words[index])\n}\n \nfind_max(c('name', 'of', 'string'))\nfind_max(c('name',\
    \ 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n  max = 0\n  bestWord\
    \ = \"\"\n  for (word in words) {\n    if (length(unique(strsplit(word, \"\")[[1]]))\
    \ > max) {\n      max = length(unique(strsplit(word, \"\")[[1]]))\n      bestWord\
    \ = word\n    }\n  }\n  return(bestWord)\n}\n", "\n  # Find the word with maximum\
    \ number of unique characters\n  # ...\n}\n", "\n    words[which.max(sapply(words,\
    \ unique))]\n}\n", "\n    maxchar <- 0\n    maxword <- \"\"\n    for (i in 1:length(words))\
    \ {\n        # count the number of unique characters in a word\n        num_char\
    \ <- length(unique(unlist(strsplit(words[i], split = \"\"))))\n        if (num_char\
    \ > maxchar) {\n            maxchar <- num_char\n            maxword <- words[i]\n\
    \        }\n    }\n    return(maxword)\n}\n\nfind_max(c('name', 'of', 'string'))\n\
    find_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\
    \  longest <- ''\n  longest_len <- 0\n  for (word in words) {\n    # loop through\
    \ each letter in the word\n    seen <- c()\n    for (letter in word) {\n     \
    \ # if letter has not been seen,\n      # add it to the list of letters seen\n\
    \      if (!(letter %in% seen)) {\n        seen <- c(seen, letter)\n      }\n\
    \    }\n    # check if this word has more unique characters than the previous\n\
    \    if (length(seen) > longest_len) {\n      longest <- word\n      longest_len\
    \ <- length(seen)\n    }\n  }\n  return(longest)\n}\nwords <- c('name', 'of',\
    \ 'string')\nfind_max(words)\n", "\n    return (max(words, key = function(x) nchar(unique(x))))\n\
    }\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    max_chars <- 0\n    for (i in 1:length(words))\
    \ {\n        this_chars <- length(unique(unlist(strsplit(words[i], \"\"))))\n\
    \        if (this_chars > max_chars) {\n            max_chars <- this_chars\n\
    \            winner <- words[i]\n        }\n    }\n    return(winner)\n}\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n    max_u <- 0\n    max_string <- \"\"\n    for (word in\
    \ words) {\n        if (length(unique(unlist(strsplit(word, \"\")))) > max_u)\
    \ {\n            max_u <- length(unique(unlist(strsplit(word, \"\"))))\n     \
    \       max_string <- word\n        }\n    }\n    return(max_string)\n}\n\n",
  "\n  max_len <- -1\n  max_word <- ''\n  for (word in words) {\n    if (length(unique(unlist(strsplit(word,\
    \ '')))) > max_len) {\n      max_len <- length(unique(unlist(strsplit(word, ''))))\n\
    \      max_word <- word\n    }\n  }\n  return(max_word)\n}\n\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n  u <- sapply(words, function(word) length(unique(word)))\n\
    \  if (sum(u == max(u)) == 1) {\n    words[which.max(u)]\n  } else {\n    words[which.min(order(u))]\n\
    \  }\n}\nfind_max(c('name', 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n    uni_max <- 0\n    idx <- 0\n   \
    \ for (i in 1:length(words)) {\n        if (uni_max < length(unique(unlist(strsplit(words[i],\
    \ \"\"))))) {\n            uni_max <- length(unique(unlist(strsplit(words[i],\
    \ \"\"))))\n            idx <- i\n        }\n    }\n    return(words[idx])\n}\n\
    find_max(c('aaaaaaa', 'bb', 'cc'))", "\n    max_unique_char <- 0\n    max_word\
    \ <- ''\n    for (word in words) {\n        if (is_word_max(word, max_unique_char))\
    \ {\n            max_unique_char <- get_num_unique_char(word)\n            max_word\
    \ <- word\n        }\n    }\n    return(max_word)\n}\n\nget_num_unique_char <-\
    \ function(word) {\n    unique_char <- ''\n    for (char in word) {\n        if\
    \ (!str_detect(unique_char, char)) {\n            unique_char <- str_c(unique_char,\
    \ char)\n        }\n    }\n    return(str_length(unique_char))\n}\n\nis_word_max\
    \ <- function(word, max_unique_char) {\n    num_unique_char <- get_num_unique_char(word)\n\
    \    return(num_unique_char > max_unique_char)\n}\nfind_max(c('name', 'of', 'string'))\n\
    find_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\
    \    words[which.max(lapply(words, nchar))]\n}\nfind_max(c('name', 'of', 'string'))\n\
    find_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa', 'bb', 'cc'))\n", "\n\
    \  # Your code here\n}\n", "\n  Max = 0\n  for (i in 1:length(words)) {\n    if\
    \ (length(unique(unlist(strsplit(words[i], '')))) > Max) {\n      Max = length(unique(unlist(strsplit(words[i],\
    \ ''))))\n      Which = i\n    }\n  }\n  return(words[Which])\n}", "\n  # Write\
    \ your code here\n  max_char <- unlist(lapply(words, function(x) {\n    # your\
    \ function here\n    length(unique(unlist(strsplit(x, split=\"\"))))\n  }))\n\
    \  # index of max_char\n  argmax <- which.max(max_char)\n  words[argmax]\n}\n\n\
    test_that('test_find_max', {\n  expect_equal(find_max(c('name', 'of', 'string')),\
    \ 'string')\n  expect_equal(find_max(c('name', 'enam', 'game')), 'enam')\n  expect_equal(find_max(c('aaaaaaa',\
    \ 'bb', 'cc')), 'aaaaaaa')\n})\n\n", "\n    # YOUR CODE HERE\n    words[which.max(sapply(words,\
    \ FUN = function(x) { length(unique(unlist(strsplit(x, split = \"\")))) }))]\n\
    }\n", "\n  length(unique(words[which.max(vapply(words, unique, unique(character(0))))]))\n\
    }\n\nfind_max(c('name', 'of', 'string'))\n\nfind_max(c('name', 'enam', 'game'))\n\
    \nfind_max(c('aaaaaaa', 'bb', 'cc'))", "\n  unique_chars <- unique(unlist(strsplit(words,\
    \ \"\")))\n  max_length <- max(sapply(words, function(x) length(unique(unlist(strsplit(x,\
    \ \"\"))))))\n  max_idx <- sapply(words, function(x) length(unique(unlist(strsplit(x,\
    \ \"\")))) == max_length)\n  return(words[max_idx])\n}\n", "\n    max_num_char\
    \ <- 0\n    max_word <- \"\"\n    for (word in words) {\n        if (length(unique(word))\
    \ > max_num_char) {\n            max_num_char <- length(unique(word))\n      \
    \      max_word <- word\n        }\n    }\n    return(max_word)\n}\n\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n    max <- 0\n    result <- ''\n    for (word in words)\
    \ {\n        char_count <- length(unique(strsplit(word, '')[[1]]))\n        if\
    \ (char_count > max) {\n            max <- char_count\n            result <- word\n\
    \        }\n    }\n    return(result)\n}\n", "\n    max_uniq <- 0\n    max_word\
    \ <- \"\"\n    for (word in words) {\n        uniq_letters <- length(unique(letters))\n\
    \        if (uniq_letters > max_uniq) {\n            max_uniq <- uniq_letters\n\
    \            max_word <- word\n        }\n    }\n    return(max_word)\n}\n", "\n\
    \    max <- words[1]\n    l <- length(unique(words[1]))\n    for (w in words)\
    \ {\n        if (length(unique(w)) > l) {\n            max <- w\n            l\
    \ <- length(unique(w))\n        }\n    }\n    return(max)\n}\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n  # YOUR CODE HERE\n  table <- table(unlist(strsplit(words,\
    \ \"\")))\n  row_names <- colnames(table)\n  max_chars <- max(table[row_names])\n\
    \  num_chars <- sum(table[row_names] == max_chars)\n  if (num_chars == 1) {\n\
    \    return(row_names[table[row_names] == max_chars])\n  } else {\n    return(row_names[order(table[row_names])][max_chars])\n\
    \  }\n}\n", "\n  words[which.max(lengths(lapply(words, unique)))]\n}\n\nfind_max(c('name',\
    \ 'of', 'string'))\nfind_max(c('name', 'enam', 'game'))\nfind_max(c('aaaaaaa',\
    \ 'bb', 'cc'))\n", "\n  unique_chars <- function(word) {\n    unique(unlist(strsplit(word,\
    \ \"\")))\n  }\n  max_unique_words <- max(sapply(words, unique_chars))\n  words[which.max(sapply(words,\
    \ unique_chars))]\n}\n", "\n    if(sum(sapply(words, nchar)) == 0) {\n       \
    \ return(\"\")\n    }\n    else {\n        curr_max <- unique_chars(words[1])\n\
    \        index <- 1\n        for(i in 1:length(words)) {\n            if(length(unique_chars(words[i]))\
    \ > length(curr_max)) {\n                curr_max <- unique_chars(words[i])\n\
    \                index <- i\n            }\n        }\n        return(words[index])\n\
    \    }\n}\n", "\n  word_freq <- sapply(words, function(w) length(unique(unlist(strsplit(w,\
    \ \"\")))))\n  ind <- which.max(word_freq)\n  return(words[ind])\n}\n", "\n  unicount\
    \ <- sapply(words, function(x) length(unique(unlist(strsplit(x, \"\")))))\n  max_n\
    \ <- which.max(unicount)\n  words[max_n]\n}\n", "\n  ## Your code here.\n  all_unique\
    \ <- lapply(words,unique)\n  index <- which.max(lapply(all_unique,length))\n \
    \ words[index]\n}"]
stop_tokens:
- "\n#"
- "\n```"
