name: HumanEval_30_get_positive
language: r
prompt: "# Return only positive numbers in the list.\n# >>> get_positive(c(-1, 2,\
  \ -4, 5, 6))\n# c(2, 5, 6)\n# >>> get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10))\n# c(5, 3, 2, 3, 9, 123, 1)\nget_positive <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- get_positive\n    if(!identical(candidate(c(-1,\
  \ -2, 4, 5, 6)), c(4, 5, 6))){quit('no', 1)}\n    if(!identical(candidate(c(5, 3,\
  \ -5, 2, 3, 3, 9, 0, 123, 1, -10)), c(5, 3, 2, 3, 3, 9, 123, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(-1, -2)), c())){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    is_positive <- l > 0\n    return(l[is_positive])\n}\n", "\n\t\
    positive_list <- c()\n\tfor (i in 1:length(l)) {\n\t\tif (l[i] > 0) {\n\t\t\t\
    positive_list <- c(positive_list, l[i])\n\t\t}\n\t}\n\treturn(positive_list)\n\
    }\n", "\n    return(l[l > 0])\n}\nget_positive(c(-1, 2, -4, 5, 6))\nget_positive(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  # Your code here.\n  if (length(l)\
    \ == 0) {\n    l\n  } else {\n    first <- l[1]\n    rest <- l[-1]\n    if (first\
    \ < 0) {\n      get_positive(rest)\n    } else {\n      c(first, get_positive(rest))\n\
    \    }\n  }\n}\n", "\n  # your code here\n  unlist(lapply(l, function(x) {if (x\
    \ > 0) x}))\n}\n", "\n    positive = c()\n    for (n in l) {\n        if (n >\
    \ 0) {\n            positive = c(positive, n)\n        }\n    }\n    return(positive)\n\
    }\n", "\n    l[l > 0]\n}\n", "\n  return(l[l > 0])\n}\n", "\n  l[l > 0]\n}\nget_positive(c(-1,\
    \ 2, -4, 5, 6))\n", "\n  l[l > 0]\n}\nget_positive(c(-1, 2, -4, 5, 6))\n", "\n\
    \    # YOUR CODE HERE\n    l[l > 0]\n}\n", "\n  return(l[l > 0])\n}\nget_positive(c(-1,\
    \ 2, -4, 5, 6))\nget_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n\
    \    return(l[l > 0])\n}\nget_positive(c(-1, 2, -4, 5, 6))\nget_positive(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  return(l[l > 0])\n}\nget_positive(c(-1,\
    \ 2, -4, 5, 6))\n", "\n    res <- c()\n    for (i in 1:length(l)) {\n        if\
    \ (l[i] > 0) {\n            res <- c(res, l[i])\n        }\n    }\n    return(res)\n\
    }\n", "\n  l[l > 0]\n}\nget_positive(c(-1, 2, -4, 5, 6))\nget_positive(c(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  Filter(function(x) x > 0, l)\n}\n\
    get_positive(c(-1, 2, -4, 5, 6))\nget_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10))\n", "\n  l[which(l > 0)]\n}\nget_positive(c(-1, 2, -4, 5, 6))\nget_positive(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    return(l[l > 0])\n}\n", "\n\t\
    positive <- function(x) {\n\t\tif (x > 0) {\n\t\t\treturn(x)\n\t\t}\n\t}\n\treturn(lapply(l,\
    \ positive))\n}\n\nprint(get_positive(c(-1, 2, -4, 5, 6)))\nprint(get_positive(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)))\n"]
stop_tokens:
- "\n#"
- "\n```"
