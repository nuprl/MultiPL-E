name: HumanEval_66_digitSum
language: r
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum('')\n\
  # 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n\
  # 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum\
  \ <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- digitSum\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('abAB'), 131)){quit('no', 1)}\n\
  \    if(!identical(candidate('abcCd'), 67)){quit('no', 1)}\n    if(!identical(candidate('helloE'),\
  \ 69)){quit('no', 1)}\n    if(!identical(candidate('woArBld'), 131)){quit('no',\
  \ 1)}\n    if(!identical(candidate('aAaaaXa'), 153)){quit('no', 1)}\n    if(!identical(candidate('\
  \ How are yOu?'), 151)){quit('no', 1)}\n    if(!identical(candidate('You arE Very\
  \ Smart'), 327)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n\tascii_list <- strsplit(s, '')[[1]]\n\tascii_list <- ascii_list[grepl('[A-Z]',\
    \ ascii_list)]\n\tsum(ascii_list)\n}\n\nprint(digitSum(''))\nprint(digitSum('abAB'))\n\
    print(digitSum('abcCd'))\nprint(digitSum('helloE'))\nprint(digitSum('woArBld'))\n\
    print(digitSum('aAaaaXa'))\n", "\n    # Get the upper case\n    s <- strsplit(s,\
    \ split=\"\")[[1]]\n    up <- charToRaw(toupper(s))\n    tot <- 0\n    for (i\
    \ in up) {\n        tot <- tot + i\n    }\n    return(tot)\n}\ndigitSum('aAaaaXa')\n",
  "\n  sum(s %>% str_extract_all(\"[A-Z]\") %>% unlist() %>% as.numeric())\n}\ndigitSum('abAB')\n\
    digitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n",
  "\n  res <- 0\n  for (c in strsplit(s, \"\")[[1]]) {\n    if (c >= \"A\" && c <=\
    \ \"Z\") {\n      res <- res + as.integer(c)\n    }\n  }\n  return(res)\n}", "\n\
    \  sum <- 0\n  s <- as.character(s)\n  for (i in 1:nchar(s)) {\n    if (charToRaw(s[i])\
    \ >= 65 & charToRaw(s[i]) <= 90) {\n      sum <- sum + charToRaw(s[i])\n    }\n\
    \  }\n  return(sum)\n}\n", "\n    # Write your code here.\n}\n \ndigitSum('woArBld')\n\
    \ ", "\n    # Your code here\n    if(nchar(s) == 0) return(0)\n    if(grepl(\"\
    [A-Z]\", s, fixed = TRUE)) return(sum(gsub(\"[^A-Z]\", \"\", s)))\n    return(0)\n\
    }", "\n    s<-unlist(strsplit(s, \"\"))\n    res <- 0\n    for (i in s) {\n  \
    \      if (nchar(i) == 1 & i >= \"A\" & i <= \"Z\") {\n            res <- res\
    \ + as.numeric(charToRaw(i))\n        }\n    }\n    return(res)\n}\ndigitSum(\"\
    helloE\")\n", "\n    0\n}\n", "\n    sum(as.numeric(gsub(\"[a-z]\", \"\", s)))\n\
    }", "\n  # your code here\n  return(sum(as.numeric(gsub(\"[a-z]\", \"\", s))))\n\
    }\n", "\n    sum(str_extract_all(s, \"[A-Z]\")[[1]])\n}", "\n    sum(as.numeric(strsplit(gsub('[^[:upper:]]',\
    \ '', s), '')[[1]]))\n}\n", "\n  s <- stringi::stri_split_fixed(s, \"\", simplify\
    \ = TRUE)\n  sum(s[s >=\"A\" & s <= \"Z\"])\n}\ntestthat::test_that(\"my_digitSum\"\
    , {\n  expect_equal(digitSum(\"\"), 0)\n  expect_equal(digitSum(\"abAB\"), 131)\n\
    \  expect_equal(digitSum(\"abcCd\"), 67)\n  expect_equal(digitSum(\"helloE\"),\
    \ 69)\n  expect_equal(digitSum(\"woArBld\"), 131)\n  expect_equal(digitSum(\"\
    aAaaaXa\"), 153)\n})\n ", "\n    code <- intToUtf8(s)\n    asciiCodes <- utf8ToInt(code)\n\
    \    numbers <- asciiCodes[asciiCodes >= 65 & asciiCodes <= 90]\n    sum(numbers)\n\
    }\ndigitSum('aAaaaXa')\n", "\n    if (length(s) > 0) {\n        sum(charToRaw(s)\
    \ & 0100)\n    } else {\n        0\n    }\n}", "\n    sum(str_count(s, \"[A-Z]\"\
    )*65:90)\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"\
    helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  sum(gsub(\"[^A-Z]\"\
    , \"\", s, perl = TRUE), na.rm = TRUE)\n}\ndigitSum(\"woArBld\")", "\n  sum(as.numeric(substr(s,\
    \ 1, nchar(s))[grepl('[A-Z]', substr(s, 1, nchar(s)))]))\n}\n\ndigitSum('')\n\
    digitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n ", "\n    len <- nchar(s)\n    sum <- 0\n    for (i in 1:len)\
    \ {\n        c <- substr(s, i, i)\n        if (startsWith(c, c, ignore.case =\
    \ TRUE)) {\n            sum <- sum + as.integer(c)\n        }\n    }\n    return(sum)\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
