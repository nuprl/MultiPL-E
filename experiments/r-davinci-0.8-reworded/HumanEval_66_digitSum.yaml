name: HumanEval_66_digitSum
language: r
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum('')\n\
  # 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n\
  # 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum\
  \ <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- digitSum\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('abAB'), 131)){quit('no', 1)}\n\
  \    if(!identical(candidate('abcCd'), 67)){quit('no', 1)}\n    if(!identical(candidate('helloE'),\
  \ 69)){quit('no', 1)}\n    if(!identical(candidate('woArBld'), 131)){quit('no',\
  \ 1)}\n    if(!identical(candidate('aAaaaXa'), 153)){quit('no', 1)}\n    if(!identical(candidate('\
  \ How are yOu?'), 151)){quit('no', 1)}\n    if(!identical(candidate('You arE Very\
  \ Smart'), 327)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n\tascii_list <- strsplit(s, '')[[1]]\n\tascii_list <- ascii_list[grepl('[A-Z]',\
    \ ascii_list)]\n\tsum(ascii_list)\n}\n\nprint(digitSum(''))\nprint(digitSum('abAB'))\n\
    print(digitSum('abcCd'))\nprint(digitSum('helloE'))\nprint(digitSum('woArBld'))\n\
    print(digitSum('aAaaaXa'))\n", "\n    # Get the upper case\n    s <- strsplit(s,\
    \ split=\"\")[[1]]\n    up <- charToRaw(toupper(s))\n    tot <- 0\n    for (i\
    \ in up) {\n        tot <- tot + i\n    }\n    return(tot)\n}\ndigitSum('aAaaaXa')\n",
  "\n  sum(s %>% str_extract_all(\"[A-Z]\") %>% unlist() %>% as.numeric())\n}\ndigitSum('abAB')\n\
    digitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n",
  "\n  res <- 0\n  for (c in strsplit(s, \"\")[[1]]) {\n    if (c >= \"A\" && c <=\
    \ \"Z\") {\n      res <- res + as.integer(c)\n    }\n  }\n  return(res)\n}", "\n\
    \  sum <- 0\n  s <- as.character(s)\n  for (i in 1:nchar(s)) {\n    if (charToRaw(s[i])\
    \ >= 65 & charToRaw(s[i]) <= 90) {\n      sum <- sum + charToRaw(s[i])\n    }\n\
    \  }\n  return(sum)\n}\n", "\n    # Write your code here.\n}\n \ndigitSum('woArBld')\n\
    \ ", "\n    # Your code here\n    if(nchar(s) == 0) return(0)\n    if(grepl(\"\
    [A-Z]\", s, fixed = TRUE)) return(sum(gsub(\"[^A-Z]\", \"\", s)))\n    return(0)\n\
    }", "\n    s<-unlist(strsplit(s, \"\"))\n    res <- 0\n    for (i in s) {\n  \
    \      if (nchar(i) == 1 & i >= \"A\" & i <= \"Z\") {\n            res <- res\
    \ + as.numeric(charToRaw(i))\n        }\n    }\n    return(res)\n}\ndigitSum(\"\
    helloE\")\n", "\n    0\n}\n", "\n    sum(as.numeric(gsub(\"[a-z]\", \"\", s)))\n\
    }", "\n  # your code here\n  return(sum(as.numeric(gsub(\"[a-z]\", \"\", s))))\n\
    }\n", "\n    sum(str_extract_all(s, \"[A-Z]\")[[1]])\n}", "\n    sum(as.numeric(strsplit(gsub('[^[:upper:]]',\
    \ '', s), '')[[1]]))\n}\n", "\n  s <- stringi::stri_split_fixed(s, \"\", simplify\
    \ = TRUE)\n  sum(s[s >=\"A\" & s <= \"Z\"])\n}\ntestthat::test_that(\"my_digitSum\"\
    , {\n  expect_equal(digitSum(\"\"), 0)\n  expect_equal(digitSum(\"abAB\"), 131)\n\
    \  expect_equal(digitSum(\"abcCd\"), 67)\n  expect_equal(digitSum(\"helloE\"),\
    \ 69)\n  expect_equal(digitSum(\"woArBld\"), 131)\n  expect_equal(digitSum(\"\
    aAaaaXa\"), 153)\n})\n ", "\n    code <- intToUtf8(s)\n    asciiCodes <- utf8ToInt(code)\n\
    \    numbers <- asciiCodes[asciiCodes >= 65 & asciiCodes <= 90]\n    sum(numbers)\n\
    }\ndigitSum('aAaaaXa')\n", "\n    if (length(s) > 0) {\n        sum(charToRaw(s)\
    \ & 0100)\n    } else {\n        0\n    }\n}", "\n    sum(str_count(s, \"[A-Z]\"\
    )*65:90)\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"\
    helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  sum(gsub(\"[^A-Z]\"\
    , \"\", s, perl = TRUE), na.rm = TRUE)\n}\ndigitSum(\"woArBld\")", "\n  sum(as.numeric(substr(s,\
    \ 1, nchar(s))[grepl('[A-Z]', substr(s, 1, nchar(s)))]))\n}\n\ndigitSum('')\n\
    digitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n ", "\n    len <- nchar(s)\n    sum <- 0\n    for (i in 1:len)\
    \ {\n        c <- substr(s, i, i)\n        if (startsWith(c, c, ignore.case =\
    \ TRUE)) {\n            sum <- sum + as.integer(c)\n        }\n    }\n    return(sum)\n\
    }\n", "\n    s <- charToRaw(s)\n    sum(s %% 65L)\n}\n\ndigitSum(c(\"\", \"abAB\"\
    , \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\"))", "\n  sum(s[grep(\"[A-Z]\"\
    , s, perl = TRUE)] %>% strtoi(base = 16L))\n}", "\n  sum(as.numeric(lapply(gsub(\"\
    [^A-Z]\", \"\", s), FUN = chartr, old = \"A-Z\", new = \"1-26\")))\n}\n\ndigitSum(\"\
    abAB\")\n", "\n    upper <- gsub(\"[^A-Z]\", \"\", s)\n    tot <- 0\n    for (i\
    \ in 1:nchar(upper)) {\n        tot <- tot + as.numeric(strtoi(substr(upper, i,\
    \ i)))\n    }\n    return(tot)\n}\n", "\n  sum(charToRaw(s) - 'a')\n}\n", "\n\
    \  s_ascii <- strtoi(s, base = 16L)\n  # remove non-uppercase characters\n  s_ascii\
    \ <- s_ascii[s_ascii > 64 & s_ascii < 91]\n  sum(s_ascii)\n}\ndigitSum('helloE')\n",
  "\n    sum(gsub(\"[a-z]\", \"\", s, perl = TRUE))\n}\ndigitSum('')\ndigitSum('abAB')\n\
    digitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n",
  "\n    str_sum <- function(x) {sum(as.numeric(x))}\n    s <- str_sum(gsub(\"[^A-Z]\"\
    , \"\", s))\n    return(s)\n}\ndigitSum('abcCd')\n", "\n  sum(stringi::stri_trans_totitle(s)\
    \ %>% stringi::stri_trans_tolower() %>% stringi::stri_enc_toutf8() %>% iconv(to\
    \ = \"ASCII\") %>% as.numeric())\n}\n\ns1 <- \"abAB\"\ns2 <- \"woArBld\"\ns3 <-\
    \ \"aAaaaXa\"\n\nprint(digitSum(s1))\nprint(digitSum(s2))\nprint(digitSum(s3))\n",
  "\n  sum(as.numeric(charToRaw(s)) *(as.numeric(charToRaw(s))>=65&as.numeric(charToRaw(s))<=90))\n\
    }\n", "\n  if (is.null(s)) {\n    return(0)\n  } else {\n    s <- strsplit(s,\
    \ '')[[1]]\n    x <- as.numeric(s)\n    sum(x[x >= 65 & x <= 90])\n  }\n}\ndigitSum(s)\n",
  "\n  # Write your code here.\n  if(nchar(s) == 0) {\n    return(0)\n  }\n  else\
    \ if(nchar(s) == 1) {\n    if(is.na(strtoi(s))) {\n      return(0)\n    }\n  \
    \  else {\n      return(strtoi(s))\n    }\n  }\n  else {\n    first = substr(s,\
    \ 1, 1)\n    second = substr(s, 2, nchar(s))\n    if(is.na(strtoi(first))) {\n\
    \      return(digitSum(second))\n    }\n    else {\n      return(strtoi(first)\
    \ + digitSum(second))\n    }\n  }\n}\n", "\n    s<-strsplit(s, split = \"\")[[1]]\n\
    \    sum(as.numeric(s[s>=\"A\" & s<=\"Z\"]))\n}\n", "\n  sum <- 0\n  for (i in\
    \ 1:nchar(s)) {\n    if (is.upper.char(substr(s, i, i))) {\n      sum <- sum +\
    \ as.numeric(charToRaw(substr(s, i, i)))\n    }\n  }\n  return(sum)\n}\ndigitSum('')\n\
    digitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n", "\n  index <- sapply(strsplit(s, \"\"), function(y) grep(\"\
    [A-Z]\", y))\n  values <- sapply(strsplit(s, \"\"), function(y) as.numeric(y[index]))\n\
    \  sum(values)\n}\n", "\n  sum(sapply(s, function(x) as.numeric(substr(x, 2, 2))))\n\
    }", "\n    sum(sapply(strsplit(s, '')[[1]], function(x) {\n        if (x == tolower(x))\
    \ {\n            return(0)\n        } else {\n            return(as.numeric(x))\n\
    \        }\n    }))\n}\n\ndigitSum('')\ndigitSum('abAB')\ndigitSum('abcCd')\n\
    digitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n", "\n  sum(as.numeric(s[s\
    \ >= 'A' & s <= 'Z']))\n}", "\n    if (length(s)==0) {\n        return(0)\n  \
    \  }\n    else {\n        u=0\n        for (i in s) {\n            if (is.upper.char(i))\
    \ {\n                u=u+as.numeric(i)\n            }\n        }\n        return(u)\n\
    \    }\n}\n", "\n    # Write your code here\n    sum(0)\n}\n", "\n    upper_sum\
    \ <- 0\n    for (i in 1:nchar(s)) {\n        ascii_num <- as.integer(substr(s,\
    \ i, i))\n        if (ascii_num >= 65 && ascii_num <= 90) {\n            upper_sum\
    \ <- upper_sum + ascii_num\n        }\n    }\n    return(upper_sum)\n}\ndigitSum('woArBld')\n",
  "\n    return(sum(as.numeric(charToRaw(s)[grep(\"[A-Z]\", s)])))\n}", "\n    return(sum(unlist(strsplit(s,\
    \ \"\")) %in% LETTERS))\n}\n", "\n  upCharSum <- function(str) {\n    sum(str[grepl(\"\
    [A-Z]\", str)])\n  }\n  upCharSum(s)\n}\ntest_function(test_context(\"digitSum\"\
    ), digitSum)\n \n", "\n    sum(iconv(s, \"ASCII\", \"UTF-8\", sub=\"byte\") -\
    \ iconv(\"a\", \"ASCII\", \"UTF-8\", sub=\"byte\"))\n}\ndigitSum <- function(s)\
    \ {\n    # Count upper case letters in 's' and sum their ASCII values.\n    sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n", "\n\tsum(as.numeric(unlist(regmatches(s, regexpr(\"\
    [A-Z]\", s)))))\n}\n\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\"\
    )\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  s <- strsplit(s, \"\"\
    )[[1]]\n  return(sum(as.numeric(charToRaw(s))))\n}\ndigitSum(\"abAB\")\n", "\n\
    \    vec <- strsplit(s, split = \"\")[[1]]\n    vec <- as.numeric(vec)\n    sum(vec[vec>=65\
    \ & vec<=90])\n}\ndigitSum('woArBld')\n", "\n    total <- 0\n    for (i in 1:nchar(s))\
    \ {\n        if (isupper(s[i])) {\n            total <- total + (as.numeric(s[i]))\n\
    \        }\n    }\n    total\n}", "\n  # Your code here\n  f = function(x) {\n\
    \    if(x >= 65 && x <= 90) {\n      return(x)\n    }\n    return(0)\n  }\n  as.numeric(as.character(unlist(lapply(strsplit(s,\
    \ '')[[1]], f))))\n}", "\n  len <- nchar(s)\n  sum <- 0\n  for (i in 1:len) {\n\
    \    sum <- sum + as.numeric(charToRaw(substr(s, i, i)))\n  }\n  sum\n}\n", "\n\
    \    # Tidyverse solution\n    str_count(s, \"[A-Z]\") %>% sum\n    \n    # Base\
    \ solution\n    # sum(sapply(as.list(s), function(x) as.numeric(x) >= 65 & as.numeric(x)\
    \ <= 90))\n}\n", "\n  sum(str_count(s, \"[[:upper:]]\"))\n}\n", "\n    gsub('[^A-Z]','',s)\
    \ %>% stringi::stri_trans_nfkc() %>% stringi::stri_trans_totitle() %>% stringi::stri_locate_all_regex('.')\
    \ %>% unlist() %>% sum()\n}\n", "\n    sum(as.numeric(unlist(strsplit(s, '')))\
    \ %in% 65:90)\n}\n\ndigitSum('helloE')\n\ndigitSum <- function(str) {\n    as.numeric(str)\
    \ %>%\n        sum(na.rm = TRUE)\n}\n", "\n    sum(s %>% stringr::str_extract_all(\"\
    [A-Z]\") %>% unlist %>% charToRaw %>% as.numeric)\n}\ndigitSum(\"helloE\")\n",
  "\n  # \u4E88\u3081\u5404\u6587\u5B57\u306E ASCII \u30B3\u30FC\u30C9\u306B\u5909\
    \u63DB\u3057\u305F\u6587\u5B57\u5217\u306E vector \u3092\u4F5C\u6210\u3057\u3066\
    \u304A\u304F\n  # \u5F8C\u3067 sum(...) \u3092\u7528\u3044\u3066\u6F14\u7B97\u3057\
    \u3084\u3059\u304F\u3059\u308B\u305F\u3081\n  chars_ascii <- as.integer(charToRaw(s))\n\
    \  # \u5C0F\u6587\u5B57\u306E ASCII \u30B3\u30FC\u30C9\u3092\u53D6\u5F97\u3057\
    , `as.numeric` \u3067\u6570\u5024\u306B\u5909\u63DB\u3059\u308B\n  # (`as.numeric`\
    \ \u306F, \u5C0F\u6587\u5B57\u306E ASCII \u30B3\u30FC\u30C9\u304C\u5076\u6570\u3060\
    \u3068 0 \u306B\u5909\u63DB\u3055\u308C\u308B)\n  is_lower <- as.numeric(chars_ascii\
    \ %% 2 == 0)\n  # 1 \u304B 0 \u306E `is_lower` \u3068 `chars_ascii` \u3092\u4E00\
    \u767A\u6F14\u7B97\u3067 `chars_ascii` \u306E\n  # \u5C0F\u6587\u5B57\u90E8\u5206\
    \u3060\u3051\u30BC\u30ED\u306B\u3057\u3066\u3057\u307E\u3044, \u305D\u308C\u4EE5\
    \u5916\u306F\u7D20\u901A\u308A\u3055\u305B\u308B\n  chars_upper <- chars_ascii\
    \ * (1 - is_lower)\n  # \u6F14\u7B97\u7D50\u679C\u3092\u8FD4\u5374\u3059\u308B\
    \n  sum(chars_upper)\n}\ndigitSum('helloE')\n", "\n    print(s)\n    sum(unlist(strsplit(s,\
    \ '')) %>% \n        as.integer %>% \n        as.logical %>% \n        which)\n\
    }\n\ndigitSum('woArBld')\n", "\n    ascii <- stringi::stri_enc_toutf8(s)\n   \
    \ sum(sapply(ascii,function(x) {\n        if (x>64&x<91) {\n            x\n  \
    \      } else {\n            0\n        }\n    }))\n}\n ", "\n  total <- 0\n \
    \ for (i in 1:nchar(s)) {\n    c <- substr(s, i, i)\n    if (c >= 'A' && c <=\
    \ 'Z') {\n      total <- total + as.integer(c)\n    }\n  }\n  return(total)\n\
    }\ndigitSum('aAaaaXa')\n", "\n    up_count <- 0\n    down_count <- 0\n    for\
    \ (i in 1:nchar(s)) {\n        char <- substr(s, i, i)\n        if (char >= 'A'\
    \ & char <= 'Z') {\n            up_count <- up_count + as.numeric(char)\n    \
    \    } else if (char >= 'a' & char <= 'z') {\n            down_count <- down_count\
    \ + as.numeric(char)\n        }\n    }\n    res <- up_count - down_count\n   \
    \ return(res)\n}\ndigitSum('sdfsadfasdfasdfd')\n", "\n  ## your code goes here\n\
    \  #charToRaw('Z')\n  #unlist(strsplit(s,split=\"\"))\n  #toupper(unlist(strsplit(s,split=\"\
    \")))\n  #as.integer(charToRaw(toupper(unlist(strsplit(s,split=\"\")))))\n  #sum(as.integer(charToRaw(toupper(unlist(strsplit(s,split=\"\
    \"))))),na.rm=TRUE)\n  ## Return the sum of the integers\n  #sum(as.integer(charToRaw(toupper(unlist(strsplit(s,split=\"\
    \"))))),na.rm=TRUE)\n  sum(as.integer(charToRaw(toupper(unlist(strsplit(s,split=\"\
    \"))))),na.rm=TRUE)\n}\n", "\n  sum(unlist(strsplit(s, \"\")) %in% LETTERS)\n\
    }\ndigitSum('')\ndigitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n", "\n  if (nchar(s) == 0) {\n    sum(0)\n  } else {\n  \
    \  sum(as.integer(charToRaw(substr(s, 1, 1)))) + digitSum(substr(s, 2, nchar(s)))\n\
    \  }\n}\n", "\n    # upper <- regexpr(\"[A-Z]\", s)\n    # if (grepl(\"[A-Z]\"\
    , s)) {\n    #     s <- substr(s, upper, upper)\n    #     sum(s, na.rm = TRUE)\n\
    \    # } else {\n    #     0\n    # }\n    sum(substr(s, gregexpr(\"[A-Z]\", s),\
    \ gregexpr(\"[A-Z]\", s)), na.rm = TRUE)\n}\n", "\n  s=strsplit(toupper(s), \"\
    \")[[1]]\n  sum(as.numeric(s))\n}\ndigitSum('woArBld')\n", "\n    s <- as.character(s)\n\
    \    up_s <- stringr::str_extract_all(s, \"[A-Z]\")[[1]]\n    if (length(up_s)\
    \ == 0) {return(0)}\n    else {\n        sum(stringr::str_count(up_s, up_s))\n\
    \    }\n}\n\ndigitSum(\"aAaaaXa\")\n", "\n  #replace code below with your code\n\
    \  upper_ascii <- c(65:90)\n  upper_ascii_sum <- 0\n  if (s == \"\") {\n    upper_ascii_sum\
    \ <- 0\n  } else {\n    for (i in 1:nchar(s)) {\n      if (is.element(as.integer(substr(s,\
    \ i, i)), upper_ascii)) {\n        upper_ascii_sum <- upper_ascii_sum + as.integer(substr(s,\
    \ i, i))\n      }\n    }\n  }\n  upper_ascii_sum\n}\n\ndigitSum(\"\")\ndigitSum(\"\
    abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"\
    aAaaaXa\")\n ", "\n    sum(as.numeric(gsub(\"[a-z]\", \"\", s)))\n}\ndigitSum\
    \ <- function(s) {\n    sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n}\n\ndigitSum\
    \ <- function(s) {\n    sum(as.numeric(unlist(strsplit(s, \"\")))[s >= \"A\" &\
    \ s <= \"Z\"])\n}\n\ndigitSum <- function(s) {\n    sum(as.numeric(s[s >= \"A\"\
    \ & s <= \"Z\"]))\n}\n\ndigitSum <- function(s) {\n    sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n\ndigitSum <- function(s) {\n    sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n\ndigitSum <- function(s) {\n    sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n\ndigitSum <- function(s) {\n    sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n", "\n    digitSum <- 0\n    s <- unlist(strsplit(s,\
    \ ''))\n    for (i in 1:length(s)) {\n        if (s[i] %in% LETTERS) {\n     \
    \       digitSum <- digitSum + as.numeric(s[i])\n        }\n    }\n    digitSum\n\
    }\ndigitSum('')\n\ndigitSum('abAB')\n\ndigitSum('abcCd')\n\ndigitSum('helloE')\n\
    \ndigitSum('woArBld')\n\ndigitSum('aAaaaXa')\n", "\n  s <- toupper(s)\n  sum(as.integer(s))\n\
    }\n\ndigitSum('abAB')\ndigitSum('helloE')\ndigitSum('aAaaaXa')\n", "\n  ## Write\
    \ the code for your function here.\n\n  # create a vector of upper case letters\n\
    \  upper_letters <- letters[1:26]\n  # convert the string to upper case\n  s <-\
    \ toupper(s)\n  # create a vector of the ascii codes for each character\n  ascii_codes\
    \ <- as.integer(strsplit(s, \"\")[[1]])\n  # find the upper case letters\n  upper_letters_ascii\
    \ <- as.integer(strsplit(upper_letters, \"\")[[1]])\n  # find the position of\
    \ upper case letters in the character string\n  upper_letters_position <-  which(ascii_codes\
    \ %in% upper_letters_ascii)\n  # sum the ascii codes of the upper case letters\n\
    \  sum(ascii_codes[upper_letters_position])\n}\n", "\n  s= as.character(s)\n \
    \ sum(s%>% str_split(\"\") %>% unlist %>%as.numeric%>%as.integer)\n}\ndigitSum(\"\
    \")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"\
    woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  sum(as.integer(strsplit(s, \"\")[[1]]))\n\
    }\ndigitSum <- function(s) {\n  sum(as.integer(strsplit(s, \"\")[[1]]))\n}\ndigitSum\
    \ <- function(s) {\n  sum(as.integer(strsplit(s, \"\")[[1]]))\n}\ndigitSum <-\
    \ function(s) {\n  sum(as.integer(strsplit(s, \"\")[[1]]))\n}\ndigitSum <- function(s)\
    \ {\n  sum(as.integer(strsplit(s, \"\")[[1]]))\n}\ndigitSum <- function(s) {\n\
    \  sum(as.integer(strsplit(s, \"\")[[1]]))\n}\ndigitSum <- function(s) {\n  sum(as.integer(strsplit(s,\
    \ \"\")[[1]]))\n}\n", "\n  return(sum(as.numeric(strsplit(s, \"\")[[1]])[s >=\
    \ \"A\" & s <= \"Z\"]))\n}\n", "\n  letters <- unlist(strsplit(s, split=\"\"))\n\
    \  sum(as.numeric(letters[letters %in% LETTERS]))\n}", "\n    sum(gsub(\"[^A-Z]\"\
    , \"\", s), USE.NAMES = FALSE)\n}", "\n  sum(sapply(s, function(x) as.numeric(x)\
    \ * intToBits(x)))\n}\n\ndigitSum(\"helloE\")\n", "\n  sum(unlist(strsplit(s,\
    \ split=\"\"))[grep(pattern = \"[A-Z]\", x = unlist(strsplit(s, split=\"\")))])\n\
    }\n", "\n  # For example, the ASCII codes for 'A' to 'Z' are 65 to 90.\n  # http://www.asciitable.com/\n\
    \  # Sum all characters which are in the ASCII range 65 to 90\n  res <- 0\n  for\
    \ (i in 1:nchar(s)) {\n    if (charToRaw(substr(s, i, i))[1] >= 65 && charToRaw(substr(s,\
    \ i, i))[1] <= 90) {\n      res <- res + charToRaw(substr(s, i, i))[1]\n    }\n\
    \  }\n  return(res)\n}\ndigitSum('Hello')\n", "\n  ascii_codes <- strtoi(s, 10L)\n\
    \  # return sum of ascii codes between 65 and 90\n  ascii_codes[ascii_codes >=\
    \ 65 & ascii_codes <= 90] %>% sum()\n}\n\ntest_that('Sum of upper case ASCII values',\
    \ {\n  expect_equal(digitSum('abcCd'), 67)\n  expect_equal(digitSum('helloE'),\
    \ 69)\n  expect_equal(digitSum('woArBld'), 131)\n  expect_equal(digitSum('aAaaaXa'),\
    \ 153)\n})", "\n    chr <- toupper(s)\n    num <- as.numeric(chr)\n    ans <-\
    \ sum(num[(num >= 65 & num <= 90)])\n    return(ans)\n}", "\n    sum(gsub(\"[^A-Z]\"\
    , \"\", toupper(s)))\n}\n", "\n  sum(stri_enc_toutf8(s)[stri_locate_all_fixed(s,\
    \ '[A-Z]')])\n}\n ", "\n  s_ascii <- charToRaw(s)\n  sum(as.numeric(gsub(\"[a-z]\"\
    , \"\", s_ascii)))\n}", "\n  r <- 0\n  for (i in 1:nchar(s)) {\n    l <- substr(s,\
    \ i, i)\n    if (l %in% LETTERS) {\n      r <- r + as.numeric(charToRaw(l))\n\
    \    }\n  }\n  return(r)\n}", "\n    ascii = strsplit(s, NULL)[[1]]\n    sum =\
    \ 0\n    for (char in ascii) {\n        num = ASCII(char)\n        if (num > 64\
    \ && num < 91) {\n            sum = sum + num\n        }\n    }\n    return(sum)\n\
    }\n", "\n  sum(as.numeric(strsplit(s, '')[[1]][s >= 'A' & s <= 'Z']))\n}\n", "\n\
    \    num <- str_count(s, '[[:upper:]]')\n    return(num)\n}", "\n  sum(as.numeric(s[s\
    \ >= 'A' & s <= 'Z']))\n}\ndigitSum('')\ndigitSum('abAB')\ndigitSum('abcCd')\n\
    digitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')", "\n  sum(as.numeric(strsplit(s,\
    \ \"\")[[1]])[strsplit(s, \"\")[[1]] %in% c(LETTERS)])\n}\ndigitSum(\"abcCd\"\
    )\ndigitSum(\"abAB\")\n", "\n  sum(str_extract_all(s, \"[A-Z]\")[[1]])\n}\n",
  "\n    # Write your code here\n    # s <- gsub(\"[^[:alpha:]]\", \"\", s)\n    #\
    \ s <- strsplit(s, \"\")\n    # s <- as.numeric(s[[1]])\n    # s <- sum(s, na.rm\
    \ = TRUE)\n    # s <- sum(s)\n    sum(gsub(\"[^[:alpha:]]\", \"\", s), na.rm =\
    \ TRUE)\n}\n\ndigitSum(\"abAB\")\n", "\n  ascii <- strsplit(s,split=\"\")[[1]]\n\
    \  x <- lapply(ascii,function(x) {as.numeric(charToRaw(x))})\n  sum(unlist(x)[unlist(x)<=90])\n\
    }", "\n    mySum <- sum(str_extract_all(s, \"[A-Z]\")[[1]])\n    return(mySum)\n\
    }\ndigitSum('')\n", "\n  sum(as.numeric(s[s>='A' & s<='Z']))\n}\n", "\n  tot =\
    \ 0\n  for (i in s) {\n    tot = tot + (64+i)\n  }\n  tot\n}", "\n  sum(unlist(strsplit(s,\
    \ \"\")) %in% LETTERS)\n}\n", "\n  sum(grepl('[A-Z]', s) * as.numeric(charToRaw(s)))\n\
    }\ndigitSum <- function(s) {\n  sum(as.numeric(charToRaw(s)) * as.numeric(nchar(s)\
    \ != nchar(tolower(s))))\n}\ndigitSum <- function(s) {\n  as.numeric(strsplit(s,\
    \ split = '')[[1]]) %*% as.numeric(nchar(s) != nchar(tolower(s)))\n}\ndigitSum\
    \ <- function(s) {\n  sum(as.numeric(charToRaw(toupper(s))) * as.numeric(nchar(s)\
    \ != nchar(tolower(s))))\n}\ndigitSum <- function(s) {\n  sum(as.numeric(strsplit(s,\
    \ split = '')[[1]]) * as.numeric(nchar(s) != nchar(tolower(s))))\n}\ndigitSum\
    \ <- function(s) {\n  sum(as.numeric(charToRaw(toupper(s))) * as.numeric(nchar(s)\
    \ != nchar(tolower(s))))\n}\ndigitSum <- function(s) {\n  sum(as.numeric(charToRaw(toupper(s)))\
    \ * as.numeric(nchar(s) != nchar(tolower(s))))\n}\ndigitSum <- function(s) {\n\
    \  sum(as.numeric(charToRaw(toupper(s))) * as.numeric(nchar(s) != nchar(tolower(s))))\n\
    }\ndigitSum <- function(s) {\n  sum(as.numeric(charToRaw(toupper(s))) * as.numeric(nchar(s)\
    \ != nchar(tolower(s))))\n}\ndigitSum <- function(s) {\n  sum(as.numeric(charToRaw(toupper(s)))\
    \ * as.numeric(nchar(s) != nchar(tolower(s))))\n}\ndigitSum <- function(s) {\n\
    \  sum(as.numeric(charToRaw", "\n  sum(as.numeric(gsub(\"[a-z]\", \"\", s)))\n\
    }\n", "\n  total = 0;\n  for (i in s) {\n    if (64 < as.integer(i) & as.integer(i)\
    \ < 91) {\n      total = total + as.integer(i);\n    }\n  }\n  total;\n}\ndigitSum('aAaaaXa')\n",
  "\n  sum(utf8ToInt(strsplit(s, '')[[1]]) * (strsplit(s, '')[[1]] == toupper(strsplit(s,\
    \ '')[[1]])))\n}", "\n  sapply(strsplit(s, \"\"),\n         function(x) sum(as.numeric(charToRaw(x))\
    \ * as.numeric(x >= \"A\" & x <= \"Z\")))\n}\n\ndigitSum(\"woArBld\")\n", "\n\
    \    sum(as.numeric(substr(toupper(s), 1, 1)))\n}\ndigitSum('')\ndigitSum('abAB')\n\
    digitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n",
  "\n  intToChar <- function(x) {\n    charToRaw(char(x))\n  }\n  charToInt <- function(x)\
    \ {\n    rawToChar(as.raw(x))\n  }\n  char <- unlist(strsplit(s, \"\"))\n  ascii\
    \ <- sapply(char, charToInt)\n  filter(ascii, { x -> x >= 'A' & x <= 'Z' }) %>%\
    \ sum\n}\n\nstr1 <- \"\"\nstr2 <- \"abAB\"\nstr3 <- \"abcCd\"\nstr4 <- \"helloE\"\
    \nstr5 <- \"woArBld\"\nstr6 <- \"aAaaaXa\"\nsapply(list(str1, str2, str3, str4,\
    \ str5, str6), digitSum)\n", "\n  sum(as.numeric(str_extract_all(s, \"[[:upper:]]\"\
    )))\n}", "\n  sum(s, na.rm = TRUE)\n}\n", "\n  sum(sapply(strsplit(s, \"\")[[1]],\
    \ function(x) as.numeric(x)))\n}\n\ndigitSum(\"helloE\")\ndigitSum(\"aAaaaXa\"\
    )", "\n  #s <- strsplit(s, \"\")[[1]]\n  sum(sapply(strsplit(s, \"\")[[1]], as.numeric))\n\
    }\ndigitSum(\"abAB\")\n", "\n  str_extract_all(s, \"[A-Z]\") %>%\n    str_to_upper()\
    \ %>%\n    str_split(\"\") %>%\n    unlist() %>%\n    as.numeric() %>%\n    sum()\n\
    }", "\n    s <- strsplit(s, split = \"\")[[1]]\n    sum <- 0\n    for (i in s)\
    \ {\n        if (str_count(i, \"[A-Z]\") == 1) {\n            sum <- sum + as.numeric(str_extract(i,\
    \ \"[A-Z]\"))\n        }\n    }\n    sum\n}\ndigitSum('helloE')\n", "\n    len\
    \ = nchar(s)\n    if (len > 0) {\n        w = strsplit(s, \"\")[[1]]\n       \
    \ num = as.numeric(w)\n        num[num < 91] = 0\n        return(sum(num))\n \
    \   } else {\n        return(0)\n    }\n}\n", "\n    return(sum(as.numeric(gsub(\"\
    [a-z]\", \"\", s))))\n}\n", "\n    # 1. All ASCII codes: 33-126\n    # 2. Upper\
    \ ASCII codes: 65-90\n    # 3. Transform ASCII codes to vectors, e.g.\n    # \
    \   abAB -> (97, 98, 65, 66)\n    # 4. Get the sum of all upper ASCII codes\n\
    \    # 5. Write your code here\n}\ndigitSum <- function(s) {\n    # 1. All ASCII\
    \ codes: 33-126\n    # 2. Upper ASCII codes: 65-90\n    # 3. Transform ASCII codes\
    \ to vectors, e.g.\n    #    abAB -> (97, 98, 65, 66)\n    # 4. Get the sum of\
    \ all upper ASCII codes\n    # 5. Write your code here\n}", "\n  sum(c(unlist(strsplit(s,\
    \ \"\")) %>%\n    sapply(function(s) {\n      as.integer(s)\n    }) %>%\n    sapply(function(s)\
    \ {\n      if (s >= 65 & s <= 90) {\n        return(s)\n      } else {\n     \
    \   return(NA)\n      }\n    }) %>%\n    na.omit))\n}\n\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n", "\n    u <- 0\n    for (i in 1:nchar(s)) {\n        x\
    \ <- substr(s, i, i)\n        if (x == toupper(x)) {\n            u <- u + as.numeric(charToRaw(x))\n\
    \        }\n    }\n    return(u)\n}\ndigitSum(\"abAB\")\n", "\n\tsum(str_extract_all(s,\
    \ \"[[:upper:]]\")[[1]])\n}\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"\
    helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")", "\n  sum(as.numeric(stringi::stri_list2matrix(stringi::stri_extract_all_regex(s,\
    \ \"[A-Z]\"), byrow = TRUE)))\n}\ndigitSum(\"abcCd\")\n", "\n  # write your code\
    \ here\n}\n", "\n    ascii <- unlist(strsplit(s, \"\"))\n    sum(ascii, na.rm\
    \ = TRUE)\n}\n\ndigitSum(\"woArBld\")\n", "\n    # sample code to get you started\n\
    \    # removes non-letters\n    s <- gsub(\"[^a-zA-Z]\", \"\", s)\n    # convert\
    \ to upper case\n    s <- toupper(s)\n    # sum the resulting characters\n   \
    \ sum(as.numeric(s))\n}", "\n  num <- 0\n  for (i in 1:nchar(s)) {\n    if (str_sub(s,\
    \ i, i) %in% letters) {\n      if (str_sub(s, i, i) == str_to_upper(str_sub(s,\
    \ i, i))) {\n        num <- num + as.numeric(s[i])\n      }\n    }\n  }\n  return(num)\n\
    }\n", "\n    return(sum(lapply(strsplit(s, \"\")[[1]], function(x) {\n       \
    \ y <- as.integer(x)\n        if (y >= 65 && y <= 90) {\n            return(y)\n\
    \        } else {\n            return(0)\n        }\n    })))\n}", "\n    require(stringr)\n\
    \    return(sum(str_extract_all(s, \"[A-Z]\")[[1]]))\n}\ndigitSum(\"abAB\")\n",
  "\n  ord <- lapply(strsplit(s, '')[[1]], as.numeric)\n  sum(unlist(ord[ord > 64\
    \ & ord < 91]))\n}\n\ndigitSum('woArBld')\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\"\
    , \"\", s)))\n}\n", "\n  rtn <- 0\n  for (i in 1:nchar(s)) {\n    if (is.na(as.numeric(substr(s,\
    \ i, i)))) next\n    if (as.numeric(substr(s, i, i)) %in% 65:90) {\n      rtn\
    \ <- rtn + as.numeric(substr(s, i, i))\n    }\n  }\n  return(rtn)\n}\ndigitSum('')\n\
    digitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n", "\n  sum(as.numeric(unlist(strsplit(s, ''))) * as.numeric(grepl('[A-Z]',\
    \ unlist(strsplit(s, '')))))\n}\n", "\n    if (s == \"\") return(0)\n    num =\
    \ 0\n    for (i in 1:nchar(s)) {\n        if (charToRaw(substr(s, i, i))[1] <=\
    \ 90) {\n            num = num + charToRaw(substr(s, i, i))[1]\n        }\n  \
    \  }\n    return(num)\n}\ndigitSum(\"woArBld\")", "\n    count <- 0\n    for (i\
    \ in 1:nchar(s)) {\n        num <- substr(s, i, i)\n        count <- count + sum(ifelse(num\
    \ == toupper(num), as.numeric(charToRaw(num)), 0))\n    }\n    count\n}\n\ndigitSum('')\n\
    digitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n", "\n  sum(as.numeric(charToRaw(s)))\n}\n", "\n  sum <-\
    \ 0\n  for (i in s) {\n    if (i %in% LETTERS) {\n      sum <- sum + as.numeric(i)\n\
    \    }\n  }\n  return(sum)\n}\ndigitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n\
    digitSum('abAB')\ndigitSum('abcCd')\n", "\n  sum(sapply(s,function(x) {\n    if\
    \ (is.numeric(x)) x <- as.character(x)\n    if (x %in% LETTERS) {\n      char\
    \ <- as.character(x)\n      x <- as.numeric(charToRaw(char))\n    } else {\n \
    \     x <- 0\n    }\n    return(x)\n  }))\n}\n", "\n    sum(charToRaw(s) - 64)\n\
    }\n", "\n    sum(s,na.rm=TRUE, useNA = \"no\")\n}\ndigitSum(\"abcCd\")\n", "\n\
    \    # See if all characters in the string are upper case\n    return(sum(nchar(gsub(\"\
    [A-Z]\", \"\", s))))\n}\n\ndigitSum('')\ndigitSum('abAB')\ndigitSum('abcCd')\n\
    digitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n", "\n    sum(s\
    \ %in% LETTERS)\n}\n", "\n  s <- as.vector(s)\n  if (length(s) == 0) return(0)\n\
    \  s <- as.character(s)\n  s <- tolower(s)\n  n <- nchar(s)\n  x <- as.numeric(s)\n\
    \  for (i in 1:n) {\n    if (x[i] < 97 | x[i] > 122) x[i] <- 0\n  }\n  sum(x)\n\
    }\n\nanswer_four <- digitSum\n ", "\n    # Write your code here\n    #\n    #\
    \    s=gsub(\"\\\\D\",\"\",s)\n    s_c <- nchar(s)\n    #    print(s_c)\n    s_c_numeric\
    \ <- as.numeric(s_c)\n    #    print(s_c_numeric)\n    s_sum <- sum(s_c_numeric)\n\
    \    print(s_sum)\n    #    if(s_sum!=0){\n    #        for(i in 1:nchar(s)){\n\
    \    #            s=gsub(\"\\\\D\",\"\",s)\n    #            print(s)\n    # \
    \       }\n    #    }\n    #    if(s_sum!=0){\n    #        for(i in 1:nchar(s)){\n\
    \    #            s_sum<-sum(s_sum)\n    #            print(s_sum)\n    #    \
    \    }\n    #    }\n}\ndigitSum(\"woArBld\")\n", "\n  sum(stri_count_fixed(s,\
    \ \"[A-Z]\") * stri_count_fixed(s, \"[A-Z]\", offset = 1))\n}\ndigitSum('')\n",
  "\n  # Your code here\n  uppers <- gsub(\"[a-z]\", \"\", s)\n  as.numeric(unlist(strsplit(uppers,\
    \ \"\", fixed = TRUE))) %>% sum\n}", "\n  # check if string is empty\n  if (nchar(s)\
    \ == 0) {\n    return(0)\n  }\n  # take the first letter\n  letter = substring(s,\
    \ 1, 1)\n  # check if upper case\n  if (toupper(letter) == letter) {\n    return(as.numeric(letter)\
    \ + digitSum(substring(s, 2)))\n  } else {\n    return(digitSum(substring(s, 2)))\n\
    \  }\n}\n\nprint(digitSum(''))\nprint(digitSum('abAB'))\nprint(digitSum('abcCd'))\n\
    print(digitSum('helloE'))\nprint(digitSum('woArBld'))\nprint(digitSum('aAaaaXa'))\n\
    \ ", "\n    sum(s %in% letters)\n}\n\ndigitSum('aAaaaXa')\n", "\n  sum(lapply(strsplit(s,\
    \ \"\")[[1]], function(x) if (x == toupper(x)) as.numeric(x) else 0))\n}\n", "\n\
    \    sum(nchar(regmatches(s,regexpr(\"[A-Z]\",s))[[1]]))*26\n}", "\n  ## write\
    \ your code here\n  x <- strsplit(s, \"\")\n  y <- unlist(x)\n  z <- 0\n  for\
    \ (i in 1:length(y)){\n    if (y[i] == toupper(y[i])){\n      z <- z + intToUtf8(y[i])\n\
    \    }\n  }\n  return(z)\n}\ns <- \"abAB\"\nx <- strsplit(s, \"\")\ny <- unlist(x)\n\
    z <- 0\nfor (i in 1:length(y)){\n  if (y[i] == toupper(y[i])){\n    z <- z + intToUtf8(y[i])\n\
    \  }\n}\nz\n", "\n  return(sum(sapply(strsplit(s, \"\")[[1]], intToUtf8)))\n}\n",
  "\n  # Your code here\n  ascii_codes <- stringi::stri_trans_totitle(s)\n  ascii_codes\
    \ <- charToRaw(ascii_codes)\n  sum(ascii_codes)\n}\ndigitSum(\"abAB\")\n\ndigitSum(\"\
    abcCd\")\n\ndigitSum(\"helloE\")\n\ndigitSum(\"woArBld\")\n\ndigitSum(\"aAaaaXa\"\
    )\n", "\n    total <- 0\n    for (i in 1:nchar(s)) {\n        num <- strtoi(substr(s,\
    \ i, i))\n        if (num >= 65 && num <= 90) {\n            total <- total +\
    \ num\n        }\n    }\n    return(total)\n}\n ", "\n  sum(gsub(\"[^A-Z]\", \"\
    \", s))\n}", "\n  a <- nchar(s)\n  total <- 0\n  for (i in 1:a) {\n    if (strtoi(substr(s,\
    \ i, i)) == 0) {\n      next\n    } else {\n      total <- total + strtoi(substr(s,\
    \ i, i))\n    }\n  }\n  total\n}\n\ndigitSum(\"aAaaaXa\")\n", "\n  digits <- unlist(strsplit(s,\
    \ ''))\n  acc <- 0\n  for (digit in digits) {\n    if (digit == toupper(digit))\
    \ {\n      acc <- acc + as.numeric(as.hexmode(digit))\n    }\n  }\n  return(acc)\n\
    }\n\nR> digitSum('')\n[1] 0\nR> digitSum('abAB')\n[1] 131\nR> digitSum('abcCd')\n\
    [1] 67\nR> digitSum('helloE')\n[1] 69\nR> digitSum('woArBld')\n[1] 131\nR> digitSum('aAaaaXa')\n\
    [1] 153", "\n  sum(sapply(strsplit(s, \"\")[[1]], function(x) {\n    if (x %in%\
    \ letters) {\n      return(as.numeric(x))\n    } else {\n      return(0)\n   \
    \ }\n  }))\n}\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\n\
    digitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  sum(substring(s, regexpr(\"\
    [A-Z]\", s), regexpr(\"[A-Z]\", s)+1))\n}\n", "\n  return(sum(as.numeric(gsub(\"\
    [a-z]\", \"\", s))))\n}", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n}",
  "\n    sum(as.numeric(s[grepl(\"[A-Z]\", s)]))\n}", "\n  sum(lapply(strsplit(s,\
    \ \"\")[[1]], \n             function(x) {\n               if (is.na(as.numeric(x)))\n\
    \                 return(0)\n               else\n                 return(as.numeric(x))\n\
    \             }))\n}\ndigitSum(c(\"\", \"abAB\", \"abcCd\", \"helloE\", \"woArBld\"\
    , \"aAaaaXa\"))\n", "\n    sum_val <- 0\n    for (i in 1:nchar(s)) {\n       \
    \ if (is.na(chartr(\"a-z\", \"A-Z\", substr(s, i, i)))) {\n            next\n\
    \        } else {\n            sum_val <- sum_val + as.numeric(chartr(\"a-z\"\
    , \"A-Z\", substr(s, i, i)))\n        }\n    }\n    sum_val\n}\n\ns1 <- \"\"\n\
    s2 <- \"abAB\"\ns3 <- \"abcCd\"\ns4 <- \"helloE\"\ns5 <- \"woArBld\"\ns6 <- \"\
    aAaaaXa\"\n\ndigitSum(s1)\ndigitSum(s2)\ndigitSum(s3)\ndigitSum(s4)\ndigitSum(s5)\n\
    digitSum(s6)\n", "\n    sum(s %in% LETTERS)\n}\n", "\n    sum(s %in% LETTERS)\n\
    }\n ", "\n  sum(charToRaw(s) %>% {ifelse(. > 64 & . < 91, ., 0)}) %>% rawToChar\n\
    }\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"[^A-Z]\", \"\", s))) %>%\
    \ rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"[^A-Z]\",\
    \ \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum(charToRaw(gsub(\"\
    [^A-Z]\", \"\", s))) %>%\n    rawToChar\n}\n\ndigitSum <- function(s) {\n  sum",
  "\n  ascii.values <- strtoi(as.character(s), base = 16L)\n  ifelse(is.na(ascii.values),\
    \ 0, ascii.values) %>% sum\n}\n\ndigitSum('abcCd')\n", "\n  return(sum(c(strsplit(s,\
    \ \"\")[[1]]) %in% c(LETTERS)))\n}", "\n  sum(ifelse(nchar(s)>0,nchar(gsub('[^[:upper:]]','',s)),0))\n\
    }", "\n    # your code here\n    sum(as.numeric(unlist(strsplit(s, \"\"))))\n\
    }\ndigitSum('helloE')\n", "\n    if (nchar(s) == 0)\n        return(0)\n    sum\
    \ <- 0\n    for (i in 1:nchar(s)) {\n        if (is.na(as.integer(substr(s, i,\
    \ i))))\n            sum <- sum + 0\n        else if (as.integer(substr(s, i,\
    \ i)) >= 65 & as.integer(substr(s, i, i)) <= 90)\n            sum <- sum + as.integer(substr(s,\
    \ i, i))\n    }\n    return(sum)\n}\ndigitSum('woArBld')\n", "\n  # transforme\
    \ la chaine de caract\xE8re en vecteur\n  v <- strsplit(s, \"\")[[1]]\n  # trouve\
    \ les majuscules et les transforme en ASCII\n  maj <- as.numeric(v[v >= \"A\"\
    \ & v <= \"Z\"])\n  # somme les caract\xE8res\n  sum(maj)\n}\ndigitSum('')\ndigitSum('abAB')\n\
    digitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n",
  "\n    return(sum(sapply(strsplit(s, \"\")[[1]], function(x) as.numeric(x) * (x\
    \ >= \"A\" & x <= \"Z\"))))\n}\ndigitSum('Hello World')\ndigitSum('aAaaaXa')\n",
  "\n  sum_val <- 0\n  for (i in 1:nchar(s)) {\n    if (strtoi(substr(s, i, i)) <=\
    \ 90) {\n      sum_val <- sum_val + strtoi(substr(s, i, i))\n    }\n  }\n  return(sum_val)\n\
    }\n\ndigitSum(\"helloE\")", "\n  # write your code here\n  if (is.null(s)) return(0)\n\
    \  cat(s, \"\\n\")\n  return(sum(unlist(strsplit(s, \"\")) %in% LETTERS))\n}\n\
    \ndigitSum(NULL)", "\n    # your code here\n    sum(nchar(gsub(\"[^A-Z]\", \"\"\
    , s)))\n}", "\n\tsum(s)\n}\n\ndigitSum('')\ndigitSum('abAB')\ndigitSum('abcCd')\n\
    digitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\n", "\n  n <- nchar(s)\n\
    \  # Create a vector to store the ascii values of each characters, set the starting\
    \ value to zero\n  ascii_val <- 0\n  # Create a for loop to iterate through the\
    \ characters of the string\n  for (i in 1:n) {\n    # Cast the current character\
    \ of the string to a numeric to retrieve the ascii value,\n    # then sum it to\
    \ the accumulator\n    ascii_val <- ascii_val + as.numeric(s[i])\n  }\n  # Return\
    \ the sum of the ascii values of each character.\n  return(ascii_val)\n}\n\ndigitSum(\"\
    woArBld\")", "\n    answer <- 0\n    if(length(s) != 0) {\n        for(i in 1:length(s))\
    \ {\n            if(s[i] == toupper(s[i])) {\n                answer <- answer\
    \ + s[i]\n            }\n        }\n    }\n    return(answer)\n}\ndigitSum('helloE')\n\
    \n", "\n  x <- gregexpr(\"[A-Z]\", s)\n  y <- regmatches(s, x)\n  sum(as.numeric(unlist(strsplit(unlist(y),\
    \ \"\"))))\n}\ndigitSum(\"abAB\")", "\n    sum(as.numeric(unlist(strsplit(s, '')))[grep('[A-Z]',s)])\n\
    }", "\n\tdigitSum <- 0\n\tif(!is.null(s)){\n\t\tfor(i in 1:nchar(s)){\n\t\t\t\
    if(grepl(\"[A-Z]\", substr(s, i, i))) digitSum <- digitSum + as.numeric(substr(s,\
    \ i, i))\n\t\t}\n\t}\n\treturn(digitSum)\n}\n", "\n  sum(s %>% stringr::str_extract_all('[[:upper:]]')\
    \ %>% unlist() %>% chartr('A-Z', '1-9'))\n}\n", "\n    s <- chartr('a-z', '',\
    \ s)\n    s <- chartr('A-Z', '', s)\n    sum(as.numeric(s))\n}\ndigitSum('helloE')\n\
    digitSum('woArBld')\ndigitSum('aAaaaXa')\n", "\n  sum(sapply(s, function(x) ifelse(!is.na(as.numeric(x)),\
    \ as.numeric(x), 0)))\n}", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n}\n",
  "\n  ascii <- sapply(strsplit(s, \"\"), function(x) strtoi(x, base = 16L))\n  ascii[ascii\
    \ < 65] <- 0\n  sum(ascii)\n}", "\n  sum(s %>% str_count(pattern = \"[A-Z]\"))\n\
    }\n\ndigitSum(\"abcCd\")\ndigitSum(\"woArBld\")\ndigitSum(\"helloE\")\n", "\n\
    \  ascii_codes <- strsplit(s, split=\"\")[[1]]\n  ascii_codes <- as.numeric(ascii_codes)\n\
    \  sum(ascii_codes[ascii_codes > 96])\n}\ndigitSum('')\n", "\n  sum(str_extract_all(s,\
    \ \"[A-Z]\")[[1]])\n}\n\ndigitSum('')", "\n  upper_count <- 0\n  for (i in 1:nchar(s))\
    \ {\n    code <- as.integer(charToRaw(substr(s, i, i)))\n    if (code >= 65 &&\
    \ code <= 90) {\n      upper_count <- upper_count + code\n    }\n  }\n  return(upper_count)\n\
    }\n\ndigitSum('aAaaaXa')\n", "\n  sum(s %in% LETTERS)\n}\n\ndigitSum('abcCd')\n",
  "\n    ascii <- sapply(strsplit(s, \"\"), function(x) as.numeric(x))\n    ascii[ascii\
    \ < 65 | ascii > 90] <- 0\n    sum(ascii)\n}\ndigitSum(\"\")\n", "\n  if(s !=\
    \ \"\") {\n    c <- 0\n    for(i in 1:nchar(s)) {\n      if(intToUtf8(s[i])>=65\
    \ && intToUtf8(s[i])<=90)\n        c <- c + intToUtf8(s[i])\n    }\n    return(c)\n\
    \  }\n  else return(0)\n}", "\n  t = gsub('[^[:upper:]]', '', s)\n  sum(as.numeric(gsub('[[:upper:]]',\
    \ '0\\\\1', t)))\n}\n", "\n    upper = gsub(\"[a-z]\", \"\", s)\n    sum(as.numeric(sapply(strsplit(upper,\
    \ \"\"), function(x) {\n        return(as.numeric(x))\n    })))\n}\ndigitSum('')\n\
    digitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')\n ", "\n  i <- 0\n  total <- 0\n  while (i < nchar(s)) {\n\
    \    c <- substr(s, i + 1, i + 1)\n    code <- charToRaw(c)\n    total <- total\
    \ + as.integer(code)\n    i <- i + 1\n  }\n  return(total)\n}\ndigitSum('ABCD')\n",
  "\n  b <- strsplit(s, '')\n  d <- sapply(b, str2num)\n  return(sum(d))\n}\ndigitSum('woArBld')\n",
  "\n    sum(as.integer(gsub(\"[a-z]\", \"\", s)))\n}\n", "\n  if (nchar(s) == 0)\
    \ return(0)\n  if (nchar(s) == 1) return(as.numeric(gsub(\"[^0-9]\", \"\", s)))\n\
    \  if (nchar(s) == 2) return(sum(as.numeric(gsub(\"[^0-9]\", \"\", s))))\n  else\
    \ return(digitSum(substr(s, 1, 1)) + digitSum(substr(s, 2, nchar(s))))\n}\ndigitSum('')\n\
    digitSum('abAB')\ndigitSum('abcCd')\ndigitSum('helloE')\ndigitSum('woArBld')\n\
    digitSum('aAaaaXa')", "\n  sum(unlist(strsplit(s, ''))[grepl('[A-Z]',s)])\n}\n\
    digitSum('aAaaaXa')\n", "\n  sum(as.numeric(gsub(\"[^[:upper:]]\", \"\", s)))\n\
    }", "\n  sapply(strsplit(s, ''), function(x) sum(as.numeric(x[x %in% LETTERS])))\n\
    }", "\n  x = 0\n  for (i in 1:nchar(s)) {\n    if (is.na(charToRaw(substr(s, i,\
    \ i))[1])) {\n      x = x\n    } else if (charToRaw(substr(s, i, i))[1] < 97)\
    \ {\n      x = x + charToRaw(substr(s, i, i))[1]\n    }\n  }\n  x\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
