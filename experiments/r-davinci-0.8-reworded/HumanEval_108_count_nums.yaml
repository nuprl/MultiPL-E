name: HumanEval_108_count_nums
language: r
prompt: "# Write a function count_nums which takes a vector of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums(c())\n# 0\n# >>> count_nums(c(-1, 11, -11))\n# 1\n\
  # >>> count_nums(c(1, 1, 2))\n# 3\ncount_nums <- function(arr) {"
tests: "test_humaneval <- function() {\ncandidate <- count_nums\n    if(!identical(candidate(c()),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate(c(-1, -2, 0)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 100, 98, -7, 1, -1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(12, 23,\
  \ 34, -45, -56, 0)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1)), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    count <- 0\n    for (i in arr) {\n        if (i %/% 10 == i |\
    \ i %/% 10 == -i) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    if (x < 0) return(sum(abs(x)) -\
    \ 1)\n    else return(sum(x))\n  }))\n}\n", "\n  num_nums <- 0\n  for (i in arr)\
    \ {\n    num_nums <- num_nums + 1\n  }\n  return(num_nums)\n}\n\nprint(count_nums(c()))\n\
    print(count_nums(c(-1, 11, -11)))\nprint(count_nums(c(1, 1, 2)))\n", "\n    sum(sapply(arr,\
    \ function(x) sum(x > 0) == 0))\n}\n", "\n\tsum <- 0\n\tfor (i in arr) {\n\t\t\
    if (i < 0) {\n\t\t\ti <- i * -1\n\t\t}\n\t\t\n\t\twhile (i > 0) {\n\t\t\tsum <-\
    \ sum + i %% 10\n\t\t\ti <- i %/% 10\n\t\t}\n\t\t\n\t\tif (sum > 0) {\n\t\t\t\
    sum <- 0\n\t\t\t\n\t\t\tlength(arr) <- length(arr) + 1\n\t\t}\n\t}\n\treturn(length(arr))\n\
    }", "\n  sum(abs(arr) != arr) + sum(arr == 0)\n}\n", "\n    n <- length(arr)\n\
    \    count <- 0\n    for (i in 1:n) {\n        if (arr[i] < 0) {\n           \
    \ num <- -arr[i]\n        } else {\n            num <- arr[i]\n        }\n   \
    \     sum <- 0\n        while (num > 0) {\n            rem <- num %% 10\n    \
    \        sum <- sum + rem\n            num <- num %/% 10\n        }\n        if\
    \ (sum > 0) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:length(arr)) {\n    sum\
    \ = 0\n    if (arr[i] > 0) {\n      while (arr[i] > 0) {\n        sum = sum +\
    \ arr[i] %% 10\n        arr[i] = arr[i] %/% 10\n      }\n    } else {\n      arr[i]\
    \ = abs(arr[i])\n      while (arr[i] > 0) {\n        sum = sum + arr[i] %% 10\n\
    \        arr[i] = arr[i] %/% 10\n      }\n      sum = sum + 1\n    }\n    if (sum\
    \ > 0) {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n", "\n  return(sum(abs(arr)\
    \ %% 10 != 0 | floor(abs(arr) / 10) != 0))\n}\n", "\n    negs <- arr[arr < 0]\n\
    \    n <- nrow(arr)\n    return(n - length(negs))\n}\ncount_nums(c(-1, 11, -11))\n",
  "\n    total = 0\n    for (num in arr) {\n        digits = abs(num)\n        while\
    \ (digits > 0) {\n            total = total + digits %% 10\n            digits\
    \ = digits %/% 10\n        }\n    }\n    total\n}\n", "\n  return(length(arr[abs(arr)\
    \ > 0]))\n}\n", "\n    if (is.null(arr)) return(0)\n    if (length(arr) == 1)\
    \ return(abs(arr) > 0)\n    count_nums(head(arr, -1)) + (abs(arr[length(arr)])\
    \ > 0)\n}\n", "\n    num <- 0\n    for (i in 1:length(arr)) {\n        result\
    \ <- arr[i]\n        sum <- 0\n        while (result != 0) {\n            sum\
    \ <- sum + result %% 10\n            result <- result %/% 10\n        }\n    \
    \    if (sum > 0) {\n            num <- num + 1\n        }\n    }\n    return(num)\n\
    }\n", "\n    num <- 0\n    for (x in arr) {\n        if (sum(abs(as.numeric(strsplit(as.character(x),split=\"\
    \")[[1]]))) > 0) {\n            num <- num + 1\n        }\n    }\n    return(num)\n\
    }\n", "\n  # YOUR CODE HERE\n}\n", "\n  i <- 0\n  count <- 0\n  while (i < length(arr))\
    \ {\n    count <- if (sum(sign(arr[i]) * as.numeric(strsplit(paste(arr[i], collapse\
    \ = \"\"), \"\")[[1]])) > 0) {\n      count + 1\n    } else {\n      count\n \
    \   }\n    i <- i + 1\n  }\n  count\n}\n", "\n    sum(sapply(arr, signed_digits_sum)\
    \ > 0)\n}\n", "\n  count <- 0\n  for (i in arr) {\n    temp <- i\n    if (temp\
    \ < 0) {\n      temp <- -temp\n    }\n    #while (temp > 0) {\n    #  count <-\
    \ count + (temp %% 10)\n    #  temp <- floor(temp / 10)\n    #}\n    count <-\
    \ count + sum(x = unlist(strsplit(as.character(temp), split = \"\")))\n  }\n \
    \ return(count)\n}\n\ncount_nums <- function(arr) {\n  sum(sapply(arr, function(n)\
    \ sum(floor(abs(n)/10^(0:floor(log10(abs(n)))) %% 10))))\n}\n\n", "\n  counter\
    \ <- 0\n  for (i in 1:length(arr)) {\n    sum <- 0\n    for (j in 1:nchar(as.character(arr[i])))\
    \ {\n      str <- substr(as.character(arr[i]), j, j)\n      if (str == \"-\")\
    \ {\n        continue\n      }\n      sum <- sum + as.numeric(str)\n    }\n  \
    \  if (sum > 0) {\n      counter <- counter + 1\n    }\n  }\n  return(counter)\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
