name: HumanEval_108_count_nums
language: r
prompt: "# Write a function count_nums which takes a vector of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums(c())\n# 0\n# >>> count_nums(c(-1, 11, -11))\n# 1\n\
  # >>> count_nums(c(1, 1, 2))\n# 3\ncount_nums <- function(arr) {"
tests: "test_humaneval <- function() {\ncandidate <- count_nums\n    if(!identical(candidate(c()),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate(c(-1, -2, 0)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 100, 98, -7, 1, -1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(12, 23,\
  \ 34, -45, -56, 0)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1)), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    count <- 0\n    for (i in arr) {\n        if (i %/% 10 == i |\
    \ i %/% 10 == -i) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    if (x < 0) return(sum(abs(x)) -\
    \ 1)\n    else return(sum(x))\n  }))\n}\n", "\n  num_nums <- 0\n  for (i in arr)\
    \ {\n    num_nums <- num_nums + 1\n  }\n  return(num_nums)\n}\n\nprint(count_nums(c()))\n\
    print(count_nums(c(-1, 11, -11)))\nprint(count_nums(c(1, 1, 2)))\n", "\n    sum(sapply(arr,\
    \ function(x) sum(x > 0) == 0))\n}\n", "\n\tsum <- 0\n\tfor (i in arr) {\n\t\t\
    if (i < 0) {\n\t\t\ti <- i * -1\n\t\t}\n\t\t\n\t\twhile (i > 0) {\n\t\t\tsum <-\
    \ sum + i %% 10\n\t\t\ti <- i %/% 10\n\t\t}\n\t\t\n\t\tif (sum > 0) {\n\t\t\t\
    sum <- 0\n\t\t\t\n\t\t\tlength(arr) <- length(arr) + 1\n\t\t}\n\t}\n\treturn(length(arr))\n\
    }", "\n  sum(abs(arr) != arr) + sum(arr == 0)\n}\n", "\n    n <- length(arr)\n\
    \    count <- 0\n    for (i in 1:n) {\n        if (arr[i] < 0) {\n           \
    \ num <- -arr[i]\n        } else {\n            num <- arr[i]\n        }\n   \
    \     sum <- 0\n        while (num > 0) {\n            rem <- num %% 10\n    \
    \        sum <- sum + rem\n            num <- num %/% 10\n        }\n        if\
    \ (sum > 0) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:length(arr)) {\n    sum\
    \ = 0\n    if (arr[i] > 0) {\n      while (arr[i] > 0) {\n        sum = sum +\
    \ arr[i] %% 10\n        arr[i] = arr[i] %/% 10\n      }\n    } else {\n      arr[i]\
    \ = abs(arr[i])\n      while (arr[i] > 0) {\n        sum = sum + arr[i] %% 10\n\
    \        arr[i] = arr[i] %/% 10\n      }\n      sum = sum + 1\n    }\n    if (sum\
    \ > 0) {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n", "\n  return(sum(abs(arr)\
    \ %% 10 != 0 | floor(abs(arr) / 10) != 0))\n}\n", "\n    negs <- arr[arr < 0]\n\
    \    n <- nrow(arr)\n    return(n - length(negs))\n}\ncount_nums(c(-1, 11, -11))\n",
  "\n    total = 0\n    for (num in arr) {\n        digits = abs(num)\n        while\
    \ (digits > 0) {\n            total = total + digits %% 10\n            digits\
    \ = digits %/% 10\n        }\n    }\n    total\n}\n", "\n  return(length(arr[abs(arr)\
    \ > 0]))\n}\n", "\n    if (is.null(arr)) return(0)\n    if (length(arr) == 1)\
    \ return(abs(arr) > 0)\n    count_nums(head(arr, -1)) + (abs(arr[length(arr)])\
    \ > 0)\n}\n", "\n    num <- 0\n    for (i in 1:length(arr)) {\n        result\
    \ <- arr[i]\n        sum <- 0\n        while (result != 0) {\n            sum\
    \ <- sum + result %% 10\n            result <- result %/% 10\n        }\n    \
    \    if (sum > 0) {\n            num <- num + 1\n        }\n    }\n    return(num)\n\
    }\n", "\n    num <- 0\n    for (x in arr) {\n        if (sum(abs(as.numeric(strsplit(as.character(x),split=\"\
    \")[[1]]))) > 0) {\n            num <- num + 1\n        }\n    }\n    return(num)\n\
    }\n", "\n  # YOUR CODE HERE\n}\n", "\n  i <- 0\n  count <- 0\n  while (i < length(arr))\
    \ {\n    count <- if (sum(sign(arr[i]) * as.numeric(strsplit(paste(arr[i], collapse\
    \ = \"\"), \"\")[[1]])) > 0) {\n      count + 1\n    } else {\n      count\n \
    \   }\n    i <- i + 1\n  }\n  count\n}\n", "\n    sum(sapply(arr, signed_digits_sum)\
    \ > 0)\n}\n", "\n  count <- 0\n  for (i in arr) {\n    temp <- i\n    if (temp\
    \ < 0) {\n      temp <- -temp\n    }\n    #while (temp > 0) {\n    #  count <-\
    \ count + (temp %% 10)\n    #  temp <- floor(temp / 10)\n    #}\n    count <-\
    \ count + sum(x = unlist(strsplit(as.character(temp), split = \"\")))\n  }\n \
    \ return(count)\n}\n\ncount_nums <- function(arr) {\n  sum(sapply(arr, function(n)\
    \ sum(floor(abs(n)/10^(0:floor(log10(abs(n)))) %% 10))))\n}\n\n", "\n  counter\
    \ <- 0\n  for (i in 1:length(arr)) {\n    sum <- 0\n    for (j in 1:nchar(as.character(arr[i])))\
    \ {\n      str <- substr(as.character(arr[i]), j, j)\n      if (str == \"-\")\
    \ {\n        continue\n      }\n      sum <- sum + as.numeric(str)\n    }\n  \
    \  if (sum > 0) {\n      counter <- counter + 1\n    }\n  }\n  return(counter)\n\
    }\n", "\n    if(length(arr) == 0) {\n        return(0)\n    }\n    count = 0\n\
    \    for(i in arr) {\n        count = count + (abs(i) %/% 10 + abs(i) %% 10) >\
    \ 0\n    }\n    return(count)\n}\n", "\n\t# YOUR CODE HERE\n}\n", "\n    count\
    \ <- 0\n    for (i in arr) {\n        s <- 0\n        if (i > 0) {\n         \
    \   d <- 0\n            while (i > 0) {\n                d <- i %% 10\n      \
    \          s <- s + d\n                i <- i %/% 10\n            }\n        }\
    \ else {\n            d <- 0\n            while (i < 0) {\n                d <-\
    \ i %% 10\n                s <- s + d\n                i <- i %/% 10\n       \
    \     }\n        }\n        if (s > 0) {\n            count <- count + 1\n   \
    \     }\n    }\n    return(count)\n}", "\n\tsum(sapply(arr, function(x) if (sum(abs(x))\
    \ == 0) 0 else 1))\n}", "\n  # YOUR CODE HERE\n  total_of_digits <- function(num)\
    \ {\n    num <- round(num, 0)\n    num_digits <- strsplit(as.character(num), split=\"\
    \")[[1]]\n    num_digits <- as.numeric(num_digits)\n    num_digits <- sum(num_digits)\n\
    \    num_digits\n  }\n  count <- 0\n  for (num in arr) {\n    if (total_of_digits(num)\
    \ > 0) {\n      count <- count + 1\n    }\n  }\n  count\n}\n", "\n  arr[abs(arr)\
    \ < 10]\n}", "\n    arr <- abs(arr)\n    digits <- unlist(strsplit(as.character(arr),\
    \ split=\"\"))\n    digits <- as.numeric(digits)\n    sums <- apply(digits, 1,\
    \ sum)\n    sum(sums > 0)\n}\n", "\n    count <- 0\n    for (num in arr) {\n \
    \       if (num < 0) {\n            num <- num * -1\n        }\n        num_digits\
    \ <- strsplit(num, \"\")[[1]]\n        sum <- 0\n        for (digit in num_digits)\
    \ {\n            sum <- sum + as.integer(digit)\n        }\n        if (sum >\
    \ 0) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n  return(sum(apply(arr, 1, function(x) sum(abs(x)) > 0)))\n}\n", "\n\
    \  sum(sapply(arr, function(x) sum(abs(intToUtf8(x)[-1]))) > 0)\n}\n", "\n   \
    \ # case 1: arr is empty\n    if (length(arr) == 0) {\n        return(0)\n   \
    \ }\n    # case 2: arr is not empty\n    counter = 0\n    for (i in arr) {\n \
    \       sum_digits = 0\n        # calculate the sum of digits of i\n        if\
    \ (i >= 0) {\n            for (digit in strsplit(as.character(i), '')[[1]]) {\n\
    \                sum_digits = sum_digits + as.integer(digit)\n            }\n\
    \        } else {\n            for (digit in strsplit(as.character(i), '')[[1]])\
    \ {\n                sum_digits = sum_digits - as.integer(digit)\n           \
    \ }\n        }\n        # if sum_digits > 0, then increase counter by 1\n    \
    \    if (sum_digits > 0) {\n            counter = counter + 1\n        }\n   \
    \ }\n    return(counter)\n}\n", "\n    #your code here\n    sum(apply(matrix(abs(arr),\
    \ ncol = 1), 1, function(x) sum(x)))\n}\n", "\n    return(length(arr[sapply(arr,\
    \ function(x) sum(abs(x)))]))\n}\n", "\n    # Your code here\n    count = 0\n\
    \    for (i in arr) {\n      if (i < 0) {\n        i = i * -1\n      }\n     \
    \ while (i > 0) {\n        last_digit = i %% 10\n        count = count + last_digit\n\
    \        i = i %/% 10\n      }\n    }\n    \n    return(count)\n}\n", "\n    #\
    \ edge case: no numbers given\n    if (length(arr) == 0) {\n        return(0)\n\
    \    }\n\n    # initialize a counter to 0\n    count <- 0\n\n    # loop through\
    \ each number in the array\n    for (i in 1:length(arr)) {\n        # initialize\
    \ a sum to 0\n        sum <- 0\n\n        # if the number is negative,\n     \
    \   # multiply it by -1 to convert it to positive\n        if (arr[i] < 0) {\n\
    \            arr[i] <- arr[i] * -1\n        }\n\n        # loop through each digit\
    \ in the number\n        for (j in 1:nchar(arr[i])) {\n            # add each\
    \ digit to the sum\n            sum <- sum + as.numeric(substr(arr[i], j, j))\n\
    \        }\n\n        # if the sum of the digits is greater than 0,\n        #\
    \ increment the counter\n        if (sum > 0) {\n            count <- count +\
    \ 1\n        }\n    }\n\n    # return the counter\n    return(count)\n}\n", "\n\
    \    sum(sapply(arr, function(x) {\n        return(sign(x) * sum(abs(as.integer(strsplit(as.character(x),\
    \ '')[[1]]))))\n    }))\n}\n ", "\n    output <- 0\n    for (i in arr) {\n   \
    \     # print(i)\n        if (i > 0) {\n            i <- i\n        } else {\n\
    \            i <- -i\n        }\n        # print(i)\n        # print(length(as.character(i)))\n\
    \        for (j in 1:length(as.character(i))) {\n            output <- output\
    \ + as.integer(substr(i, j, j))\n        }\n        # print(output)\n    }\n \
    \   return(output)\n}\n", "\n    return(sum(arrayfun(function(x) sum(abs(strsplit(as.character(x),\
    \ \"\")[[1]]), na.rm = TRUE) > 0, arr)))\n}\n", "\n  #sum(ifelse(vapply(arr, sum_digits,\
    \ numeric(1))>0, 1, 0))\n  sum(ifelse(arr<0, sum_digits(abs(arr))+1, sum_digits(arr))>0)\n\
    }\n", "\n  # your code here\n}\n\nprint(\"Problem 5:\")\nprint(count_nums(c()))\n\
    print(count_nums(c(-1, 11, -11)))\nprint(count_nums(c(1, 1, 2)))\n ", "\n  count\
    \ = 0\n  for (i in arr) {\n    if (abs(i) >= 10) {\n      digits = abs(i)\n  \
    \    while (digits >= 10) {\n        sum = 0\n        while (digits > 0) {\n \
    \         sum = sum + digits %% 10\n          digits = digits %/% 10\n       \
    \ }\n        digits = sum\n      }\n      if (digits > 0) {\n        count = count\
    \ + 1\n      }\n    } else {\n      if (abs(i) > 0) {\n        count = count +\
    \ 1\n      }\n    }\n  }\n  return(count)\n}\ncount_nums(c())\ncount_nums(c(-1,\
    \ 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n  # TODO(student)\n}\n", "\n  count_nums_R\
    \ <- function(arr, res) {\n    if (length(arr) == 0)\n      return(res)\n    else\
    \ {\n      num <- head(arr, 1)\n      if (abs(num) < 10) {\n        res <- res\
    \ + num\n        arr <- tail(arr, -1)\n      } else {\n        res <- res + (num\
    \ %/% 10)\n        num <- num %% 10\n        arr <- c(num, tail(arr, -1))\n  \
    \    }\n      count_nums_R(arr, res)\n    }\n  }\n  count_nums_R(arr, 0)\n}\n",
  "\n  # YOUR CODE HERE\n  count = 0\n  for (i in arr) {\n    # print(i)\n    # print(is.negative(i))\n\
    \    count = count + is.negative(i)\n  }\n  return(count)\n}", "\n  sum(abs(arr))\n\
    }\n", "\n  count <- 0\n  for (i in 1:length(arr)) {\n    digits <- strsplit(as.character(abs(arr[i])),\
    \ \"\")[[1]]\n    digits <- digits %>% unlist() %>% as.numeric()\n    count <-\
    \ count + sum(digits) > 0\n  }\n  return(count)\n}", "\n  # Type your code here\n\
    \  i = 1\n  count = 0\n  for (element in arr) {\n    sum = 0\n    if (element\
    \ < 0) {\n      element = abs(element)\n      if (element <= 9) {\n        count\
    \ = count + 1\n      } else {\n        sum = sum + (element %/% 10)\n        sum\
    \ = sum + (element %% 10)\n        if (sum >= 1) {\n          count = count +\
    \ 1\n        }\n      }\n    } else {\n      if (element <= 9) {\n        count\
    \ = count + 1\n      } else {\n        sum = sum + (element %/% 10)\n        sum\
    \ = sum + (element %% 10)\n        if (sum >= 1) {\n          count = count +\
    \ 1\n        }\n      }\n    }\n    i = i + 1\n  }\n  return(count)\n}\ncount_nums(c(1,\
    \ 1, 2))\n", "\n  return(sum(sapply(arr, function(x) sum(abs(x)) > 0)))\n}\ncount_nums(c())\n\
    count_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n  # YOUR CODE HERE\n\
    \  num <- 0\n  for (i in 1:length(arr)) {\n    if (sum(abs(arr[i])) > 0) {\n \
    \     num <- num + 1\n    }\n  }\n  return(num)\n}\n\nstopifnot(count_nums(c())\
    \ == 0)\nstopifnot(count_nums(c(-1, 11, -11)) == 1)\nstopifnot(count_nums(c(1,\
    \ 1, 2)) == 3)\n", "\n  return(sum(abs(arr) != arr))\n}\n", "\n  n <- 0\n  for\
    \ (i in arr) {\n    if (sum(digits(i)) > 0) {\n      n <- n + 1\n    }\n  }\n\
    \  return(n)\n}\n", "\n  #*** your code here ***\n  return(length(arr[abs(arr)\
    \ > 0]))\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in arr) {\n    sums\
    \ = 0\n    if (i < 0) {\n      sums = sums + -1\n    }\n    while (i != 0) {\n\
    \      sums = sums + i %% 10\n      i = floor(i / 10)\n    }\n    if (sums > 0)\
    \ {\n      count = count + 1\n    }\n  }\n  return(count)\n}\n", "\n  count <-\
    \ 0\n  for (i in arr) {\n    if (i < 0) {\n      i = i * -1\n    }\n    sum <-\
    \ 0\n    while (i > 0) {\n      sum <- sum + i %% 10\n      i <- i %/% 10\n  \
    \  }\n    if (sum > 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n", "\n    sum(sapply(arr, function(n) {\n        if (n < 0) {\n           \
    \ return (abs(floor(n / 10)) + 1)\n        } else {\n            return (floor(n\
    \ / 10) + 1)\n        }\n    }))\n}\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\n\
    count_nums(c(1, 1, 2))\n", "\n    sum(abs(floor(arr / 10^(floor(log10(abs(arr)))))))\n\
    }\n", "\n  sum(rowSums(abs(signif(arr))) > 0)\n}\ntest_that(\"count_nums works\"\
    , {\n  expect_equal(count_nums(c()), 0)\n  expect_equal(count_nums(c(-1, 11, -11)),\
    \ 1)\n  expect_equal(count_nums(c(1, 1, 2)), 3)\n})\n", "\n    # This will hold\
    \ the number of elements\n    # which has a sum of digits > 0\n    count <- 0\n\
    \    for (i in arr) {\n        if (i > 0) {\n            # If the number is positive,\
    \ then we\n            # can convert it to a string and sum\n            # the\
    \ digits\n            count <- count + sum(as.numeric(strsplit(as.character(i),\
    \ \"\")[[1]]))\n        } else {\n            # Otherwise, if it's negative, we\n\
    \            # know that its first signed digit\n            # will be negative.\
    \ This means that\n            # we can take the absolute value of\n         \
    \   # the number, convert it to a string,\n            # and sum the digits (excluding\
    \ the\n            # first digit, which we'll add back\n            # at the end)\n\
    \            count <- count + sum(as.numeric(strsplit(as.character(abs(i)), \"\
    \")[[1]])) - 1\n        }\n    }\n    return(count)\n}\n", "\n    n <- length(arr)\n\
    \    count <- 0\n    for (i in seq(n)) {\n        num <- arr[i]\n        sum <-\
    \ 0\n        if (num < 0) {\n            sum <- sum + (-1) * (num %% 10)\n   \
    \         num <- floor(num / 10)\n        }\n        while (num > 0) {\n     \
    \       sum <- sum + (num %% 10)\n            num <- floor(num / 10)\n       \
    \ }\n        if (sum > 0) {\n            count <- count + 1\n        }\n    }\n\
    \    return(count)\n}\n", "\n  n <- 0\n  for (i in 1:length(arr)) {\n    num <-\
    \ abs(arr[i])\n    sum <- 0\n    while (num > 0) {\n      sum <- sum + num %%\
    \ 10\n      num <- num %/% 10\n    }\n    if (sum > 0) {\n      n <- n + 1\n \
    \   }\n  }\n  return(n)\n}\n", "\n    sum(count_nums_helper(arr))\n}\n\ncount_nums_helper\
    \ <- function(arr) {\n    sapply(arr, function(x) {\n        digits <- abs(x)\n\
    \        if (digits > 9) {\n            digits <- digits %/% 10 + digits %% 10\n\
    \        }\n        digits > 0\n    })\n}\n ", "\n\t#remove all the items from\
    \ the vector that have the sum of digits less than or equal to 0\n\t#count the\
    \ number of elements that remains\n\treturn(sum(arr[rowSums(abs(matrix(as.character(arr),\
    \ nrow = 1))) > 0]))\n}\n", "\n  count = 0;\n  for (i in 1:length(arr)) {\n  \
    \  sum = 0;\n    if (arr[i] == 0) {\n      continue;\n    }\n    # Loop through\
    \ and count the sum of all digits in the array\n    for (n in 1:length(arr[i]))\
    \ {\n      # If the digit is negative, ignore it\n      if (arr[i][n] < 0) {\n\
    \        continue;\n      }\n      sum = sum + arr[i][n];\n    }\n    # If the\
    \ sum is greater than 0, increase the count\n    if (sum > 0) {\n      count =\
    \ count + 1;\n    }\n  }\n  return(count);\n}\ntest2c <- function() {\n  count\
    \ = count_nums(c());\n  if (count != 0) {\n    print(\"FAILED 2C, CASE 1\");\n\
    \  }\n  count = count_nums(c(-1, 11, -11));\n  if (count != 1) {\n    print(\"\
    FAILED 2C, CASE 2\");\n  }\n  count = count_nums(c(1, 1, 2));\n  if (count !=\
    \ 3) {\n    print(\"FAILED 2C, CASE 3\");\n  }\n  print(\"ALL TESTS PASSED FOR\
    \ 2C\");\n}\ntest2c();\n", "\n  sum(abs(arr))\n}\n", "\n  res <- 0\n  i <- 1\n\
    \  while (i <= length(arr)) {\n    if (arr[i] < 0) {\n      res <- res + 1\n \
    \   } else {\n      count <- arr[i]\n      while (count > 0) {\n        res <-\
    \ res + 1\n        count <- count %/% 10\n      }\n    }\n    i <- i + 1\n  }\n\
    \  return(res)\n}", "\n  sum(apply(matrix(arr, ncol = 1), 1, function(x) {sum(sign(x)\
    \ * abs(x))}))\n}\n", "\n    count <- 0\n    for (i in arr) {\n        if (all(sign(i)\
    \ != 0)) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n\
    \  total <- 0\n  for (num in arr) {\n    if (num < 0) {\n      num <- num * -1\n\
    \    }\n    digits <- integer(floor(log10(num)) + 1)\n    digit <- 0\n    while\
    \ (num > 0) {\n      digits[digit + 1] <- num %% 10\n      num <- num %/% 10\n\
    \      digit <- digit + 1\n    }\n    total <- total + sum(digits)\n  }\n  return(total)\n\
    }\n", "\n    # YOUR CODE HERE\n    nonzero = 0\n    for (i in 1:length(arr)) {\n\
    \        sum = 0\n        num = arr[i]\n        # if number is negative, set num\
    \ to be positive\n        if (num < 0) {\n            num = num * -1\n       \
    \ }\n        # calculate the sum of digits\n        while (num > 0) {\n      \
    \      sum = sum + num %% 10\n            num = num %/% 10\n        }\n      \
    \  # if sum > 0, increment the nonzero counter\n        if (sum > 0) {\n     \
    \       nonzero = nonzero + 1\n        }\n    }\n    nonzero\n}\ncount_nums(c())\n\
    count_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n ", "\n    sum(sapply(arr,\
    \ count_digits_signed))\n}\n", "\n    count <- 0\n    for (i in arr) {\n     \
    \   s <- abs(i)\n        s <- floor(s / 10)\n        d <- abs(i) - s * 10\n  \
    \      if (d > 0) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n    sum(sapply(arr, function(x) abs(x) %/% 10^floor(log10(abs(x)))))\n\
    }\n\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n\
    \  # YOUR CODE HERE\n  res = 0\n  for (i in arr) {\n    if (i < 0) {\n      i\
    \ = -i\n    }\n    res = res + floor(i / 10) + i %% 10\n  }\n  return(res)\n}\n",
  "\n  sum(apply(arr, 2, function(x) sum(abs(sign(x)*strsplit(as.character(x), split\
    \ = \"\")[[1]]))))\n}\n\nprint(count_nums(c()))\nprint(count_nums(c(-1, 11, -11)))\n\
    print(count_nums(c(1, 1, 2)))", "\n    count <- 0\n    for (x in arr) {\n    \
    \    count = count + (sum(abs(c(unlist(strsplit(as.character(x), \"\"))))) > 0)\n\
    \    }\n    return(count)\n}\n", "\n  sums <- sapply(arr, sum_digits)\n  return(sum(sums\
    \ > 0))\n}\n", "\n    count <- 0\n    sum <- 0\n    length_arr <- length(arr)\n\
    \    for (i in 1:length_arr) {\n        if (arr[i] < 0) {\n            arr[i]\
    \ <- arr[i] * -1\n        }\n        while (arr[i] > 0) {\n            sum <-\
    \ sum + arr[i] %% 10\n            arr[i] <- arr[i] %/% 10\n        }\n       \
    \ if (sum > 0) {\n            count <- count + 1\n        }\n        sum <- 0\n\
    \    }\n    return(count)\n}\n", "\n  num_count <- 0\n  # TODO: write your code\
    \ here\n  for (i in 1:length(arr)) {\n    if (sum(abs(as.numeric(strsplit(as.character(arr[i]),\
    \ \"\")[[1]]))) > 0) {\n      num_count <- num_count + 1\n    }\n  }\n  return(num_count)\n\
    }\n", "\n    count <- 0\n    for (val in arr) {\n        if (sum(abs(as.integer(unlist(strsplit(as.character(val),\
    \ \"\"))))) > 0) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\nprint(count_nums(c()))\nprint(count_nums(c(-1, 11, -11)))\nprint(count_nums(c(1,\
    \ 1, 2)))\n", "\n    # length(which(sapply(arr, function(x) ifelse(sum(abs(as.numeric(unlist(strsplit(as.character(x),\
    \ split=\"\"))))), 1, 0))))\n    length(which(sapply(arr, function(x) sum(abs(as.numeric(unlist(strsplit(as.character(x),\
    \ split=\"\"))))))))\n}\n", "\n    nums = sum(sapply(arr, function(num) sum(abs(as.integer(strsplit(num,\
    \ \"\")[[1]])))))\n    if (nums > 0) {\n        return(length(arr))\n    } else\
    \ {\n        return(0)\n    }\n}", "\n  sum(sapply(arr, function(x) sum(abs(floor(x\
    \ / 10 ** (seq_along(c(1, 1)) - 1)) %/% 10))))\n}\n", "\n  # YOUR CODE HERE\n\
    \  count <- 0\n  for (num in arr) {\n    sum <- 0\n    for (digit in num) {\n\
    \      sum <- sum + digit\n    }\n    if (sum > 0) {\n      count <- count + 1\n\
    \    }\n  }\n  return(count)\n}", "\n  sum(abs(arr) != arr)\n}\n ", "\n  sum(abs(arr))\n\
    }\n\ncount_nums <- function(arr) {\n  sum(abs(arr))\n}\n", "\n  apply(arr, 2,\
    \ function(n) {\n    return (sum(as.numeric(strsplit(abs(n), \"\")[[1]])))\n \
    \ }) %>% sum(.)\n}\n ", "\n  sum(unlist(lapply(arr, sum_digits)))\n}\n", "\n \
    \   total <- 0\n    for (num in arr) {\n        num_str <- as.character(num)\n\
    \        num_list <- strsplit(num_str, \"\")[[1]]\n        sum <- 0\n        for\
    \ (i in num_list) {\n            sum <- sum + as.numeric(i)\n        }\n     \
    \   if (sum > 0) {\n            total <- total + 1\n        }\n    }\n    return(total)\n\
    }\n", "\n  # define a function (sum_digits) that does the sum of digits from an\
    \ integer\n  sum_digits <- function(num) {\n    abs(num) %/% 10 + abs(num) %%\
    \ 10\n  }\n  sum(sapply(arr, sum_digits) > 0)\n}\ncount_nums(c())\ncount_nums(c(-1,\
    \ 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n  sum(apply(arr, FUN = function(x)\
    \ sum(abs(x)) > 0))\n}\n", "\n    sum(abs(arr))\n}\ncount_nums(c())\ncount_nums(c(-1,\
    \ 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n  # add code here\n}\ncount_nums(c())\n\
    count_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n ", "\n    sum(unlist(lapply(arr,\
    \ function(x) sum(x) > 0)))\n}\n", "\n  sum(Map(function(x) {\n    sapply(x, function(y)\
    \ {\n      y > 0\n    })\n  }, arr))\n}\n", "\n  # YOUR CODE HERE\n  sum_arr <-\
    \ sum(arr)\n  return(sum_arr)\n}\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\n\
    count_nums(c(1, 1, 2))\n ", "\n  count = 0\n  for (i in 1:length(arr)) {\n   \
    \ if (arr[i] > 0) {\n      if (sum(as.numeric(strsplit(as.character(arr[i]), NULL)[[1]]))\
    \ > 0)\n        count = count + 1\n    } else {\n      if (sum(as.numeric(strsplit(as.character(arr[i]),\
    \ NULL)[[1]])) < 0)\n        count = count + 1\n    }\n  }\n  return(count)\n}",
  "\n    sum(lengths(strsplit(as.character(abs(arr)), \"\")))\n}\n\n", "\n\tcount\
    \ = 0\n\tif (length(arr) == 0) {\n\t\treturn(0)\n\t}\n\tfor (i in arr) {\n\t\t\
    if (sum(digits_of(i)) > 0) {\n\t\t\tcount <- count + 1\n\t\t}\n\t}\n\treturn(count)\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    if (x < 0) {\n      # abs gets the\
    \ absolute value of the number\n      signed_digits <- c(abs(x) %% 10L, signed_digits(x))\n\
    \    } else {\n      signed_digits <- c(x %% 10L, signed_digits(x))\n    }\n \
    \   # sum ignores all NA\n    signed_digits\n  }))\n}\n", "\n    return(sum(sapply(arr,\
    \ function(x) {\n        as.integer(abs(x) / 10) + (abs(x) %% 10) > 0\n    })))\n\
    }", "\n  # YOUR CODE HERE\n  count <- 0\n  for (i in arr) {\n    if (i < 0) {\n\
    \      i <- i * -1\n    }\n    sum <- 0\n    while (i > 0) {\n      sum <- sum\
    \ + i %% 10\n      i <- i %/% 10\n    }\n    if (sum > 0) {\n      count <- count\
    \ + 1\n    }\n  }\n  return(count)\n}\n", "\n    count <- 0\n    for (i in arr)\
    \ {\n        if (sum(abs(i)) != 0) {\n            count <- count + 1\n       \
    \ }\n    }\n    return(count)\n}\n", "\n  cnt <- 0\n  for (i in 1:length(arr))\
    \ {\n    if (sum(digits(arr[i])) > 0) {\n      cnt <- cnt + 1\n    }\n  }\n  return(cnt)\n\
    }\n\n", "\n  sum(sapply(arr, function(x) {\n    x <- abs(x)\n    sum(x %/% 10^(floor(log10(x))):0)\n\
    \  }))\n}\n", "\n    sum(abs(arr)) > 0\n}\n", "\n  count <- 0\n  for (i in arr)\
    \ {\n    count <- count + ifelse(sum(i > 0) > 0, 1, 0)\n  }\n  return(count)\n\
    }\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n\
    \    # YOUR CODE HERE\n    return(NULL)\n}\n", "\n\tif(length(arr) == 0) {\n\t\
    \treturn(0)\n\t} else {\n\t\tsum <- 0\n\t\tfor(num in arr) {\n\t\t\tif(num < 0)\
    \ {\n\t\t\t\tnum <- num * -1\n\t\t\t}\n\t\t\tnum <- as.integer(strsplit(as.character(num),\
    \ \"\")[[1]])\n\t\t\tsum <- sum + sum(num)\n\t\t}\n\t\treturn(sum)\n\t}\n}\n",
  "\n  count = 0\n  for (i in arr) {\n    if (i != 0) {\n      abs_sum = sum(as.integer(abs(i)))\n\
    \      if (abs_sum != 0) {\n        count = count + 1\n      }\n    }\n  }\n \
    \ return(count)\n}\n", "\n  n <- length(arr)\n  count <- 0\n  for (i in 1:n) {\n\
    \    if (sum(abs(as.integer(strsplit(as.character(arr[i]), \"\")[[1]]))) > 0)\
    \ {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  count <-\
    \ 0\n  for (i in arr) {\n    if (abs(i) < 10) {\n      if (i != 0) count <- count\
    \ + 1\n    } else {\n      s <- sum(abs(as.character(i)) %>% strsplit(\"\") %>%\
    \ unlist())\n      if (s > 0) count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n", "\n    count = 0\n    for (num in arr) {\n        if (abs(num) < 10) {\n\
    \            if (num != 0) {\n                count = count + 1\n            }\n\
    \        } else {\n            sum = 0\n            while (num != 0) {\n     \
    \           rem = abs(num) %% 10\n                sum = sum + rem\n          \
    \      num = num %/% 10\n            }\n            if (sum > 0) {\n         \
    \       count = count + 1\n            }\n        }\n    }\n    return(count)\n\
    }\n", "\n  count = 0\n  for (x in arr) {\n    if (sum(abs(as.integer(strsplit(as.character(x),\
    \ split = '')[[1]]))) > 0) {\n      count = count + 1\n    }\n  }\n  return(count)\n\
    }\n", "\n    signs <- sign(arr)\n    arr <- abs(arr)\n    nums <- sum(signs[arr\
    \ != 0] * floor(log10(arr[arr != 0])) + 1)\n    return(nums)\n}\n", "\n    arr\
    \ %>%\n        abs() %>%\n        apply(., 2, sum) %>%\n        table() %>%\n\
    \        sum(.)\n}\n\nres = count_nums(c())\ncat(sprintf(\"%s\\n\", res))\nres\
    \ = count_nums(c(-1, 11, -11))\ncat(sprintf(\"%s\\n\", res))\nres = count_nums(c(1,\
    \ 1, 2))\ncat(sprintf(\"%s\\n\", res))\n", "\n  if (length(arr) == 0) {\n    return(0)\n\
    \  }\n  return(sum(abs(arr) > 0) + count_nums(arr[-1]))\n}\n", "\n    sum(sapply(arr,\
    \ function(x) {sum(abs(as.integer(strsplit(as.character(x), \"\")[[1]]))) > 0}))\n\
    }\n", "\n   \n    sapply(arr, function(i)\n          {\n            if(i < 0)\n\
    \                {\n                    i <- i*(-1)\n                }\n     \
    \       i <- sum(unlist(strsplit(as.character(i), \"\")))\n            if(i >\
    \ 0)\n                {\n                    return(1)\n                }\n  \
    \          else\n                {\n                    return(0)\n          \
    \      }\n          }) %>%\n    sum\n}\n", "\n  count <- 0\n  for (a in arr) {\n\
    \    sum <- 0\n    if (a < 0) {\n      sum <- -1\n    }\n    for (b in strsplit(gsub(\"\
    -\", \"\", a), \"\")) {\n      sum <- sum + as.integer(b)\n    }\n    if (sum\
    \ > 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  vapply(arr,\
    \ function(x) sign(sum(abs(x))), 1)\n}\n", "\n  sum(apply(sign(arr) * abs(arr),\
    \ 1, sum) > 0)\n}\n", "\n  count <- 0\n  for (i in arr) {\n    i <- abs(i)\n \
    \   sum <- 0\n    while (i > 0) {\n      sum <- sum + i %% 10\n      i <- i %/%\
    \ 10\n    }\n    if (sum > 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n", "\n    # your code here\n}\n ", "\n  res <- 0\n  for (item in arr) {\n \
    \   if (sum(intToUtf8(abs(item))) > 0) {\n      res <- res + 1\n    }\n  }\n \
    \ return(res)\n}\n", "\n  count <- 0\n  for (n in arr) {\n    if (n < 0) {\n \
    \     n <- n * -1\n    }\n    sum <- 0\n    while (n > 0) {\n      sum <- sum\
    \ + n %% 10\n      n <- n %/% 10\n    }\n    if (sum > 0) {\n      count <- count\
    \ + 1\n    }\n  }\n  return(count)\n}\n", "\n  ## ----\n  ## YOUR CODE HERE\n\
    \  count <- 0\n  for (i in 1:length(arr)) {\n    num <- 0\n    if (arr[i] > 0)\
    \ {\n      num <- arr[i]\n    } else {\n      num <- -arr[i]\n    }\n    while\
    \ (num != 0) {\n      count <- count + 1\n      num <- num %/% 10\n    }\n  }\n\
    \  return(count)\n  ## ----\n}\n", "\n  f <- function(num) {\n    if (num < 0)\
    \ {\n      num = -num\n    }\n    sum <- 0\n    while (num > 0) {\n      sum <-\
    \ sum + num %% 10\n      num <- num %/% 10\n    }\n    return(sum)\n  }\n  return(sum(mapply(f,\
    \ arr)))\n}\n", "\n    count = 0\n    for (num in arr) {\n        sum = 0\n  \
    \      if (num < 0) {\n            num = num * -1\n        }\n        while (num\
    \ > 0) {\n            sum = sum + num %% 10\n            num = num %/% 10\n  \
    \      }\n        if (sum > 0) {\n            count = count + 1\n        }\n \
    \   }\n    return(count)\n}\n", "\n  # your code here\n}\ncat(count_nums(c()),\
    \ \"\\n\")\ncat(count_nums(c(-1, 11, -11)), \"\\n\")\ncat(count_nums(c(1, 1, 2)),\
    \ \"\\n\")\n", "\n    return(length(arr[sapply(arr, function(x) sum(abs(integer(as.character(x))))\
    \ > 0)]))\n}", "\n  count <- 0\n  for (number in arr) {\n    sum <- 0\n    if\
    \ (number < 0) {\n      sum <- sum + 1\n    }\n    for (digit in digits(number))\
    \ {\n      sum <- sum + digit\n    }\n    if (sum > 0) {\n      count <- count\
    \ + 1\n    }\n  }\n  return(count)\n}", "\n  sum(apply(arr, 1, function(i) sum(abs(sign(i)\
    \ * strsplit(as.character(i), '')[[1]]), na.rm = TRUE) > 0))\n}\n", "\n  z <-\
    \ c()\n  for (i in arr) {\n    s <- abs(i)\n    while (s > 0) {\n      z <- c(z,\
    \ s %% 10)\n      s <- s %/% 10\n    }\n  }\n  if (sum(z) > 0) {\n    return(1)\n\
    \  } else {\n    return(0)\n  }\n}\n\narr <- c(-1, 11, -11)\ncount_nums(arr)\n",
  "\n    as.integer(sum(abs(arr) > 0))\n}", "\n  sum( sapply( arr, function(num) {\n\
    \    sum( abs( signif(as.numeric(strsplit(as.character(num), '')[[1]])) ) ) >\
    \ 0\n  } ) )\n}", "\n\treturn(sum(unlist(lapply(arr, sumdigits)) > 0))\n}\n",
  "\n  count <- 0\n  for (i in arr) {\n    if (sum(abs(i)) > 0) {\n      count <-\
    \ count + 1\n    }\n  }\n  return(count)\n}\n", "\n  count <- 0\n  for (i in arr)\
    \ {\n    sum <- 0\n    if (i > 0) {\n      val <- i\n    } else {\n      val <-\
    \ i * -1\n    }\n    while (val > 0) {\n      sum <- sum + (val %% 10)\n     \
    \ val <- val %/% 10\n    }\n    if (sum > 0) {\n      count <- count + 1\n   \
    \ }\n  }\n  return(count)\n}\n", "\n  sum(abs(arr) > 0)\n}\n", "\n  arr <- arr[arr\
    \ != 0]\n  sums <- sapply(arr, function(x) sum(abs(x)))\n  sum(sums > 0)\n}\n ",
  "\n    # your code here\n}\n", "\n    non_zero <- function(i) {\n        i %/% 10\
    \ + abs(i %% 10) > 0\n    }\n    return(sum(sapply(arr, non_zero)))\n}\n", "\n\
    \  counter <- 0\n  for (number in arr) {\n    if (number < 0) {\n      number\
    \ = -number\n    }\n    counter = counter + sum_digits(number)\n  }\n  return(counter)\n\
    }\n", "\n    count <- 0\n    for (i in arr) {\n        j <- abs(i)\n        sum\
    \ <- 0\n        while (j > 0) {\n            digit <- j %% 10\n            sum\
    \ <- sum + digit\n            j <- j %/% 10\n        }\n        if (sum > 0) {\n\
    \            count <- count + 1\n        }\n    }\n    return(count)\n}\n", "\n\
    \  apply(arr, 2, function(x) sum(abs(x)))\n}", "\n  sum(abs(arr) > 0)\n}\n", "\n\
    \  # DONE: Fill in the blanks:\n  count <- 0\n  for (el in arr) {\n    # YOUR\
    \ CODE HERE\n    if (el < 0) {\n      el <- -el\n    }\n    digits <- c()\n  \
    \  while (el > 0) {\n      digits <- c(el %% 10, digits)\n      el <- floor(el\
    \ / 10)\n    }\n    if (sum(digits) > 0) {\n      count <- count + 1\n    }\n\
    \  }\n  return(count)\n}", "\n  count <- 0\n  for (i in 1:length(arr)) {\n   \
    \ x <- abs(arr[i])\n    sum <- 0\n    while (x > 0) {\n      sum <- sum + x %%\
    \ 10\n      x <- x %/% 10\n    }\n    if (sum > 0) {\n      count <- count + 1\n\
    \    }\n  }\n  return(count)\n}\n", "\n  return(sum(abs(arr) > 9))\n}\n", "\n\
    \  sum(sapply(abs(arr), function(x) sum(as.integer(unlist(strsplit(toString(x),\
    \ \"\"))))))\n}\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1,\
    \ 1, 2))\n", "\n  count_sum_pos <- function(x) {\n    if (x < 0) {\n      digits\
    \ <- c(x, abs(x) %% 10)\n    } else {\n      digits <- c(x)\n    }\n    sum(digits)\
    \ > 0\n  }\n  sum(sapply(arr, count_sum_pos))\n}\n", "\n  count = 0\n  for (i\
    \ in arr) {\n    if (i < 0) {\n      if (-i % 10 != 0) {\n        count = count\
    \ + 1\n      }\n    } else {\n      if (i % 10 != 0) {\n        count = count\
    \ + 1\n      }\n    }\n  }\n  return(count)\n}\n\ncount_nums(c())\ncount_nums(c(-1,\
    \ 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n  sum(sapply(arr, function(x) {\n \
    \   if (x < 0) x <- -x\n    sum(as.integer(strsplit(x, \"\")[[1]]))\n  }))\n}\n\
    print(count_nums(c()))\nprint(count_nums(c(-1, 11, -11)))\nprint(count_nums(c(1,\
    \ 1, 2)))\n", "\n    count <- 0\n    for (i in arr) {\n        count <- count\
    \ + (if (i < 0) {\n            sum(as.numeric(strsplit(as.character(abs(i)), \"\
    \")[[1]])) + 1\n        } else {\n            sum(as.numeric(strsplit(as.character(i),\
    \ \"\")[[1]]))\n        })\n    }\n    return(count)\n}", "\n  # count = 0\n \
    \ # for i in arr\n  #     if sum(i) > 0\n  #         count++\n  # return count\n\
    \  # return sum(arr > 0)\n\n  count = 0\n  for (i in arr) {\n    if (i > 0) {\n\
    \      count = count + 1\n    }\n  }\n  return(count)\n}\n\n", "\n  sum(abs(arr)\
    \ > 0)\n}\n\n", "\n    count <- 0\n    for (num in arr) {\n        if (num < 0)\
    \ {\n            sum <- -num\n        } else {\n            sum <- num\n     \
    \   }\n        while (sum > 0) {\n            sum <- sum - as.integer(substr(sum,\
    \ 1, 1))\n        }\n        if (sum == 0) {\n            count <- count + 1\n\
    \        }\n    }\n    return(count)\n}", "\n    count = 0\n    for (num in arr)\
    \ {\n        sum = 0\n        string = as.character(num)\n        if (substr(string,\
    \ 1, 1) == \"-\") {\n            sum = as.numeric(substr(string, 2, 2))\n    \
    \        if (nchar(string) == 2) {\n                next\n            }\n    \
    \        for (i in 3:nchar(string)) {\n                sum = sum + as.numeric(substr(string,\
    \ i, i))\n            }\n        } else {\n            for (i in 1:nchar(string))\
    \ {\n                sum = sum + as.numeric(substr(string, i, i))\n          \
    \  }\n        }\n        if (sum > 0) {\n            count = count + 1\n     \
    \   }\n    }\n    return(count)\n}", "\n  total <- 0\n  for (num in arr) {\n \
    \   num <- abs(num)\n    temp_sum <- 0\n    while (num != 0) {\n      temp_sum\
    \ <- temp_sum + num %% 10\n      num <- floor(num / 10)\n    }\n    if (temp_sum\
    \ > 0) total <- total + 1\n  }\n  return(total)\n}\n ", "\n  count = 0\n  for\
    \ (i in arr) {\n    if (sum(abs(digits(i))) > 0) {\n      count = count + 1\n\
    \    }\n  }\n  return(count)\n}\n", "\n    sum <- 0\n    for (num in arr) {\n\
    \        if (num < 0) {\n            num <- -num\n        }\n        for (x in\
    \ 1:nchar(num)) {\n            sum <- sum + substr(num, x, x)\n        }\n   \
    \     if (sum > 0) {\n            return (TRUE)\n        }\n    }\n    return\
    \ (FALSE)\n}\n", "\n  s <- 0\n  for (i in arr) {\n    if (i < 0) {\n      i <-\
    \ -i\n    }\n    while (i > 0) {\n      s <- s + (i %% 10)\n      i <- i %/% 10\n\
    \    }\n  }\n  return(s)\n}\n\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1,\
    \ 1, 2))\n", "\n\tcount <- 0\n\tfor (i in 1:length(arr)) {\n\t\tif (arr[i] > 0)\
    \ {\n\t\t\tnum <- arr[i]\n\t\t} else {\n\t\t\tnum <- -arr[i]\n\t\t}\n\t\twhile\
    \ (num > 0) {\n\t\t\tcount <- count + num %% 10\n\t\t\tnum <- num %/% 10\n\t\t\
    }\n\t}\n\treturn(count)\n}\n", "\n    sum_digits <- function(x) {\n        if\
    \ (x == 0) {\n            return(0)\n        } else {\n            return(abs(x\
    \ %/% 10) + sum_digits(x %/% 10))\n        }\n    }\n    return(sum(sapply(arr,\
    \ sum_digits) > 0))\n}\n", "\n\tif (length(arr) == 0) {\n\t\treturn(0)\n\t}\n\t\
    sum = 0\n\tfor (i in arr) {\n\t\tif (i < 0) {\n\t\t\ti = -i\n\t\t}\n\t\twhile\
    \ (i > 0) {\n\t\t\tsum = sum + i %% 10\n\t\t\ti = i %/% 10\n\t\t}\n\t}\n\tif (sum\
    \ > 0) {\n\t\treturn(1)\n\t}\n\treturn(0)\n}\n", "\n    sum(sapply(arr, function(x)\
    \ sum(abs(x)) > 0))\n}\n\n", "\n    # YOUR CODE HERE\n    c = 0\n    for (i in\
    \ arr) {\n        sum = 0\n        if (i < 0) {\n            j = -i\n        }\
    \ else {\n            j = i\n        }\n        while (j > 0) {\n            sum\
    \ = sum + j %% 10\n            j = j %/% 10\n        }\n        if (sum > 0) {\n\
    \            c = c + 1\n        }\n    }\n    return(c)\n}\nstopifnot(count_nums(c())\
    \ == 0)\nstopifnot(count_nums(c(-1, 11, -11)) == 1)\nstopifnot(count_nums(c(1,\
    \ 1, 2)) == 3)\n ", "\n  sum(sapply(arr, function(x) sum(abs(as.integer(strsplit(as.character(x),\
    \ \"\")[[1]]))) > 0))\n}\n", "\n    count = 0\n    for (i in arr) {\n        sum\
    \ = 0\n        if (i < 0) {\n            i = -i\n        }\n        while (i !=\
    \ 0) {\n            sum = sum + i %% 10\n            i = i %/% 10\n        }\n\
    \        if (sum > 0) {\n            count = count + 1\n        }\n    }\n   \
    \ return(count)\n}", "\n  sum(arrayfun(function(x) {\n    if (x < 0)\n      sum(c(x,\
    \ abs(x %% 10)))\n    else\n      sum(c(x, x %% 10))\n  }, arr))\n}\n\ncat(count_nums(c()),\
    \ \"\\n\")\ncat(count_nums(c(-1, 11, -11)), \"\\n\")\ncat(count_nums(c(1, 1, 2)),\
    \ \"\\n\")\n", "\n\tresult <- 0\n\tfor (x in arr) {\n\t\t# sig = signum(x)\n\t\
    \tsum = 0\n\t\tfor (i in 1:nchar(abs(x))) {\n\t\t\tsum = sum + substr(abs(x),\
    \ i, i)\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tresult = result + 1\n\t\t}\n\t}\n\t\
    return(result)\n}\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1,\
    \ 1, 2))\n", "\n    res <- 0\n    for (i in arr) {\n        i <- abs(i)\n    \
    \    sum <- 0\n        while (i > 0) {\n            sum <- sum + i %% 10\n   \
    \         i <- i %/% 10\n        }\n        if (sum > 0) {\n            res <-\
    \ res + 1\n        }\n    }\n    return(res)\n}\n", "\n  if (length(arr) == 0)\
    \ {\n    return(0)\n  }\n  else {\n    digits_total <- sum(abs(arr))\n    if (digits_total\
    \ > 0) {\n      return(1 + count_nums(arr[-1]))\n    }\n    else {\n      return(count_nums(arr[-1]))\n\
    \    }\n  }\n}\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1, 1,\
    \ 2))\n", "\n    sum(unlist(lapply(arr, function(x) sum(abs(as.numeric(strsplit(as.character(x),\
    \ \"\")[[1]]))) > 0)))\n}\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1,\
    \ 1, 2))\n", "\n  n <- 0\n  for (i in 1:length(arr)) {\n    if (arr[i] < 0) {\n\
    \      if (abs(arr[i]) %/% 10 - 1 + abs(arr[i]) %/% 10 %/% 10 - 1 + abs(arr[i])\
    \ %/% 10 %/% 10 %/% 10 - 1 >= 0) {\n        n <- n + 1\n      }\n    } else {\n\
    \      if (arr[i] %/% 10 + arr[i] %/% 10 %/% 10 + arr[i] %/% 10 %/% 10 %/% 10\
    \ >= 0) {\n        n <- n + 1\n      }\n    }\n  }\n  return(n)\n}\n", "\n  l\
    \ <- length(arr)\n  count <- 0\n  for (i in 1:l) {\n    sum <- 0\n    if (arr[i]\
    \ < 0) {\n      arr[i] <- arr[i] * -1\n    }\n    while (arr[i] > 0) {\n     \
    \ d <- arr[i] %% 10\n      sum <- sum + d\n      arr[i] <- arr[i] %/% 10\n   \
    \ }\n    if (sum > 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n", "\n  # your code here\n  count = 0\n  for (i in 1:length(arr)) {\n    sum\
    \ = 0\n    if (arr[i] < 0) {\n      sum = sum + arr[i] * -1\n    } else {\n  \
    \    sum = sum + arr[i]\n    }\n    while (sum != 0) {\n      sum = sum - (sum\
    \ % 10)\n      sum = sum / 10\n    }\n    if (sum > 0) {\n      count = count\
    \ + 1\n    }\n  }\n  return(count)\n}\n", "\n  d <- sapply(abs(arr), function(a)\
    \ sum(a %% 10))\n  sum(arr > 0 & d > 0)\n}\n", "\n    count <- 0\n    for (i in\
    \ arr) {\n        sum <- 0\n        if (i > 0) {\n            for (j in 1:nchar(i))\
    \ {\n                sum <- sum + substr(i, j, j)\n            }\n        } else\
    \ {\n            for (j in 2:nchar(i)) {\n                sum <- sum + substr(i,\
    \ j, j)\n            }\n        }\n        if (sum > 0) {\n            count <-\
    \ count + 1\n        }\n    }\n    return(count)\n}", "\n  count <- 0\n  for (i\
    \ in arr) {\n    if (i < 0) {\n      i <- i * -1\n    }\n    if (i / 10 < 1) {\n\
    \      count <- count + 1\n    } else {\n      counter <- 0\n      while (i /\
    \ 10 > 0) {\n        counter <- counter + i %% 10\n        i <- i %/% 10\n   \
    \   }\n      counter <- counter + i\n      if (counter > 0) {\n        count <-\
    \ count + 1\n      }\n    }\n  }\n  return(count)\n}\n", "\n  sum(abs(arr) %/%\
    \ 10 ^ (0:(trunc(log10(max(abs(arr))))))) > 0\n}", "\n  sum(apply(as.matrix(arr),\
    \ 1, function(x) {\n    sum(abs(x))\n  }))\n}\n", "\n    res <- 0\n    for (num\
    \ in arr) {\n        if (num < 0) {\n            sum <- sum(as.integer(substring(num,\
    \ 1, 1)), \n                as.integer(substring(num, 2, nchar(num))))\n     \
    \   } else {\n            sum <- sum(as.integer(substring(num, 1, nchar(num))))\n\
    \        }\n        if (sum > 0) {\n            res <- res + 1\n        }\n  \
    \  }\n    return(res)\n}\n", "\n  # YOUR CODE HERE\n  sum = 0\n  for (num in arr)\
    \ {\n    sum = sum + sum(digits(num))\n  }\n  if (sum == 0) {\n    return(0)\n\
    \  } else {\n    return(sum)\n  }\n}\n \ngrader::grade_test(test_count_nums)\n",
  "\n  sum(sapply(arr, function(x) ifelse(x < 0, sum(-(abs(x)%%10)), sum(x%%10))))\n\
    }\n", "\n    count <- 0\n    for (i in 1:length(arr)) {\n        if (arr[i] <\
    \ 0) {\n            arr[i] = arr[i] * -1\n        }\n        while (arr[i] > 0)\
    \ {\n            mod = arr[i] %% 10\n            arr[i] = arr[i] %/% 10\n    \
    \        count = count + mod\n        }\n    }\n    count\n}", "\n  res <- 0\n\
    \  sum <- 0\n  for (i in arr) {\n    while (i != 0) {\n      sum <- sum + i %%\
    \ 10\n      i <- i %/% 10\n    }\n    if (sum > 0) {\n      res <- res + 1\n \
    \   }\n    sum <- 0\n  }\n  return(res)\n}\n", "\n  sum(sapply(arr, sum_digits)\
    \ > 0)\n}\n", "\n  count <- 0\n  for (i in arr) {\n    if (i < 0) {\n      i =\
    \ i * -1\n    }\n    sum <- 0\n    while (i > 0) {\n      i <- i %/% 10\n    \
    \  sum <- sum + i %% 10\n    }\n    if (sum > 0) {\n      count <- count + 1\n\
    \    }\n  }\n  return(count)\n}\n", "\n    lapply(arr, function(x) {\n       \
    \ if (x < 0) {\n            x = -x\n        }\n        sum(as.numeric(strsplit(as.character(x),\
    \ split = \"\")[[1]]))\n    }) %>%\n        unlist() %>%\n        sum()\n}\ncount_nums(c())\n\
    count_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n  # YOUR CODE HERE\n\
    \  temp = 0\n  for (i in 1:length(arr)) {\n    if (sum(abs(as.integer(strsplit(as.character(arr[i]),\
    \ split = \"\")[[1]]))) > 0) {\n      temp = temp + 1\n    }\n  }\n  return(temp)\n\
    }\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n\
    \    res <- 0\n    for (x in arr) {\n        if (sum(abs(as.numeric(strsplit(as.character(x),\
    \ \"\")[[1]]))) > 0) {\n            res <- res + 1\n        }\n    }\n    return(res)\n\
    }\n", "\n\treturn(sum(abs(arr) > 0))\n}\n\n", "\n\tnum_nums <- 0\n\tfor (num in\
    \ arr) {\n\t\tif (sum(strsplit(toString(abs(num)), \"\")[[1]]) > 0) {\n\t\t\t\
    num_nums <- num_nums + 1\n\t\t}\n\t}\n\treturn(num_nums)\n}\n", "\n    # The body\
    \ of the function\n}", "\n  # YOUR CODE HERE\n  counter <- 0\n  for (i in arr)\
    \ {\n    if (sum(abs(as.character(i))) > 0) {\n      counter <- counter + 1\n\
    \    }\n  }\n  return(counter)\n}\n", "\n    # Your code here\n}\n", "\n  arr\
    \ <- abs(arr)\n  result <- 0\n  for (elem in arr) {\n    sum <- 0\n    while (elem\
    \ > 0) {\n      sum <- sum + (elem %% 10)\n      elem <- elem %/% 10\n    }\n\
    \    if (sum > 0) {\n      result <- result + 1\n    }\n  }\n  return(result)\n\
    }\n\ncount_nums(c())\ncount_nums(c(-1, 11, -11))\ncount_nums(c(1, 1, 2))\n", "\n\
    \    sum(abs(arr) > 0)\n}", "\n  count <- 0\n  for (num in arr) {\n    if (sum(abs(num))\
    \ > 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
