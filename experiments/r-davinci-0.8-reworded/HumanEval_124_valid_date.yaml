name: HumanEval_124_valid_date
language: r
prompt: "# You have to write a function which validates a given date string and\n\
  # returns TRUE if the date is valid otherwise FALSE.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# >>> valid_date('03-11-2000')\n# TRUE\n# >>> valid_date('15-01-2012')\n\
  # FALSE\n# >>> valid_date('04-0-2040')\n# FALSE\n# >>> valid_date('06-04-2020')\n\
  # TRUE\n# >>> valid_date('06/04/2020')\n# FALSE\nvalid_date <- function(date) {"
tests: "test_humaneval <- function() {\ncandidate <- valid_date\n    if(!identical(candidate('03-11-2000'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('15-01-2012'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('04-0-2040'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('06-04-2020'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('01-01-2007'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('03-32-2011'), FALSE)){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('04-31-3000'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('06-06-2005'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('21-31-2000'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('04-12-2003'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('04122003'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('20030412'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('2003-04'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('2003-04-12'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('04-2003'),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (is.na(strptime(date, format = \"%m-%d-%Y\", tz = \"UTC\")))\
    \ {\n    FALSE\n  } else {\n    TRUE\n  }\n}\n", "\n    date_vec <- strsplit(date,\
    \ \"-\")[[1]]\n    month <- as.numeric(date_vec[1])\n    day <- as.numeric(date_vec[2])\n\
    \    year <- as.numeric(date_vec[3])\n    max_day <- 31\n    if (month %in% c(2,\
    \ 4, 6, 9, 11)) {\n        max_day <- 30\n    } else if (month == 2) {\n     \
    \   if (year %% 400 == 0 || (year %% 4 == 0 && year %% 100 != 0)) {\n        \
    \    max_day <- 29\n        } else {\n            max_day <- 28\n        }\n \
    \   }\n    return(month >= 1 && month <= 12 && day >= 1 && day <= max_day)\n}",
  "\n  valid_format <- function(date) {\n    return(grepl(\"[0-9]{2}-[0-9]{2}-[0-9]{4}\"\
    , date))\n  }\n  valid_month <- function(date) {\n    split_date <- unlist(strsplit(date,\
    \ split = '-'))\n    month <- as.numeric(split_date[1])\n    return(month >= 1\
    \ && month <= 12)\n  }\n  valid_day <- function(date) {\n    split_date <- unlist(strsplit(date,\
    \ split = '-'))\n    month <- as.numeric(split_date[1])\n    day <- as.numeric(split_date[2])\n\
    \    return(\n      (month %in% c(1, 3, 5, 7, 8, 10, 12) && day >= 1 && day <=\
    \ 31) ||\n        (month %in% c(4, 6, 9, 11) && day >= 1 && day <= 30) ||\n  \
    \      (month == 2 && day >= 1 && day <= 29)\n    )\n  }\n  valid_year <- function(date)\
    \ {\n    split_date <- unlist(strsplit(date, split = '-'))\n    year <- as.numeric(split_date[3])\n\
    \    return(year >= 1)\n  }\n  return(valid_format(date) && valid_month(date)\
    \ && valid_day(date) && valid_year(date))\n}\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\n\
    valid_date('04-0-2040')\nvalid_date('06-04-2020')\nvalid_date('06/04/2020')\n",
  "\n    # write your code here\n    df <- strsplit(date, \"-\")\n    if(length(df)\
    \ != 3){\n        return(FALSE)\n    }\n    month <- as.numeric(df[[1]][1])\n\
    \    days <- as.numeric(df[[1]][2])\n    year <- as.numeric(df[[1]][3])\n    if(length(df[[1]])\
    \ != 3){\n        return(FALSE)\n    }\n    if(year <= 0){\n        return(FALSE)\n\
    \    }\n    if(month < 1 || month > 12){\n        return(FALSE)\n    }\n    if(month\
    \ %in% c(1,3,5,7,8,10,12)){\n        if(days < 1 || days > 31){\n            return(FALSE)\n\
    \        }\n    }else if(month %in% c(4,6,9,11)){\n        if(days < 1 || days\
    \ > 30){\n            return(FALSE)\n        }\n    }else if(month == 2){\n  \
    \      if(days < 1 || days > 29){\n            return(FALSE)\n        }\n    }\n\
    \    return(TRUE)\n}\n\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\n\
    valid_date('06-04-2020')\nvalid_date('06/04/2020')\n ", "\n    \n    if (is.na(date))\n\
    \        return(FALSE)\n    \n    # 1. The date string is not empty.\n    if (date\
    \ == \"\")\n        return(FALSE)\n    \n    # 4. The date should be in the format:\
    \ mm-dd-yyyy\n    if (!grepl(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\", date))\n      \
    \  return(FALSE)\n    \n    # Split the string by \"-\"\n    date_parts <- strsplit(date,\
    \ \"-\")[[1]]\n    \n    # Get the month, day and year from the date_parts.\n\
    \    month <- as.integer(date_parts[1])\n    day <- as.integer(date_parts[2])\n\
    \    year <- as.integer(date_parts[3])\n    \n    # 2. The number of days is not\
    \ less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n    # 3. The\
    \ months should not be less than 1 or higher than 12.\n    if (month %in% c(1,3,5,7,8,10,12)\
    \ && (day < 1 || day > 31))\n        return(FALSE)\n    else if (month %in% c(4,6,9,11)\
    \ && (day < 1 || day > 30))\n        return(FALSE)\n    else if (month == 2 &&\
    \ (day < 1 || day > 29))\n        return(FALSE)\n    else if (month < 1 || month\
    \ > 12)\n        return(FALSE)\n    \n    # Leap year check\n    if (month ==\
    \ 2 && day == 29) {\n        if (year % 4 != 0)\n            return(FALSE)\n \
    \       else if (year % 100 != 0)\n            return(TRUE)\n        else if (year\
    \ % 400 != 0)\n            return(FALSE)\n        else\n            return(TRUE)\n\
    \    }\n    \n    return(TRUE)\n}\n", "\n  d <- as.Date(date, format = \"%m-%d-%Y\"\
    )\n  is.na(d)\n}", "\n\tdmy <- strsplit(date, '-')[[1]]\n\tif (length(dmy) !=\
    \ 3) {\n\t\treturn(FALSE)\n\t} else {\n\t\tmonth <- as.numeric(dmy[1])\n\t\tday\
    \ <- as.numeric(dmy[2])\n\t\tyear <- as.numeric(dmy[3])\n\t\tif (is.na(month)\
    \ || is.na(day) || is.na(year)) {\n\t\t\treturn(FALSE)\n\t\t} else {\n\t\t\tif\
    \ (month < 1 || month > 12) {\n\t\t\t\treturn(FALSE)\n\t\t\t} else {\n\t\t\t\t\
    if (month %in% c(1,3,5,7,8,10,12)) {\n\t\t\t\t\tif (day < 1 || day > 31) {\n\t\
    \t\t\t\t\treturn(FALSE)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn(TRUE)\n\t\t\t\t\
    \t}\n\t\t\t\t} else if (month %in% c(4,6,9,11)) {\n\t\t\t\t\tif (day < 1 || day\
    \ > 30) {\n\t\t\t\t\t\treturn(FALSE)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn(TRUE)\n\
    \t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (year %% 4 == 0 && year %% 100 !=\
    \ 0 || year %% 400 == 0) {\n\t\t\t\t\t\tif (day < 1 || day > 29) {\n\t\t\t\t\t\
    \t\treturn(FALSE)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn(TRUE)\n\t\t\t\t\t\
    \t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (day < 1 || day > 28) {\n\t\t\t\t\t\t\t\
    return(FALSE)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn(TRUE)\n\t\t\t\t\t\t\
    }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t", "\n  date = as.Date(date, format = \"%m-%d-%Y\"\
    )\n  if (date == \"NA\") {\n    return(FALSE)\n  } else {\n    return(TRUE)\n\
    \  }\n}\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\n\
    valid_date('06-04-2020')\nvalid_date('06/04/2020')\n", "\n    if (length(date)\
    \ == 0) {\n        return(FALSE)\n    } else {\n        date_split <- strsplit(date,\
    \ \"-\")\n        day <- as.numeric(date_split[[1]][2])\n        month <- as.numeric(date_split[[1]][1])\n\
    \        year <- as.numeric(date_split[[1]][3])\n        # print(day)\n      \
    \  # print(month)\n        # print(year)\n        if (month == 2) {\n        \
    \    if (year %% 4 == 0) {\n                if (day < 1 | day > 29) {\n      \
    \              return(FALSE)\n                }\n            } else {\n      \
    \          if (day < 1 | day > 28) {\n                    return(FALSE)\n    \
    \            }\n            }\n        } else if (month == 1 | month == 3 | month\
    \ == 5 | month == 7 | month == 8 | month == 10 | month == 12) {\n            if\
    \ (day < 1 | day > 31) {\n                return(FALSE)\n            }\n     \
    \   } else if (month == 4 | month == 6 | month == 9 | month == 11) {\n       \
    \     if (day < 1 | day > 30) {\n                return(FALSE)\n            }\n\
    \        } else {\n            return(FALSE)\n        }\n        if (month < 1\
    \ | month > 12) {\n            return(FALSE)\n        }\n        return(TRUE)\n\
    \    }\n}\n", "\n  out <- FALSE\n  d1 <- strsplit(date, split=\"-\")\n  if(length(d1)\
    \ == 3) {\n    d1 <- as.numeric(d1[[1]])\n    d2 <- as.numeric(d1[[2]])\n    d3\
    \ <- as.numeric(d1[[3]])\n    if(d1 == 1 || d1 == 3 || d1 == 5 || d1 == 7 || d1\
    \ == 8 || d1 == 10 || d1 == 12) {\n      if(d2 >= 1 && d2 <= 31) {\n        out\
    \ <- TRUE\n      }\n    } else if(d1 == 4 || d1 == 6 || d1 == 9 || d1 == 11) {\n\
    \      if(d2 >= 1 && d2 <= 30) {\n        out <- TRUE\n      }\n    } else if(d1\
    \ == 2) {\n      if(d2 >= 1 && d2 <= 29) {\n        out <- TRUE\n      }\n   \
    \ }\n  }\n  return(out)\n}", "\n  # Check if the date is a character vector.\n\
    \  if (!is.character(date)) {\n    return(FALSE)\n  }\n\n  # Check if the date\
    \ is not empty.\n  if (date == \"\") {\n    return(FALSE)\n  }\n\n  # Check if\
    \ the date is not in the format: mm-dd-yyyy.\n  if (grepl(\"[^0-9]\", date) ==\
    \ FALSE) {\n    return(FALSE)\n  }\n\n  # Split the date by hyphen.\n  date_vec\
    \ <- strsplit(date, \"-\")[[1]]\n\n  # Convert the date to the format: mm-dd-yyyy.\n\
    \  year_vec <- as.numeric(substr(date_vec[3], 1, 4))\n  month_vec <- as.numeric(substr(date_vec[1],\
    \ 1, 2))\n  day_vec <- as.numeric(substr(date_vec[2], 1, 2))\n\n  # Check if the\
    \ year is not less than 1000 or higher than 9999.\n  if ((year_vec < 1000) | (year_vec\
    \ > 9999)) {\n    return(FALSE)\n  }\n\n  # Check if the months are not less than\
    \ 1 or higher than 12.\n  if ((month_vec < 1) | (month_vec > 12)) {\n    return(FALSE)\n\
    \  }\n\n  # Check if the number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12.\n  if ((month_vec == 1) | (month_vec == 3) | (month_vec\
    \ == 5) | (month_vec == 7) | (month_vec == 8) | (month_vec == 10) | (month_vec\
    \ == 12)) {\n    if ((day_vec < 1) | (day_vec > 31)) {\n      return(FALSE)\n\
    \    }\n  }\n\n  # Check if the number of days is not less than 1 or higher than\
    \ 30 days for months 4,6,9,11.\n  if ((month_vec == 4) | (month_vec == 6) | (month_vec\
    \ == 9) | (month_vec == 11))", "\n  valid <- FALSE\n  if(nchar(date) != 0){\n\
    \    date_split <- strsplit(date, split = '-')[[1]]\n    if(length(date_split)\
    \ == 3){\n      month <- as.numeric(date_split[1])\n      day <- as.numeric(date_split[2])\n\
    \      year <- as.numeric(date_split[3])\n      if(month <= 12 & month >= 1 &\
    \ year >= 0){\n        if(month %in% c(1,3,5,7,8,10,12)){\n          if(day <=\
    \ 31 & day >= 1){\n            valid <- TRUE\n          }\n        }else if(month\
    \ %in% c(4,6,9,11)){\n          if(day <= 30 & day >= 1){\n            valid <-\
    \ TRUE\n          }\n        }else if(month == 2){\n          if(day <= 29 & day\
    \ >= 1){\n            valid <- TRUE\n          }\n        }\n      }\n    }\n\
    \  }\n  return(valid)\n}\n", "\n  days_per_month <- c(31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31)\n  date_pattern <- '^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    \\d{4}$'\n  if (!grepl(date_pattern, date)) {\n    return(FALSE)\n  }\n  date_split\
    \ <- strsplit(date, '-')[[1]]\n  month <- as.integer(date_split[1])\n  day <-\
    \ as.integer(date_split[2])\n  year <- as.integer(date_split[3])\n  if (year %%\
    \ 4 == 0 && (year %% 100 != 0 || year %% 400 == 0)) {\n    days_per_month[2] <-\
    \ 29\n  }\n  return(month >= 1 && month <= 12 && day >= 1 && day <= days_per_month[month])\n\
    }\nvalid_date('03-11-2000')\nvalid_date('15-01-2012')\nvalid_date('04-0-2040')\n\
    valid_date('06-04-2020')\nvalid_date('06/04/2020')\n", "\n  date_valid <- TRUE\n\
    \  pattern <- \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\n  if\
    \ (is.null(regexpr(pattern, date)) == 0) {\n    month <- strtoi(substring(date,\
    \ 1, 2))\n    day <- strtoi(substring(date, 4, 5))\n    year <- strtoi(substring(date,\
    \ 7, 10))\n    if ((month > 12) | (month < 1)) {\n      date_valid <- FALSE\n\
    \    }\n    if ((month == 2) & (day > 29)) {\n      date_valid <- FALSE\n    }\n\
    \    if ((month == 2) & (day == 29) & (year %% 4 != 0)) {\n      date_valid <-\
    \ FALSE\n    }\n    if ((month == 2) & (day == 29) & (year %% 100 == 0) & (year\
    \ %% 400 != 0)) {\n      date_valid <- FALSE\n    }\n    if ((month %in% c(4,\
    \ 6, 9, 11)) & (day > 30)) {\n      date_valid <- FALSE\n    }\n    if ((month\
    \ %in% c(1, 3, 5, 7, 8, 10, 12)) & (day > 31)) {\n      date_valid <- FALSE\n\
    \    }\n  } else {\n    date_valid <- FALSE\n  }\n  return(date_valid)\n}\nvalid_date('03-11-2000')\n\
    valid_date('15-01-2012')\nvalid_date('04-0-2040')\nvalid_date('06-04-2020')\n\
    valid_date('06/04/2020')\n\n", "\n\t# Write your function code here.\n    spl\
    \ = strsplit(date, \"-\")\n    l = spl[[1]]\n    l_length = length(l)\n    if\
    \ (l_length!=3) {\n        return(FALSE)\n    } else {\n        month = as.numeric(l[1])\n\
    \        day = as.numeric(l[2])\n        year = as.numeric(l[3])\n        # 1.\
    \ The date string is not empty.\n        if (length(l[1])==0) {\n            return(FALSE)\n\
    \        } else {\n            # 2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12.\n            #    And the number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11.\n      \
    \      #    And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n            if (month==1|month==3|month==5|month==7|month==8|month==10|month==12)\
    \ {\n                if (day<1|day>31) {\n                    return(FALSE)\n\
    \                } else {\n                    # 3. The months should not be less\
    \ than 1 or higher than 12.\n                    if (month<1|month>12) {\n   \
    \                     return(FALSE)\n                    } else {\n          \
    \              # 4. The date should be in the format: mm-dd-yyyy\n           \
    \             if (nchar(month)!=2|nchar(day)!=2|nchar(year)!=4) {\n          \
    \                  return(FALSE)\n                        } else {\n         \
    \                   return(TRUE)\n                        }\n                \
    \    }\n                }\n            } else if (month==4|month==6|month==9|month==11)\
    \ {\n                if (day<1|day>30) {\n                    return(FALSE)\n\
    \                } else {\n                    # 3. The months should not be less\
    \ than 1 or higher than 12.\n                    if (month<1|month>12) {\n   \
    \                     return(FALSE)\n                    } else {\n          \
    \              # 4. The date should be in the format: mm", "\n  \n  date <- unlist(strsplit(date,\
    \ split = \"-\"))\n  \n  if(date[1] %in% c(\"1\", \"3\", \"5\", \"7\", \"8\",\
    \ \"10\", \"12\")){\n    if(date[2] > 31) return(FALSE)\n  } else if(date[1] %in%\
    \ c(\"4\", \"6\", \"9\", \"11\")){\n    if(date[2] > 30) return(FALSE)\n  } else\
    \ if(date[1] == \"2\"){\n    if(date[2] > 29) return(FALSE)\n  } else{\n    return(FALSE)\n\
    \  }\n  \n  if(date[1] < 1 || date[1] > 12) return(FALSE)\n  \n  return(TRUE)\n\
    }", "\n  date_list <- strsplit(date, split=\"-\")[[1]]\n  if (length(date_list)\
    \ != 3) {\n    return(FALSE)\n  }\n  if (as.numeric(date_list[1]) < 1 || as.numeric(date_list[1])\
    \ > 12) {\n    return(FALSE)\n  }\n  if (as.numeric(date_list[2]) < 1 || as.numeric(date_list[2])\
    \ > 31) {\n    return(FALSE)\n  }\n  else if (as.numeric(date_list[1]) % 2 ==\
    \ 0 & as.numeric(date_list[1]) != 2 & as.numeric(date_list[2]) == 31) {\n    return(FALSE)\n\
    \  }\n  else if (as.numeric(date_list[1]) % 2 != 0 & as.numeric(date_list[2])\
    \ > 30) {\n    return(FALSE)\n  }\n  else if (as.numeric(date_list[1]) == 2 &\
    \ as.numeric(date_list[2]) > 29) {\n    return(FALSE)\n  }\n  if (nchar(date_list[3])\
    \ != 4) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\ncat(\"Test 1: \", ifelse(valid_date('03-11-2000')\
    \ == TRUE, \"Passed\", \"Failed\"))\ncat(\"\\nTest 2: \", ifelse(valid_date('15-01-2012')\
    \ == FALSE, \"Passed\", \"Failed\"))\ncat(\"\\nTest 3: \", ifelse(valid_date('04-0-2040')\
    \ == FALSE, \"Passed\", \"Failed\"))\ncat(\"\\nTest 4: \", ifelse(valid_date('06-04-2020')\
    \ == TRUE, \"Passed\", \"Failed\"))\ncat(\"\\nTest 5: \", ifelse(valid_date('06/04/2020')\
    \ == FALSE, \"Passed\", \"Failed\"))\n", "\n    dt <- as.Date(date,format=\"%m-%d-%Y\"\
    )\n    # \"if\" is not a function (a vectorized function) so you can't use it\
    \ like it is a function\n    if(dt==\"NA\"){\n        return(FALSE)\n    }else{\n\
    \        return(TRUE)\n    }\n}\n", "\n  # Your code goes here\n  if (is.na(date))\
    \ {\n    return(FALSE)\n  }\n  if (!grepl(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\", date))\
    \ {\n    return(FALSE)\n  }\n  month <- substr(date, 1, 2)\n  day <- substr(date,\
    \ 4, 5)\n  year <- substr(date, 7, 10)\n  month <- as.numeric(month)\n  day <-\
    \ as.numeric(day)\n  year <- as.numeric(year)\n  leap_year <- is.leap.year(year)\n\
    \  if (leap_year) {\n    return(month %in% c(1, 3, 5, 7, 8, 10, 12) && day >=\
    \ 1 && day <= 31 || month %in% c(4, 6, 9, 11) && day >= 1 && day <= 30 || month\
    \ == 2 && day >= 1 && day <= 29)\n  } else {\n    return(month %in% c(1, 3, 5,\
    \ 7, 8, 10, 12) && day >= 1 && day <= 31 || month %in% c(4, 6, 9, 11) && day >=\
    \ 1 && day <= 30 || month == 2 && day >= 1 && day <= 28)\n  }\n}\n", "\n  # Extracting\
    \ data components from the date string\n  if(!is.null(regexpr('/', date))){\n\
    \    # If the date is provided in the format of dd/mm/yyyy\n    date_components\
    \ <- unlist(strsplit(date, '/'))\n  } else {\n    # If the date is provided in\
    \ the format of mm-dd-yyyy\n    date_components <- unlist(strsplit(date, '-'))\n\
    \  }\n  # Extracting month, day and year in their respective variables\n  month\
    \ <- as.numeric(date_components[1])\n  day <- as.numeric(date_components[2])\n\
    \  year <- as.numeric(date_components[3])\n  # Check if the date is in the format\
    \ mm-dd-yyyy\n  if(!(length(date_components) == 3)){\n    return(FALSE)\n  }\n\
    \  # Check if the months are not less than 1 or higher than 12\n  if(!(month >=\
    \ 1 & month <= 12)){\n    return(FALSE)\n  }\n  # Check the number of days for\
    \ each month\n  if(!(day >= 1 & day <= 31) & month %in% c(1,3,5,7,8,10,12)){\n\
    \    return(FALSE)\n  }\n  if(!(day >= 1 & day <= 30) & month %in% c(4,6,9,11)){\n\
    \    return(FALSE)\n  }\n  if(!(day >= 1 & day <= 29) & month == 2){\n    return(FALSE)\n\
    \  }\n  # Return TRUE if all conditions are satisfied\n  return(TRUE)\n}\n "]
stop_tokens:
- "\n#"
- "\n```"
