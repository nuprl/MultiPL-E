name: HumanEval_35_max_element
language: r
prompt: "# Return maximum element in the list.\n# >>> max_element(c(1, 2, 3))\n# 3\n\
  # >>> max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# 123\nmax_element\
  \ <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- max_element\n    if(!identical(candidate(c(1,\
  \ 2, 3)), 3)){quit('no', 1)}\n    if(!identical(candidate(c(5, 3, -5, 2, -3, 3,\
  \ 9, 0, 124, 1, -10)), 124)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  max <- l[1]\n  for (i in 2:length(l)) {\n    if (l[i] > max) {\n\
    \      max <- l[i]\n    }\n  }\n  return(max)\n}\n", "\n  ## YOUR CODE HERE\n\
    \  return(max(l))\n}\n", "\n  # The length of the list.\n  list_length <- length(l)\n\
    \  # If the list is empty, return NULL, if it contains only one element, return\
    \ that element.\n  if (list_length == 0) {\n    return(NULL)\n  } else if (list_length\
    \ == 1) {\n    return(l[[1]])\n  } else {\n    # Create an empty list for the\
    \ result.\n    max_list <- c()\n    # Iterate over the list and keep only the\
    \ values greater than or equal to all the other values.\n    for (i in 1:list_length)\
    \ {\n      if (l[[i]] >= max_element(l[-i])) {\n        max_list <- c(max_list,\
    \ l[[i]])\n      }\n    }\n    # Return the minimum value of the new list.\n \
    \   return(min(max_list))\n  }\n}\n", "\n  max <- l[1]\n  for (i in l) {\n   \
    \ if (i > max) {\n      max <- i\n    }\n  }\n  return(max)\n}\n", "\n  Reduce(function(x,\
    \ y) if (x > y) x else y, l)\n}\n", "\n  max.col(matrix(l, nrow = 1))\n}\n", "\n\
    \    return(max(l))\n}\n", "\n  max <- l[1]\n  for (i in 2:length(l)) {\n    if\
    \ (l[i] > max) {\n      max <- l[i]\n    }\n  }\n  return(max)\n}\n", "\n    #\
    \ Write your code here.\n    \n    return(max(l))\n}\n", "\n  max.el <- l[1]\n\
    \  for (el in l) {\n    if (el > max.el) max.el <- el\n  }\n  return(max.el)\n\
    }\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n  reducer(l, max)\n}\n", "\n    n <- length(l)\n    max <- l[1]\n    for (i in\
    \ 2:n) {\n        if (l[i] > max) {\n            max <- l[i]\n        }\n    }\n\
    \    return(max)\n}\n", "\n    # YOUR CODE HERE\n    length <- length(l)\n   \
    \ max <- l[1]\n    for (i in 1:length) {\n        if (l[i] > max) {\n        \
    \    max <- l[i]\n        }\n    }\n    return(max)\n}\nmax_element(c(1, 2, 3))\n\
    \nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  max_element <-\
    \ 0\n  for (i in l) {\n    if (i > max_element) {\n      max_element <- i\n  \
    \  }\n  }\n  return(max_element)\n}\n", "\n  return(max(l))\n}\n", "\n    res\
    \ <- l[1]\n    for (x in l) {\n        if (x > res) {\n            res <- x\n\
    \        }\n    }\n    return(res)\n}\nmax_element(c(1, 2, 3))\nmax_element(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    max <- -Inf\n    for (i in l)\
    \ {\n        if (i > max) {\n            max <- i\n        }\n    }\n    return(max)\n\
    }\n", "\n  max_el <- NULL\n  for (i in 1:length(l)) {\n    if (is.null(max_el)\
    \ || l[i] > max_el) {\n      max_el <- l[i]\n    }\n  }\n  return(max_el)\n}\n",
  "\n  # your code goes here\n}", "\n    max_temp <- l[1]\n    for (el in l[2:length(l)])\
    \ {\n        if (el > max_temp) {\n            max_temp <- el\n        }\n   \
    \ }\n    return(max_temp)\n}\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10))\n"]
stop_tokens:
- "\n#"
- "\n```"
