name: HumanEval_35_max_element
language: r
prompt: "# Return maximum element in the list.\n# >>> max_element(c(1, 2, 3))\n# 3\n\
  # >>> max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# 123\nmax_element\
  \ <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- max_element\n    if(!identical(candidate(c(1,\
  \ 2, 3)), 3)){quit('no', 1)}\n    if(!identical(candidate(c(5, 3, -5, 2, -3, 3,\
  \ 9, 0, 124, 1, -10)), 124)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  max <- l[1]\n  for (i in 2:length(l)) {\n    if (l[i] > max) {\n\
    \      max <- l[i]\n    }\n  }\n  return(max)\n}\n", "\n  ## YOUR CODE HERE\n\
    \  return(max(l))\n}\n", "\n  # The length of the list.\n  list_length <- length(l)\n\
    \  # If the list is empty, return NULL, if it contains only one element, return\
    \ that element.\n  if (list_length == 0) {\n    return(NULL)\n  } else if (list_length\
    \ == 1) {\n    return(l[[1]])\n  } else {\n    # Create an empty list for the\
    \ result.\n    max_list <- c()\n    # Iterate over the list and keep only the\
    \ values greater than or equal to all the other values.\n    for (i in 1:list_length)\
    \ {\n      if (l[[i]] >= max_element(l[-i])) {\n        max_list <- c(max_list,\
    \ l[[i]])\n      }\n    }\n    # Return the minimum value of the new list.\n \
    \   return(min(max_list))\n  }\n}\n", "\n  max <- l[1]\n  for (i in l) {\n   \
    \ if (i > max) {\n      max <- i\n    }\n  }\n  return(max)\n}\n", "\n  Reduce(function(x,\
    \ y) if (x > y) x else y, l)\n}\n", "\n  max.col(matrix(l, nrow = 1))\n}\n", "\n\
    \    return(max(l))\n}\n", "\n  max <- l[1]\n  for (i in 2:length(l)) {\n    if\
    \ (l[i] > max) {\n      max <- l[i]\n    }\n  }\n  return(max)\n}\n", "\n    #\
    \ Write your code here.\n    \n    return(max(l))\n}\n", "\n  max.el <- l[1]\n\
    \  for (el in l) {\n    if (el > max.el) max.el <- el\n  }\n  return(max.el)\n\
    }\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n  reducer(l, max)\n}\n", "\n    n <- length(l)\n    max <- l[1]\n    for (i in\
    \ 2:n) {\n        if (l[i] > max) {\n            max <- l[i]\n        }\n    }\n\
    \    return(max)\n}\n", "\n    # YOUR CODE HERE\n    length <- length(l)\n   \
    \ max <- l[1]\n    for (i in 1:length) {\n        if (l[i] > max) {\n        \
    \    max <- l[i]\n        }\n    }\n    return(max)\n}\nmax_element(c(1, 2, 3))\n\
    \nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  max_element <-\
    \ 0\n  for (i in l) {\n    if (i > max_element) {\n      max_element <- i\n  \
    \  }\n  }\n  return(max_element)\n}\n", "\n  return(max(l))\n}\n", "\n    res\
    \ <- l[1]\n    for (x in l) {\n        if (x > res) {\n            res <- x\n\
    \        }\n    }\n    return(res)\n}\nmax_element(c(1, 2, 3))\nmax_element(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    max <- -Inf\n    for (i in l)\
    \ {\n        if (i > max) {\n            max <- i\n        }\n    }\n    return(max)\n\
    }\n", "\n  max_el <- NULL\n  for (i in 1:length(l)) {\n    if (is.null(max_el)\
    \ || l[i] > max_el) {\n      max_el <- l[i]\n    }\n  }\n  return(max_el)\n}\n",
  "\n  # your code goes here\n}", "\n    max_temp <- l[1]\n    for (el in l[2:length(l)])\
    \ {\n        if (el > max_temp) {\n            max_temp <- el\n        }\n   \
    \ }\n    return(max_temp)\n}\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    l <- unlist(l)\n    max(l)\n}\nmax_element(c(1,\
    \ 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    return(max(l))\n\
    }", "\n    max_element_impl(l, l[[1]])\n}\n\nmax_element_impl <- function(l, max)\
    \ {\n    if (length(l) == 0) {\n        return(max)\n    } else {\n        if\
    \ (l[[1]] > max) {\n            max <- l[[1]]\n        }\n        return(max_element_impl(l[-1],\
    \ max))\n    }\n}\n", "\n  max <- l[1]\n  for (i in 2:length(l)) {\n    if (l[i]\
    \ > max) max <- l[i]\n  }\n  return(max)\n}\n", "\n  return(max(l))\n}", "\n \
    \   max_element_iter(l, l[[1]])\n}\n", "\n    # Your code here\n    x<-0\n   \
    \ for(i in 1:length(l)){\n        if(l[i]>x){\n            x<-l[i]\n        }\n\
    \    }\n    return(x)\n}\n", "\n  max <- l[1]\n  for (i in l) {\n    if (i > max)\
    \ {\n      max <- i\n    }\n  }\n  return(max)\n}\n", "\n  if (length(l) == 1)\
    \ {\n    return(l)\n  } else {\n    if (l[1] > l[2]) {\n      l[2] <- l[1]\n \
    \   }\n    return(max_element(l[-1]))\n  }\n}\n", "\n    max_element <- l[1]\n\
    \    for (i in l) {\n        if (i > max_element) max_element <- i\n    }\n  \
    \  return(max_element)\n}\n", "\n    max = 0\n    for (num in l) {\n        if\
    \ (num > max) {\n            max = num\n        }\n    }\n    return(max)\n}\n\
    max_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n  if(length(l) == 1) return(l)\n  if(l[1] > l[2]) {\n    l[2] <- l[1]\n    l\
    \ <- l[-1]\n  } else {\n    l <- l[-2]\n  }\n  max_element(l)\n}\n", "\n    if\
    \ (length(l) == 1) {\n        return(l)\n    }\n    if (l[1] > l[2]) {\n     \
    \   return(max_element(c(l[1], l[-c(1, 2)])))\n    } else {\n        return(max_element(c(l[2],\
    \ l[-c(1, 2)])))\n    }\n}\n", "\n    max = l[1]\n    for (i in 2:length(l)) {\n\
    \        if (l[i] > max) {\n            max = l[i]\n        }\n    }\n    return(max)\n\
    }\n\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10))\n", "\n  max <- 0\n  for (i in l) {\n    if (i > max) {\n      max <-\
    \ i\n    }\n  }\n  return(max)\n}\n", "\n    return(max(l))\n}\n", "\n    if (length(l)\
    \ == 1) {\n        return(l)\n    }\n    else {\n        tail <- max_element(l[-1])\n\
    \        if (l[1] >= tail) {\n            return(l[1])\n        }\n        else\
    \ {\n            return(tail)\n        }\n    }\n}\nprint(max_element(1:3))\n\
    print(max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)))\n", "\n  return(max(l))\n\
    }\n", "\n    max <- l[1]\n    for (x in l) {\n        if (x > max) {\n       \
    \     max <- x\n        }\n    }\n    return(max)\n}\n", "\n  return(max(l))\n\
    }\n", "\n    max = 0\n    for (i in l) {\n        if (i > max) {\n           \
    \ max = i\n        }\n    }\n    return(max)\n}\n", "\n  if (length(l) == 1) {\n\
    \    return(l)\n  }\n  else {\n    if (l[1] > l[2]) {\n      l <- c(l[1], l[-(1:2)])\n\
    \    }\n    else {\n      l <- c(l[2], l[-(1:2)])\n    }\n    return(max_element(l))\n\
    \  }\n}\n", "\n    res <- 0;\n    for (n in l) {\n        if (n > res) {\n   \
    \         res <- n;\n        }\n    }\n    return(res);\n}\n", "\n  # your code\
    \ here\n  max(l)\n}", "\n    if (is.null(l)) {\n        return(NULL)\n    }\n\
    \    if (is.null(l$tail)) {\n        return(l$head)\n    }\n    max(max_element(l$tail),\
    \ l$head)\n}\n", "\n    m <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i]\
    \ > m) {\n            m <- l[i]\n        }\n    }\n    return(m)\n}\n ", "\n \
    \ if (length(l) == 1) {\n    return(l)\n  } else {\n    return(max(l[1], max_element(l[-1])))\n\
    \  }\n}\n", "\n\tmaximum(l)\n}\n\n", "\n    max_element <- l[1]\n    for (i in\
    \ 2:length(l)) {\n        if (l[i] > max_element) {\n            max_element <-\
    \ l[i]\n        }\n    }\n    return(max_element)\n}\n", "\n    max(l)\n}", "\n\
    \    list <- l\n    if (length(list) == 1) {\n        return(list)\n    }\n  \
    \  else {\n        if (list[1] > list[2]) {\n            list <- list[-2]\n  \
    \      }\n        else {\n            list <- list[-1]\n        }\n        max_element(list)\n\
    \    }\n}\n", "\n  # Your Code Here\n  a=0\n  for(i in 1:length(l)){\n    if(l[i]>a){\n\
    \      a=l[i]\n    }\n  }\n  return(a)\n}\n", "\n    max <- l[1]\n    for (i in\
    \ 2:length(l)) {\n        if (l[i] > max) {\n            max <- l[i]\n       \
    \ }\n    }\n    return(max)\n}\n\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    return(max(l))\n}\n", "\n    max\
    \ <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i] > max) {\n         \
    \   max <- l[i]\n        }\n    }\n    return(max)\n}\n ", "\n  return(max(l))\n\
    }\n", "\n    max <- l[1]\n    for (i in l) {\n        if (i > max) max <- i\n\
    \    }\n    return(max)\n}\n", "\n\t# Your code here\n\tmax(l)\n}\n", "\n    if\
    \ (length(l) == 1) {\n        return(l)\n    } else {\n        m <- max_element(l[-1])\n\
    \        if (l[1] > m) {\n            return(l[1])\n        } else {\n       \
    \     return(m)\n        }\n    }\n}\n", "\n    Reduce(f = function(x, y) if (x\
    \ > y) x else y, x = l)\n}", "\n    max <- 0\n    for (i in 1:length(l)) {\n \
    \       if (l[i] > max) {\n            max <- l[i]\n        }\n    }\n    return(max)\n\
    }\n", "\n    max <- l[1]\n    for (i in 2:length(l)){\n        if (l[i] > max)\
    \ {\n            max <- l[i]\n        }\n    }\n    return(max)\n}\n", "\n  max\
    \ <- l[1]\n  for (x in l) {\n    if (x > max) {\n      max <- x\n    }\n  }\n\
    \  return(max)\n}\n", "\n  max(l)\n}\n", "\n    max(l)\n}\n", "\n    max_element\
    \ <- l[1]\n    for (i in l) {\n        if (i > max_element) {\n            max_element\
    \ <- i\n        }\n    }\n    return(max_element)\n}\n", "\n  return(max(l))\n\
    }\n", "\n    return(max(l))\n}\n", "\n  max <- 0\n  for (i in l) {\n    if (i\
    \ > max) {\n      max <- i\n    }\n  }\n  return(max)\n}\n", "\n    max = l[1]\n\
    \    for (i in 2:length(l)) {\n        if (l[i] > max) max = l[i]\n    }\n   \
    \ return(max)\n}\n ", "\n  max <- l[1]\n  for (x in l) {\n    if (x > max) {\n\
    \      max <- x\n    }\n  }\n  return(max)\n}\nmax_element(c(1, 2, 3))\nmax_element(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))", "\n    if(length(l) == 1) {\n       \
    \ return(l[1])\n    }\n    else if(length(l) == 0) {\n        return(0)\n    }\n\
    \    else {\n        res <- max_element(l[-1])\n        if(res > l[1]) {\n   \
    \         return(res)\n        }\n        else {\n            return(l[1])\n \
    \       }\n    }\n}\n", "\n    max <- l[1]\n    for (i in l) {\n        if (i\
    \ > max) {\n            max <- i\n        }\n    }\n    return(max)\n}\nmax_element(c(1,\
    \ 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    if(length(l)\
    \ == 1) {\n        return(l[1])\n    }\n    else {\n        m <- max_element(l[2:length(l)])\n\
    \        if(l[1] > m) {\n            return(l[1])\n        }\n        else {\n\
    \            return(m)\n        }\n    }\n}\n", "\n  max <- l[1]\n  for (i in\
    \ l) {\n    if (i > max) {\n      max <- i\n    }\n  }\n  return(max)\n}\n ",
  "\n    max = l[1]\n    for (i in l){\n        if (i > max){\n            max = i\n\
    \        }\n    }\n    return(max)\n}\n", "\n    # YOUR CODE HERE\n    return(max(l))\n\
    }\nprint(paste(\"max_element:\", max_element(c(1, 2, 3))))\nprint(paste(\"max_element:\"\
    , max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))))\n", "\n    if(length(l)\
    \ == 1) {\n        return(l[1])\n    } else {\n        return(max(l[1], max_element(l[-1])))\n\
    \    }\n}\n", "\n    elem <- 0\n    for (i in 1:length(l)) {\n        if (l[i]\
    \ > elem) {\n            elem <- l[i]\n        }\n    }\n    return(elem)\n}\n",
  "\n    if (length(l) == 1) {\n        return(l)\n    } else {\n        return(max(l,\
    \ max_element(l[-1])))\n    }\n}\n", "\n    x <- NULL\n    for (i in l) {\n  \
    \      if(is.null(x)) {\n            x <- i\n        } else {\n            if(i\
    \ > x) {\n                x <- i\n            }\n        }\n    }\n    return(x)\n\
    }", "\n  if (length(l) <= 1) {\n    return(l[1])\n  } else {\n    max1 <- max_element(l[1:(length(l)\
    \ - 1)])\n    max2 <- l[length(l)]\n    if (max1 > max2) {\n      return(max1)\n\
    \    } else {\n      return(max2)\n    }\n  }\n}\n", "\n  ## Enter your code here.\n\
    }\n", "\n  l[which.max(l)]\n}\n", "\n    max_e <- l[1]\n    for (e in l) {\n \
    \       if (e > max_e) {\n            max_e <- e\n        }\n    }\n    return(max_e)\n\
    }\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n    max <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i] > max) {\n  \
    \          max <- l[i]\n        }\n    }\n    return(max)\n}\n", "\n    return(max(l))\n\
    }\n", "\n  n <- length(l)\n  if (n == 1) {\n    return(l[1])\n  } else {\n   \
    \ head <- l[1]\n    tail <- l[-1]\n    m <- max_element(tail)\n    if (head >\
    \ m) {\n      return(head)\n    } else {\n      return(m)\n    }\n  }\n}\n", "\n\
    \    # Set max_value to first element in list.\n    max_value <- l[1]\n    # Loop\
    \ through list.\n    for (i in l) {\n        # If list element is greater than\
    \ max_value, set max_value to list element.\n        if (i > max_value) {\n  \
    \          max_value <- i\n        }\n    }\n    # Return max_value.\n    return(max_value)\n\
    }\n", "\n  max(l)\n}\n", "\n    max_num <- l[1]\n    i <- 2\n    while (i <= length(l))\
    \ {\n        if (l[i] > max_num)\n            max_num <- l[i]\n        i <- i\
    \ + 1\n    }\n    return(max_num)\n}\n", "\n    max <- l[1]\n    for (i in 2:length(l))\
    \ {\n        if (l[i] > max) {\n            max <- l[i]\n        }\n    }\n  \
    \  return(max)\n}\n", "\n  m <- l[1]\n  for (i in l) {\n    if (i > m) {\n   \
    \   m <- i\n    }\n  }\n  return(m)\n}\n", "\n  max.num <- l[1]\n  for (num in\
    \ l) {\n    if (num > max.num) {\n      max.num <- num\n    }\n  }\n  return(max.num)\n\
    }\n", "\n    if(length(l) == 1) return(l[1])\n    if(l[1] > l[2]) {\n        l[2]\
    \ <- l[1]\n        return(max_element(l[-1]))\n    } else {\n        return(max_element(l[-1]))\n\
    \    }\n}\n", "\n  max(l)\n}\n", "\n    max <- l[1]\n    for (x in l) {\n    \
    \    if (x > max) {\n            max <- x\n        }\n    }\n    return(max)\n\
    }\n", "\n  max <- -Inf\n  for (i in l) {\n    if (i > max) {\n      max <- i\n\
    \    }\n  }\n  return(max)\n}\n", "\n    max(l)\n}", "\n    max <- 0\n    for\
    \ (i in 1:length(l)) {\n        if (l[i] > max) {\n            max <- l[i]\n \
    \       }\n    }\n    return(max)\n}\n", "\n    max(l)\n}\n", "\n    v <- l[[1]]\n\
    \    for (e in l) {\n        if (e > v) {\n            v <- e\n        }\n   \
    \ }\n    return(v)\n}\n", "\n  if (length(l) == 1) {\n    return(l[1])\n  }\n\
    \  if (l[1] > l[2]) {\n    return(max_element(c(l[1], l[-c(1, 2)])))\n  } else\
    \ {\n    return(max_element(c(l[2], l[-c(1, 2)])))\n  }\n}\nmax_element(c(1, 2,\
    \ 3))\n\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))", "\n    max <-\
    \ l[1]\n    for (i in 2:length(l)) {\n        if (l[i] > max) {\n            max\
    \ <- l[i]\n        }\n    }\n    return(max)\n}\n", "\n  max <- 0\n  for (i in\
    \ l) {\n    if (i > max) {\n      max <- i\n    }\n  }\n  return(max)\n}\n\nmax_element(c(1,\
    \ 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  max =\
    \ l[1]\n  for (el in l) {\n    if (el > max) {\n      max = el\n    }\n  }\n \
    \ return(max)\n}", "\n  max(l)\n}\n", "\n    return(max(l))\n}\n", "\n  max.value\
    \ <- -Inf\n  for (v in l) {\n    if (v > max.value) {\n      max.value <- v\n\
    \    }\n  }\n  return(max.value)\n}", "\n    max_value <- 0\n    for (item in\
    \ l) {\n        if (item > max_value) {\n            max_value <- item\n     \
    \   }\n    }\n    return(max_value)\n}\n", "\n  x <- l[1]\n  for (i in 2:length(l)){\n\
    \    if (l[i] > x) {\n      x <- l[i]\n    }\n  }\n  return(x)\n}\nmax_element(c(1,\
    \ 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    max_value\
    \ <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i] > max_value) {\n   \
    \         max_value <- l[i]\n        }\n    }\n    return(max_value)\n}\n", "\n\
    \  ret <- l[1]\n  for (i in l) {\n    if (i > ret) {\n      ret <- i\n    }\n\
    \  }\n  return(ret)\n}\n ", "\n\tmax(l)\n}\n", "\n    if (is.null(l))\n      \
    \  return(NULL)\n    if (is.null(l$cdr))\n        return(l$car)\n    if (l$car\
    \ > max_element(l$cdr))\n        return(l$car)\n    else\n        return(max_element(l$cdr))\n\
    }\n", "\n    if (length(l) == 1) {\n        return(l)\n    }\n    else {\n   \
    \     return(max(l[1], max_element(l[-1])))\n    }\n}\n", "\n  return(max(l))\n\
    }\n", "\n  max_num <- l[1]\n  for (i in 1:length(l)) {\n    if (l[i] > max_num)\
    \ {\n      max_num <- l[i]\n    }\n  }\n  return(max_num)\n}\n", "\n  max <- l[1]\n\
    \  for (num in l) {\n    if (num > max) {\n      max <- num\n    }\n  }\n  return(max)\n\
    }\n ", "\n    max_elem <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i]\
    \ > max_elem) {\n            max_elem <- l[i]\n        }\n    }\n    return(max_elem)\n\
    }\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n  max <- l[1]\n  for (i in l) {\n    if (i > max) {\n      max <- i\n    }\n\
    \  }\n  return(max)\n}\n", "\n    max(l)\n}\n", "\n  max <- l[1]\n  for (i in\
    \ 1:length(l)) {\n    if (l[i] > max) {\n      max <- l[i]\n    }\n  }\n  return(max)\n\
    }\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n    max_val <- NULL\n    for (i in l) {\n        if (is.null(max_val) || max_val\
    \ < i) {\n            max_val <- i\n        }\n    }\n    return(max_val)\n}\n",
  "\n  # YOUR CODE HERE\n  return(max(l))\n}\n", "\n  max = l[1]\n  for (i in 2:length(l))\
    \ {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return(max)\n}\n",
  "\n  reduce(l, function(a, b) {ifelse(a > b, a, b)})\n}\n", "\n  max <- l[1]\n \
    \ for (e in l) {\n    if (e > max) {\n      max <- e\n    }\n  }\n  return(max)\n\
    }\n", "\n    if (length(l) == 1) {\n        return(l[1])\n    }\n    else {\n\
    \        return(max(l[1], max_element(l[-1])))\n    }\n}\n", "\n    max <- -Inf\n\
    \    for (i in l) {\n        if (i > max) {\n            max <- i\n        }\n\
    \    }\n    return(max)\n}\n", "\n  # For every item in the list, replace the\
    \ maximum element if the\n  # current item is larger. Return the maximum element.\n\
    \  if (length(l) == 0) return (NA)\n  l_max <- l[1]\n  for (l_i in l) {\n    if\
    \ (l_i > l_max) {\n      l_max <- l_i\n    }\n  }\n  return (l_max)\n}\n", "\n\
    \  max <- l[1]\n  for (x in l) {\n    if (x > max) max <- x\n  }\n  return(max)\n\
    }\n", "\n    m <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i] > m) {\n\
    \            m <- l[i]\n        }\n    }\n    return(m)\n}", "\n  if(length(l)\
    \ == 1) {\n    return(l)\n  } else {\n    mid <- floor(length(l)/2)\n    first\
    \ <- max_element(l[1:mid])\n    second <- max_element(l[(mid+1):length(l)])\n\
    \    if(first > second) {\n      return(first)\n    } else {\n      return(second)\n\
    \    }\n  }\n}\n \n  \n  \n  ", "\n  m <- max(l)\n  print(m)\n}\n", "\n    # YOUR\
    \ CODE HERE\n}\n ", "\n    if (is.na(l)) {\n        return(NA)\n    }\n    max\
    \ <- l[1]\n    for (val in l) {\n        if (val > max) {\n            max <-\
    \ val\n        }\n    }\n    return(max)\n}\n", "\n    max <- -Inf\n    for (i\
    \ in 1:length(l)) {\n        if (l[i] > max) {\n            max <- l[i]\n    \
    \    }\n    }\n    return(max)\n}\n", "\n  max <- l[1]\n  for (i in 2:length(l)){\n\
    \    if (l[i] > max) {\n      max <- l[i]\n    }\n  }\n  return(max)\n}\n", "\n\
    \    reduce(l, function(x, y) {\n        if (x > y) {\n            return(x)\n\
    \        } else {\n            return(y)\n        }\n    })\n}\n", "\n    if(length(l)\
    \ == 1) {\n        return(l[1])\n    } else {\n        return(max(l[1], max_element(l[-1])))\n\
    \    }\n}", "\n    max(l)\n}\n", "\n    # Fill in\n    max <- l[1]\n    for (i\
    \ in 2:length(l)) {\n        if (l[i] > max) {\n            max <- l[i]\n    \
    \    }\n    }\n    return(max)\n}\n\nprint(max_element(c(1, 2, 3)))\nprint(max_element(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)))\n", "\n  max = -Inf\n  for (x in l) {\n\
    \    if (x > max) {\n      max = x\n    }\n  }\n  return(max)\n}\n", "\n    l[which.max(l)]\n\
    }\n", "\n    # Your code goes here\n    m <- l[1]\n    for (i in 2:length(l)){\n\
    \      if (l[i] > m){\n        m <- l[i]\n      }\n    }\n    return(m)\n}\n",
  "\n  if (length(l) <= 1) return(l)\n  else {\n    element <- max_element(l[-1])\n\
    \    if (element > l[1]) return(element)\n    else return(l[1])\n  }\n}", "\n\
    \    max <- l[1]\n    for (i in 1:length(l)) {\n        if (l[i] > max) {\n  \
    \          max <- l[i]\n        }\n    }\n    return(max)\n}\n", "\n\tmax_el <-\
    \ l[1]\n\tfor (el in l) {\n\t\tif (el > max_el) {\n\t\t\tmax_el <- el\n\t\t}\n\
    \t}\n\treturn(max_el)\n}\n", "\n    v <- l[1]\n    for (el in l) {\n        if\
    \ (el > v) {\n            v <- el\n        }\n    }\n    return(v)\n}\n", "\n\
    \    if(l == c()) {\n        return(c())\n    }\n    max <- l[1]\n    for(i in\
    \ l) {\n        if(i > max) {\n            max <- i\n        }\n    }\n    return(max)\n\
    }\n", "\n  m <- l[1]\n  for (i in l) {\n    if (i > m) {\n      m <- i\n    }\n\
    \  }\n  return(m)\n}\n", "\n    max_element <- 0\n    for (i in 1:length(l)) {\n\
    \        if (l[i] > max_element) {\n            max_element <- l[i]\n        }\n\
    \    }\n    return(max_element)\n}\n", "\n  max_element <- NULL\n  for (element\
    \ in l) {\n    if (is.null(max_element) || element > max_element) {\n      max_element\
    \ <- element\n    }\n  }\n  return(max_element)\n}\n", "\n    return(max(l))\n\
    }\n", "\n  le <- length(l)\n  if (le == 1) return(l[1])\n  if (l[1] > l[2]) {\n\
    \    l[1] <- l[1]\n    l[2] <- max_element(l[2:le])\n  } else {\n    l[1] <- max_element(l[2:le])\n\
    \    l[2] <- l[2]\n  }\n  return(l[1])\n}\n", "\n    max(l)\n}\nmax_element(c(1,\
    \ 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  max(l)\n\
    }\n", "\n  if(length(l) <= 1) {\n    return(l)\n  }\n  else {\n    if(max_element(l[-1])\
    \ > l[1]) {\n      return(max_element(l[-1]))\n    }\n    else {\n      return(l[1])\n\
    \    }\n  }\n}\n", "\n    max <- l[1]\n    for (x in l[-1])\n        if (x > max)\n\
    \            max <- x\n    return(max)\n}", "\n    max <- l[1]\n    for (i in\
    \ l) {\n        if (i > max) {\n            max <- i\n        }\n    }\n    return(max)\n\
    }", "\n\tmaxi <- l[1]\n\tfor (e in l)\n\t\tif (e > maxi)\n\t\t\tmaxi <- e\n\t\
    return(maxi)\n}\n", "\n    max <- l[1]\n    for (el in l) {\n        if (el >\
    \ max) {\n            max <- el\n        }\n    }\n    return(max)\n}\n", "\n\
    \    max(l)\n}\n", "\n  return(max(l))\n}\n", "\n  m <- l[1]\n  for (i in 2:length(l))\
    \ {\n    if (l[i] > m) m <- l[i]\n  }\n  return(m)\n}\nmax_element(c(1, 2, 3))\n\
    max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  max.el <- NULL\n\
    \  max.val <- -Inf\n  for (el in l) {\n    if (el > max.val) {\n      max.val\
    \ <- el\n      max.el <- el\n    }\n  }\n  return(max.el)\n}\n", "\n  max <- l[1]\n\
    \  for (i in 2:length(l)) {\n    if (l[i] > max) {\n      max <- l[i]\n    }\n\
    \  }\n  return(max)\n}\n\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10))\n", "\n    max(l)\n}\n", "\n    return(max(l))\n\
    }\n", "\n    max <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i] > max)\
    \ {\n            max <- l[i]\n        }\n    }\n    return(max)\n}\n", "\n   \
    \ if(length(l) == 1) {\n        return(l)\n    }\n    else if(l[1] > l[2]) {\n\
    \        return(max_element(c(l[1], l[-(1:2)])))\n    }\n    else {\n        return(max_element(c(l[2],\
    \ l[-(1:2)])))\n    }\n}\n", "\n    if (length(l) == 1) return(l[1])\n    x <-\
    \ max_element(tail(l))\n    if (x > l[1]) return(x)\n    else return(l[1])\n}\n\
    max_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n  max_element_helper(l, l[1])\n}\n\nmax_element_helper <- function(l, m) {\n\
    \  if (length(l) == 0) {\n    m\n  } else {\n    if (l[1] > m) {\n      max_element_helper(l[-1],\
    \ l[1])\n    } else {\n      max_element_helper(l[-1], m)\n    }\n  }\n}\n", "\n\
    \    max_value <- NULL\n    for (i in 1:length(l)) {\n        if (is.null(max_value)\
    \ || l[i] > max_value) {\n            max_value <- l[i]\n        }\n    }\n  \
    \  return(max_value)\n}\n", "\n    max <- l[1]\n    for (x in l) {\n        if\
    \ (x > max) {\n            max <- x\n        }\n    }\n    return(max)\n}\n",
  "\n  # Base case.\n  if (length(l) == 1) {\n    return(l)\n  }\n\n  # Recursive\
    \ case.\n  if (l[1] > l[2]) {\n    return(max_element(c(l[1], l[-(1:2)])))\n \
    \ } else {\n    return(max_element(l[-(1:2)]))\n  }\n}\nmax_element(c(1, 2, 3))\n\
    max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    max <- 0\n  \
    \  for (i in l) {\n        if (i > max) {\n            max <- i\n        }\n \
    \   }\n    return(max)\n}\n ", "\n    max(l)\n}\n", "\n    if (length(l) == 1)\
    \ {\n        return(l[1])\n    } else {\n        if (l[1] >= l[2]) {\n       \
    \     return(max_element(c(l[1], l[(2:length(l))])))\n        } else {\n     \
    \       return(max_element(c(l[2], l[(3:length(l))])))\n        }\n    }\n}\n",
  "\n    max_i <- 1\n    l_len <- length(l)\n    for (i in 2:l_len) {\n        if\
    \ (l[i] > l[max_i]) {\n            max_i <- i\n        }\n    }\n    return(l[max_i])\n\
    }\n", "\n    maximum(l)\n}\n", "\n    max <- l[1]\n    for (i in 2:length(l))\
    \ {\n        if (l[i] > max) {\n            max <- l[i]\n        }\n    }\n  \
    \  return(max)\n}\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10))\n", "\n    return(max(l))\n}", "\n  ans <- 0\n  for (i in\
    \ 1:length(l)) {\n    if (l[i] > ans) ans <- l[i]\n  }\n  return(ans)\n}\n", "\n\
    \    if (length(l) == 1) {\n        return(l[1])\n    }\n    if (l[1] > l[2])\
    \ {\n        return(max_element(c(l[1], l[-1])))\n    } else {\n        return(max_element(l[-1]))\n\
    \    }\n}\n ", "\n    max <- l[1]\n    for (i in l) {\n        if (i > max) {\n\
    \            max <- i\n        }\n    }\n    return(max)\n}\nmax_element(c(1,\
    \ 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  return(max(l))\n\
    }\n", "\n  l[which.max(l)]\n}\n", "\n    max <- l[1]\n    for (i in 2:length(l))\
    \ {\n        if (l[i] > max) {\n            max <- l[i]\n        }\n    }\n  \
    \  return(max)\n}\n", "\n  if(length(l) == 1) {\n    return(l[1])\n  } else {\n\
    \    if(l[1] > l[2]) {\n      temp <- l[1]\n      l[1] <- l[2]\n      l[2] <-\
    \ temp\n    }\n    return(max_element(l[-1]))\n  }\n}\n\nmax_element(c(1, 2, 3))\n\
    max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  max(l)\n}\nmax_element(c(1,\
    \ 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    max\
    \ <- l[1]\n    for (i in 2:length(l)) {\n        if (l[i] > max) {\n         \
    \   max <- l[i]\n        }\n    }\n    return(max)\n}\n", "\n    l[which.max(l)]\n\
    }\n", "\n  return(max(l))\n}", "\n    max <- -Inf\n    for (i in 1:length(l))\
    \ {\n        if (l[i] > max) {\n            max <- l[i]\n        }\n    }\n  \
    \  return(max)\n}\n", "\n  if (length(l) == 1) {\n    return(l)\n  }\n  else {\n\
    \    m <- max_element(l[1:length(l)-1])\n    if (l[length(l)] > m) {\n      return(l[length(l)])\n\
    \    }\n    else {\n      return(m)\n    }\n  }\n}\n", "\n\tx <- l[1]\n\tfor (i\
    \ in l) {\n\t\tif (i > x) {\n\t\t\tx <- i\n\t\t}\n\t}\n\treturn(x)\n}\n", "\n\
    \    return(max(l))\n}\n ", "\n    # TODO: YOUR CODE HERE\n    l[which.max(l)]\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
