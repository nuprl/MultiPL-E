name: HumanEval_13_greatest_common_divisor
language: r
prompt: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
  \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ngreatest_common_divisor <-\
  \ function(a, b) {"
tests: "test_humaneval <- function() {\ncandidate <- greatest_common_divisor\n   \
  \ if(!identical(candidate(3, 7), 1)){quit('no', 1)}\n    if(!identical(candidate(10,\
  \ 15), 5)){quit('no', 1)}\n    if(!identical(candidate(49, 14), 7)){quit('no', 1)}\n\
  \    if(!identical(candidate(144, 60), 12)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  \n  # YOUR CODE HERE\n  # Hint: you may want to use a for loop\
    \ to try all possible\n  # divisors\n  result = a\n  if (a < b) {\n    result\
    \ = b\n  }\n  for (i in 2:result) {\n    if (a%%i == 0 && b%%i == 0) {\n     \
    \ result = i\n    }\n  }\n  return(result)\n}\n ", "\n    if (a == 0) {\n    \
    \    return(b)\n    }\n    if (b == 0) {\n        return(a)\n    }\n    if (a\
    \ == b) {\n        return(a)\n    }\n    if (a > b) {\n        return(greatest_common_divisor(a\
    \ - b, b))\n    }\n    if (a < b) {\n        return(greatest_common_divisor(a,\
    \ b - a))\n    }\n}\n", "\n  if (a < b) {\n    a <- b\n    b <- a\n  }\n  while\
    \ (b > 0) {\n    remainder <- a %% b\n    a <- b\n    b <- remainder\n  }\n  return(a)\n\
    }\n", "\n  if (a == 0 || b == 0) return(a + b)\n  r <- a %% b\n  while (r != 0)\
    \ {\n    a <- b\n    b <- r\n    r <- a %% b\n  }\n  return(b)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  if(b == 0) {\n    a\n  } else {\n    greatest_common_divisor(b,\
    \ a %% b)\n  }\n}\n", "\n  # Replace the following line with your implementation\
    \ of the function\n  # gcd <- 1\n  gcd <- 1\n  if(a > b){\n    divisor <- b\n\
    \  }else{\n    divisor <- a\n  }\n  for(i in 1:divisor){\n    if(a %% i == 0 &\
    \ b %% i == 0){\n      gcd <- i\n    }\n  }\n  return(gcd)\n}\ngreatest_common_divisor(24,\
    \ 6)\n", "\n  if (a < b) {\n    # Need to swap (a, b)\n    a <- b\n    b <- a\n\
    \  }\n  while (b != 0) {\n    a <- a %% b\n    if (a < b) {\n      # Need to swap\
    \ (a, b)\n      a <- b\n      b <- a\n    }\n  }\n  return(a)\n}\n", "\n  if (a\
    \ < b) {\n    return(greatest_common_divisor(b, a))\n  } else if (b == 0) {\n\
    \    return(a)\n  } else {\n    return(greatest_common_divisor(b, a %% b))\n \
    \ }\n}\ngreatest_common_divisor(a, b)\n\nfib <- function(n) {\n  if (n == 0) {\n\
    \    return(0)\n  } else if (n == 1) {\n    return(1)\n  } else {\n    return(fib(n\
    \ - 1) + fib(n - 2))\n  }\n}\nfib(n)\n", "\n    if (a == 0) {\n        return(b)\n\
    \    }\n    if (b == 0) {\n        return(a)\n    }\n    if (a == b) {\n     \
    \   return(a)\n    }\n    # if a > b -> a = a % b\n    # else b = b % a\n    if\
    \ (a > b) {\n        return(greatest_common_divisor(a % b, b))\n    } else {\n\
    \        return(greatest_common_divisor(a, b % a))\n    }\n}\ngreatest_common_divisor(3,\
    \ 5)\ngreatest_common_divisor(25, 15)\n", "\n    gcd <- function(a, b) {\n   \
    \     if(b == 0) {\n            return(a)\n        } else {\n            return(gcd(b,\
    \ a%%b))\n        }\n    }\n    return(gcd(a, b))\n}\ngreatest_common_divisor(3,\
    \ 5)\ngreatest_common_divisor(25, 15)\n", "\n    if (a < b) {\n        return(greatest_common_divisor(b,\
    \ a))\n    }\n    if (b == 0) {\n        return(a)\n    }\n    return(greatest_common_divisor(b,\
    \ a %% b))\n}\n", "\n    if (a == 0) {\n        return(b)\n    }\n    return(greatest_common_divisor(b\
    \ % a, a))\n}\n", "\n  if(!is.numeric(a) || !is.numeric(b)){\n    stop(\"The input\
    \ is not a number.\")\n  }\n  while(a != b){\n    if(a > b){\n      a <- a - b\n\
    \    }else{\n      b <- b - a\n    }\n  }\n  return(a)\n}\ngreatest_common_divisor(3,\
    \ 5)\ngreatest_common_divisor(25, 15)\ngreatest_common_divisor(\"a\", \"b\")\n",
  "\n  # Insert your code here\n}\n", "\n  max(intersect(divisors(a), divisors(b)))\n\
    }\n", "\n    gcd <- function(a, b) {\n        if (b == 0) {\n            return(a)\n\
    \        } else {\n            return(gcd(b, a %% b))\n        }\n    }\n    return(gcd(a,\
    \ b))\n}\n", "\n   a <- abs(a)\n   b <- abs(b)\n   while (b > 0) {\n      a <-\
    \ a %% b\n      a <- b\n      b <- a\n   }\n   return(a)\n}\n", "\n    if (a ==\
    \ 0 || b == 0) {\n        return(0)\n    }\n    if (a < b) {\n        return(greatest_common_divisor(b,\
    \ a))\n    }\n    while (a > b) {\n        a <- a %% b\n    }\n    return(a)\n\
    }\n", "\n  if (a < b) {\n    smallest <- a\n    largest <- b\n  } else {\n   \
    \ smallest <- b\n    largest <- a\n  }\n  for (i in seq(smallest, 1, -1)) {\n\
    \    if (largest %% i == 0 && smallest %% i == 0) {\n      return(i)\n    }\n\
    \  }\n}\n", "\n    # *** YOUR CODE HERE ***\n    if (a == 0) {\n        return(b)\n\
    \    }\n    if (b == 0) {\n        return(a)\n    }\n    return(greatest_common_divisor(b,\
    \ a %% b))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
