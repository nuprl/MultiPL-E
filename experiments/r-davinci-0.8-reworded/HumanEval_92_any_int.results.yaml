name: HumanEval_92_any_int
language: r
results:
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    ## Function code goes\
    \ here\n}\n\ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    # return (all(is.integer(x,\
    \ y, z)) && x + y == z) || (all(is.integer(x, y, z)) && x + z == y) || (all(is.integer(x,\
    \ y, z)) && y + z == x)\n    # return (is.integer(x) && is.integer(y) && is.integer(z))\
    \ && (x + y == z || x + z == y || y + z == x)\n    # all(is.integer(x, y, z))\
    \ && \n    return x + y == z || x + z == y || y + z == x\n}\ntest_humaneval <-\
    \ function() {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1.5,\
    \ 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 6, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.2,\
    \ 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4, 6, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3,\
    \ 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError: unexpected symbol in:\\n\"    # all(is.integer(x, y, z)) && \\n\
    \    return x\"\\nExecution halted\\n'"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if (!is.integer(x) | !is.integer(y)\
    \ | !is.integer(z)) {\n    return(FALSE)\n  }\n  if (x == (y + z) | y == (x +\
    \ z) | z == (x + y)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_that(\"\
    any_int returns TRUE for integer inputs with x = sum of others\", {\n  expect_true(any_int(5,\
    \ 2, 7))\n})\n\ntest_that(\"any_int returns TRUE for integer inputs with y = sum\
    \ of others\", {\n  expect_true(any_int(3, 2, 2))\n})\n\ntest_that(\"any_int returns\
    \ TRUE for integer inputs with z = sum of others\", {\n  expect_true(any_int(3,\
    \ -2, 1))\n})\n\ntest_that(\"any_int returns FALSE for integer inputs with no\
    \ x + y == z\", {\n  expect_false(any_int(3, 2, 1))\n})\n\ntest_that(\"any_int\
    \ returns FALSE for integer inputs with x > sum of others\", {\n  expect_false(any_int(3,\
    \ 2, -1))\n})\n\ntest_that(\"any_int returns FALSE for integer inputs with y >\
    \ sum of others\", {\n  expect_false(any_int(2, 3, -1))\n})\n\ntest_that(\"any_int\
    \ returns FALSE for integer inputs with z > sum of others\", {\n  expect_false(any_int(2,\
    \ -1, 3))\n})\n\ntest_that(\"any_int returns FALSE for non-integer inputs\", {\n\
    \  expect_false(any_int(2.2, 2, 1))\n  expect_false(any_int(2, 2.2, 1))\n  expect_false(any_int(2,\
    \ 2, 1.2))\n})\n\ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in test_that(\"any_int returns TRUE for integer inputs with x = sum\
    \ of others\",  : \\n  could not find function \"test_that\"\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    if(all(is.integer(x),\
    \ is.integer(y), is.integer(z))) {\n        if(any(x == (y + z), y == (x + z),\
    \ z == (x + y))) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n\
    \        }\n    } else {\n        return(FALSE)\n    }\n}\nany_int(5, 2, 7)\n\
    any_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n\ntest_humaneval <-\
    \ function() {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1.5,\
    \ 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 6, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.2,\
    \ 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4, 6, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3,\
    \ 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] FALSE\n[1] FALSE\n[1] FALSE\n[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    if (is.integer(x) &&\
    \ is.integer(y) && is.integer(z)) {\n        if (x == y + z | y == x + z | z ==\
    \ x + y) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n\
    \        }\n    } else {\n        return(FALSE)\n    }\n}\ntest_humaneval <- function()\
    \ {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1.5,\
    \ 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 6, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.2,\
    \ 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4, 6, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3,\
    \ 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if (isTRUE(any(is.integer(x,\
    \ y, z)))) {\n    if (x == y + z | y == x + z | z == x + y) {\n      return (TRUE)\n\
    \    } else {\n      return (FALSE)\n    }\n  } else {\n    return (FALSE)\n \
    \ }\n}\nany_int(3, -2, 1)\n\ntest_humaneval <- function() {\ncandidate <- any_int\n\
    \    if(!identical(candidate(2, 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4,\
    \ 2, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in is.integer(x, y, z) : \\n  3 arguments passed to \\'is.integer\\\
    ' which requires 1\\nCalls: any_int -> isTRUE\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    if(x == y + z | y ==\
    \ x + z | z == x + y){\n        return(TRUE)\n    }\n    else{\n        return(FALSE)\n\
    \    }\n}\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] FALSE\n[1] TRUE\n[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    if (x + y == z) {\n \
    \       return(TRUE)\n    } else if (x + z == y) {\n        return(TRUE)\n   \
    \ } else if (y + z == x) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\nany_int(2, 5, 7)\n\ntest_humaneval <- function() {\ncandidate <- any_int\n\
    \    if(!identical(candidate(2, 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5,\
    \ 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4,\
    \ 2, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] TRUE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    if (x == y + z | y ==\
    \ x + z | z == x + y) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if (is.integer(x) == TRUE\
    \ & is.integer(y) == TRUE & is.integer(z) == TRUE) {\n    if (x == y + z | y ==\
    \ x + z | z == x + y) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1.5,\
    \ 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 6, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.2,\
    \ 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4, 6, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3,\
    \ 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    any(x, y, z)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nWarning messages:\\n1: In any(x, y, z) : coercing argument of type \\'double\\\
    ' to logical\\n2: In any(x, y, z) : coercing argument of type \\'double\\' to\
    \ logical\\n'"
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if (((x == y + z) | (y\
    \ == x + z) | (z == x + y)) & all(is.integer(c(x, y, z)))) {\n    print(\"TRUE\"\
    )\n  } else {\n    print(\"FALSE\")\n  }\n}\n\ntest_humaneval <- function() {\n\
    candidate <- any_int\n    if(!identical(candidate(2, 3, 1), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1.5,\
    \ 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 6, 2), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.2,\
    \ 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4, 6, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3,\
    \ 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] "FALSE"\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    (x == y + z | y == x\
    \ + z | z == x + y) & is.integer(x) & is.integer(y) & is.integer(z)\n}\nany_int(5,\
    \ 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] FALSE\n[1] FALSE\n[1] FALSE\n[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    if (((x == y + z) | (y\
    \ == x + z) | (z == x + y)) & is.integer(x) & is.integer(y) & is.integer(z)) {\n\
    \        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n \ntest_humaneval\
    \ <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  stopifnot(is.numeric(x),\
    \ is.numeric(y), is.numeric(z))\n  if (all(is.integer(x), is.integer(y), is.integer(z)))\
    \ {\n    if (x == y + z || y == x + z || z == x + y) {\n      return(TRUE)\n \
    \   } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\ntest_that(\"any_int works correctly\", {\n  expect_true(any_int(5, 2, 7))\n\
    \  expect_false(any_int(3, 2, 2))\n  expect_true(any_int(3, -2, 1))\n  expect_false(any_int(3.6,\
    \ -2.2, 2))\n})\n\ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in test_that(\"any_int works correctly\", { : \\n  could not find\
    \ function \"test_that\"\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n\tif ((x == y + z) || (y\
    \ == x + z) || (z == x + y)) {\n\t\treturn (TRUE)\n\t} else {\n\t\treturn (FALSE)\n\
    \t}\n}\n\ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if(any(!is.integer(c(x,\
    \ y, z)))) {\n    return(FALSE)\n  }\n  else if(x == (y + z) | y == (x + z) |\
    \ z == (x + y)) {\n    return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\n\
    \nany_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n\
    \ \ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] FALSE\n[1] FALSE\n[1] FALSE\n[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n    if(!is.integer(x) | !is.integer(y)\
    \ | !is.integer(z)) {\n        return(FALSE)\n    }\n    if(x == (y + z) | y ==\
    \ (x + z) | z == (x + y)) {\n        return(TRUE)\n    }\n    return(FALSE)\n\
    }\ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if (all(is.integer(x),\
    \ is.integer(y), is.integer(z))) {\n    return(ifelse(\n      x == y + z | y ==\
    \ x + z | z == x + y,\n      TRUE,\n      FALSE\n    ))\n  } else {\n    return(FALSE)\n\
    \  }\n}\nany_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2,\
    \ 2)\n\ntest_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
    \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] FALSE\n[1] FALSE\n[1] FALSE\n[1] FALSE\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n\
    # >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6,\
    \ -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  is.integer(x) & is.integer(y)\
    \ & is.integer(z) & ( (x == y + z) | (y == x + z) | (z == x + y) )\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2, 3, 1),\
    \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(-4, 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
    \ 1, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(3.0, 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
