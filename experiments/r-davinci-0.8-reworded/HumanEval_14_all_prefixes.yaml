name: HumanEval_14_all_prefixes
language: r
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes('abc')\n# c('a', 'ab', 'abc')\nall_prefixes <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- all_prefixes\n    if(!identical(candidate(''),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate('asdfgh'), c('a', 'as', 'asd',\
  \ 'asdf', 'asdfg', 'asdfgh'))){quit('no', 1)}\n    if(!identical(candidate('WWW'),\
  \ c('W', 'WW', 'WWW'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    prefixes <- stringr::str_split(string, '')[[1]]\n    sapply(1:length(prefixes),\
    \ function(i) stringr::str_c(prefixes[1:i], collapse = ''))\n}\n", "\n  lapply(1:nchar(string),\
    \ function(i) substr(string, 1, i))\n}\n", "\n  idx <- seq_len(nchar(string))\n\
    \  substring(string, start = idx, stop = nchar(string))\n}\n", "\n  parts <- stringr::str_split(string,\
    \ '')[[1]]\n  prefixes <- sapply(1:length(parts),\n                     function(i)\
    \ stringr::str_c(parts[1:i], collapse = ''))\n  prefixes\n}\n", "\n  seq_len(nchar(string))\
    \ %>%\n    sapply(string, substring, 1)\n}\n", "\n  return(\n    unlist(lapply(seq_along(string),\
    \ function(i) substr(string, 1, i)))\n  )\n}\n", "\n  head(rev(strsplit(string,\
    \ \"\")[[1]]), -1)\n}\n", "\n    return(sapply(seq_along(string), function(i)\
    \ substr(string, 1, i)))\n}", "\n    str_seq <- seq_len(str_length(string))\n\
    \    (str_sub(string, start = 1, end = str_seq))\n}", "\n  cat(sub(string, regexpr(pattern\
    \ = '^', string), ''), sep = '\\n')\n}\n\nall_prefixes('abc')", "\n  pfx <- setdiff(substr(string,1,1:nchar(string)),string)\n\
    \  return(c(pfx,string))\n}\n", "\n  stopifnot(is.character(string))\n  stopifnot(nchar(string)\
    \ > 0)\n  prefixes <- vector(mode = 'character', length = nchar(string))\n  for\
    \ (i in seq_along(string)) {\n    prefixes[i] <- substr(string, 1, i)\n  }\n \
    \ prefixes\n}\n", "\n  i <- seq_along(string)\n  sapply(i, function(x) string[1:x])\n\
    }\n", "\n    if (length(string) == 0) {\n        c()\n    } else {\n        c(string,\
    \ all_prefixes(substr(string, 1, nchar(string) - 1)))\n    }\n}\n", "\n  if (missing(string))\
    \ stop('missing string argument')\n  if (!is.character(string)) stop('string argument\
    \ must be a character')\n  if (length(string) != 1) stop('string argument must\
    \ be length 1')\n  string <- paste0(string, collapse = '')\n  lapply(1:nchar(string),\
    \ function(n) substr(string, 1, n))\n}\n</code>\n", "\n  prefixes <- unlist(lapply(1:nchar(string),\n\
    \                            function(i) substring(string, 1, i)))\n  prefixes[order(nchar(prefixes))]\n\
    }\n", "\n    unlist(lapply(seq_along(string), function(n) string[1:n]))\n}\n",
  "\n  if(nchar(string) == 0) {\n    return(character(0))\n  }\n  unlist(lapply(seq_len(nchar(string)),\
    \ function(x) substr(string, start = 1, stop = x)))\n}\n", "\n  char_vec <- unlist(strsplit(string,\
    \ ''))\n  char_vec <- char_vec[seq_along(char_vec)]\n  char_vec <- paste(char_vec,\
    \ collapse='')\n  return(char_vec)\n}\n", "\n  lapply(1:nchar(string), substr,\
    \ x = string, 1)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
