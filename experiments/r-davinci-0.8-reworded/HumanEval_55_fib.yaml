name: HumanEval_55_fib
language: r
prompt: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n\
  # >>> fib(8)\n# 21\nfib <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- fib\n    if(!identical(candidate(10),\
  \ 55)){quit('no', 1)}\n    if(!identical(candidate(1), 1)){quit('no', 1)}\n    if(!identical(candidate(8),\
  \ 21)){quit('no', 1)}\n    if(!identical(candidate(11), 89)){quit('no', 1)}\n  \
  \  if(!identical(candidate(12), 144)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(n == 1) return(1)\n  if(n == 2) return(1)\n  if(n > 2) return(fib(n-1)\
    \ + fib(n-2))\n}\n", "\n    if (n == 1) {\n        return(1)\n    } else if (n\
    \ == 2) {\n        return(1)\n    } else {\n        return(fib(n-1) + fib(n-2))\n\
    \    }\n}\n ", "\n    if (n <= 1) {\n        return(n)\n    } else {\n       \
    \ return(fib(n-1) + fib(n-2))\n    }\n}\nprint(fib(10))\nprint(fib(1))\nprint(fib(8))\n",
  "\n    if (n == 1) {\n        return(1)\n    } else if (n == 2) {\n        return(1)\n\
    \    } else {\n        return(fib(n-1) + fib(n-2))\n    }\n}\n", "\n  if (n <=\
    \ 2) {\n    return(1)\n  } else {\n    return(fib(n-1) + fib(n-2))\n  }\n}\nfib(10)\n",
  "\n   if (n <= 2)\n     1\n   else\n     fib(n - 1) + fib(n - 2)\n}\n\nfib(10)\n\
    \nfib(1)\n\nfib(8)", "\n  fib_c(n)\n}\n ", "\n    seq <- c(1,1)\n    for (i in\
    \ 3:n) {\n        seq <- c(seq,seq[i-1]+seq[i-2])\n    }\n    return(seq[n])\n\
    }\n", "\n  if (n == 1) {\n    return(1)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fib(n-1) + fib(n-2))\n  }\n}\n", "\n  if (n <= 2) {\n\
    \    return(1)\n  } else {\n    return(fib(n-1) + fib(n-2))\n  }\n}", "\n    if\
    \ (n <= 1) {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n\
    }\n", "\n    if(n <= 2) return(1)\n    return(fib(n-1) + fib(n-2))\n}\n", "\n\
    \  if (n < 2)\n    return(n)\n  else\n    return(fib(n - 1) + fib(n - 2))\n}\n",
  "\n  n <- n - 1\n  x <- c(0, 1)\n  while (n > 0) {\n    x <- c(x[2], sum(x))\n \
    \   n <- n - 1\n  }\n  x[2]\n}\n", "\n    if (n == 1) {\n        return(1)\n \
    \   } else if (n == 2) {\n        return(1)\n    } else {\n        return(fib(n-1)\
    \ + fib(n-2))\n    }\n}\n", "\n    x <- c(1, 1)\n    for (i in 3:n) {\n      \
    \  x <- c(x, sum(x[length(x)]))\n        x <- x[-1]\n    }\n    x[n]\n}\n", "\n\
    \  # Need to add code here\n  if (n == 1) return(1)\n  if (n == 2) return(1)\n\
    \  fib(n-1) + fib(n-2)\n}\n", "\n        if (n <= 1) {\n                return(n)\n\
    \        }\n        return(fib(n-1) + fib(n-2))\n}\n", "\n    # write your code\
    \ here\n    fibo <- c(1,1)\n    for (i in 3:n) {\n        fibo[i] <- fibo[i-1]\
    \ + fibo[i-2]\n    }\n    return(fibo[n])\n}\n", "\n  n <- n - 1\n  f <- c(0,\
    \ 1)\n  i <- 1\n  while (i <= n) {\n    i <- i + 1\n    f[i] <- f[i - 1] + f[i\
    \ - 2]\n  }\n  return(f[i])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
