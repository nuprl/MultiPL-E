name: HumanEval_23_strlen
language: r
prompt: "# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n\
  # 3\nstrlen <- function(string) {"
tests: "test_humaneval <- function() {\ncandidate <- strlen\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('x'), 1)){quit('no', 1)}\n   \
  \ if(!identical(candidate('asdasnakj'), 9)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(string == '') {\n    return(0)\n  } else {\n    strlen(substr(string,\
    \ 2,nchar(string))) + 1\n  }\n}\n", "\n  string <- as.character(string)\n  return(nchar(string))\n\
    }", "\n    count <- 0\n    for (i in 1:nchar(string)) {\n        count <- count\
    \ + 1\n    }\n    return(count)\n}\n", "\n    return(nchar(string))\n}", "\n \
    \ nchar(string)\n}\n", "\n    nchar(string)\n}\n", "\n    string = as.character(string)\n\
    \    len = 0\n    if (string == \"\") {\n        return(len)\n    }\n    for (character\
    \ in string) {\n        len = len + 1\n    }\n    return(len)\n}\n", "\n    if\
    \ (is.null(string)) {\n        return(0)\n    }\n    else {\n        return(1\
    \ + strlen(substr(string, 2, nchar(string))))\n    }\n}", "\n    length(unlist(strsplit(string,\
    \ \"\")))\n}\n", "\n  nchar(string)\n}\n", "\n  return(nchar(string))\n}\nstrlen('')\n\
    strlen('abc')\n", "\n    # YOUR CODE HERE\n}\n", "\n  stopifnot(is.character(string))\n\
    \  nchar(string)\n}\n", "\n  strsplit(string, '')[[1]] %>%\n    length\n}\n",
  "\n    if (is.na(string)) {\n        return(NA)\n    }\n    return(nchar(string))\n\
    }\n", "\n    string.size <- nchar(string)\n    string.size\n}\n", "\n  return\
    \ (nchar(string))\n}\n", "\n    # YOUR CODE HERE\n    length(string)\n}\n", "\n\
    \    stopifnot(typeof(string) == 'character', length(string) == 1)\n    nchar(string)\n\
    }\n", "\n  nchar(string)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
