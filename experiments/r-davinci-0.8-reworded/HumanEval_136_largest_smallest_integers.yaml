name: HumanEval_136_largest_smallest_integers
language: r
prompt: "# Create a function that returns a list (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as NULL.\n# Examples:\n\
  # >>> largest_smallest_integers(c(2, 4, 1, 3, 5, 7))\n# c(NULL, 1)\n# >>> largest_smallest_integers(c())\n\
  # c(NULL, NULL)\n# >>> largest_smallest_integers(c(0))\n# c(NULL, NULL)\nlargest_smallest_integers\
  \ <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- largest_smallest_integers\n \
  \   if(!identical(candidate(c(2, 4, 1, 3, 5, 7)), c(NULL, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(2, 4, 1, 3, 5, 7, 0)), c(NULL, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 3, 2, 4, 5, 6, -2)), c(-2, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(4, 5, 3, 6, 2, 7, -7)), c(-7, 2))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(7, 3, 8, 4, 9, 2, 5, -9)), c(-9, 2))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c()), c(NULL, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(0)),\
  \ c(NULL, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(-1, -3, -5, -6)),\
  \ c(-1, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(-1, -3, -5, -6, 0)),\
  \ c(-1, NULL))){quit('no', 1)}\n    if(!identical(candidate(c(-6, -4, -4, -3, 1)),\
  \ c(-3, 1))){quit('no', 1)}\n    if(!identical(candidate(c(-6, -4, -4, -3, -100,\
  \ 1)), c(-3, 1))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n\tresult = c(NULL, NULL)\n\tif (length(lst) == 0) {\n\t\treturn(result)\n\
    \t}\n\ta = b = -1\n\tfor (item in lst) {\n\t\tif (item < 0) {\n\t\t\tif (a ==\
    \ -1 || item > a) {\n\t\t\t\ta = item\n\t\t\t}\n\t\t} else {\n\t\t\tif (b == -1\
    \ || item < b) {\n\t\t\t\tb = item\n\t\t\t}\n\t\t}\n\t}\n\tif (a == -1) {\n\t\t\
    result[1] = NULL\n\t} else {\n\t\tresult[1] = a\n\t}\n\tif (b == -1) {\n\t\tresult[2]\
    \ = NULL\n\t} else {\n\t\tresult[2] = b\n\t}\n\treturn(result)\n}\n\nlst1 = c(2,\
    \ 4, 1, 3, 5, 7)\nlst2 = c()\nlst3 = c(0)\nlst4 = c(-1, -2, -3, -4, 4, 3, 2, 1)\n\
    lst5 = c(-1, -2, -3, -4, 4, 3, 2, 1, 0)\nlst6 = c(3, 2, 1, -1, -2, -3, -4, 4,\
    \ 3, 2, 1)\nlst7 = c(-1, -2, -3, -4, 0, 1, 2, 3, 4)\n\nprint(largest_smallest_integers(lst1))\n\
    print(largest_smallest_integers(lst2))\nprint(largest_smallest_integers(lst3))\n\
    print(largest_smallest_integers(lst4))\nprint(largest_smallest_integers(lst5))\n\
    print(largest_smallest_integers(lst6))\nprint(largest_smallest_integers(lst7))",
  "\n  has_pos <- FALSE\n  has_neg <- FALSE\n  largest_neg <- NA\n  smallest_pos <-\
    \ NA\n  for (i in lst) {\n    if (i < 0) {\n      if (has_neg == FALSE) {\n  \
    \      largest_neg <- i\n        has_neg <- TRUE\n      } else {\n        if (i\
    \ > largest_neg) {\n          largest_neg <- i\n        }\n      }\n    } else\
    \ if (i > 0) {\n      if (has_pos == FALSE) {\n        smallest_pos <- i\n   \
    \     has_pos <- TRUE\n      } else {\n        if (i < smallest_pos) {\n     \
    \     smallest_pos <- i\n        }\n      }\n    }\n  }\n  if (has_neg == FALSE)\
    \ {\n    largest_neg <- NULL\n  }\n  if (has_pos == FALSE) {\n    smallest_pos\
    \ <- NULL\n  }\n  return(c(largest_neg, smallest_pos))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  largest_neg <- NULL\n  smallest_pos\
    \ <- NULL\n  for (i in lst) {\n    if (i < 0) {\n      if (is.null(largest_neg))\
    \ {\n        largest_neg <- i\n      } else if (i > largest_neg) {\n        largest_neg\
    \ <- i\n      }\n    } else if (i > 0) {\n      if (is.null(smallest_pos)) {\n\
    \        smallest_pos <- i\n      } else if (i < smallest_pos) {\n        smallest_pos\
    \ <- i\n      }\n    }\n  }\n  return(c(largest_neg, smallest_pos))\n}\n", "\n\
    \  neg_and_pos <- unique(sort(lst[lst != 0], decreasing = T))\n  neg <- neg_and_pos[neg_and_pos\
    \ < 0]\n  pos <- neg_and_pos[neg_and_pos > 0]\n  if (length(neg) == 0 | length(pos)\
    \ == 0) {\n    neg_and_pos <- c(NULL, NULL)\n  } else {\n    neg_and_pos <- c(neg[1],\
    \ pos[1])\n  }\n  return(neg_and_pos)\n}\n", "\n  # Empty list\n  if (length(lst)\
    \ == 0) return(c(NULL, NULL))\n  # Singleton list\n  if (length(lst) == 1 && lst[1]\
    \ == 0) return(c(NULL, NULL))\n  # List of all positive integers\n  if (length(lst)\
    \ == 1 && lst[1] > 0) return(c(NULL, lst[1]))\n  # List of all negative integers\n\
    \  if (length(lst) == 1 && lst[1] < 0) return(c(lst[1], NULL))\n  # Standard cases\n\
    \  max_neg <- min(lst[lst < 0])\n  min_pos <- max(lst[lst > 0])\n  return(c(max_neg,\
    \ min_pos))\n}\n \nlargest_smallest_integers(c())\nlargest_smallest_integers(c(0))\n\
    largest_smallest_integers(c(2, 4, 1, 3, 5, 7))\nlargest_smallest_integers(c(-1,\
    \ -2, -3, -4, -5))\nlargest_smallest_integers(c(1, 2, 3, 4, 5))\nlargest_smallest_integers(c(-1,\
    \ 2, -3, 4, -5))\n", "\n\tnegs <- filter(lst, function(x) x < 0)\n\tposs <- filter(lst,\
    \ function(x) x > 0)\n\tna_replace(c(max(negs), min(poss)), NULL)\n}", "\n\tnegative_integers\
    \ <- lst[lst < 0]\n\tpositive_integers <- lst[lst > 0]\n\tlargest_negative_integer\
    \ <- max(negative_integers, na.rm = TRUE)\n\tsmallest_positive_integer <- min(positive_integers,\
    \ na.rm = TRUE)\n\treturn(c(largest_negative_integer, smallest_positive_integer))\n\
    }\n", "\n    negatives <- 0\n    positives <- 0\n    for (i in lst) {\n      \
    \  if (i < 0) {\n            negatives <- i\n        }\n        if (i > 0) {\n\
    \            positives <- i\n        }\n    }\n    if (negatives == 0 | positives\
    \ == 0) {\n        return(c(NULL, NULL))\n    }\n    return(c(negatives, positives))\n\
    }\nprint(largest_smallest_integers(c(2, 4, 1, 3, 5, 7)))\nprint(largest_smallest_integers(c()))\n\
    print(largest_smallest_integers(c(0)))\n ", "\n  if (length(lst) > 0) {\n    s\
    \ <- NULL\n    l <- NULL\n    for (i in lst) {\n      if (i > 0) {\n        if\
    \ (is.null(s) || i < s) {\n          s <- i\n        }\n      } else if (i < 0)\
    \ {\n        if (is.null(l) || i > l) {\n          l <- i\n        }\n      }\n\
    \    }\n    return(c(l, s))\n  } else {\n    return(c(NULL, NULL))\n  }\n}\n",
  "\n  largest <- NULL\n  smallest <- NULL\n  for (i in lst) {\n    if (i < 0) {\n\
    \      if (is.null(largest)) {\n        largest <- i\n      } else if (i > largest)\
    \ {\n        largest <- i\n      }\n    } else if (i > 0) {\n      if (is.null(smallest))\
    \ {\n        smallest <- i\n      } else if (i < smallest) {\n        smallest\
    \ <- i\n      }\n    }\n  }\n  return(c(largest, smallest))\n}\n", "\n  if (length(lst)\
    \ == 0) {\n    return(c(NULL, NULL))\n  }\n  negatives <- c()\n  positives <-\
    \ c()\n  for (x in lst) {\n    if (x < 0) {\n      negatives <- c(negatives, x)\n\
    \    } else if (x > 0) {\n      positives <- c(positives, x)\n    }\n  }\n  if\
    \ (length(negatives) == 0) {\n    return(c(NULL, min(positives)))\n  } else if\
    \ (length(positives) == 0) {\n    return(c(max(negatives), NULL))\n  } else {\n\
    \    return(c(max(negatives), min(positives)))\n  }\n}\nlargest_smallest_integers(c(2,\
    \ 4, 1, 3, 5, 7))\nlargest_smallest_integers(c())\nlargest_smallest_integers(c(0))\n",
  "\n  largest_neg <- min(lst[lst < 0])\n  smallest_pos <- max(lst[lst > 0])\n  if\
    \ (is.na(largest_neg)) largest_neg <- NULL\n  if (is.na(smallest_pos)) smallest_pos\
    \ <- NULL\n  c(largest_neg, smallest_pos)\n}\n", "\n  pos_vec <- c()\n  neg_vec\
    \ <- c()\n  for (i in lst) {\n    if (i > 0) {\n      pos_vec <- c(pos_vec, i)\n\
    \    } else if (i < 0) {\n      neg_vec <- c(neg_vec, i)\n    }\n  }\n  if (length(pos_vec)\
    \ == 0) {\n    pos_vec <- NULL\n  }\n  if (length(neg_vec) == 0) {\n    neg_vec\
    \ <- NULL\n  }\n  return(c(max(neg_vec), min(pos_vec)))\n}\n\nlargest_smallest_integers(c(2,\
    \ 4, 1, 3, 5, 7))\nlargest_smallest_integers(c())\nlargest_smallest_integers(c(0))\n",
  "\n  min_pos <- min(lst[lst > 0])\n  max_neg <- max(lst[lst < 0])\n  out <- c(max_neg,\
    \ min_pos)\n  out[is.na(out)] <- NULL\n  return(out)\n}\n", "\n  # Your code goes\
    \ here!\n  largest = NULL\n  smallest = NULL\n  i = 1\n  while (i <= length(lst))\
    \ {\n    if (lst[i] < 0) {\n      if (is.null(largest)) {\n        largest = lst[i]\n\
    \      } else {\n        if (lst[i] > largest) {\n          largest = lst[i]\n\
    \        }\n      }\n    } else if (lst[i] > 0) {\n      if (is.null(smallest))\
    \ {\n        smallest = lst[i]\n      } else {\n        if (lst[i] < smallest)\
    \ {\n          smallest = lst[i]\n        }\n      }\n    }\n    i = i + 1\n \
    \ }\n  c(largest, smallest)\n}\n", "\n    max_neg <- NULL\n    min_pos <- NULL\n\
    \    if(is.null(lst)) {\n        return(c(NULL, NULL))\n    }\n    for(i in lst)\
    \ {\n        if(i < 0) {\n            if(is.null(max_neg)) {\n               \
    \ max_neg <- i\n            } else {\n                if(i > max_neg) {\n    \
    \                max_neg <- i\n                }\n            }\n        } else\
    \ if(i > 0) {\n            if(is.null(min_pos)) {\n                min_pos <-\
    \ i\n            } else {\n                if(i < min_pos) {\n               \
    \     min_pos <- i\n                }\n            }\n        }\n    }\n    return(c(max_neg,\
    \ min_pos))\n}", "\n  positive = lst[which(lst>0)]\n  negative = lst[which(lst<0)]\n\
    \  return(c(max(negative), min(positive)))\n}\n", "\n    largest = NULL\n    smallest\
    \ = NULL\n    for (i in lst) {\n        if (i > 0) {\n            if (is.null(smallest)\
    \ || i < smallest) {\n                smallest = i\n            }\n        } else\
    \ if (i < 0) {\n            if (is.null(largest) || i > largest) {\n         \
    \       largest = i\n            }\n        }\n    }\n    return(c(largest, smallest))\n\
    }\n", "\n  # Paste the name of the largest negative integer variable\n  # in place\
    \ of `NULL` in the line below:\n  largest_negative_integer <- NULL\n  # Paste\
    \ the name of the smallest positive integer variable\n  # in place of `NULL` in\
    \ the line below:\n  smallest_positive_integer <- NULL\n  return(c(largest_negative_integer,\
    \ smallest_positive_integer))\n}", "\n  # YOUR CODE HERE\n  positive = which(lst>0)\n\
    \  negative = which(lst<0)\n  if(length(positive)==0 & length(negative)==0){\n\
    \    return(c(NULL,NULL))\n  }\n  if(length(positive)==0){\n    return(c(min(lst[negative]),NULL))\n\
    \  }\n  if(length(negative)==0){\n    return(c(NULL,max(lst[positive])))\n  }\n\
    \  return(c(min(lst[negative]),max(lst[positive])))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
