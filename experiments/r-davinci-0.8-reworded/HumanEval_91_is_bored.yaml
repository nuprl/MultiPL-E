name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n\
  # 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  # 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # Write your code here.\n  boredoms <- 0\n  split_sentences <-\
    \ strsplit(S, \"\\\\.\")\n  for (sentence in split_sentences[[1]]) {\n    if (substring(sentence,\
    \ 1, 2) == \"I \") {\n      boredoms <- boredoms + 1\n    }\n  }\n  return(boredoms)\n\
    }\nS = \"The sky is blue. The sun is shining. I love this weather.\"\nis_bored(S)\n",
  "\n  # Your code here\n}\n ", "\n  tokens <- strsplit(S, \"[!\\\\.\\\\?]\")[[1]]\n\
    \  length(which(tokens[-length(tokens)] == \"I\"))\n}\n", "\n    # Split the string\
    \ into a list of sentences\n    sentences <- unlist(strsplit(S, \"\\\\.|\\\\?|!\"\
    ))\n    # Count the number of sentences that begin with 'I'\n    sum(sapply(sentences,\
    \ grepl, pattern=\"^I \"))\n}\n\ntest_that(\"is_bored correctly identifies sentences\
    \ starting with 'I'\", {\n    expect_equal(is_bored(\"Hello world\"), 0)\n   \
    \ expect_equal(is_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    ), 1)\n    expect_equal(is_bored(\"I love you. You love me.\"), 2)\n})\n", "\n\
    \  # TODO your code here!\n}\n", "\n  # remove punctuation and split into words\n\
    \  S_clean <- unlist(strsplit(gsub(\"[^[:alnum:][:space:]]\", \"\", S), split\
    \ = \" \"))\n  # count the number of words that are \"I\"\n  sum(S_clean == \"\
    I\")\n}\n", "\n    # Total sentences\n    t_sent <- length(strsplit(gsub(\"[.?!]\"\
    , \".\", S), \" \")[[1]])\n    # Bored sentences\n    b_sent <- length(strsplit(gsub(\"\
    [.?!]\", \".\", S[grepl(\"I \", S)]), \" \")[[1]])\n    return(t_sent - b_sent)\n\
    }\n", "\n  sentences <- unlist(strsplit(S, '[.?!]'))\n  return(sum(grepl('^\\\\\
    s*I', sentences)))\n}\n ", "\n  # the total number of boredoms is the number of\
    \ words\n  # that follow 'I' and are delimited by '.', '?' or '!'\n  # use strsplit\
    \ to split the sentence into words, then sum the\n  # number of words following\
    \ 'I'\n  sum(cumsum(strsplit(S, \"[.?!]\")[[1]] == \"I\") > 0)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  patterns <- c(\"(.+)\\\\.\\\\s*([Ii]\\\\s+.+)\",\n            \
    \    \"(.+)\\\\?\\\\s*([Ii]\\\\s+.+)\",\n                \"(.+)\\\\!\\\\s*([Ii]\\\
    \\s+.+)\")\n  sum(grepl(patterns, S))\n}\n", "\n  # YOUR CODE HERE\n  S = strsplit(S,\
    \ \"\\\\.|\\\\?|\\\\!\")\n  S = unlist(S)\n  is_bored = c()\n  for (i in S) {\n\
    \    if (substr(i, 1, 1) == \"I\") {\n      is_bored = c(is_bored, 1)\n    }\n\
    \  }\n  return(sum(is_bored))\n}\n", "\n  # YOUR CODE HERE\n  return (length(grep(\"\
    ^I\",strsplit(S,\"\\\\.\")[[1]])))\n}\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n", "\n    # YOUR CODE HERE\n    count <- 0\n\
    \    if (length(regexpr(\"I\", S)) > 0) {\n      count <- count + 1\n    }\n \
    \   return(count)\n}\n", "\n    S <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n   \
    \ # [1] \"The sky is blue\" \" The sun is shining\" \" I love this weather\"\n\
    \n    S <- gsub(\"^ \", \"\", S)\n    # [1] \"The sky is blue\" \"The sun is shining\"\
    \ \"I love this weather\"\n\n    S <- gsub(\" I \", \" I\", S)\n    # [1] \"The\
    \ sky is blue\" \"The sun is shining\" \"I love this weather\"\n\n    boredoms\
    \ <- ifelse(grepl(\"^I\", S), 1, 0)\n    # [1] 0 0 1\n\n    sum(boredoms)\n}\n",
  "\n  return(count(strsplit(S, \"[.!?]\")[[1]], function(x) startsWith(x, \"I\")))\n\
    }\nis_bored('Hello world')\n\nis_bored('The sky is blue. The sun is shining. I\
    \ love this weather')\n\nis_bored('I should buy a new car. I really like my old\
    \ car. I have an old car. I have a new car')\n\nis_bored('I like apples. I like\
    \ pears. I like apples and pears. I like apples and pears and bananas')\n\nis_bored('The\
    \ sky is blue. The sun is shining. I love this weather. I love London')\n\nis_bored('I\
    \ like apples, pears and bananas')\n", "\n  # First, break the string into sentences.\n\
    \  S <- strsplit(S, split = '[.?!]')\n  # Second, count the number of sentences\
    \ that start with 'I'.\n  sum(startsWith(S, 'I '))\n}\n ", "\n  stringr::str_count(S,\
    \ \"^I\\\\s|\\\\?\\\\sI\\\\s|\\\\.\\\\sI\\\\s|\\\\!\\\\sI\\\\s\")\n}\n", "\n \
    \ length(gregexpr(\"^I\", unlist(strsplit(S, \"[!?.]\")))[[1]])\n}\n", "\n   \
    \ S <- tolower(S)\n    S <- gsub(\"\\\\p{Punct}\", \" \", S)\n    S <- gsub(\"\
    \ +\", \" \", S)\n    S <- gsub(\"^ \", \"\", S)\n    S <- gsub(\" $\", \"\",\
    \ S)\n    S <- unlist(strsplit(S, \" \"))\n    return(sum(S == \"i\"))\n}\n",
  "\n    words <- strsplit(S, \"[,\\\\s]+\")[[1]]\n    words <- words[words != \"\"\
    ]\n    return(sum(startsWith(words, \"I\")))\n}\nS <- \"The sky is blue. The sun\
    \ is shining. I love this weather\"\nis_bored(S)\n", "\n  return(sum(startsWith(unlist(strsplit(gsub(\"\
    [^[:alpha:]]+\", \" \", S), \" \")), \"I\")))\n}\n", "\n  # your code here\n \
    \ return(length(grep(\"^I[^ ]\",unlist(strsplit(S, \"\\\\.|\\\\?|\\\\!\")))))\n\
    }", "\n  # For example, S = 'The sky is blue. The sun is shining. I love this\
    \ weather'\n  I = strsplit(S, split = '\\\\.')[[1]] # I = c('The sky is blue',\
    \ ' The sun is shining', ' I love this weather')\n  # Remove the leading and trailing\
    \ spaces\n  I = trimws(I) # I = c('The sky is blue', 'The sun is shining', 'I\
    \ love this weather')\n  # Count the number of I that starts with 'I'\n  sum(grepl('^I',\
    \ I)) # 1\n}\n", "\n  # if (!is.character(S)) {\n  #   stop(\"Input must be a\
    \ character string.\")\n  # }\n  # return(length(grep(\"^I\", strsplit(S, \"\\\
    \\.\")[[1]])))\n  # S <- strsplit(S, \"\\\\.\")[[1]]\n  # sum(substr(S, 1, 1)\
    \ == \"I\")\n  sum(grepl(\"^I\", strsplit(S, \"\\\\.\")[[1]]))\n}\n", "\n    #\
    \ Your code here\n    boredoms <- gregexpr(\"(?i)^I\",S)\n    length(boredoms[[1]])\n\
    }\n", "\n    # your code here\n    sum(grepl(\"^I \", strsplit(S, '[?!\\\\.]')))\n\
    }\nis_bored('Hello world')\n\nis_bored('The sky is blue. The sun is shining. I\
    \ love this weather')\n\nis_bored('The sky is blue. The sun is shining.')\n\n\
    is_bored('The sky is blue. The sun is shining. I love this weather. The sky is\
    \ blue. The sun is shining. I love this weather.')\n\nis_bored('The sky is blue.\
    \ The sun is shining. I love this weather. The sky is blue. The sun is shining.\
    \ I love this weather. The sky is blue. The sun is shining. I love this weather.\
    \ The sky is blue. The sun is shining. I love this weather. The sky is blue. The\
    \ sun is shining. I love this weather. The sky is blue. The sun is shining. I\
    \ love this weather. The sky is blue. The sun is shining. I love this weather.\
    \ The sky is blue. The sun is shining. I love this weather. The sky is blue. The\
    \ sun is shining. I love this weather. The sky is blue. The sun is shining. I\
    \ love this weather. The sky is blue. The sun is shining. I love this weather.\
    \ The sky is blue. The sun is shining. I love this weather. The sky is blue. The\
    \ sun is shining. I love this weather. The sky is blue. The sun is shining. I\
    \ love this weather. The sky is blue. The sun is shining. I love this weather.\
    \ The sky is blue. The sun is shining. I love this weather. The sky is blue. The\
    \ sun is shining. I love this weather. The sky is blue. The sun is shining. I\
    \ love this weather. The sky is blue. The sun is shining. I love this weather.\
    \ The sky is blue. The sun is shining. I love this weather. The sky is blue. The\
    \ sun is shining. I love this weather. The sky is blue. The sun is shining. I\
    \ love this weather. The sky is blue. The sun is shining. I love this weather.\
    \ The sky is blue. The sun is shining. I love this weather. The sky is blue. The\
    \ sun is shining. I love this weather. The sky is blue. The sun is shining. I\
    \ love this", "\n}\n ", "\n    s <- strsplit(S, \".\")\n    count <- 0\n    for\
    \ (i in 1:length(s)) {\n        w <- strsplit(s[[i]], \" \")\n        w <- w[[1]]\n\
    \        if (length(w) > 0) {\n            if (w[1] == \"I\") {\n            \
    \    count <- count + 1\n            }\n        }\n    }\n    return(count)\n\
    }\n", "\n  return(length(grep(\"^I[.?!]*$\", unlist(strsplit(S, \"[.?!]\")))))\n\
    }\nis_bored(\"The sky is blue. The sun is shining. I love this weather\")\n",
  "\n    # YOUR CODE HERE\n    replace_punctuation <- function(str) {\n        sub(\"\
    [!?.]\", \"\", str)\n    }\n    punctuation_removed <- gsub(\"[!?.]\", \" \",\
    \ S)\n    words <- unlist(strsplit(punctuation_removed, \" \"))\n    boredoms\
    \ <- sum(words == \"I\")\n    return(boredoms)\n}\n", "\n  S <- strsplit(S, '\\\
    \\.|\\\\?|!')\n  S <- unlist(S)\n  nchar(grep('^I ', S, value = TRUE))\n}\n",
  "\n    # task\n}\n", "\n    str_count(S, \"I[^!?.]*[.!?]\")\n}\n\n", "\n    sentence_vector\
    \ <- unlist(strsplit(S, \"\\\\.|\\\\!|\\\\?\"))\n    sentence_vector <- sentence_vector[sentence_vector\
    \ != \"\"]\n    boredoms <- 0\n    for (sentence in sentence_vector) {\n     \
    \   if (substr(sentence, 1, 1) == \"I\") {\n            boredoms <- boredoms +\
    \ 1\n        }\n    }\n    return(boredoms)\n}\n", "\n    L <- length(grep(\"\
    I\", unlist(strsplit(S, split = \"[.?!]\"))))\n    return(L)\n}\n", "\n  S1 <-\
    \ strsplit(S, \"\\\\.\")\n  bored <- 0\n  for (i in 1:length(S1)) {\n    if (substr(trimws(S1[[i]]),\
    \ 1, 1) == \"I\") {\n      bored <- bored + 1\n    }\n  }\n  return(bored)\n}\n",
  "\n    number_of_sentences <- str_count(S, pattern = '\\\\.[^.]+') +\n         \
    \                   str_count(S, pattern = '\\\\![^!]+') +\n                 \
    \           str_count(S, pattern = '\\\\?[^?]+')\n    number_of_boredoms <- 0\n\
    \    for (sentence in str_split(S, pattern = '\\\\.|\\\\!|\\\\?')) {\n       \
    \ first_word <- str_split(sentence[[1]], pattern = '[\\\\s+]')[[1]][1]\n     \
    \   if (first_word == 'I') {\n            number_of_boredoms <- number_of_boredoms\
    \ + 1\n        }\n    }\n    return(number_of_boredoms)\n}\n", "\n  words <- unlist(strsplit(S,\
    \ \" \"))\n  boredoms <- grepl(\"^I.*\", words)\n  print(sum(boredoms))\n}\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n", "\n  # Enter your\
    \ code here\n}", "\n  stringr::str_count(S, \"^I \")\n}\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n", "\n  if (length(S) == 0)\
    \ return(0)\n  if (S[1] == \"I\") {\n    return(1 + is_bored(S[-1]))\n  } else\
    \ {\n    return(is_bored(S[-1]))\n  }\n}\n\nis_bored('The sky is blue. The sun\
    \ is shining. I love this weather')\n", "\n  ## Write a program to:\n  ##    \
    \ 1. Read the input sentence\n  ##     2. Print the number of boredoms\n  ## Good\
    \ luck!\n  0\n}\n", "\n    S <- as.character(S)\n    S <- unlist(strsplit(S, split=\"\
    [.?!]\"))\n    S <- tolower(S)\n    S <- strsplit(S, \" \")\n    count <- 0\n\
    \    for (i in 1:length(S)) {\n        if (S[[i]][1] == \"i\") {\n           \
    \ count <- count + 1\n        }\n    }\n    return(count)\n}\n", "\n  S <- trimws(S)\n\
    \  sentence <- 1\n  word <- 0\n  for (i in 1:nchar(S)) {\n    if (substr(S, i,\
    \ i) == \" \") {\n      sentence <- sentence + 1\n      word <- 0\n    } else\
    \ if (substr(S, i, i) == \".\" | substr(S, i, i) == \"?\" | substr(S, i, i) ==\
    \ \"!\") {\n      sentence <- sentence + 1\n      word <- 0\n    } else {\n  \
    \    word <- word + 1\n    }\n  }\n  return(sentence)\n}", "\n  S <- unlist(strsplit(S,\
    \ \"\"))\n  out <- 0\n  i <- 1\n  while (i <= length(S)) {\n    if (S[i] == \"\
    I\") {\n      out <- out + 1\n      if (i < length(S)) {\n        i <- i + 1\n\
    \        while (S[i] != \"!\" & S[i] != \"?\" & S[i] != \".\") {\n          i\
    \ <- i + 1\n        }\n      }\n    }\n    i <- i + 1\n  }\n  return(out)\n}\n",
  "\n    split_text <- unlist(strsplit(S, \"\\\\.\"))\n    length(grep(\"^I \", split_text))\n\
    }\n\nis_bored('Hello world')\nis_bored('The sky is blue. The sun is shining. I\
    \ love this weather')\n", "\n  return(count(grepl(\"I \", S)))\n}\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")", "\n  return(length(unlist(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(strsplit(str",
  "\n  # YOUR CODE HERE\n  #0\n  count=0\n  S=strsplit(S,split=\" \")\n  for(i in\
    \ S){\n    if(i==\"I\"){\n      count=count+1\n    }\n  }\n  return(count)\n}\n\
    is_bored('I am bored')\n", "\n  # YOUR CODE HERE\n  sapply(strsplit(S, split=\"\
    \ \"), function(x) sum(x == \"I\"))\n}\nis_bored(\"I am bored\")\n", "\n  boredoms\
    \ <- 0\n  for (sentence in strsplit(S, \"\\\\.|\\\\?|!\")[[1]]) {\n    words <-\
    \ unlist(strsplit(sentence, \" \"))\n    if (words[1] == \"I\") {\n      boredoms\
    \ <- boredoms + 1\n    }\n  }\n  return(boredoms)\n}\n", "\n  sentences <- unlist(strsplit(gsub('\\\
    \\.', '', S), \"[\\\\.\\\\?!]\"))\n  return(sum(grepl('^I', sentences)))\n}",
  "\n    # Good luck!\n    \n    \n    \n    \n}\n", "\n    return(sum(stringr::str_detect(unlist(strsplit(S,\
    \ split=\" \")), \"^I\")))\n}", "\n  s <- unlist(strsplit(S, \"[.?!]\"))\n  is_bored\
    \ <- function(x) {\n    unlist(strsplit(x, \"[[:space:]]\"))[1] == \"I\"\n  }\n\
    \  return(sum(sapply(s, is_bored)))\n}\n", "\n    return(sum(grepl(\"^I \", unlist(strsplit(S,\
    \ \"\\\\.|\\\\?|\\\\!\")))))\n}\nis_bored('Hello world')\nis_bored('The sky is\
    \ blue. The sun is shining. I love this weather')\n", "\n  sentence <- S %>% str_split(\"\
    [^[:alpha:]]\")\n  sentence <- sentence[sentence != \"\"]\n  boredoms <- sentence[grep(\"\
    ^I\", sentence)]\n  length(boredoms)\n}\n", "\n  sum(grepl(\"^I\", unlist(strsplit(S,\
    \ \"\\\\?\"))))\n}\n", "\n  # YOUR CODE HERE\n  answer <- 0\n  split <- strsplit(S,\
    \ \"\\\\!|\\\\.|\\\\?\")\n  split <- unlist(split)\n  for (i in 1:length(split))\
    \ {\n    if (grepl(\"^ *I *[a-zA-Z]+\", split[i])) {\n      answer <- answer +\
    \ 1\n    }\n  }\n  return(answer)\n}\n", "\n  S <- paste(S, collapse = \" \")\n\
    \  return(length(gregexpr(\"\\\\bi\\\\b\", tolower(S))[[1]]))\n}\n", "\n    COUNT\
    \ <- 0\n    words <- unlist(strsplit(S, ' '))\n    for (i in 1:length(words))\
    \ {\n        if (words[i] == 'I') {\n            COUNT <- COUNT + 1\n        }\n\
    \    }\n    return(COUNT)\n}\nprint(is_bored('The sky is blue. The sun is shining.\
    \ I love this weather'))\n", "\n  # ...\n  return(sum(grepl(\"^I\", unlist(strsplit(S,\
    \ split = \"[\\\\.\\\\!\\\\?]\")))))\n}", "\n  # function that applies the is_bored_on_sentence\
    \ function\n  # on each sentence of S\n  # and counts the number of sentences\
    \ that are bored.\n  # Example:\n  # >>> is_bored('One sentence. Another one?\
    \ I love the sun.')\n  # 2\n  # >>> is_bored('I am bored. You are a bore.')\n\
    \  # 2\n  # >>> is_bored('I am bored. You are not.')\n  # 1\n}", "\n  # your code\
    \ here\n}\n", "\n    string <- scan(text = S, what = \"character\", sep = \"\"\
    , quiet = TRUE)\n    # count the number of I's\n    sum(unlist(strsplit(string,\
    \ split = \"\")) == \"I\")\n}\nis_bored(\"I like ice cream\")\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n", "\n\tcnt <- 0\n\t\
    for (s in unlist(strsplit(S, '[\\\\.\\\\?\\\\!]'))) {\n\t\tif (substring(s, 1,\
    \ 2) == 'I ') cnt <- cnt + 1\n\t}\n\treturn(cnt)\n}\n", "\n    count(strsplit(S,\
    \ '\\\\.|\\\\?|!')[[1]], 'I ')\n}\n", "\n  S_vec <- unlist(strsplit(S, split =\
    \ \"[[:punct:]]\", fixed = TRUE))\n  S_vec <- gsub(\"^\\\\s+|\\\\s+$\", \"\",\
    \ S_vec)\n  S_vec <- tolower(S_vec)\n  count <- 0\n  for (i in 1:length(S_vec))\
    \ {\n    if (substr(S_vec[i], 1, 1) == \"i\") {\n      count <- count + 1\n  \
    \  }\n  }\n  return(count)\n}\n", "\n    s <- strsplit(S, \"\\\\.\")\n    t <-\
    \ sum(sapply(s, function(x) grepl(\"I\", x)))\n    return(t)\n}\n", "\n\t# Sum\
    \ up 1's from the vector of 1's and 0's. The 1's come from the\n\t# bit that tests\
    \ to see if the first character of the string \n\t# starts with 'I'.\n\treturn(sum(grepl('^I',\
    \ strsplit(S, '\\\\.')[[1]])))\n}\n", "\n  sum(grepl(\"I\", unlist(strsplit(S,\
    \ \"[?!.]\"))), na.rm = TRUE)\n}\n", "\n  # write your code here, returning the\
    \ answer\n  count <- 0\n  for (i in strsplit(S, split = \"\\\\.\")[[1]]) {\n \
    \   if (startsWith(i, \"I\"))\n      count <- count + 1\n  }\n  count\n}\n\nprint(is_bored('Hello\
    \ world'))\nprint(is_bored('The sky is blue. The sun is shining. I love this weather'))\n",
  "\n  return(length(grep(\"I\", unlist(strsplit(S, \"[!.?]\")), value = TRUE)))\n\
    }\n", "\n  # Add your code below\n  # Remove this comment when you're done\n \
    \ x <- unlist(strsplit(S,\" \"))\n  #print(length(x))\n  x <- grepl(\"^I\",x)\n\
    \  sum(x)\n}\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n", "\n    #\n    # Write your code here\n    #\n    #Create a vector of strings\
    \ based on the sentences\n    vec_sentences <- unlist(strsplit(S, \"\\\\.|\\\\\
    ?|\\\\!\"))\n    counter <- 0\n    #Loop through the vector and make sure the\
    \ sentence starts with \"I\"\n    for (sentence in vec_sentences) {\n        if\
    \ (substr(sentence, 1, 1) == \"I\") {\n            counter <- counter + 1\n  \
    \      }\n    }\n    return(counter)\n}\n\n", "\n  # YOUR CODE HERE\n  split <-\
    \ strsplit(S, \"\\\\.\")\n  is_bored <- 0\n  for (split in split){\n    split\
    \ <- unlist(split)\n    split <- unlist(strsplit(split, \"\\\\?\"))\n    split\
    \ <- unlist(strsplit(split, \"\\\\!\"))\n    split <- strsplit(split, \" \")\n\
    \    if(unlist(split)[1] == \"I\"){\n      is_bored <- is_bored + 1\n    }\n \
    \ }\n  return(is_bored)\n}\n", "\n  S %>% str_replace_all('[.?!]', '.') %>% \n\
    \    str_split('\\\\.') %>% unlist() %>% \n    str_trim() %>% \n    str_detect('^I')\
    \ %>% \n    sum()\n}\n", "\n  strsplit(gsub('[?.!]','\\\\0 ',S),' ')[[1]] %in%\
    \ 'I' %>% sum\n}", "\n    0\n}\n", "\n  nchar(gsub(\"([^I])[.!?]\", \"\\\\1\"\
    , S)) - nchar(S)\n}\n", "\n  return(length(grep(\"^I \", strsplit(gsub('\\\\!|\\\
    \\?|\\\\.', ' ', S), ' ')[[1]])))\n}", "\n  nbored <- 0\n  for (stn in strsplit(S,\
    \ split='[.?!]')[[1]]) {\n    words <- strsplit(stn, split=' ')[[1]]\n    if (words[1]\
    \ == 'I') nbored <- nbored + 1\n  }\n  return(nbored)\n}\n", "\n  #count the number\
    \ of sentences beginning with 'I'\n  #a sentence begins with 'I' if the first\
    \ letter after a delimiter\n  #(period, question mark, or exclamation mark) is\
    \ 'I'\n  I_sentences <- 0\n  delimiters <- c('.', '?', '!')\n  for (i in delimiters)\
    \ {\n    #find all instances of the delimiter\n    matches <- regexpr(i, S)\n\
    \    #if there was a match\n    if (length(matches) > 0) {\n      #check the character\
    \ after the delimiter\n      #if it is an 'I', increment I_sentences\n      for\
    \ (j in matches) {\n        if (substr(S, j + 1, j + 1) == 'I') {\n          I_sentences\
    \ <- I_sentences + 1\n        }\n      }\n    }\n  }\n  return(I_sentences)\n\
    }\n", "\n  # Extract sentences from S\n  sent <- unlist(strsplit(S, \"[.?!]\"\
    ))\n  # Remove empty strings\n  sent <- sent[sent != \"\"]\n  # Count number of\
    \ sentences starting with \"I\"\n  nbored <- length(grep(\"^I\\\\s+.*\", sent))\n\
    \  return(nbored)\n}", "\n  if (is.null(S)) {\n    return(0)\n  }\n  S <- strsplit(S,\
    \ split = \" \")[[1]]\n  i <- 0\n  count <- 0\n  while (i < length(S)) {\n   \
    \ if (S[i] == \"I\") {\n      count <- count + 1\n    }\n    i <- i + 1\n  }\n\
    \  return(count)\n}\n", "\n  split_up_sentences <- strsplit(S, \"[.?!]\")[[1]]\n\
    \  split_up_sentences <- sapply(split_up_sentences,function(x) {\n    x <- trimws(x)\n\
    \    x <- sub(\"\\\\s+\", \" \", x)\n    return(x)\n  })\n  return(length(grep(\"\
    ^I\\\\s\", split_up_sentences)))\n}\n", "\n  # add your code here\n  (length(strsplit(S,\
    \ \"\\\\.|\\\\!|\\\\?\")[[1]]) - 1) - length(grep(\"I\", S))\n}\nis_bored <- function(S)\
    \ {\n  # add your code here\n  length(unlist(strsplit(S, \"\\\\.\")))-1 - length(grep(\"\
    I\", S))\n}\nis_bored <- function(S) {\n  # add your code here\n  length(gregexpr(\"\
    \\\\.\", S)[[1]]) - length(grep(\"I\", S))\n}\nis_bored <- function(S) {\n  #\
    \ add your code here\n  length(sub(\",.*\", \"\", S)) - length(grep(\"I\", S))\n\
    }\nis_bored <- function(S) {\n  # add your code here\n  length(grep(\"\\\\.\"\
    , S)) - length(grep(\"I\", S))\n}\nis_bored <- function(S) {\n  # add your code\
    \ here\n  length(grep(\"\\\\.\", S)) - length(grep(\"^I\", S))\n}\nis_bored <-\
    \ function(S) {\n  # add your code here\n  length(strsplit(S, \"\\\\.\")[[1]])\
    \ - length(grep(\"^I\", S))\n}\nis_bored <- function(S) {\n  # add your code here\n\
    \  length(grep(\"\\\\.\", S)) - length(grep(\"^I\", S))\n}\nis_bored <- function(S)\
    \ {\n  # add your code here\n  length(grep(\"\\\\.\", S)) - length(grep(\"^I\"\
    , S))\n}\nis_bored <- function(S) {\n  # add your code here\n  length(gregexpr(\"\
    \\\\.\", S)[[1]]) - length(grep(\"^I\", S))\n}\nis_bored <- function(S) {\n  #\
    \ add your code here\n  length(grep(\"\\\\.\", S)) - length(grep(\"^I\", S))\n\
    }\nis_bored <- function(S) {\n  # add your code here\n  length(strsplit(", "\n\
    \  count <- 0\n  for (i in seq_along(unlist(strsplit(S, split = \"[.?!]\"))))\
    \ {\n    if (startsWith(unlist(strsplit(S, split = \"[.?!]\"))[i], \"I\")) {\n\
    \      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  #################################################################################\n\
    \  # Write your code here\n  # Every line here will be run in sequence\n  #################################################################################\n\
    }\n", "\n    # We want to count the number of sentences that start with the word\
    \ \"I\"\n    # so let's first split the string into sentences (delimited by .?!).\n\
    \    # This can be done with strsplit() or gsub() and unlist()\n    sentence_list\
    \ <- strsplit(S, split=\"[?!.]\", fixed=TRUE)[[1]]\n    # Every sentence is split\
    \ into a list of words. We can use lapply() to\n    # get a list of words from\
    \ the list of sentences\n    word_list <- lapply(sentence_list, strsplit, split=\"\
    \ \")\n    # Now let's use unlist to transform the list of words into a vector\
    \ of\n    # words. We'll use another lapply() to count the number of words in\
    \ the\n    # sentence that are equal to the word \"I\"\n    boredoms <- unlist(lapply(word_list,\
    \ function(x) sum(x==\"I\")))\n    # Finally, we can sum the number of words equal\
    \ to \"I\" to get the\n    # number of boredoms\n    sum(boredoms)\n}\n", "\n\
    \  return(length(grep(\"^I.*\",unlist(strsplit(S,\"[.?!]\")))))\n}", "\n  S <-\
    \ gsub(\"\\\\.\", \" .\", S)\n  S <- gsub(\"\\\\?\", \" ?\", S)\n  S <- gsub(\"\
    \\\\!\", \" !\", S)\n  S <- unlist(strsplit(S, \" \"))\n  S <- gsub(\"^I$\", \"\
    \", S)\n  S <- filter(S, function(x) x != \"\")\n  sum(S == \"I\")\n}\n", "\n\
    \  sum(startsWith(unlist(strsplit(S, \"[!?.]\")), \"I\"))\n}\n\n", "\n  # count\
    \ I's that are not in quotes\n  regex <- regex('(?<!\")I(?!\")', ignore_case =\
    \ T)\n  count <- length(str_extract_all(S, regex))\n  # split S by '.' or '?'\
    \ or '!'\n  S <- str_split(S, '\\\\.|\\\\?|!')\n  # count the number of sentences\
    \ that start with I\n  count <- count - sum(count == 1)\n  # return\n  return(count)\n\
    }\nis_bored('This is a test.')\nis_bored('I am bored.')\nis_bored('The sky is\
    \ blue. The sun is shining. I love this weather')\nis_bored('This is a test. I\
    \ am bored. The sky is blue. The sun is shining. I love this weather')\n", "\n\
    \    sentences <- unlist(strsplit(S, '\\\\?|\\\\.|!'))\n    sentence_lengths <-\
    \ str_length(sentences)\n    sentence_lengths[1] <- sentence_lengths[1] - 1 #\
    \ Consume the I.\n    sentences <- str_trim(sentences)\n    boredoms <- str_extract(sentences,\
    \ '^I')\n    boredoms <- which(boredoms == 'I')\n    if (length(boredoms) == 0)\
    \ return(0)\n    boredoms <- sentence_lengths[boredoms]\n    return(length(which(boredoms\
    \ == 4)))\n}\nis_bored('Hello world')\nis_bored('The sky is blue. The sun is shining.\
    \ I love this weather')\n", "\n    words <- unlist(strsplit(S, \" \"))\n    words_punct\
    \ <- strsplit(S, \"[[:punct:]]\")\n    boredoms <- grep(\"^I.*\", words_punct)\n\
    \    n_boredoms <- length(boredoms)\n    return(n_boredoms)\n}\n ", "\n  S <-\
    \ unlist(strsplit(S, \"[!\\\\?\\\\.]\"))\n  S <- S[grepl(\"I\", S)]\n  length(S)\n\
    }\n", "\n  # your code here\n  count(strsplit(S, \"\\\\.|\\\\!|\\\\?\")[[1]],\
    \ \"I\", fixed = TRUE)\n}\n", "\n  # Write your code here.\n  sum(grepl(\"^I\"\
    ,unlist(strsplit(S,\"\\\\.|\\\\!|\\\\?\"))))\n}\n", "\n  return(nchar(gsub(\"\
    ^I(?=\\\\s+[^I])|[.?!](?=\\\\s+[^I])\", \"\", S), fixed = TRUE) / 2)\n}\nis_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n", "\n  # split string\
    \ into sentences by '.' '?' or '!'\n  sentences <- unlist(strsplit(S, '[[:punct:]]'))\n\
    \  # count the number of sentences starting with I\n  count <- 0\n  for (sentence\
    \ in sentences) {\n    if (startsWith(sentence, 'I')) {\n      count <- count\
    \ + 1\n    }\n  }\n  return(count)\n}", "\n  sentences <- strsplit(S, \"(?<=[.?!])\\\
    \\s+\")[[1]]\n  return(sum(sapply(sentences, function(s) {grepl(\"^I\\\\s+\",\
    \ s)})))\n}\n", "\n  s<- strsplit(S, split = \" \")[[1]]\n  sum(s == \"I\")\n\
    }\n", "\n  count <- 0\n  for (i in 1:length(strsplit(S, \"\\\\.\")[[1]])) {\n\
    \    if (substr(strsplit(S, \"\\\\.\")[[1]][i], 1, 1) == \"I\") {\n      count\
    \ <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n    ss <- unlist(strsplit(S,\
    \ split=\"[.!?]\"))\n    count <- 0\n    for (s in ss) {\n        if (startsWith(s,\
    \ \"I\")) {\n            count <- count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n  boredoms <- str_extract_all(S, \"I\")\n  return(length(boredoms))\n\
    }\n", "\n  words <- strsplit(S, \" \")[[1]]\n  boredoms <- sum(words == \"I\"\
    )\n  return(boredoms)\n}", "\n  \n  if (is.null(gregexpr(\"\\\\bI\\\\s\", S, perl\
    \ = TRUE))[[1]]) {\n    return(0)\n  } else {\n    return(length(gregexpr(\"\\\
    \\bI\\\\s\", S, perl = TRUE)[[1]]))\n  }\n  \n}\n", "\n  return(length(grep(\"\
    ^I\", strsplit(S, split=\"\\\\.|\\\\?|!\")[[1]])))\n}\n\nR> x <- c(\"Hello world\"\
    , \"The sky is blue. The sun is shining. I love this weather\")\nR> sapply(x,\
    \ is_bored)\n[1] 0 1", "\n  length(grep(\"^I\", unlist(strsplit(S, '[.?!]'))))\n\
    }\n", "\n  return(str_count(str_to_lower(S), '\\\\bi\\\\b'))\n}\n", "\n  ## your\
    \ code here\n  ## \n  ## ex) S = 'The sky is blue. The sun is shining. I love\
    \ this weather'\n  ##     S = unlist(strsplit(S, split = ' '))\n  ##     S = c(S,\
    \ '.')\n  ##     S = paste(S, collapse = ' ')\n  ##     S = unlist(strsplit(S,\
    \ split = '[.?!]'))\n  ##     count = 0\n  ##     for(i in S) {\n  ##       if(i[1]\
    \ == 'I')\n  ##         count = count + 1\n  ##     }\n  ##     return count\n\
    }\n", "\n    sentences <- strsplit(S, \"[.?!]\")[[1]]\n    count <- 0\n    for\
    \ (s in sentences) {\n        words <- strsplit(s, \" \")[[1]]\n        if (length(words)\
    \ > 0 && words[1] == \"I\") {\n            count <- count + 1\n        }\n   \
    \ }\n    return(count)\n}\nprint(is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\"))\n", "\n    split_sentences <- strsplit(S, \"\\\\.|\\\
    \\!|\\\\?\")[[1]]\n    sentence_starts_with_i <- grepl(\"^\\\\s*I\\\\s+\", split_sentences)\n\
    \    sum(sentence_starts_with_i)\n}\n", "\n  # You code here\n  boredoms <- regexpr(\"\
    ^I\", strsplit(S, split='[.!\\?]')[[1]])\n  return(length(boredoms[which(boredoms\
    \ != -1)]))\n}\n", "\n  count_boredom <- 0\n  for (i in 1:length(S)) {\n    if\
    \ (i == 1 && substr(S, i, i+1) == \"I\") {\n      count_boredom <- count_boredom\
    \ + 1\n    } else if (substr(S, i, i+1) == \".\" && substr(S, i+2, i+3) == \"\
    I\") {\n      count_boredom <- count_boredom + 1\n    } else if (substr(S, i,\
    \ i+1) == \"?\" && substr(S, i+2, i+3) == \"I\") {\n      count_boredom <- count_boredom\
    \ + 1\n    } else if (substr(S, i, i+1) == \"!\" && substr(S, i+2, i+3) == \"\
    I\") {\n      count_boredom <- count_boredom + 1\n    }\n  }\n  return(count_boredom)\n\
    }\n", "\n  ### FILL IN CODE HERE ###\n  count(strsplit(S, split = '!|\\\\?|\\\\\
    .')[[1]], \"I\")\n}\n", "\n  # code here\n  unlist(strsplit(S, '[?!.]')) %>%\n\
    \    gsub(' ', '', .) %>%\n    gsub('(?<=\\\\w)(?=\\\\p{Lu})', ' ', .) %>%\n \
    \   tolower() %>%\n    grepl('i', .) %>%\n    sum()\n}\nis_bored('The sky is blue.\
    \ The sun is shining. I love this weather')\n", "\n  # RETURN A SINGLE INTEGER\n\
    \  count(strsplit(S, ' ')[[1]], 'I')\n}\n\n", "\n  ## Your code here\n  return(boredom)\n\
    }", "\n    # Count the number of sentences that start with \"I\".\n    return(substringCount(S,\
    \ \"I \"))\n}\n", "\n  return(length(unlist(strsplit(gsub(\"!\", \"\", S), \"\\\
    \\.\"))[1] == \"I\"))\n}\n", "\n  # start count at 0\n  count <- 0\n  # split\
    \ string into words\n  w <- strsplit(S, '\\\\W+')[[1]]\n  # loop over words\n\
    \  for (i in 1:length(w)) {\n    # if the word is I, increase the count\n    if\
    \ (w[i] == 'I') {\n      count <- count + 1\n    }\n  }\n  # return the count\n\
    \  return(count)\n}\nis_bored('Hello world')\nis_bored('The sky is blue. The sun\
    \ is shining. I love this weather')", "\n    return(sum(grepl(\"^I\", strsplit(S,\
    \ \"\\\\?|\\\\.|!\")[[1]])))\n}\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n", "\n  stringr::str_count(S, \"I \")\n}\n", "\n  sum(startsWith(strsplit(S,\
    \ \"[.?!]\")[[1]], \"I\"))\n}", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(S ==\
    \ \"I\")\n}", "\n  # YOUR CODE HERE\n  bored = 0\n  sente = strsplit(S, '\\\\\
    .|\\\\?|!')[[1]]\n  for (i in sente) {\n    if (strsplit(i, ' ')[[1]][1] == 'I')\
    \ {\n      bored = bored + 1\n    }\n  }\n  return(bored)\n}", "\n    result <-\
    \ str_extract_all(S, \"(\\\\.|\\\\?|\\\\!)\\\\s*I\")\n    length(result[[1]])\n\
    }\n", "\n\ts <- strsplit(S, \"(?<=[\\\\.?!])\\\\s+\")[[1]]\n\treturn(sum(substr(s,\
    \ 1, 2) == \"I \"))\n}", "\n  S <- gsub(\"\\\\.\", \"\\\\.\", S)\n  S <- gsub(\"\
    \\\\?\", \"\\\\?\", S)\n  S <- gsub(\"\\\\!\", \"\\\\!\", S)\n  S <- unlist(strsplit(S,\
    \ \"\\\\.\"))\n  S <- unlist(strsplit(S, \"\\\\?\"))\n  S <- unlist(strsplit(S,\
    \ \"\\\\!\"))\n  count <- 0\n  for (i in 1:length(S)) {\n    S[i] <- unlist(strsplit(S[i],\
    \ \" \"))\n    if (S[i][1] == \"I\") {\n      count <- count + 1\n    }\n  }\n\
    \  return(count)\n}\n", "\n  boredoms <- str_count(S, \"\\\\.|\\\\?|!\")\n  return(boredoms)\n\
    }\n", "\n  bored <- 0\n  ss <- strsplit(S, \"\\\\.\")\n  for (s in ss) {\n   \
    \ if (length(s) > 0) {\n      if (substr(s[[1]], 0, 1) == \"I\") {\n        bored\
    \ <- bored + 1\n      }\n    }\n  }\n  return(bored)\n}", "\n    # your code here\n\
    \    sentence <- unlist(strsplit(S, \"[!.?]\"))\n    sentence <- sentence[-length(sentence)]\n\
    \    boredoms <- 0\n    for (i in sentence) {\n        if (grepl(\"^I\", i, perl\
    \ = TRUE)) {\n            boredoms <- boredoms + 1\n        }\n    }\n    return(boredoms)\n\
    }", "\n  # your code here\n}", "\n  # replace the dots with a space\n  S <- gsub(\"\
    \\\\.\", \" \", S)\n  # split the string into individual words\n  words <- unlist(strsplit(S,\
    \ \" \"))\n  # find the ones that start with \"I\"\n  boredoms <- grep(\"^I\"\
    , words)\n  # return the length of the vector containing the boredoms\n  return(length(boredoms))\n\
    }\n", "\n    # your code here\n}\n ", "\n  return(sum(grepl(\"^I \", strsplit(S,\
    \ '[.?!]')[[1]])))\n}\n", "\n  sum(grepl(\"^I\", strsplit(S, \"\\\\.?\\\\!?\"\
    )[[1]]))\n}\n", "\n  boredoms <- 0\n  for (sentence in strsplit(S, '\\\\.')[[1]])\
    \ {\n    if (startsWith(tolower(sentence), 'i')) {\n      boredoms <- boredoms\
    \ + 1\n    }\n  }\n  return(boredoms)\n}\n", "\n  # your code here\n}\n", "\n\
    \  no_punct <- gsub(\"\\\\p{P}+\", \"\", S)\n  no_punct <- gsub(\" \", \"\", no_punct)\n\
    \  sentences <- strsplit(no_punct, \"[\\\\.\\\\?!]\")[[1]]\n  boredoms <- grep(\"\
    ^I\", sentences)\n  return(length(boredoms))\n}\n", "\n  lapply(strsplit(S, \"\
    \\\\.|\\\\?|!\"),\n         function(x) sum(grepl(\"^ *I \", x))) %>%\n    unlist()\
    \ %>%\n    sum()\n}\n", "\n    sentences <- strsplit(S, split = \"\\\\.?\\\\!?\"\
    )[[1]]\n    return(sum(grepl(\"^I\", sentences)))\n}\n", "\n  s <- strsplit(S,\
    \ \"!\")[[1]]\n  s <- unlist(lapply(s, function(x) gsub(\"\\\\.\", \"!\", x)))\n\
    \  return(sum(grepl(\"I!\", s)))\n}\n", "\n  words <- unlist(strsplit(S, '\\\\\
    W'))\n  sum(words == 'I')\n}\n", "\n    # Your code here\n    return(0)\n}\n",
  "\n  # your code here\n  return(length(gregexpr(\"I\", strsplit(S, split = \"[\\\
    \\.\\\\?\\\\!]\")[[1]])[[1]]))\n}\n ", "\n  # Hint: we have a function called\
    \ starts_with(S, x) that returns TRUE\n  # if string S starts with x.\n  #\n \
    \ # Your code goes here\n  boredoms <- str_extract_all(S, \"I.*?(\\\\.|\\\\?|!)\"\
    )\n  length(boredoms)\n}\n", "\n  # Your code here\n  is.na(grep(\"I\", unlist(strsplit(S,\
    \ split = \"[.!?]\"))))\n}\n", "\n  # YOUR CODE HERE\n  sentence <- strsplit(S,\
    \ \"[.!?]\")\n  count <- 0\n  for (i in sentence[[1]]) {\n    if (head(unlist(strsplit(i,\
    \ \"[,\\\\s]\")), 1) == \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n ", "\n  count(strsplit(S, \"\\\\.\")[[1]], function(x) {grepl(\"^\\\\s*I \"\
    , x)})\n}\n", "\n  sum(str_count(str_split(S, regex(\"[!.?]\"))[[1]], \"^I\\\\\
    s\"))\n}\n", "\n  S %>%\n    str_split(\"[.?!]\") %>% \n    flatten() %>% \n \
    \   str_split(\" \") %>% \n    .[grepl(\"^I\", .)] %>% \n    length()\n}\nis_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n", "\n  # FILL THIS\
    \ IN\n}\n ", "\n  # Your code here\n  pattern <- 'I'\n  pattern <- paste0('^',\
    \ pattern)\n  pattern <- paste0(pattern, '(?=\\s+\\w)')\n  pattern <- paste0(pattern,\
    \ '|')\n  pattern <- paste0(pattern, '(?<=\\.)', pattern)\n  pattern <- paste0(pattern,\
    \ '(?<=\\!)', pattern)\n  pattern <- paste0(pattern, '(?<=\\?)', pattern)\n  pattern\
    \ <- paste0(pattern, '|')\n  pattern <- paste0(pattern, '(?<=\\n)\\s*', pattern)\n\
    \  pattern <- paste0(pattern, '(?<=\\s{4,})(?<=\\s)\\s*', pattern)\n  pattern\
    \ <- paste0(pattern, '(?<=\\s{2,})(?<=\\s)\\s*', pattern)\n  pattern <- paste0(pattern,\
    \ '(?<=\\s{1,})(?<=\\s)\\s*', pattern)\n  pattern <- paste0(pattern, '(?<=\\s)\\\
    s*', pattern)\n  regmatches(S, gregexpr(pattern, S))[[1]] %>% length\n}\n", "\n\
    \  # Your code here\n  return(sum(grepl(\"^I\", strsplit(S, split=\"[!?.]\", fixed=TRUE)[[1]])))\n\
    }\n ", "\n  # write your code here\n  split_sentences = strsplit(S, \"[?!.]+\"\
    )[[1]]\n  split_sentences = tolower(split_sentences)\n  bored =  sum(grepl(\"\
    ^i\", split_sentences))\n  return(bored)\n}", "\n  S <- gsub(\"[.!?]\", \"\",\
    \ S)\n  S <- strsplit(S, \" \")\n  j <- 0\n  for (i in S) {\n    if (i[1] == \"\
    I\") {\n      j <- j + 1\n    }\n  }\n  j\n}\nis_bored('The sky is blue. The sun\
    \ is shining. I love this weather')\n", "\n  sentences <- unlist(strsplit(S, \"\
    \\\\.|\\\\?|!\"))\n  sum(sub(\"^I\", \"\", sentences) != sentences)\n}\n", "\n\
    \  string_split(S, \"\\n\") %>%\n    map_int(~ stringr::str_count(.x, \"I\"))\
    \ %>%\n    sum()\n}\n\n\n", "\n  cat(gsub(\"^[^I].*\", \"\", S, perl = TRUE))\n\
    }", "\n  sum(grepl(\"^I\", unlist(strsplit(S, \"[.?!]\"))))\n}\n\n", "\n  ## Hints:\n\
    \  ## Use strsplit to split S into words.\n  ## strsplit(S, \" \")\n  ## Use sapply\
    \ to apply a function to each word in S.\n  ## sapply(S, FUN)\n  ## Use sum to\
    \ add up the result of the previous step.\n  ## sum(S)\n  words <- strsplit(S,\
    \ \" \")[[1]]\n  sum(sapply(words, function(s) strsplit(s, \"\")[[1]][1] == \"\
    I\"))\n}\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n", "\n  # Your code here\n  count(strsplit(S, '\\\\.')[[1]], 'I')\n}\n", "\n\
    \  if(length(grep(\"^I \", S)) > 0)\n    length(grep(\"^I \", S))\n  else\n  \
    \  0\n}", "\n  n <- 0\n  for (i in 1:length(S)) {\n    if (S[i] == \"I\") {\n\
    \      n <- n + 1\n    }\n  }\n  return(n)\n}\n", "\n  # Write your code here!\n\
    \  # return the count\n}\n", "\n  S <- strsplit(S, \"(?<=[.?!]) \")[[1]]\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  split_sentences <- strsplit(S, '(?<=[?!.])\\\\s*')[[1]]\n\
    \  # we split on spaces, only if preceded by ., ! or ?\n  # (?<=[?!.]) is positive\
    \ lookbehind (zero width)\n  first_word <- sapply(split_sentences, function(x)\
    \ strsplit(x, ' ')[[1]][1])\n  sum(first_word == 'I')\n}\n\nlibrary(testthat)\n\
    expect_equal(is_bored('The sky is blue. The sun is shining. I love this weather'),\
    \ 1)\nexpect_equal(is_bored('The sky is blue. The sun is shining.'), 0)\nexpect_equal(is_bored('Hello\
    \ world'), 0)\nexpect_equal(is_bored('Hello world. I am here.'), 1)\n ", "\n \
    \ count <- 0\n  S <- gsub(\"[.|?|!]\",\" \\\\1 \",S)\n  S <- unlist(strsplit(S,\"\
    \ \"))\n  for (i in 1:length(S)){\n    if (S[i] == \"I\"){\n      count <- count\
    \ + 1\n    }\n  }\n  return(count)\n}", "\n    split <- stringr::str_split(S,\
    \ '[?!.]', simplify = TRUE)\n    split <- split[stringr::str_detect(split, '^\\\
    \\s*I')]\n    return(length(split))\n}\n", "\n  # Write your code here\n  S_array\
    \ <- strsplit(S, \" |\\\\.|\\\\?|!\")[[1]]\n  count <- 0\n  for (i in 1:length(S_array))\
    \ {\n    if (S_array[i] == \"I\") {\n      count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n    \ncat(is_bored(\"The sky is blue. The sun is shining. I love this weather!\"\
    ), \"\\n\")\n", "\n    count = 0\n    for (i in 1:length(unlist(strsplit(S, \"\
    .\")))) {\n        if (unlist(strsplit(unlist(strsplit(S, \".\"))[i], \" \"))[1]\
    \ == \"I\") {\n            count = count + 1\n        }\n    }\n    return(count)\n\
    }\n", "\n  ### Your solution goes here!\n}\n", "\n    # remove all full stops,\
    \ question marks and exclamation marks\n    S <- gsub(\"[.?!]\", \"\", S)\n  \
    \  # split S into words\n    words <- unlist(strsplit(S, \" \"))\n    # count\
    \ the number of \"I\"s\n    sum(words == \"I\")\n}\n ", "\n  # Split by punctuation\n\
    \  sentences <- stringr::str_split(S, \"[!\\\\?\\\\.]\")[[1]]\n  # Filter by 'I'\
    \ at beginning\n  sentences <- stringr::str_detect(sentences, \"^I \")\n  # Total\n\
    \  sum(sentences)\n}\n", "\n  return(sum(grepl(\"^I\", unlist(strsplit(S, \"[!.]\"\
    )))))\n}\nis_bored(\"I am bored.\")\n", "\n    lapply(strsplit(S, split=\"\\\\\
    .?\\\\s|\\\\!|\\\\.\",\n                    perl=TRUE), function(s) sum(grepl(\"\
    ^I\", s)))\n}\n", "\n  sum(grepl(\"I\\\\s+\", S))\n}\n", "\n  # your code here\n\
    \  # Split into a vector of sentences by delimiters, '.', '?' or '!'\n  sentences\
    \ <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n  # Check for words starting with 'I'\
    \ in sentences\n  sentences[grepl(\"^\\\\s*I\", sentences)]\n}\n", "\n    S <-\
    \ tolower(S)\n    num_sentences <- str_count(S, pattern = '[.?!]')\n    num_boreds\
    \ <- str_count(S, pattern = 'i')\n    num_boreds - num_sentences\n}\n", "\n  \
    \  boredoms <- grep(\"^I\", strsplit(S, \"[.?!]\")[[1]], value = TRUE)\n    return(length(boredoms))\n\
    }\n", "\n    return(length(grep(\"I \", strsplit(S, c(\"!\", \"\\\\?\", \"\\\\\
    .\"))[[1]])))\n}\n", "\n  S = gsub(\"[!?.]\", \"\\\\1@\", S)\n  S = gsub(\"\\\\\
    s+\", \" \", S)\n  S = unlist(strsplit(S, \"@\"))\n  w = unlist(lapply(S, FUN\
    \ = function(s) {\n    unlist(strsplit(s, \" \"))\n  }))\n  c = 0\n  for (word\
    \ in w) {\n    if (word == \"I\") {\n      c = c + 1\n    }\n  }\n  return(c)\n\
    }\n", "\n  \n}\n", "\n  #'@param S character\n  #'@examples\n  #'is_bored('Hello\
    \ world')\n  #'is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \  #'@export\n  sum(grepl('^I ', strsplit(S, '[.?!]')[[1]]))\n}\n", "\n    sentences\
    \ <- unlist(strsplit(S, \"[!.?]\", fixed = TRUE))\n    # good <- gsub(\"^ +| +$\"\
    , \"\", sentences)\n    good <- gsub(\"^\\\\s+|\\\\s+$\", \"\", sentences)\n \
    \   index <- grep(\"^I\", good)\n    length(index)\n}\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\nis_bored(\"I am bored, very bored\"\
    )\nis_bored(\"The sky is blue. The sun is shining. A rabbit jumped over a tree.\"\
    )\n", "\n  ## count the number of sentences\n  # 1. split the text using the three\
    \ punctuation marks.\n  # 2. remove the empty strings\n  # 3. count the number\
    \ of elements in the vector\n  sum(grepl(\"^I\", strsplit(S, \"\\\\.|\\\\?|!\"\
    )[[1]][strsplit(S, \"\\\\.|\\\\?|!\")[[1]] != \"\"]))\n}\n", "\n    # Your code\
    \ here\n    boredoms <- 0\n    for (i in seq(length(S))) {\n        if (S[i] ==\
    \ \"I\"){\n            if (S[i+1] == \" \") {\n                boredoms <- boredoms\
    \ + 1\n            }\n        }\n    }\n    return(boredoms)\n}\nis_bored(\"I\
    \ like to eat cheese. I like to eat cake. I like to sleep. I am so bored.\")\n",
  "\n  sentences <- strsplit(S, '\\\\.|\\\\?|!')[[1]]\n  sum(substr(sentences, 1,\
    \ 1) == 'I')\n}\n", "\n  sum(grepl(\"I\", strsplit(S, \"[!?.]\", fixed = TRUE)[[1]]))\n\
    }\n ", "\n  return(sum(grepl(\"^I\", unlist(strsplit(S, \"[!?.]\")))))\n}\n",
  "\n  S_list <- strsplit(S, \"[\\\\.\\\\?!]\")[[1]]\n  sum(grepl(\"^I \", S_list))\n\
    }\n", "\n    counts <- str_count(S, \"I [A-Z]\")\n    return(counts)\n}\n", "\n\
    \  sentences <- strsplit(S, \"\\\\.\")[[1]]\n  sentences <- sentences[sentences\
    \ != \"\"]\n  boredoms <- 0\n  for (sentence in sentences) {\n    first_word <-\
    \ strsplit(sentence, \" \")[[1]][1]\n    if (first_word == \"I\") {\n      boredoms\
    \ <- boredoms + 1\n    }\n  }\n  return(boredoms)\n}\n", "\n  count <- 0\n  S\
    \ <- unlist(strsplit(S, split = \"\\\\.\"))\n  for (i in 1:length(S)) {\n    S[i]\
    \ <- strsplit(S[i], split = \" \")\n    S[i] <- S[i][[1]]\n    if (length(S[i])\
    \ > 0) {\n      if (S[i][1] == \"I\") count <- count + 1\n    }\n  }\n  return(count)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(0)\n}\n", "\n  is_bored <- stringr::str_count(S,\
    \ \"I[[:space:]]\\\\w+\")\n  return(is_bored)\n}\nS = 'The sky is blue. The sun\
    \ is shining. I love this weather'\nis_bored(S)\n", "\n    count(unlist(strsplit(S,\
    \ \" \")), \"I\")\n}\nis_bored(\"I am very bored.\")\n"]
stop_tokens:
- "\n#"
- "\n```"
