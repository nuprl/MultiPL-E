name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n\
  # 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  # 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # Write your code here.\n  boredoms <- 0\n  split_sentences <-\
    \ strsplit(S, \"\\\\.\")\n  for (sentence in split_sentences[[1]]) {\n    if (substring(sentence,\
    \ 1, 2) == \"I \") {\n      boredoms <- boredoms + 1\n    }\n  }\n  return(boredoms)\n\
    }\nS = \"The sky is blue. The sun is shining. I love this weather.\"\nis_bored(S)\n",
  "\n  # Your code here\n}\n ", "\n  tokens <- strsplit(S, \"[!\\\\.\\\\?]\")[[1]]\n\
    \  length(which(tokens[-length(tokens)] == \"I\"))\n}\n", "\n    # Split the string\
    \ into a list of sentences\n    sentences <- unlist(strsplit(S, \"\\\\.|\\\\?|!\"\
    ))\n    # Count the number of sentences that begin with 'I'\n    sum(sapply(sentences,\
    \ grepl, pattern=\"^I \"))\n}\n\ntest_that(\"is_bored correctly identifies sentences\
    \ starting with 'I'\", {\n    expect_equal(is_bored(\"Hello world\"), 0)\n   \
    \ expect_equal(is_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    ), 1)\n    expect_equal(is_bored(\"I love you. You love me.\"), 2)\n})\n", "\n\
    \  # TODO your code here!\n}\n", "\n  # remove punctuation and split into words\n\
    \  S_clean <- unlist(strsplit(gsub(\"[^[:alnum:][:space:]]\", \"\", S), split\
    \ = \" \"))\n  # count the number of words that are \"I\"\n  sum(S_clean == \"\
    I\")\n}\n", "\n    # Total sentences\n    t_sent <- length(strsplit(gsub(\"[.?!]\"\
    , \".\", S), \" \")[[1]])\n    # Bored sentences\n    b_sent <- length(strsplit(gsub(\"\
    [.?!]\", \".\", S[grepl(\"I \", S)]), \" \")[[1]])\n    return(t_sent - b_sent)\n\
    }\n", "\n  sentences <- unlist(strsplit(S, '[.?!]'))\n  return(sum(grepl('^\\\\\
    s*I', sentences)))\n}\n ", "\n  # the total number of boredoms is the number of\
    \ words\n  # that follow 'I' and are delimited by '.', '?' or '!'\n  # use strsplit\
    \ to split the sentence into words, then sum the\n  # number of words following\
    \ 'I'\n  sum(cumsum(strsplit(S, \"[.?!]\")[[1]] == \"I\") > 0)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  patterns <- c(\"(.+)\\\\.\\\\s*([Ii]\\\\s+.+)\",\n            \
    \    \"(.+)\\\\?\\\\s*([Ii]\\\\s+.+)\",\n                \"(.+)\\\\!\\\\s*([Ii]\\\
    \\s+.+)\")\n  sum(grepl(patterns, S))\n}\n", "\n  # YOUR CODE HERE\n  S = strsplit(S,\
    \ \"\\\\.|\\\\?|\\\\!\")\n  S = unlist(S)\n  is_bored = c()\n  for (i in S) {\n\
    \    if (substr(i, 1, 1) == \"I\") {\n      is_bored = c(is_bored, 1)\n    }\n\
    \  }\n  return(sum(is_bored))\n}\n", "\n  # YOUR CODE HERE\n  return (length(grep(\"\
    ^I\",strsplit(S,\"\\\\.\")[[1]])))\n}\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n", "\n    # YOUR CODE HERE\n    count <- 0\n\
    \    if (length(regexpr(\"I\", S)) > 0) {\n      count <- count + 1\n    }\n \
    \   return(count)\n}\n", "\n    S <- strsplit(S, \"\\\\.|\\\\?|!\")[[1]]\n   \
    \ # [1] \"The sky is blue\" \" The sun is shining\" \" I love this weather\"\n\
    \n    S <- gsub(\"^ \", \"\", S)\n    # [1] \"The sky is blue\" \"The sun is shining\"\
    \ \"I love this weather\"\n\n    S <- gsub(\" I \", \" I\", S)\n    # [1] \"The\
    \ sky is blue\" \"The sun is shining\" \"I love this weather\"\n\n    boredoms\
    \ <- ifelse(grepl(\"^I\", S), 1, 0)\n    # [1] 0 0 1\n\n    sum(boredoms)\n}\n",
  "\n  return(count(strsplit(S, \"[.!?]\")[[1]], function(x) startsWith(x, \"I\")))\n\
    }\nis_bored('Hello world')\n\nis_bored('The sky is blue. The sun is shining. I\
    \ love this weather')\n\nis_bored('I should buy a new car. I really like my old\
    \ car. I have an old car. I have a new car')\n\nis_bored('I like apples. I like\
    \ pears. I like apples and pears. I like apples and pears and bananas')\n\nis_bored('The\
    \ sky is blue. The sun is shining. I love this weather. I love London')\n\nis_bored('I\
    \ like apples, pears and bananas')\n", "\n  # First, break the string into sentences.\n\
    \  S <- strsplit(S, split = '[.?!]')\n  # Second, count the number of sentences\
    \ that start with 'I'.\n  sum(startsWith(S, 'I '))\n}\n ", "\n  stringr::str_count(S,\
    \ \"^I\\\\s|\\\\?\\\\sI\\\\s|\\\\.\\\\sI\\\\s|\\\\!\\\\sI\\\\s\")\n}\n", "\n \
    \ length(gregexpr(\"^I\", unlist(strsplit(S, \"[!?.]\")))[[1]])\n}\n", "\n   \
    \ S <- tolower(S)\n    S <- gsub(\"\\\\p{Punct}\", \" \", S)\n    S <- gsub(\"\
    \ +\", \" \", S)\n    S <- gsub(\"^ \", \"\", S)\n    S <- gsub(\" $\", \"\",\
    \ S)\n    S <- unlist(strsplit(S, \" \"))\n    return(sum(S == \"i\"))\n}\n",
  "\n    words <- strsplit(S, \"[,\\\\s]+\")[[1]]\n    words <- words[words != \"\"\
    ]\n    return(sum(startsWith(words, \"I\")))\n}\nS <- \"The sky is blue. The sun\
    \ is shining. I love this weather\"\nis_bored(S)\n"]
stop_tokens:
- "\n#"
- "\n```"
