name: HumanEval_60_sum_to_n
language: r
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- sum_to_n\n    if(!identical(candidate(1),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(6), 21)){quit('no', 1)}\n    if(!identical(candidate(11),\
  \ 66)){quit('no', 1)}\n    if(!identical(candidate(30), 465)){quit('no', 1)}\n \
  \   if(!identical(candidate(100), 5050)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    # your code here\n}\n", "\n    sum <- 0\n    for (i in 1:n) {\n\
    \        sum <- sum + i\n    }\n    sum\n}\n", "\n  # initialise total to be 0\n\
    \  total <- 0\n  # for each integer from 1 to n\n  for (i in 1:n) {\n    # add\
    \ i to total\n    total <- total + i\n  }\n  # return total\n  return(total)\n\
    }\n", "\n  # your code here\n  return (sum(1:n))\n}\n", "\n  if (n == 1) {\n \
    \   return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n  }\n}\n", "\n   \
    \ sum_num <- 0\n    for (i in 1:n) {\n        sum_num <- sum_num + i\n    }\n\
    \    sum_num\n}\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n",
  "\n  sum(1:n)\n}\nsum_to_n(30)\n", "\n  return((n*(n+1))/2)\n}\n", "\n    if (n==1)\
    \ {\n        return(1)\n    } else {\n        return(n + sum_to_n(n-1))\n    }\n\
    }\nsum_to_n(5)\n\nsum_to_n(10)\n\nsum_to_n(1)\n\nsum_to_n(30)\n\nsum_to_n(100)\n",
  "\n  if (n<=1) {\n    n\n  } else {\n    n + sum_to_n(n-1)\n  }\n}\nsum_to_n(10)\n\
    \ ", "\n  sum_ <- 0\n  for (i in 1:n) {\n    sum_ <- sum_ + i\n  }\n  return(sum_)\n\
    }\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n\
    \ - 1))\n  }\n}", "\n\tsum <- 0\n\tfor (i in 1:n) {\n\t\tsum <- sum + i\n\t}\n\
    \treturn(sum)\n}\n", "\n    # your code here\n    sum_to_n = 0\n    for (i in\
    \ 1:n) {\n        sum_to_n = sum_to_n + i\n    }\n    return(sum_to_n)\n}\n",
  "\n    # code here\n    if(n==1){\n        return(1)\n    }\n    return(n+sum_to_n(n-1))\n\
    }\n ", "\n  if (n == 1) return(1)\n  return(n + sum_to_n(n-1))\n}\n", "\n  sum\
    \ = 0\n  for (i in 1:n) {\n    sum = sum + i\n  }\n  sum\n}\ncat(sum_to_n(30),\
    \ \"\\n\")\ncat(sum_to_n(100), \"\\n\")\ncat(sum_to_n(5), \"\\n\")\ncat(sum_to_n(10),\
    \ \"\\n\")\ncat(sum_to_n(1), \"\\n\")\n", "\n  return(sum(1:n))\n}", "\n  sum\
    \ <- 0\n  for (i in 1:n) {\n    sum <- sum + i\n  }\n  sum\n}\nsum_to_n(5)\n \n",
  "\n    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + i\n    }\n    sum\n}"]
stop_tokens:
- "\n#"
- "\n```"
