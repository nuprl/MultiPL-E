name: HumanEval_60_sum_to_n
language: r
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- sum_to_n\n    if(!identical(candidate(1),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(6), 21)){quit('no', 1)}\n    if(!identical(candidate(11),\
  \ 66)){quit('no', 1)}\n    if(!identical(candidate(30), 465)){quit('no', 1)}\n \
  \   if(!identical(candidate(100), 5050)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    # your code here\n}\n", "\n    sum <- 0\n    for (i in 1:n) {\n\
    \        sum <- sum + i\n    }\n    sum\n}\n", "\n  # initialise total to be 0\n\
    \  total <- 0\n  # for each integer from 1 to n\n  for (i in 1:n) {\n    # add\
    \ i to total\n    total <- total + i\n  }\n  # return total\n  return(total)\n\
    }\n", "\n  # your code here\n  return (sum(1:n))\n}\n", "\n  if (n == 1) {\n \
    \   return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n  }\n}\n", "\n   \
    \ sum_num <- 0\n    for (i in 1:n) {\n        sum_num <- sum_num + i\n    }\n\
    \    sum_num\n}\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n",
  "\n  sum(1:n)\n}\nsum_to_n(30)\n", "\n  return((n*(n+1))/2)\n}\n", "\n    if (n==1)\
    \ {\n        return(1)\n    } else {\n        return(n + sum_to_n(n-1))\n    }\n\
    }\nsum_to_n(5)\n\nsum_to_n(10)\n\nsum_to_n(1)\n\nsum_to_n(30)\n\nsum_to_n(100)\n",
  "\n  if (n<=1) {\n    n\n  } else {\n    n + sum_to_n(n-1)\n  }\n}\nsum_to_n(10)\n\
    \ ", "\n  sum_ <- 0\n  for (i in 1:n) {\n    sum_ <- sum_ + i\n  }\n  return(sum_)\n\
    }\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n\
    \ - 1))\n  }\n}", "\n\tsum <- 0\n\tfor (i in 1:n) {\n\t\tsum <- sum + i\n\t}\n\
    \treturn(sum)\n}\n", "\n    # your code here\n    sum_to_n = 0\n    for (i in\
    \ 1:n) {\n        sum_to_n = sum_to_n + i\n    }\n    return(sum_to_n)\n}\n",
  "\n    # code here\n    if(n==1){\n        return(1)\n    }\n    return(n+sum_to_n(n-1))\n\
    }\n ", "\n  if (n == 1) return(1)\n  return(n + sum_to_n(n-1))\n}\n", "\n  sum\
    \ = 0\n  for (i in 1:n) {\n    sum = sum + i\n  }\n  sum\n}\ncat(sum_to_n(30),\
    \ \"\\n\")\ncat(sum_to_n(100), \"\\n\")\ncat(sum_to_n(5), \"\\n\")\ncat(sum_to_n(10),\
    \ \"\\n\")\ncat(sum_to_n(1), \"\\n\")\n", "\n  return(sum(1:n))\n}", "\n  sum\
    \ <- 0\n  for (i in 1:n) {\n    sum <- sum + i\n  }\n  sum\n}\nsum_to_n(5)\n \n",
  "\n    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + i\n    }\n    sum\n}",
  "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n\
    \  }\n}\n", "\n  if (n == 1) return(1)\n  return(n + sum_to_n(n-1))\n}", "\n\t\
    a <- 1\n\tb <- n\n\tsum <- a + b\n\n\tif (n == 1) {\n\t\tsum <- 1\n\t}\n\tif (n\
    \ == 2) {\n\t\tsum <- 3\n\t}\n\tif (n > 2) {\n\t\tsum <- sum + sum_to_n(n-1)\n\
    \t}\n\tsum\n}\n\nsum_to_n(6)\n", "\n    sum <- 0\n    for (i in 1:n) {\n     \
    \   sum <- sum + i\n    }\n    return(sum)\n}\n", "\n    r <- 0\n    for (i in\
    \ 1:n) {\n        r <- r + i\n    }\n    return(r)\n}\nsum_to_n(30)\n", "\n  \
    \  if (n == 1) {\n        return(1)\n    } else {\n        return(n + sum_to_n(n-1))\n\
    \    }\n}\n", "\n    sum(seq(n))\n}\n \nsum_to_n(1)\nsum_to_n(10)\nsum_to_n(100)\n\
    \nsum_to_n(30)\n", "\n    if (n == 1) {\n        return (1)\n    } else {\n  \
    \      return (n + sum_to_n(n-1))\n    }\n}\n\nsum_to_n(5)\n", "\n    if (n==1)\
    \ {\n        return(1)\n    } else {\n        return(n + sum_to_n(n-1))\n    }\n\
    }", "\n  total <- 0\n  while (n > 0) {\n    total <- total + n\n    n <- n - 1\n\
    \  }\n  total\n}\n ", "\n  sum(1:n)\n}\n\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n",
  "\n  ## your code here.\n  S = 0\n  for (i in 1:n) {\n    S = S + i\n  }\n  S\n\
    }\n ", "\n    if (n == 1) {\n        return(1)\n    } else {\n        return(n\
    \ + sum_to_n(n-1))\n    }\n}\n\nsum_to_n(10)\n", "\n  ## TODO\n}\n", "\n    #\
    \ n is the number to sum to\n    sum(1:n)\n}\nsum_to_n(100)\n", "\n  # TO DO:\
    \ Insert your code here\n  if (n == 1) return(1)\n  return(n + sum_to_n(n-1))\n\
    }\n", "\n  ## Fill in your function body here\n}\n", "\n    sum(seq(n))\n}\n\n",
  "\n    sum <- 0\n    for (i in seq(1, n)){\n        sum <- sum + i\n    }\n    sum\n\
    }\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n\
    \  ## ... your code here ...\n}", "\n  if (n <= 1) {\n    return(n)\n  } else\
    \ {\n    n + sum_to_n(n - 1)\n  }\n}\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\n\
    sum_to_n(10)\nsum_to_n(1)\n", "\n  sum(1:n)\n}\n", "\n    sum(1:n)\n}\n", "\n\
    \    return (n*(n+1)/2)\n}\n ", "\n    sum(x = 1:n)\n}\n", "\n   \n    sum_of_n\
    \ <- 0 \n    if (n == 1) {\n        sum_of_n <- n\n    }\n    else {\n       \
    \ for (i in 1:n) {\n            sum_of_n <- sum_of_n + i\n        }\n    }\n \
    \   \n    return(sum_of_n)\n}\n\n\nsum_to_n(3)\nsum_to_n(30)\nsum_to_n(100)\n\
    sum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n    count <- 0\n    total <- 0\n\
    \    while (count < n) {\n        count <- count + 1\n        total <- total +\
    \ count\n    }\n    total\n}\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\n\
    sum_to_n(1)\n \n", "\n    sum <- 0\n    for (i in 1:n) {\n        sum <- sum +\
    \ i\n    }\n    sum\n}\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\n\
    sum_to_n(1)\n", "\n    return(n*(n+1)/2)\n}\n", "\n    return (sum(1:n))\n}\n\
    sum_to_n(5)\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n +\
    \ sum_to_n(n - 1))\n  }\n}\n", "\n  sum(1:n)\n}\n", "\n  sum <- 0\n  for (i in\
    \ 1:n) {\n    sum <- sum + i\n  }\n  sum\n}\n\nsum_to_n(30)\n\na <- c(1,3,6,2,3,2,1,3,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
  "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n\
    \  }\n}\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\n\
    print(sum_to_n(1))\n", "\n\treturn (sum(seq(1, n)))\n}", "\n  return(sum(1:n))\n\
    }\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n\
    \  sum(1:n)\n}\nsum_to_n(5)\n", "\n    if (n <= 1) return(n)\n    n + sum_to_n(n-1)\n\
    }\nsum_to_n(5)\n", "\n    if (n == 1) {\n        return(1)\n    } else {\n   \
    \     return(n + sum_to_n(n-1))\n    }\n}\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\n\
    sum_to_n(10)\nsum_to_n(1)\n", "\n    # add your code here\n    sum_num <- 0\n\
    \    for (i in 1:n) {\n        sum_num <- sum_num + i\n    }\n    return(sum_num)\n\
    }\n", "\n    sum <- 0\n    for (num in 1:n) {\n        sum <- sum + num\n    }\n\
    \    return(sum)\n}\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\n\
    sum_to_n(1)\n", "\n    if (n == 1) {\n        1\n    } else {\n        n + sum_to_n(n\
    \ - 1)\n    }\n}\n\nsum_to_n(100)\n", "\n  sum(1:n)\n}\n\nsum_to_n(30)\n", "\n\
    \    sum(seq(n))\n}\n", "\n    if (n == 1) {\n        return(1)\n    } else {\n\
    \        return(n + sum_to_n(n-1))\n    }\n}\n", "\n  sum(1:n)\n}\n", "\n    return(n*(n+1)/2)\n\
    }\n\n", "\n  if (n==1) return(1)\n  else return(n+sum_to_n(n-1))\n}", "\n  if\
    \ (n < 1) {\n    return(0)\n  } else {\n    return(n + sum_to_n(n - 1))\n  }\n\
    }\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n\
    \    s <- 0\n    for (i in 1:n) {\n        s <- s + i\n    }\n    return(s)\n\
    }\nsum_to_n(30)\n", "\n  ## your code here\n  sum_to_n <- function(n) {\n    if\
    \ (n == 1) {\n      return(1)\n    } else {\n      return(n + sum_to_n(n-1))\n\
    \    }\n  }\n}\n\nsum_to_n(1)\nsum_to_n(10)\nsum_to_n(100)\nsum_to_n(30)\n", "\n\
    \    i <- 1\n    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + i\n    }\n\
    \    return(sum)\n}\n", "\n    if (n == 1) {\n        return(1)\n    } else {\n\
    \        return(n + sum_to_n(n-1))\n    }\n}\n\nsum_to_n(30)\nsum_to_n(100)\n\
    sum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n  ### Your code here!\n}\n", "\n\
    \    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + i\n    }\n    return(sum)\n\
    }\n ", "\n    if (n==1) {\n        return(1)\n    } else {\n        return(n +\
    \ sum_to_n(n-1))\n    }\n}\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n\
    \    return(n + sum_to_n(n - 1))\n  }\n}\n\nsum_to_n(5)", "\n    sum <- 0\n  \
    \  for (i in 1:n) {\n        sum <- sum + i\n    }\n    sum\n}\nsum_to_n(30)\n",
  "\n  \n  # Initialize the sum variable.\n  total <- 0\n  \n  # Loop over the numbers\
    \ 1 to n.\n  for (i in 1:n) {\n    \n    # Add each number to the total.\n   \
    \ total <- total + i\n    \n  }\n  \n  # Return the total.\n  return(total)\n\
    \  \n}", "\n    if (n==1) {\n        return(1)\n    } else {\n        return(n\
    \ + sum_to_n(n-1))\n    }\n}\nsum_to_n(5)\n", "\n  n*(n+1)/2\n}\nsum_to_n(30)\n\
    sum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n    n * (n + 1) /\
    \ 2\n}\n", "\n  s <- 0\n  for (i in 1:n) {\n    s <- s + i\n  }\n  return(s)\n\
    }\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n\
    \    sum(seq(1, n))\n}\n\n", "\n  if (n <= 1) {\n    return(n)\n  } else {\n \
    \   return(n + sum_to_n(n - 1))\n  }\n}\n", "\n    sum <- 0\n    for (i in 1:n)\
    \ {\n        sum <- sum + i\n    }\n    sum\n}\nsum_to_n(30)\nsum_to_n(100)\n\
    sum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n  sum <- 0\n  for (i in 1:n) {\n\
    \    sum <- sum + i\n  }\n  return(sum)\n}\n", "\n    sum(1:n)\n}\n", "\n    n*(n+1)/2\n\
    }\nsum_to_n(3)\n ", "\n    if (n == 1) {\n        return(1)\n    } else {\n  \
    \      return(n + sum_to_n(n-1))\n    }\n}\nsum_to_n(5)\n", "\n  sum(seq(n))\n\
    }\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)", "\n \
    \   if (n < 1) {\n        stop(\"n must be greater than 1\")\n    } else if (n\
    \ == 1) {\n        1\n    } else {\n        n + sum_to_n(n - 1)\n    }\n}\nsum_to_n(30)\n\
    sum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n ", "\n    sum(seq(n))\n\
    }\n", "\n    return(sum(1:n))\n}\n\nsum_to_n(10)\n", "\n  total <- 0\n  for (num\
    \ in 1:n) {\n    total <- total + num\n  }\n  total\n}\n\n", "\n    \n}", "\n\
    \    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + i\n    }\n    return(sum)\n\
    }\n", "\n    sum_n <- n*(n+1)/2\n    print(sum_n)\n}\nsum_to_n(5)\n", "\n    return(ifelse(n==1,\
    \ 1, n + sum_to_n(n-1)))\n}\nsum_to_n(30)\n\nsum_to_n <- function(n) {\n    if\
    \ (n == 1) return(1)\n    return(n + sum_to_n(n-1))\n}\nsum_to_n(30)\n\nsum_to_n\
    \ <- function(n) {\n    if (n == 1) return(1)\n    sum <- n + sum_to_n(n-1)\n\
    \    return(sum)\n}\nsum_to_n(30)\n\nsum_to_n <- function(n) {\n    if (n == 1)\
    \ 1 else n + sum_to_n(n-1)\n}\nsum_to_n(30)", "\n    # Fill in your code here\n\
    \    sum(1:n)\n}\n", "\n\t## Your code here\n\treturn(NA)\n}\n", "\n  return(sum(seq(1,\
    \ n)))\n}\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n\
    \ - 1))\n  }\n}\n", "\n    # YOUR CODE HERE\n    sum(seq(1,n))\n}\n", "\n  sum(seq(n))\n\
    }\nsum_to_n(30)\n", "\n  sum(1:n)\n}\n\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\n\
    sum_to_n(10)\nsum_to_n(1)\n", "\n    sum(c(1:n))\n}", "\n    sum_to_n <- numeric(n)\
    \ # initialise the vector for for-loop\n    for (i in 1:n) {\n        sum_to_n[i]\
    \ <- i # assign 1 to n in the vector created\n    }\n    return(sum(sum_to_n))\
    \ # sum all the values in the vector\n}\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\n\
    sum_to_n(10)\nsum_to_n(1)\n", "\n    n * (n + 1) / 2\n}\nsum_to_n(30)\nsum_to_n(100)\n\
    sum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n  total <- 0\n  if (n >= 1) {\n\
    \    for (i in 1:n) {\n      total <- total + i\n    }\n  }\n  return(total)\n\
    }\n ", "\n  return(n*(n+1)/2)\n}\n", "\n    a <- 0\n    for (i in 1:n) {\n   \
    \     a <- a + i\n    }\n    a\n}\n", "\n  total <- 0\n  for (i in 1:n) {\n  \
    \  total <- total + i\n  }\n  return(total)\n}\n", "\n  if (n==1) {\n    return(1)\n\
    \  } else {\n    return(n + sum_to_n(n-1))\n  }\n}\n", "\n\treturn(sum(seq(n)))\n\
    }\n ", "\n  # your code here\n  res <- 0;\n  for (i in 1:n) {\n    res <- res\
    \ + i;\n  }\n  res;\n}\n\n", "\n    if (n == 1) {\n        return(1)\n    } else\
    \ {\n        return(n + sum_to_n(n-1))\n    }\n}\n", "\n  # Your code here\n \
    \ sum <- 0\n  for (i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n\n",
  "\n  ## Your code goes here.\n}", "\n    sum(seq(n))\n}\n", "\n  if (n == 1) {\n\
    \    return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n  }\n}\n", "\n  return\
    \ (n*(n+1)/2)\n}\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n\
    \ + sum_to_n(n - 1))\n  }\n}\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\n\
    print(sum_to_n(10))\nprint(sum_to_n(1))\n", "\n  sum_to_n_helper(n, 1)\n}\n\n\
    sum_to_n_helper <- function(n, num) {\n  if (num == n) {\n    return(num)\n  }\
    \ else {\n    return(num + sum_to_n_helper(n, num + 1))\n  }\n}\n\nsum_to_n(5)\n\
    sum_to_n(10)\nsum_to_n(1)\n", "\n    sum(1:n)\n}\n", "\n    # Fill in your function\
    \ body here\n    sum = 0\n    for (i in 1:n) {\n        sum = sum + i\n    }\n\
    \    return(sum)\n}\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\n\
    print(sum_to_n(10))\nprint(sum_to_n(1))\n", "\n  ## Fill in code here\n}", "\n\
    \  if (n == 1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n\
    \  }\n}\n", "\n  sum(1:n)\n}\nsum_to_n(30)\n", "\n    # YOUR CODE HERE\n    sum\
    \ = 0\n    for (i in 1:n) {\n        sum = sum + i\n    }\n    return(sum)\n}\n\
    \nsum_to_n(10)\n", "\n    total = 0\n    for (i in 1:n) {\n        total = total\
    \ + i\n    }\n    return(total)\n}\n\nsum_to_n(5)\n", "\n  sum(seq(n))\n}\nsum_to_n(30)\n\
    sum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n    ## replace this\
    \ comment with your code\n    total <- 0\n    for (i in 1:n) {\n        total\
    \ <- total + i\n    }\n    return(total)\n}\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\n\
    print(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))\n", "\n  out <- 0\n\
    \  for (i in 1:n) {\n    out <- out + i\n  }\n  return(out)\n}\n\nsum_to_n(30)\n",
  "\n    if (n == 1) {\n        return(1)\n    } else {\n        return(n + sum_to_n(n-1))\n\
    \    }\n}\nsum_to_n(30)\n", "\n    # Your code here\n    if(n==1){\n        return(1)\n\
    \    }\n    else{\n        return(n+sum_to_n(n-1))\n    }\n}\nprint(sum_to_n(30))\n\
    print(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))\n",
  "\n  sum(seq(n))\n}\n", "\n    if (n == 1) {\n        return(1)\n    } else {\n\
    \        return(n + sum_to_n(n-1))\n    }\n}\n", "\n    if (n == 1) {\n      \
    \  return(1)\n    } else {\n        return(n + sum_to_n(n-1))\n    }\n}\n", "\n\t\
    sum = 0\n\tfor (i in 1:n) {\n\t\tsum = sum + i\n\t}\n\tsum\n}", "\n\tsum(1:n)\n\
    }\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n\
    \  total <- 0\n  for (i in 1:n) {\n    total <- total + i\n  }\n  return(total)\n\
    }\n ", "\n}", "\n    total = 0;\n    for (i in 1:n) {\n        total = total +\
    \ i;\n    }\n    return(total);\n}\ncat(sum_to_n(1), sum_to_n(10), sum_to_n(30),\
    \ sum_to_n(100), sep = \"\\n\");\n", "\n    sum(1:n)\n}\n\n", "\n  # your code\
    \ here\n  if (n == 1) {\n    return(1)\n  }\n  else {\n    return(n + sum_to_n(n-1))\n\
    \  }\n}\n\nprint(sum_to_n(1))\n", "\n    if (n == 1) {\n        return(1)\n  \
    \  } else {\n        return(n + sum_to_n(n-1))\n    }\n}\n\nsum_to_n(30)\nsum_to_n(100)\n\
    sum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n    if (n == 1) {\n        return(1)\n\
    \    } else {\n        return(n + sum_to_n(n-1))\n    }\n}\nsum_to_n(100)\n",
  "\n  if (n == 1) return(1)\n  else return(n + sum_to_n(n-1))\n}\nsum_to_n(30)\n ",
  "\n    return(sum(seq(n)))\n}\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\n\
    print(sum_to_n(10))\nprint(sum_to_n(1))\n\ntest_that(\"test\", {\n  expect_true(identical(sum_to_n(30),\
    \ 465))\n  expect_true(identical(sum_to_n(100), 5050))\n  expect_true(identical(sum_to_n(5),\
    \ 15))\n  expect_true(identical(sum_to_n(10), 55))\n  expect_true(identical(sum_to_n(1),\
    \ 1))\n})\n", "\n    sum(1:n)\n}\nsum_to_n(1)\n ", "\n  sum(1:n)\n}", "\n  if\
    \ (n==1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n-1))\n  }\n}\n\
    \nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n\
    \    if (n < 1) {\n        return(0)\n    } else {\n        return(n + sum_to_n(n\
    \ - 1))\n    }\n}\n\nsum_to_n(5)", "\n  sum(1:n)\n}\nsum_to_n(5)\nsum_to_n(10)\n\
    sum_to_n(30)\nsum_to_n(100)\n", "\n  return((n*(n+1))/2)\n}\nsum_to_n(30)\n",
  "\n  if (n==1) {\n    return(1)\n  }\n  else{\n    return(n+sum_to_n(n-1))\n  }\n\
    }\n", "\n    if (n == 1) {\n        return(1)\n    } else {\n        return(n\
    \ + sum_to_n(n-1))\n    }\n}\nsum_to_n(10)\nsum_to_n(30)\nsum_to_n(1)\nsum_to_n(5)\n\
    sum_to_n(100)", "\n    sum(seq(1, n))\n}\n\n", "\n  ## check that n is greater\
    \ than 0:\n  if(n < 1) {\n    stop(\"n should be greater than 0\")\n  }\n  ##\
    \ add up the values:\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n\
    \  ## return the sum:\n  return(sum)\n}\n ", "\n    if (n > 0) {\n        return(n\
    \ + sum_to_n(n-1))\n    } else {\n        return(0)\n    }\n}\n", "\n    sum(1:n)\n\
    }\nsum_to_n(5)\n", "\n    if (n == 1) {\n        return (1)\n    } else {\n  \
    \      return (n + sum_to_n(n-1))\n    }\n}\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\n\
    sum_to_n(10)\nsum_to_n(1)\n", "\n    answer <- 0\n    for (i in 1:n) {\n     \
    \   answer <- answer + i\n    }\n    return(answer)\n}\n", "\n  sum(1:n)\n}\n\
    sum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)", "\n  n *\
    \ (n + 1) / 2\n}\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n\
    \ + sum_to_n(n - 1))\n  }\n}\n", "\n  return(sum(seq(n)))\n}\n ", "\n\t#your code\
    \ here\n\tsum <- 0\n\tfor (i in 1:n) {\n\t\tsum <- sum + i\n\t}\n\treturn(sum)\n\
    }\n", "\n  sum(seq(1, n))\n}", "\n    return(sum(1:n))\n}\n", "\n    sum = 0\n\
    \    for (i in 1:n) {\n        sum = sum + i\n    }\n    return(sum)\n}", "\n\
    \    if (n == 1) {\n        1\n    } else {\n        n + sum_to_n(n - 1)\n   \
    \ }\n}\n", "\n   if (n < 1) {\n      print(\"N less than 1!\")\n   } else {\n\
    \      sum <- 0\n      for (i in 1:n) {\n         sum <- sum + i\n      }\n  \
    \    return(sum)\n   }\n}\nsum_to_n(10)\n", "\n    sum(1:n)\n}\nsum_to_n(30)\n",
  "\n    sum_ <- 0\n\n    for (i in seq(n)) {\n        sum_ <- sum_ + i\n    }\n\n\
    \    return(sum_)\n}\n\nsum_to_n(30)\n\nsum_to_n(100)\n\nsum_to_n(5)\n\nsum_to_n(10)\n\
    \nsum_to_n(1)", "\n    sum <- 0\n    for (i in 1:n) {\n        sum <- sum + i\n\
    \    }\n    return(sum)\n}\nsum_to_n(100)\n", "\n    #your code here\n    return\
    \ (sum(1:n))\n    }\n", "\n  ### Edit your code here\n  sum(seq(1,n))\n  ###\n\
    }\nsum_to_n(30)\n", "\n  if (n == 1) {\n    return(1)\n  } else {\n    return(n\
    \ + sum_to_n(n - 1))\n  }\n}\nsum_to_n(5)\n", "\n\ttotal = 0\n\tfor (i in 1:n)\
    \ {\n\t\ttotal = total + i\n\t}\n\treturn(total)\n}\n", "\n  # your code here!\n\
    \  n * (n + 1) / 2\n}", "\n  return (n * (n + 1) / 2)\n}\n", "\n    sum(1:n)\n\
    }\n", "\n    return(sum(1:n))\n}\n", "\n  # if (n == 1) {\n  #   return 1\n  #\
    \ }\n  # else {\n  #   return (n+sum_to_n(n-1))\n  # }\n  if (n == 1) {\n    sum\
    \ <- 1\n  }\n  else {\n    sum <- (n+sum_to_n(n-1))\n  }\n  return (sum)\n}\n",
  "\n    return((n * (n + 1)) / 2)\n}\n ", "\n    sum <- 0\n    for (i in 1:n) {\n\
    \        sum <- sum + i\n    }\n    return(sum)\n}\n", "\n  total <- sum(1:n)\n\
    \  return(total)\n}\nsum_to_n(30)\n", "\n    s <- 0\n    for (i in 1:n) {\n  \
    \      s <- s + i\n    }\n    return(s)\n}\n", "\n    sum = 0\n    for (i in 1:n)\
    \ {\n        sum = sum + i\n    }\n    sum\n}\n", "\n  res <- 0\n  for (i in 1:n)\
    \ {\n    res <- res + i\n  }\n  return(res)\n}\nsum_to_n(30)\nsum_to_n(100)\n\
    sum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n  ## YOUR CODE HERE!\n  sum=0\n\
    \  i=1\n  while(i<=n){\n    sum=sum+i\n    i=i+1\n  }\n  sum\n}\n", "\n  #\n \
    \ # YOUR CODE HERE\n  #\n  res = 0\n  for (i in 1:n) {\n    res = res + i\n  }\n\
    \  return(res)\n}\nhead(iris)\n\nplot(iris)\n\nsummary(iris)\n\na <- 1\nb <- 2\n\
    \nif(a>b) {\n  print(\"a is larger than b\")\n} else {\n  print(\"b is larger\
    \ than a\")\n}\n\nfor (i in 1:5) {\n  print(paste(\"i is equal to \", i))\n}\n\
    \ni = 0\nwhile (i<5) {\n  print(paste(\"i is equal to \", i))\n  i = i + 1\n}\n\
    \na <- 1\nb <- 2\n\nif(a<b) {\n  print(\"a is smaller than b\")\n} else {\n  print(\"\
    b is smaller than a\")\n}\n\nfor (i in 1:5) {\n  print(paste(\"i is equal to \"\
    , i))\n}\n\ni = 0\nwhile (i<5) {\n  print(paste(\"i is equal to \", i))\n  i =\
    \ i + 1\n}\n", "\n    if (n < 0) {\n        stop(\"n cannot be negative\")\n \
    \   }\n    else if (n == 0) {\n        0\n    }\n    else {\n        n + sum_to_n(n\
    \ - 1)\n    }\n}\nsum_to_n(100)\n", "\n    total = 0\n    for (i in 1:n) {\n \
    \       total = total + i\n    }\n    return(total)\n}\n\nsum_to_n(30)\nsum_to_n(100)\n\
    sum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n    sum <- 0\n    for (i in 1:n)\
    \ {\n        sum <- sum + i\n    }\n    return(sum)\n}\nsum_to_n(30)\n", "\n \
    \ (n * (n + 1)) / 2\n}", "\n    ## Your code here\n    ##\n    ## Add a number\
    \ to a sum\n    s <- 0\n    for (i in 1:n) {\n    s <- s + i\n    }\n    return(s)\n\
    }\n\nsum_to_n(30)\n", "\n  if (n==1) {\n    return(1)\n  } else {\n    return(n\
    \ + sum_to_n(n-1))\n  }\n}\nsum_to_n(30)\n"]
stop_tokens:
- "\n#"
- "\n```"
