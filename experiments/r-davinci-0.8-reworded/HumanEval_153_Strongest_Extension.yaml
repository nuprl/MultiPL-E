name: HumanEval_153_Strongest_Extension
language: r
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))\n# 'my_class.AA'\n\
  Strongest_Extension <- function(class_name, extensions) {"
tests: "test_humaneval <- function() {\ncandidate <- Strongest_Extension\n    if(!identical(candidate('Watashi',\
  \ c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')){quit('no', 1)}\n    if(!identical(candidate('Boku123',\
  \ c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')){quit('no',\
  \ 1)}\n    if(!identical(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00',\
  \ 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')){quit('no', 1)}\n    if(!identical(candidate('K',\
  \ c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')){quit('no', 1)}\n    if(!identical(candidate('__HAHA',\
  \ c('Tab', '123', '781345', '-_-')), '__HAHA.123')){quit('no', 1)}\n    if(!identical(candidate('YameRore',\
  \ c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')){quit('no',\
  \ 1)}\n    if(!identical(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')),\
  \ 'finNNalLLly.WoW')){quit('no', 1)}\n    if(!identical(candidate('_', c('Bb', '91245')),\
  \ '_.Bb')){quit('no', 1)}\n    if(!identical(candidate('Sp', c('671235', 'Bb')),\
  \ 'Sp.671235')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  cap_sm_ratio <- function(s) {\n    return(sum(grep('[A-Z]', s))\
    \ - sum(grep('[a-z]', s)))\n  }\n  s_ratios <- sapply(extensions, cap_sm_ratio)\n\
    \  strongest_extension <- extensions[which.max(s_ratios)]\n  return(paste(class_name,\
    \ strongest_extension, sep='.'))\n}", "\n    # uppercase <- nchar(gsub(\"[^A-Z]\"\
    , \"\", class_name))\n    # lowercase <- nchar(gsub(\"[^a-z]\", \"\", class_name))\n\
    \    # strength <- uppercase - lowercase\n    # if(strength >= 0) {\n    #   return(c(class_name,\
    \ extensions[1]))\n    # } else {\n    #   return(c(class_name, extensions[2]))\n\
    \    # }\n    \n    class_caps <- nchar(gsub(\"[^A-Z]\", \"\", class_name))\n\
    \    class_sm <- nchar(gsub(\"[^a-z]\", \"\", class_name))\n    class_strength\
    \ <- class_caps - class_sm\n    \n    # Calculate the strength for each of the\
    \ extensions.\n    extension_strengths <- extension_strengths <- lapply(extensions,\
    \ function(ext) {\n      ext_caps <- nchar(gsub(\"[^A-Z]\", \"\", ext))\n    \
    \  ext_sm <- nchar(gsub(\"[^a-z]\", \"\", ext))\n      ext_strength <- ext_caps\
    \ - ext_sm\n      return(ext_strength)\n    })\n    \n    # If the strength of\
    \ class is less than the strength of the first extension,\n    # return the concatenation\
    \ of class_name and the first extension. Otherwise,\n    # return the concatenation\
    \ of class_name and the second extension.\n    if(class_strength < extension_strengths[[1]])\
    \ {\n      return(paste(class_name, extensions[1], sep = \".\"))\n    } else {\n\
    \      return(paste(class_name, extensions[2], sep = \".\"))\n    }\n}\n", "\n\
    \    extension_names = strsplit(extensions, \"\")\n    caps = sapply(extension_names,\
    \ function(ext) {sum(is.na(match(ext, c(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"))))})\n   \
    \ lower = sapply(extension_names, function(ext) {sum(is.na(match(ext, c(\"A\"\
    , \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"\
    , \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\"))))})\n    strength = caps - lower\n    strength = as.data.frame(strength)\n\
    \    names(strength) = extensions\n    return(paste(class_name, names(strength[order(strength$strength,\
    \ decreasing = TRUE)[1], ]), sep = \".\"))\n}\n", "\n\textensions <- sapply(extensions,\
    \ function(x) {\n\t\tn_upper <- length(grep(\"[A-Z]\", x))\n\t\tn_lower <- length(grep(\"\
    [a-z]\", x))\n\t\treturn (n_upper - n_lower)\n\t})\n\textensions <- names(which.max(extensions))\n\
    \treturn (paste(class_name, extensions, sep = \".\"))\n}\n", "\n    strengths\
    \ <- sapply(extensions, function(x) {sum(is.upper.tri(x)) - sum(is.lower.tri(x))})\n\
    \    class_name <- paste(class_name, extensions[which.max(strengths)], sep = '.')\n\
    \    return(class_name)\n}\n", "\n  # Your code here\n  strengthes <- sapply(extensions,\
    \ function(extension) {\n      n_lowercase <- length(grep(\"[a-z]\", extension))\n\
    \      n_uppercase <- length(grep(\"[A-Z]\", extension))\n      return(n_uppercase\
    \ - n_lowercase)\n  })\n  class_name <- as.character(class_name)\n  strongest_extension\
    \ <- extensions[which.max(strengthes)]\n  return(paste(class_name, strongest_extension,\
    \ sep = \".\"))\n}", "\n    # Your code goes here\n    \n}\n", "\n    strengths\
    \ <- sapply(extensions, FUN = function(x)\n        sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]',\
    \ x)))\n    class_name <- paste(class_name, extensions[which.max(strengths)],\
    \ sep = '.')\n    return(class_name)\n}\nclass_name <- 'Slices'\nextensions <-\
    \ c('SErviNGSliCes', 'Cheese', 'StuFfed')\nresult <- Strongest_Extension(class_name,\
    \ extensions)\nprint(result)", "\n    ext_strength <- lapply(extensions, function(x)\
    \ {\n        num_uppercase <- sum(stri_count_regex(x, '[[:upper:]]'))\n      \
    \  num_lowercase <- sum(stri_count_regex(x, '[[:lower:]]'))\n        return(num_uppercase\
    \ - num_lowercase)\n    })\n    max_ext_strength <- max(unlist(ext_strength))\n\
    \    max_ext_index <- which(unlist(ext_strength) == max_ext_strength)\n    return(paste(class_name,\
    \ '.', extensions[max_ext_index], sep=''))\n}", "\n    strengths <- sapply(extensions,\
    \ function(ext) {\n        return(length(grep(\"[A-Z]\", ext)) - length(grep(\"\
    [a-z]\", ext)))\n    })\n    return(paste(class_name, extensions[order(strengths,\
    \ decreasing = TRUE)[1]], sep=\".\"))\n}", "\n    ## Return class_name.extension_name\n\
    \    strength <- function(x) {\n        x <- unlist(strsplit(x, split=\"\"))\n\
    \        ucase <- grep('[[:upper:]]', x)\n        lcase <- grep('[[:lower:]]',\
    \ x)\n        return(length(ucase) - length(lcase))\n    }\n    strongest <- which.max(lapply(extensions,\
    \ strength))\n    return(paste(class_name, extensions[strongest], sep='.'))\n\
    }\n", "\n  class_name_a <- as.character(class_name)\n  extension_a <- as.character(extensions)\n\
    \  list.strength <- c()\n  list.strength <- as.numeric(list.strength)\n  for (i\
    \ in 1:length(extension_a)){\n    list.strength[i] <- -abs(count_upper(extension_a[i])\
    \ - count_lower(extension_a[i]))\n  }\n  extension_a <- extension_a[list.strength==max(list.strength)]\n\
    \  return(paste(class_name_a, extension_a[1], sep = \".\"))\n}", "\n  # Your code\
    \ here\n  number_of_uppercase <- function(extension) {\n    length(grep(\"[A-Z]\"\
    , extension))\n  }\n  number_of_lowercase <- function(extension) {\n    length(grep(\"\
    [a-z]\", extension))\n  }\n  strength <- function(extension) {\n    number_of_uppercase(extension)\
    \ - number_of_lowercase(extension)\n  }\n  strengths <- sapply(extensions, strength)\n\
    \  strongest_extension <- which.max(strengths)\n  class_name %+% paste0(\".\"\
    , extensions[strongest_extension])\n}\n", "\n\tx <- length(grep(\"[[:upper:]]\"\
    , extensions)) - length(grep(\"[[:lower:]]\", extensions))\n\tx <- cbind(x, extensions)\n\
    \tx <- x[order(x[,1], decreasing = T),]\n\tx <- paste(class_name, x[1,2], sep\
    \ = \".\")\n\treturn(x)\n}", "\n    # Complete this function body\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "\n  strengths <- sapply(extensions, function(e) {\n    sum(str_detect(e,\
    \ \"[A-Z]\")) - sum(str_detect(e, \"[a-z]\"))\n  })\n  class_name <- paste0(class_name,\
    \ \".\", extensions[which.max(strengths)])\n  return(class_name)\n}\n", "\n  final_extension_index\
    \ <- which.max(extensions %>% str_count('[A-Z]') - \n                        \
    \                    str_count('[a-z]'))\n  paste0(class_name, '.', extensions[final_extension_index])\n\
    }", "\n  upper <- gsub(\"[[:lower:]]\", \"\", extensions)\n  lower <- gsub(\"\
    [[:upper:]]\", \"\", extensions)\n  strength <- as.numeric(nchar(upper)) - as.numeric(nchar(lower))\n\
    \  ind <- which.max(strength)\n  return(paste(class_name, extensions[ind], sep\
    \ = \".\"))\n}\n ", "\n    class_name <- strsplit(class_name, '.')[[1]][length(strsplit(class_name,\
    \ '.')[[1]])]\n    extension_strengths <- sapply(extensions, function(extension)\
    \ {\n        return(length(grep('[A-Z]', extension)) - length(grep('[a-z]', extension)))\n\
    \    })\n    class_name <- paste(class_name, extensions[which.max(extension_strengths)],\
    \ sep = '.')\n    return(class_name)\n}\n", "\n  # Add your code here\n  #print(class_name)\n\
    \  #print(extensions)\n  #print(extensions[1])\n  #print(extensions[2])\n  #print(extensions[3])\n\
    \  length_ext=length(extensions)\n  #print(length_ext)\n  CAP_max=0\n  SM_max=100\n\
    \  strength_max=0\n  ext_max=0\n  i=1\n  while(i<=length_ext){\n    CAP_i=0\n\
    \    SM_i=0\n    #print(extensions[i])\n    chars_i=strsplit(extensions[i], \"\
    \")[[1]]\n    #print(chars_i)\n    length_i=length(chars_i)\n    #print(length_i)\n\
    \    j=1\n    while(j<=length_i){\n      if(chars_i[j]==toupper(chars_i[j])){\n\
    \        CAP_i=CAP_i+1\n      }else{\n        SM_i=SM_i+1\n      }\n      j=j+1\n\
    \    }\n    #print(CAP_i)\n    #print(SM_i)\n    if(CAP_i-SM_i>strength_max){\n\
    \      strength_max=CAP_i-SM_i\n      ext_max=extensions[i]\n    }\n    i=i+1\n\
    \  }\n  #print(strength_max)\n  #print(ext_max)\n  class_name=paste(class_name,\"\
    .\",ext_max,sep=\"\")\n  return(class_name)\n}\n", "\n  strongest_ext <- NULL\n\
    \  strength <- 0\n  for (ext in extensions) {\n    if ( strength < (nchar(ext,\
    \ 'character') - nchar(gsub('[A-Z]', '', ext), 'character')) ) {\n      strength\
    \ <- nchar(ext, 'character') - nchar(gsub('[A-Z]', '', ext), 'character')\n  \
    \    strongest_ext <- ext\n    }\n  }\n  paste(class_name, '.', strongest_ext,\
    \ sep = '')\n}\n", "\n    names(extensions) <- toupper(extensions)\n    class_name\
    \ <- paste(class_name, '.', extensions[1], sep = '')\n    return(class_name)\n\
    }", "\n  # SOLUTION\n  fractions <- sapply(extensions, function(x) sum(startsWith(x,\
    \ LETTERS)) - sum(startsWith(x, letters)))\n  class_name <- paste(class_name,\
    \ extensions[which.max(fractions)], sep='.')\n  return(class_name)\n}", "\n  \
    \  # Your code goes here\n    #Extracts number of uppercase letters and number\
    \ of lowercase letters\n    #from each extension, and compares the values to get\
    \ the strongest \n    #extension.\n    cn <- regexpr(\"[[:upper:]]\", extensions)\n\
    \    cn2 <- regexpr(\"[[:lower:]]\", extensions)\n    strength <- nchar(extensions[cn])\
    \ - nchar(extensions[cn2])\n    ind <- which.max(strength)\n    paste(class_name,\
    \ \".\", extensions[ind], sep = \"\")\n}", "\n    if(length(extensions) == 0)\n\
    \        return(class_name)\n    strs <- sapply(extensions, function(x) { sum(grepl('[A-Z]',\
    \ x)) - sum(grepl('[a-z]', x)) })\n    class_name = paste(class_name, extensions[which.max(strs)],\
    \ sep = '.')\n    return(class_name)\n}", "\n  # your code here\n}\n", "\n  ##\
    \ get uppercase and lowercase letters for each extension\n  cl<-gsub('[A-Z]','A',extensions)\n\
    \  cl<-gsub('[a-z]','b',cl)\n  ## calculate the fraction\n  fraction<-str_count(extensions,'[A-Z]')-str_count(extensions,'[a-z]')\n\
    \  ## find the maximum fraction\n  ext<-max(fraction)\n  ## find its position\
    \ in the list\n  pos<-which(fraction==ext)\n  ## return the extension name with\
    \ the maximum fraction\n  cat(paste(class_name,'.',extensions[pos],sep=''))\n}",
  "\n  num_upper <- function(string) {\n    paste(nchar(string), collapse = '')\n\
    \  }\n  num_lower <- function(string) {\n    paste(nchar(string), collapse = '')\n\
    \  }\n  p <- function(extension) {\n    return(num_upper(extension) - num_lower(extension))\n\
    \  }\n  x <- extensions[which.max(sapply(extensions, p))]\n  return(paste(class_name,\
    \ x, sep = '.'))\n}\n", "\n  class_name <- as.character(class_name)\n  extensions\
    \ <- as.character(extensions)\n  class_name <- paste(class_name, sep = \".\")\n\
    \  strongest_idx <- 1\n  strongest_strength <- 0\n  for (i in 1:length(extensions))\
    \ {\n    ext <- extensions[i]\n    strength <- sum(stri_count_regex(ext, '[A-Z]'))\
    \ - sum(stri_count_regex(ext, '[a-z]'))\n    if (strength > strongest_strength)\
    \ {\n      strongest_idx <- i\n      strongest_strength <- strength\n    }\n \
    \ }\n  paste(class_name, extensions[strongest_idx], sep = \"\")\n}\n", "\n   \
    \ class_name <- paste(class_name, \".\", sep = \"\")\n    extension_strengths\
    \ <- list()\n    for (extension in extensions) {\n        extension_strengths[[extension]]\
    \ <- sum(stri_count_regex(extension, \"[A-Z]\") - stri_count_regex(extension,\
    \ \"[a-z]\"))\n    }\n    # If two strengths are the same, the first element has\
    \ priority\n    extension_strengths <- sort(extension_strengths, decreasing =\
    \ TRUE)\n    class_name <- paste(class_name, names(extension_strengths[1]), sep\
    \ = \"\")\n    return(class_name)\n}\n", "\n  # Calculate number of uppercase\
    \ and lowercase letters in each extension\n  N_upper = sapply(extensions, function(x)\
    \ sum(stri_detect_regex(x, \"[A-Z]\")))\n  N_lower = sapply(extensions, function(x)\
    \ sum(stri_detect_regex(x, \"[a-z]\")))\n  # Calculate extension strength\n  strength\
    \ = N_upper - N_lower\n  # Choose the strongest extension\n  strongest_extension\
    \ = extensions[which.max(strength)]\n  return(paste(class_name, \".\", strongest_extension,\
    \ sep = \"\"))\n}\n", "\n    strongest_extension <- ''\n    max_strength <- -2\n\
    \    for (extension in extensions) {\n        strength <- (sum(extension %in%\
    \ LETTERS) - sum(extension %in% letters))/nchar(extension)\n        if (strength\
    \ > max_strength) {\n            max_strength <- strength\n            strongest_extension\
    \ <- extension\n        }\n    }\n    class_name.strongest_extension <- paste(class_name,\
    \ strongest_extension, sep = '.')\n    return(class_name.strongest_extension)\n\
    }\n", "\n  'your code here'\n}\n ", "\n    strengths <- lapply(extensions, function(extension)\
    \ {\n        sum(grepl('[A-Z]', extension)) - sum(grepl('[a-z]', extension))\n\
    \    })\n    pos <- order(strengths, decreasing = TRUE)\n    paste(class_name,\
    \ extensions[pos[1]], sep = '.')\n}\n", "\n    largest_strength <- -Inf\n    strongest_extension\
    \ <- ''\n    for (extension in extensions) {\n        strength <- length(grep('[A-Z]',\
    \ extension)) - length(grep('[a-z]', extension))\n        if (strength > largest_strength)\
    \ {\n            largest_strength <- strength\n            strongest_extension\
    \ <- extension\n        }\n    }\n    return(paste(class_name, strongest_extension,\
    \ sep = '.'))\n}", "\n  # get all caps\n  caps <- gsub(\"[^A-Z]\", \"\", extensions)\n\
    \  # get all smalls\n  smalls <- gsub(\"[^a-z]\", \"\", extensions)\n  # substract\n\
    \  # Calculate strength:\n  strength <- (nchar(caps) - nchar(smalls)) / nchar(extensions)\n\
    \  # get the highest strength\n  highest_strength <- which.max(strength)\n  paste(class_name,\
    \ extensions[highest_strength], sep = \".\")\n}", "\n    \n}\n", "\n  extension_strength\
    \ <- function(x) {\n    a <- sum(grepl('[A-Z]', x))\n    b <- sum(grepl('[a-z]',\
    \ x))\n    return(a - b)\n  }\n  return(paste(class_name, extensions[which.max(sapply(extensions,\
    \ extension_strength))], sep = '.'))\n}", "\n    class_name <- as.character(class_name)\n\
    \    extensions <- as.character(extensions)\n    strengths <- (nchar(gsub(\"[^A-Z]\"\
    , \"\", extensions)) - nchar(gsub(\"[^a-z]\", \"\", extensions)))\n    strongest_extension\
    \ <- extensions[order(strengths, extensions)][1]\n    paste(class_name, \".\"\
    , strongest_extension, sep = \"\")\n}\n", "\n\text_strengths <- sapply(extensions,\
    \ function(ext) {\n\t\tNUpper <- length(grep(\"[A-Z]\", ext))\n\t\tNLower <- length(grep(\"\
    [a-z]\", ext))\n\t\tNUpper - NLower\n\t})\n\treturn(paste(class_name, extensions[which.max(ext_strengths)],\
    \ sep = \".\"))\n}", "\n    c_name <- c(class_name)\n    stren <- numeric(0)\n\
    \    for (i in 1:length(extensions)) {\n        stren[i] <- (sum(extensions[i]\
    \ %in% LETTERS) - \n                    sum(extensions[i] %in% letters))\n   \
    \ }\n    n <- which.max(stren)\n    return(paste(c_name, extensions[n], sep =\
    \ \".\"))\n}\n", "\n    strengths <- numeric(length(extensions))\n    for (i in\
    \ 1:length(extensions)) {\n        strengths[i] <- sum(unlist(strsplit(extensions[i],\
    \ '')) ==\n            toupper(unlist(strsplit(extensions[i], '')))) - \n    \
    \        sum(unlist(strsplit(extensions[i], '')) ==\n            tolower(unlist(strsplit(extensions[i],\
    \ ''))))\n    }\n    strongest <- which.max(strengths)\n    if (length(strengths[strengths\
    \ == strengths[strongest]]) > 1) {\n        strongest <- which.min(which(strengths\
    \ == strengths[strongest]))\n    }\n    paste(class_name, extensions[strongest],\
    \ sep = '.')\n}\n ", "\n  uppers <- length(grep(\"[[:upper:]]\", extensions))\n\
    \  lowers <- length(grep(\"[[:lower:]]\", extensions))\n  if (uppers == 0)\n \
    \   class_name\n  else if (lowers == 0)\n    paste(class_name, extensions[1],\
    \ sep = \".\")\n  else {\n    ratios <- uppers / lowers\n    strongest <- which.max(ratios)\n\
    \    paste(class_name, extensions[strongest], sep = \".\")\n  }\n}", "\n  \n \
    \ # Example : 'my_class.AA'\n  return(paste(class_name,'.',extensions[which.max(gsub('[a-z]','',extensions)-gsub('[A-Z]','',extensions))],sep\
    \ = ''))\n}\n", "\n    # Your code goes here\n    ext_strength <- numeric(length(extensions))\n\
    \    for (i in 1:length(extensions)) {\n        ext_strength[i] <- length(grep(\"\
    [A-Z]\", extensions[i]))-length(grep(\"[a-z]\", extensions[i]))\n    }\n    for\
    \ (i in 1:length(extensions)) {\n        if (ext_strength[i] == max(ext_strength))\
    \ {\n            class_name <- paste(class_name, extensions[i], sep = \".\")\n\
    \            break\n        }\n    }\n    return(class_name)\n}\n", "\n  class_name\
    \ <- as.character(class_name)\n  extensions <- as.character(extensions)\n  cap\
    \ <- gsub(\"[[:lower:]]\", \"\", extensions)\n  sm <- gsub(\"[[:upper:]]\", \"\
    \", extensions)\n  ifelse(nchar(cap) > nchar(sm),\n         paste(class_name,\
    \ cap[1], sep = \".\"),\n         paste(class_name, sm[1], sep = \".\"))\n}\n",
  "\n    extension_strength <- function(extension) {\n        as.numeric(sum(stri_count_fixed(extension,\
    \ \"[A-Z]\"))) - \n            as.numeric(sum(stri_count_fixed(extension, \"[a-z]\"\
    )))\n    }\n    strongest_extension <- names(sort(extension_strength(extensions)))[1]\n\
    \    return(paste(class_name, \".\", strongest_extension, sep = \"\"))\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n\t# Your code here\n  # create empty data frame\
    \ to store CAP and SM for each extension\n  output <- data.frame(\"Extension\"\
    \ = character(), \"CAP\" = numeric(), \"SM\" = numeric())\n  # loop through all\
    \ the extensions\n  for (extension in extensions) {\n    CAP = 0\n    SM = 0\n\
    \    # loop through each letter in each extension\n    for (letter in strsplit(extension,\
    \ \"\")[[1]]) {\n      # if uppercase, add 1 to CAP\n      if (grepl(\"[A-Z]\"\
    , letter)) {\n        CAP = CAP + 1\n      } else {\n        # if lowercase, add\
    \ 1 to SM\n        SM = SM + 1\n      }\n    }\n    # if extension is of length\
    \ 1\n    if (CAP == 0 & SM == 0) {\n      output = rbind(output, c(extension,\
    \ NA, NA))\n    } else {\n      # if either CAP or SM is 0, replace with NA\n\
    \      if (CAP == 0) {\n        CAP = NA\n      }\n      if (SM == 0) {\n    \
    \    SM = NA\n      }\n      # add to data frame\n      output = rbind(output,\
    \ c(extension, CAP, SM))\n    }\n  }\n  # calculate the strength\n  output$Strength\
    \ = output$CAP - output$SM\n  # order by strength\n  output = output[order(output$Strength,\
    \ output$Extension), ]\n  # return the result\n  paste(class_name, output$Extension[1],\
    \ sep = \".\")\n}", "\n  if (length(extensions) == 0) {\n    return(class_name)\n\
    \  }\n  strength <- function(x) {sum(letters %in% toupper(x)) - sum(letters %in%\
    \ tolower(x))}\n  strengths <- sapply(extensions, strength)\n  ext <- extensions[which.max(strengths)]\n\
    \  return(paste(class_name, ext, sep = '.'))\n}\n", "\n  # Concatenate the class\
    \ name and the extensions\n  extended_class <- c(class_name, extensions)\n  #\
    \ Create the function that we will use to calculate the strength of the extensions\n\
    \  calculate_strength <- function(extension) {\n    # Extract the numbers of upper\
    \ and lowercase letters in the extension\n    num_uppercase <- str_count(extension,\
    \ \"[A-Z]\")\n    num_lowercase <- str_count(extension, \"[a-z]\")\n    # Calculate\
    \ the strength of the extension\n    strength <- num_uppercase - num_lowercase\n\
    \    return(strength)\n  }\n  # Apply the function to all the extensions in the\
    \ vector\n  strengths <- sapply(extensions, calculate_strength)\n  # Find the\
    \ strongest extension\n  strongest_extension <- extensions[which.max(strengths)]\n\
    \  # Concatenate the class name and the strongest extension\n  full_class_name\
    \ <- paste(class_name, strongest_extension, sep = \".\")\n  return(full_class_name)\n\
    }\n", "\n    n <- length(extensions)\n    scores <- rep(0, n)\n    for (i in 1:n)\
    \ {\n        scores[i] <- Strongest_Extension_helper(extensions[i])\n    }\n \
    \   return(paste(class_name, extensions[which.max(scores)], sep = '.'))\n}\nStrongest_Extension_helper\
    \ <- function(ext) {\n    return(sum(stri_count_regex(ext, '[A-Z]')) - sum(stri_count_regex(ext,\
    \ '[a-z]')))\n}\nclass_name <- 'my_class'\nextensions <- c('AA', 'Be', 'CC')\n\
    Strongest_Extension(class_name, extensions)\n", "\n    class_name <- as.character(class_name)\n\
    \    extensions <- as.character(extensions)\n    num_extensions <- length(extensions)\n\
    \    CAP <- rep(0, num_extensions)\n    SM <- rep(0, num_extensions)\n    for\
    \ (i in 1:num_extensions) {\n        CAP[i] <- sum(grepl(\"[A-Z]\", extensions[i]))\n\
    \        SM[i] <- sum(grepl(\"[a-z]\", extensions[i]))\n    }\n    strengths <-\
    \ as.numeric(CAP - SM)\n    ind <- which.max(strengths)\n    return(paste(class_name,\
    \ extensions[ind], sep = \".\"))\n}", "\n  strongest_extension <- 'None'\n  strongest_extension_strength\
    \ <- 0\n  for (extension in extensions) {\n    strength <- sum(extension %in%\
    \ letters) - sum(extension %in% LETTERS)\n    if (strength > strongest_extension_strength)\
    \ {\n      strongest_extension <- extension\n      strongest_extension_strength\
    \ <- strength\n    }\n  }\n  paste(class_name, strongest_extension, sep = '.')\n\
    }\n", "\n    strengths <- as.vector(unlist(lapply(extensions, function(ext) sum(grepl(\"\
    [A-Z]\", ext))) - sum(grepl(\"[a-z]\", ext))))\n    return(paste(class_name, extensions[which.max(strengths)],\
    \ sep = \".\"))\n}\n", "\n  #your code here\n  CAP <- sapply(extensions, FUN =\
    \ function(x) {length(grep(\"[A-Z]\", x))})\n  SM <- sapply(extensions, FUN =\
    \ function(x) {length(grep(\"[a-z]\", x))})\n  f <- sum(CAP) - sum(SM)\n  print(f)\n\
    \  return(paste(class_name, extensions[which.max(CAP-SM)], sep = \".\"))\n}\n ",
  "\n  my_list = list()\n  for (element in extensions) {\n    strength = sum(stri_count_regex(element,\
    \ fixed('[A-Z]'))) - \n               sum(stri_count_regex(element, fixed('[a-z]')))\n\
    \    my_list[[element]] = strength\n  }\n  ordered_list = sort(my_list, decreasing\
    \ = TRUE)\n  return(paste(class_name, names(ordered_list[1]), sep = '.'))\n}\n\
    my_class = 'my_class'\nextensions = c('AA', 'Be', 'CC')\n(Strongest_Extension(my_class,\
    \ extensions))\n", "\n  # your code goes here\n  # find the strongest\n  # find\
    \ the first strongest\n  # concatenate\n  # return a string\n  return(paste(class_name,\
    \ extensions[which.max(sum(stri_count_fixed(extensions, \"[A-Z]\")) - sum(stri_count_fixed(extensions,\
    \ \"[a-z]\")))], sep = \".\"))\n}\n ", "\n  # Your code goes here\n  extension_strength\
    \ <- c()\n  for (i in extensions) {\n    upper <- nchar(gsub(\"[^A-Z]\", \"\"\
    , i))\n    lower <- nchar(gsub(\"[^a-z]\", \"\", i))\n    strength <- upper -\
    \ lower\n    extension_strength <- c(extension_strength, strength)\n  }\n  strongest_extension\
    \ <- extensions[which.max(extension_strength)]\n  return(paste(class_name, strongest_extension,\
    \ sep = \".\"))\n}\n", "\n  return (paste0(class_name, \".\", max(extensions,\
    \ function(x) {\n    return (sum(grepl(\"[A-Z]\", x))) - sum(grepl(\"[a-z]\",\
    \ x))\n  })))\n}", "\n    #extensions <- c('SErviNGSliCes', 'Cheese', 'StuFfed')\n\
    \    #class_name <- 'Slices'\n    # your code goes here\n    strength <- function(x)\
    \ {\n        CAP <- sum(stri_count_fixed(x, '[[:upper:]]'))\n        SM <- sum(stri_count_fixed(x,\
    \ '[[:lower:]]'))\n        return(CAP - SM)\n    }\n    count <- lapply(extensions,\
    \ strength)\n    return(paste(class_name, extensions[order(count, decreasing =\
    \ TRUE)[1]], sep = '.'))\n}\n", "\n    # Let's convert everything to upper case,\
    \ so we don't have to worry about it\n    # later.\n    extensions = toupper(extensions)\n\
    \    # We will use the 2nd index in the list to store the strength\n    strengths\
    \ = numeric(length(extensions))\n    for (i in 1:length(extensions)) {\n     \
    \   strengths[i] = sum(extensions[i] %in% LETTERS) - \n            sum(extensions[i]\
    \ %in% letters)\n    }\n    strongest_index = which.max(strengths)\n    paste(class_name,\
    \ extensions[strongest_index], sep = '.')\n}\n", "\n  exts <- lapply(extensions,\
    \ function(ext){\n    cap <- sum(grepl('[A-Z]', ext))\n    sm <- sum(grepl('[a-z]',\
    \ ext))\n    c(strength = cap - sm, ext = ext)\n  })\n  exts <- do.call(rbind,\
    \ exts)\n  strongest <- exts[which.max(exts[,1]),]\n  paste(class_name, strongest[2],\
    \ sep = '.')\n}", "\n    # Make sure to include all your lines of code and comments!\n\
    \    strength <- 0\n    strongest_extension <- \"\"\n    for (extension in extensions)\
    \ {\n        upper <- sum(grepl(\"[A-Z]\", extension))\n        lower <- sum(grepl(\"\
    [a-z]\", extension))\n        if (upper - lower > strength) {\n            strength\
    \ <- upper - lower\n            strongest_extension <- extension\n        }\n\
    \    }\n    return(paste(class_name, \".\", strongest_extension, sep = \"\"))\n\
    }\n", "\n    max_strength <- -1\n    strongest_extension <- character(0)\n   \
    \ for (extension in extensions) {\n        num_upper <- sum(grepl('[A-Z]', extension))\n\
    \        num_lower <- sum(grepl('[a-z]', extension))\n        strength <- num_upper\
    \ - num_lower\n        if (strength > max_strength) {\n            max_strength\
    \ <- strength\n            strongest_extension <- extension\n        }\n    }\n\
    \    paste(class_name, strongest_extension, sep = '.')\n}\n", "\n    # your code\
    \ here\n    strength <- rep(0, length(extensions))\n    for (i in 1:length(extensions))\
    \ {\n        strength[i] <- sum(grepl(\"[A-Z]\", extensions[i])) - sum(grepl(\"\
    [a-z]\", extensions[i]))\n    }\n    return(paste(class_name, extensions[which.max(strength)],\
    \ sep=\".\"))\n}\nStrongest_Extension('my_class', c('AA', 'Be', 'CC'))\n", "\n\
    \  # Create a table with class and extension names\n  df <- data.frame(class =\
    \ class_name, extension = extensions)\n  # Find the number of uppercase and lowercase\
    \ letters in each extension name\n  df$CAP <- nchar(gsub(\"[^A-Z]\", \"\", df$extension))\n\
    \  df$SM <- nchar(gsub(\"[^a-z]\", \"\", df$extension))\n  # Find the strength\
    \ of the extension\n  df$strength <- df$CAP - df$SM\n  # Find the row with the\
    \ strongest extension\n  strongest <- df[which.max(df$strength), ]\n  # Return\
    \ the name of the class concatenated with the strongest extension\n  return(paste(strongest$class,\
    \ strongest$extension, sep = \".\"))\n}\n", "\n    # Your code goes here\n   \
    \ strength <- vector()\n    for (i in 1:length(extensions)){\n        strength[i]\
    \ <- sum(strsplit(toupper(extensions[i]), split = '')[[1]]) - sum(strsplit(tolower(extensions[i]),\
    \ split = '')[[1]])\n    }\n    return(paste(class_name, extensions[which.max(strength)],\
    \ sep = '.'))\n}\n", "\n    if(length(extensions)==0) {\n        paste(class_name,\
    \ 'NA', sep = '.')\n    } else {\n        upper <- nchar(extensions) - nchar(tolower(extensions))\n\
    \        lower <- nchar(extensions) - nchar(toupper(extensions))\n        strength\
    \ <- upper - lower\n        class_name <- paste(class_name, extensions[strength\
    \ == max(strength)][1], sep = '.')\n        class_name\n    }\n}\n", "\n    if(class_name\
    \ == '')\n        return('')\n    if(length(extensions) == 0)\n        return('')\n\
    \    strongest <- 0\n    strongest_ext <- ''\n    for(ext in extensions) {\n \
    \       cap <- length(grep('[A-Z]', ext))\n        sm <- length(grep('[a-z]',\
    \ ext))\n        if(cap - sm > strongest) {\n            strongest <- cap - sm\n\
    \            strongest_ext <- ext\n        }\n    }\n    return(paste(class_name,\
    \ '.', strongest_ext, sep=''))\n}\n", "\n  # Put your code here\n  number_of_uppercase_letters\
    \ <- function(str) {\n    gsub(\"[^A-Z]\", \"\", str)\n  }\n  number_of_lowercase_letters\
    \ <- function(str) {\n    gsub(\"[^a-z]\", \"\", str)\n  }\n  current_max <- 0\n\
    \  strongest_extension <- \"\"\n  for (extension in extensions) {\n    strength\
    \ <- length(number_of_uppercase_letters(extension)) - length(number_of_lowercase_letters(extension))\n\
    \    if (strength > current_max) {\n      current_max <- strength\n      strongest_extension\
    \ <- extension\n    }\n  }\n  paste(class_name, strongest_extension, sep = \"\
    .\")\n}\n", "\n  uppercase <- function(x) {\n    length(grep(\"[A-Z]\", x))\n\
    \  }\n  lowercase <- function(x) {\n    length(grep(\"[a-z]\", x))\n  }\n  l <-\
    \ lapply(extensions,function(x) uppercase(x) - lowercase(x))\n  index <- which.max(l)\n\
    \  return(paste(class_name,\".\",extensions[index],sep=\"\"))\n}\n", "\n    #\
    \ Your code goes here.\n}\n", "\n  \n  # capitalize the class name\n  class_name\
    \ <- toupper(substr(class_name, 1, 1)) + substring(class_name, 2)\n  \n  # add\
    \ the class name to the extensions\n  extensions <- append(extensions, class_name)\n\
    \  \n  # calculate the strength for each extension\n  strengths <- strength(extensions)\n\
    \  \n  # find the strongest extension\n  strongest <- extensions[order(strengths,\
    \ decreasing = TRUE)[1]]\n  \n  # return the stronges extension\n  return(paste(class_name,\
    \ \".\", strongest, sep = \"\"))\n}\nStrongest_Extension(\"my_class\", c(\"AA\"\
    , \"Be\", \"CC\"))\n", "\n  if(!is.character(class_name)) {\n    stop('class_name\
    \ should be a character')\n  }\n  if(!is.character(extensions)) {\n    stop('extensions\
    \ should be a character')\n  }\n  strengths <- lapply(extensions, function(extension)\
    \ {\n    num_upper <- nchar(gsub('[^A-Z]', '', extension))\n    num_lower <- nchar(gsub('[^a-z]',\
    \ '', extension))\n    return(num_upper - num_lower)\n  })\n  return(paste(class_name,\
    \ extensions[which.max(strengths)], sep = '.'))\n}\n", "\n  return(paste(class_name,\
    \ \".\", get_strongest_extension(extensions), sep = \"\"))\n}\n", "\n\text_strengths\
    \ <- sapply(extensions, function(ext){\n\t\t\t\t\t\t\treturn(sum(grepl(\"[A-Z]\"\
    , ext)) - sum(grepl(\"[a-z]\", ext)))\n\t\t\t\t\t\t})\n\tStrongest_Extension <-\
    \ paste(class_name, extensions[which.max(ext_strengths)], sep = \".\")\n\treturn(Strongest_Extension)\n\
    }", "\n    strongest <- max(vapply(extensions, function(e) sum(grepl('[A-Z]',\
    \ e)), 0))\n    strongest_ext <- extensions[vapply(extensions, function(e) sum(grepl('[A-Z]',\
    \ e)), 0) == strongest]\n    return(paste(class_name, strongest_ext, sep = '.'))\n\
    }\n", "\n    STRENGTH <- function(name) {\n        strength <- 0\n        for\
    \ (c in name) {\n            if (is.lower(c))\n                strength <- strength\
    \ - 1\n            else if (is.upper(c))\n                strength <- strength\
    \ + 1\n        }\n        return(strength)\n    }\n    strengths <- sapply(extensions,\
    \ STRENGTH)\n    strongest <- which.max(strengths)\n    extension <- extensions[strongest]\n\
    \    return(paste(class_name, extension, sep='.'))\n}\n", "\n  if (length(extensions)\
    \ == 0) {\n    return(class_name)\n  }\n  strengths <- sapply(extensions,\n  \
    \                    function(extension) {\n                        return(sum(charToRaw(extension)\
    \ >= 'A') -\n                                 sum(charToRaw(extension) < 'a'))\n\
    \                      })\n  most_strong_extension <- which.max(strengths)\n \
    \ return(paste(class_name, extensions[most_strong_extension], sep = '.'))\n}",
  "\n    strength <- function(x) {\n        CAP <- nchar(gsub('[^A-Z]', '', x))\n\
    \        SM <- nchar(gsub('[^a-z]', '', x))\n        return(CAP - SM)\n    }\n\
    \    ext_strength <- sapply(extensions, strength)\n    ind_max <- which.max(ext_strength)\n\
    \    return(paste(class_name, extensions[ind_max], sep = '.'))\n}\n", "\n  # your\
    \ code here\n}\n\n\n ", "\n  strengths <- sapply(extensions, function(extension)\
    \ {\n    strength <- length(grep(\"[A-Z]\", extension)) - length(grep(\"[a-z]\"\
    , extension))\n    c(extension, strength)\n  })\n  return(paste(class_name, '.',\
    \ strengths[which.max(strengths[,2]), 1], sep=''))\n}", "\n  # Determine the strength\
    \ of all of the extensions, add them to a named list\n  strengths <- numeric(length(extensions))\n\
    \  strengths_list <- list()\n  for (i in 1:length(extensions)) {\n    strengths[i]\
    \ <- length(grep(\"[A-Z]\", extensions[i])) - \n                   length(grep(\"\
    [a-z]\", extensions[i]))\n    strengths_list[[extensions[i]]] <- strengths[i]\n\
    \  }\n  # Determine the strongest extension, return the answer\n  answer <- unlist(\n\
    \    Filter(function(x) x == max(strengths), strengths)\n  )\n  if (length(answer)\
    \ > 1) answer <- answer[1]\n  return(paste(class_name, names(strengths_list)[which(strengths_list\
    \ == answer)], \n               sep = \".\"))\n}\n", "\n  # your code goes here\n\
    \  return(paste(class_name, strong_ext, sep=\".\"))\n}\n ", "\n  names(extensions)\
    \ <- extensions\n  uppercase_counts <- gsub('[^A-Z]', '', extensions)\n  lowercase_counts\
    \ <- gsub('[^a-z]', '', extensions)\n  strengths <- nchar(uppercase_counts) -\
    \ nchar(lowercase_counts)\n  strongest_ext <- which.max(strengths)\n  return(paste(class_name,\
    \ extensions[strongest_ext], sep='.'))\n}\n", "\n  strength <- 0\n  best_extension\
    \ <- ''\n  num_uppercase <- 0\n  num_lowercase <- 0\n  for (extension in extensions)\
    \ {\n    num_uppercase <- sum(str_count(extension, pattern = '[A-Z]'))\n    num_lowercase\
    \ <- sum(str_count(extension, pattern = '[a-z]'))\n    if (num_uppercase - num_lowercase\
    \ > strength) {\n      strength <- num_uppercase - num_lowercase\n      best_extension\
    \ <- extension\n    }\n  }\n  return(paste(class_name, best_extension, sep = '.'))\n\
    }", "\n  \n  strongest_extension <- NULL\n  highest_strength <- 0\n  \n  for (extension\
    \ in extensions) {\n    # Get the uppercase letters\n    uppercase_letters <-\
    \ str_extract_all(extension, \"[A-Z]\")\n    # Get the lowercase letters\n   \
    \ lowercase_letters <- str_extract_all(extension, \"[a-z]\")\n    # Calculate\
    \ the strength\n    strength <- length(uppercase_letters) - length(lowercase_letters)\n\
    \    # If the strength is stronger than the current strongest, replace it.\n \
    \   if (strength > highest_strength) {\n      strongest_extension <- extension\n\
    \      highest_strength <- strength\n    }\n  }\n  \n  class_name <- glue(\"{class_name}.{strongest_extension}\"\
    )\n  return(class_name)\n}\n", "\n  if (length(extensions) == 0) {\n    return(class_name)\n\
    \  }\n  if (length(extensions) == 1) {\n    return(paste(class_name, '.', extensions[1],\
    \ sep = ''))\n  }\n  strengths <- list()\n  for (i in 1:length(extensions)) {\n\
    \    strengths[i] <- nchar(extensions[i]) - sum(stri_count_regex(extensions[i],\
    \ '^[a-z]'))\n  }\n  return(paste(class_name, '.', extensions[which.max(strengths)],\
    \ sep = ''))\n}\n", "\n\tclass_name <- as.character(class_name)\n\t# Replace each\
    \ extension with its strength\n\textensions <- as.numeric(count_caps(extensions)\
    \ - count_smalls(extensions))\n\t# Find the index of the extension with the maximum\
    \ strength\n\tmax_index <- which.max(extensions)\n\t# Return the name of the class\
    \ concatenated with the name of\n\t# the strongest extension\n\treturn(paste(class_name,\
    \ extensions[max_index], sep='.'))\n}\n", "\n    num_uppercase <- gsub('[[:lower:]]',\
    \ '', extensions)\n    num_lowercase <- gsub('[[:upper:]]', '', extensions)\n\
    \    strengths <- nchar(num_uppercase) - nchar(num_lowercase)\n    strongest_extension\
    \ <- which.max(strengths)\n    return(paste(class_name, extensions[strongest_extension],\
    \ sep='.'))\n}\nStrongest_Extension('my_class', c('AA', 'Be', 'CC'))\n", "\n \
    \ # Class name is the first input\n  class_name <- rlang::sym(class_name)\n  #\
    \ A list of extensions is the second input\n  extension_list <- extensions\n \
    \ # This is the third input, where the classes should be loaded in\n  # This must\
    \ be a vector (class names)\n  # The extensions are a character vector\n  # We\
    \ need to turn them into symbols\n  # To do this, we make a new vector in a loop\n\
    \  extension_vector <- vector('symbol', length(extension_list))\n  for (i in 1:length(extension_list))\
    \ {\n    extension_vector[i] <- rlang::sym(extension_list[i])\n  }\n  # We can\
    \ now get the strength of each extension using our function\n  # Get a vector\
    \ with the strengths of each extension\n  extension_strengths <- get_strength(extension_vector)\n\
    \  # Get the maximum strength\n  max_strength <- max(extension_strengths)\n  #\
    \ Get the extension with the maximum strength\n  extension_of_max_strength <-\
    \ extension_vector[extension_strengths == max_strength]\n  # Now, we need to turn\
    \ the class name and extension name into strings\n  class_name_string <- rlang::as_label(class_name)\n\
    \  extension_of_max_strength_string <- rlang::as_label(extension_of_max_strength)\n\
    \  # This is an example of how to make a string that combines two strings\n  #\
    \ The output is \"A string\"\n  class_extension_string <- paste(class_name_string,\
    \ extension_of_max_strength_string, sep = '.')\n  # Return the string\n  return(class_extension_string)\n\
    }", "\n    strengths <- lapply(extensions, function(x) {\n        CAP <- length(grep(\"\
    [A-Z]\", x))\n        SM <- length(grep(\"[a-z]\", x))\n        return(CAP - SM)\n\
    \    })\n    return(paste(class_name, extensions[which.max(strengths)], sep =\
    \ \".\"))\n}\n", "\n  caps <- nchar(gsub(\"[^A-Z]\", \"\", extensions))\n  smalls\
    \ <- nchar(gsub(\"[^a-z]\", \"\", extensions))\n  strengths <- caps - smalls\n\
    \  max_strength <- max(strengths)\n  index <- which(strengths == max_strength)[1]\n\
    \  class_name <- paste(class_name, extensions[index], sep = \".\")\n  class_name\n\
    }\n", "\n  numbers <- lapply(extensions, function(x) sum(is.na(match(toupper(x),\
    \ x))))\n  numbers[is.na(numbers)] <- 0\n  max_n <- which.max(numbers)\n  return(paste(class_name,\
    \ '.', extensions[max_n], sep=''))\n}\n ", "\n    # create vector of strengths\n\
    \    # strength is given by sum of number of caps minus sum of number of lower\n\
    \    # case letters\n    strength <- sum(grepl('[A-Z]', extensions)) - sum(grepl('[a-z]',\
    \ extensions))\n    # get the index of the highest strength, which is the index\
    \ of the\n    # strongest extension\n    ind <- which.max(strength)\n    # find\
    \ the strongest extension\n    strongest <- extensions[ind]\n    # return the\
    \ string in the format classname.strongestextension\n    paste(class_name,strongest,sep='.')\n\
    }\n", "\n    if (length(extensions) == 0) {\n        return(class_name)\n    }\n\
    \    str_strength <- sapply(extensions, function(ext) {\n        caps <- nchar(gsub(\"\
    [^A-Z]\", \"\", ext))\n        sms <- nchar(gsub(\"[^a-z]\", \"\", ext))\n   \
    \     return(caps - sms)\n    })\n    return(paste(class_name, extensions[which.max(str_strength)],\
    \ sep=\".\"))\n}\nlibrary(testthat)\ntest_that(\"testing the strongest extension\"\
    , {\n    expect_equal(Strongest_Extension('Slices', c('SErviNGSliCes', 'Cheese',\
    \ 'StuFfed')), 'Slices.SErviNGSliCes')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC')), 'my_class.AA')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('AA', 'BB', 'CC')), 'my_class.CC')\n    expect_equal(Strongest_Extension('Apple',\
    \ c('A', 'a', 'b')), 'Apple.A')\n    expect_equal(Strongest_Extension('Class',\
    \ c('ext1', 'ext2', 'ext3')), 'Class.ext1')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('', '', '')), 'my_class')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('a', 'b', 'c')), 'my_class.a')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('aa', 'ab', 'ac')), 'my_class.aa')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('BB', 'aa', 'c')), 'my_class.aa')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('', 'aa', 'B')), 'my_class.aa')\n    expect_equal(Strongest_Extension('my_class',\
    \ c('Bbbbb', '", "\n  # Write your code here and assign the result to 'result'\n\
    \  # You should remove the next line after you finish writing your code\n  result\
    \ <- paste(class_name, extensions[which.max(mapply(function(e) {\n    CAP <- sum(is.na(match(\"\
    [A-Z]\", e)))\n    SM <- sum(is.na(match(\"[a-z]\", e)))\n    CAP - SM\n  }, extensions))],\
    \ sep = \".\")\n  return(result)\n}\n", "\n    strengths <- data.frame(names =\
    \ extensions, strengths = \n        sapply(extensions, function(extension) {\n\
    \            as.numeric(stringr::str_count(extension, \"[A-Z]\")) -\n        \
    \    as.numeric(stringr::str_count(extension, \"[a-z]\"))\n        }), stringsAsFactors\
    \ = FALSE)\n    strengths <- strengths[order(strengths$strengths, strengths$names),\
    \ ]\n    paste0(class_name, \".\", strengths$names[1])\n}\n", "\n  \n  # get number\
    \ of upper and lower case letters for each extension\n  upper = sapply(extensions,\
    \ function(x) sum(grepl('[A-Z]', x)))\n  lower = sapply(extensions, function(x)\
    \ sum(grepl('[a-z]', x)))\n  \n  # calculate strength of each extension\n  strength\
    \ = upper - lower\n  \n  # return the class name and strongest extension\n  return(paste(class_name,\
    \ extensions[which.max(strength)], sep='.'))\n}\n ", "\n  max <- 0\n  max_ext\
    \ <- ''\n  res <- unlist(strsplit(class_name, '.'))\n  res <- res[length(res)]\n\
    \  for (ext in extensions) {\n    tmp <- 0\n    for (i in 1:nchar(ext)) {\n  \
    \    tmp <- tmp + ifelse(substr(ext, i, i) %in% LETTERS, 1, -1)\n    }\n    if\
    \ (tmp > max) {\n      max <- tmp\n      max_ext <- ext\n    }\n  }\n  res <-\
    \ paste(res, max_ext, sep = '.')\n  return(res)\n}", "\n    strongest <- 0\n \
    \   strongest_idx <- -1\n    for (i in 1:length(extensions)) {\n        if (extensions[i]\
    \ != class_name) {\n            # Count the upper and lower case letters in the\
    \ extensions name\n            l <- nchar(extensions[i])\n            l_upper\
    \ <- nchar(gsub(\"[^A-Z]\", \"\", extensions[i]))\n            l_lower <- nchar(gsub(\"\
    [^a-z]\", \"\", extensions[i]))\n            strength <- l_upper - l_lower\n \
    \           if (strength > strongest) {\n                strongest <- strength\n\
    \                strongest_idx <- i\n            }\n        }\n    }\n    if (strongest_idx\
    \ == -1) {\n        return(class_name)\n    } else {\n        return(paste(class_name,\
    \ \".\", extensions[strongest_idx], sep=\"\"))\n    }\n}", "\n  # Your code here\n\
    }\n ", "\n    caps <- mapply(function(s) sum(stri_count_regex(s, '[[:upper:]]')),\
    \ extensions)\n    sms <- mapply(function(s) sum(stri_count_regex(s, '[[:lower:]]')),\
    \ extensions)\n    strength <- caps - sms\n    idx <- which.max(strength)\n  \
    \  return(paste(class_name, extensions[idx], sep='.'))\n}\n", "\n  ext_strength\
    \ <- function(ext) {\n    str <- strsplit(ext, split = '')[[1]]\n    CAP <- sum(str\
    \ >= 'A' & str <= 'Z')\n    SM <- sum(str >= 'a' & str <= 'z')\n    return(CAP\
    \ - SM)\n  }\n  # find extensions with maximum strength\n  best_ext <- extensions[sapply(extensions,\
    \ ext_strength) == max(sapply(extensions, ext_strength))]\n  # return the first\
    \ one in the list\n  return(paste(class_name, best_ext[1], sep = '.'))\n}", "\n\
    \  d <- data.frame(extensions, stringsAsFactors = FALSE)\n  names(d) <- c('extensions')\n\
    \  d$stregth <- rowSums(sapply(d$extensions, function(x) \n    {\n      x <- strsplit(x,\
    \ split = \"\")[[1]]\n      as.numeric(x)\n    }))\n  class_name <- paste(class_name,\
    \ d[which.max(d$stregth),1], sep = \".\")\n  class_name\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n    ###### YOUR CODE HERE ######\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "\n    # your code here\n}\n", "\n  # Find the strongest extension\n\
    \  max_strength <- -1\n  max_index <- NA\n  for (i in 1:length(extensions)) {\n\
    \    extension <- extensions[i]\n    strength <- length(grep(\"[A-Z]\", extension))\
    \ - length(grep(\"[a-z]\", extension))\n    if (strength > max_strength) {\n \
    \     max_strength <- strength\n      max_index <- i\n    }\n  }\n  # Return the\
    \ string\n  return(paste(class_name, extensions[max_index], sep = \".\"))\n}",
  "\n  strongest <- -Inf\n  str_ex <- ''\n  for (ext in extensions) {\n    strength\
    \ <- sum(str_detect(ext, \"[A-Z]\")) - sum(str_detect(ext, \"[a-z]\"))\n    if\
    \ (strength > strongest) {\n      strongest <- strength\n      str_ex <- ext\n\
    \    }\n  }\n  paste(class_name, str_ex, sep = '.')\n}\n", "\n  return(paste(class_name,\
    \ grep(paste(sort(unique(unlist(strsplit(extensions, split = '')))), collapse\
    \ = ''), extensions, value = TRUE)[1], sep = '.'))\n}\n", "\n  # your code here\n\
    \  return(paste(class_name,'.',extensions[1],sep=''))\n}", "\n    # extract the\
    \ upper case letters\n    uppercase_letters <- function(str) {\n        gsub(\"\
    [^A-Z]\", \"\", str)\n    }\n    # extract the lower case letters\n    lowercase_letters\
    \ <- function(str) {\n        gsub(\"[^a-z]\", \"\", str)\n    }\n    # get the\
    \ strengh of the extension\n    get_extension_strength <- function(extension)\
    \ {\n        uppercase_letters_extension <- uppercase_letters(extension)\n   \
    \     lowercase_letters_extension <- lowercase_letters(extension)\n        strength\
    \ <- length(uppercase_letters_extension) - length(lowercase_letters_extension)\n\
    \        return(strength)\n    }\n    # return the index of the extension with\
    \ the max strength\n    extension_with_max_strength <- function(extensions_with_strength)\
    \ {\n        max_strength <- max(extensions_with_strength$strength)\n        return(extensions_with_strength[extensions_with_strength$strength\
    \ == max_strength, 1])\n    }\n    # a dataframe to store the extensions and their\
    \ strength\n    extensions_with_strength <- data.frame(extension = extensions,\
    \ strength = sapply(extensions, get_extension_strength))\n    # return the class\
    \ name and the extension with the max strength\n    return(paste(class_name, extension_with_max_strength(extensions_with_strength),\
    \ sep = \".\"))\n}\n", "\n    class_name = gsub('\\\\s+', '', class_name)\n  \
    \  extensions = gsub('\\\\s+', '', extensions)\n    # return(paste(class_name,\
    \ extensions[1], sep='.'))\n    strengths = sapply(extensions, function(ext) {\n\
    \        sum(grepl('[A-Z]', ext)) - sum(grepl('[a-z]', ext))\n    })\n    i =\
    \ which.max(strengths)\n    return(paste(class_name, extensions[i], sep='.'))\n\
    }\nprint(Strongest_Extension('my_class', c('AA', 'Be', 'CC')))\nprint(Strongest_Extension('Slices',\
    \ c('SErviNGSliCes', 'Cheese', 'StuFfed')))\nprint(Strongest_Extension('Slices',\
    \ c('SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes')))\n", "\n  ext <- extensions[1]\n\
    \  strength <- 0\n  for (i in 2:length(extensions)) {\n    if (strength < Strongest_Extension_Strength(extensions[i]))\
    \ {\n      strength <- Strongest_Extension_Strength(extensions[i])\n      ext\
    \ <- extensions[i]\n    }\n  }\n  return(paste(class_name, ext, sep = \".\"))\n\
    }\n", "\n  ext<-as.list(extensions)\n  myfunc<-function(x){\n    chars <- strsplit(x,\
    \ split = \"\")[[1]]\n    CAP <- length(chars[chars %in% LETTERS])\n    SM <-\
    \ length(chars[chars %in% letters])\n    CAP-SM\n  }\n  strength<-sapply(ext,myfunc)\n\
    \  maxstrength<-max(strength)\n  best<-ext[which(strength==maxstrength)]\n  best=paste(class_name,\"\
    .\",best,sep=\"\")\n  best=best[1]\n  return(best)\n}", "\n  strengths <- sapply(extensions,\
    \ function(x) sum(x %in% LETTERS) - sum(x %in% letters))\n  i <- which.max(strengths)\n\
    \  paste(class_name, extensions[i], sep='.')\n}\n", "\n    strengths <- c()\n\
    \    for (extension in extensions) {\n        strengths <- c(strengths, sum(grepl('[A-Z]',\
    \ extension), sum(grepl('[a-z]', extension))))\n    }\n    class_name <- paste(class_name,\
    \ extensions[which.max(strengths)], sep = '.')\n    return(class_name)\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n    extension_strengths <- c()\n    for (extension\
    \ in extensions) {\n        strength <- sum(grepl('[A-Z]', extension)) - \n  \
    \                  sum(grepl('[a-z]', extension))\n        extension_strengths\
    \ <- c(extension_strengths, strength)\n    }\n    strongest_extension <- extensions[which.max(extension_strengths)]\n\
    \    return(paste(class_name, '.', strongest_extension, sep=''))\n}", "\n  strenghts\
    \ <- sapply(extensions, function(x) {\n    nchar(gsub('[^A-Z]', '', x)) - nchar(gsub('[^a-z]',\
    \ '', x))\n  })\n  strongest <- extensions[which.max(strenghts)]\n  return(paste(class_name,\
    \ strongest, sep = '.'))\n}\n", "\n  upper_char <- function(x) {\n    sum(x >=\
    \ \"A\" & x <= \"Z\")\n  }\n  lower_char <- function(x) {\n    sum(x >= \"a\"\
    \ & x <= \"z\")\n  }\n  strength <- function(x) {\n    upper_char(x) - lower_char(x)\n\
    \  }\n  strongest <- function(x) {\n    which.max(strength(x))\n  }\n  paste(class_name,\
    \ extensions[strongest(extensions)], sep = \".\")\n}\n\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))", "\n    extension_names <- sapply(extensions, function(extension)\
    \ strsplit(extension, \"\")[[1]])\n    capital_letters <- sapply(extension_names,\
    \ function(extension) sum(extension %in% LETTERS))\n    small_letters <- sapply(extension_names,\
    \ function(extension) sum(extension %in% letters))\n    strengths <- capital_letters\
    \ - small_letters\n    strongest_index <- which.max(strengths)\n    paste(class_name,\
    \ extensions[strongest_index], sep = \".\")\n}\n", "\n    # Your code goes here!\n\
    \    strength <- c()\n    for (extension in extensions) {\n        strength <-\
    \ c(strength, sum(extension %in% LETTERS) - \n            sum(extension %in% letters))\n\
    \    }\n    max(strength)\n    return(paste(class_name, '.', extensions[which(strength\
    \ == max(strength))], sep = ''))\n}\n", "\n    strength <- function(x) {\n   \
    \     tolower <- gsub('[A-Z]', '', x)\n        toupper <- gsub('[a-z]', '', x)\n\
    \        return (nchar(toupper) - nchar(tolower))\n    }\n    str <- sapply(extensions,\
    \ strength)\n    ind <- which.max(str)\n    return (paste(class_name, extensions[ind],\
    \ sep = '.'))\n}\n\nclass_name <- 'my_class'\nextensions <- c('AA', 'Be', 'CC')",
  "\n    class_name = paste(class_name, '.', extensions[which.max(ext_strength(extensions))],\
    \ sep='')\n    class_name\n}\n\next_strength <- function(x) {\n    CAP = str_count(x,\
    \ pattern = '[A-Z]')\n    SM = str_count(x, pattern = '[a-z]')\n    CAP - SM\n\
    }\n", "\n  # your code here\n}\n\n\n", "\n  \n  # We first need to count the upper\
    \ and lowercase letters in the extension.\n  # To do this, we will use a nested\
    \ apply function. The first apply function\n  # will apply the function to each\
    \ of the characters in the string, and the \n  # second apply function will sum\
    \ the total number of uppercase and lowercase\n  # letters.\n  CAPS <- c(0,0)\n\
    \  for (string in extensions) {\n    CAPS <- c(CAPS, apply(string, 2, function(x)\
    \ {\n      sum(apply(x, 2, function(y) {\n        if (y %in% LETTERS) {\n    \
    \      return(1)\n        } else {\n          return(0)\n        }\n      }))\n\
    \    }))\n  }\n  \n  # We then find the strongest extension by subtracting the\
    \ total number of\n  # uppercase letters from the total number of lowercase letters.\n\
    \  strongest <- extensions[which.max(CAPS[-c(1,2)])]\n  \n  # We then return the\
    \ strongest extension.\n  return(paste(class_name, \".\", strongest, sep = \"\"\
    ))\n}\n", "\n\tstrengths <- sapply(extensions, function(s) {\n\t\ts <- tolower(s)\n\
    \t\tcount.fields(s, \"[A-Z]\")[1] - nchar(s)\n\t})\n\twhich.max(strengths)\n\t\
    paste(class_name, extensions[which.max(strengths)], sep=\".\")\n}\n", "\n  strengths\
    \ <- c()\n  for (e in extensions) {\n    strengths <- c(strengths, length(grep(\"\
    [A-Z]\", e)) - length(grep(\"[a-z]\", e)))\n  }\n  paste(class_name, \".\", extensions[which.max(strengths)],\
    \ sep = \"\")\n}\n  ", "\n    strength <- function(ext) {\n        caps <- str_count(ext,\
    \ pattern='[A-Z]')\n        smalls <- str_count(ext, pattern='[a-z]')\n      \
    \  return(caps - smalls)\n    }\n    strengths <- sapply(extensions, strength)\n\
    \    index <- which.max(strengths)\n    ext <- extensions[index]\n    return(paste(class_name,\
    \ ext, sep='.'))\n}\n", "\n    # your code here\n    UpperCase <- stri_count_regex(extensions,\
    \ regex = '[A-Z]')\n    LowerCase <- stri_count_regex(extensions, regex = '[a-z]')\n\
    \    strength <- UpperCase - LowerCase\n    output <- extensions[which.max(strength)]\n\
    \    return(paste(class_name, output, sep = '.'))\n}\n ", "\n  strengths <- sapply(extensions,\
    \ function(x) {\n    strength <- sum(is.na(grep(\"[A-Z]\", x))) - sum(is.na(grep(\"\
    [a-z]\", x)))\n    return(strength)\n  })\n  strongest <- which.max(strengths)\n\
    \  return(paste(class_name, extensions[strongest], sep = \".\"))\n}", "\n  class_name\
    \ <- unlist(strsplit(class_name, \"\"))\n  class_name_ext <- ifelse(class_name\
    \ %in% LETTERS, 1, -1)\n  extensions_ext <- ifelse(extensions %in% LETTERS, 1,\
    \ -1)\n  ratio <- colSums(extensions_ext) / colSums(class_name_ext)\n  return(paste(class_name,\
    \ extensions[which.max(ratio)], sep = \".\"))\n}\n", "\n  \n  CAP = function(extension)\
    \ sum(nchar(extension) - nchar(tolower(extension)))\n  SM = function(extension)\
    \ sum(nchar(extension) - nchar(toupper(extension)))\n  strength = function(extension)\
    \ (CAP(extension) - SM(extension)) / nchar(extension)\n  \n  ext = extensions[strength(extensions)\
    \ == max(strength(extensions))]\n  paste(class_name, \".\", ext, sep = \"\")\n\
    }\n", "\n    strength <- sapply(extensions, function(x) {\n        sum(str_detect(x,\
    \ \"[A-Z]\")) - sum(str_detect(x, \"[a-z]\"))\n    })\n    return(paste(class_name,\
    \ extensions[which.max(strength)], sep = \".\"))\n}", "\n    CAP = function(x)\
    \ {\n        sum(grepl(\"[A-Z]\", x))\n    }\n    SM = function(x) {\n       \
    \ sum(grepl(\"[a-z]\", x))\n    }\n    class_name = paste(class_name, \". \",\
    \ sep = \"\")\n    strengths = (CAP(extensions) - SM(extensions))\n    return(paste(class_name,\
    \ extensions[which.max(strengths)], sep = \"\"))\n}\n\nclass_name = 'my_class'\n\
    extensions = c('AA', 'Be', 'CC')\nprint(Strongest_Extension(class_name, extensions))\n",
  "\n  class_name_strength <- function(ext){\n    Numeric <- sort(unlist(strsplit(ext,\
    \ \"\")))\n    CAP <- Numeric[Numeric %in% LETTERS]\n    SM <- Numeric[Numeric\
    \ %in% LETTERS_]\n    strength <- sum(CAP) - sum(SM)\n    return(strength)\n \
    \ }\n  class_name <- paste(class_name, extensions[which.max(lapply(extensions,class_name_strength))],\
    \ sep = \".\")\n  return(class_name)\n}\n\nStrongest_Extension <- function(class_name,\
    \ extensions) {\n  class_name_strength <- function(ext){\n    Numeric <- sort(unlist(strsplit(ext,\
    \ \"\")))\n    CAP <- Numeric[Numeric %in% LETTERS]\n    SM <- Numeric[Numeric\
    \ %in% LETTERS_]\n    strength <- sum(CAP) - sum(SM)\n    return(strength)\n \
    \ }\n  class_name <- paste(class_name, extensions[which.max(lapply(extensions,class_name_strength))],\
    \ sep = \".\")\n  return(class_name)\n}\n", "\n  str_extension <- function(x)\
    \ {\n    s <- unlist(strsplit(x, \"\"))\n    CAP <- sum(s >= \"A\" & s <= \"Z\"\
    )\n    SM <- sum(s >= \"a\" & s <= \"z\")\n    CAP - SM\n  }\n  extensions <-\
    \ vapply(extensions, str_extension, numeric(1))\n  paste(class_name, names(extensions)[which.max(extensions)],\
    \ sep = \".\")\n}\n", "\n  CAP <- str_count(extensions, '[A-Z]')\n  SM <- str_count(extensions,\
    \ '[a-z]')\n  strength <- CAP - SM\n  strongest <- extensions[which.max(strength)]\n\
    \  return(paste(class_name, '.', strongest, sep = ''))\n}", "\n  if (length(extensions)\
    \ == 0) {\n    return(class_name)\n  }\n  strongest_extension <- extensions[1]\n\
    \  strongest_extension_strength <- Get_Extension_Strength(strongest_extension)\n\
    \  for (extension in extensions) {\n    extension_strength <- Get_Extension_Strength(extension)\n\
    \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
    \ <- extension\n      strongest_extension_strength <- extension_strength\n   \
    \ }\n  }\n  return(paste(class_name, \".\", strongest_extension, sep=\"\"))\n}",
  "\n  class_name <- paste(class_name, '.', sep = '')\n  strongest <- extensions[1]\n\
    \  strength <- sum(ifelse(grepl('[A-Z]', extensions[1]), 1, 0)) - sum(ifelse(grepl('[a-z]',\
    \ extensions[1]), 1, 0))\n  for (i in 2:length(extensions)) {\n    cur_strength\
    \ <- sum(ifelse(grepl('[A-Z]', extensions[i]), 1, 0)) - sum(ifelse(grepl('[a-z]',\
    \ extensions[i]), 1, 0))\n    if (cur_strength > strength) {\n      strength <-\
    \ cur_strength\n      strongest <- extensions[i]\n    }\n  }\n  class_name <-\
    \ paste(class_name, strongest, sep = '')\n  return(class_name)\n}\n", "\n    strength\
    \ <- function(ext) {\n        nchar(gsub('[a-z]', '', ext)) - nchar(gsub('[A-Z]',\
    \ '', ext))\n    }\n    extension <- max(extensions, strength)\n    paste(class_name,\
    \ extension, sep = '.')\n}", "\n  strengths <- sapply(extensions, function(ext)\
    \ {\n    sum(str_count(ext, \"[A-Z]\")) - sum(str_count(ext, \"[a-z]\"))\n  })\n\
    \  paste0(class_name, \".\", extensions[which.max(strengths)])\n}\n", "\n  # Write\
    \ your code here\n  \n  StrongestExtensionName <- ''\n  StrongestExtensionStrength\
    \ <- 0\n  isFirst <- TRUE\n  \n  for (ex in extensions) {\n    Cap <- sum(grepl('[[:upper:]]',\
    \ ex))\n    sm <- sum(grepl('[[:lower:]]', ex))\n    strength <- Cap - sm\n  \
    \  if (strength > StrongestExtensionStrength | isFirst) {\n      StrongestExtensionName\
    \ <- ex\n      StrongestExtensionStrength <- strength\n      isFirst <- FALSE\n\
    \    }\n  }\n  \n  paste(class_name, StrongestExtensionName, sep='.')\n}\n", "\n\
    \  # your code here\n}\n", "\n  class_name <- as.character(class_name)\n  extensions\
    \ <- unlist(extensions)\n  strength <- sapply(extensions, function(x) nchar(gsub(\"\
    [^A-Z]\", \"\", x)) - nchar(gsub(\"[^a-z]\", \"\", x)))\n  class_name <- paste(class_name,\
    \ extensions[which.max(strength)], sep = \".\")\n  class_name\n}", "\n    strongest\
    \ <- extensions[1]\n    for (i in 2:length(extensions)) {\n        if (sum(grepl('[A-Z]',\
    \ extensions[i])) - sum(grepl('[a-z]', extensions[i])) >\n            sum(grepl('[A-Z]',\
    \ strongest)) - sum(grepl('[a-z]', strongest))) {\n            strongest <- extensions[i]\n\
    \        }\n    }\n    paste(class_name, '.', strongest, sep = '')\n}", "\n  #\
    \ Write your code here!\n  CAPS = caps = 0\n  strongest_extension = \"\"\n  for\
    \ (extension in extensions) {\n    CAPS = 0\n    caps = 0\n    for (letter in\
    \ strsplit(extension, \"\")[[1]]) {\n      if (letter == toupper(letter)) {\n\
    \        CAPS = CAPS + 1\n      } else {\n        caps = caps + 1\n      }\n \
    \   }\n    if (CAPS == 0) {\n      continue\n    }\n    fraction = CAPS / caps\n\
    \    if (fraction > 0 && fraction > CAPS / caps) {\n      strongest_extension\
    \ = extension\n    }\n  }\n  return(paste(class_name, strongest_extension, sep\
    \ = \".\"))\n}", "\n  if(!is.character(class_name)) {\n    stop('class_name must\
    \ be a character.')\n  }\n  if(!is.character(extensions)) {\n    stop('extensions\
    \ must be a character.')\n  }\n  # replace this code with the answer\n  class_name.extensions\
    \ <- paste(class_name, extensions, sep='.')\n  strength <- sapply(extensions,\
    \ function(ext) {\n    strength <- length(grep('[A-Z]', ext)) - length(grep('[a-z]',\
    \ ext))\n    strength\n  })\n  ind <- order(strength, decreasing=TRUE)[1]\n  class_name.extensions[ind]\n\
    }\nStrongest_Extension('my_class', c('AA', 'Be', 'CC'))\n", "\n  # Create a vector\
    \ for the strengths of the extensions\n  strength <- c()\n  # Iterate through\
    \ the list of extensions\n  for (i in 1:length(extensions)) {\n    # Initialize\
    \ the strength and sum of the upper case letters of the i-th extension\n    strength[i]\
    \ <- 0\n    upper_letters <- 0\n    # Iterate through the letters of the i-th\
    \ extension\n    for (j in 1:nchar(extensions[i])) {\n      # Check whether the\
    \ j-th letter is upper case\n      if (substr(extensions[i], j, j) == substr(toupper(extensions[i]),\
    \ j, j)) {\n        # Add 1 to the sum of the upper case letters\n        upper_letters\
    \ <- upper_letters + 1\n      }\n    }\n    # Compute the strength of the i-th\
    \ extension\n    strength[i] <- upper_letters - (nchar(extensions[i]) - upper_letters)\n\
    \  }\n  # Compute the maximum of the strengths\n  strength_max <- max(strength)\n\
    \  # Create a vector for the indices of the extensions with the maximum strength\n\
    \  indices <- c()\n  # Iterate through the list of strengths\n  for (i in 1:length(strength))\
    \ {\n    # Check whether the i-th strength is equal to the maximum\n    if (strength[i]\
    \ == strength_max) {\n      # Add the index of the i-th extension to the list\
    \ of indices\n      indices <- c(indices, i)\n    }\n  }\n  # Return the concatenation\
    \ of the class name and the extension with the maximum strength\n  return(paste(class_name,\
    \ extensions[indices[1]], sep = '.'))\n}\n", "\n  class_name <- sym(class_name)\n\
    \  L <- length(extensions)\n  # Make a dataframe with class_name and all extension\
    \ names.\n  df <- data.frame(ClassName = rep(class_name, L),\n               \
    \    ExtensionName = extensions)\n  # Compute the strength for each extension\n\
    \  df$Strength <- sapply(extensions, function(x) {\n    cap <- sum(str_detect(x,\
    \ \"[A-Z]\"))\n    sm <- sum(str_detect(x, \"[a-z]\"))\n    return(cap - sm)\n\
    \  })\n  # Find the strongest extension\n  df$Strongest <- df$Strength == max(df$Strength)\n\
    \  # Return the extension as a string\n  return(sprintf(\"%s.%s\", df$ClassName[df$Strongest],\
    \ df$ExtensionName[df$Strongest]))\n}", "\n  upper_count <- function(x) {\n  \
    \  x <- gsub('[^A-Z]', '', x)\n    length(x)\n  }\n  lower_count <- function(x)\
    \ {\n    x <- gsub('[^a-z]', '', x)\n    length(x)\n  }\n  uppers <- lapply(extensions,\
    \ upper_count)\n  lowers <- lapply(extensions, lower_count)\n  strengths <- (uppers\
    \ - lowers) / length(extensions)\n  best_index <- which.max(strengths)\n  paste(class_name,\
    \ extensions[best_index], sep = '.')\n}\n", "\n  # Calculate strength of each\
    \ extension.\n  strengths <- sapply(extensions, function(x) sum(is.upper(x)) -\
    \ sum(is.lower(x)))\n  # Get strongest extension index.\n  strongest_index <-\
    \ which.max(strengths)\n  # Return the strongest extension name.\n  return(paste(class_name,\
    \ extensions[strongest_index], sep = '.'))\n}\nStrongest_Extension('Slices', c('SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'))", "\n  strengths <- sapply(extensions, function(extension)\
    \ {\n    extension <- unlist(strsplit(extension, split = ''))\n    extension <-\
    \ extension[grep('[A-Z]', extension)]\n    cap <- length(extension)\n    extension\
    \ <- unlist(strsplit(extension, split = ''))\n    extension <- extension[grep('[a-z]',\
    \ extension)]\n    sm <- length(extension)\n    return(cap - sm)\n  })\n  strongest\
    \ <- names(which.max(strengths))\n  return(paste(class_name, extensions[strongest],\
    \ sep = '.'))\n}", "\n  strenth <- \n    unlist(lapply(extensions, function(x)\
    \ sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))))\n  class_name <- paste(class_name,\
    \ extensions[which.max(strenth)], sep = '.')\n  return(class_name)\n}\n", "\n\
    \    names(extensions) <- str_count(extensions, '[A-Z]') - str_count(extensions,\
    \ '[a-z]')\n    class_name %>% paste(extensions[which.max(extensions)], sep =\
    \ '.')\n}", "\n  strength <- function(x) {\n    cap <- nchar(gsub('[^A-Z]', '',\
    \ x))\n    sm <- nchar(gsub('[^a-z]', '', x))\n    cap - sm\n  }\n  extension\
    \ <- extensions[order(sapply(extensions, strength), decreasing = TRUE)][1]\n \
    \ paste(class_name, extension, sep = '.')\n}\n", "\n    idx <- which.max(nchar(gsub('[^A-Z]',\
    \ '', extensions)) - nchar(gsub('[^a-z]', '', extensions)))\n    return(paste(class_name,\
    \ extensions[idx], sep = '.'))\n}\n\nclass_name <- 'my_class'\nextensions <- c('AA',\
    \ 'Be', 'CC')\nStrongest_Extension(class_name, extensions)\n", "\n  # Your code\
    \ goes here\n\n\n}\n", "\n    # Define strength function\n    strenght <- function(extension)\
    \ {\n        CAP <- sum(sapply(gregexpr('[A-Z]', extension)[[1]], function(x)\
    \ x > 0))\n        SM <- sum(sapply(gregexpr('[a-z]', extension)[[1]], function(x)\
    \ x > 0))\n        return(CAP - SM)\n    }\n    # Find strongest extension\n \
    \   strongest <- max(sapply(extensions, strenght))\n    strongest_idx <- which(sapply(extensions,\
    \ strenght) == strongest)\n    if (length(strongest_idx) > 1) {\n        strongest_idx\
    \ <- strongest_idx[1]\n    }\n    return(paste(class_name, extensions[strongest_idx],\
    \ sep = '.'))\n}", "\n\tdiff_calc <- function(x) {\n\t\tnum_cap <- sum(grepl(\"\
    [[:upper:]]\", x))\n\t\tnum_sm <- sum(grepl(\"[[:lower:]]\", x))\n\t\treturn(num_cap\
    \ - num_sm)\n\t}\n\tdiff <- sapply(extensions, diff_calc)\n\treturn(paste(class_name,\
    \ extensions[which.max(diff)], sep = \".\"))\n}\n", "\n    class_name <- paste(class_name,\
    \ '.', sep='')\n    ratios <- apply(stringsAsFactors(extensions), 1, function(x)\
    \ {\n      (sum(x %in% LETTERS) - sum(x %in% letters))/nchar(x)\n    })\n    max\
    \ <- which.max(ratios)\n    max_ratio <- ratios[max]\n    max_ext <- extensions[max]\n\
    \    paste(class_name, max_ext, sep='')\n}\n", "\n  strengths <- sapply(extensions,\
    \ function(x) {\n    sum(str_detect(x, '[A-Z]')) - sum(str_detect(x, '[a-z]'))\n\
    \  })\n  extensions[which.max(strengths)] <- paste(class_name, extensions[which.max(strengths)],\
    \ sep='.')\n  return(extensions[which.max(strengths)])\n}\n", "\n  # Create a\
    \ vector of the class name, with capital letters\n  class_name_caps <- gsub(\"\
    [a-z]\", \"\", class_name)\n  # Create a vector of the class name, with non-capital\
    \ letters\n  class_name_sm <- gsub(\"[A-Z]\", \"\", class_name)\n  # Find the\
    \ strength of the class name\n  class_strength <- str_count(class_name_caps, \"\
    \") - str_count(class_name_sm, \"\")\n  # Create a vector to hold the strength\
    \ of each extension\n  ext_strength <- numeric(length(extensions))\n  # Loop through\
    \ all the extensions, creating an uppercase vector and a lowercase vector\n  #\
    \ for each extension, and computing its strength\n  for (ext in 1:length(extensions))\
    \ {\n    extension_caps <- gsub(\"[a-z]\", \"\", extensions[ext])\n    extension_sm\
    \ <- gsub(\"[A-Z]\", \"\", extensions[ext])\n    ext_strength[ext] <- str_count(extension_caps,\
    \ \"\") - str_count(extension_sm, \"\")\n  }\n  # Create a vector to hold the\
    \ strength of each extension, relative to that of the class name\n  relative_strength\
    \ <- numeric(length(extensions))\n  # Loop through all the extensions, computing\
    \ the relative strength\n  for (ext in 1:length(extensions)) {\n    relative_strength[ext]\
    \ <- ext_strength[ext] - class_strength\n  }\n  # Find the maximum relative strength\
    \ (this will also yield the index of the extension with the max strength)\n  max_strength\
    \ <- max(relative_strength)\n  # Return the string of the class name, with the\
    \ name of the extension with the maximum strength\n  return(paste(class_name,\
    \ extensions[which(relative_strength == max_strength)], sep = \".\"))\n}\n", "\n\
    \  # ... your code here ...\n}\n", "\n    \n    # Your code goes here\n    capital\
    \ <- nchar(gsub(\"[^A-Z]\", \"\", extensions))\n    small <- nchar(gsub(\"[^a-z]\"\
    , \"\", extensions))\n    strength <- capital - small\n    x <- which.max(strength)\n\
    \    paste(class_name, extensions[x], sep = \".\")\n    # return(class_name)\n\
    }\n", "\n    strongest_extension_name <- NULL\n    strongest_extension_strength\
    \ <- -100\n    for (extension in extensions) {\n        capital_cnt <- sum(grepl(\"\
    [A-Z]\", extension))\n        small_cnt <- sum(grepl(\"[a-z]\", extension))\n\
    \        strength <- capital_cnt - small_cnt\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_name <- extension\n            strongest_extension_strength\
    \ <- strength\n        }\n    }\n    return(paste(class_name, \".\", strongest_extension_name,\
    \ sep=\"\"))\n}\n", "\n  strength <- 0\n  for (i in extensions) {\n    uppercase\
    \ <- count_pattern(i, \"[A-Z]\")\n    lowercase <- count_pattern(i, \"[a-z]\"\
    )\n    newstrength <- uppercase - lowercase\n    if (newstrength > strength) {\n\
    \      strength <- newstrength\n      strongest <- i\n    }\n  }\n  return(paste(class_name,\
    \ strongest, sep = \".\"))\n}\n", "\n  # this function takes a vector of extensions\
    \ as input and\n  # ouputs a vector of numbers\n  strength <- function(x) {\n\
    \    # add up the uppercase letters\n    cap <- sum(grepl(\"[[:upper:]]\", x))\n\
    \    # add up the lowercase letters\n    sm <- sum(grepl(\"[[:lower:]]\", x))\n\
    \    # return the difference\n    cap - sm\n  }\n  # this function takes a vector\
    \ of extension strengths as input and\n  # returns the index of the maximum\n\
    \  Index_Of_Max <- function(x) {\n    # start with the first extension as the\
    \ maximum\n    # and its index as the best index\n    best <- x[1]\n    best_index\
    \ <- 1\n    # loop through the extensions\n    for (i in 1:length(x)) {\n    \
    \  # if this extension is better than the current best\n      if (x[i] > best)\
    \ {\n        # update the best extension\n        best <- x[i]\n        # update\
    \ the best index\n        best_index <- i\n      }\n    }\n    # return the best\
    \ index\n    best_index\n  }\n  # get the extension strengths\n  ext_strengths\
    \ <- strength(extensions)\n  # get the index of the maximum strength\n  max_index\
    \ <- Index_Of_Max(ext_strengths)\n  # return the class name, dot, and the name\
    \ of the strongest extension\n  paste(class_name, extensions[max_index], sep =\
    \ \".\")\n}", "\n  # Function to return the strength of an extension.\n  get_strength\
    \ <- function(ext) {\n    # Calculate the number of uppercase letters and the\
    \ number of lowercase\n    # letters.\n    # Note: The function toupper() converts\
    \ a string to uppercase.\n    # The function tolower() converts a string to lowercase.\n\
    \    # The function is.upper() takes a string and returns TRUE if a letter is\
    \ \n    # uppercase and FALSE otherwise.\n    n_cap <- sum(is.upper(ext))\n  \
    \  n_sm <- sum(is.lower(ext))\n    # Calculate the strength.\n    return(n_cap\
    \ - n_sm)\n  }\n  # Get the strength of each extension.\n  strengths <- sapply(extensions,\
    \ get_strength)\n  # Find the maximum strength.\n  max_strenth <- max(strengths)\n\
    \  # Get the index of the maximum strength.\n  max_strenth_idx <- which.max(strengths)\n\
    \  # Return the class name and the strongest extension.\n  return(paste(class_name,\
    \ extensions[max_strenth_idx], sep = '.'))\n}\nprint(Strongest_Extension('Slices',\
    \ c('SErviNGSliCes', 'Cheese', 'StuFfed')))", "\n    # Indices of extensions\n\
    \    idx <- sapply(extensions, grepl, pattern = '[a-z]')\n    # Index of extension\
    \ with highest strength\n    idx_max <- which.max(sub('.*?([A-Z]*).*', '\\\\1',\
    \ extensions[idx]) - extensions[idx])\n    # Name of extension with highest strength\n\
    \    ext_max <- extensions[idx][idx_max]\n    # Name of extension with highest\
    \ strength\n    paste(class_name, ext_max, sep = '.')\n}", "\n  ext <- extensions\n\
    \  ext <- unlist(lapply(ext, function(x) {\n    temp <- paste(class_name, x, sep='.')\n\
    \    s <- sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]', x))\n    c(temp, s)\n  }))\n\
    \  ext <- data.frame(ext, stringsAsFactors=FALSE)\n  colnames(ext) <- c('class',\
    \ 'strength')\n  ext <- ext[order(ext$strength, ext$class), ]\n  row.names(ext)\
    \ <- NULL\n  return(as.character(ext[1, 1]))\n}\n", "\n  class_name <- class_name\n\
    \  extensions <- extensions\n  # calculate strength of each extension\n  strength\
    \ <- sapply(extensions, function(e) sum(is.upper(e)) - sum(is.lower(e)))\n  #\
    \ find the strongest extension\n  strongest <- extensions[strength == max(strength)]\n\
    \  # return string in the specified format\n  return(paste(class_name, '.', strongest,\
    \ sep = ''))\n}\n", "\n    ext_strength <- function(ext) {\n        CAP <- sum(x\
    \ <- as.integer(stri_detect_regex(string = ext, pattern = \"[A-Z]\")))\n     \
    \   SM <- sum(y <- as.integer(stri_detect_regex(string = ext, pattern = \"[a-z]\"\
    )))\n        return (CAP - SM)\n    }\n    strongest_ext <- names(extensions)[which.max(unlist(lapply(extensions,\
    \ ext_strength)))]\n    return (paste(class_name, '.', strongest_ext, sep = ''))\n\
    }", "\n    all_extensions <- c(extensions, class_name)\n    strength <- data.frame(name\
    \ = all_extensions, strength = 0)\n    strength$strength <- sapply(strength$name,\
    \ function(x) {\n        cap_count <- sum(str_detect(x, '[A-Z]'))\n        sm_count\
    \ <- sum(str_detect(x, '[a-z]'))\n        return(cap_count - sm_count)\n    })\n\
    \    max_strength <- max(strength$strength)\n    strongest_ext <- strength[strength$strength\
    \ == max_strength, 'name']\n    return(paste(class_name, '.', strongest_ext, sep\
    \ = ''))\n}\n", "\n  # Input is a list of extensions and a class name\n  # Output\
    \ is a string with the strongest extension\n  # We go through each extension,\
    \ calculating the strength and storing\n  # it in a list along with the extension\
    \ name. Then we choose the\n  # maximum strength and its corresponding extension.\n\
    \  ext_strength <- list()\n  for (ext in extensions) {\n    ext_strength[[ext]]\
    \ <- sum(grepl('[A-Z]', ext)) - sum(grepl('[a-z]', ext))\n  }\n  class_name <-\
    \ paste(class_name, names(which.max(ext_strength)), sep='.')\n  return(class_name)\n\
    }\n", "\n  cnt_upper <- function(x) {\n    len <- nchar(x)\n    cnt <- 0\n   \
    \ for (i in 1:len) {\n      if (is.na(gsub(\"[A-Z]\", \"\", substr(x, i, i))))\n\
    \        cnt <- cnt + 1\n    }\n    return(cnt)\n  }\n  cnt_lower <- function(x)\
    \ {\n    len <- nchar(x)\n    cnt <- 0\n    for (i in 1:len) {\n      if (is.na(gsub(\"\
    [a-z]\", \"\", substr(x, i, i))))\n        cnt <- cnt + 1\n    }\n    return(cnt)\n\
    \  }\n  strength <- function(x) {\n    cnt_upper(x) - cnt_lower(x)\n  }\n  max_strength\
    \ <- 0\n  for (i in 1:length(extensions)) {\n    curr_strength <- strength(extensions[i])\n\
    \    if (curr_strength > max_strength) {\n      max_strength <- curr_strength\n\
    \      max_strength_index <- i\n    }\n  }\n  return(paste(class_name, \".\",\
    \ extensions[max_strength_index], sep = \"\"))\n}\n", "\n  strengths <- sapply(extensions,\
    \ function(x) {\n    CAP <- sum(grepl('[A-Z]', x))\n    SM <- sum(grepl('[a-z]',\
    \ x))\n    return(CAP - SM)\n  })\n  # print(strengths)\n  pos <- which.max(strengths)\n\
    \  # print(pos)\n  return(paste(class_name, extensions[pos], sep = '.'))\n}\n",
  "\n  cap <- function(ext){sum(grepl('[A-Z]', ext))}\n  sm <- function(ext){sum(grepl('[a-z]',\
    \ ext))}\n  strg <- function(ext){cap(ext) - sm(ext)}\n  strongest <- max(sapply(extensions,\
    \ strg))\n  index <- which(sapply(extensions, strg) == strongest)\n  return(paste(class_name,\
    \ extensions[index[1]], sep = '.'))\n}", "\n    lapply(extensions, function(ext){\n\
    \        sum(startsWith(ext, \"A\"), na.rm = TRUE) - \n            sum(startsWith(ext,\
    \ \"z\"), na.rm = TRUE)\n    })\n}\n", "\n  cap <- str_count(extensions, '[A-Z]')\n\
    \  sm <- str_count(extensions, '[a-z]')\n  strongest <- which.max(cap - sm)\n\
    \  paste0(class_name, '.', extensions[strongest])\n}\nStrongest_Extension('my_class',\
    \ c('AA', 'Be', 'CC'))\n", "\n    number_of_upper_case <- list()\n    number_of_lower_case\
    \ <- list()\n    for (i in 1:length(extensions)) {\n        number_of_upper_case[i]\
    \ <- length(grep(\"[A-Z]\",extensions[i]))\n        number_of_lower_case[i] <-\
    \ length(grep(\"[a-z]\",extensions[i]))\n    }\n    strengths <- (number_of_upper_case\
    \ - number_of_lower_case) / \n        length(extensions)\n    ind <- which.max(strengths)\n\
    \    final_answer <- paste(class_name, extensions[ind], sep = \".\")\n    return(final_answer)\n\
    }\n \nprint(Strongest_Extension('Slices', c('SErviNGSliCes', 'Cheese', 'StuFfed')))",
  "\n    # Find the number of uppercase letters in an input string\n    get_num_uppercase\
    \ <- function(string) {\n        num_upper <- sum(grepl(\"[[:upper:]]\", string))\n\
    \        return(num_upper)\n    }\n    \n    # Find the number of lowercase letters\
    \ in an input string\n    get_num_lowercase <- function(string) {\n        num_lower\
    \ <- sum(grepl(\"[[:lower:]]\", string))\n        return(num_lower)\n    }\n \
    \   \n    # Calculate the strength of a given extension\n    get_strength <- function(extension)\
    \ {\n        extension_strength <- get_num_uppercase(extension) - get_num_lowercase(extension)\n\
    \        return(extension_strength)\n    }\n    \n    # Find the strongest extension,\
    \ given a list of all extensions\n    get_strongest_extension <- function(all_extensions)\
    \ {\n        # Calculate the strength of each extension\n        extension_strengths\
    \ <- sapply(all_extensions, get_strength)\n        \n        # Find the index\
    \ of the strongest extension\n        strongest_extension_index <- which.max(extension_strengths)\n\
    \        \n        # Find the name of the strongest extension\n        strongest_extension\
    \ <- all_extensions[strongest_extension_index]\n        \n        return(strongest_extension)\n\
    \    }\n    \n    strongest_extension <- get_strongest_extension(extensions)\n\
    \    strongest_extension_class <- paste(class_name, \".\", strongest_extension,\
    \ sep = \"\")\n    \n    return(strongest_extension_class)\n}\n", "\n\t\n  # your\
    \ code here\n  strength <- NULL\n  for(i in extensions){\n    s <- sum(str_count(i,\
    \ \"[A-Z]\")) - sum(str_count(i, \"[a-z]\"))\n    strength <- c(strength, s)\n\
    \  }\n  m <- max(strength)\n  n <- length(strength)\n  result <- extensions[which(strength\
    \ == m)]\n  if(n == 1){\n    return(paste(class_name, result, sep = \".\"))\n\
    \  }else{\n    return(paste(class_name, result[1], sep = \".\"))\n  }\n}\n", "\n\
    \  strongest_ext <- extensions[1]\n  strongest_strength <- CAP_count(strongest_ext)\
    \ - SM_count(strongest_ext)\n  for (ext in extensions[-1]) {\n    strength <-\
    \ CAP_count(ext) - SM_count(ext)\n    if (strength > strongest_strength) {\n \
    \     strongest_strength <- strength\n      strongest_ext <- ext\n    }\n  }\n\
    \  paste(class_name, strongest_ext, sep='.')\n}\n", "\n  extension_names <- sapply(extensions,\
    \ function(extension) {\n    sub('^[[:lower:]]+', '', extension)\n  })\n  strongest_extension\
    \ <- extension_names[which.max(sapply(extension_names, nchar))]\n  return(paste(class_name,\
    \ strongest_extension, sep = '.'))\n}\n", "\n  # Your Code Here\n  strength <-\
    \ numeric(length(extensions))\n  for (i in 1:length(extensions)) {\n    strength[i]\
    \ <- sum(strsplit(extensions[i], \"\")[[1]] %in% LETTERS) -\n      sum(strsplit(extensions[i],\
    \ \"\")[[1]] %in% LETTERS, tolower)\n  }\n  return(paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\"))\n}", "\n    name <- extensions[1]\n    strenght <- 0\n    for\
    \ (i in 1:length(extensions)) {\n        ext <- extensions[i]\n        tmp <-\
    \ sum(grepl(\"[A-Z]\", ext)) - sum(grepl(\"[a-z]\", ext))\n        if (tmp > strenght)\
    \ {\n            strenght <- tmp\n            name <- ext\n        }\n    }\n\
    \    paste(class_name, name, sep=\".\")\n}\n ", "\n  # Get strength of each extension\n\
    \  strength <- vector()\n  for (extension in extensions) {\n    strength <- c(strength,sum(grepl('[A-Z]',\
    \ extension), sum(grepl('[a-z]', extension))))\n  }\n  # Get name of the strongest\
    \ extension\n  strongest_extension <- extensions[which.max(strength)]\n  # Return\
    \ class name + strongest extension\n  return(paste(class_name, '.', strongest_extension,\
    \ sep=''))\n}\nStrongest_Extension('my_class', c('AA', 'Be', 'CC'))\n", "\n  num_upper\
    \ <- nchar(gsub(\"[^A-Z]\", \"\", extensions))\n  num_lower <- nchar(gsub(\"[^a-z]\"\
    , \"\", extensions))\n  strength <- num_upper - num_lower\n  strongest <- which.max(strength)\n\
    \  return(paste(class_name, extensions[strongest], sep = \".\"))\n}\nc(\"AA\"\
    , \"Be\", \"CC\")\n", "\n  # <YOUR CODE GOES HERE>\n  \n  uppers = str_count(extensions,\
    \ \"[A-Z]\")\n  lowers = str_count(extensions, \"[a-z]\")\n  strongest = extensions[which.max(uppers\
    \ - lowers)]\n  if (length(strongest) > 1) {\n    strongest = extensions[which.min(match(extensions,\
    \ strongest))]\n  }\n  return(paste(class_name, strongest, sep = \".\"))\n}\n",
  "\n  # Cap and sm will be vectors of capital letters and small letters count\n \
    \ # We will check if the length of the vectors are equal\n  # If the lengths are\
    \ equal, we will find the max of the vectors\n  # If not, then the first element\
    \ of the extensions is the strongest one\n  cap <- 0\n  sm <- 0\n  for (i in 1:length(extensions))\
    \ {\n    for (j in 1:nchar(extensions[i])) {\n      if (substr(extensions[i],\
    \ j, j) == toupper(substr(extensions[i], j, j))) {\n        cap[i] <- cap[i] +\
    \ 1\n      } else {\n        sm[i] <- sm[i] + 1\n      }\n    }\n  }\n  if (length(cap)\
    \ == length(sm)) {\n    max_index <- which.max(cap - sm)\n    strongest_extension\
    \ <- extensions[max_index]\n  } else {\n    strongest_extension <- extensions[1]\n\
    \  }\n  return(paste(class_name, \".\", strongest_extension, sep = \"\"))\n}",
  "\n  # Define an empty vector for storing the values of the strengths\n  strengths\
    \ <- numeric(length(extensions))\n  # Iterate over all extensions\n  for (i in\
    \ 1:length(extensions)) {\n    # Count the number of uppercase letters in the\
    \ extension name and\n    # store it as 'uc'\n    uc <- length(gregexpr(\"[A-Z]\"\
    , extensions[i])[[1]])\n    # Count the number of lowercase letters in the extension\
    \ name and\n    # store it as 'lc'\n    lc <- length(gregexpr(\"[a-z]\", extensions[i])[[1]])\n\
    \    # Compute the strength of the extension and store it in the vector\n    strengths[i]\
    \ <- uc - lc\n  }\n  # Find the index of the maximum strength in the vector strengths\n\
    \  strongest <- which.max(strengths)\n  # Return the class name + the name of\
    \ the strongest extension\n  paste(class_name, extensions[strongest], sep=\".\"\
    )\n}\n", "\n  num_caps <- function(s) {\n    sum(str_detect(s, \"[A-Z]\"))\n \
    \ }\n  num_sm <- function(s) {\n    sum(str_detect(s, \"[a-z]\"))\n  }\n  cap_sm\
    \ <- function(s) {\n    num_caps(s) - num_sm(s)\n  }\n  strengths <- sapply(extensions,\
    \ cap_sm)\n  max_strength <- max(strengths)\n  # return(paste(class_name, extensions[max_strength\
    \ == strengths], sep = \".\"))\n  extensions[strengths == max_strength][1]\n}\n",
  "\n  m <- lapply(extensions, function(x) sum(is.upper(x)) - sum(is.lower(x)))\n\
    \  return(paste(class_name, extensions[which.max(m)], sep = '.'))\n}", "\n  #\
    \ Create an empty data frame to store the extensions\n  extensions_df <- data.frame(extensions)\n\
    \  # Calculate the strength by CAP - SM\n  extensions_df$strength <- sapply(extensions_df$extensions,\
    \ function(x) {\n    # Find the number of uppercase and lowercase letters\n  \
    \  # and return the strength\n    sum(grepl('[A-Z]', x)) - sum(grepl('[a-z]',\
    \ x))\n  })\n  # Sort the data frame by strength (highest strength first)\n  extensions_df\
    \ <- extensions_df[order(extensions_df$strength, decreasing = TRUE), ]\n  # Get\
    \ the first row in the sorted data frame and paste the name \n  # with the extension\n\
    \  paste(class_name, extensions_df[1, 1], sep = '.')\n}", "\n  if (length(extensions)\
    \ == 0) return(class_name)\n  v <- substr(extensions, 1, 1)\n  ext <- extensions[which.max(ifelse(v\
    \ %in% LETTERS, 1, -1))]\n  return(paste(class_name, ext, sep = '.'))\n}", "\n\
    \  if (length(extensions) > 0) {\n    strengths <- sapply(extensions, function(x)\
    \ {length(grep(\"[A-Z]\", x)) - length(grep(\"[a-z]\", x))})\n    class_name <-\
    \ paste(class_name, extensions[which.max(strengths)], sep = \".\")\n  }\n  return(class_name)\n\
    }", "\n\t# your code here\n\text <- extensions[which.max(nchar(toupper(extensions))\
    \ - nchar(tolower(extensions)))]\n\treturn(paste(class_name, \".\", ext, sep =\
    \ \"\"))\n}", "\n    # Class name is the given class_name (a string)\n    # Extensions\
    \ is the given list of extensions\n    # You are to return the ClassName.StrongestExtensionName\n\
    \    # Hint: For each extension, how do you calculate its strength?\n    # You\
    \ may find the function toupper() and tolower() helpful.\n    strengths = mapply(function(x)\
    \ length(toupper(x)) - length(tolower(x)), extensions)\n    return(paste(class_name,\
    \ extensions[which.max(strengths)], sep = \".\"))\n}\n", "\n  # Identify number\
    \ of upper case letters in extension\n  upper_case <- lapply(extensions, function(x)\
    \ {\n    return(length(grep(\"[A-Z]\", x)))\n  })\n  # Identify number of lower\
    \ case letters in extension\n  lower_case <- lapply(extensions, function(x) {\n\
    \    return(length(grep(\"[a-z]\", x)))\n  })\n  # Identify strength of extensions\n\
    \  strength <- lapply(seq_along(extensions), function(x) {\n    return(upper_case[[x]]\
    \ - lower_case[[x]])\n  })\n  # Find index of strongest extension\n  strongest_extension\
    \ <- which.max(unlist(strength))\n  # Return class and extension name\n  return(paste(class_name,\
    \ extensions[strongest_extension], sep = \".\"))\n}"]
stop_tokens:
- "\n#"
- "\n```"
