name: HumanEval_51_remove_vowels
language: r
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n\
  # >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n\
  # 'zbcd'\nremove_vowels <- function(text) {"
tests: "test_humaneval <- function() {\ncandidate <- remove_vowels\n    if(!identical(candidate(''),\
  \ '')){quit('no', 1)}\n    if(!identical(candidate('abcdef\\nghijklm'), 'bcdf\\\
  nghjklm')){quit('no', 1)}\n    if(!identical(candidate('fedcba'), 'fdcb')){quit('no',\
  \ 1)}\n    if(!identical(candidate('eeeee'), '')){quit('no', 1)}\n    if(!identical(candidate('acBAA'),\
  \ 'cB')){quit('no', 1)}\n    if(!identical(candidate('EcBOO'), 'cB')){quit('no',\
  \ 1)}\n    if(!identical(candidate('ybcd'), 'ybcd')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    \n}\n", "\n    \n    # We will use gsub (global substitution)\
    \ for this task.\n    # gsub requires two arguments: first is the pattern we want\
    \ to replace, second is what we want to replace it with.\n    # For example, gsub('a',\
    \ 'z', 'abcdef') returns zbcdef.\n    # gsub replaces all occurrences of the pattern.\n\
    \    # In our case we want to replace all vowels with empty string, so that all\
    \ vowels disappear.\n    gsub('[aeiouAEIOU]', '', text)\n}\n ", "\n    # if text\
    \ is a string\n    if (typeof(text) == \"character\") {\n        # create result\n\
    \        result <- \"\"\n        # loop through characters\n        for (i in\
    \ 1:nchar(text)) {\n            # if character is not a vowel\n            if\
    \ (!(substr(text, i, i) %in% c(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\"\
    , \"I\", \"O\", \"U\"))) {\n                # append to result\n             \
    \   result <- paste(result, substr(text, i, i), sep = \"\")\n            }\n \
    \       }\n        # return result\n        return(result)\n    }\n    # if text\
    \ is not a string\n    else {\n        # return empty string\n        return(\"\
    \")\n    }\n}\n\nremove_vowels(\"\")\nremove_vowels(\"abcdef\")\nremove_vowels(\"\
    aaaaa\")\nremove_vowels(\"aaBAA\")\nremove_vowels(\"zbcd\")\n", "\n  text[!text\
    \ %in% c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')]\n}\n\nremove_vowels('')\n\
    \nremove_vowels('abcdef')\n\nremove_vowels('aaaaa')\n\nremove_vowels('aaBAA')\n\
    \nremove_vowels('zbcd')\n", "\n    return_value <- \"\"\n    for (letter in text)\
    \ {\n        if (letter %in% c(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\"\
    , \"I\", \"O\", \"U\")) {\n            next\n        } else {\n            return_value\
    \ <- paste(return_value, letter, sep = \"\")\n        }\n    }\n    return(return_value)\n\
    }\nremove_vowels(\"\")\nremove_vowels(\"abcdef\")\nremove_vowels(\"aaaaa\")\n\
    remove_vowels(\"aaBAA\")\nremove_vowels(\"zbcd\")\n", "\n    grep(pattern = \"\
    [aeiouAEIOU]\", x = text, invert = TRUE, value = TRUE)\n}\n\nremove_vowels(\"\
    zacAEIxyz\")\n", "\n    text <- tolower(text)\n    text <- stringr::str_replace_all(text,\
    \ \"[aeiou]\", \"\")\n    return(text)\n}\n\nremove_vowels(tolower(c(\"Hello\"\
    , \"World\", \"Haskell\")))", "\n  text %>% \n    str_split(\"\") %>% # Split\
    \ a string into a list of characters.\n    unlist() %>% # Unlist()'s argument\
    \ can be a list of lists\n    str_replace_all(c(\"a\" = \"\", \"e\" = \"\", \"\
    i\" = \"\", \"o\" = \"\", \"u\" = \"\")) %>% \n    paste(collapse = \"\") %>%\
    \ # paste() combines the letters into a word\n    str_trim() # trim() removes\
    \ the leading and trailing spaces\n}\n\nremove_vowels(\"aaBAA\")\n\nremove_vowels(c(\"\
    aaBAA\", \"zbcd\"))\n", "\n    text[-grep(\"[aeiouAEIOU]\", text)]\n}\nremove_vowels(\"\
    aaBAA\")\n", "\n  gsub('[aeiouAEIOU]', '', text)\n}\nremove_vowels('')\n", "\n\
    \   text = gsub(\"[aeiouAEIOU]\", \"\", text)\n   return(text)\n}\n", "\n    #\
    \ write your code here\n}", "\n    text <- strsplit(text, \"\")[[1]]\n    text\
    \ <- text[!(text %in% c(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"))]\n    paste(text, collapse = \"\")\n}", "\n    # YOUR CODE HERE\n\
    \    return(gsub('[aeiouAEIOU]', '', text))\n}\n\ncat(remove_vowels('abcd'))\n",
  "\n    \n    # Return empty string if the input is empty\n    if (text == \"\")\
    \ {\n        return (\"\")\n    }\n    \n    # List of vowels\n    vowels <- c(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n    \n  \
    \  # Remove vowels\n    temp <- stringr::str_replace_all(text, \"[aeiouAEIOU]\"\
    , \"\")\n    \n    # Return result\n    return (temp)\n}\n", "\n    text <- unlist(strsplit(text,\
    \ ''))\n    text <- text[!text %in% c('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U')]\n    return(paste(text, collapse = ''))\n}\n", "\n  gsub(\"[aeiouAEIOU]\"\
    , \"\", text)\n}\nremove_vowels(\"aaaaa\")\n", "\n  return(gsub(\"[aeiouAEIOU]\"\
    , \"\", text))\n}\ntest_that(\"test remove_vowels\", {\n  expect_equal(remove_vowels(\"\
    \"), \"\")\n  expect_equal(remove_vowels(\"abcdef\"), \"bcdf\")\n  expect_equal(remove_vowels(\"\
    aaaaa\"), \"\")\n  expect_equal(remove_vowels(\"aaBAA\"), \"B\")\n  expect_equal(remove_vowels(\"\
    zbcd\"), \"zbcd\")\n})", "\n  return(gsub(\"[aeiouAEIOU]\", \"\", text))\n}\n",
  "\n  rgx <- '[aeiou]'\n  stringr::str_replace_all(text, rgx, '')\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
