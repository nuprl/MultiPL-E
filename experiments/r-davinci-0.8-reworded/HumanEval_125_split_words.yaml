name: HumanEval_125_split_words
language: r
prompt: "# Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n# should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words('Hello\
  \ world!')\n# c('Hello', 'world!')\n# >>> split_words('Hello,world!')\n# c('Hello',\
  \ 'world!')\n# >>> split_words('abcdef')\n# 3\nsplit_words <- function(txt) {"
tests: "test_humaneval <- function() {\ncandidate <- split_words\n    if(!identical(candidate('Hello\
  \ world!'), c('Hello', 'world!'))){quit('no', 1)}\n    if(!identical(candidate('Hello,world!'),\
  \ c('Hello', 'world!'))){quit('no', 1)}\n    if(!identical(candidate('Hello world,!'),\
  \ c('Hello', 'world,!'))){quit('no', 1)}\n    if(!identical(candidate('Hello,Hello,world\
  \ !'), c('Hello,Hello,world', '!'))){quit('no', 1)}\n    if(!identical(candidate('abcdef'),\
  \ 3)){quit('no', 1)}\n    if(!identical(candidate('aaabb'), 2)){quit('no', 1)}\n\
  \    if(!identical(candidate('aaaBb'), 1)){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n}", "\n  # YOUR CODE HERE\n  spaces <- gregexpr(\"\
    [ ,]+\", txt)\n  if(length(spaces[[1]]) == 0){\n    commas <- gregexpr(\"[,]+\"\
    , txt)\n    if(length(commas[[1]]) == 0){\n      nchar(txt)\n    }\n    else{\n\
    \      unlist(strsplit(txt, split = \",\"))\n    }\n  }\n  else{\n    unlist(strsplit(txt,\
    \ split = \" \"))\n  }\n}\nsplit_words(\"abcdef\")\n", "\n    if (sum(grepl(\"\
    \\\\s\", txt)) > 0) {\n        return(unlist(strsplit(txt, \"\\\\s\")))\n    }\
    \ else if (sum(grepl(\",\", txt)) > 0) {\n        return(unlist(strsplit(txt,\
    \ \",\")))\n    } else {\n        return(sum(row(txt) %% 2 == 1))\n    }\n}\n\
    test_that(\"Solution is correct\", {\n    expect_true(identical(split_words(\"\
    Hello world!\"), \"Hello\"))\n    expect_true(identical(split_words(\"Hello,world!\"\
    ), \"Hello\"))\n    expect_true(identical(split_words(\"abcdef\"), 3))\n})\n",
  "\n  # your code here\n  return(txt)\n}\n ", "\n    # Your code here\n    if(grepl(\"\
    \ \", txt)) {\n        return(unlist(strsplit(txt, \" \")))\n    }\n    else if(grepl(\"\
    ,\", txt)) {\n        return(unlist(strsplit(txt, \",\")))\n    }\n    else {\n\
    \        txt <- unlist(strsplit(txt, \"\"))\n        rv <- 0\n        for(i in\
    \ txt) {\n            if(ord(i) %% 2 == 1) {\n                rv <- rv + 1\n \
    \           }\n        }\n        return(rv)\n    }\n}\nsplit_words(\"Hello world!\"\
    )\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\")\n", "\n  # split on\
    \ whitespace (space and tab)\n  if (grepl(\" |\\t\", txt)) {\n    strsplit(txt,\
    \ \" |\\t\")[[1]]\n  } else if (grepl(\",\", txt)) {\n    # split on comma\n \
    \   strsplit(txt, \",\")[[1]]\n  } else {\n    sum(!(seq_along(txt) %% 2))\n \
    \ }\n}\n", "\n  # YOUR CODE HERE\n  if(!grepl(\" \", txt)) {\n    if(!grepl(\"\
    ,\", txt)) {\n      x <- strsplit(txt, \"\")[[1]]\n      x <- lapply(x, function(x)\
    \ as.integer(x) - 97)\n      x <- x[x %% 2 == 1]\n      return(length(x))\n  \
    \  } else {\n      x <- unlist(strsplit(txt, \",\"))\n      return(x)\n    }\n\
    \  } else {\n    x <- unlist(strsplit(txt, \" \"))\n    return(x)\n  }\n}\nsplit_words('Hello\
    \ world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n ", "\n  if(grepl(\"\
    \ \", txt)){\n    strsplit(txt, \" \")[[1]]\n  } else if(grepl(\",\", txt)){\n\
    \    strsplit(txt, \",\")[[1]]\n  } else {\n    sum(grepl(\"([a-z])[^e]\\\\1\"\
    , txt))\n  }\n}\n\n", "\n    # your code goes here\n    if (length(gregexpr(\"\
    \ \", txt)[[1]]) != 0) {\n        if (length(gregexpr(\",\", txt)[[1]]) != 0)\
    \ {\n            txt1 <- unlist(strsplit(txt, \",\"))\n            return(txt1)\n\
    \        }\n        else {\n            txt1 <- unlist(strsplit(txt, \" \"))\n\
    \            return(txt1)\n        }\n    }\n    else {\n        return(length(sub(\"\
    [^aeiou]\", \"\", txt)))\n    }\n}\n", "\n  words <- strsplit(txt, \"[,\\\\s]\"\
    )[[1]]\n  if (length(words) > 0) {\n    words\n  } else {\n    sum(grepl(\"[a-z]\"\
    , txt))\n  }\n}\n", "\n    if(length(grep(\" \", txt)) > 0) {\n        return(unlist(strsplit(txt,\
    \ split = \" \")))\n    } else if(length(grep(\",\", txt)) > 0) {\n        return(unlist(strsplit(txt,\
    \ split = \",\")))\n    } else {\n        tmp <- c()\n        for(i in 1:length(txt))\
    \ {\n            if(i %% 2 != 0) {\n                tmp <- c(tmp, tolower(txt[i]))\n\
    \            }\n        }\n        return(length(tmp))\n    }\n}\n", "\n  whitespace_pos\
    \ <- gregexpr('\\\\s', txt)\n  whitespace_pos <- unlist(whitespace_pos)\n  if\
    \ (length(whitespace_pos) == 0) {\n    comma_pos <- gregexpr(',', txt)\n    comma_pos\
    \ <- unlist(comma_pos)\n    if (length(comma_pos) == 0) {\n      ret <- nchar(txt[grepl('[a-z]',\
    \ txt)])\n      if (ret %% 2 == 0) {\n        ret\n      } else {\n        ret\
    \ - 1\n      }\n    } else {\n      txt <- strsplit(txt, ',')[[1]]\n      for\
    \ (i in 1:length(txt)) {\n        txt[i] <- gsub(' ', '', txt[i])\n      }\n \
    \     return(txt)\n    }\n  } else {\n    return(strsplit(txt, '\\\\s')[[1]])\n\
    \  }\n}\n\nsplit_words('    Hello world!   ')\n\nsplit_words('Hello,world!')\n\
    \nsplit_words('abcdef')\n\nsplit_words('abcdefgh')\n", "\n\tif(!grepl(\"[\\\\\
    s,]\", txt)) {\n\t\ty <- 0\n\t\tfor(i in 1:nchar(txt)) {\n\t\t\ta <- tolower(substr(txt,\
    \ i, i))\n\t\t\tx <- ord(a)\n\t\t\ty <- y + (x %% 2)\n\t\t}\n\t\ty\n\t} else if(!grepl(\"\
    \\\\s\", txt)) {\n\t\treturn(strsplit(txt, \",\")[[1]])\n\t} else {\n\t\treturn(strsplit(txt,\
    \ \"\\\\s\")[[1]])\n\t}\n}\n", "\n  words <- strsplit(txt, \"[[:space:]]+|,\"\
    )[[1]]\n  if (length(words) == 0) {\n    return(sum(str_count(txt, \"([a-z])\"\
    ) %% 2 == 1))\n  }\n  return(words)\n}\n\n", "\n  words <- strsplit(txt, split\
    \ = \"\\\\s\")[[1]]\n  if(length(words) > 0) return(words)\n  words <- strsplit(txt,\
    \ split = \",\")[[1]]\n  if(length(words) > 0) return(words)\n  letters <- strsplit(txt,\
    \ split = \"\")[[1]]\n  ords <- sapply(letters, function(l) {\n    ord <- intToUtf8(l)\n\
    \    return(ord)\n  })\n  return(sum(ords %% 2 == 1))\n}\n", "\n  # YOUR CODE\
    \ HERE\n  if (grepl(\" \", txt) == TRUE)\n  {\n    a <- strsplit(txt, \" \")\n\
    \    return(a[[1]])\n  }\n  else if (grepl(\",\", txt) == TRUE)\n  {\n    a <-\
    \ strsplit(txt, \",\")\n    return(a[[1]])\n  }\n  else if (grepl(\"[a-z]\", txt)\
    \ == TRUE)\n  {\n    a <- strsplit(txt, \"\")\n    b <- as.numeric(a[[1]])\n \
    \   c <- b %% 2\n    d <- length(which(c != 0))\n    return(d)\n  }\n}\nsplit_words('Hello\
    \ world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')", "\n  if(any(grepl('\
    \ ', txt))) {\n    return(strsplit(txt, split = ' ')[[1]])\n  } else if(any(grepl(',',\
    \ txt))) {\n    return(strsplit(txt, split = ',')[[1]])\n  } else {\n    return(sum(as.numeric(substr(txt,\
    \ 1, 1)) %% 2))\n  }\n}\n", "\n    # YOUR CODE HERE\n    if(str_count(txt, \"\
    \ \") > 0) {\n        return(str_split(txt, \" \")[[1]])\n    } else if(str_count(txt,\
    \ \",\") > 0) {\n        return(str_split(txt, \",\")[[1]])\n    } else {\n  \
    \      txt <- str_split(txt, \"\")[[1]]\n        count <- 0\n        for(i in\
    \ seq_along(txt)) {\n            if(order(txt[i]) %% 2 != 0) {\n             \
    \   count <- count + 1\n            }\n        }\n        return(count)\n    }\n\
    }\n", "\n  \n  if(grepl(\"\\\\s\", txt)) {\n    return(unlist(strsplit(txt, \"\
    \\\\s\")))\n  } else if(grepl(\",\", txt)) {\n    return(unlist(strsplit(txt,\
    \ \",\")))\n  } else {\n    txt <- stri_trans_tolower(txt)\n    return(sum(str_count(txt,\
    \ \"[acegikmoqsuwy]\")))\n  }\n}\nsplit_words(\"Hello world!\")\nsplit_words(\"\
    Hello,world!\")\nsplit_words(\"abcdef\")\n", "\n    words <- unlist(strsplit(txt,\
    \ ' '))\n    if(length(words) == 1) {\n        words <- unlist(strsplit(txt, ','))\n\
    \        if(length(words) == 1) {\n            return(sum(as.numeric(gregexpr('a',\
    \ txt)[[1]]) %% 2 == 1))\n        }\n    }\n    return(words)\n}\nsplit_words(\"\
    Hello, world!\")\n", "\n  if (grepl('[,\\\\s]', txt)) {\n    return(unlist(strsplit(txt,\
    \ '[,\\\\s]+')))\n  } else {\n    return(sum(as.numeric(gregexpr('[a-z]', txt)[[1]])\
    \ %% 2 == 1))\n  }\n}\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\n\
    split_words('abcdef')\n", "\n  if (grepl(' ', txt)) {\n    strsplit(txt, ' ')[[1]]\n\
    \  } else if (grepl(',', txt)) {\n    strsplit(txt, ',')[[1]]\n  } else {\n  \
    \  sum(str_sub(txt, seq_along(txt), seq_along(txt)) %in% letters[seq(1,26,2)])\n\
    \  }\n}\n", "\n  if (nchar(gsub(\" \", \"\", txt)) == 0) {\n    if (nchar(gsub(\"\
    ,\", \"\", txt)) == 0) {\n      return(sum(str_count(tolower(txt), \"[acegikmoqsuwy]\"\
    ) %% 2))\n    } else {\n      return(strsplit(txt, \"[,]\")[[1]])\n    }\n  }\
    \ else {\n    return(strsplit(txt, \"[ ]\")[[1]])\n  }\n}", "\n  \n  # Checks\
    \ for whitespace or commas. If neither are found then check for odd letters using\
    \ a loop.\n  if (str_detect(txt, \" \")) {\n    out <- unlist(strsplit(txt, \"\
    \ \"))\n  } else if (str_detect(txt, \",\")) {\n    out <- unlist(strsplit(txt,\
    \ \",\"))\n  } else {\n    # A vector of letters is created for use in the for\
    \ loop.\n    letters <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    odd <- c()\n    # Each\
    \ letter is checked if its order is odd. If so, it is added to a new vector.\n\
    \    for (i in letters) {\n      if (str_detect(txt, i)) {\n        if (str_count(txt,\
    \ i) %% 2 == 1) {\n          odd <- c(odd, i)\n        }\n      }\n    }\n   \
    \ # The new vector is converted to a list and returned.\n    out <- length(odd)\n\
    \  }\n  return(out)\n}\n", "\n  # YOUR CODE HERE\n  if(grep('[[:space:]]', txt,\
    \ perl = TRUE) != \"\"){\n    strsplit(txt, \" \")[[1]]\n  } else if(grep(',',\
    \ txt, perl = TRUE) != \"\"){\n    strsplit(txt, \",\")[[1]]\n  } else {\n   \
    \ sum(grepl(c('a', 'c', 'e', 'g', 'i', 'k', 'm', 'o', 'q', 's', 'u', 'w', 'y'),\n\
    \              txt, perl = TRUE))\n  }\n}\n\na <- split_words('Hello world!')\n\
    b <- split_words('Hello,world!')\nc <- split_words('abcdef')\n\nassert_equals(typeof(a),\
    \ 'character')\nassert_equals(typeof(b), 'character')\nassert_equals(typeof(c),\
    \ 'double')\nassert_equals(c(a, b), c('Hello', 'world!', 'Hello', 'world!'))\n\
    assert_equals(c(a, b), c('Hello', 'world!', 'Hello', 'world!'))\nassert_equals(3,\
    \ c)\n ", "\n    if(!grepl(\"\\\\s\", txt)){\n        if(!grepl(\",\", txt)){\n\
    \            return(sum(grepl(\"[a-z]\", txt)) %/% 2 == 1)\n        } else {\n\
    \            return(strsplit(txt, \",\")[[1]])\n        }\n    } else {\n    \
    \    return(strsplit(txt, \"\\\\s\")[[1]])\n    }\n}\n", "\n  ##\n  if (any(strsplit(txt,\
    \ \" \")[[1]] == \"\")) {\n    x <- strsplit(txt, \" \")[[1]]\n    x[x != \"\"\
    ]\n  } else if (any(strsplit(txt, \",\")[[1]] == \"\")) {\n    x <- strsplit(txt,\
    \ \",\")[[1]]\n    x[x != \"\"]\n  } else {\n    sum(!(seq_along(txt) %% 2))\n\
    \  }\n}\n\n", "\n  res <- strsplit(txt, '\\\\s+')\n  if(length(res) > 0) {\n \
    \   return(res[[1]])\n  } else {\n    return(strsplit(txt, ',', fixed = TRUE)[[1]])\n\
    \  }\n}\n", "\n  ws <- which(strsplit(txt, \"\")[[1]] == \" \")\n  if (length(ws)\
    \ > 0) {\n    res <- strsplit(txt, \" \")[[1]]\n  } else {\n    cs <- which(strsplit(txt,\
    \ \"\")[[1]] == \",\")\n    if (length(cs) > 0) {\n      res <- strsplit(txt,\
    \ \",\")[[1]]\n    } else {\n      res <- sum(seq_along(strsplit(txt, \"\")[[1]])\
    \ %% 2 == 0)\n    }\n  }\n  res\n}\n", "\n  # YOUR CODE HERE\n  if(grepl(\" \"\
    , txt))\n  {\n    x <- strsplit(txt, \" \")\n    return(x[[1]])\n  }\n  else if(grepl(\"\
    ,\", txt))\n  {\n    x <- strsplit(txt, \",\")\n    return(x[[1]])\n  }\n  else\
    \ if(length(txt) > 0)\n  {\n    ord <- as.numeric(charToRaw(txt))\n    count <-\
    \ 0\n    for(i in ord)\n    {\n      if(i %% 2 == 1)\n      {\n        count <-\
    \ count + 1\n      }\n    }\n    return(count)\n  }\n  else\n  {\n    return(0)\n\
    \  }\n}\n", "\n  words <- strsplit(txt, '[,\\\\s]+')[[1]]\n  if(length(words)\
    \ == 0) {\n    num <- sum(str_detect(str_to_lower(txt), '[a-z]') & (str_locate(str_to_lower(txt),\
    \ '[a-z]') %% 2 == 1))\n    return(num)\n  }\n  return(words)\n}\n", "\n  ret\
    \ <- stringr::str_split(txt, '[[:space:]]')[[1]]\n  if (length(ret) > 1) {\n \
    \   return(ret)\n  }\n  ret <- stringr::str_split(txt, ',')[[1]]\n  if (length(ret)\
    \ > 1) {\n    return(ret)\n  }\n  return(sum(stringr::str_count(txt, fixed('[a-z]'))\
    \ %% 2 == 1))\n}\n", "\n  if (grepl(' ', txt)) {\n    return(unlist(strsplit(txt,\
    \ ' ')))\n  } else if (grepl(',', txt)) {\n    return(unlist(strsplit(txt, ',')))\n\
    \  } else {\n    return(sum(grepl(paste0('(?<=', rev(letters), ')[', letters,\
    \ ']'), txt)))\n  }\n}\n\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\n\
    split_words('abcdef')\n", "\n    if(!any(c(' ', ',') %in% txt)) return(sum(seq_along(txt)\
    \ %% 2 == 1) + sum(seq_along(txt) %% 2 == 0))\n    if(any(c(' ', ',') %in% txt))\
    \ return(unlist(strsplit(txt, ',| ')))\n}\n", "\n    lst <- strsplit(txt, '[ ,]')[[1]]\n\
    \    if (length(lst)==1) {\n        sum(sapply(seq_along(txt), function(i) grepl(sprintf('[%s]',\
    \ txt[i]), 'acegikmoqsuwy')))\n    } else {\n        lst\n    }\n}\n", "\n  if\
    \ (length(grep(' ', txt))>0) {\n    return(unlist(strsplit(txt, \" \")))\n  }\n\
    \  if (length(grep(',', txt))>0) {\n    return(unlist(strsplit(txt, \",\")))\n\
    \  }\n  return(sum(as.integer(strsplit(txt, \"\")[[1]]) %% 2))\n}", "\n  if (grepl('\\\
    \\s', txt))\n    strsplit(txt, '\\\\s')[[1]]\n  else if (grepl(',', txt))\n  \
    \  strsplit(txt, ',')[[1]]\n  else\n    sum(as.numeric(charToRaw(txt)) %% 2)\n\
    }\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
  "\n    # YOUR CODE HERE\n    if (txt == \"\") return(0)\n    if (str_count(txt,\
    \ fixed(\" \")) > 0) {\n        words <- str_split(txt, fixed(\" \"))[[1]]\n \
    \       return(words)\n    } else if (str_count(txt, fixed(\",\")) > 0) {\n  \
    \      words <- str_split(txt, fixed(\",\"))[[1]]\n        return(words)\n   \
    \ } else {\n        n <- nchar(txt)\n        x <- 0\n        for (i in n:1) {\n\
    \            y <- as.integer(substr(txt, i, i))\n            if (y %% 2 == 1)\
    \ x <- x + 1\n        }\n        return(x)\n    }\n}\n \nsplit_words(\"Hello world!\"\
    )\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\")\n ", "\n    if(grepl(\"\
    \ \", txt)) {\n        return(unlist(strsplit(txt, \" \")))\n    } else if(grepl(\"\
    ,\", txt)) {\n        return(unlist(strsplit(txt, \",\")))\n    } else {\n   \
    \     return(sum(as.numeric(strsplit(txt, \"\")[[1]]) %% 2 == 1))\n    }\n}",
  "\n    whitespace <- gregexpr(\"\\\\s+\", txt)\n    word <- unlist(regmatches(txt,\
    \ whitespace))\n    commas <- gregexpr(\",\", txt)\n    comma <- unlist(regmatches(txt,\
    \ commas))\n    odd_length <- length(gregexpr(\"[a-z][a-z]\",txt))\n    if (length(word)\
    \ == 0){\n        if (length(comma) == 0){\n            return(odd_length)\n \
    \       }\n        return(split(txt, commas))\n    }\n    return(split(txt, whitespace))\n\
    }", "\n  #your code here\n}\n ", "\n  if (grepl('\\\\s', txt)) {\n    strsplit(txt,\
    \ '\\\\s+')[[1]]\n  } else if (grepl(',', txt)) {\n    strsplit(txt, ',')[[1]]\n\
    \  } else {\n    sum(seq_along(txt) %% 2 == 0)\n  }\n}\n", "\n    s <- strsplit(txt,\
    \ ' ')[[1]]\n    if (length(s) > 1) return(s)\n    s <- strsplit(txt, ',')[[1]]\n\
    \    if (length(s) > 1) return(s)\n    return(sum(as.numeric(strsplit(txt, '')[[1]])\
    \ %% 2 == 1))\n}\n", "\n    words <- strsplit(txt, '[ ,]')[[1]]\n    if (length(words)\
    \ > 0) {\n        return(words)\n    }\n    letters <- gregexpr('[a-z]', txt)[[1]]\n\
    \    if (length(letters) > 0) {\n        return(sum(unlist(mapply(function(l)\
    \ l %% 2 == 1, letters)) == TRUE))\n    }\n    return(NA)\n}\ntest.equal(split_words('Hello\
    \ world!'), c('Hello', 'world!'))\ntest.equal(split_words('Hello,world!'), c('Hello',\
    \ 'world!'))\ntest.equal(split_words('abcdef'), 3)\ntest.equal(split_words('a,b,c,d,e,f'),\
    \ 3)\ntest.equal(split_words('abd'), 2)\ntest.equal(split_words('a'), 1)\ntest.equal(split_words('ab'),\
    \ 0)\ntest.equal(split_words('abc'), 1)\ntest.equal(split_words('abcdefg'), 4)\n\
    test.equal(split_words('abcd efg'), 6)\ntest.equal(split_words('abc,def'), 3)\n\
    test.equal(split_words('abc,def,g,h'), 5)\ntest.equal(split_words('abc,def,,gh'),\
    \ 4)\ntest.equal(split_words('abc,def,gh,,i'), 5)\ntest.equal(split_words('abc,def,gh,,i,'),\
    \ 5)\ntest.equal(split_words('abc,def,gh,,i,,'), 5)\ntest.equal(split_words('abc,def,gh,,i,,j'),\
    \ 6)\ntest.equal(split_words('abc,def,gh,,i,,j,'), 6)\ntest.equal(split_words('abc,def,gh,,i,,j,,'),\
    \ 6)\ntest.equal(split_words('abc,def,gh,,i,,j,,k'), 7)\ntest.equal(split_words('abc,def,gh,,i,,j,,k,'),\
    \ 7)\ntest.equal(split_words('abc,def,gh,,i", "\n  if(grepl(\" \", txt)){\n  \
    \  return(strsplit(txt, \" \")[[1]])\n  }\n  if(grepl(\",\", txt)){\n    return(strsplit(txt,\
    \ \",\")[[1]])\n  }\n  return(sum(!grepl(i, txt) for i in c(c(2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20, 22, 24))))\n}\n\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\n\
    split_words('abcdef')\n", "\n    output <- list()\n    if (length(strsplit(txt,\
    \ split = \" \")[[1]]) > 1) {\n        return(strsplit(txt, split = \" \")[[1]])\n\
    \    } else if (length(strsplit(txt, split = \",\")[[1]]) > 1) {\n        return(strsplit(txt,\
    \ split = \",\")[[1]])\n    } else {\n        for (i in txt) {\n            if\
    \ (is.character(i)) {\n                if (as.numeric(chartr(i, \"abcdefghijklmnopqrstuvwxyz\"\
    , \"0123456789\")) %% 2 == 1) {\n                    output <- c(output, i)\n\
    \                }\n            }\n        }\n        return(length(output))\n\
    \    }\n}\nsplit_words(\"hello,world!\")\nsplit_words(\"abcdef\")\nsplit_words(\"\
    Hello world!\")\n", "\n  return(length(grep(paste(sort(unique(strsplit(txt,\"\"\
    )[[1]]))[1:2],collapse=\"\"),txt)))\n}\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\n\
    split_words('abcdef')\n", "\n  found <- which(strsplit(txt, \"\")[[1]] %in% c(\"\
    \ \", \",\"))\n  if (length(found) == 0) {\n    sum(strsplit(txt, \"\")[[1]] %in%\
    \ letters[seq(1, 26, 2)])\n  } else {\n    if (strsplit(txt, \"\")[[1]][found[1]]\
    \ == \" \") {\n      if (found[1] == 1) {\n        return(unlist(strsplit(txt,\
    \ \" \")))\n      } else {\n        return(c(sum(strsplit(substr(txt, 1, found[1]\
    \ - 1), \"\")[[1]] %in% letters[seq(1, 26, 2)]), unlist(strsplit(substr(txt, found[1]\
    \ + 1, nchar(txt)), \" \"))))\n      }\n    } else {\n      if (found[1] == 1)\
    \ {\n        return(unlist(strsplit(txt, \",\")))\n      } else {\n        return(c(sum(strsplit(substr(txt,\
    \ 1, found[1] - 1), \"\")[[1]] %in% letters[seq(1, 26, 2)]), unlist(strsplit(substr(txt,\
    \ found[1] + 1, nchar(txt)), \",\"))))\n      }\n    }\n  }\n}\n", "\n  if(grepl(\"\
    \ \", txt)) {\n    return(unlist(strsplit(txt, \" \")))\n  } else if(grepl(\"\
    ,\", txt)) {\n    return(unlist(strsplit(txt, \",\")))\n  } else {\n    return(length(strsplit(txt,\
    \ \"\")[[1]])%%2)\n  }\n}\n", "\n    txt <- strsplit(txt, ' ')[[1]]\n    if (length(txt)\
    \ > 1)\n        return(txt)\n    txt <- strsplit(txt, ',')[[1]]\n    if (length(txt)\
    \ > 1)\n        return(txt)\n    return(sum(gl(1, 26, 26) == as.numeric(strsplit(tolower(txt),\
    \ '')[[1]])))\n}", "\n  if(!grepl(\" \", txt)) {\n    if(!grepl(\",\", txt)) {\n\
    \      r <- sapply(strsplit(txt, \"\"), function(i) sum(as.numeric(strsplit(i,\
    \ \"\")[[1]]) %% 2 == 1))\n      return(r)\n    } else {\n      return(strsplit(txt,\
    \ \",\")[[1]])\n    }\n  } else {\n    return(strsplit(txt, \" \")[[1]])\n  }\n\
    }", "\n    # YOUR CODE HERE\n    \n    if(grepl(\" \", txt) == T){\n        return(strsplit(txt,\
    \ \" \")[[1]])\n    }\n    else if(grepl(\",\", txt) == T){\n        return(strsplit(txt,\
    \ \",\")[[1]])\n    }\n    else {\n        count = 0\n        for(i in 1:length(txt)){\n\
    \            char_i = substr(txt, i, i)\n            if(ord(char_i) %% 2 == 1){\n\
    \                count = count + 1\n            }\n        }\n        return(count)\n\
    \    }\n}\n", "\n  txt = gsub(\"\\\\s+\", \" \", txt)\n  if (grepl(\" \", txt))\
    \ {\n    txt = unlist(strsplit(txt, split = \" \"))\n  } else if (grepl(\",\"\
    , txt)) {\n    txt = unlist(strsplit(txt, split = \",\"))\n  } else {\n    txt\
    \ = sum(str_count(txt, \"[A-Za-z]\") == 1)\n  }\n  return(txt)\n}\n", "\n    #\
    \ YOUR CODE HERE\n    ws <- str_extract(txt, \"\\\\w+\")\n    cs <- str_extract(txt,\
    \ \"[^,]+\")\n    if (length(ws) == 0) {\n        if (length(cs) == 0) {\n   \
    \         return(sum(str_sub(txt, 1, 1) == letters[1:26]))\n        } else {\n\
    \            return(unlist(strsplit(cs, \",\")))\n        }\n    } else {\n  \
    \      return(unlist(strsplit(ws, \" \")))\n    }\n}\n", "\n  if (grepl(' ', txt))\
    \ {\n    strsplit(txt, ' ')[[1]]\n  } else if (grepl(',', txt)) {\n    strsplit(txt,\
    \ ',')[[1]]\n  } else {\n    nchar(gsub('[^a-z]', '', txt)) %% 2 == 1\n  }\n}\n\
    split_words('Hello world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n\
    split_words('1,3,5,7,9')\n", "\n  # YOUR CODE HERE\n  if (str_detect(txt, \" \"\
    )) {\n    return(str_split(txt, \" \")[[1]])\n  } else if (str_detect(txt, \"\
    ,\")) {\n    return(str_split(txt, \",\")[[1]])\n  } else {\n    return(length(grep(pattern=\"\
    [a-z]\", x=txt, value=F, invert=T)))\n  }\n}\n\nsplit_words(\"Hello world!\")\n\
    split_words(\"Hello,world!\")\nsplit_words(\"abcdef\")\n", "\n  if (sum(strsplit(txt,\
    \ \"\")[[1]] == \" \") > 0) {\n    return(strsplit(txt, \" \")[[1]])\n  } else\
    \ if (sum(strsplit(txt, \"\")[[1]] == \",\") > 0) {\n    return(strsplit(txt,\
    \ \",\")[[1]])\n  } else {\n    return(sum(strsplit(txt, \"\")[[1]] %% 2 == 1))\n\
    \  }\n}\n", "\n  words <- strsplit(txt, '[, ]')[[1]]\n  n_words <- length(words)\n\
    \  if (n_words < 1)\n    return(sum(!(seq_along(txt) %% 2)))\n  return(words)\n\
    }\n\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
  "\n   if(length(gregexpr(\"\\\\s\", txt)[[1]]) == 0) {\n     if(length(gregexpr(\"\
    ,\", txt)[[1]]) == 0) {\n       return(length(grep(pattern = \"[a-z]\", x = txt,\
    \ value = FALSE, fixed = TRUE)))\n     } else {\n       return(strsplit(txt, \"\
    ,\")[[1]])\n     }\n   } else {\n     return(strsplit(txt, \"\\\\s\")[[1]])\n\
    \   }\n}\nprint(split_words('Hello world!'))\nprint(split_words('Hello,world!'))\n\
    print(split_words('abcdef'))\nprint(split_words('Hello, world! 1'))\n", "\n  pattern\
    \ <- \"(\\\\w+)\\\\s+(\\\\w+)\"\n  if (regexpr(pattern, txt) > 0) {\n    txt <-\
    \ unlist(strsplit(txt, split = \"\\\\s+\"))\n  } else {\n    pattern <- \"(\\\\\
    w+),(\\\\w+)\"\n    if (regexpr(pattern, txt) > 0) {\n      txt <- unlist(strsplit(txt,\
    \ split = \",\"))\n    } else {\n      vector <- sapply(strsplit(txt, \"\"), nchar)\n\
    \      odd <- vector[vector %% 2 == 1]\n      txt <- length(odd)\n    }\n  }\n\
    \  return(txt)\n}\n", "\n  # check if there is a whitespace and split on it, if\
    \ not split on comma\n  if (grepl(\"\\\\s\", txt)) {\n    return(strsplit(txt,\
    \ \"\\\\s\")[[1]])\n  } else if (grepl(\",\", txt)) {\n    return(strsplit(txt,\
    \ \",\")[[1]])\n  } else {\n    # output the number of lower-case letters with\
    \ odd order in the alphabet\n    txt <- tolower(txt)\n    res <- 0\n    for (i\
    \ in 1:nchar(txt)) {\n      # ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \      if ((strtoi(txt[i]) %% 2) == 1) {\n        res <- res + 1\n      }\n  \
    \  }\n    return(res)\n  }\n}", "\n    \n}\n\n", "\n  # your code here\n}\n ",
  "\n    txt = gsub(' ', '', txt)\n    txt = gsub(',', '', txt)\n    txt = gsub('[aeiouAEIOU]',\
    \ '', txt)\n    nchar(txt)\n}\nsplit_words(c('Hello world!', 'Hello,world!', 'abcdef'))\n",
  "\n    if(length(gregexpr(\"\\\\s\", txt)[[1]]) > 0) {\n        return(strsplit(txt,\
    \ \"\\\\s\")[[1]])\n    } else if(length(gregexpr(\",\", txt)[[1]]) > 0) {\n \
    \       return(strsplit(txt, \",\")[[1]])\n    } else {\n        return(sum(match(gsub(\"\
    \\\\.\", \"\", tolower(txt)), letters) %% 2))\n    }\n}", "\n  if (contains(txt,\
    \ ' ')) {\n    return(strsplit(txt, ' ')[[1]])\n  } else if (contains(txt, ','))\
    \ {\n    return(strsplit(txt, ',')[[1]])\n  } else {\n    return(sum(as.numeric(strsplit(txt,\
    \ '')[[1]]) %% 2 == 1))\n  }\n}\n", "\n  splits <- strsplit(txt, '[[:space:]]+')[[1]]\n\
    \  if (length(splits) > 1) return(splits)\n  splits <- strsplit(txt, ',')[[1]]\n\
    \  if (length(splits) > 1) return(splits)\n  return(sum(strsplit(txt, '')[[1]]\
    \ %in% letters[seq(from = 1, to = 26, by = 2)]))\n}\n", "\n  (txt <- strsplit(txt,\
    \ split = '[, ]', fixed = TRUE))[[1]][!sapply(txt, length) == 0]\n}\n", "\n  \
    \  # YOUR CODE HERE\n    if (txt %in% \" \") {\n        c()\n    } else if (txt\
    \ %in% \",\") {\n        c()\n    } else {\n        txt\n    }\n}\nsplit_words('Hello\
    \ world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n", "\n  # your\
    \ code here\n  if(grepl(\"\\\\s\", txt)){\n    str_split(txt, \"\\\\s\")[[1]]\n\
    \  }else if(grepl(\",\", txt)){\n    str_split(txt, \",\")[[1]]\n  }else{\n  \
    \  count = 0\n    for(i in 1:length(txt)){\n      if(i %% 2 == 1){\n        if(txt[i]\
    \ == letters[1 + (i-1)/2]){\n          count = count + 1\n        }\n      }\n\
    \    }\n    count\n  }\n}\nsplit_words(\"Hello world!\")\nsplit_words(\"Hello,world!\"\
    )\nsplit_words(\"abcdef\")\n \n", "\n  words <- unlist(strsplit(txt, ' '))\n \
    \ if(length(words) > 1) {\n    return(words)\n  }\n  words <- unlist(strsplit(txt,\
    \ ','))\n  if(length(words) > 1) {\n    return(words)\n  }\n  cnt = 0\n  for(i\
    \ in seq(1, length(txt))) {\n    if((txt[i] >= 'a') & (txt[i] <= 'z')) {\n   \
    \   if(txt[i] %% 2 == 1) {\n        cnt = cnt + 1\n      }\n    }\n  }\n  return(cnt)\n\
    }", "\n  # your code here\n  if (grepl(\" \", txt)) {\n    unlist(strsplit(txt,\
    \ \" \"))\n  } else if (grepl(\",\", txt)) {\n    unlist(strsplit(txt, \",\"))\n\
    \  } else {\n    d <- as.data.frame(strsplit(txt, \"\")[[1]])\n    sum(d$V1 ==\
    \ letters[1:26][c(T, F)])\n  }\n}\n", "\n  # Your code here\n  # Get the number\
    \ of spaces\n  words <- unlist(strsplit(txt, \" \"))\n  # Return the number of\
    \ split words\n  return(length(words))\n}\n", "\n\tif (str_detect(txt, \"\\\\\
    s\")) {\n\t\treturn(str_split(txt, \"\\\\s\")[[1]])\n\t} else if (str_detect(txt,\
    \ \",\")) {\n\t\treturn(str_split(txt, \",\")[[1]])\n\t} else {\n\t\treturn(sum(c(0,1)[as.character(str_split(txt,\
    \ \"\")[[1]]) %in% letters[1:26][c(1,3,5,7,9,11,13,15,17,19,21,23,25)]+1]))\n\t\
    }\n}\n", "\n  if (any(grepl(\"\\\\s\", txt, perl = TRUE))) {\n    return(unlist(strsplit(txt,\
    \ \"\\\\s\")))\n  } else if (any(grepl(\",\", txt, perl = TRUE))) {\n    return(unlist(strsplit(txt,\
    \ \",\")))\n  } else {\n    return(sum(as.numeric(stringi::stri_match_all_regex(txt,\
    \ \"[a-z]\")[[1]][,2]) %% 2 == 1))\n  }\n}\n", "\n  words <- strsplit(txt, ' ')[[1]]\n\
    \  if (length(words) > 1) {\n    return(words)\n  } else {\n    words <- strsplit(txt,\
    \ ',')[[1]]\n    if (length(words) > 1) {\n      return(words)\n    } else {\n\
    \      return(sum(mapply(function(x, y) ifelse(x < y, 1, 0), \n              \
    \          strsplit(txt, '')[[1]], strsplit(txt, '')[[1]][-1]) == 1))\n    }\n\
    \  }\n}\n ", "\n    words <- strsplit(txt, split = ' ')[[1]]\n    if (length(words)\
    \ == 0) {\n        # Try splitting on commas\n        words <- strsplit(txt, split\
    \ = ',')[[1]]\n        if (length(words) == 0) {\n            # If no commas or\
    \ spaces then return the number of lower-case letters with odd order in the alphabet\n\
    \            sum(as.numeric(charToRaw(txt)) > 96 & as.numeric(charToRaw(txt))\
    \ < 123 & as.numeric(charToRaw(txt)) %% 2 == 1)\n        } else {\n          \
    \  words\n        }\n    } else {\n        words\n    }\n}\n", "\n  # Get the\
    \ length of the first word in the text\n  word_length <- str_count(txt, '\\\\\
    S+')\n\n  # If a word is found, return a vector of the string split on white space\n\
    \  if (word_length > 0) {\n    return(str_split(txt, \"\\\\s+\")[[1]])\n  }\n\n\
    \  # If a word is not found, split on commas, return a vector of the string split\
    \ on commas\n  if (word_length == 0) {\n    return(str_split(txt, ',')[[1]])\n\
    \  }\n\n  # If a comma is not found, return the number of lower-case letters with\
    \ odd order in the alphabet\n  if (word_length == 0) {\n    return(sum(str_count(txt,\
    \ '[a-z]') % 2))\n  }\n}\n ", "\n  words <- strsplit(txt, \" \")[[1]]\n  if(length(words)\
    \ == 0) {\n    words <- strsplit(txt, \",\")[[1]]\n    if(length(words) == 0)\
    \ {\n      return(sum(unlist(strsplit(txt, \"\")) %in% letters[seq(1, 26, 2)]))\n\
    \    }\n  }\n  return(words)\n}\n", "\n  txt <- strsplit(txt, \"\\\\s+\")\n  if(length(txt)\
    \ == 0) {\n    return(nchar(txt))\n  }\n  if(length(txt[[1]]) == 1) {\n    return(length(txt[[1]]))\n\
    \  }\n  return(txt[[1]])\n}\n ", "\n  if(grepl(\" \", txt)) {\n    txt <- strsplit(txt,\
    \ \" \")\n    txt <- unlist(txt)\n    return(txt)\n  }\n  else if(grepl(\",\"\
    , txt)) {\n    txt <- strsplit(txt, \",\")\n    txt <- unlist(txt)\n    return(txt)\n\
    \  }\n  else {\n    txt <- letters\n    odds <- length(txt[seq(1, length(txt),\
    \ 2)])\n    return(odds)\n  }\n}\n ", "\n  txt <- trimws(txt)\n  w <- unlist(strsplit(txt,\
    \ split=' '))\n  if (length(w)>1) {\n    return(w)\n  }\n  w <- unlist(strsplit(txt,\
    \ split=','))\n  if (length(w)>1) {\n    return(w)\n  }\n  w <- strsplit(txt,\
    \ split=\"\")[[1]]\n  n <- 0\n  for (i in 1:length(w)) {\n    l <- tolower(w[i])\n\
    \    if (((ord(l) %% 2) == 1) && (ord(l) < 26)) {\n      n <- n + 1\n    }\n \
    \ }\n  return(n)\n}\n", "\n  x <- strsplit(txt, ',|\\\\s')[[1]]\n  if (length(x)\
    \ == 1) {\n    if (length(grep('[a-z]', x)) > 0) {\n      length(grep('[a-z]',\
    \ x, invert = TRUE, value = TRUE))\n    } else {\n      NA\n    }\n  } else {\n\
    \    x\n  }\n}\n\n", "\n  if(grepl(\" \", txt)){\n    return(strsplit(txt, \"\
    \ \")[[1]])\n  } else if(grepl(\",\", txt)){\n    return(strsplit(txt, \",\")[[1]])\n\
    \  } else{\n    x <- strsplit(txt, \"\")[[1]]\n    x <- (x[1:length(x)] - 'a')\
    \ %% 2 == 1\n    return(sum(x))\n  }\n}", "\n  if (grepl(\" \", txt)) {\n    strsplit(txt,\
    \ \" \")[[1]]\n  } else if (grepl(\",\", txt)) {\n    strsplit(txt, \",\")[[1]]\n\
    \  } else {\n    sum(str_count(txt, \"a|c|e|g|i|k|m|o|q|s|u|w|y\"))\n  }\n}\n",
  "\n    w = sapply(strsplit(txt, split=\" \"), \"[\", 1)\n    if (length(w) > 1)\
    \ {\n        return(w)\n    }\n    else {\n        w = sapply(strsplit(txt, split=\"\
    ,\"), \"[\", 1)\n        if (length(w) > 1) {\n            return(w)\n       \
    \ }\n        else {\n            w = sum(order(unlist(strsplit(txt, split=\"\"\
    ))) %% 2 == 1)\n            return(w)\n        }\n    }\n}\n ", "\n  if (any(grepl(\"\
    \ \", txt))) {\n    return(strsplit(txt, \" \")[[1]])\n  } else if (any(grepl(\"\
    ,\", txt))) {\n    return(strsplit(txt, \",\")[[1]])\n  } else {\n    return(sum(lapply(strsplit(txt,\
    \ \"\")[[1]], function(x) {\n      if (as.numeric(x) %% 2 == 1) {\n        return(1)\n\
    \      } else {\n        return(0)\n      }\n    })))\n  }\n}\n\na = split_words(\"\
    Hello world!\")\nb = split_words(\"Hello,world!\")\nc = split_words(\"abcdef\"\
    )\n\nassertEquals(a, c(\"Hello\", \"world!\"))\nassertEquals(b, c(\"Hello\", \"\
    world!\"))\nassertEquals(c, 3)\n\nprint(\"All tests passed!\")", "\n    ## <<<\
    \ fill in your code here >>>\n    split <- strsplit(txt, \" \")\n    if (length(split[[1]])==1){\n\
    \      split <- strsplit(txt, \",\")\n      if (length(split[[1]])==1){\n    \
    \    l <- nchar(txt)\n        count <- 0\n        for (i in 1:l){\n          x\
    \ <- substr(txt, i, i)\n          x <- tolower(x)\n          v <- (as.numeric(charToRaw(x))\
    \ - 97) %% 2\n          if (v==1){\n            count <- count + 1\n         \
    \ }\n        }\n        return(count)\n      }\n      else {\n        return(split[[1]])\n\
    \      }\n    }\n    else {\n      return(split[[1]])\n    }\n}\n", "\n    numWhiteSpace\
    \ <- gregexpr(\"\\\\s+\", txt)\n    numCommas <- gregexpr(\",\", txt)\n    if\
    \ (is.null(numWhiteSpace[[1]])) {\n        if (is.null(numCommas[[1]])) {\n  \
    \          stringLen <- nchar(txt)\n            count <- 0\n            for (i\
    \ in 1:stringLen) {\n                index <- charToRaw(substr(txt, i, i))[1]\
    \ %% 32\n                if (index %% 2 == 1) {\n                    count <-\
    \ count + 1\n                }\n            }\n            return(count)\n   \
    \     } else {\n            return(strsplit(txt, \",\")[[1]])\n        }\n   \
    \ } else {\n        return(strsplit(txt, \"\\\\s+\")[[1]])\n    }\n}\nsplit_words('abcdef')\n",
  "\n  if(any(nchar(strsplit(txt, ' ')[[1]]) > 1)) {\n    return(strsplit(txt, ' ')[[1]])\n\
    \  } else if(any(nchar(strsplit(txt, ',')[[1]]) > 1)) {\n    return(strsplit(txt,\
    \ ',')[[1]])\n  } else {\n    return(sum(charToRaw(txt) %% 2 == 1))\n  }\n}\n ",
  "\n    if (any(grepl('\\\\s', txt, fixed = TRUE)))\n        return(unlist(strsplit(txt,\
    \ '\\\\s+')))\n    else if (any(grepl(',', txt, fixed = TRUE)))\n        return(unlist(strsplit(txt,\
    \ ',')))\n    else {\n        txt <- strsplit(txt, '')[[1]]\n        n <- 0\n\
    \        for (i in 1:length(txt)) {\n            if (ord(txt[i]) %% 2 == 1)\n\
    \                n <- n + 1\n        }\n        return(n)\n    }\n}\n", "\n  \
    \  if(grepl(\" \", txt)){\n      return(strsplit(txt, \" \")[[1]])\n    }\n  \
    \  else if(grepl(\",\", txt)){\n      return(strsplit(txt, \",\")[[1]])\n    }\n\
    \    else{\n      new_txt <- strsplit(txt, \"\")[[1]]\n      odd_list <- 0\n \
    \     for(i in new_txt){\n        if(!grepl(i, c(\"a\", \"e\", \"i\", \"o\", \"\
    u\"))){\n          odd_list <- odd_list + 1\n        }\n      }\n      return(odd_list)\n\
    \    }\n  }\nsplit_words(\"abcdef\")\n", "\n    if(length(grep(\" \", txt)) >\
    \ 0) {\n        splitted_words <- strsplit(txt, \" \")\n        return(splitted_words[[1]])\n\
    \    } else if(length(grep(\",\", txt)) > 0) {\n        splitted_words <- strsplit(txt,\
    \ \",\")\n        return(splitted_words[[1]])\n    } else {\n        odd_counter\
    \ <- 0\n        for(i in 1:nchar(txt)) {\n            if(i %% 2 != 0 && nchar(txt)\
    \ %% 2 != 0) {\n                odd_counter <- odd_counter + 1\n            }\
    \ else if(i %% 2 == 0 && nchar(txt) %% 2 == 0) {\n                odd_counter\
    \ <- odd_counter + 1\n            }\n        }\n        return(odd_counter)\n\
    \    }\n}\n", "\n  if(sum(grepl(\"\\\\s\", txt))==0){\n    if(sum(grepl(\",\"\
    , txt))==0){\n      return(length(which(trunc(lapply(txt, FUN = function(x) {x\
    \ - x %/% 2})) == 1)))\n    }else{\n      return(unlist(strsplit(txt, \",\")))\n\
    \    }\n  }else{\n    return(unlist(strsplit(txt, \"\\\\s\")))\n  }\n}\n", "\n\
    \  words <- unlist(strsplit(txt, ' '))\n  if (length(words) == 1) {\n    commas\
    \ <- unlist(strsplit(txt, ','))\n    if (length(commas) == 1) {\n      nchar(txt)\
    \ - sum(ifelse(seq_along(txt) %% 2 == 0, 1, 0))\n    } else {\n      words <-\
    \ commas\n    }\n  }\n  words\n}\n", "\n  # your code here\n  stop(\"Function\
    \ not implemented yet\")\n}\n", "\n  string_split <- function(txt) {\n    words\
    \ <- strsplit(txt, split=\" \")\n    return(words[[1]])\n  }\n  string_split_comma\
    \ <- function(txt) {\n    words <- strsplit(txt, split=\",\")\n    return(words[[1]])\n\
    \  }\n  odd_lower_count <- function(txt) {\n    txt <- tolower(txt)\n    count\
    \ <- 0\n    for (i in 1:nchar(txt)) {\n      char <- substr(txt, i, i)\n     \
    \ if (char == \"a\" | char == \"c\" | char == \"e\" | char == \"g\" | char ==\
    \ \"i\" | char == \"k\" | char == \"m\" | char == \"o\" | char == \"q\" | char\
    \ == \"s\" | char == \"u\" | char == \"w\" | char == \"y\") {\n        count <-\
    \ count + 1\n      }\n    }\n    return(count)\n  }\n  if (grepl(\" \", txt))\
    \ {\n    return(string_split(txt))\n  } else if (grepl(\",\", txt)) {\n    return(string_split_comma(txt))\n\
    \  } else {\n    return(odd_lower_count(txt))\n  }\n}\n", "\n  if (txt != '')\
    \ {\n    # split by whitespace\n    if (grepl('\\\\s', txt) != F) {\n      return(strsplit(txt,\
    \ '\\\\s')[[1]])\n    }\n    # split by comma\n    if (grepl(',', txt) != F) {\n\
    \      return(strsplit(txt, ',')[[1]])\n    }\n    # count of odd lower-case letters\n\
    \    return(length(grep('[a-z]', txt, value = T)) %/% 2)\n  }\n  return(NULL)\n\
    }", "\n  if(!str_detect(txt, \"[, ]\")) {\n    #return number of odd ordered lowercase\
    \ letters\n    return(sum(str_detect(txt, \"[a-z]\")))\n  } else if(!str_detect(txt,\
    \ \"[, ]\")) {\n    #return comma separated words\n    return(str_split(txt, \"\
    ,\"))\n  } else {\n    #return words split by whitespace\n    return(str_split(txt,\
    \ \" \"))\n  }\n}\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\n\
    split_words('abcdef')\n", "\n    if (all(strsplit(txt, ' ')[[1]] != '')) {\n \
    \       return(strsplit(txt, ' ')[[1]])\n    } else if (all(strsplit(txt, ',')[[1]]\
    \ != '')) {\n        return(strsplit(txt, ',')[[1]])\n    } else {\n        sum(as.numeric(strsplit(txt,\
    \ '')[[1]]) %% 2 == 1)\n    }\n}", "\n    # your code here\n}\n ", "\n  splitOn\
    \ <- ' '\n  if (splitOn %in% txt) {\n    return(strsplit(txt, splitOn)[[1]])\n\
    \  } else {\n    splitOn <- ','\n    if (splitOn %in% txt) {\n      return(strsplit(txt,\
    \ splitOn)[[1]])\n    } else {\n      return(sum(grepl(pattern = '^[a-z]$', x\
    \ = txt)))\n    }\n  }\n}", "\n  if(!is.null(grep('\\\\s', txt))) {\n    unlist(strsplit(txt,\
    \ '\\\\s'))\n  } else if(!is.null(grep(',', txt))) {\n    unlist(strsplit(txt,\
    \ ','))\n  } else {\n    sum(charToRaw(txt)%%2)\n  }\n}\n", "\n    words <- strsplit(txt,\
    \ \" \")[[1]]\n    if (length(words) > 1)\n        return(words)\n    words <-\
    \ strsplit(txt, \",\")[[1]]\n    if (length(words) > 1)\n        return(words)\n\
    \    odd = 0\n    for (i in 1:length(txt)) {\n        ord = as.integer(txt[i])\
    \ - as.integer('a')\n        if (ord %% 2 != 0)\n            odd = odd + 1\n \
    \   }\n    return(odd)\n}\n", "\n  if (grepl(' ', txt)) {\n    return(strsplit(txt,\
    \ ' ')[[1]])\n  } else if (grepl(',', txt)) {\n    return(strsplit(txt, ',')[[1]])\n\
    \  } else {\n    return(sum(1:length(txt)%%2==0))\n  }\n}\n", "\n  #get a table\
    \ of words and counts, split on whitespace\n  splits <- strsplit(txt, split =\
    \ \" \")\n  #if the lengths of the table is 1, split on commas\n  if(length(splits)\
    \ == 1) {\n    splits <- strsplit(txt, split = \",\")\n    #If the lengths of\
    \ the table is 1, then split on alphabet order\n    if(length(splits) == 1) {\n\
    \      odd_count <- 0\n      for(i in 1:length(txt)) {\n        if(odd(txt[i]))\
    \ {\n          odd_count <- odd_count + 1\n        }\n      }\n      return(odd_count)\n\
    \    }\n  }\n  #if none of the above are true, return the split words\n  return(splits)\n\
    }\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
  "\n  sep <- c(' ', ',', '')\n  if(length(matches <- gregexpr(' ', txt)) == 0) {\n\
    \    if(length(matches <- gregexpr(',', txt)) == 0) {\n      return(sum(grep('.',\
    \ txt, invert = T) %% 2))\n    }\n  }\n  strsplit(txt, sep[which(lengths(strsplit(txt,\
    \ sep)) == max(lengths(strsplit(txt, sep))))])[[1]]\n}\n", "\n  # Your code here\n\
    }\n", "\n    if (is.null(grep(\"\\\\s\", txt, fixed = TRUE))) {\n        if (is.null(grep(\"\
    ,\", txt, fixed = TRUE))) {\n            sum(charToRaw(txt) %% 2 == 1)\n     \
    \   } else {\n            txt = gsub(\",\", \" \", txt)\n            unlist(strsplit(txt,\
    \ \" \"))\n        }\n    } else {\n        unlist(strsplit(txt, \" \"))\n   \
    \ }\n}", "\n  if (grepl(' ', txt)) {\n    return(strsplit(txt, ' ')[[1]])\n  }\
    \ else if (grepl(',', txt)) {\n    return(strsplit(txt, ',')[[1]])\n  } else {\n\
    \    sum <- 0\n    for (i in 1:nchar(txt)) {\n      if (i %% 2 == 1) {\n     \
    \   sum <- sum + nchar(substr(txt, i, i))\n      }\n    }\n    return(sum)\n \
    \ }\n}\n", "\n  # your code here\n}\ntest_that('Test 1', {\n  expect_true(identical(split_words('Hello\
    \ world!'), c('Hello', 'world!')))\n})\ntest_that('Test 2', {\n  expect_true(identical(split_words('Hello,world!'),\
    \ c('Hello', 'world!')))\n})\ntest_that('Test 3', {\n  expect_true(identical(split_words('abcdef'),\
    \ 3))\n})\ntest_that('Test 4', {\n  expect_true(identical(split_words('abcd efgh'),\
    \ c('abcd', 'efgh')))\n})\ntest_that('Test 5', {\n  expect_true(identical(split_words('abcd,efgh'),\
    \ c('abcd', 'efgh')))\n})\nsuccess()", "\n  words <- unlist(strsplit(txt, split='[,\
    \ ]', fixed=TRUE))\n  nwords <- length(words)\n  if (nwords > 1)\n    words\n\
    \  else {\n    alph <- letters\n    splitchar <- NULL\n    for (i in 1:nchar(txt))\
    \ {\n      c <- substr(txt, i, i)\n      if (c %in% alph) {\n        idx <- as.integer(ord(c)\
    \ - ord('a'))\n        if (idx %% 2 == 1) {\n          splitchar <- c\n      \
    \    break\n        }\n      }\n    }\n    if (length(splitchar) > 0)\n      nchar(unlist(strsplit(txt,\
    \ split=splitchar, fixed=TRUE))[[1]])\n    else\n      nchar(txt)\n  }\n}\n",
  "\n  whitespace <- str_detect(txt, \"\\\\s\")\n  comma <- str_detect(txt, \",\"\
    )\n  if (whitespace) {\n    w <- str_split(txt, \"\\\\s\")\n    return(unlist(w))\n\
    \  } else if (comma) {\n    c <- str_split(txt, \",\")\n    return(unlist(c))\n\
    \  } else {\n    od <- which(str_count(txt, \"[^aeiou]\") %% 2 == 1)\n    return(length(od))\n\
    \  }\n}", "\n  txt_split <- strsplit(txt, ' ')\n  if (length(txt_split[[1]]) >\
    \ 1) {\n    return(txt_split[[1]])\n  } else {\n    txt_split <- strsplit(txt,\
    \ ',')\n    if (length(txt_split[[1]]) > 1) {\n      return(txt_split[[1]])\n\
    \    } else {\n      txt_num <- 0\n      for (i in 1:length(txt)) {\n        if\
    \ (as.numeric(charToRaw(txt[i])) %% 2 == 1) {\n          txt_num <- txt_num +\
    \ 1\n        }\n      }\n      return(txt_num)\n    }\n  }\n}\n\nsplit_words('Hello\
    \ world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n", "\n    if(grepl(\"\
    \ \", txt))\n        return(unlist(strsplit(txt, \" \")))\n    else if(grepl(\"\
    ,\", txt))\n        return(unlist(strsplit(txt, \",\")))\n    else {\n       \
    \ sum = 0\n        for(i in 1:nchar(txt)) {\n            if((i %% 2) == 1 && (nchar(txt)\
    \ %% 2) == 0)\n                sum = sum + nchar(txt[i]) - 96\n        }\n   \
    \     return(sum)\n    }\n}", "\n    if(!grepl(\"[, ]\", txt)) return(sum(seq_along(txt)\
    \ %% 2 == 0))\n    if(!grepl(\",\", txt)) return(strsplit(txt, \" \")[[1]])\n\
    \    return(strsplit(txt, \",\")[[1]])\n}\n", "\n  if (grepl(' ', txt)) {\n  \
    \  strsplit(txt, ' ')[[1]]\n  } else if (grepl(',', txt)) {\n    strsplit(txt,\
    \ ',')[[1]]\n  } else {\n    sum(as.numeric(gsub('[^a-z]', '', txt)) %% 2 == 1)\n\
    \  }\n}\n", "\n  ## YOUR CODE HERE\n  splitted <- strsplit(txt, \" \")\n  # if\
    \ splitted is empty (no space in txt)\n  if (length(splitted[[1]]) == 1) {\n \
    \   splitted <- strsplit(txt, \",\")\n    # if splitted is empty (no comma in\
    \ txt)\n    if (length(splitted[[1]]) == 1) {\n      # count number of odd letters\n\
    \      odd <- 0\n      for (i in 1:length(txt)) {\n        if (txt[i] >= 'a' &\
    \ txt[i] <= 'z') {\n          letter <- as.integer(txt[i]) - 97\n          if\
    \ (letter %% 2 == 1) {\n            odd <- odd + 1\n          }\n        }\n \
    \     }\n      return(odd)\n    }\n  }\n  return(splitted[[1]])\n}\n", "\n  if(!grepl(\"\
    \\\\s\", txt)){\n    if(!grepl(\",\", txt)){\n      sum(grepl(txt, x = letters[seq(from\
    \ = 1, to = 26, by = 2)]))\n    } else {\n      unlist(strsplit(txt, \",\"))\n\
    \    }\n  } else {\n    unlist(strsplit(txt, \"\\\\s\"))\n  }\n}\n", "\n  if (grepl('\
    \ ', txt)) {\n    unlist(strsplit(txt, ' '))\n  } else if (grepl(',', txt)) {\n\
    \    unlist(strsplit(txt, ','))\n  } else {\n    sum(sapply(txt, function(x) {\n\
    \      (ord(x) + 1) %% 2\n    }))\n  }\n}", "\n  return(txt)\n}\n ", "\n    if\
    \ (length(grep(\" \", txt)) > 0) {\n        return(strsplit(txt, \" \")[[1]])\n\
    \    } else if (length(grep(\",\", txt)) > 0) {\n        return(strsplit(txt,\
    \ \",\")[[1]])\n    } else {\n        txt = tolower(txt)\n        return(sum(as.numeric(nchar(txt)[-1])\
    \ %% 2 == 0))\n    }\n}\n", "\n  if(any(!grepl(\"[[:alpha:]]\", txt))) {\n   \
    \ return(unlist(strsplit(txt, \",\")))\n  } else {\n    return(sum(which(gsub(\"\
    [^a-z]\", \"\", txt) %in% \n                       tolower(letters)[which(seq_along(letters)\
    \ %% 2 != 0)])))\n  }\n}", "\n    if(length(grep(\" \", txt)) > 0) {\n       \
    \ res <- unlist(strsplit(txt, \" \"))\n    } else if(length(grep(\",\", txt))\
    \ > 0) {\n        res <- unlist(strsplit(txt, \",\"))\n    } else {\n        res\
    \ <- length(substr(txt, 1, 1))\n    }\n    return(res)\n}\n\nsplit_words(\"Hello,world!\"\
    )\n", "\n  # split on whitespace first and check how many words there are\n  whitespace\
    \ <- strsplit(txt, ' ')[[1]]\n  if (length(whitespace) != 1) {\n    return(whitespace)\n\
    \  }\n  # then on commas\n  comma <- strsplit(txt, ',')[[1]]\n  if (length(comma)\
    \ != 1) {\n    return(comma)\n  }\n  # finally on lowercase letters with odd order\
    \ in the alphabet\n  nOdd <- 0\n  for (i in 1:nchar(txt)) {\n    letter <- substr(txt,\
    \ i, i)\n    code <- as.integer(charToRaw(letter))\n    if (code %% 2 != 0) {\n\
    \      nOdd <- nOdd + 1\n    }\n  }\n  return(nOdd)\n}", "\n  if (length(grep(\"\
    \ \", txt)) == 0) {\n    if (length(grep(\",\", txt)) == 0) {\n      return(sum(ord(strsplit(txt,\
    \ \"\")[[1]]) %% 2 == 1))\n    } else {\n      return(strsplit(txt, \",\")[[1]])\n\
    \    }\n  } else {\n    return(strsplit(txt, \" \")[[1]])\n  }\n}\n", "\n    #\
    \ write your code here\n}\n ", "\n    words <- strsplit(txt, '[ ,]')[[1]]\n  \
    \  if (length(words) == 0) {\n        sum(letters$letter - 'a' %% 2 == 1)\n  \
    \  } else {\n        words\n    }\n}\n\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\n\
    split_words('abcdef')\n", "\n  if (length(grep(\" \", txt)) == 0) {\n    if (length(grep(\"\
    ,\", txt)) == 0) {\n      # Replace each character with its ascii position, and\
    \ count the odds\n      sum(odd(charToRaw(txt)))\n    } else {\n      unlist(strsplit(txt,\
    \ \",\"))\n    }\n  } else {\n    unlist(strsplit(txt, \" \"))\n  }\n}\n\nprint(split_words(\"\
    Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"\
    ))\nprint(split_words(\"Dhf,dfd\"))\nprint(split_words(\"Dfh,dff\"))\nprint(split_words(\"\
    abc,def\"))\n", "\n  x <- strsplit(txt, \"[ ,]\")[[1]]\n  if (length(x) == 1)\
    \ {\n    a <- sum(as.integer(strsplit(txt, \"\")[[1]]) %% 2 == 1)\n    return(a)\n\
    \  }\n  else\n    return(x)\n}\n", "\n    if(!grepl(\" \", txt) && !grepl(\",\"\
    , txt))\n        return(sum(as.numeric(gregexpr(pattern = \"[a-z]\", text = txt)\
    \ %% 2 == 1)))\n    if(!grepl(\" \", txt))\n        return(strsplit(txt, split\
    \ = \",\")[[1]])\n    if(!grepl(\",\", txt))\n        return(strsplit(txt, split\
    \ = \" \")[[1]])\n}", "\n    if (length(grep(\" \", txt)) > 0) {\n        unlist(strsplit(txt,\
    \ \" \"))\n    } else if (length(grep(\",\", txt)) > 0) {\n        unlist(strsplit(txt,\
    \ \",\"))\n    } else {\n        sum(as.numeric(grep(paste0(\"[\", letters[seq(0,\
    \ 25, 2)], \"]\"), txt, value = T)) + 1)\n    }\n}\n", "\n  whitespace <- function(x)\
    \ {\n    regex <- regexpr(\" \", x)\n    if(regex != -1) {\n      return(unlist(strsplit(x,\
    \ \" \")))\n    }\n  }\n  comma <- function(x) {\n    regex <- regexpr(\",\",\
    \ x)\n    if(regex != -1) {\n      return(unlist(strsplit(x, \",\")))\n    }\n\
    \  }\n  letters <- function(x) {\n    count <- 0\n    for(i in 1:length(x)) {\n\
    \      if(as.numeric(x[i]) %% 2 != 0) {\n        count <- count + 1\n      }\n\
    \    }\n    return(count)\n  }\n  if(!is.null(whitespace(txt))) {\n    return(whitespace(txt))\n\
    \  } else if(!is.null(comma(txt))) {\n    return(comma(txt))\n  } else {\n   \
    \ return(letters(as.numeric(charToRaw(txt))))\n  }\n}\n", "\n  # TODO\n  if(!grepl(\"\
    \ \", txt)){\n    if(!grepl(\",\", txt)){\n      y = (as.numeric(nchar(txt)) +\
    \ 1) / 2\n      y = y%%2\n      z = ifelse(y > 0, y, 0)\n      return(sum(z))\n\
    \    }\n    else{\n      x = unlist(strsplit(txt, \",\"))\n      return(x)\n \
    \   }\n  }\n  else{\n    x = unlist(strsplit(txt, \" \"))\n    return(x)\n  }\n\
    }\n", "\n    \n    txt = gsub(\"\\\\s+\",\",\",txt)\n    list = strsplit(txt,\
    \ \",\")\n    vector = unlist(list)\n    noWhitespaces = gsub(\"\\\\s+\",\"\"\
    ,txt)\n    if(nchar(noWhitespaces)==0){\n        return(0)\n    }\n    if(identical(vector,\
    \ character(0))){\n        oddOrder = 0\n        for(i in 1:length(txt)){\n  \
    \          if(identical(i %% 2,1)){\n                oddOrder = oddOrder + 1\n\
    \            }\n        }\n        return(oddOrder)\n    }\n    return(vector)\n\
    }\n", "\n  split1 <- strsplit(txt, ' ')\n  split2 <- strsplit(txt, ',')\n  if(length(split1[[1]])\
    \ != 1) {\n    return(split1[[1]])\n  } else if(length(split2[[1]]) != 1) {\n\
    \    return(split2[[1]])\n  } else {\n    return(length(grep('[^a-z]', txt, value\
    \ = TRUE)))\n  }\n}\n", "\n    if (grepl(' ', txt)) {\n        return(unlist(strsplit(txt,\
    \ ' ')))\n    } else if (grepl(',', txt)) {\n        return(unlist(strsplit(txt,\
    \ ',')))\n    } else {\n        return(length(grep(1, odd(stringr::str_count(txt,\
    \ '[a-z]'))))\n    }\n}\n ", "\n  words <- strsplit(txt, \"[[:space:]]\")[[1]]\n\
    \  if (length(words) == 0) {\n    words <- strsplit(txt, \",\")[[1]]\n    if (length(words)\
    \ == 0) {\n      return(sum(rowSums(sapply(strsplit(txt, \"\"), function(x) as.integer(x)\
    \ - 96) %% 2) %% 2))\n    }\n  }\n  return(words)\n}\n", "\n  indx <- gregexpr(\"\
    \ |,\", txt)\n  if (indx[[1]][1] == -1) return(nchar(txt[grepl(\"[a-z]\", txt)]))\n\
    \  if (indx[[1]][1] == 0) return(c(split_words(txt[-1]), split_words(txt[-length(txt)])))\n\
    \  return(c(substr(txt, 0, indx[[1]][1] - 1), split_words(substr(txt, indx[[1]][1]\
    \ + 1, nchar(txt)))))\n}\n", "\n  if(grepl(\" \", txt)) {\n    return(strsplit(txt,\
    \ \" \")[[1]])\n  } else if(grepl(\",\", txt)) {\n    return(strsplit(txt, \"\
    ,\")[[1]])\n  } else {\n    return(sum(sapply(1:nchar(txt), function(x) { as.numeric(ord(substr(txt,\
    \ x, x)) %% 2) })))\n  }\n}\n\nsplit_words('123,abc')\n", "\n  n <- nchar(txt)\n\
    \  if (grepl(' ', txt)) {\n    sapply(strsplit(txt, ' '), paste, collapse = '')\n\
    \  } else if (grepl(',', txt)) {\n    sapply(strsplit(txt, ','), paste, collapse\
    \ = '')\n  } else {\n    sum(!(seq_len(n) %% 2))\n  }\n}\nsplit_words('Hello world!')\n\
    split_words('Hello,world!')\nsplit_words('abcdef')\n", "\n    res <- strsplit(txt,\
    \ '[ \\t]')\n    if (length(res[[1]]) > 1)\n        return(res[[1]])\n    res\
    \ <- strsplit(txt, ',')\n    if (length(res[[1]]) > 1)\n        return(res[[1]])\n\
    \    return(sum(order(charToRaw(txt)) %% 2 == 1))\n}\n ", "\n    if (grepl(' ',\
    \ txt)) {\n        return(strsplit(txt, split = ' ')[[1]])\n    } else if (grepl(',',\
    \ txt)) {\n        return(strsplit(txt, split = ',')[[1]])\n    } else {\n   \
    \     return(sum(grepl(paste0('^[^', paste0(letters[seq(0, 25, 2)], collapse =\
    \ ''), ']+$'), txt)))\n    }\n}\n", "\n  split <- strsplit(txt, \" \")[[1]]\n\
    \  if(length(split) == 0) {\n    split <- strsplit(txt, \",\")[[1]]\n    if(length(split)\
    \ == 0) {\n      length(which(mod(as.numeric(unlist(strsplit(txt, \"\"))), 2)\
    \ == 1))\n    } else {\n      split\n    }\n  } else {\n    split\n  }\n}\n ",
  "\n    if (sum(grepl(\" \", txt)) > 0) {\n        return(strsplit(txt, \" \")[[1]])\n\
    \    } else if (sum(grepl(\",\", txt)) > 0) {\n        return(strsplit(txt, \"\
    ,\")[[1]])\n    } else {\n        return(sum(grepl(pattern = \"b|d|f|h|j|l|n|p|r|t|v|x|z\"\
    , x = txt)))\n    }\n}\n\nsplit_words(\"Hello world!\")\n\nsplit_words(\"Hello,world!\"\
    )\n\nsplit_words(\"abcdef\")\n\n\n", "\n  if (grepl(' ', txt)) {\n    strsplit(txt,\
    \ ' ')[[1]]\n  } else if (grepl(',', txt)) {\n    strsplit(txt, ',')[[1]]\n  }\
    \ else {\n    sum(as.numeric(gregexpr('[a-z]', txt)[[1]]) %% 2 == 1)\n  }\n}\n\
    split_words('Hello world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
  "\n  words <- strsplit(txt, \"[[:space:]]+\")[[1]]\n  if (length(words) > 0)\n \
    \   return(words)\n  words <- strsplit(txt, \"[,]+\")[[1]]\n  if (length(words)\
    \ > 0)\n    return(words)\n  return(sum(!is.na(as.integer(gsub(\"[^a-z]\", \"\"\
    , txt)))))\n}\n", "\n    \n}\n", "\n    # Write your code here.\n    # Use the\
    \ function ord to get the order of a letter\n    # Remember to return a list or\
    \ a number\n    output = as.numeric(strsplit(x = txt, split = '[, ]'))\n    return(output)\n\
    }\nprint(split_words('Hello world!'))\nprint(split_words('Hello,world!'))\nprint(split_words('abcdef'))\n",
  "\n    # TODO: IMPLEMENT ME\n    # if(grepl(\" \", txt))\n    # {\n    #     return(strsplit(txt,\
    \ \" \"))\n    # }\n    # else if(grepl(\",\", txt))\n    # {\n    #     return(strsplit(txt,\
    \ \",\"))\n    # }\n    # else\n    # {\n    #     txt = strsplit(txt, \"\")\n\
    \    #     #sum(str_count(txt, \"([A-Za-z])\\\\1\") %% 2)\n    #     letters =\
    \ str_count(txt, \"([A-Za-z])\\\\1\")\n    #     return(sum(letters %% 2))\n \
    \   # }\n    if(grepl(\" \", txt))\n    {\n        return(strsplit(txt, \" \"\
    ))\n    }\n    else if(grepl(\",\", txt))\n    {\n        return(strsplit(txt,\
    \ \",\"))\n    }\n    else\n    {\n        letters = str_count(txt, \"([A-Za-z])\\\
    \\1\")\n        return(sum(letters %% 2))\n    }\n}\n", "\n  w_split <- unlist(strsplit(txt,\
    \ ' '))\n  c_split <- unlist(strsplit(txt, ','))\n  if (length(w_split) > 1) {\n\
    \    return(w_split)\n  } else if (length(c_split) > 1) {\n    return(c_split)\n\
    \  } else {\n    txt <- unlist(strsplit(txt, ''))\n    count <- 0\n    for (i\
    \ in txt) {\n      if (ord(i) %% 2 == 1) {\n        count <- count + 1\n     \
    \ }\n    }\n    return(count)\n  }\n}\n", "\n  if(any(grepl(\"\\\\s\", txt))){\n\
    \    return(unlist(strsplit(txt, \"\\\\s\")))\n  }\n  else if(any(grepl(\",\"\
    , txt))){\n    return(unlist(strsplit(txt, \",\")))\n  }\n  else{\n    txt <-\
    \ strsplit(txt, \"\")[[1]]\n    return(sum(!(seq_along(txt) %% 2) & txt %in% letters))\n\
    \  }\n}", "\n  strsplit(txt, \"\")[[1]]\n}\n ", "\n  if (is.null(grep(\" \", txt,\
    \ fixed = TRUE))) {\n    if (is.null(grep(\",\", txt, fixed = TRUE))) {\n    \
    \  sum(sort(chars <- strsplit(txt, \"\")[[1]]) %in% chars[seq(2, length(chars),\
    \ 2)])\n    } else {\n      strsplit(txt, \",\")[[1]]\n    }\n  } else {\n   \
    \ strsplit(txt, \" \")[[1]]\n  }\n}\n ", "\n  # YOUR CODE HERE\n  words <- unlist(strsplit(txt,\
    \ \"[[:space:]]|[[:punct:]]\"))\n  num_words <- length(words)\n  if (num_words\
    \ == 0) {\n    words <- unlist(strsplit(txt, \",\"))\n    num_words <- length(words)\n\
    \    if (num_words == 0) {\n      num_words <- sum(str_sub(txt, 1:nchar(txt))\
    \ %in% letters[grep(\"[[:lower:]]\", letters)][order(letters[grep(\"[[:lower:]]\"\
    , letters)])[1:26 %% 2 == 1]])\n    }\n  }\n  num_words\n}\nsplit_words('Hello\
    \ world!')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n", "\n  splits\
    \ <- strsplit(txt, ' ')[[1]]\n  if (length(splits) > 1) {\n    return(splits)\n\
    \  }\n  splits <- strsplit(txt, ',')[[1]]\n  if (length(splits) > 1) {\n    return(splits)\n\
    \  }\n  l <- nchar(txt)\n  return(sum(as.numeric(charToRaw(txt)) %% 2 == 0))\n\
    }\n", "\n  words <- strsplit(txt, \"[ ]+\")[[1]]\n  if (length(words) == 0) {\n\
    \    words <- strsplit(txt, \"[,]+\")[[1]]\n    if (length(words) == 0) {\n  \
    \    words <- length(grep(\"[acegikmoqsuwy]\", txt))\n    }\n  }\n  return(words)\n\
    }\n", "\n  if (grepl(\" \", txt)) {\n    return(unlist(strsplit(txt, \" \")))\n\
    \  } else if (grepl(\",\", txt)) {\n    return(unlist(strsplit(txt, \",\")))\n\
    \  } else {\n    return(sum(order(txt) %% 2 == 1))\n  }\n}\nsplit_words('abc')\n",
  "\n    txt_split <- strsplit(txt, \"[[:space:]]+\")\n    txt_split <- unlist(txt_split)\n\
    \    if (length(txt_split) == 1) {\n        txt_split <- strsplit(txt, \",\")\n\
    \        txt_split <- unlist(txt_split)\n        if (length(txt_split) == 1) {\n\
    \            letters <- nchar(txt)\n            for (i in seq(1, 26)) {\n    \
    \            if (letters == i && i %% 2 == 1) {\n                    return(i)\n\
    \                }\n            }\n        }\n    }\n    return(txt_split)\n}\n\
    \n", "\n    if(is.null(gregexpr(\" \", txt)[[1]])){\n        if(is.null(gregexpr(\"\
    ,\", txt)[[1]])){\n            txt <- strsplit(txt, \"\")[[1]]\n            txt\
    \ <- unlist(txt)\n            txt <- as.integer(txt)\n            txt <- txt -\
    \ 96\n            txt <- txt %% 2\n            txt <- sum(txt)\n            return(txt)\n\
    \        }\n        else{\n            txt <- unlist(strsplit(txt, \",\"))\n \
    \           return(txt)\n        }\n    }\n    else{\n        txt <- unlist(strsplit(txt,\
    \ \" \"))\n        return(txt)\n    }\n}\n ", "\n    # YOUR CODE HERE\n    if\
    \ (grepl(\"\\\\s\", txt)) {\n        return(strsplit(txt, \"\\\\s\")[[1]])\n \
    \   } else if (grepl(\",\", txt)) {\n        return(strsplit(txt, \",\")[[1]])\n\
    \    } else {\n        vec <- strsplit(txt, \"\")[[1]]\n        return(sum(vec)\
    \ %% 2 == 0)\n    }\n}\n", "\n  # Your code here\n  if (grepl(\" \", txt)) {\n\
    \    return(unlist(strsplit(txt, \" \")))\n  } else if (grepl(\",\", txt)) {\n\
    \    return(unlist(strsplit(txt, \",\")))\n  } else {\n    count <- 0\n    chars\
    \ <- strsplit(txt, \"\")[[1]]\n    for (c in chars) {\n      if (ord(c) %% 2 ==\
    \ 1) {\n        count <- count + 1\n      }\n    }\n    return(count)\n  }\n}\n",
  "\n  # Your code here\n}\n", "\n    if(is.null(grep(\" \", txt)) && is.null(grep(\"\
    ,\", txt))) {\n        sum(letters %in% txt == TRUE)\n    } else if(is.null(grep(\"\
    \ \", txt))) {\n        unlist(strsplit(txt, split = \",\"))\n    } else {\n \
    \       unlist(strsplit(txt, split = \" \"))\n    }\n}\n\n", "\n\tif(grepl(\"\\\
    \\s\", txt)){\n\t\tsplit(txt, \"\\\\s\")\n\t}else if(grepl(\",\", txt)){\n\t\t\
    split(txt, \",\")\n\t}else{\n\t\tsum(charToRaw(txt)-charToRaw(\"a\") %% 2 == 1)\n\
    \t}\n}\n", "\n  if (length(grep(\" \", txt)) > 0) {\n    return(strsplit(txt,\
    \ \" \")[[1]])\n  } else if (length(grep(\",\", txt)) > 0) {\n    return(strsplit(txt,\
    \ \",\")[[1]])\n  } else {\n    return(sum(as.integer(gsub(\"[^a-z]\", \"\", txt))\
    \ %% 2))\n  }\n}\n", "\n    if (is.null(grep(\" \", txt))) {\n        if (is.null(grep(\"\
    ,\", txt))) {\n            return(sum(sapply(strsplit(txt, \"\")[[1]], function(x)\
    \ {return(as.numeric(x)-96)%%2==1})))\n        } else {\n            return(strsplit(txt,\
    \ \",\")[[1]])\n        }\n    } else {\n        return(strsplit(txt, \" \")[[1]])\n\
    \    }\n}\nsplit_words(\"Hello world!\")\n", "\n  if (grepl(\" \", txt)) {\n \
    \   out <- strsplit(txt, \" \")\n    return(unlist(out))\n  } else if (grepl(\"\
    ,\", txt)) {\n    out <- strsplit(txt, \",\")\n    return(unlist(out))\n  } else\
    \ {\n    out <- strsplit(txt, split = \"\")\n    odd <- grep(\"[bdfhjlnprtvxz]\"\
    , unlist(out))\n    return(length(odd))\n  }\n}\nsplit_words(\"Hello world!\"\
    )\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\")\n", "\n  words <- strsplit(txt,\
    \ \" \")[[1]]\n  if (length(words) == 0) {\n    words <- strsplit(txt, \",\")[[1]]\n\
    \    if (length(words) == 0) {\n      return(sum(grep(\"[a-z]\", txt, value =\
    \ TRUE) %% 2 == 1))\n    }\n  }\n  return(words)\n}\n", "\n  if (length(grep(\"\
    \ \", txt)) > 0) {\n    return(strsplit(txt, \" \")[[1]])\n  } else if (length(grep(\"\
    ,\", txt)) > 0) {\n    return(strsplit(txt, \",\")[[1]])\n  } else {\n    sum(substr(txt,\
    \ seq(1, nchar(txt), 2), seq(1, nchar(txt), 2)) == \"a\")\n  }\n}\n", "\n  if(grepl(\"\
    \ \", txt) == TRUE) {\n    return(strsplit(txt, split = \" \")[[1]])\n  } else\
    \ if(grepl(\",\", txt) == TRUE) {\n    return(strsplit(txt, split = \",\")[[1]])\n\
    \  } else {\n    ws <- as.character(strsplit(txt, split = \"\")[[1]])\n    return(sum(as.numeric(ws)\
    \ %% 2 == 1))\n  }\n}\n\n", "\n  if (length(gregexpr(\"[\\\\s]+\", txt)[[1]])\
    \ > 0) {\n    return(unlist(strsplit(txt, \"\\\\s+\")))\n  } else if (length(gregexpr(\"\
    [,]+\", txt)[[1]]) > 0) {\n    return(unlist(strsplit(txt, \",\")))\n  } else\
    \ {\n    l <- as.integer(unlist(strsplit(txt, \"\")))\n    odd_letters <- l[l\
    \ %% 2 == 1]\n    return(length(odd_letters))\n  }\n}\nsplit_words('abcdef')\n",
  "\n  # Your code here\n}\n ", "\n  # Fill in code here\n}\n", "\n  if (length(grep(\"\
    \ \", txt))>0) {\n    unlist(strsplit(txt, split = \" \"))\n  } else if (length(grep(\"\
    ,\", txt))>0) {\n    unlist(strsplit(txt, split = \",\"))\n  } else {\n    letters\
    \ <- c(1:26)\n    oddletters <- letters[letters %% 2 == 1]\n    txt <- tolower(txt)\n\
    \    odd <- sum(oddletters %in% as.numeric(charToRaw(txt)))\n    return(odd)\n\
    \  }\n}\nsplit_words(\"Hello world!\")\n", "\n  return(1)\n}", "\n    if (sum(grepl(\"\
    \ \", txt))) {\n        return(unlist(strsplit(txt, \" \")))\n    } else if (sum(grepl(\"\
    ,\", txt))) {\n        return(unlist(strsplit(txt, \",\")))\n    } else {\n  \
    \      return(sum(as.integer(chartr(\"abcdefghijklmnopqrstuvwxyz\", \"0246813579\"\
    , txt)) %% 2))\n    }\n}\n ", "\n  if (stringr::str_detect(txt, ' ')) {\n    return(unlist(strsplit(txt,\
    \ ' ')))\n  } else if (stringr::str_detect(txt, ',')) {\n    return(unlist(strsplit(txt,\
    \ ',')))\n  } else {\n    return(sum(stringr::str_count(stringr::str_to_lower(txt),\
    \ 'a|c|e|g|i|k|m|o|q|s|u|w|y')))\n  }\n}\n", "\n    tmp <- strsplit(txt, split='\
    \ ')\n    if (length(tmp[[1]]) > 1) {\n        tmp[[1]]\n    } else {\n      \
    \  tmp <- strsplit(txt, split=',')\n        if (length(tmp[[1]]) > 1) {\n    \
    \        tmp[[1]]\n        } else {\n            sum(grepl(x=txt, pattern='[a-z]',\
    \ fixed=TRUE)) %% 2\n        }\n    }\n}\n\nsapply(c('Hello world!', 'Hello,world!',\
    \ 'abcdef'), split_words)\n", "\n    \n}\n ", "\n  s <- gregexpr('[[:space:]]',\
    \ txt)\n  if (length(s[[1]]) == 0) {\n    s <- gregexpr(',', txt)\n    if (length(s[[1]])\
    \ == 0) {\n      sum(unlist(strsplit(txt, '')) %in% unique(letters)[odd(seq_along(letters))])\n\
    \    } else {\n      unlist(strsplit(txt, ','))\n    }\n  } else {\n    unlist(strsplit(txt,\
    \ '[[:space:]]'))\n  }\n}\nsplit_words(c('abcdef', 'Hello world!', 'Hello,world!'))",
  "\n  if (any(grepl(\" \", txt))) {\n    unlist(strsplit(txt, \" \"))\n  } else if\
    \ (any(grepl(\",\", txt))) {\n    unlist(strsplit(txt, \",\"))\n  } else {\n \
    \   sum(seq_along(txt) %% 2 == 0)\n  }\n}", "\n\tif (length(grep(\" \", txt))\
    \ > 0) {\n\t\treturn(unlist(strsplit(txt, \" \")))\n\t} else if (length(grep(\"\
    ,\", txt)) > 0) {\n\t\treturn(unlist(strsplit(txt, \",\")))\n\t} else {\n\t\t\
    return(sum(!seq_along(txt) %% 2 == as.numeric(charToRaw(tolower(txt)))-97 %% 2))\n\
    \t}\n}\n ", "\n  # if we can find whitespace, then split. \n  if(grepl(\"\\\\\
    s\", txt)) {\n    return(strsplit(txt, \"\\\\s\")[[1]])\n  }\n  # if we can find\
    \ comma, then split. \n  if(grepl(\",\", txt)) {\n    return(strsplit(txt, \"\
    ,\")[[1]])\n  }\n  # if no whitespace, then count odd letters. \n  sum(seq_along(txt)\
    \ %% 2 == 1)\n}\n\nsplit_words(\"Hello world!\")\nsplit_words(\"Hello,world!\"\
    )\nsplit_words(\"abcdef\")\n", "\n    split_indices <- which(grepl(' |,', txt))\n\
    \    length(split_indices) + 1\n}\n", "\n  # A vector of words\n  words <- strsplit(txt,\
    \ \"[[:space:]]+\")[[1]]\n  # If there is no whitespace in the string, return\
    \ a vector of characters\n  if (length(words) == 1) {\n    words <- strsplit(txt,\
    \ \",\")[[1]]\n    # If there is no comma in the string, split on characters\n\
    \    if (length(words) == 1) {\n      # Return the number of odd-ordered lower-case\
    \ letters\n      sum(unlist(lapply(words, function(x) {x %in% letters[seq(0, 25,\
    \ 2)]})))\n    } else {\n      # If there is comma, return a vector of words\n\
    \      words\n    }\n  } else {\n    # If there is whitespace, return a vector\
    \ of words\n    words\n  }\n}\n", "\n    return(txt)\n}\n", "\n  ## fill in your\
    \ code here\n  return(list())\n}\n", "\n  if (any(strsplit(txt,\" \")[[1]]==\"\
    \")) {\n    strsplit(txt,\" \")[[1]]\n  } else if (any(strsplit(txt,\",\")[[1]]==\"\
    \")) {\n    strsplit(txt,\",\")[[1]]\n  } else {\n    sum(as.integer(stri_split_regex(txt,\"\
    (?<=[a-z])[a-z](?=[a-z])\")[[1]])%%2==1)\n  }\n}\n", "\n    if (any(strsplit(txt,\
    \ \" \")[[1]] == \"\") == FALSE) {\n        if (any(strsplit(txt, \",\")[[1]]\
    \ == \"\") == FALSE) {\n            sum(as.integer(stringr::str_split(txt, \"\"\
    )[[1]]) %% 2 == 1)\n        } else {\n            txt\n        }\n    } else {\n\
    \        unlist(strsplit(txt, \" \"))\n    }\n}\nsplit_words(\"abcd\")\n", "\n\
    \    \n}\n", "\n  split_on <- function(string, pattern) {\n    ret <- unlist(strsplit(string,\
    \ pattern))\n    ret <- ret[ret != \"\"]\n    ret\n  }\n  if (grepl(\" \", txt))\
    \ {\n    ret <- split_on(txt, \" \")\n  } else if (grepl(\",\", txt)) {\n    ret\
    \ <- split_on(txt, \",\")\n  } else {\n    ret <- sum(sapply(stri_split_regex(txt,\
    \ \"\"), function(s) {\n      (s == \"\") || ((s >= \"a\") && (s <= \"z\") &&\
    \ ((s[1] - \"a\") %% 2 == 1))\n    }))\n  }\n  ret\n}\n", "\n  if(grepl(\"\\\\\
    s\", txt)) {\n    return(strsplit(txt, \"\\\\s\")[[1]])\n  } else if(grepl(\"\
    ,\", txt)) {\n    return(strsplit(txt, \",\")[[1]])\n  } else {\n    txt <- strsplit(txt,\
    \ \"\")[[1]]\n    txt <- as.numeric(txt)\n    return(sum(txt %% 2 == 1))\n  }\n\
    }\n\nprint(split_words('Hello world!'))\nprint(split_words('Hello,world!'))\n\
    print(split_words('abcdef'))\n", "\n    # create a vector of the string\n    character\
    \ <- strsplit(txt, \"\")[[1]]\n    # check the condition\n    if(any(character\
    \ == \" \")) {\n        #if there is a white space in the string then get the\
    \ result in the vector\n        res <- unlist(strsplit(txt, \" \"))\n        #return\
    \ the result\n        return(res)\n    } else if(any(character == \",\")) {\n\
    \        #if there is a comma in the string then get the result in the vector\n\
    \        res <- unlist(strsplit(txt, \",\"))\n        #return the result\n   \
    \     return(res)\n    } else {\n        #if there is no space or comma in the\
    \ string then find the number of odd order in the alphabets\n        count <-\
    \ 0\n        # iterate the list of characters using for loop\n        for(i in\
    \ 1:length(character)) {\n            if(!((ord(character[i]) - ord('a')) %% 2\
    \ == 0)) {\n                # if the ord is odd then count it\n              \
    \  count <- count + 1\n            }\n        }\n        #return the result\n\
    \        return(count)\n    }\n}\nsplit_words('Hello world!')\n", "\n   # your\
    \ code here\n   if(sum(strsplit(txt, \" \")[[1]] != \"\") > 0)\n       return(strsplit(txt,\
    \ \" \")[[1]])\n   else if(sum(strsplit(txt, \",\")[[1]] != \"\") > 0)\n     \
    \  return(strsplit(txt, \",\")[[1]])\n   else\n       return(sum(is.na(match(txt,\
    \ LETTERS))))\n}\n", "\n\n}\n", "\n  if (grepl(' ', txt)) {\n    return(strsplit(txt,\
    \ ' ')[[1]])\n  } else if (grepl(',', txt)) {\n    return(strsplit(txt, ',')[[1]])\n\
    \  } else {\n    # Answer for this question is a bit cryptic\n    n_letters <-\
    \ nchar(txt)\n    return(sum(seq(n_letters) %% 2 != nchar(gsub('[^a-z]', '', txt))\
    \ %% 2))\n  }\n}\n\nsplit_words('Hello world!')\nsplit_words('Hello,world!')\n\
    split_words('abcdef')\n", "\n  print(paste(\"txt\", txt))\n  if (is.null(grep(\"\
    \ \", txt))) {\n    if (is.null(grep(\",\", txt))) {\n      indx <- unlist(lapply(1:length(txt),\
    \ function(i) {\n        print(paste(\"i:\", i))\n        if ((i %% 2) == 1) {\n\
    \          TRUE\n        } else {\n          FALSE\n        }\n      }))\n   \
    \   print(paste(\"indx\", indx))\n      return(length(txt[indx]))\n    } else\
    \ {\n      return(strsplit(txt, \",\")[[1]])\n    }\n  } else {\n    return(strsplit(txt,\
    \ \" \")[[1]])\n  }\n}\n", "\n  split.words <- strsplit(txt, split=\"[ \\t,]\"\
    )[[1]]\n  if (length(split.words) > 0) {\n    return(split.words)\n  } else {\n\
    \    return(sum(abs(as.numeric(strsplit(txt, split=\"\")[[1]])) %% 2))\n  }\n\
    }\n", "\n    # write your code here\n    if (str_count(txt, '\\\\s')>0) {\n  \
    \      return(str_split(txt, '\\\\s'))\n    } else if (str_count(txt, ',')>0)\
    \ {\n        return(str_split(txt, ','))\n    } else {\n        # '^.' matches\
    \ the position after the beginning of a string\n        # '$.' matches the position\
    \ before the end of a string\n        return(str_count(txt, '[^.]$'))\n    }\n\
    }\n\na<-split_words('Hello world!')\na\n\nb<-split_words('Hello,world!')\nb\n\n\
    c<-split_words('abcdef')\nc\n\n"]
stop_tokens:
- "\n#"
- "\n```"
