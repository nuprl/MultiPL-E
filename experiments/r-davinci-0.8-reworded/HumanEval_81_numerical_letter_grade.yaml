name: HumanEval_81_numerical_letter_grade
language: r
prompt: "# It is the last week of the semester and the teacher has to give the grades\n\
  # to students. The teacher has been making her own algorithm for grading.\n# The\
  \ only problem is, she has lost the code she used for grading.\n# She has given\
  \ you a list of GPAs for some students and you have to write \n# a function that\
  \ can output a list of letter grades using the following table:\n# GPA       | \
  \   Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3  \
  \              A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3\
  \                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3\
  \                C-\n# > 1.0                D+ \n# > 0.7                D \n# >\
  \ 0.0                D-\n# 0.0                E\n# Example:\n# >>> grade_equation(c(4.0,\
  \ 3, 1.7, 2, 3.5))\n# c('A+', 'B', 'C-', 'C', 'A-')\nnumerical_letter_grade <- function(grades)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- numerical_letter_grade\n    if(!identical(candidate(c(4.0,\
  \ 3, 1.7, 2, 3.5)), c('A+', 'B', 'C-', 'C', 'A-'))){quit('no', 1)}\n    if(!identical(candidate(c(1.2)),\
  \ c('D+'))){quit('no', 1)}\n    if(!identical(candidate(c(0.5)), c('D-'))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0.0)), c('E'))){quit('no', 1)}\n    if(!identical(candidate(c(1.0,\
  \ 0.3, 1.5, 2.8, 3.3)), c('D', 'D-', 'C-', 'B', 'B+'))){quit('no', 1)}\n    if(!identical(candidate(c(0.0,\
  \ 0.7)), c('E', 'D-'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    numerical_grade_to_letter_grade <- list(4.0 = 'A+',\n       \
    \                                     3.7 = 'A',\n                           \
    \                 3.3 = 'A-',\n                                            3.0\
    \ = 'B+',\n                                            2.7 = 'B',\n          \
    \                                  2.3 = 'B-',\n                             \
    \               2.0 = 'C+',\n                                            1.7 =\
    \ 'C',\n                                            1.3 = 'C-',\n            \
    \                                1.0 = 'D+',\n                               \
    \             0.7 = 'D',\n                                            0.0 = 'D-',\n\
    \                                            -Inf = 'E')\n    letter_grades <-\
    \ character(length(grades))\n    for (g in seq_along(grades)) {\n        letter_grades[g]\
    \ <- numerical_grade_to_letter_grade[max(as.numeric(names(numerical_grade_to_letter_grade))[as.numeric(names(numerical_grade_to_letter_grade))\
    \ <= grades[g]])]\n    }\n    return(letter_grades)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))", "\n  letter <- character(length(grades))\n  for (i in 1:length(grades))\
    \ {\n    if (grades[i] > 4.0) {\n      letter[i] <- 'A+'\n    } else if (grades[i]\
    \ > 3.7) {\n      letter[i] <- 'A'\n    } else if (grades[i] > 3.3) {\n      letter[i]\
    \ <- 'A-'\n    } else if (grades[i] > 3.0) {\n      letter[i] <- 'B+'\n    } else\
    \ if (grades[i] > 2.7) {\n      letter[i] <- 'B'\n    } else if (grades[i] > 2.3)\
    \ {\n      letter[i] <- 'B-'\n    } else if (grades[i] > 2.0) {\n      letter[i]\
    \ <- 'C+'\n    } else if (grades[i] > 1.7) {\n      letter[i] <- 'C'\n    } else\
    \ if (grades[i] > 1.3) {\n      letter[i] <- 'C-'\n    } else if (grades[i] >\
    \ 1.0) {\n      letter[i] <- 'D+'\n    } else if (grades[i] > 0.7) {\n      letter[i]\
    \ <- 'D'\n    } else if (grades[i] > 0.0) {\n      letter[i] <- 'D-'\n    } else\
    \ {\n      letter[i] <- 'E'\n    }\n  }\n  return(letter)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n    # Student grades are represented as numbers in a\
    \ vector\n    # To convert these to letter grades, we can just compare them \n\
    \    # to a table of numbers and assign the corresponding letter grade\n    #\
    \ according to a table\n    #\n    # Another option would be to use ifelse() -\
    \ this is a function that takes \n    # several arguments:\n    # 1. a logical\
    \ statement - TRUE/FALSE\n    # 2. the value to use if the logical statement is\
    \ TRUE\n    # 3. the value to use if the logical statement is FALSE\n    #\n \
    \   # We can use ifelse() in a loop to check each grade and assign a letter grade\n\
    \    grades <- ifelse(grades >= 4.0, 'A+', \n        ifelse(grades >= 3.7, 'A',\
    \ \n            ifelse(grades >= 3.3, 'A-', \n                ifelse(grades >=\
    \ 3.0, 'B+', \n                    ifelse(grades >= 2.7, 'B', \n             \
    \           ifelse(grades >= 2.3, 'B-', \n                            ifelse(grades\
    \ >= 2.0, 'C+', \n                                ifelse(grades >= 1.7, 'C', \n\
    \                                    ifelse(grades >= 1.3, 'C-', \n          \
    \                              ifelse(grades >= 1.0, 'D+', \n                \
    \                            ifelse(grades >= 0.7, 'D', \n                   \
    \                             ifelse(grades >= 0.0, 'D-', \n                 \
    \                                   'E'\n                                    \
    \            )\n                                            )\n              \
    \                          )\n                                    )\n        \
    \                        )\n                            )\n                  \
    \      )\n                    )\n                )\n            )\n        )\n\
    \    )\n    return(grades)\n}\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n",
  "\n  LETTER_GRADES <- c(\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"\
    B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\")\n  GPA_SCORES <- c(0, 0.7, 1.0, 1.3,\
    \ 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0)\n  GPA_SCORES_LENGTH <- length(GPA_SCORES)\n\
    \  LETTER_GRADES_LENGTH <- length(LETTER_GRADES)\n  grades_vector <- c()\n  for\
    \ (grade in grades) {\n    for (i in 1:GPA_SCORES_LENGTH) {\n      if (grade <\
    \ GPA_SCORES[i]) {\n        grades_vector <- c(grades_vector, LETTER_GRADES[i])\n\
    \        break\n      }\n    }\n  }\n  return(grades_vector)\n}\nprint(numerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5)))\n", "\n  # YOUR CODE HERE\n  if(grades == 4.0){\n    return(\"\
    A+\")\n  }\n  if(grades > 3.7){\n    return(\"A\")\n  }\n  if(grades > 3.3){\n\
    \    return(\"A-\")\n  }\n  if(grades > 3.0){\n    return(\"B+\")\n  }\n  if(grades\
    \ > 2.7){\n    return(\"B\")\n  }\n  if(grades > 2.3){\n    return(\"B-\")\n \
    \ }\n  if(grades > 2.0){\n    return(\"C+\")\n  }\n  if(grades > 1.7){\n    return(\"\
    C\")\n  }\n  if(grades > 1.3){\n    return(\"C-\")\n  }\n  if(grades > 1.0){\n\
    \    return(\"D+\")\n  }\n  if(grades > 0.7){\n    return(\"D\")\n  }\n  if(grades\
    \ > 0.0){\n    return(\"D-\")\n  }\n  if(grades == 0.0){\n    return(\"E\")\n\
    \  }\n}\ngrades <- c(4.0, 3, 1.7, 2, 3.5)\nfor (i in grades){\n  print(numerical_letter_grade(i))\n\
    }\n", "\n    grade_map <- data.frame(GPA = c(0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3,\
    \ 2.7, 3.0, 3.3, 3.7, 4.0),\n                            Letter_grade = c('E',\
    \ 'D-', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'))\n    return(grade_map$Letter_grade[match(grades,\
    \ grade_map$GPA)])\n}\n\nprint(numerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5)))",
  "\n    for (i in 1:length(grades)) {\n        if (grades[i] > 4.0) {\n         \
    \   grades[i] <- \"A+\"\n        } else if (grades[i] > 3.7) {\n            grades[i]\
    \ <- \"A\"\n        } else if (grades[i] > 3.3) {\n            grades[i] <- \"\
    A-\"\n        } else if (grades[i] > 3.0) {\n            grades[i] <- \"B+\"\n\
    \        } else if (grades[i] > 2.7) {\n            grades[i] <- \"B\"\n     \
    \   } else if (grades[i] > 2.3) {\n            grades[i] <- \"B-\"\n        }\
    \ else if (grades[i] > 2.0) {\n            grades[i] <- \"C+\"\n        } else\
    \ if (grades[i] > 1.7) {\n            grades[i] <- \"C\"\n        } else if (grades[i]\
    \ > 1.3) {\n            grades[i] <- \"C-\"\n        } else if (grades[i] > 1.0)\
    \ {\n            grades[i] <- \"D+\"\n        } else if (grades[i] > 0.7) {\n\
    \            grades[i] <- \"D\"\n        } else if (grades[i] > 0.0) {\n     \
    \       grades[i] <- \"D-\"\n        } else {\n            grades[i] <- \"E\"\n\
    \        }\n    }\n    grades\n}\n", "\n    # grades: numerical vector of GPAs\n\
    \    # RETURN VALUE: vector of letter grades corresponding to the GPAs in grades\n\
    \    # YOUR CODE HERE\n}\n", "\n    \n    letter_grades <- c(\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\")\n    numerical_grade <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7, 0.0, 0.0)\n    \n    letter_grade <- numeric(length(grades))\n    \n  \
    \  for (i in 1:length(grades)) {\n        if (grades[i] >= numerical_grade[1])\
    \ {\n            letter_grade[i] <- letter_grades[1]\n        } else if (grades[i]\
    \ < numerical_grade[1] & grades[i] >= numerical_grade[2]) {\n            letter_grade[i]\
    \ <- letter_grades[2]\n        } else if (grades[i] < numerical_grade[2] & grades[i]\
    \ >= numerical_grade[3]) {\n            letter_grade[i] <- letter_grades[3]\n\
    \        } else if (grades[i] < numerical_grade[3] & grades[i] >= numerical_grade[4])\
    \ {\n            letter_grade[i] <- letter_grades[4]\n        } else if (grades[i]\
    \ < numerical_grade[4] & grades[i] >= numerical_grade[5]) {\n            letter_grade[i]\
    \ <- letter_grades[5]\n        } else if (grades[i] < numerical_grade[5] & grades[i]\
    \ >= numerical_grade[6]) {\n            letter_grade[i] <- letter_grades[6]\n\
    \        } else if (grades[i] < numerical_grade[6] & grades[i] >= numerical_grade[7])\
    \ {\n            letter_grade[i] <- letter_grades[7]\n        } else if (grades[i]\
    \ < numerical_grade[7] & grades[i] >= numerical_grade[8]) {\n            letter_grade[i]\
    \ <- letter_grades[8]\n        } else if (grades[i] < numerical_grade[8] & grades[",
  "\n\tletter_grade <- vector(mode = \"character\", length = length(grades))\n\tfor\
    \ (i in 1:length(grades)) {\n\t\tif (grades[i] > 4.0) {\n\t\t\tletter_grade[i]\
    \ <- \"A+\"\n\t\t} else if (grades[i] > 3.7) {\n\t\t\tletter_grade[i] <- \"A\"\
    \n\t\t} else if (grades[i] > 3.3) {\n\t\t\tletter_grade[i] <- \"A-\"\n\t\t} else\
    \ if (grades[i] > 3.0) {\n\t\t\tletter_grade[i] <- \"B+\"\n\t\t} else if (grades[i]\
    \ > 2.7) {\n\t\t\tletter_grade[i] <- \"B\"\n\t\t} else if (grades[i] > 2.3) {\n\
    \t\t\tletter_grade[i] <- \"B-\"\n\t\t} else if (grades[i] > 2.0) {\n\t\t\tletter_grade[i]\
    \ <- \"C+\"\n\t\t} else if (grades[i] > 1.7) {\n\t\t\tletter_grade[i] <- \"C\"\
    \n\t\t} else if (grades[i] > 1.3) {\n\t\t\tletter_grade[i] <- \"C-\"\n\t\t} else\
    \ if (grades[i] > 1.0) {\n\t\t\tletter_grade[i] <- \"D+\"\n\t\t} else if (grades[i]\
    \ > 0.7) {\n\t\t\tletter_grade[i] <- \"D\"\n\t\t} else if (grades[i] > 0.0) {\n\
    \t\t\tletter_grade[i] <- \"D-\"\n\t\t} else {\n\t\t\tletter_grade[i] <- \"E\"\n\
    \t\t}\n\t}\n\treturn(letter_grade)\n}\n", "\n  # Write function here\n}\n ", "\n\
    \    letter_grade <- ifelse(grades >= 4.0, \"A+\",\n                  ifelse(grades\
    \ >= 3.7, \"A\",\n                  ifelse(grades >= 3.3, \"A-\",\n          \
    \        ifelse(grades >= 3.0, \"B+\",\n                  ifelse(grades >= 2.7,\
    \ \"B\",\n                  ifelse(grades >= 2.3, \"B-\",\n                  ifelse(grades\
    \ >= 2.0, \"C+\",\n                  ifelse(grades >= 1.7, \"C\",\n          \
    \        ifelse(grades >= 1.3, \"C-\",\n                  ifelse(grades >= 1.0,\
    \ \"D+\",\n                  ifelse(grades >= 0.7, \"D\",\n                  ifelse(grades\
    \ >= 0.0, \"D-\",\n                           \"E\"))))))))))))\n    return(letter_grade)\n\
    }\ngrade_equation <- function(grades) {\n    return(numerical_letter_grade(grades))\n\
    }\n\ngrade_equation(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  letter <- c()\n  for (i in\
    \ grades) {\n    if (i >= 4.0) {\n      letter <- c(letter, 'A+')\n    } else\
    \ if (i >= 3.7) {\n      letter <- c(letter, 'A')\n    } else if (i >= 3.3) {\n\
    \      letter <- c(letter, 'A-')\n    } else if (i >= 3.0) {\n      letter <-\
    \ c(letter, 'B+')\n    } else if (i >= 2.7) {\n      letter <- c(letter, 'B')\n\
    \    } else if (i >= 2.3) {\n      letter <- c(letter, 'B-')\n    } else if (i\
    \ >= 2.0) {\n      letter <- c(letter, 'C+')\n    } else if (i >= 1.7) {\n   \
    \   letter <- c(letter, 'C')\n    } else if (i >= 1.3) {\n      letter <- c(letter,\
    \ 'C-')\n    } else if (i >= 1.0) {\n      letter <- c(letter, 'D+')\n    } else\
    \ if (i >= 0.7) {\n      letter <- c(letter, 'D')\n    } else if (i >= 0.0) {\n\
    \      letter <- c(letter, 'D-')\n    } else {\n      letter <- c(letter, 'E')\n\
    \    }\n  }\n  return(letter)\n}\n\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))",
  "\n  final_letter_grade <- c()\n  for (i in 1:length(grades)) {\n    if (grades[i]\
    \ >= 4.0) {\n      final_letter_grade <- c(final_letter_grade, 'A+')\n    } else\
    \ if (grades[i] >= 3.7) {\n      final_letter_grade <- c(final_letter_grade, 'A')\n\
    \    } else if (grades[i] >= 3.3) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'A-')\n    } else if (grades[i] >= 3.0) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'B+')\n    } else if (grades[i] >= 2.7) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'B')\n    } else if (grades[i] >= 2.3) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'B-')\n    } else if (grades[i] >= 2.0) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'C+')\n    } else if (grades[i] >= 1.7) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'C')\n    } else if (grades[i] >= 1.3) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'C-')\n    } else if (grades[i] >= 1.0) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'D+')\n    } else if (grades[i] >= 0.7) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'D')\n    } else if (grades[i] >= 0.0) {\n      final_letter_grade <- c(final_letter_grade,\
    \ 'D-')\n    } else {\n      final_letter_grade <- c(final_letter_grade, 'E')\n\
    \    }\n  }\n  return(final_letter_grade)\n}", "\n  if (grades >= 4.0) {\n   \
    \ \"A+\"\n  } else if (grades >= 3.7) {\n    \"A\"\n  } else if (grades >= 3.3)\
    \ {\n    \"A-\"\n  } else if (grades >= 3.0) {\n    \"B+\"\n  } else if (grades\
    \ >= 2.7) {\n    \"B\"\n  } else if (grades >= 2.3) {\n    \"B-\"\n  } else if\
    \ (grades >= 2.0) {\n    \"C+\"\n  } else if (grades >= 1.7) {\n    \"C\"\n  }\
    \ else if (grades >= 1.3) {\n    \"C-\"\n  } else if (grades >= 1.0) {\n    \"\
    D+\"\n  } else if (grades >= 0.7) {\n    \"D\"\n  } else if (grades >= 0.0) {\n\
    \    \"D-\"\n  } else {\n    \"E\"\n  }\n}\ngrade_equation <- function(grade_list)\
    \ {\n  map_chr(grade_list, numerical_letter_grade)\n}\n", "\n   grades <- ifelse(grades\
    \ >= 4.0, 'A+',\n          ifelse(grades >= 3.7, 'A',\n          ifelse(grades\
    \ >= 3.3, 'A-',\n          ifelse(grades >= 3.0, 'B+',\n          ifelse(grades\
    \ >= 2.7, 'B',\n          ifelse(grades >= 2.3, 'B-',\n          ifelse(grades\
    \ >= 2.0, 'C+',\n          ifelse(grades >= 1.7, 'C',\n          ifelse(grades\
    \ >= 1.3, 'C-',\n          ifelse(grades >= 1.0, 'D+',\n          ifelse(grades\
    \ >= 0.7, 'D',\n          ifelse(grades >= 0.0, 'D-', 'E')))))))))))))\n   return(grades)\n\
    }", "\n    if (grades >= 4.0) {\n        return(\"A+\")\n    } else if (grades\
    \ >= 3.7) {\n        return(\"A\")\n    } else if (grades >= 3.3) {\n        return(\"\
    A-\")\n    } else if (grades >= 3.0) {\n        return(\"B+\")\n    } else if\
    \ (grades >= 2.7) {\n        return(\"B\")\n    } else if (grades >= 2.3) {\n\
    \        return(\"B-\")\n    } else if (grades >= 2.0) {\n        return(\"C+\"\
    )\n    } else if (grades >= 1.7) {\n        return(\"C\")\n    } else if (grades\
    \ >= 1.3) {\n        return(\"C-\")\n    } else if (grades >= 1.0) {\n       \
    \ return(\"D+\")\n    } else if (grades >= 0.7) {\n        return(\"D\")\n   \
    \ } else if (grades >= 0.0) {\n        return(\"D-\")\n    } else {\n        return(\"\
    E\")\n    }\n}\n\ngrade_equation <- function(grades) {\n    return(lapply(grades,\
    \ numerical_letter_grade))\n}\n", "\n    letter_grade = rep('', length(grades))\n\
    \    for (i in 1:length(grades)) {\n        if (grades[i] >= 4.0) {\n        \
    \    letter_grade[i] = 'A+'\n        } else if (grades[i] >= 3.7) {\n        \
    \    letter_grade[i] = 'A'\n        } else if (grades[i] >= 3.3) {\n         \
    \   letter_grade[i] = 'A-'\n        } else if (grades[i] >= 3.0) {\n         \
    \   letter_grade[i] = 'B+'\n        } else if (grades[i] >= 2.7) {\n         \
    \   letter_grade[i] = 'B'\n        } else if (grades[i] >= 2.3) {\n          \
    \  letter_grade[i] = 'B-'\n        } else if (grades[i] >= 2.0) {\n          \
    \  letter_grade[i] = 'C+'\n        } else if (grades[i] >= 1.7) {\n          \
    \  letter_grade[i] = 'C'\n        } else if (grades[i] >= 1.3) {\n           \
    \ letter_grade[i] = 'C-'\n        } else if (grades[i] >= 1.0) {\n           \
    \ letter_grade[i] = 'D+'\n        } else if (grades[i] >= 0.7) {\n           \
    \ letter_grade[i] = 'D'\n        } else if (grades[i] >= 0.0) {\n            letter_grade[i]\
    \ = 'D-'\n        } else {\n            letter_grade[i] = 'E'\n        }\n   \
    \ }\n    return(letter_grade)\n}\n", "\n  grades_num <- c(4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0)\n  grades_char <- c('A+', 'A', 'A-',\
    \ 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-')\n  letter_grades <- ''\n\
    \  for (x in grades) {\n    for (i in 1:12) {\n      if (x >= grades_num[i]) {\n\
    \        letter_grades <- c(letter_grades, grades_char[i])\n        break\n  \
    \    }\n    }\n  }\n  return(letter_grades)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))", "\n  plus_minus_index <- ifelse(grades %% 1 == 0.3, 3, ifelse(grades\
    \ %% 1 == 0.7, 7, 0))\n  grades_number <- floor(grades)\n  ifelse(grades_number\
    \ == 5, 'A+', ifelse(grades_number == 4, 'A', ifelse(grades_number == 3, 'B',\
    \ ifelse(grades_number == 2, 'C', ifelse(grades_number == 1, 'D', 'E'))))) + substr(c('-',\
    \ '+', ''), plus_minus_index, plus_minus_index)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  grade <- \"\"\n  for (i in 1:length(grades)) {\n \
    \   if (grades[i] >= 4.0) {\n      grade <- c(grade, \"A+\")\n    } else if (grades[i]\
    \ >= 3.7 && grades[i] < 4.0) {\n      grade <- c(grade, \"A\")\n    } else if\
    \ (grades[i] >= 3.3 && grades[i] < 3.7) {\n      grade <- c(grade, \"A-\")\n \
    \   } else if (grades[i] >= 3.0 && grades[i] < 3.3) {\n      grade <- c(grade,\
    \ \"B+\")\n    } else if (grades[i] >= 2.7 && grades[i] < 3.0) {\n      grade\
    \ <- c(grade, \"B\")\n    } else if (grades[i] >= 2.3 && grades[i] < 2.7) {\n\
    \      grade <- c(grade, \"B-\")\n    } else if (grades[i] >= 2.0 && grades[i]\
    \ < 2.3) {\n      grade <- c(grade, \"C+\")\n    } else if (grades[i] >= 1.7 &&\
    \ grades[i] < 2.0) {\n      grade <- c(grade, \"C\")\n    } else if (grades[i]\
    \ >= 1.3 && grades[i] < 1.7) {\n      grade <- c(grade, \"C-\")\n    } else if\
    \ (grades[i] >= 1.0 && grades[i] < 1.3) {\n      grade <- c(grade, \"D+\")\n \
    \   } else if (grades[i] >= 0.7 && grades[i] < 1.0) {\n      grade <- c(grade,\
    \ \"D\")\n    } else if (grades[i] >= 0.0 && grades[i] < 0.7) {\n      grade <-\
    \ c(grade, \"D-\")\n    } else if (grades[i] == 0.0) {\n      grade <- c(grade,\
    \ \"E\")\n    }\n  }\n  grade\n}\n", "\n  letter_grades <- c()\n  for (i in 1:length(grades))\
    \ {\n    if (grades[i] > 4.0) {\n      letter_grades <- c(letter_grades, 'A+')\n\
    \    } else if (grades[i] > 3.7) {\n      letter_grades <- c(letter_grades, 'A')\n\
    \    } else if (grades[i] > 3.3) {\n      letter_grades <- c(letter_grades, 'A-')\n\
    \    } else if (grades[i] > 3.0) {\n      letter_grades <- c(letter_grades, 'B+')\n\
    \    } else if (grades[i] > 2.7) {\n      letter_grades <- c(letter_grades, 'B')\n\
    \    } else if (grades[i] > 2.3) {\n      letter_grades <- c(letter_grades, 'B-')\n\
    \    } else if (grades[i] > 2.0) {\n      letter_grades <- c(letter_grades, 'C+')\n\
    \    } else if (grades[i] > 1.7) {\n      letter_grades <- c(letter_grades, 'C')\n\
    \    } else if (grades[i] > 1.3) {\n      letter_grades <- c(letter_grades, 'C-')\n\
    \    } else if (grades[i] > 1.0) {\n      letter_grades <- c(letter_grades, 'D+')\n\
    \    } else if (grades[i] > 0.7) {\n      letter_grades <- c(letter_grades, 'D')\n\
    \    } else if (grades[i] > 0.0) {\n      letter_grades <- c(letter_grades, 'D-')\n\
    \    } else {\n      letter_grades <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  grades_letter <- c()\n\
    \  for (i in 1:length(grades)) {\n    if (grades[i] >= 4.0) {\n      grades_letter[i]\
    \ <- 'A+'\n    } else if (grades[i] >= 3.7) {\n      grades_letter[i] <- 'A'\n\
    \    } else if (grades[i] >= 3.3) {\n      grades_letter[i] <- 'A-'\n    } else\
    \ if (grades[i] >= 3.0) {\n      grades_letter[i] <- 'B+'\n    } else if (grades[i]\
    \ >= 2.7) {\n      grades_letter[i] <- 'B'\n    } else if (grades[i] >= 2.3) {\n\
    \      grades_letter[i] <- 'B-'\n    } else if (grades[i] >= 2.0) {\n      grades_letter[i]\
    \ <- 'C+'\n    } else if (grades[i] >= 1.7) {\n      grades_letter[i] <- 'C'\n\
    \    } else if (grades[i] >= 1.3) {\n      grades_letter[i] <- 'C-'\n    } else\
    \ if (grades[i] >= 1.0) {\n      grades_letter[i] <- 'D+'\n    } else if (grades[i]\
    \ >= 0.7) {\n      grades_letter[i] <- 'D'\n    } else if (grades[i] >= 0.0) {\n\
    \      grades_letter[i] <- 'D-'\n    } else {\n      grades_letter[i] <- 'E'\n\
    \    }\n  }\n  return(grades_letter)\n}\n", "\n  if (grades <= 0) {\n    letter_grade\
    \ <- 'E'\n  } else if (grades <= 0.7) {\n    letter_grade <- 'D-'\n  } else if\
    \ (grades <= 1.0) {\n    letter_grade <- 'D+'\n  } else if (grades <= 1.3) {\n\
    \    letter_grade <- 'C-'\n  } else if (grades <= 1.7) {\n    letter_grade <-\
    \ 'C'\n  } else if (grades <= 2.0) {\n    letter_grade <- 'C+'\n  } else if (grades\
    \ <= 2.3) {\n    letter_grade <- 'B-'\n  } else if (grades <= 2.7) {\n    letter_grade\
    \ <- 'B'\n  } else if (grades <= 3.0) {\n    letter_grade <- 'B+'\n  } else if\
    \ (grades <= 3.3) {\n    letter_grade <- 'A-'\n  } else if (grades <= 3.7) {\n\
    \    letter_grade <- 'A'\n  } else {\n    letter_grade <- 'A+'\n  }\n  return(letter_grade)\n\
    }\n\ngrade_equation <- function(grades) {\n  grades_vector <- rep('', length(grades))\n\
    \  for (i in 1:length(grades)) {\n    grades_vector[i] <- numerical_letter_grade(grades[i])\n\
    \  }\n  return(grades_vector)\n}\n\ngrade_equation(c(4.0, 3, 1.7, 2, 3.5))\n",
  "\n  letter_grades <- c()\n  for (grade in grades) {\n    if (grade == 4.0) {\n\
    \      letter_grades <- c(letter_grades, 'A+')\n    } else if (grade > 3.7) {\n\
    \      letter_grades <- c(letter_grades, 'A')\n    } else if (grade > 3.3) {\n\
    \      letter_grades <- c(letter_grades, 'A-')\n    } else if (grade > 3.0) {\n\
    \      letter_grades <- c(letter_grades, 'B+')\n    } else if (grade > 2.7) {\n\
    \      letter_grades <- c(letter_grades, 'B')\n    } else if (grade > 2.3) {\n\
    \      letter_grades <- c(letter_grades, 'B-')\n    } else if (grade > 2.0) {\n\
    \      letter_grades <- c(letter_grades, 'C+')\n    } else if (grade > 1.7) {\n\
    \      letter_grades <- c(letter_grades, 'C')\n    } else if (grade > 1.3) {\n\
    \      letter_grades <- c(letter_grades, 'C-')\n    } else if (grade > 1.0) {\n\
    \      letter_grades <- c(letter_grades, 'D+')\n    } else if (grade > 0.7) {\n\
    \      letter_grades <- c(letter_grades, 'D')\n    } else if (grade > 0.0) {\n\
    \      letter_grades <- c(letter_grades, 'D-')\n    } else {\n      letter_grades\
    \ <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  LETTER_GRADES <- c('A+', 'A', 'A-', 'B+', 'B', 'B-',\
    \ 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n  GRADE_CUTOFFS <- c(4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n  letter_grades <- c()\n\
    \  for (i in seq_along(grades)) {\n    if (grades[i] > 4.0) {\n      letter_grades\
    \ <- c(letter_grades, LETTER_GRADES[1])\n    } else {\n      ind <- findInterval(grades[i],\
    \ GRADE_CUTOFFS)\n      letter_grades <- c(letter_grades, LETTER_GRADES[ind])\n\
    \    }\n  }\n  return(letter_grades)\n}\n\ngrade_equation <- function(grades)\
    \ {\n  numerical_letter_grade(grades)\n}\n\ngrade_equation <- function(grades)\
    \ {\n  LETTER_GRADES <- c('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+',\
    \ 'D', 'D-', 'E')\n  GRADE_CUTOFFS <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0, 0.7, 0.0, 0.0)\n  letter_grades <- LETTER_GRADES[findInterval(grades,\
    \ GRADE_CUTOFFS)]\n  letter_grades[grades > 4.0] <- LETTER_GRADES[1]\n  return(letter_grades)\n\
    }\n\ngrade_equation <- function(grades) {\n  LETTER_GRADES <- c('A+', 'A', 'A-',\
    \ 'B+', 'B', 'B-', 'C+', 'C', 'C-', '", "\n    letter_grades <- c()\n    for (grade\
    \ in grades) {\n        if (grade >= 4.0) {\n            letter_grades <- c(letter_grades,\
    \ 'A+')\n        } else if (grade >= 3.7) {\n            letter_grades <- c(letter_grades,\
    \ 'A')\n        } else if (grade >= 3.3) {\n            letter_grades <- c(letter_grades,\
    \ 'A-')\n        } else if (grade >= 3.0) {\n            letter_grades <- c(letter_grades,\
    \ 'B+')\n        } else if (grade >= 2.7) {\n            letter_grades <- c(letter_grades,\
    \ 'B')\n        } else if (grade >= 2.3) {\n            letter_grades <- c(letter_grades,\
    \ 'B-')\n        } else if (grade >= 2.0) {\n            letter_grades <- c(letter_grades,\
    \ 'C+')\n        } else if (grade >= 1.7) {\n            letter_grades <- c(letter_grades,\
    \ 'C')\n        } else if (grade >= 1.3) {\n            letter_grades <- c(letter_grades,\
    \ 'C-')\n        } else if (grade >= 1.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D+')\n        } else if (grade >= 0.7) {\n            letter_grades <- c(letter_grades,\
    \ 'D')\n        } else if (grade >= 0.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D-')\n        } else {\n            letter_grades <- c(letter_grades, 'E')\n\
    \        }\n    }\n    return(letter_grades)\n}\n", "\n    grades <- grades +\
    \ 0.5\n    grades[grades > 4] <- 4.0\n    grades[grades < 0] <- 0.0\n    grades\
    \ <- as.character(grades)\n    return(grades)\n}\ngrade_equation <- function(grades)\
    \ {\n    grades <- numeric_to_letter_grade(grades)\n    return(grades)\n}", "\n\
    \  grades_letters <- rep(\"E\", length(grades))\n  grades_letters[grades >= 4.0]\
    \ <- \"A+\"\n  grades_letters[grades >= 3.7 & grades < 4.0] <- \"A\"\n  grades_letters[grades\
    \ >= 3.3 & grades < 3.7] <- \"A-\"\n  grades_letters[grades >= 3.0 & grades <\
    \ 3.3] <- \"B+\"\n  grades_letters[grades >= 2.7 & grades < 3.0] <- \"B\"\n  grades_letters[grades\
    \ >= 2.3 & grades < 2.7] <- \"B-\"\n  grades_letters[grades >= 2.0 & grades <\
    \ 2.3] <- \"C+\"\n  grades_letters[grades >= 1.7 & grades < 2.0] <- \"C\"\n  grades_letters[grades\
    \ >= 1.3 & grades < 1.7] <- \"C-\"\n  grades_letters[grades >= 1.0 & grades <\
    \ 1.3] <- \"D+\"\n  grades_letters[grades >= 0.7 & grades < 1.0] <- \"D\"\n  grades_letters[grades\
    \ >= 0.0 & grades < 0.7] <- \"D-\"\n  grades_letters\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))", "\n  for (grade in grades) {\n    if (grade >= 4.0) {\n \
    \     return(\"A+\")\n    } else if (grade > 3.7) {\n      return(\"A\")\n   \
    \ } else if (grade > 3.3) {\n      return(\"A-\")\n    } else if (grade > 3.0)\
    \ {\n      return(\"B+\")\n    } else if (grade > 2.7) {\n      return(\"B\")\n\
    \    } else if (grade > 2.3) {\n      return(\"B-\")\n    } else if (grade > 2.0)\
    \ {\n      return(\"C+\")\n    } else if (grade > 1.7) {\n      return(\"C\")\n\
    \    } else if (grade > 1.3) {\n      return(\"C-\")\n    } else if (grade > 1.0)\
    \ {\n      return(\"D+\")\n    } else if (grade > 0.7) {\n      return(\"D\")\n\
    \    } else if (grade > 0.0) {\n      return(\"D-\")\n    } else {\n      return(\"\
    E\")\n    }\n  }\n}\n\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n\ngrades\
    \ <- c(4.0, 3, 1.7, 2, 3.5)\nfor (grade in grades) {\n  print(numerical_letter_grade(grade))\n\
    }\n", "\n    letter_grades <- c()\n    for (i in grades) {\n        if (i >= 4.0)\
    \ {\n            letter_grades <- c(letter_grades, 'A+')\n        } else if (i\
    \ > 3.7) {\n            letter_grades <- c(letter_grades, 'A')\n        } else\
    \ if (i > 3.3) {\n            letter_grades <- c(letter_grades, 'A-')\n      \
    \  } else if (i > 3.0) {\n            letter_grades <- c(letter_grades, 'B+')\n\
    \        } else if (i > 2.7) {\n            letter_grades <- c(letter_grades,\
    \ 'B')\n        } else if (i > 2.3) {\n            letter_grades <- c(letter_grades,\
    \ 'B-')\n        } else if (i > 2.0) {\n            letter_grades <- c(letter_grades,\
    \ 'C+')\n        } else if (i > 1.7) {\n            letter_grades <- c(letter_grades,\
    \ 'C')\n        } else if (i > 1.3) {\n            letter_grades <- c(letter_grades,\
    \ 'C-')\n        } else if (i > 1.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D+')\n        } else if (i > 0.7) {\n            letter_grades <- c(letter_grades,\
    \ 'D')\n        } else if (i > 0.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D-')\n        } else {\n            letter_grades <- c(letter_grades, 'E')\n\
    \        }\n    }\n    return(letter_grades)\n}\n\nprint(numerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5)))\n\n", "\n\t# YOUR CODE HERE\n\tletter_grades <- c('A+', 'A',\
    \ 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n\tnumerical_cutoffs\
    \ <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n\tresult\
    \ <- NULL\n\t#print(numerical_cutoffs)\n\tfor (i in 1:length(grades)) {\n\t\t\
    for (j in 1:length(numerical_cutoffs)) {\n\t\t\tif (grades[i] >= numerical_cutoffs[j])\
    \ {\n\t\t\t\tresult <- c(result, letter_grades[j])\n\t\t\t\tbreak\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn(result)\n}\n", "\n  letters <- c('A+', 'A', 'A-', 'B+', 'B',\
    \ 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n  values <- c(4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n  for (i in 1:length(grades))\
    \ {\n    grade <- grades[i]\n    next <- 0\n    while (next == 0) {\n      if\
    \ (grade >= values[length(values)]) {\n        grades[i] <- letters[length(values)]\n\
    \        next <- 1\n      } else if (grade < values[length(values)]) {\n     \
    \   for (j in 1:length(values)) {\n          if (grade >= values[j]) {\n     \
    \       grades[i] <- letters[j]\n            next <- 1\n          }\n        }\n\
    \      }\n    }\n  }\n  return(grades)\n}\nnumerical_letter_grade(c(4.0, 3, 1.7,\
    \ 2, 3.5))\n", "\n    grades <- as.vector(grades)\n    grades <- round(grades,\
    \ digits = 1)\n    grades <- as.character(grades)\n    grades <- gsub(\"3.3\"\
    , \"A-\", grades)\n    grades <- gsub(\"3.7\", \"A\", grades)\n    grades <- gsub(\"\
    3.3\", \"A-\", grades)\n    grades <- gsub(\"3.0\", \"B+\", grades)\n    grades\
    \ <- gsub(\"2.7\", \"B\", grades)\n    grades <- gsub(\"2.3\", \"B-\", grades)\n\
    \    grades <- gsub(\"2.0\", \"C+\", grades)\n    grades <- gsub(\"1.7\", \"C\"\
    , grades)\n    grades <- gsub(\"1.3\", \"C-\", grades)\n    grades <- gsub(\"\
    1.0\", \"D+\", grades)\n    grades <- gsub(\"0.7\", \"D\", grades)\n    grades\
    \ <- gsub(\"0.0\", \"D-\", grades)\n    grades <- gsub(\"4.0\", \"A+\", grades)\n\
    \    return(grades)\n}\n", "\n    letter_grades <- rep('', length(grades))\n \
    \   for (i in 1:length(grades)) {\n        grade <- grades[i]\n        if (grade\
    \ >= 4.0) {\n            letter_grades[i] <- 'A+'\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades[i] <- 'A'\n        } else if (grade >= 3.3)\
    \ {\n            letter_grades[i] <- 'A-'\n        } else if (grade >= 3.0) {\n\
    \            letter_grades[i] <- 'B+'\n        } else if (grade >= 2.7) {\n  \
    \          letter_grades[i] <- 'B'\n        } else if (grade >= 2.3) {\n     \
    \       letter_grades[i] <- 'B-'\n        } else if (grade >= 2.0) {\n       \
    \     letter_grades[i] <- 'C+'\n        } else if (grade >= 1.7) {\n         \
    \   letter_grades[i] <- 'C'\n        } else if (grade >= 1.3) {\n            letter_grades[i]\
    \ <- 'C-'\n        } else if (grade >= 1.0) {\n            letter_grades[i] <-\
    \ 'D+'\n        } else if (grade >= 0.7) {\n            letter_grades[i] <- 'D'\n\
    \        } else if (grade >= 0.0) {\n            letter_grades[i] <- 'D-'\n  \
    \      } else {\n            letter_grades[i] <- 'E'\n        }\n    }\n    return(letter_grades)\n\
    }\n\nnumerical_letter_grade_2 <- function(grades) {\n    letter_grades <- rep('',\
    \ length(grades))\n    for (i in 1:length(grades)) {\n        grade <- grades[i]\n\
    \        if (grade >= 4.0) {\n            letter_grades[i] <- 'A+'\n        }\
    \ else if (grade >= 3.7) {\n            letter_grades[i] <- 'A'\n        } else\
    \ if (grade >= 3.3) {\n            letter_grades[i] <- 'A-'\n        } else if\
    \ (grade >= 3.0) {\n            letter_", "\n    if (grades >= 4.0) {\n      \
    \  return(\"A+\")\n    } else if (grades >= 3.7) {\n        return(\"A\")\n  \
    \  } else if (grades >= 3.3) {\n        return(\"A-\")\n    } else if (grades\
    \ >= 3.0) {\n        return(\"B+\")\n    } else if (grades >= 2.7) {\n       \
    \ return(\"B\")\n    } else if (grades >= 2.3) {\n        return(\"B-\")\n   \
    \ } else if (grades >= 2.0) {\n        return(\"C+\")\n    } else if (grades >=\
    \ 1.7) {\n        return(\"C\")\n    } else if (grades >= 1.3) {\n        return(\"\
    C-\")\n    } else if (grades >= 1.0) {\n        return(\"D+\")\n    } else if\
    \ (grades >= 0.7) {\n        return(\"D\")\n    } else if (grades >= 0.0) {\n\
    \        return(\"D-\")\n    } else {\n        return(\"E\")\n    }\n}\n\nletter_grade\
    \ <- sapply(c(4.0, 3, 1.7, 2, 3.5), function(x) numerical_letter_grade(x))\nprint(letter_grade)\n\
    \ngrade_equation <- function(grade_vector) {\n    vector_length <- length(grade_vector)\n\
    \    grade_list <- vector(mode = \"character\", length = vector_length)\n    for\
    \ (i in 1:vector_length) {\n        grade_list[i] <- numerical_letter_grade(grade_vector[i])\n\
    \    }\n    return(grade_list)\n}\n", "\n    stopifnot(all(grades >= 0))\n   \
    \ stopifnot(all(grades <= 4))\n    ifelse(grades == 4,\n           \"A+\",\n \
    \          ifelse(grades > 3.7,\n                  \"A\",\n                  ifelse(grades\
    \ > 3.3,\n                         \"A-\",\n                         ifelse(grades\
    \ > 3.0,\n                                \"B+\",\n                          \
    \      ifelse(grades > 2.7,\n                                       \"B\",\n \
    \                                      ifelse(grades > 2.3,\n                \
    \                              \"B-\",\n                                     \
    \         ifelse(grades > 2.0,\n                                             \
    \        \"C+\",\n                                                     ifelse(grades\
    \ > 1.7,\n                                                            \"C\",\n\
    \                                                            ifelse(grades > 1.3,\n\
    \                                                                   \"C-\",\n\
    \                                                                   ifelse(grades\
    \ > 1.0,\n                                                                   \
    \       \"D+\",\n                                                            \
    \              ifelse(grades > 0.7,\n                                        \
    \                                         \"D\",\n                           \
    \                                                      ifelse(grades > 0.0,\n\
    \                                                                            \
    \            \"D-\",\n                                                       \
    \                                 \"E\")))))))))))))\n}\n", "\n  letter_grade\
    \ <- c()\n  for (grade in grades) {\n    if (grade >= 4.0) {\n      letter_grade\
    \ <- c(letter_grade, 'A+')\n    } else if (grade >= 3.7) {\n      letter_grade\
    \ <- c(letter_grade, 'A')\n    } else if (grade >= 3.3) {\n      letter_grade\
    \ <- c(letter_grade, 'A-')\n    } else if (grade >= 3.0) {\n      letter_grade\
    \ <- c(letter_grade, 'B+')\n    } else if (grade >= 2.7) {\n      letter_grade\
    \ <- c(letter_grade, 'B')\n    } else if (grade >= 2.3) {\n      letter_grade\
    \ <- c(letter_grade, 'B-')\n    } else if (grade >= 2.0) {\n      letter_grade\
    \ <- c(letter_grade, 'C+')\n    } else if (grade >= 1.7) {\n      letter_grade\
    \ <- c(letter_grade, 'C')\n    } else if (grade >= 1.3) {\n      letter_grade\
    \ <- c(letter_grade, 'C-')\n    } else if (grade >= 1.0) {\n      letter_grade\
    \ <- c(letter_grade, 'D+')\n    } else if (grade >= 0.7) {\n      letter_grade\
    \ <- c(letter_grade, 'D')\n    } else if (grade >= 0.0) {\n      letter_grade\
    \ <- c(letter_grade, 'D-')\n    } else {\n      letter_grade <- c(letter_grade,\
    \ 'E')\n    }\n  }\n  return(letter_grade)\n}\n", "\n  grade <- rep(\"\", length(grades))\n\
    \  for (i in 1:length(grades)) {\n    if (grades[i] >= 4.0) {\n      grade[i]\
    \ <- \"A+\"\n    } else if (grades[i] >= 3.7) {\n      grade[i] <- \"A\"\n   \
    \ } else if (grades[i] >= 3.3) {\n      grade[i] <- \"A-\"\n    } else if (grades[i]\
    \ >= 3.0) {\n      grade[i] <- \"B+\"\n    } else if (grades[i] >= 2.7) {\n  \
    \    grade[i] <- \"B\"\n    } else if (grades[i] >= 2.3) {\n      grade[i] <-\
    \ \"B-\"\n    } else if (grades[i] >= 2.0) {\n      grade[i] <- \"C+\"\n    }\
    \ else if (grades[i] >= 1.7) {\n      grade[i] <- \"C\"\n    } else if (grades[i]\
    \ >= 1.3) {\n      grade[i] <- \"C-\"\n    } else if (grades[i] >= 1.0) {\n  \
    \    grade[i] <- \"D+\"\n    } else if (grades[i] >= 0.7) {\n      grade[i] <-\
    \ \"D\"\n    } else if (grades[i] >= 0.0) {\n      grade[i] <- \"D-\"\n    } else\
    \ {\n      grade[i] <- \"E\"\n    }\n  }\n  return(grade)\n}\n", "\n    res <-\
    \ c()\n    for (grade in grades) {\n        if (grade == 4.0) {\n            res\
    \ <- c(res, 'A+')\n        } else if (grade > 3.7) {\n            res <- c(res,\
    \ 'A')\n        } else if (grade > 3.3) {\n            res <- c(res, 'A-')\n \
    \       } else if (grade > 3.0) {\n            res <- c(res, 'B+')\n        }\
    \ else if (grade > 2.7) {\n            res <- c(res, 'B')\n        } else if (grade\
    \ > 2.3) {\n            res <- c(res, 'B-')\n        } else if (grade > 2.0) {\n\
    \            res <- c(res, 'C+')\n        } else if (grade > 1.7) {\n        \
    \    res <- c(res, 'C')\n        } else if (grade > 1.3) {\n            res <-\
    \ c(res, 'C-')\n        } else if (grade > 1.0) {\n            res <- c(res, 'D+')\n\
    \        } else if (grade > 0.7) {\n            res <- c(res, 'D')\n        }\
    \ else if (grade > 0.0) {\n            res <- c(res, 'D-')\n        } else {\n\
    \            res <- c(res, 'E')\n        }\n    }\n    return(res)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  numeric_grades <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0)\n  letter_grades <- c('A+', 'A', 'A-', 'B+', 'B',\
    \ 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-')\n  if (max(grades) >= 4.0)\n    letter_grades[1]\n\
    \  else if (min(grades) < 0.0)\n    letter_grades[12]\n  else\n    letter_grades[findInterval(grades,\
    \ numeric_grades)]\n}\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))", "\n  #\
    \ your code here\n  if (grades == 4.0) {\n    return(\"A+\")\n  }\n  else if (grades\
    \ > 3.7) {\n    return(\"A\")\n  }\n  else if (grades > 3.3) {\n    return(\"\
    A-\")\n  }\n  else if (grades > 3.0) {\n    return(\"B+\")\n  }\n  else if (grades\
    \ > 2.7) {\n    return(\"B\")\n  }\n  else if (grades > 2.3) {\n    return(\"\
    B-\")\n  }\n  else if (grades > 2.0) {\n    return(\"C+\")\n  }\n  else if (grades\
    \ > 1.7) {\n    return(\"C\")\n  }\n  else if (grades > 1.3) {\n    return(\"\
    C-\")\n  }\n  else if (grades > 1.0) {\n    return(\"D+\")\n  }\n  else if (grades\
    \ > 0.7) {\n    return(\"D\")\n  }\n  else if (grades > 0.0) {\n    return(\"\
    D-\")\n  }\n  else {\n    return(\"E\")\n  }\n}\nnumerical_letter_grade(4.0)\n\
    \ngrade_equation <- function(grades) {\n  # your code here\n  grades_letter <-\
    \ character(length(grades))\n  for (i in 1:length(grades)) {\n    grades_letter[i]\
    \ <- numerical_letter_grade(grades[i])\n  }\n  return(grades_letter)\n}\ngrade_equation(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  # YOUR CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  letter_grades\
    \ <- list()\n  for (grade in grades) {\n    if (grade == 4.0) {\n      letter_grades\
    \ <- c(letter_grades, 'A+')\n    } else if (grade > 3.7) {\n      letter_grades\
    \ <- c(letter_grades, 'A')\n    } else if (grade > 3.3) {\n      letter_grades\
    \ <- c(letter_grades, 'A-')\n    } else if (grade > 3.0) {\n      letter_grades\
    \ <- c(letter_grades, 'B+')\n    } else if (grade > 2.7) {\n      letter_grades\
    \ <- c(letter_grades, 'B')\n    } else if (grade > 2.3) {\n      letter_grades\
    \ <- c(letter_grades, 'B-')\n    } else if (grade > 2.0) {\n      letter_grades\
    \ <- c(letter_grades, 'C+')\n    } else if (grade > 1.7) {\n      letter_grades\
    \ <- c(letter_grades, 'C')\n    } else if (grade > 1.3) {\n      letter_grades\
    \ <- c(letter_grades, 'C-')\n    } else if (grade > 1.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D+')\n    } else if (grade > 0.7) {\n      letter_grades\
    \ <- c(letter_grades, 'D')\n    } else if (grade > 0.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D-')\n    } else {\n      letter_grades <- c(letter_grades,\
    \ 'E')\n    }\n  }\n  return(letter_grades)\n}\n\nprint('numerical_letter_grade')\n\
    expect_true(numerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5)) == c('A+', 'B', 'C-',\
    \ 'C', 'A-'))\n", "\n    letter_grades <- c()\n    for (i in 1:length(grades))\
    \ {\n        if (grades[i] >= 4.0) {\n            letter_grades <- c(letter_grades,\
    \ 'A+')\n        } else if (grades[i] > 3.7) {\n            letter_grades <- c(letter_grades,\
    \ 'A')\n        } else if (grades[i] > 3.3) {\n            letter_grades <- c(letter_grades,\
    \ 'A-')\n        } else if (grades[i] > 3.0) {\n            letter_grades <- c(letter_grades,\
    \ 'B+')\n        } else if (grades[i] > 2.7) {\n            letter_grades <- c(letter_grades,\
    \ 'B')\n        } else if (grades[i] > 2.3) {\n            letter_grades <- c(letter_grades,\
    \ 'B-')\n        } else if (grades[i] > 2.0) {\n            letter_grades <- c(letter_grades,\
    \ 'C+')\n        } else if (grades[i] > 1.7) {\n            letter_grades <- c(letter_grades,\
    \ 'C')\n        } else if (grades[i] > 1.3) {\n            letter_grades <- c(letter_grades,\
    \ 'C-')\n        } else if (grades[i] > 1.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D+')\n        } else if (grades[i] > 0.7) {\n            letter_grades <- c(letter_grades,\
    \ 'D')\n        } else if (grades[i] > 0.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D-')\n        } else {\n            letter_grades <- c(letter_grades, 'E')\n\
    \        }\n    }\n    return(letter_grades)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n    letter_grades <- c()\n    for (grade in grades)\
    \ {\n        if (grade >= 4.0) {\n            letter_grades <- c(letter_grades,\
    \ 'A+')\n        } else if (grade >= 3.7) {\n            letter_grades <- c(letter_grades,\
    \ 'A')\n        } else if (grade >= 3.3) {\n            letter_grades <- c(letter_grades,\
    \ 'A-')\n        } else if (grade >= 3.0) {\n            letter_grades <- c(letter_grades,\
    \ 'B+')\n        } else if (grade >= 2.7) {\n            letter_grades <- c(letter_grades,\
    \ 'B')\n        } else if (grade >= 2.3) {\n            letter_grades <- c(letter_grades,\
    \ 'B-')\n        } else if (grade >= 2.0) {\n            letter_grades <- c(letter_grades,\
    \ 'C+')\n        } else if (grade >= 1.7) {\n            letter_grades <- c(letter_grades,\
    \ 'C')\n        } else if (grade >= 1.3) {\n            letter_grades <- c(letter_grades,\
    \ 'C-')\n        } else if (grade >= 1.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D+')\n        } else if (grade >= 0.7) {\n            letter_grades <- c(letter_grades,\
    \ 'D')\n        } else if (grade >= 0.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D-')\n        } else {\n            letter_grades <- c(letter_grades, 'E')\n\
    \        }\n    }\n    return(letter_grades)\n}\n", "\n    ifelse(grades >= 4.0,\
    \ \"A+\",\n           ifelse(grades >= 3.7, \"A\",\n                  ifelse(grades\
    \ >= 3.3, \"A-\",\n                         ifelse(grades >= 3.0, \"B+\",\n  \
    \                              ifelse(grades >= 2.7, \"B\",\n                \
    \                       ifelse(grades >= 2.3, \"B-\",\n                      \
    \                        ifelse(grades >= 2.0, \"C+\",\n                     \
    \                                ifelse(grades >= 1.7, \"C\",\n              \
    \                                              ifelse(grades >= 1.3, \"C-\",\n\
    \                                                                   ifelse(grades\
    \ >= 1.0, \"D+\",\n                                                          \
    \                ifelse(grades >= 0.7, \"D\",\n                              \
    \                                                   ifelse(grades >= 0.0, \"D-\"\
    , \"E\")))))))))))))\n}\n", "\n    letters <- vector(mode = \"character\", length\
    \ = length(grades))\n    for (i in 1:length(grades)) {\n        if (grades[i]\
    \ >= 4.0) {\n            letters[i] <- \"A+\"\n        } else if (grades[i] >=\
    \ 3.7) {\n            letters[i] <- \"A\"\n        } else if (grades[i] >= 3.3)\
    \ {\n            letters[i] <- \"A-\"\n        } else if (grades[i] >= 3.0) {\n\
    \            letters[i] <- \"B+\"\n        } else if (grades[i] >= 2.7) {\n  \
    \          letters[i] <- \"B\"\n        } else if (grades[i] >= 2.3) {\n     \
    \       letters[i] <- \"B-\"\n        } else if (grades[i] >= 2.0) {\n       \
    \     letters[i] <- \"C+\"\n        } else if (grades[i] >= 1.7) {\n         \
    \   letters[i] <- \"C\"\n        } else if (grades[i] >= 1.3) {\n            letters[i]\
    \ <- \"C-\"\n        } else if (grades[i] >= 1.0) {\n            letters[i] <-\
    \ \"D+\"\n        } else if (grades[i] >= 0.7) {\n            letters[i] <- \"\
    D\"\n        } else if (grades[i] >= 0.0) {\n            letters[i] <- \"D-\"\n\
    \        } else {\n            letters[i] <- \"E\"\n        }\n    }\n    return(letters)\n\
    }\n ", "\n  grades_letter <- c()\n  for (grade in grades) {\n    if (grade >=\
    \ 4.0) {\n      grades_letter <- c(grades_letter, 'A+')\n    } else if (grade\
    \ >= 3.7) {\n      grades_letter <- c(grades_letter, 'A')\n    } else if (grade\
    \ >= 3.3) {\n      grades_letter <- c(grades_letter, 'A-')\n    } else if (grade\
    \ >= 3.0) {\n      grades_letter <- c(grades_letter, 'B+')\n    } else if (grade\
    \ >= 2.7) {\n      grades_letter <- c(grades_letter, 'B')\n    } else if (grade\
    \ >= 2.3) {\n      grades_letter <- c(grades_letter, 'B-')\n    } else if (grade\
    \ >= 2.0) {\n      grades_letter <- c(grades_letter, 'C+')\n    } else if (grade\
    \ >= 1.7) {\n      grades_letter <- c(grades_letter, 'C')\n    } else if (grade\
    \ >= 1.3) {\n      grades_letter <- c(grades_letter, 'C-')\n    } else if (grade\
    \ >= 1.0) {\n      grades_letter <- c(grades_letter, 'D+')\n    } else if (grade\
    \ >= 0.7) {\n      grades_letter <- c(grades_letter, 'D')\n    } else if (grade\
    \ >= 0.0) {\n      grades_letter <- c(grades_letter, 'D-')\n    } else {\n   \
    \   grades_letter <- c(grades_letter, 'E')\n    }\n  }\n  return(grades_letter)\n\
    }", "\n    letter_grades <- c()\n    for (grade in grades) {\n        if (grade\
    \ >= 4.0) {\n            letter_grades <- c(letter_grades, 'A+')\n        } else\
    \ if (grade >= 3.7) {\n            letter_grades <- c(letter_grades, 'A')\n  \
    \      } else if (grade >= 3.3) {\n            letter_grades <- c(letter_grades,\
    \ 'A-')\n        } else if (grade >= 3.0) {\n            letter_grades <- c(letter_grades,\
    \ 'B+')\n        } else if (grade >= 2.7) {\n            letter_grades <- c(letter_grades,\
    \ 'B')\n        } else if (grade >= 2.3) {\n            letter_grades <- c(letter_grades,\
    \ 'B-')\n        } else if (grade >= 2.0) {\n            letter_grades <- c(letter_grades,\
    \ 'C+')\n        } else if (grade >= 1.7) {\n            letter_grades <- c(letter_grades,\
    \ 'C')\n        } else if (grade >= 1.3) {\n            letter_grades <- c(letter_grades,\
    \ 'C-')\n        } else if (grade >= 1.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D+')\n        } else if (grade >= 0.7) {\n            letter_grades <- c(letter_grades,\
    \ 'D')\n        } else if (grade >= 0.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D-')\n        } else {\n            letter_grades <- c(letter_grades, 'E')\n\
    \        }\n    }\n    return(letter_grades)\n}\n\ntest3 <- c(4.0, 3, 1.7, 2,\
    \ 3.5)\nnumerical_letter_grade(test3)\n", "\n  list_of_letter_grades <- c()\n\
    \  grade_tracker <- 4.0\n  for (x in grades) {\n    if (x >= grade_tracker) {\n\
    \      list_of_letter_grades <- c(list_of_letter_grades, \"A+\")\n    } else if\
    \ (x < grade_tracker & x >= 3.7) {\n      list_of_letter_grades <- c(list_of_letter_grades,\
    \ \"A\")\n    } else if (x < 3.7 & x >= 3.3) {\n      list_of_letter_grades <-\
    \ c(list_of_letter_grades, \"A-\")\n    } else if (x < 3.3 & x >= 3.0) {\n   \
    \   list_of_letter_grades <- c(list_of_letter_grades, \"B+\")\n    } else if (x\
    \ < 3.0 & x >= 2.7) {\n      list_of_letter_grades <- c(list_of_letter_grades,\
    \ \"B\")\n    } else if (x < 2.7 & x >= 2.3) {\n      list_of_letter_grades <-\
    \ c(list_of_letter_grades, \"B-\")\n    } else if (x < 2.3 & x >= 2.0) {\n   \
    \   list_of_letter_grades <- c(list_of_letter_grades, \"C+\")\n    } else if (x\
    \ < 2.0 & x >= 1.7) {\n      list_of_letter_grades <- c(list_of_letter_grades,\
    \ \"C\")\n    } else if (x < 1.7 & x >= 1.3) {\n      list_of_letter_grades <-\
    \ c(list_of_letter_grades, \"C-\")\n    } else if (x < 1.3 & x >= 1.0) {\n   \
    \   list_of_letter_grades <- c(list_of_letter_grades, \"D+\")\n    } else if (x\
    \ < 1.0 & x >= 0.7) {\n      list_of_letter_grades <- c(list_of_letter_grades,\
    \ \"D\")\n    } else if (x < 0.7 & x >= 0.0", "\n  \n  for (i in 1:length(grades))\
    \ {\n    if (grades[i] >= 4.0) {\n      grades[i] <- \"A+\"\n    } else if (grades[i]\
    \ > 3.7) {\n      grades[i] <- \"A\"\n    } else if (grades[i] > 3.3) {\n    \
    \  grades[i] <- \"A-\"\n    } else if (grades[i] > 3.0) {\n      grades[i] <-\
    \ \"B+\"\n    } else if (grades[i] > 2.7) {\n      grades[i] <- \"B\"\n    } else\
    \ if (grades[i] > 2.3) {\n      grades[i] <- \"B-\"\n    } else if (grades[i]\
    \ > 2.0) {\n      grades[i] <- \"C+\"\n    } else if (grades[i] > 1.7) {\n   \
    \   grades[i] <- \"C\"\n    } else if (grades[i] > 1.3) {\n      grades[i] <-\
    \ \"C-\"\n    } else if (grades[i] > 1.0) {\n      grades[i] <- \"D+\"\n    }\
    \ else if (grades[i] > 0.7) {\n      grades[i] <- \"D\"\n    } else if (grades[i]\
    \ > 0.0) {\n      grades[i] <- \"D-\"\n    } else {\n      grades[i] <- \"E\"\n\
    \    }\n  }\n  return(grades)\n}\n ", "\n  for (i in 1:length(grades)) {\n   \
    \ if (grades[i] >= 4.0) {\n      grades[i] <- 'A+'\n    } else if (grades[i] >=\
    \ 3.7) {\n      grades[i] <- 'A'\n    } else if (grades[i] >= 3.3) {\n      grades[i]\
    \ <- 'A-'\n    } else if (grades[i] >= 3.0) {\n      grades[i] <- 'B+'\n    }\
    \ else if (grades[i] >= 2.7) {\n      grades[i] <- 'B'\n    } else if (grades[i]\
    \ >= 2.3) {\n      grades[i] <- 'B-'\n    } else if (grades[i] >= 2.0) {\n   \
    \   grades[i] <- 'C+'\n    } else if (grades[i] >= 1.7) {\n      grades[i] <-\
    \ 'C'\n    } else if (grades[i] >= 1.3) {\n      grades[i] <- 'C-'\n    } else\
    \ if (grades[i] >= 1.0) {\n      grades[i] <- 'D+'\n    } else if (grades[i] >=\
    \ 0.7) {\n      grades[i] <- 'D'\n    } else if (grades[i] >= 0.0) {\n      grades[i]\
    \ <- 'D-'\n    } else {\n      grades[i] <- 'E'\n    }\n  }\n  return(grades)\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n    letter_grades <-\
    \ c('E', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+')\n\
    \    grade_table <- c(0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0)\n\
    \    converted_grades <- rep(NA, length(grades))\n    for (i in 1:length(grades))\
    \ {\n        if (grades[i] < 0) {\n            converted_grades[i] <- letter_grades[1]\n\
    \        } else if (grades[i] == 0) {\n            converted_grades[i] <- letter_grades[1]\n\
    \        } else if (grades[i] == 4) {\n            converted_grades[i] <- letter_grades[13]\n\
    \        } else {\n            counter <- 1\n            while (counter < length(grade_table))\
    \ {\n                if (grades[i] < grade_table[counter + 1]) {\n           \
    \         converted_grades[i] <- letter_grades[counter]\n                    break\n\
    \                }\n                counter <- counter + 1\n            }\n  \
    \      }\n    }\n    return(converted_grades)\n}\n", "\n  letter_grade <- c()\n\
    \  for (g in grades) {\n    if (g == 4.0) {\n      letter_grade <- c(letter_grade,\
    \ 'A+')\n    } else if (g >= 3.7) {\n      letter_grade <- c(letter_grade, 'A')\n\
    \    } else if (g >= 3.3) {\n      letter_grade <- c(letter_grade, 'A-')\n   \
    \ } else if (g >= 3.0) {\n      letter_grade <- c(letter_grade, 'B+')\n    } else\
    \ if (g >= 2.7) {\n      letter_grade <- c(letter_grade, 'B')\n    } else if (g\
    \ >= 2.3) {\n      letter_grade <- c(letter_grade, 'B-')\n    } else if (g >=\
    \ 2.0) {\n      letter_grade <- c(letter_grade, 'C+')\n    } else if (g >= 1.7)\
    \ {\n      letter_grade <- c(letter_grade, 'C')\n    } else if (g >= 1.3) {\n\
    \      letter_grade <- c(letter_grade, 'C-')\n    } else if (g >= 1.0) {\n   \
    \   letter_grade <- c(letter_grade, 'D+')\n    } else if (g >= 0.7) {\n      letter_grade\
    \ <- c(letter_grade, 'D')\n    } else if (g > 0.0) {\n      letter_grade <- c(letter_grade,\
    \ 'D-')\n    } else {\n      letter_grade <- c(letter_grade, 'E')\n    }\n  }\n\
    \  return(letter_grade)\n}\n\ngrades <- c(4.0, 3, 1.7, 2, 3.5)\nletters <- numerical_letter_grade(grades)\n\
    letters\n", "\n\tnum_letter <- ifelse(grades >= 4.0, 'A+',\n\t\tifelse(grades\
    \ >= 3.7, 'A',\n\t\t\tifelse(grades >= 3.3, 'A-',\n\t\t\t\tifelse(grades >= 3.0,\
    \ 'B+',\n\t\t\t\t\tifelse(grades >= 2.7, 'B',\n\t\t\t\t\t\tifelse(grades >= 2.3,\
    \ 'B-',\n\t\t\t\t\t\t\tifelse(grades >= 2.0, 'C+',\n\t\t\t\t\t\t\t\tifelse(grades\
    \ >= 1.7, 'C',\n\t\t\t\t\t\t\t\t\tifelse(grades >= 1.3, 'C-',\n\t\t\t\t\t\t\t\t\
    \t\tifelse(grades >= 1.0, 'D+',\n\t\t\t\t\t\t\t\t\t\t\tifelse(grades >= 0.7, 'D',\n\
    \t\t\t\t\t\t\t\t\t\t\t\tifelse(grades >= 0.0, 'D-', 'E'))))))))))))\n\treturn(num_letter)\n\
    }\n\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))", "\n    vector(\"character\"\
    , length(grades)) -> letter_grades\n    letter_grades[grades >= 4.0] <- \"A+\"\
    \n    letter_grades[grades > 3.7 & letter_grades == \"\"] <- \"A\"\n    letter_grades[grades\
    \ > 3.3 & letter_grades == \"\"] <- \"A-\"\n    letter_grades[grades > 3.0 & letter_grades\
    \ == \"\"] <- \"B+\"\n    letter_grades[grades > 2.7 & letter_grades == \"\"]\
    \ <- \"B\"\n    letter_grades[grades > 2.3 & letter_grades == \"\"] <- \"B-\"\n\
    \    letter_grades[grades > 2.0 & letter_grades == \"\"] <- \"C+\"\n    letter_grades[grades\
    \ > 1.7 & letter_grades == \"\"] <- \"C\"\n    letter_grades[grades > 1.3 & letter_grades\
    \ == \"\"] <- \"C-\"\n    letter_grades[grades > 1.0 & letter_grades == \"\"]\
    \ <- \"D+\"\n    letter_grades[grades > 0.7 & letter_grades == \"\"] <- \"D\"\n\
    \    letter_grades[grades > 0.0 & letter_grades == \"\"] <- \"D-\"\n    letter_grades[grades\
    \ == 0.0] <- \"E\"\n    return(letter_grades)\n}\ngrade_equation <- function(grades)\
    \ {\n    return(numerical_letter_grade(grades))\n}", "\n    letter_grades <- c()\n\
    \    for (grade in grades) {\n        if (grade >= 4.0) {\n            letter_grades\
    \ <- c(letter_grades, 'A+')\n        } else if (grade >= 3.7) {\n            letter_grades\
    \ <- c(letter_grades, 'A')\n        } else if (grade >= 3.3) {\n            letter_grades\
    \ <- c(letter_grades, 'A-')\n        } else if (grade >= 3.0) {\n            letter_grades\
    \ <- c(letter_grades, 'B+')\n        } else if (grade >= 2.7) {\n            letter_grades\
    \ <- c(letter_grades, 'B')\n        } else if (grade >= 2.3) {\n            letter_grades\
    \ <- c(letter_grades, 'B-')\n        } else if (grade >= 2.0) {\n            letter_grades\
    \ <- c(letter_grades, 'C+')\n        } else if (grade >= 1.7) {\n            letter_grades\
    \ <- c(letter_grades, 'C')\n        } else if (grade >= 1.3) {\n            letter_grades\
    \ <- c(letter_grades, 'C-')\n        } else if (grade >= 1.0) {\n            letter_grades\
    \ <- c(letter_grades, 'D+')\n        } else if (grade >= 0.7) {\n            letter_grades\
    \ <- c(letter_grades, 'D')\n        } else if (grade >= 0.0) {\n            letter_grades\
    \ <- c(letter_grades, 'D-')\n        } else {\n            letter_grades <- c(letter_grades,\
    \ 'E')\n        }\n    }\n    return(letter_grades)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n\tfor (i in 1:length(grades)) {\n\t\tif (grades[i] >=\
    \ 4.0) {\n\t\t\tgrades[i] <- 'A+'\n\t\t} else if (grades[i] >= 3.7) {\n\t\t\t\
    grades[i] <- 'A'\n\t\t} else if (grades[i] >= 3.3) {\n\t\t\tgrades[i] <- 'A-'\n\
    \t\t} else if (grades[i] >= 3.0) {\n\t\t\tgrades[i] <- 'B+'\n\t\t} else if (grades[i]\
    \ >= 2.7) {\n\t\t\tgrades[i] <- 'B'\n\t\t} else if (grades[i] >= 2.3) {\n\t\t\t\
    grades[i] <- 'B-'\n\t\t} else if (grades[i] >= 2.0) {\n\t\t\tgrades[i] <- 'C+'\n\
    \t\t} else if (grades[i] >= 1.7) {\n\t\t\tgrades[i] <- 'C'\n\t\t} else if (grades[i]\
    \ >= 1.3) {\n\t\t\tgrades[i] <- 'C-'\n\t\t} else if (grades[i] >= 1.0) {\n\t\t\
    \tgrades[i] <- 'D+'\n\t\t} else if (grades[i] >= 0.7) {\n\t\t\tgrades[i] <- 'D'\n\
    \t\t} else if (grades[i] >= 0.0) {\n\t\t\tgrades[i] <- 'D-'\n\t\t} else {\n\t\t\
    \tgrades[i] <- 'E'\n\t\t}\n\t}\n\treturn(grades)\n}\n\ncat('numerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))')\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\ncat('\\\
    n')\n", "\n  grades <- ifelse(grades < 1.3, 0.0, grades)\n  grades <- ifelse(grades\
    \ < 1.7, 1.0, grades)\n  grades <- ifelse(grades < 2.0, 1.3, grades)\n  grades\
    \ <- ifelse(grades < 2.3, 2.0, grades)\n  grades <- ifelse(grades < 2.7, 2.3,\
    \ grades)\n  grades <- ifelse(grades < 3.0, 2.7, grades)\n  grades <- ifelse(grades\
    \ < 3.3, 3.0, grades)\n  grades <- ifelse(grades < 3.7, 3.3, grades)\n  grades\
    \ <- ifelse(grades < 4.0, 3.7, grades)\n  return(grades)\n}\n\nletter_grade <-\
    \ function(grades) {\n  grades <- ifelse(grades < 1.3, 'D-', grades)\n  grades\
    \ <- ifelse(grades < 1.7, 'D+', grades)\n  grades <- ifelse(grades < 2.0, 'C-',\
    \ grades)\n  grades <- ifelse(grades < 2.3, 'C+', grades)\n  grades <- ifelse(grades\
    \ < 2.7, 'B-', grades)\n  grades <- ifelse(grades < 3.0, 'B+', grades)\n  grades\
    \ <- ifelse(grades < 3.3, 'A-', grades)\n  grades <- ifelse(grades < 3.7, 'A',\
    \ grades)\n  grades <- ifelse(grades < 4.0, 'A+', grades)\n  return(grades)\n\
    }\n", "\n  grade_table <- data.frame(\n    GPA = c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0),\n    Letter_grade = c('A+', 'A', 'A-', 'B+',\
    \ 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-')\n  )\n  grades <- match(grades,\
    \ grade_table$GPA)\n  grades[grades <= 0] <- 12\n  grade_table$Letter_grade[grades]\n\
    }\n", "\n  grade_letter <- vector(mode = \"character\", length = length(grades))\n\
    \  for (i in 1:length(grades)) {\n    if (grades[i] >= 4.0) {\n      grade_letter[i]\
    \ <- \"A+\"\n    } else if (grades[i] >= 3.7) {\n      grade_letter[i] <- \"A\"\
    \n    } else if (grades[i] >= 3.3) {\n      grade_letter[i] <- \"A-\"\n    } else\
    \ if (grades[i] >= 3.0) {\n      grade_letter[i] <- \"B+\"\n    } else if (grades[i]\
    \ >= 2.7) {\n      grade_letter[i] <- \"B\"\n    } else if (grades[i] >= 2.3)\
    \ {\n      grade_letter[i] <- \"B-\"\n    } else if (grades[i] >= 2.0) {\n   \
    \   grade_letter[i] <- \"C+\"\n    } else if (grades[i] >= 1.7) {\n      grade_letter[i]\
    \ <- \"C\"\n    } else if (grades[i] >= 1.3) {\n      grade_letter[i] <- \"C-\"\
    \n    } else if (grades[i] >= 1.0) {\n      grade_letter[i] <- \"D+\"\n    } else\
    \ if (grades[i] >= 0.7) {\n      grade_letter[i] <- \"D\"\n    } else if (grades[i]\
    \ >= 0.0) {\n      grade_letter[i] <- \"D-\"\n    } else {\n      grade_letter[i]\
    \ <- \"E\"\n    }\n  }\n  return(grade_letter)\n}\n", "\n    letter_grades <-\
    \ rep(\"E\", length(grades))\n    letter_grades[grades >= 4.0] <- \"A+\"\n   \
    \ letter_grades[grades >= 3.7 & grades < 4.0] <- \"A\"\n    letter_grades[grades\
    \ >= 3.3 & grades < 3.7] <- \"A-\"\n    letter_grades[grades >= 3.0 & grades <\
    \ 3.3] <- \"B+\"\n    letter_grades[grades >= 2.7 & grades < 3.0] <- \"B\"\n \
    \   letter_grades[grades >= 2.3 & grades < 2.7] <- \"B-\"\n    letter_grades[grades\
    \ >= 2.0 & grades < 2.3] <- \"C+\"\n    letter_grades[grades >= 1.7 & grades <\
    \ 2.0] <- \"C\"\n    letter_grades[grades >= 1.3 & grades < 1.7] <- \"C-\"\n \
    \   letter_grades[grades >= 1.0 & grades < 1.3] <- \"D+\"\n    letter_grades[grades\
    \ >= 0.7 & grades < 1.0] <- \"D\"\n    letter_grades[grades >= 0.0 & grades <\
    \ 0.7] <- \"D-\"\n    return(letter_grades)\n}\n\ngrade_equation <- function(grades)\
    \ {\n    return(numerical_letter_grade(grades))\n}\n", "\n  letters <- character(length(grades))\n\
    \  for (i in 1:length(grades)) {\n    if (grades[i] == 4.0) {\n      letters[i]\
    \ <- 'A+'\n    } else if (grades[i] > 3.7) {\n      letters[i] <- 'A'\n    } else\
    \ if (grades[i] > 3.3) {\n      letters[i] <- 'A-'\n    } else if (grades[i] >\
    \ 3.0) {\n      letters[i] <- 'B+'\n    } else if (grades[i] > 2.7) {\n      letters[i]\
    \ <- 'B'\n    } else if (grades[i] > 2.3) {\n      letters[i] <- 'B-'\n    } else\
    \ if (grades[i] > 2.0) {\n      letters[i] <- 'C+'\n    } else if (grades[i] >\
    \ 1.7) {\n      letters[i] <- 'C'\n    } else if (grades[i] > 1.3) {\n      letters[i]\
    \ <- 'C-'\n    } else if (grades[i] > 1.0) {\n      letters[i] <- 'D+'\n    }\
    \ else if (grades[i] > 0.7) {\n      letters[i] <- 'D'\n    } else if (grades[i]\
    \ > 0.0) {\n      letters[i] <- 'D-'\n    } else {\n      letters[i] <- 'E'\n\
    \    }\n  }\n  return(letters)\n}\n \nnumerical_letter_grade(c(4.0, 3, 1.7, 2,\
    \ 3.5))", "\n    grades <- floor(grades * 10)\n    grades <- ifelse(grades > 40,\
    \ 40, grades)\n    grades <- ifelse(grades < 0, 0, grades)\n    grades <- round(grades\
    \ / 10)\n    letter_grade <- ifelse(grades == 4, 'A+', \n                    \
    \       ifelse(grades == 3, 'A', \n                                  ifelse(grades\
    \ == 2, 'B', \n                                         ifelse(grades == 1, 'C',\
    \ \n                                                ifelse(grades == 0, 'D', 'E')))))\n\
    \    return(letter_grade)\n}\n\ngrade_equation <- function(gpa_vector) {\n   \
    \ gpa_vector <- floor(gpa_vector * 10)\n    gpa_vector <- ifelse(gpa_vector >\
    \ 40, 40, gpa_vector)\n    gpa_vector <- ifelse(gpa_vector < 0, 0, gpa_vector)\n\
    \    gpa_vector <- round(gpa_vector / 10)\n    letter_grade <- ifelse(gpa_vector\
    \ == 4, 'A+', \n                           ifelse(gpa_vector == 3, 'A', \n   \
    \                               ifelse(gpa_vector == 2, 'B', \n              \
    \                           ifelse(gpa_vector == 1, 'C', \n                  \
    \                              ifelse(gpa_vector == 0, 'D', 'E')))))\n    return(letter_grade)\n\
    }", "\n  grades <- floor(grades * 2)\n  res <- vector()\n  for (g in grades) {\n\
    \    if (g >= 8) {\n      res <- c(res, 'A+')\n    } else if (g >= 7) {\n    \
    \  res <- c(res, 'A')\n    } else if (g >= 6) {\n      res <- c(res, 'A-')\n \
    \   } else if (g >= 5) {\n      res <- c(res, 'B+')\n    } else if (g >= 4) {\n\
    \      res <- c(res, 'B')\n    } else if (g >= 3) {\n      res <- c(res, 'B-')\n\
    \    } else if (g >= 2) {\n      res <- c(res, 'C+')\n    } else if (g >= 1) {\n\
    \      res <- c(res, 'C')\n    } else if (g >= 0) {\n      res <- c(res, 'C-')\n\
    \    } else {\n      res <- c(res, 'E')\n    }\n  }\n  return(res)\n}\n", "\n\
    \  for (i in 1:length(grades)) {\n    if (grades[i] == 4.0) {\n      grades[i]\
    \ <- 'A+'\n    } else if (grades[i] > 3.7) {\n      grades[i] <- 'A'\n    } else\
    \ if (grades[i] > 3.3) {\n      grades[i] <- 'A-'\n    } else if (grades[i] >\
    \ 3.0) {\n      grades[i] <- 'B+'\n    } else if (grades[i] > 2.7) {\n      grades[i]\
    \ <- 'B'\n    } else if (grades[i] > 2.3) {\n      grades[i] <- 'B-'\n    } else\
    \ if (grades[i] > 2.0) {\n      grades[i] <- 'C+'\n    } else if (grades[i] >\
    \ 1.7) {\n      grades[i] <- 'C'\n    } else if (grades[i] > 1.3) {\n      grades[i]\
    \ <- 'C-'\n    } else if (grades[i] > 1.0) {\n      grades[i] <- 'D+'\n    } else\
    \ if (grades[i] > 0.7) {\n      grades[i] <- 'D'\n    } else if (grades[i] >=\
    \ 0.0) {\n      grades[i] <- 'D-'\n    } else {\n      grades[i] <- 'E'\n    }\n\
    \  }\n  grades\n}\n", "\n  numeric(length(grades))\n}\n", "\n  letter_grades <-\
    \ c()\n  for (grade in grades) {\n    if (grade >= 4.0) {\n      letter_grades\
    \ <- c(letter_grades, 'A+')\n    } else if (grade >= 3.7) {\n      letter_grades\
    \ <- c(letter_grades, 'A')\n    } else if (grade >= 3.3) {\n      letter_grades\
    \ <- c(letter_grades, 'A-')\n    } else if (grade >= 3.0) {\n      letter_grades\
    \ <- c(letter_grades, 'B+')\n    } else if (grade >= 2.7) {\n      letter_grades\
    \ <- c(letter_grades, 'B')\n    } else if (grade >= 2.3) {\n      letter_grades\
    \ <- c(letter_grades, 'B-')\n    } else if (grade >= 2.0) {\n      letter_grades\
    \ <- c(letter_grades, 'C+')\n    } else if (grade >= 1.7) {\n      letter_grades\
    \ <- c(letter_grades, 'C')\n    } else if (grade >= 1.3) {\n      letter_grades\
    \ <- c(letter_grades, 'C-')\n    } else if (grade >= 1.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D+')\n    } else if (grade >= 0.7) {\n      letter_grades\
    \ <- c(letter_grades, 'D')\n    } else if (grade >= 0.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D-')\n    } else {\n      letter_grades <- c(letter_grades,\
    \ 'E')\n    }\n  }\n  return(letter_grades)\n}\n", "\n  result <- character(length(grades))\n\
    \  for (i in 1:length(grades)) {\n    grade <- grades[i]\n    if (grade >= 4.0)\
    \ {\n      result[i] <- 'A+'\n    } else if (grade >= 3.7) {\n      result[i]\
    \ <- 'A'\n    } else if (grade >= 3.3) {\n      result[i] <- 'A-'\n    } else\
    \ if (grade >= 3.0) {\n      result[i] <- 'B+'\n    } else if (grade >= 2.7) {\n\
    \      result[i] <- 'B'\n    } else if (grade >= 2.3) {\n      result[i] <- 'B-'\n\
    \    } else if (grade >= 2.0) {\n      result[i] <- 'C+'\n    } else if (grade\
    \ >= 1.7) {\n      result[i] <- 'C'\n    } else if (grade >= 1.3) {\n      result[i]\
    \ <- 'C-'\n    } else if (grade >= 1.0) {\n      result[i] <- 'D+'\n    } else\
    \ if (grade >= 0.7) {\n      result[i] <- 'D'\n    } else if (grade >= 0.0) {\n\
    \      result[i] <- 'D-'\n    } else {\n      result[i] <- 'E'\n    }\n  }\n \
    \ return(result)\n}", "\n  letter_grades <- c()\n  for (grade in grades) {\n \
    \   if (grade >= 4.0) {\n      letter_grades <- c(letter_grades, 'A+')\n    }\
    \ else if (grade >= 3.7) {\n      letter_grades <- c(letter_grades, 'A')\n   \
    \ } else if (grade >= 3.3) {\n      letter_grades <- c(letter_grades, 'A-')\n\
    \    } else if (grade >= 3.0) {\n      letter_grades <- c(letter_grades, 'B+')\n\
    \    } else if (grade >= 2.7) {\n      letter_grades <- c(letter_grades, 'B')\n\
    \    } else if (grade >= 2.3) {\n      letter_grades <- c(letter_grades, 'B-')\n\
    \    } else if (grade >= 2.0) {\n      letter_grades <- c(letter_grades, 'C+')\n\
    \    } else if (grade >= 1.7) {\n      letter_grades <- c(letter_grades, 'C')\n\
    \    } else if (grade >= 1.3) {\n      letter_grades <- c(letter_grades, 'C-')\n\
    \    } else if (grade >= 1.0) {\n      letter_grades <- c(letter_grades, 'D+')\n\
    \    } else if (grade >= 0.7) {\n      letter_grades <- c(letter_grades, 'D')\n\
    \    } else if (grade >= 0.0) {\n      letter_grades <- c(letter_grades, 'D-')\n\
    \    } else {\n      letter_grades <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n\
    }\n ", "\n  # if grade is not numeric, you have no hope of doing well\n  if(!is.numeric(grades))\n\
    \    return(NA)\n  \n  # all grades that are NaN will be assigned an 'E'\n  grades[is.na(grades)]\
    \ <- 0\n  \n  letter_grades <- rep(\"\", length(grades))\n  \n  for(i in 1:length(grades))\
    \ {\n    if(grades[i] >= 4.0)\n      letter_grades[i] <- \"A+\"\n    else if(grades[i]\
    \ >= 3.7)\n      letter_grades[i] <- \"A\"\n    else if(grades[i] >= 3.3)\n  \
    \    letter_grades[i] <- \"A-\"\n    else if(grades[i] >= 3.0)\n      letter_grades[i]\
    \ <- \"B+\"\n    else if(grades[i] >= 2.7)\n      letter_grades[i] <- \"B\"\n\
    \    else if(grades[i] >= 2.3)\n      letter_grades[i] <- \"B-\"\n    else if(grades[i]\
    \ >= 2.0)\n      letter_grades[i] <- \"C+\"\n    else if(grades[i] >= 1.7)\n \
    \     letter_grades[i] <- \"C\"\n    else if(grades[i] >= 1.3)\n      letter_grades[i]\
    \ <- \"C-\"\n    else if(grades[i] >= 1.0)\n      letter_grades[i] <- \"D+\"\n\
    \    else if(grades[i] >= 0.7)\n      letter_grades[i] <- \"D\"\n    else if(grades[i]\
    \ >= 0.0)\n      letter_grades[i] <- \"D-\"\n    else\n      letter_grades[i]\
    \ <- \"E\"\n  }\n  \n  return(letter_grades)\n}\n", "\n  grades <- ifelse(grades\
    \ >= 4.0, 'A+', \n                   ifelse(grades >= 3.7, 'A', \n           \
    \               ifelse(grades >= 3.3, 'A-', \n                               \
    \  ifelse(grades >= 3.0, 'B+', \n                                        ifelse(grades\
    \ >= 2.7, 'B', \n                                               ifelse(grades\
    \ >= 2.3, 'B-', \n                                                      ifelse(grades\
    \ >= 2.0, 'C+', \n                                                           \
    \  ifelse(grades >= 1.7, 'C', \n                                             \
    \                       ifelse(grades >= 1.3, 'C-', \n                       \
    \                                                    ifelse(grades >= 1.0, 'D+',\
    \ \n                                                                         \
    \         ifelse(grades >= 0.7, 'D', \n                                      \
    \                                                   ifelse(grades >= 0.0, 'D-',\
    \ 'E')))))))))))))\n  return(grades)\n}", "\n    stopifnot(is.numeric(grades))\n\
    \    grades_string <- ifelse(grades >= 4.0, \"A+\", \n                       \
    \     ifelse(grades >= 3.7, \"A\", \n                                   ifelse(grades\
    \ >= 3.3, \"A-\", \n                                          ifelse(grades >=\
    \ 3.0, \"B+\", \n                                                 ifelse(grades\
    \ >= 2.7, \"B\", \n                                                        ifelse(grades\
    \ >= 2.3, \"B-\", \n                                                         \
    \      ifelse(grades >= 2.0, \"C+\", \n                                      \
    \                                ifelse(grades >= 1.7, \"C\", \n             \
    \                                                                ifelse(grades\
    \ >= 1.3, \"C-\", \n                                                         \
    \                           ifelse(grades >= 1.0, \"D+\", \n                 \
    \                                                                          ifelse(grades\
    \ >= 0.7, \"D\", \n                                                          \
    \                                        ifelse(grades >= 0.0, \"D-\", \n    \
    \                                                                            \
    \                         ifelse(grades >= 0.0, \"E\", NA))))))))))))))\n    grades_string\n\
    }\n", "\n    grade_letter <- vector()\n    for (grade in grades) {\n        if\
    \ (grade >= 4.0) {\n            grade_letter <- c(grade_letter, 'A+')\n      \
    \  } else if (grade > 3.7) {\n            grade_letter <- c(grade_letter, 'A')\n\
    \        } else if (grade > 3.3) {\n            grade_letter <- c(grade_letter,\
    \ 'A-')\n        } else if (grade > 3.0) {\n            grade_letter <- c(grade_letter,\
    \ 'B+')\n        } else if (grade > 2.7) {\n            grade_letter <- c(grade_letter,\
    \ 'B')\n        } else if (grade > 2.3) {\n            grade_letter <- c(grade_letter,\
    \ 'B-')\n        } else if (grade > 2.0) {\n            grade_letter <- c(grade_letter,\
    \ 'C+')\n        } else if (grade > 1.7) {\n            grade_letter <- c(grade_letter,\
    \ 'C')\n        } else if (grade > 1.3) {\n            grade_letter <- c(grade_letter,\
    \ 'C-')\n        } else if (grade > 1.0) {\n            grade_letter <- c(grade_letter,\
    \ 'D+')\n        } else if (grade > 0.7) {\n            grade_letter <- c(grade_letter,\
    \ 'D')\n        } else if (grade > 0.0) {\n            grade_letter <- c(grade_letter,\
    \ 'D-')\n        } else {\n            grade_letter <- c(grade_letter, 'E')\n\
    \        }\n    }\n    return(grade_letter)\n}\n", "\n    grade_list <- grades\n\
    \    grade_list[grade_list >= 4.0] <- 'A+'\n    grade_list[grade_list >= 3.7 &\
    \ grade_list < 4.0] <- 'A'\n    grade_list[grade_list >= 3.3 & grade_list < 3.7]\
    \ <- 'A-'\n    grade_list[grade_list >= 3.0 & grade_list < 3.3] <- 'B+'\n    grade_list[grade_list\
    \ >= 2.7 & grade_list < 3.0] <- 'B'\n    grade_list[grade_list >= 2.3 & grade_list\
    \ < 2.7] <- 'B-'\n    grade_list[grade_list >= 2.0 & grade_list < 2.3] <- 'C+'\n\
    \    grade_list[grade_list >= 1.7 & grade_list < 2.0] <- 'C'\n    grade_list[grade_list\
    \ >= 1.3 & grade_list < 1.7] <- 'C-'\n    grade_list[grade_list >= 1.0 & grade_list\
    \ < 1.3] <- 'D+'\n    grade_list[grade_list >= 0.7 & grade_list < 1.0] <- 'D'\n\
    \    grade_list[grade_list >= 0.0 & grade_list < 0.7] <- 'D-'\n    grade_list[grade_list\
    \ == 0.0] <- 'E'\n    grade_list\n}", "\n  letter_grades <- c(\"E\", \"D-\", \"\
    D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"\
    )\n  return(letter_grades[(grades*10 - 9)])\n}\n", "\n  grades$letter_grade <-\
    \ ifelse(grades$GPA == 4.0, 'A+',\n    ifelse(grades$GPA > 3.7, 'A',\n      ifelse(grades$GPA\
    \ > 3.3, 'A-',\n        ifelse(grades$GPA > 3.0, 'B+',\n          ifelse(grades$GPA\
    \ > 2.7, 'B',\n            ifelse(grades$GPA > 2.3, 'B-',\n              ifelse(grades$GPA\
    \ > 2.0, 'C+',\n                ifelse(grades$GPA > 1.7, 'C',\n              \
    \    ifelse(grades$GPA > 1.3, 'C-',\n                    ifelse(grades$GPA > 1.0,\
    \ 'D+',\n                      ifelse(grades$GPA > 0.7, 'D',\n               \
    \         ifelse(grades$GPA > 0.0, 'D-', 'E'))))))))))))\n  grades$letter_grade\n\
    }", "\n  ## Your code goes here\n  ## Start by defining a function\n  num_to_letter\
    \ <- function(grade) {\n    if (grade > 4.0) {\n      return(\"A+\")\n    } else\
    \ if (grade > 3.7) {\n      return(\"A\")\n    } else if (grade > 3.3) {\n   \
    \   return(\"A-\")\n    } else if (grade > 3.0) {\n      return(\"B+\")\n    }\
    \ else if (grade > 2.7) {\n      return(\"B\")\n    } else if (grade > 2.3) {\n\
    \      return(\"B-\")\n    } else if (grade > 2.0) {\n      return(\"C+\")\n \
    \   } else if (grade > 1.7) {\n      return(\"C\")\n    } else if (grade > 1.3)\
    \ {\n      return(\"C-\")\n    } else if (grade > 1.0) {\n      return(\"D+\"\
    )\n    } else if (grade > 0.7) {\n      return(\"D\")\n    } else if (grade >\
    \ 0.0) {\n      return(\"D-\")\n    } else {\n      return(\"E\")\n    }\n  }\n\
    \  return(sapply(grades, num_to_letter))\n}\nnumerical_letter_grade(c(4.0, 3,\
    \ 1.7, 2, 3.5))\n", "\n  res <- c()\n  for (g in grades) {\n    if (g > 4.0) {\n\
    \      res <- c(res, 'A+')\n    } else if (g > 3.7) {\n      res <- c(res, 'A')\n\
    \    } else if (g > 3.3) {\n      res <- c(res, 'A-')\n    } else if (g > 3.0)\
    \ {\n      res <- c(res, 'B+')\n    } else if (g > 2.7) {\n      res <- c(res,\
    \ 'B')\n    } else if (g > 2.3) {\n      res <- c(res, 'B-')\n    } else if (g\
    \ > 2.0) {\n      res <- c(res, 'C+')\n    } else if (g > 1.7) {\n      res <-\
    \ c(res, 'C')\n    } else if (g > 1.3) {\n      res <- c(res, 'C-')\n    } else\
    \ if (g > 1.0) {\n      res <- c(res, 'D+')\n    } else if (g > 0.7) {\n     \
    \ res <- c(res, 'D')\n    } else if (g > 0.0) {\n      res <- c(res, 'D-')\n \
    \   } else {\n      res <- c(res, 'E')\n    }\n  }\n  return(res)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n    gpa_grade <- function(x) {\n        if (x == 4.0)\
    \ {\n            return(\"A+\")\n        } else if (x > 3.7) {\n            return(\"\
    A\")\n        } else if (x > 3.3) {\n            return(\"A-\")\n        } else\
    \ if (x > 3.0) {\n            return(\"B+\")\n        } else if (x > 2.7) {\n\
    \            return(\"B\")\n        } else if (x > 2.3) {\n            return(\"\
    B-\")\n        } else if (x > 2.0) {\n            return(\"C+\")\n        } else\
    \ if (x > 1.7) {\n            return(\"C\")\n        } else if (x > 1.3) {\n \
    \           return(\"C-\")\n        } else if (x > 1.0) {\n            return(\"\
    D+\")\n        } else if (x > 0.7) {\n            return(\"D\")\n        } else\
    \ if (x > 0.0) {\n            return(\"D-\")\n        } else {\n            return(\"\
    E\")\n        }\n    }\n    return(sapply(grades, gpa_grade))\n}\n", "\n    letter_grades\
    \ <- c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"\
    D+\", \"D\", \"D-\", \"E\")\n    grade_levels <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n    y <- as.numeric(grades)\n    res <-\
    \ vector(\"character\", length(y))\n    i <- 1\n    while (i <= length(y)) {\n\
    \        if (y[i] > 4.0) {\n            res[i] <- letter_grades[1]\n        }\
    \ else {\n            j <- 1\n            while (j <= length(grade_levels)) {\n\
    \                if (y[i] > grade_levels[j]) {\n                    res[i] <-\
    \ letter_grades[j]\n                    break\n                }\n           \
    \     j <- j + 1\n            }\n        }\n        i <- i + 1\n    }\n    return(res)\n\
    }\n\nnumerical_letter_grade <- function(grades) {\n    grade_levels <- c(0.0,\
    \ 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0)\n    letter_grades <-\
    \ c(\"E\", \"D-\", \"D+\", \"D\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\"\
    , \"A-\", \"A\")\n    z <- as.numeric(grades)\n    res <- vector(\"character\"\
    , length(z))\n    i <- 1\n    while (i <= length(z)) {\n        if (z[i] > 4.0)\
    \ {\n            res[i] <- letter_grades[12]\n        } else {\n            j\
    \ <- 1\n            while (j <= length(grade_levels)) {\n                if (z[i]\
    \ >= grade_levels[j]) {\n                    res[i] <- letter_grades[j]\n    \
    \                break", "\n  grades_len <- length(grades)\n  if (grades_len <=\
    \ 0) {\n    return(c())\n  }\n  grades <- as.numeric(grades)\n  letter_grades\
    \ <- c()\n  for (i in 1:grades_len) {\n    if (grades[i] >= 4.0) {\n      letter_grades\
    \ <- c(letter_grades, 'A+')\n    } else if (grades[i] >= 3.7) {\n      letter_grades\
    \ <- c(letter_grades, 'A')\n    } else if (grades[i] >= 3.3) {\n      letter_grades\
    \ <- c(letter_grades, 'A-')\n    } else if (grades[i] >= 3.0) {\n      letter_grades\
    \ <- c(letter_grades, 'B+')\n    } else if (grades[i] >= 2.7) {\n      letter_grades\
    \ <- c(letter_grades, 'B')\n    } else if (grades[i] >= 2.3) {\n      letter_grades\
    \ <- c(letter_grades, 'B-')\n    } else if (grades[i] >= 2.0) {\n      letter_grades\
    \ <- c(letter_grades, 'C+')\n    } else if (grades[i] >= 1.7) {\n      letter_grades\
    \ <- c(letter_grades, 'C')\n    } else if (grades[i] >= 1.3) {\n      letter_grades\
    \ <- c(letter_grades, 'C-')\n    } else if (grades[i] >= 1.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D+')\n    } else if (grades[i] >= 0.7) {\n      letter_grades\
    \ <- c(letter_grades, 'D')\n    } else if (grades[i] >= 0.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D-')\n    } else {\n      letter_grades <- c(letter_grades,\
    \ 'E')\n    }\n  }\n  return(letter_grades)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n    # str_c is the function used to put the strings\
    \ together\n    # str_c means string concatenate\n    grades <- str_c(grades,\
    \ collapse = ' ')\n    # Use the regular expression pattern to put the grades\
    \ into a vector\n    grade_vector <- str_extract_all(grades, pattern = '\\\\d')\n\
    \    # Create a variable called grades that contains the grades as a vector of\
    \ \n    # numeric values\n    grades <- str_c(grade_vector, collapse = ' ')\n\
    \    grades <- str_split(grades, ' ')\n    grades <- unlist(grades)\n    grades\
    \ <- as.numeric(grades)\n    # Create a variable called letter_grades to store\
    \ the letter grades\n    letter_grades <- character(length(grades))\n    for (i\
    \ in 1:length(grades)) {\n        if (grades[i] == 4.0) {\n            letter_grades[i]\
    \ <- 'A+'\n        } else if (grades[i] > 3.7) {\n            letter_grades[i]\
    \ <- 'A'\n        } else if (grades[i] > 3.3) {\n            letter_grades[i]\
    \ <- 'A-'\n        } else if (grades[i] > 3.0) {\n            letter_grades[i]\
    \ <- 'B+'\n        } else if (grades[i] > 2.7) {\n            letter_grades[i]\
    \ <- 'B'\n        } else if (grades[i] > 2.3) {\n            letter_grades[i]\
    \ <- 'B-'\n        } else if (grades[i] > 2.0) {\n            letter_grades[i]\
    \ <- 'C+'\n        } else if (grades[i] > 1.7) {\n            letter_grades[i]\
    \ <- 'C'\n        } else if (grades[i] > 1.3) {\n            letter_grades[i]\
    \ <- 'C-'\n        } else if (grades[i] > 1.0) {\n            letter_grades[i]\
    \ <- 'D+'\n        } else if (grades[i] > 0.7) {\n            letter_grades[i]\
    \ <- 'D'\n        } else if (grades[i] > 0", "\n  grades_numeric <- sapply(grades,\
    \ as.numeric)\n  letter_grades <- sapply(grades_numeric, function(gpa) {\n   \
    \ if (gpa >= 4.0) {\n      return('A+')\n    } else if (gpa >= 3.7) {\n      return('A')\n\
    \    } else if (gpa >= 3.3) {\n      return('A-')\n    } else if (gpa >= 3.0)\
    \ {\n      return('B+')\n    } else if (gpa >= 2.7) {\n      return('B')\n   \
    \ } else if (gpa >= 2.3) {\n      return('B-')\n    } else if (gpa >= 2.0) {\n\
    \      return('C+')\n    } else if (gpa >= 1.7) {\n      return('C')\n    } else\
    \ if (gpa >= 1.3) {\n      return('C-')\n    } else if (gpa >= 1.0) {\n      return('D+')\n\
    \    } else if (gpa >= 0.7) {\n      return('D')\n    } else if (gpa >= 0.0) {\n\
    \      return('D-')\n    } else {\n      return('E')\n    }\n  })\n  return(letter_grades)\n\
    }", "\n  return(ifelse(grades == 4.0, 'A+',\n                ifelse(grades > 3.7,\
    \ 'A',\n                       ifelse(grades > 3.3, 'A-',\n                  \
    \            ifelse(grades > 3.0, 'B+',\n                                    \
    \ ifelse(grades > 2.7, 'B',\n                                            ifelse(grades\
    \ > 2.3, 'B-',\n                                                   ifelse(grades\
    \ > 2.0, 'C+',\n                                                          ifelse(grades\
    \ > 1.7, 'C',\n                                                              \
    \   ifelse(grades > 1.3, 'C-',\n                                             \
    \                           ifelse(grades > 1.0, 'D+',\n                     \
    \                                                          ifelse(grades > 0.7,\
    \ 'D',\n                                                                     \
    \                 ifelse(grades > 0.0, 'D-',\n                               \
    \                                                              ifelse(grades ==\
    \ 0.0, 'E',\n                                                                \
    \                                    NA))))))))))))))\n}\n", "\n  grade_list <-\
    \ c()\n  for (i in 1:length(grades)) {\n    if (grades[i] == 4.0) {\n      grade_list\
    \ <- c(grade_list, 'A+')\n    } else if (grades[i] > 3.7) {\n      grade_list\
    \ <- c(grade_list, 'A')\n    } else if (grades[i] > 3.3) {\n      grade_list <-\
    \ c(grade_list, 'A-')\n    } else if (grades[i] > 3.0) {\n      grade_list <-\
    \ c(grade_list, 'B+')\n    } else if (grades[i] > 2.7) {\n      grade_list <-\
    \ c(grade_list, 'B')\n    } else if (grades[i] > 2.3) {\n      grade_list <- c(grade_list,\
    \ 'B-')\n    } else if (grades[i] > 2.0) {\n      grade_list <- c(grade_list,\
    \ 'C+')\n    } else if (grades[i] > 1.7) {\n      grade_list <- c(grade_list,\
    \ 'C')\n    } else if (grades[i] > 1.3) {\n      grade_list <- c(grade_list, 'C-')\n\
    \    } else if (grades[i] > 1.0) {\n      grade_list <- c(grade_list, 'D+')\n\
    \    } else if (grades[i] > 0.7) {\n      grade_list <- c(grade_list, 'D')\n \
    \   } else if (grades[i] > 0.0) {\n      grade_list <- c(grade_list, 'D-')\n \
    \   } else {\n      grade_list <- c(grade_list, 'E')\n    }\n  }\n  return(grade_list)\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  for (grade in grades)\
    \ {\n    print(grade)\n    if (grade == 4.0) {\n      print('A+')\n    } else\
    \ if (grade > 3.7) {\n      print('A')\n    } else if (grade > 3.3) {\n      print('A-')\n\
    \    } else if (grade > 3.0) {\n      print('B+')\n    } else if (grade > 2.7)\
    \ {\n      print('B')\n    } else if (grade > 2.3) {\n      print('B-')\n    }\
    \ else if (grade > 2.0) {\n      print('C+')\n    } else if (grade > 1.7) {\n\
    \      print('C')\n    } else if (grade > 1.3) {\n      print('C-')\n    } else\
    \ if (grade > 1.0) {\n      print('D+')\n    } else if (grade > 0.7) {\n     \
    \ print('D')\n    } else if (grade > 0.0) {\n      print('D-')\n    } else {\n\
    \      print('E')\n    }\n  }\n}\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n",
  "\n  if (grades == 0) {\n    return(\"E\")\n  } else if (grades >= 4.0) {\n    return(\"\
    A+\")\n  } else if (grades >= 3.7) {\n    return(\"A\")\n  } else if (grades >=\
    \ 3.3) {\n    return(\"A-\")\n  } else if (grades >= 3.0) {\n    return(\"B+\"\
    )\n  } else if (grades >= 2.7) {\n    return(\"B\")\n  } else if (grades >= 2.3)\
    \ {\n    return(\"B-\")\n  } else if (grades >= 2.0) {\n    return(\"C+\")\n \
    \ } else if (grades >= 1.7) {\n    return(\"C\")\n  } else if (grades >= 1.3)\
    \ {\n    return(\"C-\")\n  } else if (grades >= 1.0) {\n    return(\"D+\")\n \
    \ } else if (grades >= 0.7) {\n    return(\"D\")\n  } else if (grades >= 0.0)\
    \ {\n    return(\"D-\")\n  }\n}\n\ngrades <- c(4.0, 3, 1.7, 2, 3.5)\nnumerical_letter_grade(grades)\n",
  "\n    if (grades >= 4.0) {\n        letter_grade <- \"A+\"\n    } else if (grades\
    \ >= 3.7) {\n        letter_grade <- \"A\"\n    } else if (grades >= 3.3) {\n\
    \        letter_grade <- \"A-\"\n    } else if (grades >= 3.0) {\n        letter_grade\
    \ <- \"B+\"\n    } else if (grades >= 2.7) {\n        letter_grade <- \"B\"\n\
    \    } else if (grades >= 2.3) {\n        letter_grade <- \"B-\"\n    } else if\
    \ (grades >= 2.0) {\n        letter_grade <- \"C+\"\n    } else if (grades >=\
    \ 1.7) {\n        letter_grade <- \"C\"\n    } else if (grades >= 1.3) {\n   \
    \     letter_grade <- \"C-\"\n    } else if (grades >= 1.0) {\n        letter_grade\
    \ <- \"D+\"\n    } else if (grades >= 0.7) {\n        letter_grade <- \"D\"\n\
    \    } else if (grades >= 0.0) {\n        letter_grade <- \"D-\"\n    } else {\n\
    \        letter_grade <- \"E\"\n    }\n    return(letter_grade)\n}\n\ngrade_equation\
    \ <- function(gpa) {\n    for (i in 1:length(gpa)) {\n        letter_grade[i]\
    \ <- numerical_letter_grade(gpa[i])\n    }\n    return(letter_grade)\n}", "\n\t\
    #Solution:\n  grades <- round(grades,1)\n  grades[grades < 1.0] <- 0.0\n  grades[grades\
    \ > 4.0] <- 4.0\n  grades <- grades*10\n  grades <- grades %/% 7\n  grades <-\
    \ grades*7\n  grades <- grades/10\n  grades[grades == 4.0] <- 'A+'\n  grades[grades\
    \ >= 3.7] <- 'A'\n  grades[grades >= 3.3] <- 'A-'\n  grades[grades >= 3.0] <-\
    \ 'B+'\n  grades[grades >= 2.7] <- 'B'\n  grades[grades >= 2.3] <- 'B-'\n  grades[grades\
    \ >= 2.0] <- 'C+'\n  grades[grades >= 1.7] <- 'C'\n  grades[grades >= 1.3] <-\
    \ 'C-'\n  grades[grades >= 1.0] <- 'D+'\n  grades[grades >= 0.7] <- 'D'\n  grades[grades\
    \ >= 0.0] <- 'D-'\n  grades[grades == 0.0] <- 'E'\n  return(grades)\n}\n", "\n\
    \  ifelse(grades >= 4.0, 'A+',\n  ifelse(grades >= 3.7, 'A',\n  ifelse(grades\
    \ >= 3.3, 'A-',\n  ifelse(grades >= 3.0, 'B+',\n  ifelse(grades >= 2.7, 'B',\n\
    \  ifelse(grades >= 2.3, 'B-',\n  ifelse(grades >= 2.0, 'C+',\n  ifelse(grades\
    \ >= 1.7, 'C',\n  ifelse(grades >= 1.3, 'C-',\n  ifelse(grades >= 1.0, 'D+',\n\
    \  ifelse(grades >= 0.7, 'D',\n  ifelse(grades >= 0.0, 'D-',\n  ifelse(grades\
    \ >= 0.0, 'E', 'F'))))))))))))))\n}\n", "\n  # Write a function that given a vector\
    \ of grades, outputs a\n  # vector of letter grades.\n  grades_list <- list()\n\
    \  grades_list[['4.0']] <- 'A+'\n  grades_list[['3.7']] <- 'A'\n  grades_list[['3.3']]\
    \ <- 'A-'\n  grades_list[['3.0']] <- 'B+'\n  grades_list[['2.7']] <- 'B'\n  grades_list[['2.3']]\
    \ <- 'B-'\n  grades_list[['2.0']] <- 'C+'\n  grades_list[['1.7']] <- 'C'\n  grades_list[['1.3']]\
    \ <- 'C-'\n  grades_list[['1.0']] <- 'D+'\n  grades_list[['0.7']] <- 'D'\n  grades_list[['0.0']]\
    \ <- 'D-'\n  grades_list[['-1']] <- 'E'\n  letter_grades <- list()\n  for (grade\
    \ in grades) {\n    for (key in grades_list) {\n      if (grade >= as.numeric(key))\
    \ {\n        letter_grades <- c(letter_grades, grades_list[key])\n        break\n\
    \      }\n    }\n  }\n  return(letter_grades)\n}\n", "\n    letters <- c('A+',\
    \ 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n    grade_points\
    \ <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n    cut(grades,\
    \ breaks = grade_points, labels = letters)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  letter_grades <- c()\n  for (i in grades) {\n    if\
    \ (i > 4.0) {\n      i = 4.0\n    }\n    if (i >= 3.7) {\n      letter_grades\
    \ <- c(letter_grades, 'A')\n    } else if (i >= 3.3) {\n      letter_grades <-\
    \ c(letter_grades, 'A-')\n    } else if (i >= 3.0) {\n      letter_grades <- c(letter_grades,\
    \ 'B+')\n    } else if (i >= 2.7) {\n      letter_grades <- c(letter_grades, 'B')\n\
    \    } else if (i >= 2.3) {\n      letter_grades <- c(letter_grades, 'B-')\n \
    \   } else if (i >= 2.0) {\n      letter_grades <- c(letter_grades, 'C+')\n  \
    \  } else if (i >= 1.7) {\n      letter_grades <- c(letter_grades, 'C')\n    }\
    \ else if (i >= 1.3) {\n      letter_grades <- c(letter_grades, 'C-')\n    } else\
    \ if (i >= 1.0) {\n      letter_grades <- c(letter_grades, 'D+')\n    } else if\
    \ (i >= 0.7) {\n      letter_grades <- c(letter_grades, 'D')\n    } else if (i\
    \ >= 0.0) {\n      letter_grades <- c(letter_grades, 'D-')\n    } else {\n   \
    \   letter_grades <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n\
    }\n", "\n  \n  # Your code goes here\n  \n}\n", "\n  letters <- c()\n  for (g\
    \ in grades) {\n    if (g >= 4.0) {\n      letters <- c(letters, 'A+')\n    }\
    \ else if (g >= 3.7) {\n      letters <- c(letters, 'A')\n    } else if (g >=\
    \ 3.3) {\n      letters <- c(letters, 'A-')\n    } else if (g >= 3.0) {\n    \
    \  letters <- c(letters, 'B+')\n    } else if (g >= 2.7) {\n      letters <- c(letters,\
    \ 'B')\n    } else if (g >= 2.3) {\n      letters <- c(letters, 'B-')\n    } else\
    \ if (g >= 2.0) {\n      letters <- c(letters, 'C+')\n    } else if (g >= 1.7)\
    \ {\n      letters <- c(letters, 'C')\n    } else if (g >= 1.3) {\n      letters\
    \ <- c(letters, 'C-')\n    } else if (g >= 1.0) {\n      letters <- c(letters,\
    \ 'D+')\n    } else if (g >= 0.7) {\n      letters <- c(letters, 'D')\n    } else\
    \ if (g >= 0.0) {\n      letters <- c(letters, 'D-')\n    } else {\n      letters\
    \ <- c(letters, 'E')\n    }\n  }\n  return(letters)\n}\n\nnumerical_letter_grade\
    \ <- function(grades) {\n  letter_grades <- c('A+', 'A', 'A-', 'B+', 'B', 'B-',\
    \ 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n  thresholds <- c(4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -Inf)\n  index <- 1\n  letters <- c()\n\
    \  for (g in grades) {\n    while (g < thresholds[index]) {\n      index <- index\
    \ + 1\n    }\n    letters <- c", "\n  letter_grades <- c()\n  for (grade in grades)\
    \ {\n    if (grade >= 4.0) {\n      letter_grades <- c(letter_grades, 'A+')\n\
    \    } else if (grade >= 3.7) {\n      letter_grades <- c(letter_grades, 'A')\n\
    \    } else if (grade >= 3.3) {\n      letter_grades <- c(letter_grades, 'A-')\n\
    \    } else if (grade >= 3.0) {\n      letter_grades <- c(letter_grades, 'B+')\n\
    \    } else if (grade >= 2.7) {\n      letter_grades <- c(letter_grades, 'B')\n\
    \    } else if (grade >= 2.3) {\n      letter_grades <- c(letter_grades, 'B-')\n\
    \    } else if (grade >= 2.0) {\n      letter_grades <- c(letter_grades, 'C+')\n\
    \    } else if (grade >= 1.7) {\n      letter_grades <- c(letter_grades, 'C')\n\
    \    } else if (grade >= 1.3) {\n      letter_grades <- c(letter_grades, 'C-')\n\
    \    } else if (grade >= 1.0) {\n      letter_grades <- c(letter_grades, 'D+')\n\
    \    } else if (grade >= 0.7) {\n      letter_grades <- c(letter_grades, 'D')\n\
    \    } else if (grade >= 0.0) {\n      letter_grades <- c(letter_grades, 'D-')\n\
    \    } else {\n      letter_grades <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n\
    }\n\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  ## Your code here\n\
    }\n", "\n  ifelse(grades > 3.7, 'A+',\n         ifelse(grades > 3.3, 'A',\n  \
    \              ifelse(grades > 3.0, 'A-',\n                       ifelse(grades\
    \ > 2.7, 'B+',\n                              ifelse(grades > 2.3, 'B',\n    \
    \                                 ifelse(grades > 2.0, 'B-',\n               \
    \                             ifelse(grades > 1.7, 'C+',\n                   \
    \                                ifelse(grades > 1.3, 'C',\n                 \
    \                                         ifelse(grades > 1.0, 'C-',\n       \
    \                                                          ifelse(grades > 0.7,\
    \ 'D+',\n                                                                    \
    \    ifelse(grades > 0.0, 'D',\n                                             \
    \                                  ifelse(grades == 0.0, 'E', 'NA'))))))))))))\n\
    }\n", "\n  lettergrade <- rep(\"\", length(grades))\n  for (i in 1:length(grades))\
    \ {\n    grade <- grades[i]\n    if (grade >= 4.0) {\n      lettergrade[i] <-\
    \ \"A+\"\n    } else if (grade >= 3.7) {\n      lettergrade[i] <- \"A\"\n    }\
    \ else if (grade >= 3.3) {\n      lettergrade[i] <- \"A-\"\n    } else if (grade\
    \ >= 3.0) {\n      lettergrade[i] <- \"B+\"\n    } else if (grade >= 2.7) {\n\
    \      lettergrade[i] <- \"B\"\n    } else if (grade >= 2.3) {\n      lettergrade[i]\
    \ <- \"B-\"\n    } else if (grade >= 2.0) {\n      lettergrade[i] <- \"C+\"\n\
    \    } else if (grade >= 1.7) {\n      lettergrade[i] <- \"C\"\n    } else if\
    \ (grade >= 1.3) {\n      lettergrade[i] <- \"C-\"\n    } else if (grade >= 1.0)\
    \ {\n      lettergrade[i] <- \"D+\"\n    } else if (grade >= 0.7) {\n      lettergrade[i]\
    \ <- \"D\"\n    } else if (grade >= 0.0) {\n      lettergrade[i] <- \"D-\"\n \
    \   } else {\n      lettergrade[i] <- \"E\"\n    }\n  }\n  return(lettergrade)\n\
    }\n\ngrade_equation <- function(grades) {\n  return(numerical_letter_grade(grades))\n\
    }\n\ngrade_equation(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  letter <- vector(mode = \"\
    character\", length = length(grades))\n  for (i in 1:length(grades)) {\n    if\
    \ (grades[i] > 4.0 || grades[i] < 0.0) {\n      letter[i] <- \"E\"\n    } else\
    \ if (grades[i] > 3.7) {\n      letter[i] <- \"A+\"\n    } else if (grades[i]\
    \ > 3.3) {\n      letter[i] <- \"A\"\n    } else if (grades[i] > 3.0) {\n    \
    \  letter[i] <- \"A-\"\n    } else if (grades[i] > 2.7) {\n      letter[i] <-\
    \ \"B+\"\n    } else if (grades[i] > 2.3) {\n      letter[i] <- \"B\"\n    } else\
    \ if (grades[i] > 2.0) {\n      letter[i] <- \"B-\"\n    } else if (grades[i]\
    \ > 1.7) {\n      letter[i] <- \"C+\"\n    } else if (grades[i] > 1.3) {\n   \
    \   letter[i] <- \"C\"\n    } else if (grades[i] > 1.0) {\n      letter[i] <-\
    \ \"C-\"\n    } else if (grades[i] > 0.7) {\n      letter[i] <- \"D+\"\n    }\
    \ else if (grades[i] > 0.0) {\n      letter[i] <- \"D\"\n    } else {\n      letter[i]\
    \ <- \"D-\"\n    }\n  }\n  return(letter)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  grades_letter <- list()\n  for (item in grades) {\n\
    \    if (item >= 4.0) {\n      grades_letter <- c(grades_letter, 'A+')\n    }\
    \ else if (item >= 3.7) {\n      grades_letter <- c(grades_letter, 'A')\n    }\
    \ else if (item >= 3.3) {\n      grades_letter <- c(grades_letter, 'A-')\n   \
    \ } else if (item >= 3.0) {\n      grades_letter <- c(grades_letter, 'B+')\n \
    \   } else if (item >= 2.7) {\n      grades_letter <- c(grades_letter, 'B')\n\
    \    } else if (item >= 2.3) {\n      grades_letter <- c(grades_letter, 'B-')\n\
    \    } else if (item >= 2.0) {\n      grades_letter <- c(grades_letter, 'C+')\n\
    \    } else if (item >= 1.7) {\n      grades_letter <- c(grades_letter, 'C')\n\
    \    } else if (item >= 1.3) {\n      grades_letter <- c(grades_letter, 'C-')\n\
    \    } else if (item >= 1.0) {\n      grades_letter <- c(grades_letter, 'D+')\n\
    \    } else if (item >= 0.7) {\n      grades_letter <- c(grades_letter, 'D')\n\
    \    } else if (item >= 0.0) {\n      grades_letter <- c(grades_letter, 'D-')\n\
    \    } else {\n      grades_letter <- c(grades_letter, 'E')\n    }\n  }\n  return(grades_letter)\n\
    }\n", "\n  letter_grade <- character(length(grades))\n  for (i in 1:length(grades))\
    \ {\n    # Test the grades one by one\n    if (grades[i] >= 4.0) {\n      letter_grade[i]\
    \ <- 'A+'\n    } else if (grades[i] >= 3.7) {\n      letter_grade[i] <- 'A'\n\
    \    } else if (grades[i] >= 3.3) {\n      letter_grade[i] <- 'A-'\n    } else\
    \ if (grades[i] >= 3.0) {\n      letter_grade[i] <- 'B+'\n    } else if (grades[i]\
    \ >= 2.7) {\n      letter_grade[i] <- 'B'\n    } else if (grades[i] >= 2.3) {\n\
    \      letter_grade[i] <- 'B-'\n    } else if (grades[i] >= 2.0) {\n      letter_grade[i]\
    \ <- 'C+'\n    } else if (grades[i] >= 1.7) {\n      letter_grade[i] <- 'C'\n\
    \    } else if (grades[i] >= 1.3) {\n      letter_grade[i] <- 'C-'\n    } else\
    \ if (grades[i] >= 1.0) {\n      letter_grade[i] <- 'D+'\n    } else if (grades[i]\
    \ >= 0.7) {\n      letter_grade[i] <- 'D'\n    } else if (grades[i] >= 0.0) {\n\
    \      letter_grade[i] <- 'D-'\n    } else {\n      letter_grade[i] <- 'E'\n \
    \   }\n  }\n  return(letter_grade)\n}\n", "\n  letter_grades <- rep(\"\", length(grades))\n\
    \  for (i in 1:length(grades)) {\n    if (grades[i] >= 4.0) {\n      letter_grades[i]\
    \ <- \"A+\"\n    } else if (grades[i] >= 3.7) {\n      letter_grades[i] <- \"\
    A\"\n    } else if (grades[i] >= 3.3) {\n      letter_grades[i] <- \"A-\"\n  \
    \  } else if (grades[i] >= 3.0) {\n      letter_grades[i] <- \"B+\"\n    } else\
    \ if (grades[i] >= 2.7) {\n      letter_grades[i] <- \"B\"\n    } else if (grades[i]\
    \ >= 2.3) {\n      letter_grades[i] <- \"B-\"\n    } else if (grades[i] >= 2.0)\
    \ {\n      letter_grades[i] <- \"C+\"\n    } else if (grades[i] >= 1.7) {\n  \
    \    letter_grades[i] <- \"C\"\n    } else if (grades[i] >= 1.3) {\n      letter_grades[i]\
    \ <- \"C-\"\n    } else if (grades[i] >= 1.0) {\n      letter_grades[i] <- \"\
    D+\"\n    } else if (grades[i] >= 0.7) {\n      letter_grades[i] <- \"D\"\n  \
    \  } else if (grades[i] >= 0.0) {\n      letter_grades[i] <- \"D-\"\n    } else\
    \ {\n      letter_grades[i] <- \"E\"\n    }\n  }\n  return(letter_grades)\n}\n\
    \nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  letters <- c('A+', 'A',\
    \ 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n  ifelse(grades\
    \ >= 4.0, letters[1],\n        ifelse(grades >= 3.7, letters[2],\n        ifelse(grades\
    \ >= 3.3, letters[3],\n        ifelse(grades >= 3.0, letters[4],\n        ifelse(grades\
    \ >= 2.7, letters[5],\n        ifelse(grades >= 2.3, letters[6],\n        ifelse(grades\
    \ >= 2.0, letters[7],\n        ifelse(grades >= 1.7, letters[8],\n        ifelse(grades\
    \ >= 1.3, letters[9],\n        ifelse(grades >= 1.0, letters[10],\n        ifelse(grades\
    \ >= 0.7, letters[11],\n        ifelse(grades >= 0.0, letters[12], letters[13]))))))))))))\n\
    }\n ", "\n  # Let's use mutate to make a new column called Letter_Grade\n  grades\
    \ <- grades %>% mutate(Letter_Grade = case_when(\n    GPA >= 4.0 ~ \"A+\",\n \
    \   GPA >= 3.7 ~ \"A\",\n    GPA >= 3.3 ~ \"A-\",\n    GPA >= 3.0 ~ \"B+\",\n\
    \    GPA >= 2.7 ~ \"B\",\n    GPA >= 2.3 ~ \"B-\",\n    GPA >= 2.0 ~ \"C+\",\n\
    \    GPA >= 1.7 ~ \"C\",\n    GPA >= 1.3 ~ \"C-\",\n    GPA >= 1.0 ~ \"D+\",\n\
    \    GPA >= 0.7 ~ \"D\",\n    GPA >= 0.0 ~ \"D-\",\n    TRUE ~ \"E\"\n  ))\n \
    \ # return just the letter grades\n  return(grades$Letter_Grade)\n}\n", "\n  \
    \  # WRITE YOUR CODE HERE\n    \n    letter <- c(\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n    boundary\
    \ <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n    grades[grades\
    \ < 0] <- 0\n    output <- c()\n    for (i in 1:length(grades)) {\n        for\
    \ (j in 1:length(boundary)) {\n            if (grades[i] >= boundary[j]) {\n \
    \               output <- c(output, letter[j])\n                break\n      \
    \      }\n        }\n    }\n    return(output)\n}\n\n\ngrades <- c(4.0, 3, 1.7,\
    \ 2, 3.5)\nnumerical_letter_grade(grades)\n", "\n    grades = floor(grades)\n\
    \    grades = cut(grades, c(0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7,\
    \ 4.0, Inf), \n                 include.lowest = TRUE,\n                 labels\
    \ = c('D-', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'))\n    return(grades)\n\
    }\n\ngrades = c(4.0, 3, 1.7, 2, 3.5)\nnumerical_letter_grade(grades)\n", "\n \
    \   letter_grade <- c()\n    for (i in 1:length(grades)) {\n        if (grades[i]\
    \ >= 4.0) {\n            letter_grade[i] <- 'A+'\n        } else if (grades[i]\
    \ >= 3.7) {\n            letter_grade[i] <- 'A'\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grade[i] <- 'A-'\n        } else if (grades[i]\
    \ >= 3.0) {\n            letter_grade[i] <- 'B+'\n        } else if (grades[i]\
    \ >= 2.7) {\n            letter_grade[i] <- 'B'\n        } else if (grades[i]\
    \ >= 2.3) {\n            letter_grade[i] <- 'B-'\n        } else if (grades[i]\
    \ >= 2.0) {\n            letter_grade[i] <- 'C+'\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grade[i] <- 'C'\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grade[i] <- 'C-'\n        } else if (grades[i]\
    \ >= 1.0) {\n            letter_grade[i] <- 'D+'\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grade[i] <- 'D'\n        } else if (grades[i]\
    \ >= 0.0) {\n            letter_grade[i] <- 'D-'\n        } else {\n         \
    \   letter_grade[i] <- 'E'\n        }\n    }\n    return(letter_grade)\n}\n",
  "\n  ### \n  ### YOUR CODE HERE\n  ###\n}\n", "\n    letters <- c('A+', 'A', 'A-',\
    \ 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n    numerical_grades\
    \ <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n    for\
    \ (i in seq_along(grades)) {\n        for (j in seq_along(numerical_grades)) {\n\
    \            if (grades[i] >= numerical_grades[j]) {\n                letter_grades[i]\
    \ <- letters[j]\n                break\n            }\n        }\n    }\n    return(letter_grades)\n\
    }\n", "\n  # write a function here\n}\n \ngpa = c(4.0, 3, 1.7, 2, 3.5)\nnumerical_letter_grade(gpa)\n",
  "\n  if (grades >= 4.0) {\n    return(\"A+\")\n  } else if (grades >= 3.7) {\n \
    \   return(\"A\")\n  } else if (grades >= 3.3) {\n    return(\"A-\")\n  } else\
    \ if (grades >= 3.0) {\n    return(\"B+\")\n  } else if (grades >= 2.7) {\n  \
    \  return(\"B\")\n  } else if (grades >= 2.3) {\n    return(\"B-\")\n  } else\
    \ if (grades >= 2.0) {\n    return(\"C+\")\n  } else if (grades >= 1.7) {\n  \
    \  return(\"C\")\n  } else if (grades >= 1.3) {\n    return(\"C-\")\n  } else\
    \ if (grades >= 1.0) {\n    return(\"D+\")\n  } else if (grades >= 0.7) {\n  \
    \  return(\"D\")\n  } else if (grades >= 0.0) {\n    return(\"D-\")\n  } else\
    \ {\n    return(\"E\")\n  }\n}\n\ngrade_equation <- function(grades) {\n  grade\
    \ <- vector(mode = \"character\", length = length(grades))\n  for (i in 1:length(grades))\
    \ {\n    grade[i] <- numerical_letter_grade(grades[i])\n  }\n  return(grade)\n\
    }\n", "\n  if (grades >= 4.0) {\n    grade <- \"A+\"\n  } else if (grades >= 3.7)\
    \ {\n    grade <- \"A\"\n  } else if (grades >= 3.3) {\n    grade <- \"A-\"\n\
    \  } else if (grades >= 3.0) {\n    grade <- \"B+\"\n  } else if (grades >= 2.7)\
    \ {\n    grade <- \"B\"\n  } else if (grades >= 2.3) {\n    grade <- \"B-\"\n\
    \  } else if (grades >= 2.0) {\n    grade <- \"C+\"\n  } else if (grades >= 1.7)\
    \ {\n    grade <- \"C\"\n  } else if (grades >= 1.3) {\n    grade <- \"C-\"\n\
    \  } else if (grades >= 1.0) {\n    grade <- \"D+\"\n  } else if (grades >= 0.7)\
    \ {\n    grade <- \"D\"\n  } else if (grades >= 0.0) {\n    grade <- \"D-\"\n\
    \  } else {\n    grade <- \"E\"\n  }\n  return(grade)\n}\nnumerical_letter_grade(4.0)\n\
    \nresults <- c()\nfor (grade in grades) {\n  grade_letter <- numerical_letter_grade(grade)\n\
    \  results <- c(results, grade_letter)\n}\n\nresults\n\nletters <- c()\nfor (grade\
    \ in c(4.0, 3, 1.7, 2, 3.5)) {\n  if (grade >= 4.0) {\n    grade <- \"A+\"\n \
    \ } else if (grade >= 3.7) {\n    grade <- \"A\"\n  } else if (grade >= 3.3) {\n\
    \    grade <- \"A-\"\n  } else if (grade >= 3.0) {\n    grade <- \"B+\"\n  } else\
    \ if (grade >= 2.7) {\n    grade <- \"B\"\n  } else if (grade >= 2.3) {\n    grade\
    \ <- \"B-\"\n  } else if (grade >= 2.0) {\n    grade <- \"C+\"\n  } else if (grade\
    \ >= 1.7) {\n    grade <-", "\n  letter_grades <- c('A+', 'A', 'A-', 'B+', 'B',\
    \ 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E')\n  grade_values <- c(4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n  grades_letter <- sapply(grades,\
    \ function(g) letter_grades[which(grade_values > g)[1]])\n  return(grades_letter)\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n    grades <- c(4.0,\
    \ 3, 1.7, 2, 3.5)\n    grade_list <- c('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+',\
    \ 'C', 'C-', 'D+', 'D', 'D-', 'E')\n    grade_boundary <- c(4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -1)\n    letter_grades <- c()\n    for\
    \ (index in 1:length(grades)) {\n        for (i in 1:length(grade_boundary)) {\n\
    \            if (grades[index] >= grade_boundary[i]) {\n                letter_grades\
    \ <- c(letter_grades, grade_list[i])\n                break\n            }\n \
    \       }\n    }\n    letter_grades\n}\nnumerical_letter_grade(c(4.0, 3, 1.7,\
    \ 2, 3.5))\n", "\n  if (grades >= 4.0) {\n    return ('A+')\n  } else if (grades\
    \ >= 3.7) {\n    return ('A')\n  } else if (grades >= 3.3) {\n    return ('A-')\n\
    \  } else if (grades >= 3.0) {\n    return ('B+')\n  } else if (grades >= 2.7)\
    \ {\n    return ('B')\n  } else if (grades >= 2.3) {\n    return ('B-')\n  } else\
    \ if (grades >= 2.0) {\n    return ('C+')\n  } else if (grades >= 1.7) {\n   \
    \ return ('C')\n  } else if (grades >= 1.3) {\n    return ('C-')\n  } else if\
    \ (grades >= 1.0) {\n    return ('D+')\n  } else if (grades >= 0.7) {\n    return\
    \ ('D')\n  } else if (grades >= 0.0) {\n    return ('D-')\n  } else {\n    return\
    \ ('E')\n  }\n}\n\ngrade_equation <- function(grades) {\n  return (sapply(grades,\
    \ numerical_letter_grade))\n}\n\ngrade_equation(c(4.0, 3, 1.7, 2, 3.5))\n", "\n\
    \    ### STUDENT ANSWER\n    letter <- vector()\n    for (i in grades) {\n   \
    \     if (i >= 4.0) {\n            letter <- c(letter, \"A+\")\n        } else\
    \ if (i >= 3.7) {\n            letter <- c(letter, \"A\")\n        } else if (i\
    \ >= 3.3) {\n            letter <- c(letter, \"A-\")\n        } else if (i >=\
    \ 3.0) {\n            letter <- c(letter, \"B+\")\n        } else if (i >= 2.7)\
    \ {\n            letter <- c(letter, \"B\")\n        } else if (i >= 2.3) {\n\
    \            letter <- c(letter, \"B-\")\n        } else if (i >= 2.0) {\n   \
    \         letter <- c(letter, \"C+\")\n        } else if (i >= 1.7) {\n      \
    \      letter <- c(letter, \"C\")\n        } else if (i >= 1.3) {\n          \
    \  letter <- c(letter, \"C-\")\n        } else if (i >= 1.0) {\n            letter\
    \ <- c(letter, \"D+\")\n        } else if (i >= 0.7) {\n            letter <-\
    \ c(letter, \"D\")\n        } else if (i >= 0.0) {\n            letter <- c(letter,\
    \ \"D-\")\n        } else {\n            letter <- c(letter, \"E\")\n        }\n\
    \    }\n    return(letter)\n    ### STUDENT ANSWER\n}\n", "\n    grades[grades\
    \ > 4.0] <- 'A+'\n    grades[grades > 3.7] <- 'A'\n    grades[grades > 3.3] <-\
    \ 'A-'\n    grades[grades > 3.0] <- 'B+'\n    grades[grades > 2.7] <- 'B'\n  \
    \  grades[grades > 2.3] <- 'B-'\n    grades[grades > 2.0] <- 'C+'\n    grades[grades\
    \ > 1.7] <- 'C'\n    grades[grades > 1.3] <- 'C-'\n    grades[grades > 1.0] <-\
    \ 'D+'\n    grades[grades > 0.7] <- 'D'\n    grades[grades > 0.0] <- 'D-'\n  \
    \  grades[grades > -1] <- 'E'\n    return(grades)\n}", "\n\tfor (i in 1:length(grades))\
    \ {\n\t\tif (grades[i] < 0) {\n\t\t\tgrades[i] <- 'E'\n\t\t} else if (grades[i]\
    \ >= 0 & grades[i] < 0.7) {\n\t\t\tgrades[i] <- 'D-'\n\t\t} else if (grades[i]\
    \ >= 0.7 & grades[i] < 1) {\n\t\t\tgrades[i] <- 'D'\n\t\t} else if (grades[i]\
    \ >= 1 & grades[i] < 1.3) {\n\t\t\tgrades[i] <- 'D+'\n\t\t} else if (grades[i]\
    \ >= 1.3 & grades[i] < 1.7) {\n\t\t\tgrades[i] <- 'C-'\n\t\t} else if (grades[i]\
    \ >= 1.7 & grades[i] < 2) {\n\t\t\tgrades[i] <- 'C'\n\t\t} else if (grades[i]\
    \ >= 2 & grades[i] < 2.3) {\n\t\t\tgrades[i] <- 'C+'\n\t\t} else if (grades[i]\
    \ >= 2.3 & grades[i] < 2.7) {\n\t\t\tgrades[i] <- 'B-'\n\t\t} else if (grades[i]\
    \ >= 2.7 & grades[i] < 3) {\n\t\t\tgrades[i] <- 'B'\n\t\t} else if (grades[i]\
    \ >= 3 & grades[i] < 3.3) {\n\t\t\tgrades[i] <- 'B+'\n\t\t} else if (grades[i]\
    \ >= 3.3 & grades[i] < 3.7) {\n\t\t\tgrades[i] <- 'A-'\n\t\t} else if (grades[i]\
    \ >= 3.7 & grades[i] < 4) {\n\t\t\tgrades[i] <- 'A'\n\t\t} else if (grades[i]\
    \ >= 4) {\n\t\t\tgrades[i] <- 'A+'\n\t\t}\n\t}\n\treturn(grades)\n}", "\n    if\
    \ (grades>=4.0) {\n        'A+'\n    }\n    else if (grades>=3.7) {\n        'A'\n\
    \    }\n    else if (grades>=3.3) {\n        'A-'\n    }\n    else if (grades>=3.0)\
    \ {\n        'B+'\n    }\n    else if (grades>=2.7) {\n        'B'\n    }\n  \
    \  else if (grades>=2.3) {\n        'B-'\n    }\n    else if (grades>=2.0) {\n\
    \        'C+'\n    }\n    else if (grades>=1.7) {\n        'C'\n    }\n    else\
    \ if (grades>=1.3) {\n        'C-'\n    }\n    else if (grades>=1.0) {\n     \
    \   'D+'\n    }\n    else if (grades>=0.7) {\n        'D'\n    }\n    else if\
    \ (grades>=0.0) {\n        'D-'\n    }\n    else {\n        'E'\n    }\n}\ngrade_equation\
    \ <- function(grades) {\n    letter_grades = c()\n    for (grade in grades) {\n\
    \        letter_grades <- c(letter_grades, numerical_letter_grade(grade))\n  \
    \  }\n    letter_grades\n}", "\n    grade_list <- c()\n    for (grade in grades)\
    \ {\n        if (grade >= 4.0) {\n            grade_list <- c(grade_list, 'A+')\n\
    \        } else if (grade >= 3.7) {\n            grade_list <- c(grade_list, 'A')\n\
    \        } else if (grade >= 3.3) {\n            grade_list <- c(grade_list, 'A-')\n\
    \        } else if (grade >= 3.0) {\n            grade_list <- c(grade_list, 'B+')\n\
    \        } else if (grade >= 2.7) {\n            grade_list <- c(grade_list, 'B')\n\
    \        } else if (grade >= 2.3) {\n            grade_list <- c(grade_list, 'B-')\n\
    \        } else if (grade >= 2.0) {\n            grade_list <- c(grade_list, 'C+')\n\
    \        } else if (grade >= 1.7) {\n            grade_list <- c(grade_list, 'C')\n\
    \        } else if (grade >= 1.3) {\n            grade_list <- c(grade_list, 'C-')\n\
    \        } else if (grade >= 1.0) {\n            grade_list <- c(grade_list, 'D+')\n\
    \        } else if (grade >= 0.7) {\n            grade_list <- c(grade_list, 'D')\n\
    \        } else if (grade >= 0.0) {\n            grade_list <- c(grade_list, 'D-')\n\
    \        } else {\n            grade_list <- c(grade_list, 'E')\n        }\n \
    \   }\n    return(grade_list)\n}\ngrades <- c(4.0, 3, 1.7, 2, 3.5)\nnumerical_letter_grade(grades)\n",
  "\n  # Complete this function.\n}\nlibrary(testthat)\n\ntest_that('It works on the\
    \ simple case', {\n  expect_equal(\n    grade_equation(c(4.0, 3, 1.7, 2, 3.5)),\n\
    \    c('A+', 'B', 'C-', 'C', 'A-')\n  )\n})\n\ntest_that('It works on the simple\
    \ case', {\n  expect_equal(\n    grade_equation(c(0.0, 0.1, 0.8, 0.9, 1.0, 1.1,\
    \ 1.8, 1.9, 2.0, 2.1, 2.8, 2.9, 3.0, 3.1, 3.8, 3.9, 4.0)),\n    c('E', 'D-', 'D+',\
    \ 'D', 'D-', 'C-', 'C+', 'C', 'C-', 'B-', 'B+', 'B', 'B-', 'A-', 'A+', 'A', 'A+')\n\
    \  )\n})\n \ntest_that('It works on the case where there are no grades', {\n \
    \ expect_equal(\n    grade_equation(c()),\n    c()\n  )\n})\n \ntest_that('It\
    \ works on the case where there are only one grade', {\n  expect_equal(\n    grade_equation(c(0.0)),\n\
    \    c('E')\n  )\n})\n \ntest_that('It works on the case where there are only\
    \ one grade', {\n  expect_equal(\n    grade_equation(c(4.0)),\n    c('A+')\n \
    \ )\n})\n \ntest_that('It works on the case where there are only one grade', {\n\
    \  expect_equal(\n    grade_equation(c(3.3)),\n    c('A-')\n  )\n})\n \ntest_that('It\
    \ works on the case where there are only one grade', {\n  expect_equal(\n    grade_equation(c(2.0)),\n\
    \    c('C+')\n  )\n})\n \ntest_that('It works on", "\n  solution <- character(length(grades))\n\
    \  solution[grades >= 4.0] <- 'A+'\n  solution[grades < 4.0 & grades >= 3.7] <-\
    \ 'A'\n  solution[grades < 3.7 & grades >= 3.3] <- 'A-'\n  solution[grades < 3.3\
    \ & grades >= 3.0] <- 'B+'\n  solution[grades < 3.0 & grades >= 2.7] <- 'B'\n\
    \  solution[grades < 2.7 & grades >= 2.3] <- 'B-'\n  solution[grades < 2.3 & grades\
    \ >= 2.0] <- 'C+'\n  solution[grades < 2.0 & grades >= 1.7] <- 'C'\n  solution[grades\
    \ < 1.7 & grades >= 1.3] <- 'C-'\n  solution[grades < 1.3 & grades >= 1.0] <-\
    \ 'D+'\n  solution[grades < 1.0 & grades >= 0.7] <- 'D'\n  solution[grades < 0.7\
    \ & grades >= 0.0] <- 'D-'\n  solution[grades < 0.0] <- 'E'\n  return(solution)\n\
    }\nprint(numerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5)))\n", "\n  list_of_grades\
    \ <- c()\n  for (grade in grades) {\n    if (grade >= 4.0) {\n      list_of_grades\
    \ <- c(list_of_grades, 'A+')\n    } else if (grade > 3.7) {\n      list_of_grades\
    \ <- c(list_of_grades, 'A')\n    } else if (grade > 3.3) {\n      list_of_grades\
    \ <- c(list_of_grades, 'A-')\n    } else if (grade > 3.0) {\n      list_of_grades\
    \ <- c(list_of_grades, 'B+')\n    } else if (grade > 2.7) {\n      list_of_grades\
    \ <- c(list_of_grades, 'B')\n    } else if (grade > 2.3) {\n      list_of_grades\
    \ <- c(list_of_grades, 'B-')\n    } else if (grade > 2.0) {\n      list_of_grades\
    \ <- c(list_of_grades, 'C+')\n    } else if (grade > 1.7) {\n      list_of_grades\
    \ <- c(list_of_grades, 'C')\n    } else if (grade > 1.3) {\n      list_of_grades\
    \ <- c(list_of_grades, 'C-')\n    } else if (grade > 1.0) {\n      list_of_grades\
    \ <- c(list_of_grades, 'D+')\n    } else if (grade > 0.7) {\n      list_of_grades\
    \ <- c(list_of_grades, 'D')\n    } else if (grade > 0.0) {\n      list_of_grades\
    \ <- c(list_of_grades, 'D-')\n    } else {\n      list_of_grades <- c(list_of_grades,\
    \ 'E')\n    }\n  }\n  return(list_of_grades)\n}\n", "\n    if (grades == 4.0)\n\
    \        return('A+')\n    else if (grades > 3.7)\n        return('A')\n    else\
    \ if (grades > 3.3)\n        return('A-')\n    else if (grades > 3.0)\n      \
    \  return('B+')\n    else if (grades > 2.7)\n        return('B')\n    else if\
    \ (grades > 2.3)\n        return('B-')\n    else if (grades > 2.0)\n        return('C+')\n\
    \    else if (grades > 1.7)\n        return('C')\n    else if (grades > 1.3)\n\
    \        return('C-')\n    else if (grades > 1.0)\n        return('D+')\n    else\
    \ if (grades > 0.7)\n        return('D')\n    else if (grades > 0.0)\n       \
    \ return('D-')\n    else\n        return('E')\n}\n\ngrade_equation <- function(GPAs)\
    \ {\n    results <- vector('character', length(GPAs))\n    for (i in 1:length(GPAs))\
    \ {\n        results[i] <- numerical_letter_grade(GPAs[i])\n    }\n    return(results)\n\
    }\ngrade_equation(c(4.0, 3, 1.7, 2, 3.5))\n", "\n    grades <- c(4.0, 3, 1.7,\
    \ 2, 3.5)\n    for (i in grades) {\n        if (i >= 4.0) {\n            print(\"\
    A+\")\n        } else if (i > 3.7) {\n            print(\"A\")\n        } else\
    \ if (i > 3.3) {\n            print(\"A-\")\n        } else if (i > 3.0) {\n \
    \           print(\"B+\")\n        } else if (i > 2.7) {\n            print(\"\
    B\")\n        } else if (i > 2.3) {\n            print(\"B-\")\n        } else\
    \ if (i > 2.0) {\n            print(\"C+\")\n        } else if (i > 1.7) {\n \
    \           print(\"C\")\n        } else if (i > 1.3) {\n            print(\"\
    C-\")\n        } else if (i > 1.0) {\n            print(\"D+\")\n        } else\
    \ if (i > 0.7) {\n            print(\"D\")\n        } else if (i > 0.0) {\n  \
    \          print(\"D-\")\n        } else {\n            print(\"E\")\n       \
    \ }\n    }\n}\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))", "\n    gpa_letter\
    \ <- ifelse(grades > 3.7, 'A+', \n               ifelse(grades > 3.3, 'A', \n\
    \               ifelse(grades > 3.0, 'A-', \n               ifelse(grades > 2.7,\
    \ 'B+', \n               ifelse(grades > 2.3, 'B', \n               ifelse(grades\
    \ > 2.0, 'B-', \n               ifelse(grades > 1.7, 'C+', \n               ifelse(grades\
    \ > 1.3, 'C', \n               ifelse(grades > 1.0, 'C-', \n               ifelse(grades\
    \ > 0.7, 'D+', \n               ifelse(grades > 0.0, 'D', 'E')))))))))))\n   \
    \ return(gpa_letter)\n}", "\n  for (i in 1:length(grades)) {\n    if (grades[i]\
    \ >= 4.0) {\n      grades[i] <- 'A+'\n    } else if (grades[i] > 3.7 && grades[i]\
    \ < 4.0) {\n      grades[i] <- 'A'\n    } else if (grades[i] > 3.3 && grades[i]\
    \ <= 3.7) {\n      grades[i] <- 'A-'\n    } else if (grades[i] > 3.0 && grades[i]\
    \ <= 3.3) {\n      grades[i] <- 'B+'\n    } else if (grades[i] > 2.7 && grades[i]\
    \ <= 3.0) {\n      grades[i] <- 'B'\n    } else if (grades[i] > 2.3 && grades[i]\
    \ <= 2.7) {\n      grades[i] <- 'B-'\n    } else if (grades[i] > 2.0 && grades[i]\
    \ <= 2.3) {\n      grades[i] <- 'C+'\n    } else if (grades[i] > 1.7 && grades[i]\
    \ <= 2.0) {\n      grades[i] <- 'C'\n    } else if (grades[i] > 1.3 && grades[i]\
    \ <= 1.7) {\n      grades[i] <- 'C-'\n    } else if (grades[i] > 1.0 && grades[i]\
    \ <= 1.3) {\n      grades[i] <- 'D+'\n    } else if (grades[i] > 0.7 && grades[i]\
    \ <= 1.0) {\n      grades[i] <- 'D'\n    } else if (grades[i] > 0.0 && grades[i]\
    \ <= 0.7) {\n      grades[i] <- 'D-'\n    } else if (grades[i] == 0.0) {\n   \
    \   grades[i] <- 'E'\n    }\n  }\n  return(grades)\n}", "\n    grades <- as.numeric(grades)\n\
    \    grades_strings <- c()\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ >= 4.0, \"A+\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 3.7, \"A\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 3.3, \"A-\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 3.0, \"B+\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 2.7, \"B\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 2.3, \"B-\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 2.0, \"C+\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 1.7, \"C\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 1.3, \"C-\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 1.0, \"D+\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 0.7, \"D\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ > 0.0, \"D-\", \"\"))\n    grades_strings <- append(grades_strings, ifelse(grades\
    \ == 0.0, \"E\", \"\"))\n    return(grades_strings)\n}\n", "\n    print(\"Working\
    \ on it\")\n}\n", "\n  function_grade <- function(grade) {\n    if (grade > 4.0)\
    \ {\n      return(\"A+\")\n    } else if (grade > 3.7) {\n      return(\"A\")\n\
    \    } else if (grade > 3.3) {\n      return(\"A-\")\n    } else if (grade > 3.0)\
    \ {\n      return(\"B+\")\n    } else if (grade > 2.7) {\n      return(\"B\")\n\
    \    } else if (grade > 2.3) {\n      return(\"B-\")\n    } else if (grade > 2.0)\
    \ {\n      return(\"C+\")\n    } else if (grade > 1.7) {\n      return(\"C\")\n\
    \    } else if (grade > 1.3) {\n      return(\"C-\")\n    } else if (grade > 1.0)\
    \ {\n      return(\"D+\")\n    } else if (grade > 0.7) {\n      return(\"D\")\n\
    \    } else if (grade > 0.0) {\n      return(\"D-\")\n    } else {\n      return(\"\
    E\")\n    }\n  }\n  return(sapply(grades, function_grade))\n}\n", "\n  if (grades\
    \ < 1) {\n    \"E\"\n  } else if (grades < 1.3) {\n    \"D-\"\n  } else if (grades\
    \ < 1.7) {\n    \"D\"\n  } else if (grades < 2) {\n    \"D+\"\n  } else if (grades\
    \ < 2.3) {\n    \"C-\"\n  } else if (grades < 2.7) {\n    \"C\"\n  } else if (grades\
    \ < 3) {\n    \"C+\"\n  } else if (grades < 3.3) {\n    \"B-\"\n  } else if (grades\
    \ < 3.7) {\n    \"B\"\n  } else if (grades < 4) {\n    \"B+\"\n  } else if (grades\
    \ < 4.3) {\n    \"A-\"\n  } else if (grades < 4.7) {\n    \"A\"\n  } else {\n\
    \    \"A+\"\n  }\n}\n\ngrade_equation <- function(grades) {\n  # Create letter\
    \ grade list\n  letter_grades <- c()\n  # Iterate over the grades\n  for (grade\
    \ in grades) {\n    # Append the calculated letter grade\n    letter_grades <-\
    \ c(letter_grades, numerical_letter_grade(grade))\n  }\n  # Return the list of\
    \ letter grades\n  letter_grades\n}\n", "\n  grades_to_letter <- function(grade)\
    \ {\n    if (grade == 4.0) {\n      'A+'\n    } else if (grade >= 3.7) {\n   \
    \   'A'\n    } else if (grade >= 3.3) {\n      'A-'\n    } else if (grade >= 3.0)\
    \ {\n      'B+'\n    } else if (grade >= 2.7) {\n      'B'\n    } else if (grade\
    \ >= 2.3) {\n      'B-'\n    } else if (grade >= 2.0) {\n      'C+'\n    } else\
    \ if (grade >= 1.7) {\n      'C'\n    } else if (grade >= 1.3) {\n      'C-'\n\
    \    } else if (grade >= 1.0) {\n      'D+'\n    } else if (grade >= 0.7) {\n\
    \      'D'\n    } else if (grade > 0.0) {\n      'D-'\n    } else {\n      'E'\n\
    \    }\n  }\n  sapply(grades, grades_to_letter)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n    grades <- as.vector(grades)\n    n <- length(grades)\n\
    \    numerical_letter_grade <- rep(\"\", n)\n    for (i in 1:n) {\n        if\
    \ (grades[i] >= 4.0) {\n            numerical_letter_grade[i] <- \"A+\"\n    \
    \    } else if (grades[i] >= 3.7) {\n            numerical_letter_grade[i] <-\
    \ \"A\"\n        } else if (grades[i] >= 3.3) {\n            numerical_letter_grade[i]\
    \ <- \"A-\"\n        } else if (grades[i] >= 3.0) {\n            numerical_letter_grade[i]\
    \ <- \"B+\"\n        } else if (grades[i] >= 2.7) {\n            numerical_letter_grade[i]\
    \ <- \"B\"\n        } else if (grades[i] >= 2.3) {\n            numerical_letter_grade[i]\
    \ <- \"B-\"\n        } else if (grades[i] >= 2.0) {\n            numerical_letter_grade[i]\
    \ <- \"C+\"\n        } else if (grades[i] >= 1.7) {\n            numerical_letter_grade[i]\
    \ <- \"C\"\n        } else if (grades[i] >= 1.3) {\n            numerical_letter_grade[i]\
    \ <- \"C-\"\n        } else if (grades[i] >= 1.0) {\n            numerical_letter_grade[i]\
    \ <- \"D+\"\n        } else if (grades[i] >= 0.7) {\n            numerical_letter_grade[i]\
    \ <- \"D\"\n        } else if (grades[i] >= 0.0) {\n            numerical_letter_grade[i]\
    \ <- \"D-\"\n        } else {\n            numerical_letter_grade[i] <- \"E\"\n\
    \        }\n    }\n    return(numerical_letter_grade)\n}\n", "\n  grades <- gsub(\"\
    \ \", \"\", grades)\n  student_letter_grade <- c()\n  for (i in 1:length(grades))\
    \ {\n    if (grades[i] == 4.0) {\n      student_letter_grade[i] <- \"A+\"\n  \
    \  } else if (grades[i] >= 3.7) {\n      student_letter_grade[i] <- \"A\"\n  \
    \  } else if (grades[i] >= 3.3) {\n      student_letter_grade[i] <- \"A-\"\n \
    \   } else if (grades[i] >= 3.0) {\n      student_letter_grade[i] <- \"B+\"\n\
    \    } else if (grades[i] >= 2.7) {\n      student_letter_grade[i] <- \"B\"\n\
    \    } else if (grades[i] >= 2.3) {\n      student_letter_grade[i] <- \"B-\"\n\
    \    } else if (grades[i] >= 2.0) {\n      student_letter_grade[i] <- \"C+\"\n\
    \    } else if (grades[i] >= 1.7) {\n      student_letter_grade[i] <- \"C\"\n\
    \    } else if (grades[i] >= 1.3) {\n      student_letter_grade[i] <- \"C-\"\n\
    \    } else if (grades[i] >= 1.0) {\n      student_letter_grade[i] <- \"D+\"\n\
    \    } else if (grades[i] >= 0.7) {\n      student_letter_grade[i] <- \"D\"\n\
    \    } else if (grades[i] >= 0.0) {\n      student_letter_grade[i] <- \"D-\"\n\
    \    } else {\n      student_letter_grade[i] <- \"E\"\n    }\n  }\n  return(student_letter_grade)\n\
    }\ngrades <- c(4.0, 3, 1.7, 2, 3.5)\nnumerical_letter_grade(grades)\n", "\n  grades\
    \ <- ifelse(grades >= 4.0, \"A+\", \n                   ifelse(grades >= 3.7,\
    \ \"A\", \n                          ifelse(grades >= 3.3, \"A-\", \n        \
    \                         ifelse(grades >= 3.0, \"B+\", \n                   \
    \                     ifelse(grades >= 2.7, \"B\", \n                        \
    \                       ifelse(grades >= 2.3, \"B-\", \n                     \
    \                                 ifelse(grades >= 2.0, \"C+\", \n           \
    \                                                  ifelse(grades >= 1.7, \"C\"\
    , \n                                                                    ifelse(grades\
    \ >= 1.3, \"C-\", \n                                                         \
    \                  ifelse(grades >= 1.0, \"D+\", \n                          \
    \                                                        ifelse(grades >= 0.7,\
    \ \"D\", \n                                                                  \
    \                       ifelse(grades >= 0.0, \"D-\", \"E\"))))))))))))\n  return(grades)\n\
    }", "\n  for (i in grades) {\n    if (i > 4.0) {\n      print(\"A+\")\n    } else\
    \ if (i > 3.7) {\n      print(\"A\")\n    } else if (i > 3.3) {\n      print(\"\
    A-\")\n    } else if (i > 3.0) {\n      print(\"B+\")\n    } else if (i > 2.7)\
    \ {\n      print(\"B\")\n    } else if (i > 2.3) {\n      print(\"B-\")\n    }\
    \ else if (i > 2.0) {\n      print(\"C+\")\n    } else if (i > 1.7) {\n      print(\"\
    C\")\n    } else if (i > 1.3) {\n      print(\"C-\")\n    } else if (i > 1.0)\
    \ {\n      print(\"D+\")\n    } else if (i > 0.7) {\n      print(\"D\")\n    }\
    \ else if (i > 0.0) {\n      print(\"D-\")\n    } else {\n      print(\"E\")\n\
    \    }\n  }\n}\n", "\n  letter_grades <- c(\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n  numerical_grades\
    \ <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n  for\
    \ (i in 1:length(grades)) {\n    grade <- grades[i]\n    for (j in 1:length(numerical_grades))\
    \ {\n      if (grade > numerical_grades[j]) {\n        grades[i] <- letter_grades[j]\n\
    \        break\n      }\n    }\n  }\n  return(grades)\n}\n", "\n  grades[grades\
    \ >= 4.0] <- 'A+'\n  grades[grades < 4.0 & grades >= 3.7] <- 'A'\n  grades[grades\
    \ < 3.7 & grades >= 3.3] <- 'A-'\n  grades[grades < 3.3 & grades >= 3.0] <- 'B+'\n\
    \  grades[grades < 3.0 & grades >= 2.7] <- 'B'\n  grades[grades < 2.7 & grades\
    \ >= 2.3] <- 'B-'\n  grades[grades < 2.3 & grades >= 2.0] <- 'C+'\n  grades[grades\
    \ < 2.0 & grades >= 1.7] <- 'C'\n  grades[grades < 1.7 & grades >= 1.3] <- 'C-'\n\
    \  grades[grades < 1.3 & grades >= 1.0] <- 'D+'\n  grades[grades < 1.0 & grades\
    \ >= 0.7] <- 'D'\n  grades[grades < 0.7 & grades >= 0.0] <- 'D-'\n  grades[grades\
    \ < 0.0] <- 'E'\n  return(grades)\n}\n\nexpect_equal(numerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5)), c('A+', 'B', 'C-', 'C', 'A-'))\nsuccess_msg(\"You solved it!\"\
    )\n \n", "\n  for (i in 1:length(grades)) {\n    if (grades[i] >= 4.0) {\n   \
    \   grades[i] <- 'A+'\n    } else if (grades[i] >= 3.7) {\n      grades[i] <-\
    \ 'A'\n    } else if (grades[i] >= 3.3) {\n      grades[i] <- 'A-'\n    } else\
    \ if (grades[i] >= 3.0) {\n      grades[i] <- 'B+'\n    } else if (grades[i] >=\
    \ 2.7) {\n      grades[i] <- 'B'\n    } else if (grades[i] >= 2.3) {\n      grades[i]\
    \ <- 'B-'\n    } else if (grades[i] >= 2.0) {\n      grades[i] <- 'C+'\n    }\
    \ else if (grades[i] >= 1.7) {\n      grades[i] <- 'C'\n    } else if (grades[i]\
    \ >= 1.3) {\n      grades[i] <- 'C-'\n    } else if (grades[i] >= 1.0) {\n   \
    \   grades[i] <- 'D+'\n    } else if (grades[i] >= 0.7) {\n      grades[i] <-\
    \ 'D'\n    } else if (grades[i] >= 0.0) {\n      grades[i] <- 'D-'\n    } else\
    \ {\n      grades[i] <- 'E'\n    }\n  }\n  return(grades)\n}\n", "\n  letter_grades\
    \ <- c()\n  for (i in 1:length(grades)) {\n    if (grades[i] == 4.0) {\n     \
    \ letter_grades <- c(letter_grades, 'A+')\n    } else if (grades[i] > 3.7) {\n\
    \      letter_grades <- c(letter_grades, 'A')\n    } else if (grades[i] > 3.3)\
    \ {\n      letter_grades <- c(letter_grades, 'A-')\n    } else if (grades[i] >\
    \ 3.0) {\n      letter_grades <- c(letter_grades, 'B+')\n    } else if (grades[i]\
    \ > 2.7) {\n      letter_grades <- c(letter_grades, 'B')\n    } else if (grades[i]\
    \ > 2.3) {\n      letter_grades <- c(letter_grades, 'B-')\n    } else if (grades[i]\
    \ > 2.0) {\n      letter_grades <- c(letter_grades, 'C+')\n    } else if (grades[i]\
    \ > 1.7) {\n      letter_grades <- c(letter_grades, 'C')\n    } else if (grades[i]\
    \ > 1.3) {\n      letter_grades <- c(letter_grades, 'C-')\n    } else if (grades[i]\
    \ > 1.0) {\n      letter_grades <- c(letter_grades, 'D+')\n    } else if (grades[i]\
    \ > 0.7) {\n      letter_grades <- c(letter_grades, 'D')\n    } else if (grades[i]\
    \ > 0.0) {\n      letter_grades <- c(letter_grades, 'D-')\n    } else {\n    \
    \  letter_grades <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n\
    }\ngrade_equation <- function(grades) {\n  letter_grades <- numerical_letter_grade(grades)\n\
    \  return(letter_grades)\n}\ngrade_equation(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  \
    \  ifelse(grades >= 4.0, \"A+\",\n        ifelse(grades >= 3.7, \"A\",\n     \
    \       ifelse(grades >= 3.3, \"A-\",\n                ifelse(grades >= 3.0, \"\
    B+\",\n                    ifelse(grades >= 2.7, \"B\",\n                    \
    \    ifelse(grades >= 2.3, \"B-\",\n                            ifelse(grades\
    \ >= 2.0, \"C+\",\n                                ifelse(grades >= 1.7, \"C\"\
    ,\n                                    ifelse(grades >= 1.3, \"C-\",\n       \
    \                                 ifelse(grades >= 1.0, \"D+\",\n            \
    \                                ifelse(grades >= 0.7, \"D\",\n              \
    \                                  ifelse(grades >= 0.0, \"D-\", \"E\"))))))))))))\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n ", "\n  letter <- c()\n  for\
    \ (i in grades) {\n    if (i >= 4.0) {\n      letter <- c(letter, 'A+')\n    }\
    \ else if (i >= 3.7) {\n      letter <- c(letter, 'A')\n    } else if (i >= 3.3)\
    \ {\n      letter <- c(letter, 'A-')\n    } else if (i >= 3.0) {\n      letter\
    \ <- c(letter, 'B+')\n    } else if (i >= 2.7) {\n      letter <- c(letter, 'B')\n\
    \    } else if (i >= 2.3) {\n      letter <- c(letter, 'B-')\n    } else if (i\
    \ >= 2.0) {\n      letter <- c(letter, 'C+')\n    } else if (i >= 1.7) {\n   \
    \   letter <- c(letter, 'C')\n    } else if (i >= 1.3) {\n      letter <- c(letter,\
    \ 'C-')\n    } else if (i >= 1.0) {\n      letter <- c(letter, 'D+')\n    } else\
    \ if (i >= 0.7) {\n      letter <- c(letter, 'D')\n    } else if (i >= 0.0) {\n\
    \      letter <- c(letter, 'D-')\n    } else {\n      letter <- c(letter, 'E')\n\
    \    }\n  }\n  return(letter)\n}\n\ngrade_equation <- function(grades) {\n  grades\
    \ <- as.numeric(grades)\n  return(numerical_letter_grade(grades))\n}\n\ngrade_equation(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n    # YOUR CODE HERE\n    # fill in the function to\
    \ output list of letter grades\n    # replace the next line with your code\n \
    \   letter_grades <- c()\n    for (grade in grades) {\n        if (grade > 4.0)\
    \ {\n            letter_grades <- c(letter_grades, \"A+\")\n        } else if\
    \ (grade > 3.7) {\n            letter_grades <- c(letter_grades, \"A\")\n    \
    \    } else if (grade > 3.3) {\n            letter_grades <- c(letter_grades,\
    \ \"A-\")\n        } else if (grade > 3.0) {\n            letter_grades <- c(letter_grades,\
    \ \"B+\")\n        } else if (grade > 2.7) {\n            letter_grades <- c(letter_grades,\
    \ \"B\")\n        } else if (grade > 2.3) {\n            letter_grades <- c(letter_grades,\
    \ \"B-\")\n        } else if (grade > 2.0) {\n            letter_grades <- c(letter_grades,\
    \ \"C+\")\n        } else if (grade > 1.7) {\n            letter_grades <- c(letter_grades,\
    \ \"C\")\n        } else if (grade > 1.3) {\n            letter_grades <- c(letter_grades,\
    \ \"C-\")\n        } else if (grade > 1.0) {\n            letter_grades <- c(letter_grades,\
    \ \"D+\")\n        } else if (grade > 0.7) {\n            letter_grades <- c(letter_grades,\
    \ \"D\")\n        } else if (grade > 0.0) {\n            letter_grades <- c(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades <- c(letter_grades, \"\
    E\")\n        }\n    }\n    return(letter_grades)\n}\n\ngrades <- c(4.0, 3, 1.7,\
    \ 2, 3.5)\nnumerical_letter_grade(grades)\n", "\n  grades <- format(round(grades,\
    \ 1), nsmall = 1)\n  for (i in 1:length(grades)) {\n    if (grades[i] >= 4.0)\
    \ {\n      grades[i] <- 'A+'\n    } else if (grades[i] >= 3.7) {\n      grades[i]\
    \ <- 'A'\n    } else if (grades[i] >= 3.3) {\n      grades[i] <- 'A-'\n    } else\
    \ if (grades[i] >= 3.0) {\n      grades[i] <- 'B+'\n    } else if (grades[i] >=\
    \ 2.7) {\n      grades[i] <- 'B'\n    } else if (grades[i] >= 2.3) {\n      grades[i]\
    \ <- 'B-'\n    } else if (grades[i] >= 2.0) {\n      grades[i] <- 'C+'\n    }\
    \ else if (grades[i] >= 1.7) {\n      grades[i] <- 'C'\n    } else if (grades[i]\
    \ >= 1.3) {\n      grades[i] <- 'C-'\n    } else if (grades[i] >= 1.0) {\n   \
    \   grades[i] <- 'D+'\n    } else if (grades[i] >= 0.7) {\n      grades[i] <-\
    \ 'D'\n    } else if (grades[i] >= 0.0) {\n      grades[i] <- 'D-'\n    } else\
    \ {\n      grades[i] <- 'E'\n    }\n  }\n  return(grades)\n}\n", "\n    # YOUR\
    \ CODE HERE\n    letter_grade = c(\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\"\
    , \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\")\n    grade = ifelse(grades\
    \ >= 4.0, 12,\n                 ifelse(grades >= 3.7, 11,\n                 ifelse(grades\
    \ >= 3.3, 10,\n                 ifelse(grades >= 3.0, 9,\n                 ifelse(grades\
    \ >= 2.7, 8,\n                 ifelse(grades >= 2.3, 7,\n                 ifelse(grades\
    \ >= 2.0, 6,\n                 ifelse(grades >= 1.7, 5,\n                 ifelse(grades\
    \ >= 1.3, 4,\n                 ifelse(grades >= 1.0, 3,\n                 ifelse(grades\
    \ >= 0.7, 2,\n                 ifelse(grades >= 0.0, 1, 0))))))))))))\n    letter_grade[grade]\n\
    }\n", "\n  # Take a vector of GPAs and return the corresponding letter grades\
    \ using\n  # the table above\n  # Input:\n  #  grades: A vector of GPAs\n  # Output:\n\
    \  #  A vector of letter grades\n  # Example:\n  # >>> numerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n  # c('A+', 'B', 'C-', 'C', 'A-')\n  # Calculate letter grades\n\
    \  grades_vec <- c()\n  for (g in grades) {\n    if (g == 4.0) {\n      grades_vec\
    \ <- c(grades_vec, 'A+')\n    } else if (g > 3.7) {\n      grades_vec <- c(grades_vec,\
    \ 'A')\n    } else if (g > 3.3) {\n      grades_vec <- c(grades_vec, 'A-')\n \
    \   } else if (g > 3.0) {\n      grades_vec <- c(grades_vec, 'B+')\n    } else\
    \ if (g > 2.7) {\n      grades_vec <- c(grades_vec, 'B')\n    } else if (g > 2.3)\
    \ {\n      grades_vec <- c(grades_vec, 'B-')\n    } else if (g > 2.0) {\n    \
    \  grades_vec <- c(grades_vec, 'C+')\n    } else if (g > 1.7) {\n      grades_vec\
    \ <- c(grades_vec, 'C')\n    } else if (g > 1.3) {\n      grades_vec <- c(grades_vec,\
    \ 'C-')\n    } else if (g > 1.0) {\n      grades_vec <- c(grades_vec, 'D+')\n\
    \    } else if (g > 0.7) {\n      grades_vec <- c(grades_vec, 'D')\n    } else\
    \ if (g > 0.0) {\n      grades_vec <- c(grades_vec, 'D-')\n    } else {\n    \
    \  grades_vec <- c(grades_vec, 'E')\n    }\n  }\n  # Return letter grades\n  return(grades_",
  "\n    # return(letter_grades)\n    letter_grades <- c()\n    for (grade in grades)\
    \ {\n        if (grade >= 4.0) {\n            letter_grades <- c(letter_grades,\
    \ 'A+')\n        } else if (grade >= 3.7) {\n            letter_grades <- c(letter_grades,\
    \ 'A')\n        } else if (grade >= 3.3) {\n            letter_grades <- c(letter_grades,\
    \ 'A-')\n        } else if (grade >= 3.0) {\n            letter_grades <- c(letter_grades,\
    \ 'B+')\n        } else if (grade >= 2.7) {\n            letter_grades <- c(letter_grades,\
    \ 'B')\n        } else if (grade >= 2.3) {\n            letter_grades <- c(letter_grades,\
    \ 'B-')\n        } else if (grade >= 2.0) {\n            letter_grades <- c(letter_grades,\
    \ 'C+')\n        } else if (grade >= 1.7) {\n            letter_grades <- c(letter_grades,\
    \ 'C')\n        } else if (grade >= 1.3) {\n            letter_grades <- c(letter_grades,\
    \ 'C-')\n        } else if (grade >= 1.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D+')\n        } else if (grade >= 0.7) {\n            letter_grades <- c(letter_grades,\
    \ 'D')\n        } else if (grade >= 0.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D-')\n        } else {\n            letter_grades <- c(letter_grades, 'E')\n\
    \        }\n    }\n    return(letter_grades)\n}\n", "\n  grades <- round(grades,\
    \ 1) # round it to 1 decimal place\n  result <- c() # initialize empty vector\n\
    \  for (grade in grades) {\n    if (grade == 4.0) {\n      result <- c(result,\
    \ 'A+')\n    } else if (grade >= 3.7) {\n      result <- c(result, 'A')\n    }\
    \ else if (grade >= 3.3) {\n      result <- c(result, 'A-')\n    } else if (grade\
    \ >= 3.0) {\n      result <- c(result, 'B+')\n    } else if (grade >= 2.7) {\n\
    \      result <- c(result, 'B')\n    } else if (grade >= 2.3) {\n      result\
    \ <- c(result, 'B-')\n    } else if (grade >= 2.0) {\n      result <- c(result,\
    \ 'C+')\n    } else if (grade >= 1.7) {\n      result <- c(result, 'C')\n    }\
    \ else if (grade >= 1.3) {\n      result <- c(result, 'C-')\n    } else if (grade\
    \ >= 1.0) {\n      result <- c(result, 'D+')\n    } else if (grade >= 0.7) {\n\
    \      result <- c(result, 'D')\n    } else if (grade >= 0.0) {\n      result\
    \ <- c(result, 'D-')\n    } else {\n      result <- c(result, 'E')\n    }\n  }\n\
    \  return(result)\n}\n", "\n    unlist(lapply(grades, function(x) {\n        if\
    \ (x >= 4.0) {\n            return(\"A+\")\n        } else if (x >= 3.7) {\n \
    \           return(\"A\")\n        } else if (x >= 3.3) {\n            return(\"\
    A-\")\n        } else if (x >= 3.0) {\n            return(\"B+\")\n        } else\
    \ if (x >= 2.7) {\n            return(\"B\")\n        } else if (x >= 2.3) {\n\
    \            return(\"B-\")\n        } else if (x >= 2.0) {\n            return(\"\
    C+\")\n        } else if (x >= 1.7) {\n            return(\"C\")\n        } else\
    \ if (x >= 1.3) {\n            return(\"C-\")\n        } else if (x >= 1.0) {\n\
    \            return(\"D+\")\n        } else if (x >= 0.7) {\n            return(\"\
    D\")\n        } else if (x >= 0.0) {\n            return(\"D-\")\n        } else\
    \ {\n            return(\"E\")\n        }\n    }))\n}\n", "\n    letters = c()\n\
    \    for (grade in grades) {\n        if (grade == 4.0) {\n            letters\
    \ = c(letters, 'A+')\n        } else if (grade > 3.7) {\n            letters =\
    \ c(letters, 'A')\n        } else if (grade > 3.3) {\n            letters = c(letters,\
    \ 'A-')\n        } else if (grade > 3.0) {\n            letters = c(letters, 'B+')\n\
    \        } else if (grade > 2.7) {\n            letters = c(letters, 'B')\n  \
    \      } else if (grade > 2.3) {\n            letters = c(letters, 'B-')\n   \
    \     } else if (grade > 2.0) {\n            letters = c(letters, 'C+')\n    \
    \    } else if (grade > 1.7) {\n            letters = c(letters, 'C')\n      \
    \  } else if (grade > 1.3) {\n            letters = c(letters, 'C-')\n       \
    \ } else if (grade > 1.0) {\n            letters = c(letters, 'D+')\n        }\
    \ else if (grade > 0.7) {\n            letters = c(letters, 'D')\n        } else\
    \ if (grade > 0.0) {\n            letters = c(letters, 'D-')\n        } else {\n\
    \            letters = c(letters, 'E')\n        }\n    }\n    return(letters)\n\
    }\n ", "\n    grades <- ifelse(grades >= 4.0, 'A+',\n                     ifelse(grades\
    \ >= 3.7, 'A',\n                            ifelse(grades >= 3.3, 'A-',\n    \
    \                               ifelse(grades >= 3.0, 'B+',\n                \
    \                          ifelse(grades >= 2.7, 'B',\n                      \
    \                           ifelse(grades >= 2.3, 'B-',\n                    \
    \                                    ifelse(grades >= 2.0, 'C+',\n           \
    \                                                    ifelse(grades >= 1.7, 'C',\n\
    \                                                                      ifelse(grades\
    \ >= 1.3, 'C-',\n                                                            \
    \                 ifelse(grades >= 1.0, 'D+',\n                              \
    \                                                      ifelse(grades >= 0.7, 'D',\n\
    \                                                                            \
    \               ifelse(grades >= 0.0, 'D-', 'E'))))))))))))\n    return(grades)\n\
    }\n", "\n  grades = cut(grades, \n               breaks = c(-Inf, 0.7, 1.3, 1.7,\
    \ 2.3, 2.7, 3.3, 3.7, Inf),\n               labels = c('D-', 'D+', 'C-', 'C',\
    \ 'C+', 'B-', 'B', 'B+', 'A-'))\n  grades = gsub('([0-9.]+)\\\\+', '\\\\1', grades)\n\
    \  grades = gsub('([0-9.]+)\\\\-', '\\\\1', grades)\n  return(grades)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  letter_grades <- numeric(length(grades))\n  for (i\
    \ in 1:length(grades)) {\n    if (grades[i] == 4.0) {\n      letter_grades[i]\
    \ <- 'A+'\n    } else if (grades[i] > 3.7) {\n      letter_grades[i] <- 'A'\n\
    \    } else if (grades[i] > 3.3) {\n      letter_grades[i] <- 'A-'\n    } else\
    \ if (grades[i] > 3.0) {\n      letter_grades[i] <- 'B+'\n    } else if (grades[i]\
    \ > 2.7) {\n      letter_grades[i] <- 'B'\n    } else if (grades[i] > 2.3) {\n\
    \      letter_grades[i] <- 'B-'\n    } else if (grades[i] > 2.0) {\n      letter_grades[i]\
    \ <- 'C+'\n    } else if (grades[i] > 1.7) {\n      letter_grades[i] <- 'C'\n\
    \    } else if (grades[i] > 1.3) {\n      letter_grades[i] <- 'C-'\n    } else\
    \ if (grades[i] > 1.0) {\n      letter_grades[i] <- 'D+'\n    } else if (grades[i]\
    \ > 0.7) {\n      letter_grades[i] <- 'D'\n    } else if (grades[i] > 0.0) {\n\
    \      letter_grades[i] <- 'D-'\n    } else {\n      letter_grades[i] <- 'E'\n\
    \    }\n  }\n  return(letter_grades)\n}\n\nnumerical_letter_grade(c(4.0, 3, 1.7,\
    \ 2, 3.5))\n", "\n    grade_list <- rep(\"\", length(grades))\n    for (i in 1:length(grades))\
    \ {\n        grade <- grades[i]\n        if (grade >= 4.0) {\n            grade_list[i]\
    \ <- \"A+\"\n        } else if (grade >= 3.7) {\n            grade_list[i] <-\
    \ \"A\"\n        } else if (grade >= 3.3) {\n            grade_list[i] <- \"A-\"\
    \n        } else if (grade >= 3.0) {\n            grade_list[i] <- \"B+\"\n  \
    \      } else if (grade >= 2.7) {\n            grade_list[i] <- \"B\"\n      \
    \  } else if (grade >= 2.3) {\n            grade_list[i] <- \"B-\"\n        }\
    \ else if (grade >= 2.0) {\n            grade_list[i] <- \"C+\"\n        } else\
    \ if (grade >= 1.7) {\n            grade_list[i] <- \"C\"\n        } else if (grade\
    \ >= 1.3) {\n            grade_list[i] <- \"C-\"\n        } else if (grade >=\
    \ 1.0) {\n            grade_list[i] <- \"D+\"\n        } else if (grade >= 0.7)\
    \ {\n            grade_list[i] <- \"D\"\n        } else if (grade >= 0.0) {\n\
    \            grade_list[i] <- \"D-\"\n        } else {\n            grade_list[i]\
    \ <- \"E\"\n        }\n    }\n    return(grade_list)\n}\n", "\n  if (grades >\
    \ 4.0)\n    return(\"Invalid numerical grade!\")\n  else if (grades >= 3.7)\n\
    \    return(\"A\")\n  else if (grades >= 3.3)\n    return(\"A-\")\n  else if (grades\
    \ >= 3.0)\n    return(\"B+\")\n  else if (grades >= 2.7)\n    return(\"B\")\n\
    \  else if (grades >= 2.3)\n    return(\"B-\")\n  else if (grades >= 2.0)\n  \
    \  return(\"C+\")\n  else if (grades >= 1.7)\n    return(\"C\")\n  else if (grades\
    \ >= 1.3)\n    return(\"C-\")\n  else if (grades >= 1.0)\n    return(\"D+\")\n\
    \  else if (grades >= 0.7)\n    return(\"D\")\n  else if (grades >= 0.0)\n   \
    \ return(\"D-\")\n  else\n    return(\"E\")\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))", "\n  letters <- c()\n  for (i in 1:length(grades)) {\n  \
    \  if (grades[i] >= 4.0) {\n      letters[i] <- 'A+'\n    } else if (grades[i]\
    \ >= 3.7) {\n      letters[i] <- 'A'\n    } else if (grades[i] >= 3.3) {\n   \
    \   letters[i] <- 'A-'\n    } else if (grades[i] >= 3.0) {\n      letters[i] <-\
    \ 'B+'\n    } else if (grades[i] >= 2.7) {\n      letters[i] <- 'B'\n    } else\
    \ if (grades[i] >= 2.3) {\n      letters[i] <- 'B-'\n    } else if (grades[i]\
    \ >= 2.0) {\n      letters[i] <- 'C+'\n    } else if (grades[i] >= 1.7) {\n  \
    \    letters[i] <- 'C'\n    } else if (grades[i] >= 1.3) {\n      letters[i] <-\
    \ 'C-'\n    } else if (grades[i] >= 1.0) {\n      letters[i] <- 'D+'\n    } else\
    \ if (grades[i] >= 0.7) {\n      letters[i] <- 'D'\n    } else if (grades[i] >=\
    \ 0.0) {\n      letters[i] <- 'D-'\n    } else {\n      letters[i] <- 'E'\n  \
    \  }\n  }\n  return(letters)\n}\n\ngrade_equation <- function(grades) {\n  letters\
    \ <- c()\n  for (i in 1:length(grades)) {\n    if (grades[i] >= 4.0) {\n     \
    \ letters[i] <- 'A+'\n    } else if (grades[i] >= 3.7) {\n      letters[i] <-\
    \ 'A'\n    } else if (grades[i] >= 3.3) {\n      letters[i] <- 'A-'\n    } else\
    \ if (grades[i] >= 3.0) {\n      letters[i] <- 'B+'\n    } else if (grades[i]\
    \ >= 2.7", "\n  letter_grade <- rep(\"\", length(grades))\n  for (i in 1:length(grades))\
    \ {\n    if (grades[i] >= 4.0) {\n      letter_grade[i] <- \"A+\"\n    } else\
    \ if (grades[i] >= 3.7) {\n      letter_grade[i] <- \"A\"\n    } else if (grades[i]\
    \ >= 3.3) {\n      letter_grade[i] <- \"A-\"\n    } else if (grades[i] >= 3.0)\
    \ {\n      letter_grade[i] <- \"B+\"\n    } else if (grades[i] >= 2.7) {\n   \
    \   letter_grade[i] <- \"B\"\n    } else if (grades[i] >= 2.3) {\n      letter_grade[i]\
    \ <- \"B-\"\n    } else if (grades[i] >= 2.0) {\n      letter_grade[i] <- \"C+\"\
    \n    } else if (grades[i] >= 1.7) {\n      letter_grade[i] <- \"C\"\n    } else\
    \ if (grades[i] >= 1.3) {\n      letter_grade[i] <- \"C-\"\n    } else if (grades[i]\
    \ >= 1.0) {\n      letter_grade[i] <- \"D+\"\n    } else if (grades[i] >= 0.7)\
    \ {\n      letter_grade[i] <- \"D\"\n    } else if (grades[i] >= 0.0) {\n    \
    \  letter_grade[i] <- \"D-\"\n    } else {\n      letter_grade[i] <- \"E\"\n \
    \   }\n  }\n  return(letter_grade)\n}\n\ngrade_equation <- function(gpa) {\n \
    \ return(numerical_letter_grade(gpa))\n}", "\n    # your code goes here\n}\n ",
  "\n  \n  letter_grades <- c(\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\"\
    , \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\")\n  numerical_grades <- c(0, 0.7,\
    \ 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0)\n  \n  for (value in grades)\
    \ {\n    for (i in 1:12) {\n      if (value >= numerical_grades[i]) {\n      \
    \  cat(letter_grades[i], \"\\n\")\n        break\n      }\n    }\n  }\n}\n\ngrades\
    \ <- c(4.0, 3, 1.7, 2, 3.5)\nnumerical_letter_grade(grades)\n", "\n  letter_grades\
    \ <- c()\n  for (grade in grades) {\n    if (grade >= 4.0) {\n      letter_grades\
    \ <- c(letter_grades, 'A+')\n    } else if (grade >= 3.7) {\n      letter_grades\
    \ <- c(letter_grades, 'A')\n    } else if (grade >= 3.3) {\n      letter_grades\
    \ <- c(letter_grades, 'A-')\n    } else if (grade >= 3.0) {\n      letter_grades\
    \ <- c(letter_grades, 'B+')\n    } else if (grade >= 2.7) {\n      letter_grades\
    \ <- c(letter_grades, 'B')\n    } else if (grade >= 2.3) {\n      letter_grades\
    \ <- c(letter_grades, 'B-')\n    } else if (grade >= 2.0) {\n      letter_grades\
    \ <- c(letter_grades, 'C+')\n    } else if (grade >= 1.7) {\n      letter_grades\
    \ <- c(letter_grades, 'C')\n    } else if (grade >= 1.3) {\n      letter_grades\
    \ <- c(letter_grades, 'C-')\n    } else if (grade >= 1.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D+')\n    } else if (grade >= 0.7) {\n      letter_grades\
    \ <- c(letter_grades, 'D')\n    } else if (grade >= 0.0) {\n      letter_grades\
    \ <- c(letter_grades, 'D-')\n    } else {\n      letter_grades <- c(letter_grades,\
    \ 'E')\n    }\n  }\n  return(letter_grades)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  # Your solution here\n  letterGrade <- c()\n  for\
    \ (grade in grades) {\n    if (grade == 4.0) {\n      letterGrade <- c(letterGrade,\
    \ \"A+\")\n    } else if (grade > 3.7) {\n      letterGrade <- c(letterGrade,\
    \ \"A\")\n    } else if (grade > 3.3) {\n      letterGrade <- c(letterGrade, \"\
    A-\")\n    } else if (grade > 3.0) {\n      letterGrade <- c(letterGrade, \"B+\"\
    )\n    } else if (grade > 2.7) {\n      letterGrade <- c(letterGrade, \"B\")\n\
    \    } else if (grade > 2.3) {\n      letterGrade <- c(letterGrade, \"B-\")\n\
    \    } else if (grade > 2.0) {\n      letterGrade <- c(letterGrade, \"C+\")\n\
    \    } else if (grade > 1.7) {\n      letterGrade <- c(letterGrade, \"C\")\n \
    \   } else if (grade > 1.3) {\n      letterGrade <- c(letterGrade, \"C-\")\n \
    \   } else if (grade > 1.0) {\n      letterGrade <- c(letterGrade, \"D+\")\n \
    \   } else if (grade > 0.7) {\n      letterGrade <- c(letterGrade, \"D\")\n  \
    \  } else if (grade > 0.0) {\n      letterGrade <- c(letterGrade, \"D-\")\n  \
    \  } else {\n      letterGrade <- c(letterGrade, \"E\")\n    }\n  }\n  return(letterGrade)\n\
    }\nprint(numerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5)))", "\n  y = c(4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0)\n  x = c('A+', 'A', 'A-',\
    \ 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-')\n  cut(grades, c(-Inf, y,\
    \ Inf), c('E', x))\n}\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))", "\n  \
    \  grades_output <- NULL\n    for (i in 1:length(grades)) {\n        if (grades[i]\
    \ == 4.0) {\n            grades_output[i] <- 'A+'\n        } else if (grades[i]\
    \ > 3.7) {\n            grades_output[i] <- 'A'\n        } else if (grades[i]\
    \ > 3.3) {\n            grades_output[i] <- 'A-'\n        } else if (grades[i]\
    \ > 3.0) {\n            grades_output[i] <- 'B+'\n        } else if (grades[i]\
    \ > 2.7) {\n            grades_output[i] <- 'B'\n        } else if (grades[i]\
    \ > 2.3) {\n            grades_output[i] <- 'B-'\n        } else if (grades[i]\
    \ > 2.0) {\n            grades_output[i] <- 'C+'\n        } else if (grades[i]\
    \ > 1.7) {\n            grades_output[i] <- 'C'\n        } else if (grades[i]\
    \ > 1.3) {\n            grades_output[i] <- 'C-'\n        } else if (grades[i]\
    \ > 1.0) {\n            grades_output[i] <- 'D+'\n        } else if (grades[i]\
    \ > 0.7) {\n            grades_output[i] <- 'D'\n        } else if (grades[i]\
    \ > 0.0) {\n            grades_output[i] <- 'D-'\n        } else {\n         \
    \   grades_output[i] <- 'E'\n        }\n    }\n    return(grades_output)\n}\n",
  "\n  lapply(grades, function(grade) {\n    if (grade == 4.0) return('A+')\n    if\
    \ (grade > 3.7) return('A')\n    if (grade > 3.3) return('A-')\n    if (grade\
    \ > 3.0) return('B+')\n    if (grade > 2.7) return('B')\n    if (grade > 2.3)\
    \ return('B-')\n    if (grade > 2.0) return('C+')\n    if (grade > 1.7) return('C')\n\
    \    if (grade > 1.3) return('C-')\n    if (grade > 1.0) return('D+')\n    if\
    \ (grade > 0.7) return('D')\n    if (grade > 0.0) return('D-')\n    if (grade\
    \ == 0.0) return('E')\n  })\n}\n", "\n  lapply(grades, function(x) {\n    if (x\
    \ > 4.0) {\n      return(\"A+\")\n    } else if (x > 3.7) {\n      return(\"A\"\
    )\n    } else if (x > 3.3) {\n      return(\"A-\")\n    } else if (x > 3.0) {\n\
    \      return(\"B+\")\n    } else if (x > 2.7) {\n      return(\"B\")\n    } else\
    \ if (x > 2.3) {\n      return(\"B-\")\n    } else if (x > 2.0) {\n      return(\"\
    C+\")\n    } else if (x > 1.7) {\n      return(\"C\")\n    } else if (x > 1.3)\
    \ {\n      return(\"C-\")\n    } else if (x > 1.0) {\n      return(\"D+\")\n \
    \   } else if (x > 0.7) {\n      return(\"D\")\n    } else if (x > 0.0) {\n  \
    \    return(\"D-\")\n    } else {\n      return(\"E\")\n    }\n  })\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n  grades <- ifelse(grades >= 4.0, \"A+\", NA)\n  grades\
    \ <- ifelse(grades >= 3.7 & grades < 4.0, \"A\", grades)\n  grades <- ifelse(grades\
    \ >= 3.3 & grades < 3.7, \"A-\", grades)\n  grades <- ifelse(grades >= 3.0 & grades\
    \ < 3.3, \"B+\", grades)\n  grades <- ifelse(grades >= 2.7 & grades < 3.0, \"\
    B\", grades)\n  grades <- ifelse(grades >= 2.3 & grades < 2.7, \"B-\", grades)\n\
    \  grades <- ifelse(grades >= 2.0 & grades < 2.3, \"C+\", grades)\n  grades <-\
    \ ifelse(grades >= 1.7 & grades < 2.0, \"C\", grades)\n  grades <- ifelse(grades\
    \ >= 1.3 & grades < 1.7, \"C-\", grades)\n  grades <- ifelse(grades >= 1.0 & grades\
    \ < 1.3, \"D+\", grades)\n  grades <- ifelse(grades >= 0.7 & grades < 1.0, \"\
    D\", grades)\n  grades <- ifelse(grades >= 0.0 & grades < 0.7, \"D-\", grades)\n\
    \  grades <- ifelse(grades < 0.0, \"E\", grades)\n  return(grades)\n}\n", "\n\
    \  grade_table <- c(A_plus = 4.0, A = 3.7, A_minus = 3.3, B_plus = 3.0,\n    \
    \               B = 2.7, B_minus = 2.3, C_plus = 2.0, C = 1.7, C_minus = 1.3,\n\
    \                   D_plus = 1.0, D = 0.7, D_minus = 0.0, E = 0.0)\n  letter_grade\
    \ <- ifelse(grades >= grade_table[1], 'A+',\n                         ifelse(grades\
    \ >= grade_table[2], 'A',\n                                ifelse(grades >= grade_table[3],\
    \ 'A-',\n                                       ifelse(grades >= grade_table[4],\
    \ 'B+',\n                                              ifelse(grades >= grade_table[5],\
    \ 'B',\n                                                     ifelse(grades >=\
    \ grade_table[6], 'B-',\n                                                    \
    \        ifelse(grades >= grade_table[7], 'C+',\n                            \
    \                                       ifelse(grades >= grade_table[8], 'C',\n\
    \                                                                          ifelse(grades\
    \ >= grade_table[9], 'C-',\n                                                 \
    \                                ifelse(grades >= grade_table[10], 'D+',\n   \
    \                                                                            \
    \         ifelse(grades >= grade_table[11], 'D',\n                           \
    \                                                                    ifelse(grades\
    \ >= grade_table[12], 'D-', 'E'))))))))))))\n  return(letter_grade)\n}\n", "\n\
    \  grades_letter <- matrix(NA, nrow = length(grades), ncol = 1)\n  for (i in 1:length(grades))\
    \ {\n    if (grades[i] >= 4.0) {\n      grades_letter[i] <- 'A+'\n    } else if\
    \ (grades[i] > 3.7) {\n      grades_letter[i] <- 'A'\n    } else if (grades[i]\
    \ > 3.3) {\n      grades_letter[i] <- 'A-'\n    } else if (grades[i] > 3.0) {\n\
    \      grades_letter[i] <- 'B+'\n    } else if (grades[i] > 2.7) {\n      grades_letter[i]\
    \ <- 'B'\n    } else if (grades[i] > 2.3) {\n      grades_letter[i] <- 'B-'\n\
    \    } else if (grades[i] > 2.0) {\n      grades_letter[i] <- 'C+'\n    } else\
    \ if (grades[i] > 1.7) {\n      grades_letter[i] <- 'C'\n    } else if (grades[i]\
    \ > 1.3) {\n      grades_letter[i] <- 'C-'\n    } else if (grades[i] > 1.0) {\n\
    \      grades_letter[i] <- 'D+'\n    } else if (grades[i] > 0.7) {\n      grades_letter[i]\
    \ <- 'D'\n    } else if (grades[i] > 0.0) {\n      grades_letter[i] <- 'D-'\n\
    \    } else {\n      grades_letter[i] <- 'E'\n    }\n  }\n  return(grades_letter)\n\
    }\n\ngrade_equation <- function(gpa) {\n  gpa_letter <- numerical_letter_grade(gpa)\n\
    \  return(gpa_letter)\n}\n", "\n  letter_grades <- c()\n  for (grade in grades)\
    \ {\n    if (grade > 4.0) {\n      letter_grades <- c(letter_grades, 'A+')\n \
    \   } else if (grade > 3.7) {\n      letter_grades <- c(letter_grades, 'A')\n\
    \    } else if (grade > 3.3) {\n      letter_grades <- c(letter_grades, 'A-')\n\
    \    } else if (grade > 3.0) {\n      letter_grades <- c(letter_grades, 'B+')\n\
    \    } else if (grade > 2.7) {\n      letter_grades <- c(letter_grades, 'B')\n\
    \    } else if (grade > 2.3) {\n      letter_grades <- c(letter_grades, 'B-')\n\
    \    } else if (grade > 2.0) {\n      letter_grades <- c(letter_grades, 'C+')\n\
    \    } else if (grade > 1.7) {\n      letter_grades <- c(letter_grades, 'C')\n\
    \    } else if (grade > 1.3) {\n      letter_grades <- c(letter_grades, 'C-')\n\
    \    } else if (grade > 1.0) {\n      letter_grades <- c(letter_grades, 'D+')\n\
    \    } else if (grade > 0.7) {\n      letter_grades <- c(letter_grades, 'D')\n\
    \    } else if (grade > 0.0) {\n      letter_grades <- c(letter_grades, 'D-')\n\
    \    } else {\n      letter_grades <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n\
    }\n\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n    ### BEGIN SOLUTION\n\
    \    letter_grades <- c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\",\
    \ \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n    cut_points <- c(4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -Inf)\n    return(cut(grades,\
    \ breaks = cut_points, labels = letter_grades))\n    ### END SOLUTION\n}\n ",
  "\n  # Creating a table\n  grade_table <- data.frame(\n    \"GPA\" = c(4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0),\n    \"Letter\" = c(\"A+\"\
    , \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\")\n  )\n  grade_table$Letter <- c(grade_table$Letter, \"E\")\n  grades\
    \ <- factor(grades, labels = grade_table$Letter)\n  grades <- as.character(grades)\n\
    \  return(grades)\n}\n", "\n  letters <- list(\n    Aplus = 4.0,\n    A = 3.7,\n\
    \    Aminus = 3.3,\n    Bplus = 3.0,\n    B = 2.7,\n    Bminus = 2.3,\n    Cplus\
    \ = 2.0,\n    C = 1.7,\n    Cminus = 1.3,\n    Dplus = 1.0,\n    D = 0.7,\n  \
    \  Dminus = 0.0,\n    E = 0.0\n  )\n  letter_grades <- character(length(grades))\n\
    \  for (i in 1:length(grades)) {\n    grade <- grades[i]\n    for (name in names(letters))\
    \ {\n      if (grade > letters[[name]]) {\n        letter_grades[i] <- name\n\
    \        break\n      }\n    }\n  }\n  return(letter_grades)\n}\n\ngrade_equation\
    \ <- function(grades) {\n  grades <- numerical_letter_grade(grades)\n  for (i\
    \ in 1:length(grades)) {\n    grade <- grades[i]\n    if (grade == 'Aplus') {\n\
    \      grades[i] <- 'A+'\n    } else if (grade == 'A') {\n      grades[i] <- 'A'\n\
    \    } else if (grade == 'Aminus') {\n      grades[i] <- 'A-'\n    } else if (grade\
    \ == 'Bplus') {\n      grades[i] <- 'B+'\n    } else if (grade == 'B') {\n   \
    \   grades[i] <- 'B'\n    } else if (grade == 'Bminus') {\n      grades[i] <-\
    \ 'B-'\n    } else if (grade == 'Cplus') {\n      grades[i] <- 'C+'\n    } else\
    \ if (grade == 'C') {\n      grades[i] <- 'C'\n    } else if (grade == 'Cminus')\
    \ {\n      grades[i] <- 'C-'\n    } else if (grade == 'Dplus') {\n      grades[i]\
    \ <- 'D+'\n    } else if (grade == 'D') {\n      grades[i] <- 'D'\n    } else\
    \ if (grade", "\n    numeric_grades <- grades\n    numeric_grades[numeric_grades\
    \ >= 4.0] <- 'A+'\n    numeric_grades[numeric_grades < 4.0 & numeric_grades >=\
    \ 3.7] <- 'A'\n    numeric_grades[numeric_grades < 3.7 & numeric_grades >= 3.3]\
    \ <- 'A-'\n    numeric_grades[numeric_grades < 3.3 & numeric_grades >= 3.0] <-\
    \ 'B+'\n    numeric_grades[numeric_grades < 3.0 & numeric_grades >= 2.7] <- 'B'\n\
    \    numeric_grades[numeric_grades < 2.7 & numeric_grades >= 2.3] <- 'B-'\n  \
    \  numeric_grades[numeric_grades < 2.3 & numeric_grades >= 2.0] <- 'C+'\n    numeric_grades[numeric_grades\
    \ < 2.0 & numeric_grades >= 1.7] <- 'C'\n    numeric_grades[numeric_grades < 1.7\
    \ & numeric_grades >= 1.3] <- 'C-'\n    numeric_grades[numeric_grades < 1.3 &\
    \ numeric_grades >= 1.0] <- 'D+'\n    numeric_grades[numeric_grades < 1.0 & numeric_grades\
    \ >= 0.7] <- 'D'\n    numeric_grades[numeric_grades < 0.7 & numeric_grades >=\
    \ 0.0] <- 'D-'\n    numeric_grades[numeric_grades < 0.0] <- 'E'\n    return(numeric_grades)\n\
    }\n ", "\n  # YOU CAN ADD SOME LINES OF CODE HERE\n  # YOU CAN ADD SOME LINES\
    \ OF CODE HERE\n  # YOU CAN ADD SOME LINES OF CODE HERE\n  grades <- as.numeric(grades)\n\
    \  letter <- as.character(grades)\n  letter[grades >= 4.0] <- 'A+'\n  letter[grades\
    \ >= 3.7 & grades < 4.0] <- 'A'\n  letter[grades >= 3.3 & grades < 3.7] <- 'A-'\n\
    \  letter[grades >= 3.0 & grades < 3.3] <- 'B+'\n  letter[grades >= 2.7 & grades\
    \ < 3.0] <- 'B'\n  letter[grades >= 2.3 & grades < 2.7] <- 'B-'\n  letter[grades\
    \ >= 2.0 & grades < 2.3] <- 'C+'\n  letter[grades >= 1.7 & grades < 2.0] <- 'C'\n\
    \  letter[grades >= 1.3 & grades < 1.7] <- 'C-'\n  letter[grades >= 1.0 & grades\
    \ < 1.3] <- 'D+'\n  letter[grades >= 0.7 & grades < 1.0] <- 'D'\n  letter[grades\
    \ >= 0.0 & grades < 0.7] <- 'D-'\n  letter[grades == 0.0] <- 'E'\n  return(letter)\n\
    }\n", "\n    letter_grade <- rep('', length(grades))\n    for (i in 1:length(grades))\
    \ {\n        if (grades[i] > 4.0) {\n            letter_grade[i] <- 'A+'\n   \
    \     } else if (grades[i] > 3.7) {\n            letter_grade[i] <- 'A'\n    \
    \    } else if (grades[i] > 3.3) {\n            letter_grade[i] <- 'A-'\n    \
    \    } else if (grades[i] > 3.0) {\n            letter_grade[i] <- 'B+'\n    \
    \    } else if (grades[i] > 2.7) {\n            letter_grade[i] <- 'B'\n     \
    \   } else if (grades[i] > 2.3) {\n            letter_grade[i] <- 'B-'\n     \
    \   } else if (grades[i] > 2.0) {\n            letter_grade[i] <- 'C+'\n     \
    \   } else if (grades[i] > 1.7) {\n            letter_grade[i] <- 'C'\n      \
    \  } else if (grades[i] > 1.3) {\n            letter_grade[i] <- 'C-'\n      \
    \  } else if (grades[i] > 1.0) {\n            letter_grade[i] <- 'D+'\n      \
    \  } else if (grades[i] > 0.7) {\n            letter_grade[i] <- 'D'\n       \
    \ } else if (grades[i] > 0.0) {\n            letter_grade[i] <- 'D-'\n       \
    \ } else {\n            letter_grade[i] <- 'E'\n        }\n    }\n    return(letter_grade)\n\
    }\n", "\n  letter_grades <- c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"\
    C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n  numeric_grades <- c(4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0)\n  lapply(grades,\
    \ function(grade) {\n    letter_grades[which(numeric_grades > grade)[1]]\n  })\n\
    }\n", "\n  grades[grades == 4.0] <- 'A+'\n  grades[grades > 3.7] <- 'A'\n  grades[grades\
    \ > 3.3] <- 'A-'\n  grades[grades > 3.0] <- 'B+'\n  grades[grades > 2.7] <- 'B'\n\
    \  grades[grades > 2.3] <- 'B-'\n  grades[grades > 2.0] <- 'C+'\n  grades[grades\
    \ > 1.7] <- 'C'\n  grades[grades > 1.3] <- 'C-'\n  grades[grades > 1.0] <- 'D+'\n\
    \  grades[grades > 0.7] <- 'D'\n  grades[grades > 0.0] <- 'D-'\n  grades[grades\
    \ == 0.0] <- 'E'\n  \n  return(grades)\n}\n\nnumerical_letter_grade(c(4.0, 3,\
    \ 1.7, 2, 3.5))\n", "\n    grades <- grades*10\n\n    grades[grades < 0] <- 0\n\
    \    grades[grades > 40] <- 40\n\n    grades <- grades %/% 4\n    grades <- grades\
    \ + 1\n\n    return(grades)\n}\n\nletters <- c('E', 'D-', 'D', 'D+', 'C-', 'C',\
    \ 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+')\n\ngrades_to_letters <- function(grades)\
    \ {\n    letters_grades <- letters[numerical_letter_grade(grades)]\n    return(letters_grades)\n\
    }\n", "\n    letter_grades <- character(length(grades))\n    for (i in 1:length(grades))\
    \ {\n        if (grades[i] > 4.0) {\n            letter_grades[i] <- 'A+'\n  \
    \      } else if (grades[i] > 3.7) {\n            letter_grades[i] <- 'A'\n  \
    \      } else if (grades[i] > 3.3) {\n            letter_grades[i] <- 'A-'\n \
    \       } else if (grades[i] > 3.0) {\n            letter_grades[i] <- 'B+'\n\
    \        } else if (grades[i] > 2.7) {\n            letter_grades[i] <- 'B'\n\
    \        } else if (grades[i] > 2.3) {\n            letter_grades[i] <- 'B-'\n\
    \        } else if (grades[i] > 2.0) {\n            letter_grades[i] <- 'C+'\n\
    \        } else if (grades[i] > 1.7) {\n            letter_grades[i] <- 'C'\n\
    \        } else if (grades[i] > 1.3) {\n            letter_grades[i] <- 'C-'\n\
    \        } else if (grades[i] > 1.0) {\n            letter_grades[i] <- 'D+'\n\
    \        } else if (grades[i] > 0.7) {\n            letter_grades[i] <- 'D'\n\
    \        } else if (grades[i] > 0.0) {\n            letter_grades[i] <- 'D-'\n\
    \        } else {\n            letter_grades[i] <- 'E'\n        }\n    }\n   \
    \ return(letter_grades)\n}\n", "\n  grades <- gsub(\"\\\\+\", \"plus\", grades)\n\
    \  grades <- gsub(\"-\", \"minus\", grades)\n  grades <- gsub(\"\\\\.\", \"point\"\
    , grades)\n  grades <- gsub(\"\\\\A\", \"\", grades)\n  return(grades)\n}\n\n\
    numerical_to_letter_grade <- function(grade) {\n  if (grade >= 4.0) {\n    return(\"\
    Aplus\")\n  } else if (grade > 3.7) {\n    return(\"A\")\n  } else if (grade >\
    \ 3.3) {\n    return(\"Aminus\")\n  } else if (grade > 3.0) {\n    return(\"Bplus\"\
    )\n  } else if (grade > 2.7) {\n    return(\"B\")\n  } else if (grade > 2.3) {\n\
    \    return(\"Bminus\")\n  } else if (grade > 2.0) {\n    return(\"Cplus\")\n\
    \  } else if (grade > 1.7) {\n    return(\"C\")\n  } else if (grade > 1.3) {\n\
    \    return(\"Cminus\")\n  } else if (grade > 1.0) {\n    return(\"Dplus\")\n\
    \  } else if (grade > 0.7) {\n    return(\"D\")\n  } else if (grade > 0.0) {\n\
    \    return(\"Dminus\")\n  } else {\n    return(\"E\")\n  }\n}\n\ngrade_equation\
    \ <- function(grades) {\n  grades <- as.vector(numerical_letter_grade(grades))\n\
    \  grades <- as.numeric(grades)\n  return(sapply(grades, numerical_to_letter_grade))\n\
    }", "\n  vector <- rep(0, length(grades))\n  for (i in 1:length(grades)) {\n \
    \   if (grades[i] >= 4.0) {\n      vector[i] <- 'A+'\n    } else if (grades[i]\
    \ > 3.7) {\n      vector[i] <- 'A'\n    } else if (grades[i] > 3.3) {\n      vector[i]\
    \ <- 'A-'\n    } else if (grades[i] > 3.0) {\n      vector[i] <- 'B+'\n    } else\
    \ if (grades[i] > 2.7) {\n      vector[i] <- 'B'\n    } else if (grades[i] > 2.3)\
    \ {\n      vector[i] <- 'B-'\n    } else if (grades[i] > 2.0) {\n      vector[i]\
    \ <- 'C+'\n    } else if (grades[i] > 1.7) {\n      vector[i] <- 'C'\n    } else\
    \ if (grades[i] > 1.3) {\n      vector[i] <- 'C-'\n    } else if (grades[i] >\
    \ 1.0) {\n      vector[i] <- 'D+'\n    } else if (grades[i] > 0.7) {\n      vector[i]\
    \ <- 'D'\n    } else if (grades[i] > 0.0) {\n      vector[i] <- 'D-'\n    } else\
    \ {\n      vector[i] <- 'E'\n    }\n  }\n  return(vector)\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n ", "\n  letter_grade <- c()\n  for (i in grades) {\n    if\
    \ (i >= 4.0) {\n      letter_grade <- c(letter_grade, 'A+')\n    } else if (i\
    \ >= 3.7) {\n      letter_grade <- c(letter_grade, 'A')\n    } else if (i >= 3.3)\
    \ {\n      letter_grade <- c(letter_grade, 'A-')\n    } else if (i >= 3.0) {\n\
    \      letter_grade <- c(letter_grade, 'B+')\n    } else if (i >= 2.7) {\n   \
    \   letter_grade <- c(letter_grade, 'B')\n    } else if (i >= 2.3) {\n      letter_grade\
    \ <- c(letter_grade, 'B-')\n    } else if (i >= 2.0) {\n      letter_grade <-\
    \ c(letter_grade, 'C+')\n    } else if (i >= 1.7) {\n      letter_grade <- c(letter_grade,\
    \ 'C')\n    } else if (i >= 1.3) {\n      letter_grade <- c(letter_grade, 'C-')\n\
    \    } else if (i >= 1.0) {\n      letter_grade <- c(letter_grade, 'D+')\n   \
    \ } else if (i >= 0.7) {\n      letter_grade <- c(letter_grade, 'D')\n    } else\
    \ if (i >= 0.0) {\n      letter_grade <- c(letter_grade, 'D-')\n    } else {\n\
    \      letter_grade <- c(letter_grade, 'E')\n    }\n  }\n  return(letter_grade)\n\
    }\n", "\n  letter_grades <- vector()\n  for (i in grades) {\n    if (i >= 4.0)\
    \ {\n      letter_grades <- c(letter_grades, 'A+')\n    } else if (i > 3.7) {\n\
    \      letter_grades <- c(letter_grades, 'A')\n    } else if (i > 3.3) {\n   \
    \   letter_grades <- c(letter_grades, 'A-')\n    } else if (i > 3.0) {\n     \
    \ letter_grades <- c(letter_grades, 'B+')\n    } else if (i > 2.7) {\n      letter_grades\
    \ <- c(letter_grades, 'B')\n    } else if (i > 2.3) {\n      letter_grades <-\
    \ c(letter_grades, 'B-')\n    } else if (i > 2.0) {\n      letter_grades <- c(letter_grades,\
    \ 'C+')\n    } else if (i > 1.7) {\n      letter_grades <- c(letter_grades, 'C')\n\
    \    } else if (i > 1.3) {\n      letter_grades <- c(letter_grades, 'C-')\n  \
    \  } else if (i > 1.0) {\n      letter_grades <- c(letter_grades, 'D+')\n    }\
    \ else if (i > 0.7) {\n      letter_grades <- c(letter_grades, 'D')\n    } else\
    \ if (i > 0.0) {\n      letter_grades <- c(letter_grades, 'D-')\n    } else {\n\
    \      letter_grades <- c(letter_grades, 'E')\n    }\n  }\n  return(letter_grades)\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))", "\n  # your code goes here\n\
    \  letters = c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\", \"E\")\n  grades <- cut(grades, c(0,1,1.3,1.7,2,2.3,2.7,3,3.3,3.7,4),\
    \ labels = letters)\n  grades\n}\n", "\n    grades <- as.numeric(grades)\n   \
    \ grades_letter <- vector()\n    for (i in 1:length(grades)) {\n        if (grades[i]\
    \ == 4.0) {\n            grades_letter[i] <- 'A+'\n        } else if (grades[i]\
    \ > 3.7) {\n            grades_letter[i] <- 'A'\n        } else if (grades[i]\
    \ > 3.3) {\n            grades_letter[i] <- 'A-'\n        } else if (grades[i]\
    \ > 3.0) {\n            grades_letter[i] <- 'B+'\n        } else if (grades[i]\
    \ > 2.7) {\n            grades_letter[i] <- 'B'\n        } else if (grades[i]\
    \ > 2.3) {\n            grades_letter[i] <- 'B-'\n        } else if (grades[i]\
    \ > 2.0) {\n            grades_letter[i] <- 'C+'\n        } else if (grades[i]\
    \ > 1.7) {\n            grades_letter[i] <- 'C'\n        } else if (grades[i]\
    \ > 1.3) {\n            grades_letter[i] <- 'C-'\n        } else if (grades[i]\
    \ > 1.0) {\n            grades_letter[i] <- 'D+'\n        } else if (grades[i]\
    \ > 0.7) {\n            grades_letter[i] <- 'D'\n        } else if (grades[i]\
    \ > 0.0) {\n            grades_letter[i] <- 'D-'\n        } else {\n         \
    \   grades_letter[i] <- 'E'\n        }\n    }\n    return(grades_letter)\n}\n",
  "\n  cut(grades,\n      breaks = c(-Inf, 0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7,\
    \ 3.0, 3.3, 3.7, 4.0, Inf),\n      labels = c('E', 'D-', 'D+', 'C-', 'C', 'C+',\
    \ 'B-', 'B', 'B+', 'A-', 'A', 'A+'))\n}\n", "\n    if (grades < 1.0) {\n     \
    \   return(0)\n    } else if (grades > 1.7) {\n        return(1)\n    } else if\
    \ (grades > 2.0) {\n        return(2)\n    } else if (grades > 2.3) {\n      \
    \  return(3)\n    } else if (grades > 2.7) {\n        return(4)\n    } else if\
    \ (grades > 3.0) {\n        return(5)\n    } else if (grades > 3.3) {\n      \
    \  return(6)\n    } else if (grades > 3.7) {\n        return(7)\n    } else if\
    \ (grades > 4.0) {\n        return(8)\n    } else {\n        return(9)\n    }\n\
    }\n\nnumerical_letter_grade_vector <- function(grades) {\n    numerical_letter_grade_vector\
    \ <- numeric(length(grades))\n    for (i in 1:length(grades)) {\n        numerical_letter_grade_vector[i]\
    \ <- numerical_letter_grade(grades[i])\n    }\n    return(numerical_letter_grade_vector)\n\
    }\n\nletter_grade <- function(grades) {\n    letter_grade <- character(length(grades))\n\
    \    for (i in 1:length(grades)) {\n        letter_grade[i] <- letter_grade_table[numerical_letter_grade(grades[i])]\n\
    \    }\n    return(letter_grade)\n}\n", "\n    return(ifelse(grades >= 4.0, 'A+',\n\
    \                  ifelse(grades >= 3.7, 'A',\n                         ifelse(grades\
    \ >= 3.3, 'A-',\n                                ifelse(grades >= 3.0, 'B+',\n\
    \                                       ifelse(grades >= 2.7, 'B',\n         \
    \                                     ifelse(grades >= 2.3, 'B-',\n          \
    \                                           ifelse(grades >= 2.0, 'C+',\n    \
    \                                                        ifelse(grades >= 1.7,\
    \ 'C',\n                                                                   ifelse(grades\
    \ >= 1.3, 'C-',\n                                                            \
    \              ifelse(grades >= 1.0, 'D+',\n                                 \
    \                                                ifelse(grades >= 0.7, 'D',\n\
    \                                                                            \
    \            ifelse(grades >= 0.0, 'D-', 'E'))))))))))))))\n}\n\ngrades = c(4.0,\
    \ 3, 1.7, 2, 3.5)\n\nprint(sprintf('Letter grade for %s is %s', toString(grades),\
    \ toString(numerical_letter_grade(grades))))\n", "\n  if (grades == 4.0) {\n \
    \   letter_grade <- 'A+'\n  } else if (grades > 3.7) {\n    letter_grade <- 'A'\n\
    \  } else if (grades > 3.3) {\n    letter_grade <- 'A-'\n  } else if (grades >\
    \ 3.0) {\n    letter_grade <- 'B+'\n  } else if (grades > 2.7) {\n    letter_grade\
    \ <- 'B'\n  } else if (grades > 2.3) {\n    letter_grade <- 'B-'\n  } else if\
    \ (grades > 2.0) {\n    letter_grade <- 'C+'\n  } else if (grades > 1.7) {\n \
    \   letter_grade <- 'C'\n  } else if (grades > 1.3) {\n    letter_grade <- 'C-'\n\
    \  } else if (grades > 1.0) {\n    letter_grade <- 'D+'\n  } else if (grades >\
    \ 0.7) {\n    letter_grade <- 'D'\n  } else if (grades > 0.0) {\n    letter_grade\
    \ <- 'D-'\n  } else {\n    letter_grade <- 'E'\n  }\n  return(letter_grade)\n\
    }\n\ngrade_equation <- function(grades) {\n  for (i in 1:length(grades)) {\n \
    \   letter_grade <- numerical_letter_grade(grades[i])\n    print(letter_grade)\n\
    \  }\n}\n\ngrade_equation(c(4.0, 3, 1.7, 2, 3.5))\n", "\n  grades <- c(4.0, 3,\
    \ 1.7, 2, 3.5)\n  output <- c()\n  for (grade in grades) {\n    if (grade > 4.0)\
    \ {\n      output <- c(output, 'A+')\n    } else if (grade > 3.7) {\n      output\
    \ <- c(output, 'A')\n    } else if (grade > 3.3) {\n      output <- c(output,\
    \ 'A-')\n    } else if (grade > 3.0) {\n      output <- c(output, 'B+')\n    }\
    \ else if (grade > 2.7) {\n      output <- c(output, 'B')\n    } else if (grade\
    \ > 2.3) {\n      output <- c(output, 'B-')\n    } else if (grade > 2.0) {\n \
    \     output <- c(output, 'C+')\n    } else if (grade > 1.7) {\n      output <-\
    \ c(output, 'C')\n    } else if (grade > 1.3) {\n      output <- c(output, 'C-')\n\
    \    } else if (grade > 1.0) {\n      output <- c(output, 'D+')\n    } else if\
    \ (grade > 0.7) {\n      output <- c(output, 'D')\n    } else if (grade > 0.0)\
    \ {\n      output <- c(output, 'D-')\n    } else {\n      output <- c(output,\
    \ 'E')\n    }\n  }\n  return(output)\n}\n", "\n\tgrades_list <- c()\n\tfor (grade\
    \ in grades) {\n\t\tif (grade >= 4.0) {\n\t\t\tgrades_list <- c(grades_list, 'A+')\n\
    \t\t} else if (grade >= 3.7) {\n\t\t\tgrades_list <- c(grades_list, 'A')\n\t\t\
    } else if (grade >= 3.3) {\n\t\t\tgrades_list <- c(grades_list, 'A-')\n\t\t} else\
    \ if (grade >= 3.0) {\n\t\t\tgrades_list <- c(grades_list, 'B+')\n\t\t} else if\
    \ (grade >= 2.7) {\n\t\t\tgrades_list <- c(grades_list, 'B')\n\t\t} else if (grade\
    \ >= 2.3) {\n\t\t\tgrades_list <- c(grades_list, 'B-')\n\t\t} else if (grade >=\
    \ 2.0) {\n\t\t\tgrades_list <- c(grades_list, 'C+')\n\t\t} else if (grade >= 1.7)\
    \ {\n\t\t\tgrades_list <- c(grades_list, 'C')\n\t\t} else if (grade >= 1.3) {\n\
    \t\t\tgrades_list <- c(grades_list, 'C-')\n\t\t} else if (grade >= 1.0) {\n\t\t\
    \tgrades_list <- c(grades_list, 'D+')\n\t\t} else if (grade >= 0.7) {\n\t\t\t\
    grades_list <- c(grades_list, 'D')\n\t\t} else if (grade >= 0.0) {\n\t\t\tgrades_list\
    \ <- c(grades_list, 'D-')\n\t\t} else {\n\t\t\tgrades_list <- c(grades_list, 'E')\n\
    \t\t}\n\t}\n\treturn(grades_list)\n}\n", "\n    letter_grades <- c()\n    for\
    \ (i in 1:length(grades)) {\n        if (grades[i] == 4.0) {\n            letter_grades\
    \ <- c(letter_grades, 'A+')\n        } else if (grades[i] > 3.7) {\n         \
    \   letter_grades <- c(letter_grades, 'A')\n        } else if (grades[i] > 3.3)\
    \ {\n            letter_grades <- c(letter_grades, 'A-')\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades <- c(letter_grades, 'B+')\n        } else\
    \ if (grades[i] > 2.7) {\n            letter_grades <- c(letter_grades, 'B')\n\
    \        } else if (grades[i] > 2.3) {\n            letter_grades <- c(letter_grades,\
    \ 'B-')\n        } else if (grades[i] > 2.0) {\n            letter_grades <- c(letter_grades,\
    \ 'C+')\n        } else if (grades[i] > 1.7) {\n            letter_grades <- c(letter_grades,\
    \ 'C')\n        } else if (grades[i] > 1.3) {\n            letter_grades <- c(letter_grades,\
    \ 'C-')\n        } else if (grades[i] > 1.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D+')\n        } else if (grades[i] > 0.7) {\n            letter_grades <- c(letter_grades,\
    \ 'D')\n        } else if (grades[i] > 0.0) {\n            letter_grades <- c(letter_grades,\
    \ 'D-')\n        } else {\n            letter_grades <- c(letter_grades, 'E')\n\
    \        }\n    }\n    return(letter_grades)\n}\n", "\n  # YOUR CODE HERE\n}\n",
  "\n  new_grades <- c()\n  for (i in 1:length(grades)) {\n    if (grades[i] == 4.0)\
    \ {\n      new_grades <- c(new_grades, 'A+')\n    } else if (grades[i] > 3.7)\
    \ {\n      new_grades <- c(new_grades, 'A')\n    } else if (grades[i] > 3.3) {\n\
    \      new_grades <- c(new_grades, 'A-')\n    } else if (grades[i] > 3.0) {\n\
    \      new_grades <- c(new_grades, 'B+')\n    } else if (grades[i] > 2.7) {\n\
    \      new_grades <- c(new_grades, 'B')\n    } else if (grades[i] > 2.3) {\n \
    \     new_grades <- c(new_grades, 'B-')\n    } else if (grades[i] > 2.0) {\n \
    \     new_grades <- c(new_grades, 'C+')\n    } else if (grades[i] > 1.7) {\n \
    \     new_grades <- c(new_grades, 'C')\n    } else if (grades[i] > 1.3) {\n  \
    \    new_grades <- c(new_grades, 'C-')\n    } else if (grades[i] > 1.0) {\n  \
    \    new_grades <- c(new_grades, 'D+')\n    } else if (grades[i] > 0.7) {\n  \
    \    new_grades <- c(new_grades, 'D')\n    } else if (grades[i] > 0.0) {\n   \
    \   new_grades <- c(new_grades, 'D-')\n    } else {\n      new_grades <- c(new_grades,\
    \ 'E')\n    }\n  }\n  return(new_grades)\n}\n\nnumerical_letter_grade(c(4.0, 3,\
    \ 1.7, 2, 3.5))", "\n  ifelse(grades == 4.0, \"A+\", \n    ifelse(grades > 3.7,\
    \ \"A\", \n      ifelse(grades > 3.3, \"A-\", \n        ifelse(grades > 3.0, \"\
    B+\", \n          ifelse(grades > 2.7, \"B\", \n            ifelse(grades > 2.3,\
    \ \"B-\", \n              ifelse(grades > 2.0, \"C+\", \n                ifelse(grades\
    \ > 1.7, \"C\", \n                  ifelse(grades > 1.3, \"C-\", \n          \
    \          ifelse(grades > 1.0, \"D+\", \n                      ifelse(grades\
    \ > 0.7, \"D\", \n                        ifelse(grades > 0.0, \"D-\", \"E\"))))))))))))\n\
    }\n", "\n    grades_letter <- character(0)\n    for (grade in grades) {\n    \
    \    if (grade == 4.0) {\n            grades_letter <- c(grades_letter, 'A+')\n\
    \        } else if (grade > 3.7) {\n            grades_letter <- c(grades_letter,\
    \ 'A')\n        } else if (grade > 3.3) {\n            grades_letter <- c(grades_letter,\
    \ 'A-')\n        } else if (grade > 3.0) {\n            grades_letter <- c(grades_letter,\
    \ 'B+')\n        } else if (grade > 2.7) {\n            grades_letter <- c(grades_letter,\
    \ 'B')\n        } else if (grade > 2.3) {\n            grades_letter <- c(grades_letter,\
    \ 'B-')\n        } else if (grade > 2.0) {\n            grades_letter <- c(grades_letter,\
    \ 'C+')\n        } else if (grade > 1.7) {\n            grades_letter <- c(grades_letter,\
    \ 'C')\n        } else if (grade > 1.3) {\n            grades_letter <- c(grades_letter,\
    \ 'C-')\n        } else if (grade > 1.0) {\n            grades_letter <- c(grades_letter,\
    \ 'D+')\n        } else if (grade > 0.7) {\n            grades_letter <- c(grades_letter,\
    \ 'D')\n        } else if (grade > 0.0) {\n            grades_letter <- c(grades_letter,\
    \ 'D-')\n        } else {\n            grades_letter <- c(grades_letter, 'E')\n\
    \        }\n    }\n    return(grades_letter)\n}\n\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n\nletter_grade <- function(grades) {\n    grades_letter <-\
    \ character(0)\n    for (grade in grades) {\n        if (grade == 4.0) {\n   \
    \         grades_letter <- c(grades_letter, 'A+')\n        } else if (grade ==\
    \ 3.7) {\n            grades_letter <- c(grades_letter, 'A')\n", "\n  grades_letter\
    \ <- c(\n    \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\", \"E\"\n  )\n  ifelse(grades >= 4.0, grades_letter[1],\n\
    \         ifelse(grades >= 3.7, grades_letter[2],\n                ifelse(grades\
    \ >= 3.3, grades_letter[3],\n                       ifelse(grades >= 3.0, grades_letter[4],\n\
    \                              ifelse(grades >= 2.7, grades_letter[5],\n     \
    \                                ifelse(grades >= 2.3, grades_letter[6],\n   \
    \                                         ifelse(grades >= 2.0, grades_letter[7],\n\
    \                                                   ifelse(grades >= 1.7, grades_letter[8],\n\
    \                                                          ifelse(grades >= 1.3,\
    \ grades_letter[9],\n                                                        \
    \         ifelse(grades >= 1.0, grades_letter[10],\n                         \
    \                                               ifelse(grades >= 0.7, grades_letter[11],\n\
    \                                                                            \
    \   ifelse(grades >= 0.0, grades_letter[12],\n                               \
    \                                                       grades_letter[13]\n  \
    \                                                                            \
    \ )\n                                                                        )\n\
    \                                                                 )\n        \
    \                                                  )\n                       \
    \                            )\n                                            )\n\
    \                                     )\n                              )\n   \
    \                    )\n                )\n         )\n  )\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
