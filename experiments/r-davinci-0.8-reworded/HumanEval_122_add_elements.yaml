name: HumanEval_122_add_elements
language: r
prompt: "# Given a non-empty vector of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\n# >>> add_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n# 24\n# Constraints:\n\
  # 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nadd_elements <- function(arr,\
  \ k) {"
tests: "test_humaneval <- function() {\ncandidate <- add_elements\n    if(!identical(candidate(c(1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99), 3), -4)){quit('no', 1)}\n    if(!identical(candidate(c(111,\
  \ 121, 3, 4000, 5, 6), 2), 0)){quit('no', 1)}\n    if(!identical(candidate(c(11,\
  \ 21, 3, 90, 5, 6, 7, 8, 9), 4), 125)){quit('no', 1)}\n    if(!identical(candidate(c(111,\
  \ 21, 3, 4000, 5, 6, 7, 8, 9), 4), 24)){quit('no', 1)}\n    if(!identical(candidate(c(1),\
  \ 1), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  k <- min(k, length(arr))\n  sum(head(arr, k)[nchar(head(arr, k))\
    \ <= 2])\n}\nadd_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n", "\n  sum(na.omit(as.numeric(substr(arr,\
    \ 1, 2))))\n}\n\nadd_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n", "\n \
    \   return(sum(arr[arr < 100])[1:k])\n}\n", "\n    sum_elements <- 0\n    for\
    \ (i in 1:k) {\n        if (nchar(arr[i]) <= 2) {\n            sum_elements <-\
    \ sum_elements + arr[i]\n        }\n    }\n    return(sum_elements)\n}\n", "\n\
    \  arr <- arr[arr < 100]\n  arr[arr > 10] <- 10\n  return(sum(arr[1:k]))\n}",
  "\n    sum(arr[arr < 100][1:k])\n}\n", "\n  n_vec <- c()\n  for (n in arr) {\n \
    \   if (n >= 10 & n < 100) {\n      n_vec <- c(n_vec, n)\n    }\n  }\n  return(sum(n_vec[1:k]))\n\
    }", "\n  \n  two_digit_vec <- c()\n  for (i in 1:k) {\n    if (arr[i] < 100) {\n\
    \      two_digit_vec <- c(two_digit_vec, arr[i])\n    }\n  }\n  \n  sum(two_digit_vec)\n\
    }\n ", "\n  # sum(ifelse(nchar(arr[1:k]) <= 2, arr[1:k], 0))\n  sum(arr[1:k][nchar(arr[1:k])\
    \ <= 2])\n}", "\n  sum(apply(arr[1:k], function(x) ifelse(x >= 100, 0, x)))\n\
    }\n", "\n  counter <- 0\n  for (i in 1:k) {\n    if (nchar(arr[i]) <= 2) {\n \
    \     counter <- counter + arr[i]\n    }\n  }\n  return(counter)\n}", "\n  # TODO\n\
    }\n ", "\n  # your code here\n}\n ", "\n  sum(subset(arr, arr < 100))\n}\n\nadd_elements(c(111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n", "\n    stopifnot(length(arr) > 0)\n    stopifnot(k\
    \ <= length(arr))\n    sum(arr[arr < 100][1:k])\n}\n", "\n    sum(arr[as.numeric(substr(arr,\
    \ 1, 1)) < 3 & as.numeric(substr(arr, 1, 1)) > 0], na.rm = TRUE) +\n        sum(arr[as.numeric(substr(arr,\
    \ 1, 2)) > 99], na.rm = TRUE)\n}\nadd_elements(c(111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9), 4)\n", "\n  return(sum(as.numeric(substr(arr, 1, 2)))[1:k])\n}\nadd_elements(c(111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n ", "\n  sum(ifelse(nchar(arr) <= 2, arr, 0)[1:k])\n\
    }\n\narr <- c(111, 21, 3, 4000, 5, 6, 7, 8, 9)\nk <- 4\nadd_elements(arr, k)\n",
  "\n  # sum(arr[arr < 100][1:k])\n  #sum(arr[arr < 100][1:min(k, length(arr[arr <\
    \ 100]))])\n  sum(arr[arr < 100][seq(1, min(k, length(arr[arr < 100])))])\n}",
  "\n  sum(unlist(lapply(arr[1:k], function(x) if (nchar(x) <= 2) x else NA)))\n}\n\
    add_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n"]
stop_tokens:
- "\n#"
- "\n```"
