name: HumanEval_27_flip_case
language: r
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\nflip_case <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- flip_case\n    if(!identical(candidate(''),\
  \ '')){quit('no', 1)}\n    if(!identical(candidate('Hello!'), 'hELLO!')){quit('no',\
  \ 1)}\n    if(!identical(candidate('These violent delights have violent ends'),\
  \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  #TODO: Flip case in string\n  return(string)\n}\n", "\n  string\
    \ <- ifelse(string == tolower(string), toupper(string), tolower(string))\n  return(string)\n\
    }", "\n  flipped <- str_replace_all(string, \"[a-z]\", function(x) str_to_upper(x))\n\
    \  flipped <- str_replace_all(flipped, \"[A-Z]\", function(x) str_to_lower(x))\n\
    \  return(flipped)\n}\n\nflip_case(\"The Quick Brown Fox\")\n", "\n  # type your\
    \ code here\n  string <- strsplit(string,split=\"\")[[1]]\n  string <- sapply(string,function(x)\
    \ {\n    if (is.na(grepl(\"[[:lower:]]\",x))) {\n      return(x)\n    } else {\n\
    \      return(toupper(x))\n    }\n  })\n  paste(string,collapse=\"\")\n}\n\nflip_case('Hello')\n",
  "\n  string_chars <- unlist(strsplit(string, \"\"))\n  to_upper <- which(string_chars\
    \ %in% letters[lower.case])\n  to_lower <- which(string_chars %in% letters[upper.case])\n\
    \  string_chars[to_upper] <- toupper(string_chars[to_upper])\n  string_chars[to_lower]\
    \ <- tolower(string_chars[to_lower])\n  return(paste(string_chars, collapse =\
    \ \"\"))\n}\n", "\n    string <- gsub(\"[a-z]\", \"[A-Z]\", string)\n    string\
    \ <- gsub(\"[A-Z]\", \"[a-z]\", string)\n    return(string)\n}\n", "\n    return(gsub('[[:upper:]]',\
    \ '{{}}', tolower(string), fixed = TRUE))\n}\n", "\n  s <- strsplit(string, \"\
    \")[[1]]\n  for (i in 1:length(s)) {\n    if (s[i] == toupper(s[i])) {\n     \
    \ s[i] <- tolower(s[i])\n    } else {\n      s[i] <- toupper(s[i])\n    }\n  }\n\
    \  return(paste(s, collapse = \"\"))\n}\n\nflip_case(\"Hello\")\nflip_case(\"\
    hELLO\")\n", "\n  string <- strsplit(string, split = \"\")[[1]]\n  res <- []\n\
    \  for (letter in string) {\n    if (letter %in% LETTERS) {\n      res <- c(res,\
    \ tolower(letter))\n    } else {\n      res <- c(res, toupper(letter))\n    }\n\
    \  }\n  res <- paste(res, collapse = \"\")\n  return(res)\n}\nflip_case('Hello')\n",
  "\n  \n  # Init the result string\n  result <- \"\"\n  \n  # Loop the string\n \
    \ for (i in 1:nchar(string)) {\n    \n    # Get the current character\n    char\
    \ <- substr(string, i, i)\n    \n    # If the character is uppercase, flip it\
    \ to lowercase\n    if (char %in% letters) {\n      char <- tolower(char)\n  \
    \  }\n    \n    # If the character is lowercase, flip it to uppercase\n    else\
    \ if (char %in% LETTERS) {\n      char <- toupper(char)\n    }\n    \n    # Append\
    \ the character to the result string\n    result <- paste(result, char, sep =\
    \ \"\")\n  }\n  \n  # Return the result string\n  return(result)\n}\n", "\n  \
    \  toupper(string) <- strtrim(tolower(string))\n    return(string)\n}\n\nstring\
    \ <- \"Hello\"\nflip_case(string)", "\n  sapply(string, function(x) {\n    ifelse(x\
    \ == toupper(x), tolower(x), toupper(x))\n  })\n}\nflip_case('Hello')\n", "\n\
    \    # write your code here\n    string <- strsplit(string, split = \"\")[[1]]\n\
    \    # print(string)\n    string <- toupper(string)\n    string <- tolower(string)\n\
    \    string <- paste(string, collapse = \"\")\n    return(string)\n}\nflip_case(\"\
    Hello\")\n", "\n  \n  ### Replace with your code ###\n  \n}", "\n  gsub(\"[a-z]\"\
    , function(x) {\n    if (x == toupper(x)) {\n      return(tolower(x))\n    } else\
    \ {\n      return(toupper(x))\n    }\n  }, string)\n}\n\nflip_case(\"Hello\")\n",
  "\n    flip_case <- charToRaw(string)\n    vector_flip_case <- xcharToRaw(string)\n\
    \    vector_flip_case\n    for (i in 1:length(flip_case)) {\n        if (flip_case[i]\
    \ >= 65 && flip_case[i] <= 90) {\n            vector_flip_case[i] <- flip_case[i]\
    \ + 32\n        } else if (flip_case[i] >= 97 && flip_case[i] <= 122) {\n    \
    \        vector_flip_case[i] <- flip_case[i] - 32\n        }\n    }\n    rawToChar(vector_flip_case)\n\
    }\nflip_case('Hello')\n", "\n  str_to_upper(string)\n}\n", "\n  string <- strsplit(string,\
    \ \"\")[[1]]\n  for (i in 1:length(string)) {\n    if (string[i] %in% letters)\
    \ {\n      if (string[i] == toupper(string[i])) {\n        string[i] <- tolower(string[i])\n\
    \      } else {\n        string[i] <- toupper(string[i])\n      }\n    }\n  }\n\
    \  out <- paste(string, collapse = \"\")\n  return(out)\n}\n", "\n  pattern <-\
    \ \"[a-z]\"\n  string <- stringr::str_replace_all(string, pattern, toupper(string))\n\
    \  pattern <- \"[A-Z]\"\n  string <- stringr::str_replace_all(string, pattern,\
    \ tolower(string))\n  return(string)\n}\n\nflip_case('Hello')\n", "\n  swapper\
    \ <- function(x) {\n    if (x >= 'a' && x <= 'z') {\n      return(toupper(x))\n\
    \    } else if (x >= 'A' && x <= 'Z') {\n      return(tolower(x))\n    } else\
    \ {\n      return(x)\n    }\n  }\n  return(sapply(string, swapper))\n}\n", "\n\
    \    mapply(function(x) ifelse(x>='a' & x<='z', toupper(x), tolower(x)), string)\n\
    }\n", "\n  if (is.null(string)) {\n    return(string)\n  }\n  gsub('([[:lower:]])',\
    \ '`1', string, perl = TRUE)\n}\n", "\n    string <- strsplit(string, '')[[1]]\n\
    \    for (i in 1:length(string)) {\n        if (string[i] %in% letters) {\n  \
    \          string[i] <- string[i]%%26 + 64\n        }\n    }\n    return(paste(string,\
    \ collapse = ''))\n}\n\nflip_case('Hello')\n", "\n    strsplit(string, \"\")[[1]]\
    \ %>%\n        sapply(function(s) {\n            if (tolower(s) == s) tolower(s)\
    \ else toupper(s)\n        }) %>%\n        paste(collapse = \"\")\n}\nflip_case(\"\
    Hello\")\nflip_case(\"hey there\")\nflip_case(\"HEY THERE\")", "\n    new.string\
    \ <- \"\"\n    for (letter in 1:nchar(string)) {\n        if (is.na(strtoi(substr(string,\
    \ letter, letter)))) {\n            # do nothing\n        } else {\n         \
    \   new.string <- paste(new.string, strtoi(substr(string, letter, letter)), sep\
    \ = \"\")\n        }\n    }\n    return(new.string)\n}\n", "\n  str_to_upper(string)\
    \ <- str_to_lower(string)\n  str_to_lower(string) <- str_to_upper(string)\n  return(string)\n\
    }\n\nflip_case('Hello')\n", "\n  # Solution\n  }\n", "\n\tstrsplit(string, \"\"\
    )[[1]] %>% \n\t\tsapply(function(x) { \n\t\t\tifelse(x == toupper(x), tolower(x),\
    \ toupper(x))\n\t\t}) %>%\n\t\tunlist() %>%\n\t\tpaste(collapse = \"\")\n}", "\n\
    \    # Output is the initial string, but with each character changed according\
    \ to whether it is upper or lower case.\n    # This is done by (a) testing if\
    \ a character is upper case and (b) switching upper/lower case by subtracting\
    \ 32 from\n    # the ASCII value.\n    paste(sapply(string, function(letter) ifelse(letter\
    \ == toupper(letter), tolower(letter), toupper(letter))), collapse = \"\")\n}",
  "\n\tstring <- sapply(string, function(s) ifelse(s %in% LETTERS, tolower(s), toupper(s)))\n\
    \treturn(string)\n}\nflip_case(\"Hello\")\n", "\n  return(stringi::stri_trans_general(string,\
    \ 'lul'))\n}", "\n  string <- string\n  flip_case <- string\n  for (i in 1:length(string))\
    \ {\n    if (string[i] == toupper(string[i])) {\n      flip_case[i] <- tolower(string[i])\n\
    \    } else {\n      flip_case[i] <- toupper(string[i])\n    }\n  }\n  return(flip_case)\n\
    }", "\n  flip <- ''\n  for (i in 1:length(string)) {\n    if (is.na(string[i]))\n\
    \      next\n    else if (string[i] %in% letters) {\n      if (string[i] == toupper(string[i]))\n\
    \        flip <- paste(flip, tolower(string[i]), sep = '')\n      else\n     \
    \   flip <- paste(flip, toupper(string[i]), sep = '')\n    }\n    else\n     \
    \ flip <- paste(flip, string[i], sep = '')\n  }\n  return(flip)\n}\n\nflip_case('Hello')\n",
  "\n\treturn(chartr(paste(letters, LETTERS, sep = \"\"), paste(LETTERS, letters,\
    \ sep = \"\"), string))\n}", "\n  string_len <- nchar(string)\n  for (i in 1:string_len)\
    \ {\n    if (substr(string, i, i) == toupper(substr(string, i, i))) {\n      string\
    \ <- paste(substr(string, 1, i - 1), tolower(substr(string, i, i)), substr(string,\
    \ i + 1, string_len), sep = \"\")\n    } else {\n      string <- paste(substr(string,\
    \ 1, i - 1), toupper(substr(string, i, i)), substr(string, i + 1, string_len),\
    \ sep = \"\")\n    }\n  }\n  return(string)\n}\n", "\n  result <- tolower(string)\n\
    \  for (i in 1:nchar(string)) {\n    if (substr(string, i, i) == toupper(substr(string,\
    \ i, i))) {\n      result[i] <- tolower(substr(string, i, i))\n    } else {\n\
    \      result[i] <- toupper(substr(string, i, i))\n    }\n  }\n  return(result)\n\
    }\nflip_case('Hello')\n", "\n    return (unlist(sapply(string, switch, 1=tolower,\
    \ 2=toupper)))\n}\nflip_case('Hello')\nflip_case('hello')\n", "\n  return (gsub('.',\
    \ '\\\\U\\\\L', string))\n}\nflip_case('Hello')\n", "\n    string <- strsplit(string,\
    \ \"\")[[1]]\n    for (i in 1:length(string)) {\n        if (string[i] %in% LETTERS)\
    \ {\n            string[i] <- tolower(string[i])\n        } else {\n         \
    \   string[i] <- toupper(string[i])\n        }\n    }\n    return(paste(string,\
    \ collapse = \"\"))\n}\n", "\n  \n}\n", "\n  \"your code here\"\n}\nflip_case('Hello')",
  "\n    base::strsplit(string, '')[[1]] %>%\n        purrr::map(~gsub('.', '\\\\\
    U\\\\1', .x, perl = TRUE)) %>%\n        paste(collapse = '')\n}\n\nflip_case('Hello')\n",
  "\n  string <- chartr(c('a-z', 'A-Z'), c('A-Z', 'a-z'), string)\n  return(string)\n\
    }\n", "\n  word <- strsplit(string, \"\")[[1]]\n  for (i in 1:length(word)) {\n\
    \    if (is.lower(word[i])) {\n      word[i] <- toupper(word[i])\n    } else {\n\
    \      word[i] <- tolower(word[i])\n    }\n  }\n  return(paste(word, collapse\
    \ = \"\"))\n}\n", "\n  string <- strsplit(string, \"\")[[1]]\n  for (i in 1:length(string))\
    \ {\n    if (string[i] == toupper(string[i])) {\n      string[i] <- tolower(string[i])\n\
    \    } else {\n      string[i] <- toupper(string[i])\n    }\n  }\n  return(paste(string,\
    \ collapse = \"\"))\n}\nflip_case(\"Hello\")\n", "\n  string <- strsplit(string,\
    \ \"\")[[1]]\n  for (i in 1:length(string)) {\n    if (string[i] >= \"a\" & string[i]\
    \ <= \"z\") {\n      string[i] <- toupper(string[i])\n    } else if (string[i]\
    \ >= \"A\" & string[i] <= \"Z\") {\n      string[i] <- tolower(string[i])\n  \
    \  }\n  }\n  return(paste(string, collapse = \"\"))\n}\n ", "\n  sub(pattern =\
    \ \"[a-z]\", replacement = \"[[:lower:]]\", x = string)\n}\nflip_case('Hello')\n",
  "\n    new_string <- str_split(string, \"\")\n    new_string <- lapply(new_string,\
    \ function(x) {\n        if (str_detect(x, \"[a-z]\")) {\n            return(str_to_upper(x))\n\
    \        } else if (str_detect(x, \"[A-Z]\")) {\n            return(str_to_lower(x))\n\
    \        } else {\n            return(x)\n        }\n    })\n    return(paste(new_string,\
    \ collapse = \"\"))\n}\nflip_case(\"Hello\")\n", "\n  string <- gsub(\"[a-z]\"\
    ,\n                 function(x) { gsub(\"[a-z]\", \"[A-Z]\", x) },\n         \
    \        string)\n  string <- gsub(\"[A-Z]\",\n                 function(x) {\
    \ gsub(\"[A-Z]\", \"[a-z]\", x) },\n                 string)\n  return(string)\n\
    }\n", "\n  for (i in 1:nchar(string)) {\n    if (is.upper.char(substr(string,\
    \ i, i))) {\n      string[i] <- tolower(substr(string, i, i))\n    } else {\n\
    \      string[i] <- toupper(substr(string, i, i))\n    }\n  }\n  return(string)\n\
    }\nflip_case(\"Hello\")\n", "\n    sapply(string, function(x) {\n        if (is.na(x))\
    \ {\n            x\n        } else if (is.lower(x)) {\n            toupper(x)\n\
    \        } else {\n            tolower(x)\n        }\n    })\n}\n", "\n    # Remove\
    \ non-letter characters\n    string <- gsub(\"[[:punct:]]\", \"\", string)\n \
    \   # Check if character is letter\n    string <- ifelse(grepl(\"[[:alpha:]]\"\
    , string), TRUE, FALSE)\n    # Capitalize all letters\n    string <- toupper(string)\n\
    \    # Return flipped case string\n    return(string)\n}", "\n    # Code here\n\
    \    flipped <- gsub('([a-z]+)', '\\\\U\\\\1', string)\n    gsub('([A-Z]+)', '\\\
    \\L\\\\1', flipped)\n}\n\nflip_case('Hello')", "\n    if (is.character(string))\
    \ {\n        string <- toupper(string)\n        string <- gsub(\"[A-Z]\", function(x)\
    \ tolower(x), string)\n        return(string)\n    } else {\n        print(\"\
    input must be a string\")\n    }\n}\n", "\n    string <- strsplit(string, \"\"\
    )[[1]]\n    for (i in 1:length(string)) {\n        if (is.na(string[i])) {\n \
    \           string[i] <- \"\"\n        } else if (is.na(chartr(string[i], string[i],\
    \ \"Aa\"))) {\n            string[i] <- chartr(string[i], string[i], \"aA\")\n\
    \        } else {\n            string[i] <- chartr(string[i], string[i], \"Aa\"\
    )\n        }\n    }\n    return(paste(string, collapse = \"\"))\n}\n ", "\n  \
    \  # Convert to character array.\n    chars <- strsplit(string, \"\")[[1]]\n \
    \   # Swap case of each character.\n    for (i in 1:length(chars)) {\n       \
    \ chars[i] <- ifelse(chars[i] %in% letters,\n                           ifelse(chars[i]\
    \ %in% LETTERS,\n                                  tolower(chars[i]),\n      \
    \                            toupper(chars[i])),\n                           chars[i])\n\
    \    }\n    # Reconvert to string.\n    return(paste(chars, collapse=\"\"))\n\
    }\nflip_case('Hello')\n", "\n  string_vector <- strsplit(string, split = \"\"\
    )[[1]]\n  sapply(string_vector, function(x) ifelse(x == toupper(x), tolower(x),\
    \ toupper(x))) %>% paste(collapse = \"\")\n}\n", "\n    res = str_to_lower(string)\n\
    \    for (i in 1:nchar(string)) {\n        if (substr(string, i, i) != str_to_lower(substr(string,\
    \ i, i))) {\n            res = substr(res, 1, i-1) %>% str_c(substr(string, i,\
    \ i)) %>% str_c(substr(res, i+1, nchar(res)))\n        }\n    }\n    return(res)\n\
    }\n", "\n  # string <- tolower(string)\n  # which(string == 'A' | string == 'a')\n\
    \  # string[which(string == 'A' | string == 'a')] <- 'a'\n  # string[which(string\
    \ == 'B' | string == 'b')] <- 'b'\n  # print(string)\n  # return(string)\n  #\
    \ string <- toupper(string)\n  # print(string)\n  # return(string)\n  # string\
    \ <- tolower(string)\n  # print(string)\n  # return(string)\n  # string <- toupper(string)\n\
    \  # print(string)\n  # return(string)\n  # string <- tolower(string)\n  # string[which(string\
    \ == 'A' | string == 'a')] <- 'a'\n  # string[which(string == 'B' | string ==\
    \ 'b')] <- 'b'\n  # print(string)\n  # return(string)\n  # string <- toupper(string)\n\
    \  # string[which(string == 'A' | string == 'a')] <- 'a'\n  # string[which(string\
    \ == 'B' | string == 'b')] <- 'b'\n  # print(string)\n  # return(string)\n  #\
    \ string <- tolower(string)\n  # string[which(string == 'A' | string == 'a')]\
    \ <- 'A'\n  # string[which(string == 'B' | string == 'b')] <- 'B'\n  # print(string)\n\
    \  # return(string)\n  # string <- toupper(string)\n  # string[which(string ==\
    \ 'A' | string == 'a')] <- 'A'\n  # string[which(string == 'B' | string == 'b')]\
    \ <- 'B'\n  # print(string)\n  # return(string)\n  # string <- tolower(string)\n\
    \  # string[which(string == 'A' | string == 'a')] <- 'A'\n  # string[which(string\
    \ == 'B' | string == 'b')] <- 'B'\n  # string[which(string == 'C' | string ==\
    \ 'c", "\n  string <- sub(\"[a-z]\", \" \\\\L\\\\1\", string)\n  string <- sub(\"\
    [A-Z]\", \" \\\\L\\\\1\", string)\n  string <- sub(\" \", \"\", string)\n  return(string)\n\
    }\n", "\n  string <- strsplit(string, \"\")[[1]]\n  flip <- function(char) {\n\
    \    if (char %in% LETTERS) {\n      return(tolower(char))\n    } else {\n   \
    \   return(toupper(char))\n    }\n  }\n  sapply(string, flip) %>% paste(collapse\
    \ = \"\")\n}\n\nflip_case(\"Hello\")\n", "\n    string <- strsplit(string, '')[[1]]\n\
    \    for (i in 1:length(string)) {\n        if (is.lower(string[i])) {\n     \
    \       string[i] <- toupper(string[i])\n        } else {\n            string[i]\
    \ <- tolower(string[i])\n        }\n    }\n    return(paste(string, collapse =\
    \ ''))\n}\n", "\n  # Solution 1:\n  # new_string <- \"\"\n  # for (i in 1:nchar(string))\
    \ {\n  #   if (grepl(\"[[:lower:]]\", substr(string, i, i))) {\n  #     new_string\
    \ <- paste(new_string, toupper(substr(string, i, i)), sep = \"\")\n  #   } else\
    \ {\n  #     new_string <- paste(new_string, tolower(substr(string, i, i)), sep\
    \ = \"\")\n  #   }\n  # }\n  # new_string\n\n  # Solution 2:\n  # new_string <-\
    \ \"\"\n  # for (char in strsplit(string, \"\")[[1]]) {\n  #   if (grepl(\"[[:lower:]]\"\
    , char)) {\n  #     new_string <- paste(new_string, toupper(char), sep = \"\"\
    )\n  #   } else {\n  #     new_string <- paste(new_string, tolower(char), sep\
    \ = \"\")\n  #   }\n  # }\n  # new_string\n\n  # Solution 3:\n  # new_string <-\
    \ \"\"\n  # for (char in strsplit(string, \"\")[[1]]) {\n  #   if (grepl(\"[[:lower:]]\"\
    , char)) {\n  #     new_string <- paste(new_string, toupper(char), sep = \"\"\
    )\n  #   } else {\n  #     new_string <- paste(new_string, tolower(char), sep\
    \ = \"\")\n  #   }\n  # }\n  # new_string\n\n  # Solution 4:\n  # new_string <-\
    \ \"\"\n  # for (char in strsplit(string, \"\")[[1]]) {\n  #   if (grepl(\"[[:lower:]]\"\
    , char)) {\n  #     new_string <- paste(new_string, toupper(char), sep = \"\"\
    )\n  #   } else {\n  #     new_string <- paste(new_string, tolower(char), sep\
    \ = \"\")\n  #   }\n  # }\n  # new_string\n\n  # Solution 5:\n  # new_string <-\
    \ \"\"\n  # for (", "\n  letters <- stringsplit(string, \"\")[[1]]\n  ans <- \"\
    \"\n  for (letter in letters) {\n    if (letter == toupper(letter)) {\n      ans\
    \ <- paste(ans, tolower(letter), sep = \"\")\n    } else {\n      ans <- paste(ans,\
    \ toupper(letter), sep = \"\")\n    }\n  }\n  return(ans)\n}\n", "\n  # Make a\
    \ copy of the string\n  str <- string\n  # Update the copy, character by character\n\
    \  for (i in 1:nchar(str)) {\n    # If the character is a lowercase letter, make\
    \ it uppercase\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      str[i] <- toupper(str[i])\n\
    \    }\n    # If the character is an uppercase letter, make it lowercase\n   \
    \ else if (str[i] >= 'A' && str[i] <= 'Z') {\n      str[i] <- tolower(str[i])\n\
    \    }\n  }\n  # Return the copy\n  return(str)\n}\nflip_case('Hello')\n", "\n\
    \  string <- gsub(\"[a-z]\", function(a) {\n    if (a %in% LETTERS) {\n      return(tolower(a))\n\
    \    } else {\n      return(toupper(a))\n    }\n  }, string)\n  return(string)\n\
    }\n", "\n    # TODO: implement function\n}\n ", "\n  if(is.character(string))\
    \ {\n    string <- toupper(string)\n    string <- tolower(string)\n  }\n  return(string)\n\
    }\nflip_case('hELLO')\n", "\n  # use chartr to flip the case\n  chartr('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\
    \         'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n         string)\n\
    }\n", "\n    string2 <- nchar(string)\n    if (string2 == TRUE) {\n        return(toupper(string))\n\
    \    }\n    else if (string2 == FALSE) {\n        return(tolower(string))\n  \
    \  }\n}\nflip_case('hELLO')\n", "\n  string <- sapply(string, function(x) {\n\
    \    if (is.na(x)) {\n      return(x)\n    } else if (is.upper.char(x)) {\n  \
    \    return(tolower(x))\n    } else {\n      return(toupper(x))\n    }\n  })\n\
    \  return(string)\n}\n", "\n  string <- strsplit(string, split = \"\")[[1]]\n\
    \  for (i in 1:length(string)) {\n    if (string[i] == toupper(string[i])) {\n\
    \      string[i] <- tolower(string[i])\n    } else {\n      string[i] <- toupper(string[i])\n\
    \    }\n  }\n  return(paste(string, collapse = \"\"))\n}\n", "\n  string <- strsplit(string,\
    \ \"\")[[1]]\n  flipped <- c()\n  for (x in string) {\n    if (x == tolower(x))\
    \ {\n      flipped <- c(flipped, toupper(x))\n    } else {\n      flipped <- c(flipped,\
    \ tolower(x))\n    }\n  }\n  return(paste(flipped, collapse = \"\"))\n}\n", "\n\
    \    if (string == \"\")\n        return (string)\n    if (grepl(\"[[:lower:]]\"\
    , substring(string, 1, 1)))\n        return (paste(toupper(substring(string, 1,\
    \ 1)), flip_case(substring(string, 2, nchar(string))), sep = \"\"))\n    else\n\
    \        return (paste(tolower(substring(string, 1, 1)), flip_case(substring(string,\
    \ 2, nchar(string))), sep = \"\"))\n}\n", "\n  gsub(\"([A-Za-z])\", \"\\\\U\\\\\
    1\", string, perl = TRUE)\n}\n\nflip_case(\"Hello\")\n", "\n  return(tolower(toupper(string)))\n\
    }\n", "\n    gsub('[a-z]', '[A-Z]', gsub('[A-Z]', '[a-z]', string))\n}\nflip_case('Hello')\n",
  "\n  char_array <- strsplit(string, \"\")[[1]]\n  for (i in 1:length(char_array))\
    \ {\n    char_array[i] <- ifelse(\n      char_array[i] == tolower(char_array[i]),\n\
    \      toupper(char_array[i]),\n      tolower(char_array[i])\n    )\n  }\n  paste(char_array,\
    \ collapse = \"\")\n}\n", "\n  string <- strsplit(string, \"\")[[1]]\n  for (i\
    \ in 1:length(string)) {\n    if (grepl(\"[[:upper:]]\", string[i])) {\n     \
    \ string[i] <- tolower(string[i])\n    } else {\n      string[i] <- toupper(string[i])\n\
    \    }\n  }\n  paste(string, collapse = \"\")\n}\n", "\n  str_replace_all(string,\
    \ \"[[:lower:]]\", function(x) toupper(x))\n}\nflip_case('Hello')\n", "\n    char_v\
    \ <- unlist(strsplit(string, \"\"))\n    new_string <- paste(ifelse(char_v %in%\
    \ letters,\n                               ifelse(char_v %in% LETTERS, tolower(char_v),\
    \ toupper(char_v)), char_v), collapse = \"\")\n    return(new_string)\n}\n", "\n\
    \  sapply(strsplit(string, \"\"), function(x) {\n    sapply(x, function(y) {\n\
    \      if (y == toupper(y)) {\n        tolower(y)\n      } else {\n        toupper(y)\n\
    \      }\n    })\n  })\n}\n", "\n  if (all(string >= \"A\" & string <= \"Z\"))\
    \ return(tolower(string))\n  else if (all(string >= \"a\" & string <= \"z\"))\
    \ return(toupper(string))\n  else return(tolower(toupper(string)))\n}\nflip_case('Hello')\n",
  "\n    str_flip(string)\n}\n", "\n  string <- strsplit(string, \"\")[[1]]\n  for\
    \ (i in 1:length(string)) {\n    if (is.na(string[i])) {\n      string[i] <- \"\
    \ \"\n    } else if (string[i] == toupper(string[i])) {\n      string[i] <- tolower(string[i])\n\
    \    } else {\n      string[i] <- toupper(string[i])\n    }\n  }\n  return(paste(string,\
    \ collapse = \"\"))\n}\nflip_case(\"Hello\")\nflip_case(\"\")\n", "\n    str_flip(string)\n\
    }\nflip_case('Hello')\n", "\n  string <- gsub(\"[[:lower:]]\",\"\\\\U\\\\0\",string)\n\
    \  string <- gsub(\"[[:upper:]]\",\"\\\\L\\\\0\",string)\n  string\n}\n", "\n\
    \  sapply(strsplit(string, \"\"), function(x) str_to_upper(x[1]))\n}\n\nflip_case(\"\
    Hello\")\n", "\n    string %>%\n        str_to_lower() %>%\n        str_to_upper()\n\
    }\nflip_case('Hello')\nflip_case('hELLO')\n", "\n  # Use the `chartr` function\
    \ to replace all lower case characters with upper case, and\n  # vice versa.\n\
    \  string <- chartr('A-Za-z', 'a-zA-Z', string)\n  return(string)\n}\nflip_case('Hello')\n\
    flip_case('This is a Test')\n", "\n  string_as_list <- strsplit(string, \"\")[[1]]\n\
    \  for (i in 1:length(string_as_list)) {\n    if (is.na(string_as_list[i])) {\n\
    \      next\n    }\n    if (string_as_list[i] == toupper(string_as_list[i])) {\n\
    \      string_as_list[i] <- tolower(string_as_list[i])\n    } else {\n      string_as_list[i]\
    \ <- toupper(string_as_list[i])\n    }\n  }\n  string_as_list <- paste(string_as_list,\
    \ collapse = \"\")\n  return(string_as_list)\n}", "\n  # Replace this with your\
    \ code\n  sapply(string, function(c) {\n    if (is.lower(c)) {\n      toupper(c)\n\
    \    } else {\n      tolower(c)\n    }\n  })\n}\n\nflip_case(\"Hello\")\n\nflip_case(\"\
    aBc123!@#$%^&*()_+-={}|[]\\:;'<>?,./~`\")\n", "\n    # lower case\n    if (string\
    \ %in% charToRaw(c(\"0\" : \"9\", \"a\" : \"z\"))) {\n        toString(charToRaw(toupper(string)))\n\
    \    } else {\n        toString(charToRaw(tolower(string)))\n    }\n}\n", "\n\
    \  #string_flipped <- \"\"\n  #char_loc <- 1\n  #while (char_loc <= nchar(string))\
    \ {\n  #  char <- substr(string, char_loc, char_loc)\n  #  if (char %in% c(LETTERS))\
    \ {\n  #    if (char %in% LETTERS[LETTERS %in% LETTERS[char] + 32]) {\n  #   \
    \   string_flipped <- paste(string_flipped, LETTERS[char], sep = \"\")\n  #  \
    \  } else {\n  #      string_flipped <- paste(string_flipped, LETTERS[char], sep\
    \ = \"\")\n  #    }\n  #  } else {\n  #    string_flipped <- paste(string_flipped,\
    \ char, sep = \"\")\n  #  }\n  #  char_loc <- char_loc + 1\n  #}\n  #string_flipped\n\
    \  #Create a vector with the upper and lower case versions of each letter\n  flipped_chars\
    \ <- c(LETTERS, LETTERS[LETTERS %in% LETTERS[char] + 32])\n  #Find which characters\
    \ in the string are in this vector\n  char_index <- c(1:length(string))[string\
    \ %in% flipped_chars]\n  #Isolate the flipped characters and replace them with\
    \ the opposite\n  string[char_index] <- flipped_chars[flipped_chars %in% string[char_index]]\n\
    \  string\n}\n\nflip_case('Hello')\n", "\n  # Write your code here\n  string <-\
    \ strsplit(string, \"\")[[1]]\n  result <- \"\"\n  for (char in string) {\n  \
    \  if (char == toupper(char)) {\n      result <- paste(result, tolower(char),\
    \ sep = \"\")\n    } else {\n      result <- paste(result, toupper(char), sep\
    \ = \"\")\n    }\n  }\n  return(result)\n}\n", "\n  # Write code here.\n  return(NA)\n\
    }\n", "\n    string <- chartr(letters, paste(toupper(letters), tolower(letters),\
    \ sep = \"\"), string)\n    return(string)\n}\n", "\n  char <- strsplit(string,\
    \ \"\")[[1]]\n  chars <- sapply(char, function(x) {\n    if (x %in% letters) {\n\
    \      if (x == toupper(x)) {\n        return(tolower(x))\n      } else {\n  \
    \      return(toupper(x))\n      }\n    } else {\n      return(x)\n    }\n  })\n\
    \  return(paste(chars, collapse = \"\"))\n}\n\nflip_case('Hello')\n", "\n  string\
    \ <- strsplit(string, \"\")[[1]]\n  for (i in 1:length(string)) {\n    if (is.lower(string[i]))\
    \ {\n      string[i] <- toupper(string[i])\n    } else {\n      string[i] <- tolower(string[i])\n\
    \    }\n  }\n  return(paste(string, collapse = \"\"))\n}\n", "\n  string = gsub('[a-z]',\
    \ '[A-Z]', string)\n  string = gsub('[A-Z]', '[a-z]', string)\n  return(string)\n\
    }\n", "\n    string <- tolower(string)\n    string[string %in% letters] <- toupper(string[string\
    \ %in% letters])\n    return(string)\n}\nflip_case(\"Hello\")\n", "\n  # create\
    \ an empty string\n  new_string <- ''\n  # for every character in the string\n\
    \  for (char in string) {\n    # if the character is upper case\n    if (char\
    \ == tolower(char)) {\n      # add the character in upper case to the new string\n\
    \      new_string <- paste(new_string, toupper(char), sep = '')\n    } else {\n\
    \      # add the character in lower case to the new string\n      new_string <-\
    \ paste(new_string, tolower(char), sep = '')\n    }\n  }\n  # return the new string\n\
    \  return(new_string)\n}", "\n  string_flipped <- \"\"\n  for (i in 1:length(string))\
    \ {\n    if (string[i] == toupper(string[i])) {\n      string_flipped <- paste(string_flipped,\
    \ tolower(string[i]), sep = \"\")\n    } else {\n      string_flipped <- paste(string_flipped,\
    \ toupper(string[i]), sep = \"\")\n    }\n  }\n  return(string_flipped)\n}\n\n\
    flip_case(\"Hello\")\n", "\n    # Storing the string in a variable\n    str <-\
    \ string\n    # Using the gsub function to replace the lowercase with uppercase\
    \ and vice-versa\n    gsub('[a-z]', '\\\\U\\\\1', gsub('[A-Z]', '\\\\L\\\\1',\
    \ str))\n}", "\n    flipped <- sapply(string, function(x) {\n        if (grepl(\"\
    [[:upper:]]\", x)) {\n            tolower(x)\n        } else {\n            toupper(x)\n\
    \        }\n    })\n    return(flipped)\n}\n", "\n  flip_case_l <- function(letter)\
    \ {\n    ifelse(letter == toupper(letter), tolower(letter), toupper(letter))\n\
    \  }\n  sapply(strsplit(string, '')[[1]], flip_case_l)\n}\n ", "\n  return (tolower(toupper(string)))\n\
    }\nflip_case(\"Hello\")\n", "\n  str_to_upper(string) %>% str_to_lower()\n}\n\
    flip_case('Hello')\n", "\n  string <- strsplit(string, \"\")[[1]]\n  for (i in\
    \ 1:length(string)) {\n    letter <- string[i]\n    if (grepl(\"[[:lower:]]\"\
    , letter)) {\n      string[i] <- toupper(letter)\n    } else {\n      string[i]\
    \ <- tolower(letter)\n    }\n  }\n  return(paste(string, collapse = \"\"))\n}\n",
  "\n  string_vector <- strsplit(string, split = '')[[1]]\n  case_vector <- sapply(string_vector,\
    \ FUN = tolower) == string_vector\n  string_vector[case_vector] <- toupper(string_vector[case_vector])\n\
    \  string_vector[!case_vector] <- tolower(string_vector[!case_vector])\n  return(paste(string_vector,\
    \ collapse = ''))\n}\nflip_case('Hello')\n", "\n    string <- gsub(\"[a-z]\",\
    \ \"[A-Z]\", string)\n    string <- gsub(\"[A-Z]\", \"[a-z]\", string)\n    return(string)\n\
    }\n ", "\n  string <- sapply(string, function(char) {\n    if (is.na(char)) {\n\
    \      NA\n    } else if (char == toupper(char)) {\n      tolower(char)\n    }\
    \ else {\n      toupper(char)\n    }\n  })\n  return(string)\n}\n", "\n    string\
    \ <- strsplit(string, '')\n    string <- sapply(string, function(x) tolower(x))\n\
    \    string <- paste(string, collapse = '')\n    string <- strsplit(string, '')\n\
    \    string <- sapply(string, function(x) toupper(x))\n    string <- paste(string,\
    \ collapse = '')\n    return(string)\n}", "\n  str_to_upper(string)\n}\n\nflip_case('Hello')\n",
  "\n  string <- sapply(string, function(x) {\n    if (is.na(x)) {\n      return(x)\n\
    \    } else if (is.lower(x)) {\n      return(toupper(x))\n    } else {\n     \
    \ return(tolower(x))\n    }\n  })\n  string\n}\n\nflip_case(\"Hello\")\n", "\n\
    \    # your code here\n    as.character(string) -> string\n    tolower(string)\
    \ -> string_low\n    toupper(string) -> string_up\n    gsub(\"[a-z]\", string_up,\
    \ string) -> string_low\n    gsub(\"[A-Z]\", string_low, string) -> string_up\n\
    \    string_up\n}\n\nflip_case(\"Hello\")\n", "\n    string <- strsplit(string,\
    \ \"\")[[1]]\n    flipped_chars <- c()\n    for (c in string) {\n        if (c\
    \ == toupper(c)) {\n            flipped_chars <- c(flipped_chars, tolower(c))\n\
    \        } else {\n            flipped_chars <- c(flipped_chars, toupper(c))\n\
    \        }\n    }\n    paste(flipped_chars, collapse=\"\")\n}\n", "\n  #initialize\
    \ empty vector\n  x <- vector()\n  #for all elements\n  for (i in 1:nchar(string))\
    \ {\n    #check if element is lowercase\n    if (is.lower(substr(string, i, i)))\
    \ {\n      #if it is lowercase, append the uppercase version to the vector\n \
    \     x <- c(x, toupper(substr(string, i, i)))\n    } else {\n      #if it is\
    \ uppercase, append the lowercase version to the vector\n      x <- c(x, tolower(substr(string,\
    \ i, i)))\n    }\n  }\n  #return the string constructed from the vector\n  paste(x,\
    \ collapse=\"\")\n}", "\n  flip_str <- \"\"\n  for (char in strsplit(string, split\
    \ = \"\")[[1]]) {\n    if (char %in% LETTERS) {\n      flip_str <- paste(flip_str,\
    \ tolower(char), sep = \"\")\n    } else {\n      flip_str <- paste(flip_str,\
    \ toupper(char), sep = \"\")\n    }\n  }\n  return(gsub(\" \", \"\", flip_str))\n\
    }\nflip_case(\"HeLlO\")\n", "\n  gsub('([a-zA-Z])',\n       '{{\\\\U\\\\1}}{{\\\
    \\L\\\\1}}',\n       string,\n       perl = TRUE)\n}\n", "\n  # this function\
    \ uses two arguments:\n  #  x - the character to be switched\n  #  y - the character\
    \ to be returned\n  # to make this generic, x and y are parameters in the function\n\
    \  # the function uses ifelse to switch the case of the character\n  x <- match.arg(x)\n\
    \  y <- match.arg(y)\n  switchcase <- function(x, y) {\n    ifelse(x == y, tolower(x),\
    \ toupper(x))\n  }\n  # the string is split into characters\n  chars <- strsplit(string,\
    \ \"\")[[1]]\n  # the characters are switched in the new string\n  newstring <-\
    \ unlist(lapply(chars, switchcase, y = chars))\n  return(newstring)\n}\n \nflip_case\
    \ <- function(string) {\n  # this function uses two arguments:\n  #  x - the character\
    \ to be switched\n  #  y - the character to be returned\n  # to make this generic,\
    \ x and y are parameters in the function\n  # the function uses ifelse to switch\
    \ the case of the character\n  x <- match.arg(x)\n  y <- match.arg(y)\n  switchcase\
    \ <- function(x, y) {\n    ifelse(x == y, tolower(x), toupper(x))\n  }\n  # the\
    \ string is split into characters\n  chars <- strsplit(string, \"\")[[1]]\n  #\
    \ the characters are switched in the new string\n  newstring <- unlist(lapply(chars,\
    \ switchcase, y = chars))\n  return(newstring)\n}\n \nflip_case(\"Hello\")\n",
  "\n  string <- strsplit(string, \"\")[[1]]\n  for (i in 1:length(string)) {\n  \
    \  if (string[i] == toupper(string[i])) {\n      string[i] <- tolower(string[i])\n\
    \    } else {\n      string[i] <- toupper(string[i])\n    }\n  }\n  string <-\
    \ paste(string, collapse = \"\")\n  return(string)\n}\n", "\n  return(strtrim(gsub(\"\
    [a-z]\", \"[A-Z]\", gsub(\"[A-Z]\", \"[a-z]\", string)), side = \"both\"))\n}\n",
  "\n    # using regular expression to match either uppercase or lowercase characters\n\
    \    # and uppercase() or lowercase() to convert them\n    gsub(\"([a-zA-Z])\"\
    ,\n         ifelse(grepl(\"[[:upper:]]\", \"\\\\1\"),\n                toupper(\"\
    \\\\1\"),\n                tolower(\"\\\\1\")),\n         string)\n}\n", "\n \
    \   string <- strsplit(string, split = \"\")[[1]]\n    for (i in 1:length(string))\
    \ {\n        string[i] <- ifelse(string[i] %in% letters, \n                  \
    \          ifelse(string[i] %in% LETTERS, \n                                 \
    \  tolower(string[i]), \n                                   toupper(string[i])),\
    \ \n                            string[i])\n    }\n    return(paste(string, collapse\
    \ = \"\"))\n}\n\nflip_case('Hello')\n", "\n    # YOUR CODE HERE\n}", "\n    #\
    \ Create empty string for transformed result\n    transformed_string <- \"\"\n\
    \    # Loop through each character in string\n    for (c in string) {\n      \
    \  # Add to new string the changed case of the character\n        transformed_string\
    \ <- paste(transformed_string, ifelse(is.na(chartr(letters, LETTERS, c)), c, chartr(LETTERS,\
    \ letters, c)), sep = \"\")\n    }\n    return(transformed_string)\n}\nflip_case(\"\
    Hello\")\n", "\n  str_flip(string)\n}\n", "\n    # ...\n    sapply(strsplit(string,\
    \ \"\"), function(x) ifelse(x == toupper(x), tolower(x), toupper(x)))\n}\nflip_case('Hello')\n",
  "\n    string_chars <- strsplit(string, \"\")[[1]]\n\n    for (i in 1:length(string_chars))\
    \ {\n        if (grepl(\"[[:upper:]]\", string_chars[i])) {\n            string_chars[i]\
    \ <- tolower(string_chars[i])\n        } else {\n            string_chars[i] <-\
    \ toupper(string_chars[i])\n        }\n    }\n\n    paste(string_chars, collapse\
    \ = \"\")\n}\n\nflip_case(\"Hello\")\nflip_case(\"AaBbCc\")\n", "\n    new_string\
    \ <- str_to_lower(string)\n    new_string <- ifelse(new_string == string, str_to_upper(string),\
    \ new_string)\n    return(new_string)\n}\nflip_case('Hello')\nflip_case('ELLO')\n",
  "\n    new_string <- c()\n    for (char in strsplit(string, \"\")[[1]]) {\n    \
    \    if (str_detect(char, \"[a-z]\")) {\n            new_string <- c(new_string,\
    \ toupper(char))\n        } else if (str_detect(char, \"[A-Z]\")) {\n        \
    \    new_string <- c(new_string, tolower(char))\n        } else {\n          \
    \  new_string <- c(new_string, char)\n        }\n    }\n    return(paste(new_string,\
    \ collapse = \"\"))\n}\nflip_case(\"Hello\")\n", "\n  return(chartr(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ,\n                \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", string))\n\
    }\nflip_case('Hello')\n", "\n  str_flip(string)\n}\n", "\n  gsub(\"(.)\",\n  \
    \     \"\\\\U\\\\1\",\n       string,\n       perl = TRUE)\n}\nflip_case('Hello')",
  "\n    return(gsub(\"([a-z])([A-Z])\",\"\\\\2\\\\1\",string))\n}\n", "\n  string\
    \ <- strsplit(string, split = '')\n  string <- string[[1]]\n  string <- sapply(string,\n\
    \                   function(x) {\n                     if(x == tolower(x)) {\n\
    \                       return(toupper(x))\n                     } else {\n  \
    \                     return(tolower(x))\n                     }\n           \
    \        })\n  string <- paste(string, collapse = '')\n  return(string)\n}\n",
  "\n  if (is.null(string)) return(NULL)\n  string <- chartr(lower, upper, string)\n\
    \  string <- chartr(upper, lower, string)\n  return(string)\n}\n", "\n    char_vector\
    \ <- strsplit(string, \"\")[[1]]\n    vapply(char_vector, function(x) { \n   \
    \     if (is.na(match(x, LETTERS))) {x} \n        else { toupper(x) }\n    },\
    \ character(1))\n}\n\nflip_case(\"Hello\")\n", "\n  if(is.null(string))\n    return(NULL)\n\
    \  if(!is.character(string))\n    stop(\"Please provide a valid character string\"\
    )\n  return(chartr(chars = c(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ), \n                replacement = c(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ), string))\n}\n ", "\n  if (class(string) != \"character\") {\n    stop(\"Error:\
    \ Input must be a string\")\n  }\n  else {\n    string <- gsub(\"[a-z]\", \"\\\
    \\U\\\\1\", string)\n    string <- gsub(\"[A-Z]\", \"\\\\L\\\\1\", string)\n \
    \   return(string)\n  }\n}\nflip_case(\"Hello\")\n", "\n    result <- c()\n  \
    \  for (char in string) {\n        if (char >= 'a' && char <= 'z') {\n       \
    \     result <- c(result, toupper(char))\n        } else if (char >= 'A' && char\
    \ <= 'Z') {\n            result <- c(result, tolower(char))\n        } else {\n\
    \            result <- c(result, char)\n        }\n    }\n    return(paste(result,\
    \ collapse=\"\"))\n}\nflip_case('Hello')\n", "\n  string <- gsub(\"[a-z]\", \"\
    \\\\U\\\\1\", string)\n  string <- gsub(\"[A-Z]\", \"\\\\L\\\\1\", string)\n \
    \ return(string)\n}\n", "\n\tnew_string <- \"\"\n\tfor (char in string) {\n\t\t\
    if (char >= \"a\" & char <= \"z\") {\n\t\t\tnew_string <- paste(new_string, toupper(char),\
    \ sep = \"\")\n\t\t} else if (char >= \"A\" & char <= \"Z\") {\n\t\t\tnew_string\
    \ <- paste(new_string, tolower(char), sep = \"\")\n\t\t} else {\n\t\t\tnew_string\
    \ <- paste(new_string, char, sep = \"\")\n\t\t}\n\t}\n\treturn(new_string)\n}\n",
  "\n    str_flip(string)\n}", "\n    ## Write code here to do what's asked\n    \n\
    }\nflip_case('Hello')\n", "\n  return(string)\n}\n", "\n  string <- strsplit(string,\
    \ '')[[1]]\n  string <- sapply(string, function(x) ifelse(is.na(x), x, switch(x,\n\
    \    'a' = 'A', 'b' = 'B', 'c' = 'C', 'd' = 'D', 'e' = 'E', 'f' = 'F', 'g' = 'G',\
    \ 'h' = 'H', 'i' = 'I', 'j' = 'J', 'k' = 'K', 'l' = 'L', 'm' = 'M', 'n' = 'N',\
    \ 'o' = 'O', 'p' = 'P', 'q' = 'Q', 'r' = 'R', 's' = 'S', 't' = 'T', 'u' = 'U',\
    \ 'v' = 'V', 'w' = 'W', 'x' = 'X', 'y' = 'Y', 'z' = 'Z',\n    'A' = 'a', 'B' =\
    \ 'b', 'C' = 'c', 'D' = 'd', 'E' = 'e', 'F' = 'f', 'G' = 'g', 'H' = 'h', 'I' =\
    \ 'i', 'J' = 'j', 'K' = 'k', 'L' = 'l', 'M' = 'm', 'N' = 'n', 'O' = 'o', 'P' =\
    \ 'p', 'Q' = 'q', 'R' = 'r', 'S' = 's', 'T' = 't', 'U' = 'u', 'V' = 'v', 'W' =\
    \ 'w', 'X' = 'x', 'Y' = 'y', 'Z' = 'z'\n  )))\n  string <- paste(string, collapse\
    \ = '')\n  return(string)\n}\n", "\n  # Find the uppercase letters.\n  # Then\
    \ look for their complement in the same string.\n  # Return the joined result.\n\
    \  return(paste(gsub(\"[[:upper:]]\", \"lower\", string), gsub(\"[[:lower:]]\"\
    , \"upper\", string), sep=\"\"))\n}\n", "\n    # Convert to lowercase first\n\
    \    string_lc <- tolower(string)\n    # Make every char that is lowercase to\
    \ uppercase and vice versa\n    string_flipped <- chartr(lower.case(string_lc),\
    \ upper.case(string_lc), string_lc)\n    return(string_flipped)\n}", "\n  string\
    \ <- strsplit(string, \"\")[[1]]\n  for (i in 1:length(string)) {\n    if (string[i]\
    \ == toupper(string[i])) {\n      string[i] <- tolower(string[i])\n    } else\
    \ {\n      string[i] <- toupper(string[i])\n    }\n  }\n  string <- paste(string,\
    \ collapse = \"\")\n  return(string)\n}\n\nflip_case('Hello')\n", "\n  #TODO:\
    \ Replace the below line with your solution\n  for (i in 1:nchar(string)) {\n\
    \    if (is.na(regexpr(\"[[:upper:]]\", substring(string, i, i), fixed = TRUE)))\
    \ {\n      string <- paste(substring(string, 1, i - 1), \n                   \
    \   toupper(substring(string, i, i)), \n                      substring(string,\
    \ i + 1, nchar(string)), sep = \"\")\n    } else {\n      string <- paste(substring(string,\
    \ 1, i - 1), \n                      tolower(substring(string, i, i)), \n    \
    \                  substring(string, i + 1, nchar(string)), sep = \"\")\n    }\n\
    \  }\n  return(string)\n}\nflip_case('Hello')", "\n  string <- strsplit(string,\
    \ \"\")[[1]]\n  string <- sapply(string, function(x) {\n    if (grepl(\"[[:upper:]]\"\
    , x)) {\n      tolower(x)\n    } else {\n      toupper(x)\n    }\n  })\n  string\
    \ <- paste(string, collapse = \"\")\n  return(string)\n}\n\nflip_case('Hello')\n",
  "\n  flipped <- str_replace_all(string, '[a-z]', function(x) {str_to_upper(x)})\n\
    \  str_replace_all(flipped, '[A-Z]', function(x) {str_to_lower(x)})\n}\n\nflip_case('Hello')\n\
    \nflip_case('ThE LiGhtS GOnE OuT, i THINk.')\n", "\n  gsub(\"([a-z])([A-Z])\"\
    , \"\\\\2\\\\1\", string)\n}\n\nflip_case <- function(string) {\n  gsub(\"([a-z])([A-Z])\"\
    , \"\\\\2\\\\1\", string)\n}\n", "\n  out <- str_replace_all(string, \"[a-z]\"\
    , function(x) { str_to_lower(x) })\n  out <- str_replace_all(out, \"[A-Z]\", function(x)\
    \ { str_to_upper(x) })\n  return(out)\n}\n", "\n    string2 <- strsplit(string,\
    \ '')[[1]]\n    string2 <- string2[grepl(\"[A-Z]\", string2)]\n    upper <- string2[grepl(\"\
    [A-Z]\", string2)]\n    lower <- string2[grepl(\"[a-z]\", string2)]\n    string\
    \ <- gsub(lower, toupper(lower), string)\n    string <- gsub(upper, tolower(upper),\
    \ string)\n    string\n}\nflip_case(\"Hello\")", "\n  flipped <- \"\"\n  for (i\
    \ in 1:length(string)) {\n    if (is.na(string[i])) {\n      flipped <- paste(flipped,\
    \ \"?\", sep=\"\")\n    } else if (string[i] %in% LETTERS) {\n      flipped <-\
    \ paste(flipped, tolower(string[i]), sep=\"\")\n    } else if (string[i] %in%\
    \ letters) {\n      flipped <- paste(flipped, toupper(string[i]), sep=\"\")\n\
    \    } else {\n      flipped <- paste(flipped, string[i], sep=\"\")\n    }\n \
    \ }\n  return(flipped)\n}\n", "\n  string <- sapply(string, function(char) {\n\
    \    if (char %in% LETTERS) {\n      return(tolower(char))\n    } else if (char\
    \ %in% letters) {\n      return(toupper(char))\n    } else {\n      return(char)\n\
    \    }\n  })\n  \n  return(string)\n}\n\nflip_case(\"H3ll0!\")\n", "\n  # turn\
    \ input string into a character vector\n  string <- strsplit(string, \"\")[[1]]\n\
    \  # create empty vector of length of input string\n  result <- rep(NA, length(string))\n\
    \  # for each element in the input string\n  for (i in 1:length(string)) {\n \
    \   # determine if character is lowercase\n    if (string[i] == tolower(string[i]))\
    \ {\n      # if character is lowercase, replace it with the uppercase version\n\
    \      result[i] <- toupper(string[i])\n    } else {\n      # if character is\
    \ not lowercase, replace it with the lowercase version\n      result[i] <- tolower(string[i])\n\
    \    }\n  }\n  # return result string\n  paste(result, collapse = \"\")\n}\n",
  "\n  sapply(strsplit(string, \"\"), function(x) {\n    ifelse(x %in% letters, ifelse(x\
    \ %in% toupper(letters), tolower(x), toupper(x)), x)\n  })\n}\n", "\n\tgsub(\"\
    ([a-z])\", \"\\U\\\\1\", gsub(\"([A-Z])\", \"\\L\\\\1\", string))\n}\n", "\n \
    \ string <- unlist(strsplit(string, \"\"))\n  for (i in seq_along(string)) {\n\
    \    if (string[i] == toupper(string[i])) {\n      string[i] <- tolower(string[i])\n\
    \    } else {\n      string[i] <- toupper(string[i])\n    }\n  }\n  string <-\
    \ paste(string, collapse = \"\")\n  string\n}\n", "\n  #\n  # Your code goes here\n\
    \  #\n  string1<- as.character(string)\n  string2<-gsub(\"[a-z]\", function(x)\
    \ gsub(\"[a-z]\", \"[A-Z]\", x), string1)\n  string3<-gsub(\"[A-Z]\", function(x)\
    \ gsub(\"[A-Z]\", \"[a-z]\", x), string2)\n  return(string3)\n}\nflip_case(\"\
    hellO\")\n", "\n  # Create a character vector called string\n  string <- strsplit(string,\
    \ \"\")[[1]]\n  # Use sapply to apply toupper to lowercase characters and\n  #\
    \ tolower to uppercase characters\n  flip_case <- sapply(string, function(x) {\n\
    \    ifelse(x >= \"a\" & x <= \"z\", toupper(x), tolower(x))\n  })\n  # Concatenate\
    \ the characters to output a string\n  paste(flip_case, collapse = \"\")\n}\n\
    flip_case('Hello')\n", "\n  string <- chartr(lower, upper, string)\n  string <-\
    \ chartr(upper, lower, string)\n  return(string)\n}\nflip_case('Hello')\n", "\n\
    \    tolower(string) <- toupper(string)\n    toupper(string) <- tolower(string)\n\
    \    return(string)\n}\nflip_case(\"Hello\")\n", "\n    string %>%\n        str_split(split\
    \ = \"\") %>%\n        unlist() %>%\n        char_flip_case() %>%\n        paste(collapse\
    \ = \"\")\n}\n \nflip_case(\"Hello\")", "\n  string <- toupper(string)\n  string\
    \ <- tolower(string)\n  return(string)\n}\n", "\n  # Set string to a vector of\
    \ single characters\n  char <- strsplit(string, \"\")[[1]]\n  # Flip case\n  char\
    \ <- stringi::stri_trans_tolower(char)\n  # Combine characters to string\n  return(paste(char,\
    \ collapse = \"\"))\n}\n", "\n  string <- strsplit(string, split = \"\")\n  string\
    \ <- unlist(string)\n  for (i in 1:length(string)) {\n    if (string[i] == tolower(string[i]))\
    \ {\n      string[i] <- toupper(string[i])\n    } else {\n      string[i] <- tolower(string[i])\n\
    \    }\n  }\n  output <- paste(string, collapse = \"\")\n  return(output)\n}\n",
  "\n    letters = c()\n    result = c()\n    for (i in 1:nchar(string)) {\n     \
    \   letters[i] = substr(string, i, i)\n        if (is.element(letters[i], c(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"))) {\n            result[i] = toupper(letters[i])\n \
    \       } else {\n            result[i] = tolower(letters[i])\n        }\n   \
    \ }\n    return(paste(result, collapse = \"\"))\n}\nflip_case('HeLlO')\n", "\n\
    \  \n  # Split the string into a vector of characters\n  letters <- strsplit(string,\
    \ split = \"\")[[1]]\n  \n  # Flip the case of the letters\n  flipped <- chartr(x\
    \ = letters, y = letters,\n                    table = c(toupper(letters),\n \
    \                             tolower(letters)))\n  \n  # Return the flipped string\n\
    \  return(flipped)\n}\nflip_case(\"Hello\")\n", "\n  string <- strsplit(string,\
    \ \"\")[[1]]\n  string <- charToRaw(string)\n  xor(string, as.raw(32))\n}\n",
  "\n\tstring_new <- gsub(\"[[:lower:]]\", \"\", string)\n\tstring_new <- gsub(\"\
    [[:upper:]]\", \"\", string_new, perl = TRUE)\n\treturn(string_new)\n}\n", "\n\
    \  string <- gsub(\"[a-z]\",paste(\"[\",c(LETTERS,letters),\"]\",sep=\"\"),string)\n\
    \  string <- gsub(\"[A-Z]\",paste(\"[\",c(LETTERS,letters),\"]\",sep=\"\"),string)\n\
    \  return(string)\n}\n", "\n  sapply(strsplit(string, \"\"), function(x) {\n \
    \   sapply(x, function(y) {\n      if (is.lower(y)) {\n        toupper(y)\n  \
    \    } else {\n        tolower(y)\n      }\n    })\n  })\n}\nflip_case(\"Hello\"\
    )\n", "\n  # The function chartr can replace characters in a string.\n  # chartr(old,\
    \ new, string)\n  # We do not need to specify the 4th parameter, since it defaults\
    \ to string.\n  # We flip lowercase to uppercase and uppercase to lowercase.\n\
    \  chartr('abcd', 'ABCD', string)\n}\n", "\n    # chars_1 <- string(nchar(string))\n\
    \    i <- 1\n    # toLower(string)\n    char_i <- substr(string, i, i)\n    if\
    \ (char_i == toLower(char_i)) {\n        char_i <- toUpper(char_i)\n    } else\
    \ {\n        char_i <- toLower(char_i)\n    }\n    return(char_i)\n}\nflip_case('Hello')\n",
  "\n  string <- substr(string, 1, nchar(string))\n  str1 <- gsub('[[:upper:]]', '[[:lower:]]',\
    \ string)\n  str2 <- gsub('[[:lower:]]', '[[:upper:]]', string)\n  substring(str1,\
    \ 1, nchar(str1))\n  substring(str2, 1, nchar(str2))\n}\n\nflip_case('Hello')\n",
  "\n    if(!is.character(string)) stop(\"not a string\")\n    if(identical(string,\
    \ NA)) stop(\"cannot handle missing values\")\n    string[string > 'Z'] <- toupper(string[string\
    \ > 'Z'])\n    string[string <= 'Z'] <- tolower(string[string <= 'Z'])\n    return(string)\n\
    }", "\n  # create a function which is used to flip a character\n  flip <- function(char)\
    \ {\n    # check if the char is an alphabet\n    if(char %in% LETTERS) {\n   \
    \   # check if the char is uppercase\n      if(char %in% LETTERS[1:26]) {\n  \
    \      # convert it to uppercase\n        tolower(char)\n      } else {\n    \
    \    # convert it to lowercase\n        toupper(char)\n      }\n    } else {\n\
    \      # return the character as it is\n      char\n    }\n  }\n  # return the\
    \ string with each character flipped\n  return(sapply(strsplit(string, \"\")[[1]],\
    \ flip))\n}\n\nflip_case(\"Hello World\")\n", "\n  out <- \"\"\n  for (i in 1:nchar(string))\
    \ {\n    letter <- substring(string, i, i)\n    if (letter == toupper(letter))\
    \ {\n      out <- paste(out, tolower(letter), sep = \"\")\n    } else {\n    \
    \  out <- paste(out, toupper(letter), sep = \"\")\n    }\n  }\n  return(out)\n\
    }\nflip_case(\"Hello\")\n", "\n\tstring <- sapply(strsplit(string, \"\"), function(x)\
    \ {\n\t\tif (is.na(x)) x\n\t\telse if (is.upper.char(x)) tolower(x)\n\t\telse\
    \ if (is.lower.char(x)) toupper(x)\n\t\telse x\n\t})\n\treturn(string)\n}\n",
  "\n  tolower(string) <- tolower(string)\n  toupper(string) <- toupper(string)\n\
    \  return(string)\n}\nflip_case(\"Hello\")\n", "\n  string <- strsplit(string,\
    \ \"\")[[1]]\n  for (i in 1:length(string)) {\n    if (is.upper.char(string[i]))\
    \ {\n      string[i] <- tolower(string[i])\n    } else {\n      string[i] <- toupper(string[i])\n\
    \    }\n  }\n  return(paste(string, collapse = \"\"))\n}\n", "\n  string <- strsplit(string,\
    \ '')[[1]]\n  string <- sapply(string, function(x) ifelse(x == toupper(x), tolower(x),\
    \ toupper(x)))\n  paste(string, collapse = '')\n}\nflip_case('Hello')\n", "\n\
    \  #R: flip_case <- function(string) { gsub(\"([a-z])([A-Z])\", \"\\\\2\\\\1\"\
    , string) }\n  string <- chartr(c(\"a-z\", \"A-Z\"), c(\"A-Z\", \"a-z\"), string)\n\
    \  return(string)\n}\n\nflip_case(\"Hello\")\n", "\n  uppercase <- c(\"A\",\"\
    B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"\
    O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\")\n  lowercase\
    \ <- c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"\
    ,\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\"\
    ,\"z\")\n  string_flipped <- \"\"\n  for (i in 1:nchar(string)) {\n    letter\
    \ <- substr(string, i, i)\n    if (letter %in% uppercase) {\n      letter <- lowercase[match(letter,\
    \ uppercase)]\n    } else if (letter %in% lowercase) {\n      letter <- uppercase[match(letter,\
    \ lowercase)]\n    }\n    string_flipped <- paste(string_flipped, letter, sep\
    \ = \"\")\n  }\n  return(string_flipped)\n}\n", "\n  gsub(\"([A-Z])\", \"\", gsub(\"\
    ([a-z])\", \"\", string, fixed = TRUE), fixed = TRUE)\n}\nflip_case(\"Hello\"\
    )\n", "\n    string <- chartr(\"a-zA-Z\", \"A-Za-z\", string)\n    return(string)\n\
    }", "\n    # your code here\n    return(string)\n}\nflip_case('Hello')\n", "\n\
    \  output <- \"\"\n  for (char in strsplit(string, \"\")[[1]]) {\n    if (grepl(\"\
    [[:lower:]]\", char)) {\n      output <- paste(output, toupper(char), sep = \"\
    \")\n    } else {\n      output <- paste(output, tolower(char), sep = \"\")\n\
    \    }\n  }\n  return(output)\n}\n\nprint(flip_case(\"Hello\"))\nprint(flip_case(\"\
    Bye\"))\nprint(flip_case(\"Hi There\"))\n", "\n    result <- character(nchar(string))\n\
    \    for (i in 1:nchar(string)) {\n        if (string[i] %in% LETTERS) {\n   \
    \         result[i] <- tolower(string[i])\n        } else {\n            result[i]\
    \ <- toupper(string[i])\n        }\n    }\n    return(result)\n}\n", "\n    string\
    \ <- strsplit(string, \"\")[[1]]\n    indices <- regexpr('[a-z]', string)\n  \
    \  string[indices] <- strtoi(string[indices], base = 36) - 32\n    indices <-\
    \ regexpr('[A-Z]', string)\n    string[indices] <- strtoi(string[indices], base\
    \ = 36) + 32\n    paste(string, collapse = \"\")\n}\n", "\n    upper <- c(uppercase_chars,\
    \ lowercase_chars)\n    lower <- c(lowercase_chars, uppercase_chars)\n    return(gsub(x\
    \ = string, pattern = upper, replacement = lower))\n}\n", "\n    for (i in 1:nchar(string))\
    \ {\n        char <- substring(string, i, i)\n        if (char == toupper(char))\
    \ {\n            char <- tolower(char)\n        } else {\n            char <-\
    \ toupper(char)\n        }\n        string <- paste(substring(string, 1, i-1),\
    \ char, substring(string, i+1, nchar(string)), sep = \"\")\n    }\n    return(string)\n\
    }\n", "\n  return_val <- character(length(string))\n  for (i in 1:length(string))\
    \ {\n    if (string[i] %in% c(letters)) {\n      if (string[i] %in% c(LETTERS))\
    \ {\n        return_val[i] <- tolower(string[i])\n      } else {\n        return_val[i]\
    \ <- toupper(string[i])\n      }\n    } else {\n      return_val[i] <- string[i]\n\
    \    }\n  }\n  return(return_val)\n}\n", "\n  for (i in 1:nchar(string)) {\n \
    \   if (is.upper.char(substr(string, i, i))) {\n      substr(string, i, i) <-\
    \ tolower(substr(string, i, i))\n    } else {\n      substr(string, i, i) <- toupper(substr(string,\
    \ i, i))\n    }\n  }\n  return(string)\n}\n", "\n  string <- gsub(\"[[:lower:]]\"\
    , toupper, string)\n  string <- gsub(\"[[:upper:]]\", tolower, string)\n  return(string)\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
