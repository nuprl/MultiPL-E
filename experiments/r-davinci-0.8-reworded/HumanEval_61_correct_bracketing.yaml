name: HumanEval_61_correct_bracketing
language: r
prompt: "# brackets is a string of \"(\" and \")\".\n# return TRUE if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing('(')\n\
  # FALSE\n# >>> correct_bracketing('()')\n# TRUE\n# >>> correct_bracketing('(()())')\n\
  # TRUE\n# >>> correct_bracketing(')(()')\n# FALSE\ncorrect_bracketing <- function(brackets)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- correct_bracketing\n    if(!identical(candidate('()'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('(()())'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('()()(()())()'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('()()((()()())())(()()(()))'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('((()())))'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(')(()'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('('),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('(((('), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(')'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('(()'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('()()(()())())(()'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('()()(()())()))()'), FALSE)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  ret <- TRUE\n  stack <- vector(mode=\"numeric\", length=0)\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"(\") {\n   \
    \   stack <- c(stack, 1)\n    } else {\n      if (length(stack) == 0) {\n    \
    \    ret <- FALSE\n        break\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) > 0) {\n    ret <- FALSE\n  }\n  return(ret)\n\
    }", "\n  #### YOUR CODE HERE ####\n  count <- 0\n  for (i in 1:nchar(brackets)){\n\
    \    if (substr(brackets, i, i) == \"(\") count <- count + 1\n    if (substr(brackets,\
    \ i, i) == \")\") count <- count - 1\n    if (count < 0) break\n  }\n  if (count\
    \ == 0) return(TRUE)\n  else return(FALSE)\n  #### END(YOUR CODE) ####\n}\n",
  "\n    # YOUR CODE HERE\n    # is the opened bracket equal to the number of closed\
    \ brackets?\n    # return FALSE if not\n    opened = 0\n    closed = 0\n    for\
    \ (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == \"(\") {\n\
    \            opened = opened + 1\n        } else {\n            closed = closed\
    \ + 1\n        }\n    }\n    if (opened == closed) {\n        return(TRUE)\n \
    \   } else {\n        return(FALSE)\n    }\n}\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"\
    (())\")\ncorrect_bracketing(\"(((()\")\n", "\n    \n}\n ", "\n    counter <- 0\n\
    \    for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == \"\
    (\") {\n            counter <- counter + 1\n        } else {\n            counter\
    \ <- counter - 1\n        }\n        if (counter < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    if (counter == 0) {\n        return(TRUE)\n    } else {\n\
    \        return(FALSE)\n    }\n}\n", "\n  stack <- NULL\n  for (bracket in brackets)\
    \ {\n    if (bracket == '(') {\n      stack <- append(stack, bracket)\n    } else\
    \ if (bracket == ')') {\n      if (is.null(stack)) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  return(is.null(stack))\n}\n", "\n    # end\n}\n", "\n    open <- '('\n    close\
    \ <- ')'\n    num_open <- str_count(brackets, open)\n    num_close <- str_count(brackets,\
    \ close)\n    length(brackets) == num_open + num_close & num_open == num_close\n\
    }\ncorrect_bracketing('(')\n\ncorrect_bracketing('()')\n\ncorrect_bracketing('(()())')\n\
    \ncorrect_bracketing(')(()')\n", "\n  if (length(gregexpr(\"\\\\)\", brackets))\
    \ > 0) {\n    return(FALSE)\n  }\n  else {\n    if (length(gregexpr(\"\\\\(\"\
    , brackets)) == length(gregexpr(\"\\\\)\", brackets))) {\n      return(TRUE)\n\
    \    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n", "\n  return(stack_check(strsplit(brackets,\
    \ \"\")[[1]]))\n}\nstack_check <- function(brackets) {\n  stack <- c()\n  for\
    \ (i in brackets) {\n    if (i == \"(\") {\n      stack <- c(stack, i)\n    }\
    \ else if (i == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  bracket <- 0\n  for (char in strsplit(brackets, NULL)[[1]]) {\n\
    \    if (char == \"(\") {\n      bracket <- bracket + 1\n    } else if (char ==\
    \ \")\") {\n      bracket <- bracket - 1\n    }\n    if (bracket < 0) {\n    \
    \  return(FALSE)\n    }\n  }\n  if (bracket == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}", "\n  # YOUR CODE HERE\n  left_bracket = 0\n \
    \ right_bracket = 0\n  for (i in 1:length(brackets)){\n    if (brackets[i] ==\
    \ '('){\n      left_bracket = left_bracket + 1\n    }\n    if (brackets[i] ==\
    \ ')'){\n      right_bracket = right_bracket + 1\n    }\n  }\n  if (left_bracket\
    \ == right_bracket){\n    return(TRUE)\n  }\n  return(FALSE)\n}\ncorrect_bracketing('(()())')\n",
  "\n  check <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i)\
    \ == \"(\") {\n      check <- check + 1\n    } else {\n      check <- check -\
    \ 1\n    }\n    if (check < 0) {\n      return(FALSE)\n    }\n  }\n  if (check\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncorrect_bracketing(\"\
    ((()(()))(()))\")\ncorrect_bracketing(\"()(()\")\n", "\n  # your code here\n \
    \ return(TRUE)\n}\n ", "\n    n <- nchar(brackets)\n    if (n %% 2 != 0) {\n \
    \       FALSE\n    } else {\n        stack <- character(n/2)\n        top <- 0\n\
    \        for (ch in strsplit(brackets, \"\")[[1]]) {\n            if (ch == \"\
    (\") {\n                top <- top + 1\n                stack[top] <- ch\n   \
    \         } else {\n                if (top == 0) {\n                    return(FALSE)\n\
    \                } else {\n                    top <- top - 1\n              \
    \  }\n            }\n        }\n        if (top == 0) {\n            TRUE\n  \
    \      } else {\n            FALSE\n        }\n    }\n}\ncorrect_bracketing('(')\n\
    correct_bracketing('()')\ncorrect_bracketing('(()())')\ncorrect_bracketing(')(()')\n",
  "\n    x <- 0\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets,\
    \ i, i) == \"(\") x <- x + 1\n        if (substr(brackets, i, i) == \")\") x <-\
    \ x - 1\n        if (x < 0) return(FALSE)\n    }\n    if (x == 0) return(TRUE)\n\
    \    return(FALSE)\n}\n\n", "\n  # your code here\n}", "\n    # naive\n    if\
    \ (grepl(\"\\\\(\\\\)\", brackets)) {\n        return(FALSE)\n    }\n    if (grepl(\"\
    ^\\\\(.*\\\\)$\", brackets)) {\n        return(TRUE)\n    }\n    if (grepl(\"\
    ^\\\\(\\\\(\", brackets)) {\n        return(FALSE)\n    }\n    if (grepl(\"\\\\\
    )\\\\)$\", brackets)) {\n        return(FALSE)\n    }\n    if (grepl(\"\\\\(\\\
    \\)\", brackets)) {\n        return(FALSE)\n    }\n    return(TRUE)\n}", "\n \
    \ ############################\n  ### Insert your code here\n  ###\n  brackets.list\
    \ <- strsplit(brackets, \"\")[[1]]\n  if (length(brackets.list) %% 2 != 0) {\n\
    \    return(FALSE)\n  }\n  bracket.stack <- NULL\n  for (i in 1:length(brackets.list))\
    \ {\n    if (brackets.list[i] == \"(\") {\n      bracket.stack <- c(bracket.stack,\
    \ brackets.list[i])\n    } else {\n      if (length(bracket.stack) == 0) {\n \
    \       return(FALSE)\n      } else {\n        bracket.stack <- bracket.stack[-length(bracket.stack)]\n\
    \      }\n    }\n  }\n  if (length(bracket.stack) == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n  ###\n  ### End of your code\n  ############################\n\
    }", "\n  if(length(brackets) == 0) {\n    return(TRUE)\n  } else if(brackets[1]\
    \ == '(') {\n    if(length(brackets) == 1) {\n      return(FALSE)\n    } else\
    \ if(brackets[2] == ')') {\n      return(correct_bracketing(substr(brackets,3,nchar(brackets))))\n\
    \    } else {\n      return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing('(')\ncorrect_bracketing('()')\n\
    correct_bracketing('(()())')\ncorrect_bracketing(')(()')\n", "\n  count <- 0\n\
    \  for (letter in brackets) {\n    if (letter == \"(\") {\n      count <- count\
    \ + 1\n    } else if (letter == \")\") {\n      count <- count - 1\n    }\n  \
    \  if (count < 0) {\n      return(FALSE)\n    }\n  }\n  return(count == 0)\n}\n\
    \ncorrect_bracketing(\"(((())))\")\n", "\n  return(TRUE)\n}\n", "\n    n <- nchar(brackets)\n\
    \    i <- 1\n    j <- 0\n    while (i <= n) {\n        if (substr(brackets, i,\
    \ i) == \"(\") {\n            j <- j + 1\n        } else {\n            j <- j\
    \ - 1\n        }\n        if (j < 0) return(FALSE)\n        i <- i + 1\n    }\n\
    \    if (j == 0) return(TRUE) else return(FALSE)\n}\n ", "\n  \n  # YOUR CODE\
    \ HERE\n  \n}\ntest_correct_bracketing <- function(brackets, expected_output)\
    \ {\n  result <- correct_bracketing(brackets)\n  if (identical(result, expected_output))\
    \ {\n    print(\"PASS!\")\n  } else {\n    print(\"FAIL!\")\n    print(paste(\"\
    input:\", brackets))\n    print(paste(\"expected output:\", expected_output))\n\
    \    print(paste(\"your output:\", result))\n  }\n}\nprint(\"Testing correct_bracketing...\"\
    )\ntest_correct_bracketing('(', FALSE)\ntest_correct_bracketing('()', TRUE)\n\
    test_correct_bracketing('(()())', TRUE)\ntest_correct_bracketing(')(()', FALSE)\n\
    \ ", "\n  is_match <- function(x, y) {\n    if (x == \"(\" && y == \")\") {\n\
    \      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  stack <-\
    \ c()\n  for (bracket in strsplit(brackets, \"\")[[1]]) {\n    if (bracket ==\
    \ \"(\") {\n      stack <- c(stack, bracket)\n    } else if (bracket == \")\"\
    ) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        last_open <- stack[length(stack)]\n        stack <- stack[-length(stack)]\n\
    \        if (!is_match(last_open, bracket)) {\n          return(FALSE)\n     \
    \   }\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\
    \ else {\n    return(FALSE)\n  }\n}\n", "\n    \n    ## YOUR CODE HERE\n    \n\
    }\n ", "\n    x <- 0\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets,\
    \ i, i) == \"(\") {\n            x <- x + 1\n        } else {\n            x <-\
    \ x - 1\n        }\n        if (x < 0) {\n            return(FALSE)\n        }\n\
    \    }\n    if (x != 0) {\n        return(FALSE)\n    } else {\n        return(TRUE)\n\
    \    }\n}\n", "\n  b <- stri_count_regex(brackets, regex = \"\\\\(\")\n  if (b\
    \ > 0) {\n    if (stri_count_regex(brackets, regex = \"\\\\)\") == b) {\n    \
    \  return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(TRUE)\n\
    \  }\n}\n", "\n    count = 0\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets,\
    \ i, i) == \"(\") {\n            count = count + 1\n        } else {\n       \
    \     count = count - 1\n        }\n        if (count < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    if (count == 0) {\n        return(TRUE)\n    } else {\n\
    \        return(FALSE)\n    }\n}\n", "\n    counter <- 0\n    for (bracket in\
    \ strsplit(brackets, \"\")[[1]]) {\n        if (bracket == \"(\") counter <- counter\
    \ + 1\n        if (bracket == \")\") counter <- counter - 1\n        if (counter\
    \ < 0) return(FALSE)\n    }\n    return(counter == 0)\n}\n\ncorrect_bracketing('(')\n\
    correct_bracketing('()')\ncorrect_bracketing('(()())')\ncorrect_bracketing(')(()')\n",
  "\n  sum(as.numeric(strsplit(brackets, \"\")[[1]])) == 0\n}", "\n  count = 0\n \
    \ for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"(\") {\n\
    \      count = count + 1\n    } else {\n      count = count - 1\n    }\n    if\
    \ (count < 0) {\n      return(FALSE)\n    }\n  }\n  return(count == 0)\n}\n\n\
    correct_bracketing(\"(\")\n\ncorrect_bracketing(\"()\")\n\ncorrect_bracketing(\"\
    (()())\")\n\ncorrect_bracketing(\")(()\")", "\n  i <- 1\n  count <- 0\n  while\
    \ (i <= length(brackets)) {\n    if (substr(brackets, i, i) == \"(\") count <-\
    \ count + 1\n    if (substr(brackets, i, i) == \")\") count <- count - 1\n   \
    \ if (count < 0) return(FALSE)\n    i <- i + 1\n  }\n  if (count != 0) {\n   \
    \ return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n", "\n  left <- 0\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"(\") {\n   \
    \   left <- left + 1\n    } else {\n      left <- left - 1\n    }\n    if (left\
    \ < 0) {\n      return(FALSE)\n    }\n  }\n  return(left == 0)\n}\n", "\n  counter\
    \ <- 0\n  for (i in brackets) {\n    if (i == \"(\") {\n      counter <- counter\
    \ + 1\n    } else if (i == \")\") {\n      counter <- counter - 1\n    }\n   \
    \ if (counter < 0) {\n      return(FALSE)\n    }\n  }\n  if (counter == 0) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  # your code\
    \ here\n}\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')", "\n    paren_count <- 0\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == \"(\") {\n            paren_count <-\
    \ paren_count + 1\n        } else if (substr(brackets, i, i) == \")\") {\n   \
    \         paren_count <- paren_count - 1\n        }\n        if (paren_count <\
    \ 0) {\n            return(FALSE)\n        }\n    }\n    if (paren_count == 0)\
    \ {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ntest_that(\"\
    test correct_bracketing\", {\n    expect_false(correct_bracketing('('))\n    expect_true(correct_bracketing('()'))\n\
    \    expect_true(correct_bracketing('(()())'))\n    expect_false(correct_bracketing(')(()'))\n\
    })\n ", "\n    # YOUR CODE HERE\n    # use a stack to store the opening brackets.\n\
    \    # if the current bracket is a closing bracket, then we pop the stack.\n \
    \   # return TRUE if the stack is empty and FALSE otherwise.\n    stack <- numeric(0)\n\
    \    for (bracket in brackets) {\n        if (bracket == '(') {\n            stack\
    \ <- c(stack, bracket)\n        } else {\n            stack <- stack[-length(stack)]\n\
    \        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    }\
    \ else {\n        return(FALSE)\n    }\n}\n", "\n  # YOUR CODE HERE\n  balance\
    \ <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"\
    (\") {\n      balance <- balance + 1\n    } else {\n      balance <- balance -\
    \ 1\n    }\n    if (balance < 0) {\n      return(FALSE)\n    }\n  }\n  if (balance\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  balance\
    \ <- 0\n  for (bracket in brackets) {\n    if (bracket == \"(\") {\n      balance\
    \ <- balance + 1\n    } else if (bracket == \")\") {\n      balance <- balance\
    \ - 1\n    }\n    if (balance < 0) {\n      return(FALSE)\n    }\n  }\n  if (balance\
    \ != 0) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n  num_open <- 0\n\
    \  for (bracket in strsplit(brackets, split = '')[[1]]) {\n    if (bracket ==\
    \ '(') {\n      num_open <- num_open + 1\n    } else if (bracket == ')') {\n \
    \     num_open <- num_open - 1\n    }\n    if (num_open < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  return(num_open == 0)\n}\n", "\n    if (brackets==\"\") {\n   \
    \     return(TRUE)\n    } else if (brackets[1]==\")\") {\n        return(FALSE)\n\
    \    } else {\n        lefts <- sum(brackets==\"(\")\n        rights <- sum(brackets==\"\
    )\")\n        if (lefts==rights) {\n            return(TRUE)\n        } else {\n\
    \            return(FALSE)\n        }\n    }\n}\n", "\n  opening <- brackets[brackets\
    \ == '(']\n  closing <- brackets[brackets == ')']\n  return(sum(1*(closing ==\
    \ ')')) == sum(1*(opening == '(')))\n}", "\n  # Initialize counter\n  n_open <-\
    \ 0\n  # Loop over characters in brackets\n  for (i in seq_along(brackets)) {\n\
    \    # Update counter\n    n_open <- n_open + (brackets[i] == \"(\" ) - (brackets[i]\
    \ == \")\" )\n    # Check if counter is negative (i.e. if there is an extra closing\
    \ bracket)\n    if (n_open < 0) {\n      return(FALSE)\n    }\n  }\n  # Check\
    \ if counter is not zero (i.e. if there is an extra opening bracket)\n  if (n_open\
    \ != 0) {\n    return(FALSE)\n  }\n  # If counter is zero, return TRUE\n  return(TRUE)\n\
    }", "\n  left_brackets <- 0\n  for (bracket in brackets) {\n    if (bracket ==\
    \ '(') {\n      left_brackets <- left_brackets + 1\n    } else if (bracket ==\
    \ ')') {\n      left_brackets <- left_brackets - 1\n    }\n    if (left_brackets\
    \ < 0) {\n      return(FALSE)\n    }\n  }\n  return(left_brackets == 0)\n}\n\n",
  "\n  # YOUR CODE HERE\n}\n", "\n  stack = character(0)\n  i = 1\n  while (i <= nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"(\") {\n      stack = c(stack, \"(\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack = stack[-length(stack)]\n      }\n    }\n    i = i\
    \ + 1\n  }\n  return(length(stack) == 0)\n}\n\ncorrect_bracketing(\"(\")\ncorrect_bracketing(\"\
    ()\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\")(()\")\n", "\n  counter\
    \ <- 0\n  for (b in brackets) {\n    if (b == \"(\") {\n      counter <- counter\
    \ + 1\n    } else if (b == \")\") {\n      counter <- counter - 1\n    }\n   \
    \ if (counter < 0) {\n      return(FALSE)\n    }\n  }\n  return(counter == 0)\n\
    }\ncorrect_bracketing('(()())')\n", "\n  if (substr(brackets, 1, 1) == \")\")\
    \ {\n    return(FALSE)\n  }\n  braces <- c()\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"(\") {\n      braces <- c(braces, \"(\")\n\
    \    } else {\n      if (length(braces) == 0) {\n        return(FALSE)\n     \
    \ } else {\n        braces <- braces[-length(braces)]\n      }\n    }\n  }\n \
    \ if (length(braces) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  left  <- brackets == \"(\"\n  right <- brackets == \")\"\n  lstack\
    \ <- c()\n  for (i in seq_along(brackets)) {\n    if (left[i]) {\n      lstack\
    \ <- c(lstack, i)\n    } else if (right[i]) {\n      if (length(lstack) == 0)\
    \ {\n        return(FALSE)\n      } else {\n        lstack <- lstack[-length(lstack)]\n\
    \      }\n    }\n  }\n  if (length(lstack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ntest_that(\"test_correct_bracketing\", {\n \
    \ expect_false(correct_bracketing('('))\n  expect_true(correct_bracketing('()'))\n\
    \  expect_true(correct_bracketing('(()())'))\n  expect_false(correct_bracketing(')(()'))\n\
    })", "\n    open_brackets = 0\n    for (bracket in strsplit(brackets, \"\")[[1]])\
    \ {\n        if (bracket == \"(\") {\n            open_brackets = open_brackets\
    \ + 1\n        } else if (bracket == \")\") {\n            open_brackets = open_brackets\
    \ - 1\n        }\n        if (open_brackets < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    if (open_brackets == 0) {\n        return(TRUE)\n    }\
    \ else {\n        return(FALSE)\n    }\n}\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\"\
    (\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\")(()\")\n", "\n    # if\
    \ the length of brackets is even\n    if (length(brackets) %% 2 == 0) {\n    \
    \    # if the first character is ')'\n        if (substr(brackets, 1, 1) == ')')\
    \ {\n            return(FALSE)\n        }\n        # if the last character is\
    \ '('\n        if (substr(brackets, length(brackets), length(brackets)) == '(')\
    \ {\n            return(FALSE)\n        }\n        # if it is well formated\n\
    \        return(TRUE)\n    }\n    # if the length of brackets is odd\n    else\
    \ {\n        return(FALSE)\n    }\n}\n", "\n    opening <- 0\n    closing <- 0\n\
    \    for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == \"\
    (\") {\n            opening <- opening + 1\n        } else {\n            closing\
    \ <- closing + 1\n        }\n        if (closing > opening) {\n            return(FALSE)\n\
    \        }\n    }\n    return(opening == closing)\n}\n", "\n  stopifnot(!missing(brackets))\n\
    \  stopifnot(!any(!c(\"(\", \")\") %in% brackets))\n  open <- sum(brackets ==\
    \ \"(\")\n  closed <- sum(brackets == \")\")\n  open == closed\n}\n", "\n  # bracket_match\
    \ <- function(brackets, i, depth) {\n  #   if (i == length(brackets)) {\n  # \
    \    return(depth == 0)\n  #   }\n  #   if (brackets[i] == \"(\") {\n  #     return(bracket_match(brackets,\
    \ i + 1, depth + 1))\n  #   } else if (brackets[i] == \")\") {\n  #     if (depth\
    \ == 0) {\n  #       return(FALSE)\n  #     } else {\n  #       return(bracket_match(brackets,\
    \ i + 1, depth - 1))\n  #     }\n  #   } else {\n  #     return(bracket_match(brackets,\
    \ i + 1, depth))\n  #   }\n  # }\n  # bracket_match(brackets, 1, 0)\n  #\n  #\
    \ i <- 1\n  # depth <- 0\n  # while (i <= length(brackets)) {\n  #   if (brackets[i]\
    \ == \"(\") {\n  #     depth <- depth + 1\n  #   } else if (brackets[i] == \"\
    )\") {\n  #     if (depth == 0) {\n  #       return(FALSE)\n  #     } else {\n\
    \  #       depth <- depth - 1\n  #     }\n  #   }\n  #   i <- i + 1\n  # }\n \
    \ # depth == 0\n  #\n  # depth <- 0\n  # for (i in 1:length(brackets)) {\n  #\
    \   if (brackets[i] == \"(\") {\n  #     depth <- depth + 1\n  #   } else if (brackets[i]\
    \ == \")\") {\n  #     if (depth == 0) {\n  #       return(FALSE)\n  #     } else\
    \ {\n  #       depth <- depth - 1\n  #     }\n  #   }\n  # }\n  # depth == 0\n\
    \  #\n  # i <- 1\n  # while (i <= length(brackets)) {\n  #   if (brackets[i] ==\
    \ \"(\") {\n  #     if (brackets[length(br", "\n    # count the number of opening\
    \ brackets\n    n_open <- nchar(gsub(\"[^(]\", \"\", brackets))\n    # count the\
    \ number of closing brackets\n    n_close <- nchar(gsub(\"[^)]\", \"\", brackets))\n\
    \    # return TRUE if the numbers are equal\n    return(n_open == n_close)\n}\n\
    \ ", "\n  ## YOUR CODE HERE\n  stack <- c()\n  for (i in seq_along(brackets))\
    \ {\n    if (brackets[i] == \"(\") {\n      stack <- c(stack, \"L\")\n    } else\
    \ if (brackets[i] == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  return(length(stack) == 0)\n}\n", "\n  if(length(brackets) %% 2 == 1) return(FALSE)\n\
    \  for(i in 1:length(brackets)) {\n    if(brackets[i] == '(') {\n      if(brackets[length(brackets)-i+1]\
    \ != ')') return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n", "\n  n <- nchar(brackets)\n\
    \  if (n %% 2 == 1) {\n    return(FALSE)\n  }\n  else {\n    #put brackets into\
    \ a vector\n    brackets_v <- strsplit(brackets, \"\")[[1]]\n    count <- 0\n\
    \    for (i in brackets_v) {\n      if (i == \"(\") {\n        count <- count\
    \ + 1\n      }\n      else {\n        count <- count - 1\n      }\n      if (count\
    \ < 0) {\n        return(FALSE)\n      }\n    }\n    if (count == 0) {\n     \
    \ return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n", "\n\
    \    counter = 0\n    for (bracket in brackets) {\n        if (bracket == '(')\
    \ {\n            counter = counter + 1\n        } else if (bracket == ')') {\n\
    \            counter = counter - 1\n        }\n        if (counter < 0) {\n  \
    \          return(FALSE)\n        }\n    }\n    if (counter == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\ncat(correct_bracketing('('), '\\\
    n')\ncat(correct_bracketing('()'), '\\n')\ncat(correct_bracketing('(()())'), '\\\
    n')\ncat(correct_bracketing(')(()'), '\\n')\n", "\n  if(length(brackets) == 0)\
    \ return(TRUE)\n  if(substr(brackets,1,1) == '(' && substr(brackets,length(brackets),length(brackets))\
    \ == ')') return(correct_bracketing(substr(brackets,2,length(brackets)-1)))\n\
    \  return(FALSE)\n}\n", "\n    if(!(all(c('(', ')') %in% strsplit(brackets, '')[[1]])))\
    \ {\n        stop('Brackets string must only contain \\'(\\' and \\')\\'.')\n\
    \    }\n    return(balancing_brackets(strsplit(brackets, '')[[1]]))\n}\n\nbalancing_brackets\
    \ <- function(tokens) {\n    ok <- rep(0, length(tokens))\n    for(i in seq_along(tokens))\
    \ {\n        if(!(tokens[i] %in% c('(', ')'))) {\n            stop('Brackets string\
    \ must only contain \\'(\\' and \\')\\'.')\n        }\n        if(tokens[i] ==\
    \ '(') {\n            ok[i] <- 1\n        } else {\n            if(i > 1) {\n\
    \                ok[i] <- ok[i - 1] - 1\n            } else {\n              \
    \  ok[i] <- -1\n            }\n        }\n    }\n    if(ok[length(ok)] == 0) {\n\
    \        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncorrect_bracketing('(')\n\
    correct_bracketing('()')\ncorrect_bracketing('(()())')\ncorrect_bracketing(')(()')\n",
  "\n    b_vec <- strsplit(brackets, \"\")[[1]]\n    # assuming that brackets is a\
    \ string of \"(\" and \")\"\n    if (any(b_vec != \"(\" & b_vec != \")\")) {\n\
    \        stop(\"brackets must be a string of '(' and ')'.\")\n    }\n    if (any(b_vec\
    \ == \")\" & head(b_vec, -1) == \"(\")) {\n        stop(\"closing bracket found\
    \ before opening bracket.\")\n    }\n    return(all(b_vec[which(b_vec == \"(\"\
    )] == \"(\" &\n               b_vec[which(b_vec == \")\")] == \")\"))\n}\ncorrect_bracketing('(')\n\
    correct_bracketing('()')\ncorrect_bracketing('(()())')\ncorrect_bracketing(')(()')\n",
  "\n    if (grepl('\\\\(', brackets)) {\n        str_sub(brackets, first(str_which(brackets,\
    \ '\\\\(')), -1)\n    } else if (grepl('\\\\)', brackets)) {\n        str_sub(brackets,\
    \ first(str_which(brackets, '\\\\)')), -1)\n    } else {\n        TRUE\n    }\n\
    }\n", "\n}\n", "\n  # INSERT YOUR CODE HERE\n}\n", "\n    # your code here\n \
    \   count <- 0\n    for (bracket in strsplit(brackets, split = \"\")[[1]]) {\n\
    \        if (bracket == \"(\") {\n            count <- count + 1\n        } else\
    \ if (bracket == \")\") {\n            count <- count - 1\n        }\n       \
    \ if (count < 0) {\n            return(FALSE)\n        }\n    }\n    if (count\
    \ == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\n", "\n    L <- strsplit(brackets, \"\")[[1]]\n    i <- 1\n    while (i <= length(L))\
    \ {\n        if (L[i] == \")\") {\n            if (i == 1) {\n               \
    \ return(FALSE)\n            }\n            if (L[i-1] == \"(\") {\n         \
    \       L <- L[-c(i-1, i)]\n                i <- i - 1\n            } else {\n\
    \                return(FALSE)\n            }\n        } else {\n            i\
    \ <- i + 1\n        }\n    }\n    if (length(L) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n    if(length(grep(\"\\\\\
    (\", brackets)) == length(grep(\"\\\\)\", brackets)))\n        return(TRUE)\n\
    \    else\n        return(FALSE)\n}\n\nprint(\"():\")\nprint(correct_bracketing(\"\
    ()\"))\nprint(\"(()())\")\nprint(correct_bracketing(\"(()())\"))\nprint(\"(()))\"\
    )\nprint(correct_bracketing(\"(()))\"))\n", "\n  stack <- NULL\n  for (bracket\
    \ in strsplit(brackets, split = \"\")[[1]]) {\n    if (bracket == \"(\") {\n \
    \     stack <- c(stack, bracket)\n    } else if (bracket == \")\") {\n      if\
    \ (is.null(stack)) {\n        return(FALSE)\n      } else {\n        stack <-\
    \ stack[-length(stack)]\n      }\n    }\n  }\n  if (is.null(stack)) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  counter <- 0\n  for (i in seq_along(brackets))\
    \ {\n    if (brackets[i] == '(') counter <- counter + 1\n    if (brackets[i] ==\
    \ ')') counter <- counter - 1\n    if (counter < 0) return(FALSE)\n  }\n  if (counter\
    \ == 0) return(TRUE)\n  return(FALSE)\n}\n", "\n  brackets = unlist(strsplit(brackets,\
    \ \"\"))\n  stack = c()\n  for (bracket in brackets) {\n    if (bracket == \"\
    (\") {\n      stack = c(stack, bracket)\n    } else if (bracket == \")\") {\n\
    \      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n    \
    \    stack = stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) ==\
    \ 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  # if\
    \ the open bracket count is the same as the close bracket count and the open bracket\
    \ count is 0 then return TRUE\n  if (sum(brackets == '(') == sum(brackets == ')')\
    \ & sum(brackets == '(') == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n  stack <- function() {\n    empty <- function()\
    \ {\n      return(TRUE)\n    }\n    push <- function(element) {\n      element\n\
    \    }\n    pop <- function() {\n      return(NULL)\n    }\n    return(list(push=push,\
    \ pop=pop, empty=empty))\n  }\n  open <- function(c) {\n    if (c=='(') {\n  \
    \    return(TRUE)\n    }\n    return(FALSE)\n  }\n  close <- function(c) {\n \
    \   if (c==')') {\n      return(TRUE)\n    }\n    return(FALSE)\n  }\n  brackets\
    \ <- strsplit(brackets, \"\")[[1]]\n  st <- stack()\n  for (c in brackets) {\n\
    \    if (open(c)) {\n      st$push(c)\n    } else if (close(c)) {\n      if (st$empty())\
    \ {\n        return(FALSE)\n      }\n      st$pop()\n    }\n  }\n  if (st$empty())\
    \ {\n    return(TRUE)\n  }\n  return(FALSE)\n}", "\n\tcounter <- 0\n\tfor (i in\
    \ 1:nchar(brackets)) {\n\t\tif (substr(brackets, i, i) == \"(\") counter <- counter\
    \ + 1\n\t\tif (substr(brackets, i, i) == \")\") counter <- counter - 1\n\t\tif\
    \ (counter < 0) return(FALSE)\n\t}\n\tif (counter != 0) return(FALSE)\n\treturn(TRUE)\n\
    }\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n}\n", "\n    # return\
    \ NULL as a placeholder\n    return(NULL)\n}\n", "\n    # your code here\n   \
    \ return(TRUE)\n}\n", "\n    counter <- 0\n    for (c in brackets) {\n       \
    \ if (c == \"(\") {\n            counter <- counter + 1\n        } else if (c\
    \ == \")\") {\n            counter <- counter - 1\n        }\n        if (counter\
    \ < 0) {\n            return(FALSE)\n        }\n    }\n    if (counter != 0) {\n\
    \        return(FALSE)\n    }\n    return(TRUE)\n}", "\n    stack <- list()\n\
    \    for (i in 1:nchar(brackets)) {\n        char <- substr(brackets, i, i)\n\
    \        if (char == \"(\") {\n            stack <- c(stack, char)\n        }\
    \ else if (char == \")\") {\n            if (length(stack) == 0) {\n         \
    \       return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    return(length(stack) == 0)\n}\n\ncorrect_bracketing('(')\n\
    correct_bracketing('()')\ncorrect_bracketing('(()())')\ncorrect_bracketing(')(()')\n",
  "\n    open <- 0\n    for (bracket in strsplit(brackets, \"\")[[1]]) {\n       \
    \ if (bracket == \"(\") {\n            open <- open + 1\n        } else if (bracket\
    \ == \")\") {\n            open <- open - 1\n        }\n        if (open < 0)\
    \ {\n            return(FALSE)\n        }\n    }\n    return(open == 0)\n}", "\n\
    \  count_open <- brackets %>% str_count('\\\\(')\n  count_close <- brackets %>%\
    \ str_count('\\\\)')\n  if (count_open != count_close) {\n    return(FALSE)\n\
    \  } else {\n    return(TRUE)\n  }\n}\n", "\n    return(brackets %in% c(\"()\"\
    ))\n}\n", "\n  open_brackets <- brackets[brackets == '(']\n  close_brackets <-\
    \ brackets[brackets == ')']\n  if (length(open_brackets) != length(close_brackets))\
    \ return(FALSE)\n  if (sum(open_brackets) != sum(close_brackets)) return(FALSE)\n\
    \  if (max(cumsum(open_brackets)) < max(cumsum(close_brackets))) return(FALSE)\n\
    \  return(TRUE)\n}\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n  if (length(brackets) == 0) {\n    return(TRUE)\n\
    \  }\n  first <- substr(brackets, 1, 1)\n  if (first == \"(\") {\n    if (correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))) == FALSE) {\n      return(FALSE)\n    }\n    len <- nchar(brackets)\n\
    \    if (substr(brackets, len, len) == \")\") {\n      return(TRUE)\n    } else\
    \ {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n}\n", "\n\
    \    # write your code here\n    return(FALSE)\n}\n ", "\n  stack <- c()\n  for\
    \ (b in strsplit(brackets, split = \"\")[[1]]) {\n    if (b == \"(\") {\n    \
    \  stack <- c(stack, b)\n    } else if (b == \")\") {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\n", "\n  if (length(gregexpr(\"\
    \\\\(\", brackets))==length(gregexpr(\"\\\\)\", brackets))) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  opening <- c(\"(\")\n  closing\
    \ <- c(\")\")\n  open <- 0\n  close <- 0\n  for (i in 1:length(brackets)) {\n\
    \    if (brackets[i] %in% opening) {\n      open <- open + 1\n    } else if (brackets[i]\
    \ %in% closing) {\n      close <- close + 1\n    }\n  }\n  if (open == close)\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncorrect_bracketing('(')\n\
    correct_bracketing('()')\ncorrect_bracketing('(()())')\ncorrect_bracketing(')(()')\n",
  "\n    # YOUR CODE HERE\n}\n", "\n  count = 0\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"(\") {\n      count = count + 1\n    } else\
    \ {\n      count = count - 1\n    }\n  }\n  if (count == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  left_brackets <- 0\n  for (c in\
    \ brackets) {\n    if (c == '(') {\n      left_brackets <- left_brackets + 1\n\
    \    } else if (c == ')') {\n      if (left_brackets == 0) {\n        return(FALSE)\n\
    \      }\n      left_brackets <- left_brackets - 1\n    }\n  }\n  return(left_brackets\
    \ == 0)\n}\n\ntest_that('test correct_bracketing', {\n  expect_true(correct_bracketing('()'))\n\
    \  expect_true(correct_bracketing('(()())'))\n  expect_false(correct_bracketing('('))\n\
    \  expect_false(correct_bracketing(')(()'))\n})\n", "\n  if( !all(brackets %in%\
    \ c(\"(\", \")\")) ) stop(\"brackets should contain only '(' and ')'\")\n  return(\
    \ all(cumsum(brackets == \"(\") - cumsum(brackets == \")\") >= 0) )\n}\n", "\n\
    \  matched_brackets <- c()\n  for (i in brackets) {\n    if (i == \"(\") {\n \
    \     matched_brackets <- c(matched_brackets, i)\n    } else if (i == \")\") {\n\
    \      if (length(matched_brackets) > 0) {\n        matched_brackets <- matched_brackets[-length(matched_brackets)]\n\
    \      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(matched_brackets)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncorrect_bracketing(')(()')\n",
  "\n\t# YOUR CODE HERE\n\tctr = 0\n\tfor (i in 1:nchar(brackets)) {\n\t\tif (substr(brackets,\
    \ i, i) == \"(\") {\n\t\t\tctr <- ctr + 1\n\t\t} else {\n\t\t\tctr <- ctr - 1\n\
    \t\t}\n\t\tif (ctr < 0) {\n\t\t\treturn(FALSE)\n\t\t}\n\t}\n\tif (ctr == 0) {\n\
    \t\treturn(TRUE)\n\t} else {\n\t\treturn(FALSE)\n\t}\n}\n\n", "\n    # YOUR CODE\
    \ HERE\n    for (i in 1:length(brackets)) {\n        if (brackets[i] == '(') {\n\
    \            is_closed <- FALSE\n            for (j in (i+1):length(brackets))\
    \ {\n                if (brackets[j] == ')') {\n                    is_closed\
    \ <- TRUE\n                    break\n                }\n            }\n     \
    \       if (!is_closed) {\n                return(FALSE)\n            }\n    \
    \    }\n    }\n    return(TRUE)\n}\ncorrect_bracketing('(')\ncorrect_bracketing('()')\n\
    correct_bracketing('(()())')\ncorrect_bracketing(')(()')\n", "\n\tif (length(grep(\"\
    \\\\)\", brackets))==length(grep(\"\\\\(\", brackets))) {\n\t\treturn(TRUE)\n\t\
    } else {\n\t\treturn(FALSE)\n\t}\n}\n\n", "\n    counter <- 0\n    for (i in brackets)\
    \ {\n        if (i == '(') {\n            counter <- counter + 1\n        } else\
    \ if (i == ')') {\n            counter <- counter - 1\n        }\n        if (counter\
    \ < 0) {\n            return(FALSE)\n        }\n    }\n    if (counter == 0) {\n\
    \        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n", "\n \
    \   bracket_count <- 0\n    for (i in 1:nchar(brackets)) {\n        bracket <-\
    \ substr(brackets, i, i)\n        if (bracket == \"(\") {\n            bracket_count\
    \ <- bracket_count + 1\n        } else if (bracket == \")\") {\n            bracket_count\
    \ <- bracket_count - 1\n        }\n        if (bracket_count < 0) {\n        \
    \    return(FALSE)\n        }\n    }\n    if (bracket_count != 0) {\n        return(FALSE)\n\
    \    }\n    return(TRUE)\n}\n\n", "\n    if(is.null(brackets)){\n        return(FALSE)\n\
    \    }\n    if(substr(brackets, 1, 1) == \"(\"){\n        if(substr(brackets,\
    \ length(brackets), length(brackets)) == \")\"){\n            return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets)-1)))\n        }else{\n            return(FALSE)\n      \
    \  }\n    }else{\n        return(length(brackets) == 0)\n    }\n}\n", "\n    num_open\
    \ <- 0\n    num_close <- 0\n    for (char in brackets) {\n        if (char ==\
    \ '(') {\n            num_open <- num_open + 1\n        } else if (char == ')')\
    \ {\n            num_close <- num_close + 1\n        }\n        if (num_close\
    \ > num_open) {\n            return(FALSE)\n        }\n    }\n    return(num_open\
    \ == num_close)\n}\n\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n  # TODO\n  if(brackets %in% c('(', ')')){\n\
    \    if(brackets[1] == ')' || brackets[length(brackets)] == '('){\n      return(FALSE)\n\
    \    }\n  }\n  return(TRUE)\n}\n", "\n    # Write the code for your function here\n\
    \    }\n", "\n    #convert the string to a vector of characters\n    brackets\
    \ <- strsplit(brackets, \"\")[[1]]\n    pairs <- 0\n    #go through each character\
    \ and add 1 for each opening bracket and subtract 1 for each closing bracket\n\
    \    for (bracket in brackets) {\n        if (bracket == \"(\") {\n          \
    \  pairs <- pairs + 1\n        } else if (bracket == \")\") {\n            pairs\
    \ <- pairs - 1\n        }\n        #if we ever get a negative number we know there\
    \ are more closing brackets than opening brackets\n        if (pairs < 0) {\n\
    \            return(FALSE)\n        }\n    }\n    #if pairs is greater than zero\
    \ at the end there were more opening brackets than closing brackets\n    if (pairs\
    \ > 0) {\n        return(FALSE)\n    }\n    return(TRUE)\n}\n", "\n  return(all(sapply(gregexpr(\"\
    [()]\", brackets), length) == 1))\n}\n", "\n    open <- 0\n    close <- 0\n  \
    \  for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == \"(\"\
    ) {\n            open <- open + 1\n        } else {\n            close <- close\
    \ + 1\n        }\n        if (close > open) {\n            return(FALSE)\n   \
    \     }\n    }\n    return(open == close)\n}\n", "\n    # REPLACE THIS CODE WITH\
    \ YOUR correct_bracketing SOLUTION\n    TRUE\n}\n ", "\n  count <- 0\n  for (char\
    \ in brackets) {\n    if (char == \"(\") {\n      count <- count + 1\n    } else\
    \ if (char == \")\") {\n      count <- count - 1\n    }\n    if (count < 0) {\n\
    \      return(FALSE)\n    }\n  }\n  return(count == 0)\n}\n", "\n  stack <- c()\n\
    \  stack_pos <- 0\n  expected_closing <- NULL\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"(\") {\n      stack_pos <- stack_pos\
    \ + 1\n      stack[stack_pos] <- \"(\")\n      expected_closing <- \")\"\n   \
    \ } else if (substr(brackets, i, i) == \")\") {\n      if (stack_pos == 0 || stack[stack_pos]\
    \ != expected_closing) {\n        return(FALSE)\n      }\n      stack_pos <- stack_pos\
    \ - 1\n      expected_closing <- NULL\n    }\n  }\n  if (stack_pos > 0) {\n  \
    \  return(FALSE)\n  }\n  return(TRUE)\n}\n\nprint(\"Testing correct_bracketing\"\
    )\ntestthat::expect_equal(correct_bracketing(\"\"), TRUE)\ntestthat::expect_equal(correct_bracketing(\"\
    (\"), FALSE)\ntestthat::expect_equal(correct_bracketing(\"()\"), TRUE)\ntestthat::expect_equal(correct_bracketing(\"\
    (()())\"), TRUE)\ntestthat::expect_equal(correct_bracketing(\"(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(()",
  "\n  stack <- function(...){\n    x <- as.list(...)\n    function(y){\n      eval(substitute(x[[y]]))\n\
    \    }\n  }\n  is.empty <- function(x){\n    x==NULL\n  }\n  open <- function(x){\n\
    \    c(x,list(NULL))\n  }\n  top <- function(x){\n    eval(substitute(x[[1]]))\n\
    \  }\n  pop <- function(x){\n    x[[2]]\n  }\n  l <- stack()\n  for(i in seq_along(brackets)){\n\
    \    if(brackets[i]==\"(\"){\n      l <- open(l)\n    } else if(brackets[i]==\"\
    )\"){\n      if(is.empty(l)) return(FALSE)\n      l <- pop(l)\n    }\n  }\n  is.empty(l)\n\
    }\n ", "\n    stack <- c()\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets,\
    \ i, i) == \"(\") {\n            stack <- c(stack, \"(\")\n        } else {\n\
    \            if (length(stack) > 0) {\n                stack <- stack[-length(stack)]\n\
    \            } else {\n                return(FALSE)\n            }\n        }\n\
    \    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n  \
    \      return(FALSE)\n    }\n}\n", "\n  list_count <- 0\n  for (i in brackets)\
    \ {\n    if (i == \"(\") {\n      list_count <- list_count + 1\n    } else if\
    \ (i == \")\") {\n      list_count <- list_count - 1\n    }\n  }\n  if (list_count\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  opening_count\
    \ = 0\n  opening_pos = 0\n  closing_pos = 0\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"(\") {\n      opening_count = opening_count\
    \ + 1\n      opening_pos = i\n    }\n    if (substr(brackets, i, i) == \")\")\
    \ {\n      closing_pos = i\n    }\n  }\n  return(opening_count == 1 & opening_pos\
    \ < closing_pos)\n}\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n    # TODO: implement your solution\n    num_open\
    \ = 0\n    num_close = 0\n    for (i in 1:nchar(brackets)) {\n        c = substr(brackets,\
    \ i, i)\n        if (c == \"(\") {\n            num_open = num_open + 1\n    \
    \    } else if (c == \")\") {\n            num_close = num_close + 1\n       \
    \ }\n    }\n    if (num_open == num_close) {\n        return(TRUE)\n    } else\
    \ {\n        return(FALSE)\n    }\n}\n", "\n  count = 0\n  for (x in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, x, x) == \"(\") {\n      count = count + 1\n   \
    \ } else if (substr(brackets, x, x) == \")\") {\n      count = count - 1\n   \
    \ }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if (grepl('\\\\(', brackets) == FALSE) {\n    return(TRUE)\n\
    \  }\n  for (i in 1:nchar(brackets)) {\n    bracket <- substr(brackets, i, i)\n\
    \    if (bracket == '(') {\n      j <- i + 1\n      loop <- TRUE\n      while\
    \ (loop) {\n        nested_bracket <- substr(brackets, j, j)\n        if (nested_bracket\
    \ == '(') {\n          j <- j + 1\n        } else if (nested_bracket == ')') {\n\
    \          brackets <- substr(brackets, 1, i - 1) %>% paste0(., substr(brackets,\
    \ j + 1, nchar(brackets)))\n          loop <- FALSE\n        } else {\n      \
    \    loop <- FALSE\n        }\n      }\n    }\n  }\n  if (nchar(brackets) > 0)\
    \ {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n", "\n    counter\
    \ <- 0\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i)\
    \ == \"(\") {\n            counter <- counter + 1\n        } else {\n        \
    \    counter <- counter - 1\n        }\n        if (counter < 0) {\n         \
    \   return(FALSE)\n        }\n    }\n    if (counter != 0) {\n        return(FALSE)\n\
    \    }\n    return(TRUE)\n}\n\ncat(\"\\ncorrect_bracketing()\\n\")\nbrackets <-\
    \ \"(\"\ncat(\"\\nbrackets = \", brackets, \"\\ncorrect_bracketing(brackets) =\
    \ \", correct_bracketing(brackets), \"\\n\")\nbrackets <- \"()\"\ncat(\"\\nbrackets\
    \ = \", brackets, \"\\ncorrect_bracketing(brackets) = \", correct_bracketing(brackets),\
    \ \"\\n\")\nbrackets <- \"(()())\"\ncat(\"\\nbrackets = \", brackets, \"\\ncorrect_bracketing(brackets)\
    \ = \", correct_bracketing(brackets), \"\\n\")\nbrackets <- \")(()\"\ncat(\"\\\
    nbrackets = \", brackets, \"\\ncorrect_bracketing(brackets) = \", correct_bracketing(brackets),\
    \ \"\\n\")\n", "\n  n <- nchar(brackets)\n  if (n %% 2 != 0) {\n    return(FALSE)\n\
    \  }\n  open <- 0\n  closed <- 0\n  for (i in 1:n) {\n    if (substr(brackets,\
    \ i, i) == \"(\") {\n      open <- open + 1\n    } else {\n      closed <- closed\
    \ + 1\n    }\n    if (closed > open) {\n      return(FALSE)\n    }\n  }\n  if\
    \ (open == closed) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\
    correct_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n  bracket_list <- strsplit(brackets, split =\
    \ \"\")[[1]]\n  open_count <- sum(bracket_list == \"(\")\n  close_count <- sum(bracket_list\
    \ == \")\")\n  if (open_count == close_count) {\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n\nprint(correct_bracketing('('))\nprint(correct_bracketing('()'))\n\
    print(correct_bracketing('(()())'))\nprint(correct_bracketing(')(()'))\n\nprint(\"\
    -----\")\n", "\n    num_open <- 0\n    for (i in 1:nchar(brackets)) {\n      \
    \  current_bracket <- substr(brackets, i, i)\n        if (current_bracket == \"\
    (\") {\n            num_open <- num_open + 1\n        } else if (current_bracket\
    \ == \")\") {\n            num_open <- num_open - 1\n        }\n        if (num_open\
    \ < 0) {\n            return(FALSE)\n        }\n    }\n    return(num_open ==\
    \ 0)\n}\n", "\n    counter <- 0\n    for (i in 1:nchar(brackets)) {\n        if\
    \ (substr(brackets, i, i) == \"(\") {\n            counter <- counter + 1\n  \
    \      } else {\n            counter <- counter - 1\n        }\n        if (counter\
    \ < 0) {\n            return(FALSE)\n        }\n    }\n    if (counter == 0) {\n\
    \        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\ncorrect_bracketing('(()())')\n",
  "\n  # YOUR CODE HERE\n  stack <- rep(0, length(brackets))\n  stack_top <- 0\n \
    \ for (i in 1:length(brackets)) {\n    if (brackets[i] == '(') {\n      stack_top\
    \ <- stack_top + 1\n      stack[stack_top] <- '('\n    } else if (brackets[i]\
    \ == ')') {\n      if (stack_top == 0) {\n        return(FALSE)\n      } else\
    \ {\n        stack_top <- stack_top - 1\n      }\n    }\n  }\n  if (stack_top\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n   \
    \ num_open <- nchar(gsub(\"\\\\)\", \"\", brackets))\n    num_close <- nchar(gsub(\"\
    \\\\(\", \"\", brackets))\n    num_open == num_close\n}\ncorrect_bracketing(\"\
    (\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\"\
    )(()\")\n", "\n    l <- nchar(brackets)\n    n <- 0\n    for (i in 1:l) {\n  \
    \      if (substr(brackets, i, i) == \"(\") {\n            n <- n + 1\n      \
    \  } else {\n            n <- n - 1\n        }\n        if (n < 0) {\n       \
    \     return(FALSE)\n        }\n    }\n    return(n == 0)\n}\n", "\n    opening_brackets\
    \ <- c('(', '[', '{')\n    closing_brackets <- c(')', ']', '}')\n    brackets_map\
    \ <- c(\n        '(', ')',\n        '[', ']',\n        '{', '}'\n    )\n    stack\
    \ <- list()\n    for (bracket in brackets) {\n        if (bracket %in% opening_brackets)\
    \ {\n            stack <- c(stack, bracket)\n        } else if (bracket %in% closing_brackets)\
    \ {\n            if (length(stack) == 0) {\n                return(FALSE)\n  \
    \          }\n            open_bracket <- stack[length(stack)]\n            stack\
    \ <- stack[-length(stack)]\n            if (brackets_map[brackets_map == open_bracket]\
    \ != brackets_map[brackets_map == bracket]) {\n                return(FALSE)\n\
    \            }\n        }\n    }\n    return(length(stack) == 0)\n}\ntestthat::expect_equal(correct_bracketing('('),\
    \ FALSE)\ntestthat::expect_equal(correct_bracketing('()'), TRUE)\ntestthat::expect_equal(correct_bracketing('(()())'),\
    \ TRUE)\ntestthat::expect_equal(correct_bracketing(')(()'), FALSE)", "\n  input_length\
    \ <- nchar(brackets)\n  if (input_length < 1) {\n    return(TRUE)\n  } else if\
    \ (nchar(brackets) %% 2 != 0) {\n    return(FALSE)\n  } else {\n    if (substr(brackets,\
    \ input_length, input_length) == '(') {\n      return(FALSE)\n    } else {\n \
    \     return(correct_bracketing(substr(brackets, 1, input_length - 1)))\n    }\n\
    \  }\n}\n", "\n  if (grepl('\\\\(', brackets) && !grepl('\\\\)', brackets)) {\n\
    \    return(FALSE)\n  } else if (grepl('\\\\)', brackets) && !grepl('\\\\(', brackets))\
    \ {\n    return(FALSE)\n  } else if (grepl('^\\\\)', brackets)) {\n    return(FALSE)\n\
    \  } else if (grepl('\\\\)$', brackets)) {\n    return(FALSE)\n  } else if (grepl('\\\
    \\(\\\\)', brackets)) {\n    brackets <- gsub('\\\\(\\\\)', '', brackets)\n  \
    \  return(correct_bracketing(brackets))\n  } else {\n    return(TRUE)\n  }\n}\n",
  "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  bracket_count <- 0\n  for (i\
    \ in seq_along(brackets)) {\n    if (brackets[i] == \"(\") {\n      bracket_count\
    \ <- bracket_count + 1\n    } else if (brackets[i] == \")\") {\n      bracket_count\
    \ <- bracket_count - 1\n    }\n    if (bracket_count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (bracket_count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n    nopen <- grepl(\"\\\\(\", brackets)\n  \
    \  nclose <- grepl(\"\\\\)\", brackets)\n    if(sum(nopen) != sum(nclose)) {\n\
    \        return(FALSE)\n    }\n    return(!any(cumsum(nopen) < cumsum(nclose)))\n\
    }\n", "\n  stopifnot(is.character(brackets))\n  return(sum(c(rep(\"(\",sum(brackets==\"\
    (\")),rep(\")\",sum(brackets==\")\"))))==brackets)\n}\n", "\n    is_empty(brackets)\
    \ or\n    (brackets[1] == '(' and correct_bracketing(substr(brackets, 2, nchar(brackets)))\
    \ and\n     brackets[nchar(brackets)] == ')')\n}\ncorrect_bracketing('(')\ncorrect_bracketing('()')\n\
    correct_bracketing('(()())')\ncorrect_bracketing(')(()')\n", "\n  # YOUR CODE\
    \ HERE\n}\ncorrect_bracketing <- function(brackets) {\n  stack <- list()\n  for\
    \ (b in strsplit(brackets, \"\")[[1]]) {\n    if (b == \"(\") {\n      stack <-\
    \ c(stack, \")\")\n    } else if (length(stack) == 0) {\n      return(FALSE)\n\
    \    } else {\n      stack <- stack[-length(stack)]\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\n\ncorrect_bracketing(\"(\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"\
    (()())\")\ncorrect_bracketing(\")(()\")\n", "\n    if (length(grep('\\\\)', brackets))\
    \ > length(grep('\\\\(', brackets))) return(FALSE)\n    else {\n        counter\
    \ <- 0\n        for (i in 1:length(brackets)) {\n            if (brackets[i] ==\
    \ '(') counter <- counter + 1\n            else if (brackets[i] == ')') counter\
    \ <- counter - 1\n            if (counter < 0) return(FALSE)\n        }\n    \
    \    if (counter > 0) return(FALSE)\n        else return(TRUE)\n    }\n}\n", "\n\
    \  # YOUR CODE HERE\n}", "\n    stack <- 0\n    for (c in brackets) {\n      \
    \  if (c == \"(\") {\n            stack <- stack + 1\n        } else if (c ==\
    \ \")\") {\n            stack <- stack - 1\n        }\n        if (stack < 0)\
    \ {\n            return(FALSE)\n        }\n    }\n    return(stack == 0)\n}\n",
  "\n  # TODO\n  }\n ", "\n  counter <- 0\n  for (i in 1:nchar(brackets)) {\n    char\
    \ <- substr(brackets, i, i)\n    if (char == \"(\") {\n      counter <- counter\
    \ + 1\n    } else if (char == \")\") {\n      counter <- counter - 1\n    }\n\
    \    if (counter < 0) {\n      return(FALSE)\n    }\n  }\n  return(counter ==\
    \ 0)\n}\ncorrect_bracketing('(()())')", "\n  n <- nchar(brackets)\n  if (n%%2\
    \ != 0) {\n    return(FALSE)\n  } else {\n    x <- 0\n    for (i in 1:n) {\n \
    \     if (substr(brackets, i, i) == \"(\") {\n        x <- x + 1\n      } else\
    \ {\n        x <- x - 1\n      }\n      if (x < 0) {\n        return(FALSE)\n\
    \      }\n    }\n    if (x != 0) {\n      return(FALSE)\n    } else {\n      return(TRUE)\n\
    \    }\n  }\n}\n", "\n  stack <- vector(\"character\", 0)\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"(\") {\n      stack <- c(stack, \"(\"\
    )\n    } else {\n      if (length(stack) > 0) {\n        stack <- stack[-length(stack)]\n\
    \      } else {\n        return(FALSE)\n      }\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\n", "\n    brackets_vector <- strsplit(brackets, \"\")[[1]]\n    for\
    \ (i in 1:length(brackets_vector)) {\n        if (brackets_vector[i] == \"(\"\
    ) {\n            brackets_vector[i] <- 1\n        } else {\n            brackets_vector[i]\
    \ <- -1\n        }\n    }\n    sum_vector <- cumsum(brackets_vector)\n    return(all(sum_vector\
    \ >= 0))\n}\n", "\n  l_brackets <- c(0)\n  r_brackets <- c(0)\n  for (i in seq_along(brackets))\
    \ {\n    if (brackets[i] == \"(\") {\n      l_brackets <- c(l_brackets, i)\n \
    \   } else if (brackets[i] == \")\") {\n      r_brackets <- c(r_brackets, i)\n\
    \    }\n  }\n  l_brackets <- head(l_brackets, -1)\n  r_brackets <- head(r_brackets,\
    \ -1)\n  if (sum(l_brackets == r_brackets - 1) == length(l_brackets)) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}", "\n  num_open <- 0\n  for (c in brackets)\
    \ {\n    if (c == '(') {\n      num_open <- num_open + 1\n    } else if (c ==\
    \ ')') {\n      num_open <- num_open - 1\n    }\n    if (num_open < 0) {\n   \
    \   return(FALSE)\n    }\n  }\n  return(num_open == 0)\n}", "\n  # TODO: Write\
    \ this!\n  # check if brackets is only \"(\", return FALSE\n  if(brackets == \"\
    (\") {\n    return(FALSE)\n  }\n  # check if brackets is only \")\", return FALSE\n\
    \  if(brackets == \")\") {\n    return(FALSE)\n  }\n  # check if there is an uneven\
    \ number of brackets, return FALSE\n  if(length(brackets) %% 2 != 0) {\n    return(FALSE)\n\
    \  }\n  # check if there is an uneven number of opening brackets, return FALSE\n\
    \  if(length(grep(\"(\", brackets)) %% 2 != 0) {\n    return(FALSE)\n  }\n  #\
    \ check if there is an uneven number of closing brackets, return FALSE\n  if(length(grep(\"\
    )\", brackets)) %% 2 != 0) {\n    return(FALSE)\n  }\n  # check if there is a\
    \ closing bracket before an opening bracket, return FALSE\n  if(length(grep(\"\
    \\\\)\", brackets)) > length(grep(\"\\\\(\", brackets))) {\n    return(FALSE)\n\
    \  }\n  # if no false is returned, return TRUE\n  return(TRUE)\n}\n", "\n  \n}",
  "\n  # YOUR CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  return(NULL)\n}\n", "\n\t\
    # ...\n}\n", "\n  stack <- c()\n\n  for (b in brackets) {\n    if (b == '(') {\n\
    \      stack <- c(stack, b)\n    } else if (b == ')') {\n      if (length(stack)\
    \ == 0) return(FALSE)\n      stack <- stack[-length(stack)]\n    }\n  }\n\n  if\
    \ (length(stack) == 0) return(TRUE)\n  return(FALSE)\n}\n", "\n  count = 0\n \
    \ for (i in 1:nchar(brackets)) {\n    bracket <- substr(brackets, i, i)\n    if\
    \ (bracket == \"(\") {\n      count <- count + 1\n    } else if (bracket == \"\
    )\") {\n      count <- count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n  # create an empty stack\n  stack <- list()\n\
    \  # loop through each character in the string\n  for (i in 1:nchar(brackets))\
    \ {\n    # if the character is an opening bracket\n    if (substr(brackets, i,\
    \ i) == \"(\") {\n      # push it onto the stack\n      stack <- c(stack, \"(\"\
    )\n    } else {\n      # otherwise, if the character is a closing bracket\n  \
    \    if (substr(brackets, i, i) == \")\") {\n        # pop a value off the stack\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  # if the stack\
    \ is empty\n  if (length(stack) == 0) {\n    # return TRUE\n    return(TRUE)\n\
    \  } else {\n    # otherwise, return FALSE\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"\
    (\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\"\
    )(()\")\n", "\n  stack <- c()\n  for (b in strsplit(brackets, \"\")[[1]]) {\n\
    \    if (b == \"(\") {\n      stack <- c(stack, \")\")\n    } else if (b == \"\
    )\") {\n      if (length(stack) > 0) {\n        stack <- stack[-length(stack)]\n\
    \      } else {\n        return(FALSE)\n      }\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\nprint(correct_bracketing('('))\nprint(correct_bracketing('()'))\n\
    print(correct_bracketing('(()())'))\nprint(correct_bracketing(')(()'))\n", "\n\
    \  stack <- character(0)\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"(\")\n      stack <- c(stack, \"(\")\n    else {\n      if (length(stack)\
    \ == 0)\n        return(FALSE)\n      stack <- stack[-length(stack)]\n    }\n\
    \  }\n  if (length(stack) > 0)\n    return(FALSE)\n  return(TRUE)\n}\n\n", "\n\
    \  count_left <- 0\n  count_right <- 0\n  for (i in 1:nchar(brackets)) {\n   \
    \ if (substr(brackets, i, i) == \"(\") {\n      count_left <- count_left + 1\n\
    \    } else {\n      count_right <- count_right + 1\n    }\n    if (count_right\
    \ > count_left) {\n      return(FALSE)\n    }\n  }\n  return(count_left == count_right)\n\
    }\n", "\n    b_length <- nchar(brackets)\n    counter <- 0\n    if (b_length %%\
    \ 2 == 1) {\n        return(FALSE)\n    }\n    else {\n        for (i in 1:b_length)\
    \ {\n            if (substr(brackets, i, i) == \"(\") {\n                counter\
    \ <- counter + 1\n            }\n            else {\n                counter <-\
    \ counter - 1\n            }\n            if (counter < 0) {\n               \
    \ return(FALSE)\n            }\n        }\n        if (counter == 0) {\n     \
    \       return(TRUE)\n        }\n        else {\n            return(FALSE)\n \
    \       }\n    }\n}\n", "\n    if (brackets[1] == \")\") return(FALSE)\n    if\
    \ (brackets[length(brackets)] == \"(\") return(FALSE)\n    if (any(brackets %in%\
    \ c(\"[\", \"]\", \"{\", \"}\"))) return(FALSE)\n    return(all(brackets == \"\
    ()\"))\n}\n ", "\n  i=0\n  for (j in 1:nchar(brackets)) {\n    if (substr(brackets,j,j)==\"\
    (\") {\n      i=i+1\n    } else {\n      i=i-1\n    }\n    if (i<0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (i==0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}", "\n  opening <- 0\n  for (c in strsplit(brackets, '')[[1]]) {\n    if\
    \ (c == '(') {\n      opening <- opening + 1\n    } else if (c == ')') {\n   \
    \   opening <- opening - 1\n    }\n    if (opening < 0) return (FALSE)\n  }\n\
    \  return (opening == 0)\n}\n", "\n  stack <- vector(\"list\", 0)\n  i <- 1\n\
    \  while (i <= length(brackets)) {\n    if (brackets[i] == \"(\") {\n      stack\
    \ <- c(stack, \"(\");\n    } else if (brackets[i] == \")\") {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n    i <- i + 1\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # TODO: your code here\n  open_count\
    \ <- 0\n  close_count <- 0\n  for (x in brackets) {\n    if (x == \"(\") {\n \
    \     open_count <- open_count + 1\n    } else if (x == \")\") {\n      close_count\
    \ <- close_count + 1\n    }\n  }\n  open_count == close_count\n}\n", "\n  l <-\
    \ length(brackets)\n  count <- 0\n  for (i in 1:l) {\n    if (brackets[i] == '(')\
    \ {\n      count <- count + 1\n    } else if (brackets[i] == ')') {\n      count\
    \ <- count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n    }\n  }\n\
    \  return(count == 0)\n}\n", "\n    if (length(grep(\"[^()]\",brackets))>0) {\n\
    \        return (FALSE)\n    } else {\n        bracket_stack <- c()\n        for\
    \ (bracket in strsplit(brackets,\"\")[[1]]) {\n            if (bracket==\"(\"\
    ) {\n                bracket_stack <- c(bracket_stack,bracket)\n            }\
    \ else {\n                if (length(bracket_stack)==0) {\n                  \
    \  return (FALSE)\n                } else {\n                    bracket_stack\
    \ <- bracket_stack[-length(bracket_stack)]\n                }\n            }\n\
    \        }\n        if (length(bracket_stack)==0) {\n            return (TRUE)\n\
    \        } else {\n            return (FALSE)\n        }\n    }\n}\n", "\n   \
    \ # removing whitespace\n    brackets <- str_replace_all(brackets, \" \", \"\"\
    )\n    # initializing a counter\n    counter <- 0\n    # looping through each\
    \ character in brackets\n    for (char in strsplit(brackets, \"\")[[1]]) {\n \
    \       # incrementing counter if char is a \"(\"\n        # decrementing counter\
    \ if char is a \")\"\n        if (char == \"(\") {\n            counter <- counter\
    \ + 1\n        } else if (char == \")\") {\n            counter <- counter - 1\n\
    \        }\n        # returning FALSE if counter is negative\n        if (counter\
    \ < 0) {\n            return(FALSE)\n        }\n    }\n    # returning TRUE if\
    \ counter is 0\n    if (counter == 0) {\n        return(TRUE)\n    }\n    # returning\
    \ FALSE if counter is positive\n    return(FALSE)\n}\n", "\n    # YOUR CODE HERE\n\
    \    index = 0\n    for (i in 1:nchar(brackets)){\n        if (substr(brackets,\
    \ i, i) == \"(\"){\n            index = index + 1\n        } else if (substr(brackets,\
    \ i, i) == \")\"){\n            index = index - 1\n        }\n    }\n    if (index\
    \ == 0){\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\
    \ \ngrade(\"tests_correct_bracketing.R\")\n", "\n  # write code here\n  # stack\
    \ - list of opened brackets so far\n  stack <- NULL\n  # try to close each bracket\n\
    \  for (i in 1:nchar(brackets)) {\n    # if it's an opening bracket, push it to\
    \ the stack\n    if (substr(brackets, i, i) == \"(\") {\n      stack <- c(stack,\
    \ \"(\")\n    } else {\n      # pop an opening bracket from the stack (close the\
    \ bracket)\n      if (length(stack) == 0) {\n        # if stack is empty, it's\
    \ bad bracketing\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  # if there are no more opening brackets on the stack,\
    \ it's good bracketing\n  return(length(stack) == 0)\n}\n", "\n  lapply(c(0, cumsum(c(1,\
    \ -1)[brackets == \"(\" | brackets == \")\"])), function(x) {\n    x > 0\n  })\n\
    }\n\ncorrect_bracketing <- function(brackets) {\n  lapply(c(0, cumsum(c(1, -1)[brackets\
    \ == \"(\" | brackets == \")\"])), `>`)\n}\n\ncorrect_bracketing <- function(brackets)\
    \ {\n  lapply(c(0, cumsum(c(1, -1)[grepl(\"\\\\(|\\\\)\", brackets)])), `>`)\n\
    }\n", "\n  # test = TRUE\n  # for (i in 1:length(brackets)) {\n  #   if (brackets[i]\
    \ == '(' & brackets[i+1] != ')') {\n  #     test = FALSE\n  #   }\n  # }\n  #\
    \ test\n  # this works but there is a better way. \n  # \"Opening brackets do\
    \ not need closing brackets.\" - R documentation\n  # also, if there are opening\
    \ brackets without closing brackets,\n  # the length of the string should be odd.\
    \ \n  # so: \n  # length(brackets) %% 2 == 0\n  # length(brackets) %% 2 == 0 &&\
    \ brackets[length(brackets)] == '('\n  # those are the only ways this function\
    \ can return false\n  length(brackets) %% 2 == 0 && brackets[length(brackets)]\
    \ == '('\n}\n", "\n  stack <- character(0)\n  for (char in brackets) {\n    if\
    \ (char == \"(\") {\n      stack <- c(stack, char)\n    } else if (char == \"\
    )\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\n\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"(())\")\ncorrect_bracketing(\"\
    (()\")\n\ntest_that(\"test for correct_bracketing\", {\n  expect_false(correct_bracketing(\"\
    (\"))\n  expect_true(correct_bracketing(\"()\"))\n  expect_true(correct_bracketing(\"\
    (()())\"))\n  expect_false(correct_bracketing(\")(()\"))\n})\n", "\n  open_brackets\
    \ <- 0\n  for (b in brackets) {\n    if (b == \"(\") {\n      open_brackets <-\
    \ open_brackets + 1\n    } else if (b == \")\") {\n      open_brackets <- open_brackets\
    \ - 1\n    }\n    if (open_brackets < 0) {\n      return(FALSE)\n    }\n  }\n\
    \  if (open_brackets == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}", "\n  # YOUR CODE HERE\n}\n", "\n    if(substr(brackets, 1, 1) == ')')\
    \ {\n        return(FALSE)\n    }\n    counter <- 0\n    for(i in 1:nchar(brackets))\
    \ {\n        if(substr(brackets, i, i) == '(') {\n            counter <- counter\
    \ + 1\n        } else {\n            counter <- counter - 1\n        }\n     \
    \   if(counter < 0) {\n            return(FALSE)\n        }\n    }\n    if(counter\
    \ == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\n", "\n  counter = 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"(\") {\n      counter = counter + 1\n    } else {\n      counter\
    \ = counter - 1\n    }\n    if (counter < 0) {\n      return(FALSE)\n    }\n \
    \ }\n  if (counter == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n  count_open <- 0\n  count_close <- 0\n  for\
    \ (char in brackets) {\n    if (char == \"(\") {\n      count_open <- count_open\
    \ + 1\n    } else if (char == \")\") {\n      count_close <- count_close + 1\n\
    \    }\n    if (count_close > count_open) {\n      return(FALSE)\n    }\n  }\n\
    \  if (count_open == count_close) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n\tcount <- 0\n\tfor (b in brackets) {\n\t\tif (b == \"(\") {\n\t\
    \t\tcount <- count + 1\n\t\t} else if (b == \")\") {\n\t\t\tcount <- count - 1\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn(FALSE)\n\t\t}\n\t}\n\tif (count == 0)\
    \ {\n\t\treturn(TRUE)\n\t} else {\n\t\treturn(FALSE)\n\t}\n}\n", "\n  if (brackets\
    \ == \"\") {\n    return(TRUE)\n  }\n  else if (substr(brackets, 1, 1) == \"(\"\
    ) {\n    inner <- correct_bracketing(substr(brackets, 2, nchar(brackets)))\n \
    \   if (inner == FALSE) {\n      return(FALSE)\n    }\n    else {\n      if (substr(inner,\
    \ 1, 1) == \")\") {\n        return(substr(inner, 2, nchar(inner)))\n      }\n\
    \      else {\n        return(FALSE)\n      }\n    }\n  }\n  else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  left <- right <- 0\n  is_correct <- FALSE\n  for (i in seq_along(brackets))\
    \ {\n    if (brackets[i] == \"(\") {\n      left <- left + 1\n    } else if (brackets[i]\
    \ == \")\") {\n      right <- right + 1\n    }\n    if (right > left) {\n    \
    \  is_correct <- FALSE\n      break\n    } else {\n      is_correct <- TRUE\n\
    \    }\n  }\n  if (left == right) {\n    is_correct <- TRUE\n  } else {\n    is_correct\
    \ <- FALSE\n  }\n  return(is_correct)\n}", "\n  # * your code here *\n}\n", "\n\t\
    # Check the length of brackets is even\n\tif(nchar(brackets) %% 2 != 0) {\n\t\t\
    return(FALSE)\n\t}\n\t# Check brackets has \")\" only\n\tsubstring_index <- grep(\"\
    \\\\)\", brackets)\n\tif(nchar(substring_index) != 0) {\n\t\treturn(FALSE)\n\t\
    }\n\t# Check brackets has \"(\" only\n\tsubstring_index <- grep(\"\\\\(\", brackets)\n\
    \tif(nchar(substring_index) != 0) {\n\t\treturn(FALSE)\n\t}\n\t# if \"(\" count\
    \ equal \")\" count, return TRUE\n\tif(substring_count(brackets, \"(\") == substring_count(brackets,\
    \ \")\")) {\n\t\treturn(TRUE)\n\t}\n\t# if there is no \"(\" and \")\", return\
    \ TRUE\n\tif(substring_count(brackets, \"(\") == 0 && substring_count(brackets,\
    \ \")\") == 0) {\n\t\treturn(TRUE)\n\t}\n\t# else, return FALSE\n\treturn(FALSE)\n\
    }\n", "\n  (length(gregexpr(\"\\\\(\", brackets)[[1]]) ==\n    length(gregexpr(\"\
    \\\\)\", brackets)[[1]]))\n}\n", "\n    # TODO\n    return ()\n}\n", "\n    #\
    \ Your code here\n    res <- FALSE\n    s <- stack(length(brackets))\n    for\
    \ (b in brackets) {\n        if (b == '(') {\n            push(s, b)\n       \
    \ } else {\n            if (is_empty(s)) {\n                res <- FALSE\n   \
    \             break\n            } else {\n                pop(s)\n          \
    \  }\n        }\n    }\n    if (is_empty(s)) {\n        res <- TRUE\n    }\n \
    \   return(res)\n}\n", "\n  ## YOUR CODE HERE\n  ##\n  open <- grep('(', brackets)\n\
    \  close <- grep(')', brackets)\n  if (length(open) != length(close)) {\n    return(FALSE)\n\
    \  } else {\n    return(TRUE)\n  }\n}", "\n  count = 0\n  for (i in seq_along(brackets))\
    \ {\n    if (brackets[i] == \"(\") {\n      count = count + 1\n    } else if (brackets[i]\
    \ == \")\") {\n      count = count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncorrect_bracketing('(()())')\ncorrect_bracketing(')(()')\n", "\n    #\
    \ your code here\n}\n", "\n\t# if brackets are even, return TRUE\n\tif(length(brackets)\
    \ %% 2 == 0) {\n\t\treturn(TRUE)\n\t}\n\t# if brackets are odd, return FALSE\n\
    \tif(length(brackets) %% 2 == 1) {\n\t\treturn(FALSE)\n\t}\n}\n\nprint(correct_bracketing('()'))\n\
    print(correct_bracketing('(()())'))\nprint(correct_bracketing(')(()'))", "\n \
    \ if (length(brackets) %% 2 != 0) {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \")\") {\n    return(FALSE)\n  }\n  if (substr(brackets, length(brackets),\
    \ length(brackets)) == \"(\") {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"(\") {\n    return(correct_bracketing(substr(brackets, 2, length(brackets))))\n\
    \  }\n  if (substr(brackets, 1, 1) == \")\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets))))\n  }\n}\n", "\n  n <- nchar(brackets)\n  if (n == 0)\
    \ {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1) == \"(\") {\n    if\
    \ (substr(brackets, n, n) == \")\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, n - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n}", "\n    if (brackets == '') {\n        return(TRUE)\n\
    \    }\n    if (brackets[1] == '(') {\n        if (brackets[length(brackets)]\
    \ == ')') {\n            correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1))\n        } else {\n            return(FALSE)\n        }\n    } else {\n\
    \        return(FALSE)\n    }\n}\n\ncorrect_bracketing(')')\n\ncorrect_bracketing('()')\n\
    \ncorrect_bracketing('(()())')\n\ncorrect_bracketing(')(()')\n", "\n  l <- strsplit(brackets,\
    \ \"\")[[1]]\n  stacks <- list()\n  for (i in l) {\n    if (i == \"(\") {\n  \
    \    stacks <- c(stacks, \")\")\n    } else if (length(stacks) == 0 || i != stacks[[length(stacks)]])\
    \ {\n      return(FALSE)\n    } else {\n      stacks <- stacks[-length(stacks)]\n\
    \    }\n  }\n  return(length(stacks) == 0)\n}\n", "\n    brackets <- strsplit(brackets,\
    \ NULL)[[1]]\n    if (length(brackets) == 0) {\n        return(TRUE)\n    }\n\
    \    if (brackets[1] == ')') {\n        return(FALSE)\n    }\n    brackets <-\
    \ brackets[-1]\n    if (length(brackets) == 0) {\n        return(FALSE)\n    }\n\
    \    return(correct_bracketing(paste(brackets[-1], collapse = '')))\n}\n", "\n\
    \  # your code here!\n}\n", "\n  check <- vector()\n  for (bracket in brackets)\
    \ {\n    if (bracket == '(') {\n      check <- c(check, bracket)\n    } else if\
    \ (bracket == ')') {\n      if (length(check) == 0) {\n        return(FALSE)\n\
    \      } else {\n        check <- check[-length(check)]\n      }\n    }\n  }\n\
    \  if (length(check) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  open_par <- 0\n  close_par <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"(\") {\n      open_par <- open_par +\
    \ 1\n    } else {\n      close_par <- close_par + 1\n    }\n    if (close_par\
    \ > open_par) {\n      return(FALSE)\n    }\n  }\n  if (open_par == close_par)\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\n\n", "\n    sum\
    \ <- 0\n    for (bracket in brackets) {\n        if (bracket == '(') {\n     \
    \       sum <- sum + 1\n        } else if (bracket == ')') {\n            sum\
    \ <- sum - 1\n        }\n        if (sum < 0) {\n            return(FALSE)\n \
    \       }\n    }\n    return(sum == 0)\n}\n", "\n    count <- 0\n    for (x in\
    \ brackets) {\n        if (x == \"(\") {\n            count <- count + 1\n   \
    \     } else if (x == \")\") {\n            count <- count - 1\n        }\n  \
    \      if (count < 0) {\n            return(FALSE)\n        }\n    }\n    return(count\
    \ == 0)\n}\n\ncorrect_bracketing('(')\ncorrect_bracketing('()')\ncorrect_bracketing('(()())')\n\
    correct_bracketing(')(()')\n", "\n    open_brackets <- 0\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == \"(\") {\n            open_brackets\
    \ <- open_brackets + 1\n        } else {\n            open_brackets <- open_brackets\
    \ - 1\n        }\n        if (open_brackets < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    return(open_brackets == 0)\n}\ncorrect_bracketing(\"(\"\
    )\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\"\
    )(()\")\n", "\n  # YOUR CODE HERE\n  left <- 0\n  right <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"(\") {\n      left <- left + 1\n    }\
    \ else {\n      right <- right + 1\n    }\n  }\n  if (left == right) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # check every character in brackets.\n\
    \  l <- nchar(brackets)\n  open <- 0\n  close <- 0\n  for (i in 1:l) {\n    #\
    \ check if character is \"(\" or \")\".\n    x <- substr(brackets, i, i)\n   \
    \ if (x == \"(\") {\n      open <- open + 1\n    } else if (x == \")\") {\n  \
    \    close <- close + 1\n    }\n  }\n  # if the number of open and close brackets\
    \ is the same, return TRUE.\n  if (open == close) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
