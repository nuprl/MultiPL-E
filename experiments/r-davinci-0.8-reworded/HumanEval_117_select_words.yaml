name: HumanEval_117_select_words
language: r
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
  \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little lamb',\
  \ 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n# c()\n\
  # >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle sam',\
  \ 3)\n# c('Uncle')\nselect_words <- function(s, n) {"
tests: "test_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
  \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
  \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
  \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
  \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
  \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
  \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n    if (nchar(s) == 0) return(NULL)\n    idx <- which(nchar(strsplit(s,\
    \ split = \" \")[[1]]) == n)\n    strsplit(s, split = \" \")[[1]][idx]\n}", "\n\
    \  \n}\nselect_words('Mary had a little lamb', 4)\n\nselect_words('Mary had a\
    \ little lamb', 3)\n\nselect_words('simple white space', 2)\n\nselect_words('Hello\
    \ world', 4)\n\nselect_words('Uncle sam', 3)\n", "\n    words <- strsplit(s, \"\
    \ \")[[1]]\n    letters <- sapply(words, strsplit, '')\n    consonants <- letters[is.na(match(letters,\
    \ c('a', 'e', 'i', 'o', 'u')))]\n    n_consonants <- sapply(consonants, length)\n\
    \    words[n_consonants == n]\n}\n\nselect_words(\"Mary had a little lamb\", 4)\n",
  "\n    if(!s) {\n        return(list())\n    }\n    strsplit(s, \" \")[[1]][lengths(regmatches(s,\
    \ gregexpr(\"[aeiou]\", s))) == n]\n}\n", "\n    # Write your code here\n}\n ",
  "\n\ts <- unlist(strsplit(s, ' '))\n\tresult <- s[vowel_count(s) == n]\n\tnames(result)\
    \ <- NULL\n\treturn(result)\n}\n\nvowel_count <- function(s) {\n\tlength(s) -\
    \ nchar(gsub('[aeiou]', '', s))\n}\n", "\n    s <- strsplit(s, \"\\\\s+\")[[1]]\n\
    \    v <- stringi::stri_extract_all_regex(s, \"^(?![aeiou])(?![aeiou])[a-z]+(?=[aeiou])|^(?![aeiou])[a-z]+(?=[aeiou])[a-z]+(?=[aeiou])[a-z]+(?=[aeiou])\"\
    )\n    v <- unlist(v)\n    v <- sapply(v, function(x) stringi::stri_count_regex(x,\
    \ \"^(?![aeiou])\"))\n    names(v) <- s\n    v <- names(v[v == n])\n    v\n}\n",
  "\n    words <- unlist(strsplit(s, split = \" \"))\n    words <- words[nchar(words)\
    \ != 0]\n    words <- words[nchar(words) >= n]\n    words <- words[nchar(gsub(\"\
    [aeiouAEIOU]\", \"\", words)) == n]\n    return(words)\n}\n", "\n    s <- strsplit(s,\
    \ \" \")[[1]]\n    v <- vector(\"character\", length = length(s))\n    for (i\
    \ in seq_along(s)) {\n        if (consonants(s[i]) == n) {\n            v[i] <-\
    \ s[i]\n        }\n    }\n    return(v[v != \"\"])\n}\n", "\n    # 's' is the\
    \ string\n    # 'n' is the number of consonants to search\n    if (identical(s,\
    \ '')) {\n        # return an empty list\n        return(list())\n    } else {\n\
    \        # convert all characters to lowercase, then split the string into a list\n\
    \        # of words based on space\n        words <- unlist(strsplit(tolower(s),\
    \ ' '))\n        output <- c()\n        for (word in words) {\n            # for\
    \ each word, count the number of consonants using 'grep'\n            cons <-\
    \ length(grep('[^aeiou]', word))\n            if (cons == n) {\n             \
    \   # if the number of consonants is equal to 'n', then append the word\n    \
    \            # to the output list\n                output <- c(output, word)\n\
    \            }\n        }\n        return(output)\n    }\n}\ns <- 'Mary had a\
    \ little lamb'\nn <- 4\nselect_words(s, n)\n\ns <- 'Mary had a little lamb'\n\
    n <- 3\nselect_words(s, n)\n\ns <- 'simple white space'\nn <- 2\nselect_words(s,\
    \ n)\n\ns <- 'Hello world'\nn <- 4\nselect_words(s, n)\n\ns <- 'Uncle sam'\nn\
    \ <- 3\nselect_words(s, n)\n", "\n  if (s == \"\"){\n    return(c())\n  }\n  data\
    \ = unlist(strsplit(s, split = ' '))\n  l = length(data)\n  result = c()\n  for\
    \ (i in 1:l){\n    num = 0\n    for (j in 1:nchar(data[i])){\n      if (data[i][j]\
    \ %in% c('a', 'e', 'i', 'o', 'u')){\n        num = num + 1\n      }\n    }\n \
    \   if (num == n){\n      result = c(result, data[i])\n    }\n  }\n  return(result)\n\
    }\n", "\n    library(stringr)\n    library(purrr)\n    library(dplyr)\n    # Remove\
    \ punctuation\n    s_stripped <- str_replace_all(s, \"[[:punct:]]\", \"\")\n \
    \   # Split words into list\n    s_list <- str_split(s_stripped, \" \")\n    #\
    \ Count number of consonants in each word\n    s_consonants <- map_int(s_list,\
    \ ~ sum(stri_count_fixed(., \"aeiou\") == 0))\n    # Filter by number of consonants\n\
    \    s_filtered <- filter(s_list, s_consonants == n)\n    # Return as a vector\n\
    \    as.vector(s_filtered)\n}\n", "\n  word <- strsplit(s, ' ')[[1]]\n  filter(word,\
    \ nchar(gsub('[^aeiouAEIOU]', '', .)) == n)\n}\n", "\n  c()\n}\n\nselect_words('Mary\
    \ had a little lamb', 4)", "\n  if(identical(s, '')) return(character(0))\n  words\
    \ <- unlist(strsplit(s, ' '))\n  words[sapply(words, function(w) length(grep('[^aeiou]',\
    \ w, value = TRUE)) == n)]\n}\n", "\n  # Enter your code here\n  str <- strsplit(s,\
    \ \" \")[[1]]\n  res <- vector()\n  for (strs in str) {\n    if (nchar(strs) -\
    \ nchar(gsub(\"[aeiouAEIOU]\", \"\", strs)) == n) {\n      res <- c(res, strs)\n\
    \    }\n  }\n  return(res)\n}\n", "\n  if (length(s) == 0) {\n    return(list())\n\
    \  }\n  words <- strsplit(s, \" \")[[1]]\n  #print(words)\n  return(words[nchar(gsub(\"\
    [aieou]\", \"\", words)) == n])\n}\nselect_words('Mary had a little lamb', 4)\n\
    select_words('Mary had a little lamb', 3)\nselect_words('simple white space',\
    \ 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam', 3)\n", "\n  words\
    \ <- strsplit(s, \" \")[[1]]\n  consonants <- function(w) sum(grepl(\"[bcdfghjklmnpqrstvwxz]\"\
    , w))\n  consonant_words <- words[sapply(words, consonants) == n]\n  return(consonant_words)\n\
    }\nstr <- 'simple white space'\nselect_words(str, 2)", "\n  words <- unlist(strsplit(s,\
    \ ' '))\n  words <- words[words != '']\n  len <- sapply(words, nchar)\n  words\
    \ <- words[len == n]\n  return(words)\n}\n", "\n  s <- strsplit(s, \" \")[[1]]\n\
    \  lapply(s, function(x) {\n    if (nchar(gsub(\"[^aeiou]\", \"\", x)) == n) x\n\
    \  })\n}", "\n  r <- strsplit(s, \" \")[[1]]\n  f <- function(w) {\n    unlist(strsplit(gsub(\"\
    [AEIOUaeiou]\", \"\", w), \"\"))\n  }\n  return(r[nchar(f(r)) == n])\n}\nx <-\
    \ \"Mary had a little lamb\"\nselect_words(x, 4)\n\nx <- \"Mary had a little lamb\"\
    \nselect_words(x, 3)\n\nx <- \"simple white space\"\nselect_words(x, 2)\n\nx <-\
    \ \"Hello world\"\nselect_words(x, 4)\n\nx <- \"Uncle sam\"\nselect_words(x, 3)\n",
  "\n  # ... write your code here ...\n  return(NULL)\n}\n", "\n  ws <- unlist(strsplit(s,\
    \ \" \"))\n  w <- lapply(ws, function(w) sum(nchar(gsub('[aeiouAEIOU]', '', w)))\
    \ == n)\n  ws[w]\n}\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary\
    \ had a little lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello\
    \ world', 4)\nselect_words('Uncle sam', 3)\n", "\n    # your code here\n    return(vector(\"\
    character\", 0))\n}\n ", "\n  # input: character vector s and natural number n\n\
    \  # output: character vector of words containing exactly n consonants\n  # your\
    \ code here\n}\n\n", "\n    v <- strsplit(s, \" \")[[1]]\n    v[sapply(v, function(x)\
    \ num_consonants(x) == n)]\n}\n \nselect_words <- function(s, n) {\n    sapply(strsplit(s,\
    \ \" \")[[1]], function(x) if (num_consonants(x) == n) x)\n}\n \nnum_consonants\
    \ <- function(s) sum(grepl(\"[bcdfghjklmnpqrstvwxyz]\", tolower(s)))\nselect_words\
    \ <- function(s, n) {\n    v <- strsplit(s, \" \")[[1]]\n    if (length(v) ==\
    \ 0) return(NULL)\n    ind <- which(sapply(v, function(x) num_consonants(x) ==\
    \ n))\n    if (length(ind) == 0) return(NULL)\n    v[ind]\n}\n \nnum_consonants\
    \ <- function(s) sum(grepl(\"[bcdfghjklmnpqrstvwxyz]\", tolower(s)))\nselect_words\
    \ <- function(s, n) {\n    if (!nzchar(s)) return(NULL)\n    v <- strsplit(s,\
    \ \" \")[[1]]\n    ind <- which(sapply(v, function(x) num_consonants(x) == n))\n\
    \    if (length(ind) == 0) return(NULL)\n    v[ind]\n}\n \nnum_consonants <- function(s)\
    \ sum(grepl(\"[bcdfghjklmnpqrstvwxyz]\", tolower(s)))\nselect_words <- function(s,\
    \ n) {\n    if (!nzchar(s)) return(NULL)\n    v <- strsplit(s, \" \")[[1]]\n \
    \   ind <- which(sapply(v, function(x) num_consonants(x) == n))\n    if (length(ind)\
    \ == 0) return(NULL)\n    v[ind]\n}\n \nnum_consonants <- function(s) sum(grepl(\"\
    [bcdfghjklmnpqr", "\n    words <- unlist(strsplit(s, \" \"))\n    vowel_letters\
    \ <- list(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n    consonant_words <- list()\n\
    \    for (word in words) {\n        consonant_count <- 0\n        for (letter\
    \ in word) {\n            if (!letter %in% vowel_letters) {\n                consonant_count\
    \ <- consonant_count + 1\n            }\n        }\n        if (consonant_count\
    \ == n) {\n            consonant_words <- c(consonant_words, word)\n        }\n\
    \    }\n    return(consonant_words)\n}", "\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words[lengths(lapply(words, function(x) {\n    gsub('[^aeiou]', '', x, fixed\
    \ = TRUE)\n  })) == n]\n}", "\n  ss <- strsplit(s, split = ' ')[[1]]\n  l <- as.list(ss)\n\
    \  l <- lapply(l, function(x) {\n    lapply(strsplit(x, split = '')[[1]], function(y)\
    \ {\n      ifelse(!(y %in% c('a', 'e', 'i', 'o', 'u')), 1, 0)\n    })\n  })\n\
    \  l <- unlist(l)\n  l <- lapply(l, sum)\n  l <- which(l == n)\n  print(ss[l])\n\
    }", "\n    s <- gsub(\"\\\\s+\", \" \", s)\n    words <- unlist(strsplit(s, \"\
    \ \"))\n    words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words)) == n]\n}\n\nprint(select_words('Mary\
    \ had a little lamb', 4))\nprint(select_words('Mary had a little lamb', 3))\n\
    print(select_words('simple white space', 2))\nprint(select_words('Hello world',\
    \ 4))\nprint(select_words('Uncle sam', 3))\n", "\n  words <- unlist(strsplit(s,\
    \ ' '))\n  filter(words, ~ nchar(gsub('[aeiouAEIOU]', '', .)) == n)\n}\n", "\n\t\
    words <- strsplit(s, \" \")[[1]]\n\tresult <- list()\n\tfor (word in words) {\n\
    \t\tcount <- 0\n\t\tfor (char in strsplit(word, \"\")[[1]]) {\n\t\t\tif (!(char\
    \ %in% c(\"a\", \"e\", \"i\", \"o\", \"u\"))) {\n\t\t\t\tcount <- count + 1\n\t\
    \t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tresult <- c(result, word)\n\t\t}\n\t\
    }\n\treturn(result)\n}\n", "\n    words <- unlist(strsplit(s, ' '))\n    count_consonants\
    \ <- function(word) {\n        return(length(grep('[b-df-hj-np-tv-z]', word, ignore.case\
    \ = TRUE)))\n    }\n    return(words[sapply(words, count_consonants) == n])\n\
    }\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary had a little\
    \ lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello world',\
    \ 4)\nselect_words('Uncle sam', 3)\n", "\n  # Function returns a list of words\
    \ from string s that contain\n  # exactly n consonants.\n  # If string s is empty,\
    \ return an empty list.\n  # Note: you may assume the input string contains only\
    \ letters and spaces.\n  words <- unlist(strsplit(s, \" \"))\n  selected_words\
    \ <- c()\n  for (word in words) {\n    count <- 0\n    for (letter in unlist(strsplit(word,\
    \ \"\"))) {\n      if (!is.element(letter, c(\"a\", \"e\", \"i\", \"o\", \"u\"\
    ))) {\n        count <- count + 1\n      }\n    }\n    if (count == n) {\n   \
    \   selected_words <- c(selected_words, word)\n    }\n  }\n  return(selected_words)\n\
    }", "\n  s <- gsub(\" \", \"\", s)\n  n_cons <- sum(unlist(strsplit(s, \"\"))\
    \ %in% c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"))\n  if\
    \ (n_cons == n)\n    return(s)\n  else\n    return(NULL)\n}", "\n    if (nchar(s)==0)\
    \ return(character())\n    if (nchar(s)==1) return(character())\n    if (nchar(s)==2)\
    \ return(character())\n    if (nchar(s)==3) return(character())\n    if (nchar(s)==4)\
    \ return(character())\n    if (nchar(s)==5) return(character())\n    if (nchar(s)==6)\
    \ return(character())\n    s=strsplit(s, '\\\\s+')[[1]]\n    m=0\n    for (i in\
    \ 1:length(s)) {\n        for (j in 1:nchar(s[i])) {\n            if (grepl('[aeiou]',\
    \ substr(s[i], j, j)) || substr(s[i], j, j)==' ') {\n                m=m+1\n \
    \           }\n        }\n        if (m==n) print(s[i])\n        m=0\n    }\n}",
  "\n  if(is.character(s) & is.numeric(n)) {\n    s <- unlist(strsplit(s, ' '))\n\
    \    s <- s[nchar(s) == n]\n    return(s)\n  } else {\n    stop('Invalid input')\n\
    \  }\n}\n", "\n  library(stringr)\n  library(tidyverse)\n  library(stringi)\n\
    \  # your code here\n  words <- str_split(s, \" \") %>% unlist()\n  consonants\
    \ <- c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z')\n  select_words <- vector()\n  for (i in 1:length(words))\
    \ {\n    word <- words[i]\n    count <- 0\n    for (j in 1:length(word)) {\n \
    \     if (stri_detect_fixed(word[j], consonants)) {\n        count <- count +\
    \ 1\n      }\n    }\n    if (count == n) {\n      select_words <- c(select_words,\
    \ word)\n    }\n  }\n  return(select_words)\n}\n ", "\n  w <- unlist(strsplit(s,\
    \ \" \"))\n  l <- list()\n  for (i in 1:length(w)) {\n    if (length(grep(\"[bcdfghjklmnpqrstvwxyz]\"\
    , tolower(w[i]), value = FALSE)) == n) {\n      l <- c(l, w[i])\n    }\n  }\n\
    \  return(l)\n}", "\n  s <- unlist(strsplit(s, \" \"))\n  s <- s[nchar(s) != 0]\n\
    \  result <- s[nchar(gsub(\"[aeiouAEIOU]\", \"\", s)) == n]\n  return(result)\n\
    }\n\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary had a little\
    \ lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello world',\
    \ 4)\nselect_words('Uncle sam', 3)\n", "\n    is_consonant <- function(x) !(x\
    \ %in% c('a', 'e', 'i', 'o', 'u'))\n    split <- strsplit(s, \" \")[[1]]\n   \
    \ word_count <- sapply(split, function(x) sum(sapply(strsplit(x, \"\")[[1]], is_consonant)))\n\
    \    return(split[word_count == n])\n}\n", "\n  s <- unlist(strsplit(s, split=\"\
    \ \", fixed=TRUE))\n  s <- s[s != \"\"]\n  s <- s[consonants(s) == n]\n  return(s)\n\
    }", "\n  s <- gsub(\"[aeiouAEIOU]\", \"\", s)\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words <- words[nchar(words) == n]\n  words\n}\nselect_words('Mary had a little\
    \ lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple white\
    \ space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam', 3)\n",
  "\n  v <- unlist(strsplit(s, \" \"))\n  words_n <- c()\n  for (word in v) {\n  \
    \  if (sum(grepl(\"[bcdfghjklmnpqrstvwxyz]\", word)) == n) {\n      words_n <-\
    \ c(words_n, word)\n    }\n  }\n  return(words_n)\n}\n\nn_consonants <- function(s)\
    \ {\n  return(sum(grepl(\"[bcdfghjklmnpqrstvwxyz]\", s)))\n}\n\nselect_words <-\
    \ function(s, n) {\n  v <- unlist(strsplit(s, \" \"))\n  return(v[n_consonants(v)\
    \ == n])\n}\n\nv <- c(\"bcdfghjklmnpqrstvwxyz\", \"bcdfghjklmnpqrstvwxyz\", \"\
    bcdfghjklmnpqrstvwxyz\")\nstrsplit(\"Mary had a little lamb\", \" \")\nunlist(strsplit(\"\
    Mary had a little lamb\", \" \"))\nn_consonants(\"Mary had a little lamb\")\n\
    sum(grepl(\"[bcdfghjklmnpqrstvwxyz]\", \"Mary had a little lamb\"))\nv[n_consonants(v)\
    \ == 4]\n\n\"Mary had a little lamb\" %>% strsplit(\" \") %>% unlist() %>% n_consonants()\
    \ %>% sum()\n\nsum(grepl(\"[bcdfghjklmnpqrstvwxyz]\", \"Mary had a little lamb\"\
    ))\n\nselect_words(\"Mary had a little lamb\", 4)\nselect_words(\"Mary had a little\
    \ lamb\", 3)\nselect_words(\"simple white space\", 2)\nselect_words(\"Hello world\"\
    , 4)\nselect_words(\"Uncle sam\", 3)\n\n", "\n  words <- gsub('[^a-z ]', '', tolower(s))\n\
    \  words <- unlist(strsplit(words, ' '))\n  words <- words[nchar(words) > 0]\n\
    \  consonants <- grepl('[^aeiou ]', words)\n  if (length(consonants) == 0) return(NULL)\n\
    \  consonants <- apply(consonants, 1, sum)\n  words[consonants == n]\n}\n", "\n\
    \  \n  words <- unlist(strsplit(s, \" \"))\n  words <- words[words != \"\"]\n\
    \  output <- vector()\n  \n  for (word in words) {\n    word <- unlist(strsplit(word,\
    \ \"\"))\n    word <- word[!word %in% c(\"a\", \"e\", \"i\", \"o\", \"u\")]\n\
    \    if (length(word) == n) {\n      output <- c(output, word)\n    }\n  }\n \
    \ \n  if (length(output) == 0) {\n    return(NULL)\n  } else {\n    return(output)\n\
    \  }\n  \n}\n", "\n  words <- unlist(strsplit(s, ' '))\n  consonants <- function(x)\
    \ {\n    length(grep('[bcdfghjklmnpqrstvwxyz]', x, value = TRUE))\n  }\n  return(words[consonants(words)\
    \ == n])\n}", "\n\twords <- strsplit(s, \" \")[[1]]\n\tresult <- vector()\n\t\
    for (word in words) {\n\t\tif (consonants(word) == n) {\n\t\t\tresult <- c(result,\
    \ word)\n\t\t}\n\t}\n\treturn(result)\n}", "\n  l <- strsplit(s, ' ')[[1]]\n \
    \ return(l[nchar(gsub('[aeiou]', '', l)) == n])\n}\n", "\n    lapply(strsplit(s,\
    \ \" \")[[1]], function(x) sum(x %in% c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z')))\n}", "\n  words\
    \ <- unlist(strsplit(s, \" \"))\n  select_words <- c()\n  for (word in words)\
    \ {\n    regex <- regexpr(\"[^aeiou]\", word, ignore.case = TRUE)\n    n_consonants\
    \ <- length(regex)\n    if (n_consonants == n) {\n      select_words <- c(select_words,\
    \ word)\n    }\n  }\n  return(select_words)\n}\n ", "\n  return(strsplit(s, split\
    \ = \"\\\\s+\")[[1]][unlist(lapply(strsplit(s, split = \"\\\\s+\")[[1]], \n  \
    \                                                          function(x) length(grep(x,\
    \ pattern = \"[b-df-hj-np-tv-z]\", ignore.case = TRUE)))) == n])\n}\n", "\n  #\
    \  find all words in the string s\n  words <- strsplit(s, \"\\\\s+\")[[1]]\n \
    \ # filter words that contain exactly n consonants\n  consonants <- grepl(\"^[bcdfghjklmnpqrstvwxyz]+$\"\
    , words, ignore.case = TRUE)\n  # TODO: finish the function\n  words[consonants\
    \ & nchar(words) == n]\n}\n", "\n  # your code goes here\n}\n", "\n    strsplit(s,\
    \ \" \")[[1]][nchar(gsub(\"[^aeiouAEIOU]\", \"\", strsplit(s, \" \")[[1]])) ==\
    \ n]\n}\n", "\n  if (nchar(s) == 0) {\n    return(character())\n  } else {\n \
    \   words <- unlist(strsplit(s, \" \"))\n    words_n <- sapply(words, function(x)\
    \ {\n      consonants <- 0\n      for (i in letters) {\n        if (is.na(str_count(x,\
    \ i)) == FALSE) {\n          consonants <- consonants + str_count(x, i)\n    \
    \    }\n      }\n      return(consonants)\n    })\n    return(words[words_n ==\
    \ n])\n  }\n}", "\n  words <- strsplit(s, ' ')[[1]]\n  words[count_consonants(words)\
    \ == n]\n}\ncount_consonants <- function(words) {\n  words <- toupper(words)\n\
    \  lapply(words, function(word) {sum(grepl('[^AEIOU]', word))})\n}", "\n    words\
    \ <- strsplit(s, ' ')[[1]]\n    consonants <- c('b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n\
    \    filtered <- words[lapply(words, function(x) {\n        vowels <- lapply(letters,\
    \ function(y) {\n            sum(x %in% y)\n        })\n        sum(vowels)\n\
    \    }) == n]\n    print(filtered)\n}\n\nselect_words('Mary had a little lamb',\
    \ 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple white space',\
    \ 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam', 3)\n", "\n  #\
    \ your code here\n}\n", "\n  words <- strsplit(s, \" \")[[1]]\n  lapply(words,\
    \ function(x) {\n    num_of_cons <- gsub(\"[aeiouAEIOU]\", \"\", x)\n    if (nchar(num_of_cons)\
    \ == n) x\n  })\n}\n", "\n  s_split <- strsplit(s, ' ')[[1]]\n  length_s_split\
    \ <- length(s_split)\n  v <- c()\n  for (i in 1:length_s_split) {\n    if (letter_counter(s_split[i])\
    \ == n) {\n      v <- c(v, s_split[i])\n    }\n  }\n  return(v)\n}\n", "\n  pat\
    \ <- '((?<=[a-zA-Z])[aeiouy])|((?<=[a-zA-Z])\\\\s)'\n  gsub(pat, '', s) %>% \n\
    \    strsplit(' ') %>% \n    unlist() %>% \n    unname() %>% \n    length() %>%\
    \ \n    `==`(n) %>% \n    which() %>% \n    `[[`(strsplit(s, ' '))\n}", "\n  s\
    \ <- strsplit(s, \" \")[[1]]\n  if (length(s) == 0) {\n    list()\n  } else {\n\
    \    consonants <- strsplit(s, \"\")[[1]]\n    lapply(seq_along(s), function(i)\
    \ {\n      consonants[i] <- length(grep(\"[aeiou]\", consonants[i], invert = TRUE))\n\
    \    })\n    consonants <- consonants %in% n\n    s[consonants]\n  }\n}", "\n\
    \  # put your solution here\n  words <- strsplit(s, \" \")[[1]]\n  words <- words[nchar(words)\
    \ >= n]\n  words <- words[as.numeric(gregexpr(\"[^aeiou]\", tolower(words))[[1]])\
    \ == n]\n  return(words)\n}", "\n  words <- unlist(strsplit(s, split = \" \"))\n\
    \  filtered <- words[nchar(gsub(\"[aieou]\", \"\", words)) == n]\n  return(filtered)\n\
    }\n", "\n    if (nchar(s) == 0) {\n        character()\n    } else {\n       \
    \ words <- strsplit(s, \" \")[[1]]\n        result <- c()\n        for (i in 1:length(words))\
    \ {\n            if (nconsonants(words[i]) == n) {\n                result <-\
    \ c(result, words[i])\n            }\n        }\n        result\n    }\n}\n \n\
    test_that(\"select_words() works\", {\n    expect_equal(select_words('Mary had\
    \ a little lamb', 4), c('little'))\n    expect_equal(select_words('Mary had a\
    \ little lamb', 3), c('Mary', 'lamb'))\n    expect_equal(select_words('simple\
    \ white space', 2), c())\n    expect_equal(select_words('Hello world', 4), c('world'))\n\
    \    expect_equal(select_words('Uncle sam', 3), c('Uncle'))\n})\n", "\n  # Your\
    \ code here\n\n  \n}\n ", "\n  s <- unlist(strsplit(s, ' '))\n  consonants <-\
    \ c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z')\n  has_exactly_n_consonants <- function(word,\
    \ n) {\n    word <- tolower(word)\n    consonants_count <- sum(word %in% consonants)\n\
    \    consonants_count == n\n  }\n  words_with_exactly_n_consonants <- Filter(function(word)\
    \ has_exactly_n_consonants(word, n), s)\n  names(words_with_exactly_n_consonants)\
    \ <- NULL\n  words_with_exactly_n_consonants\n}\n", "\n    s <- unlist(strsplit(s,\
    \ \" \"))\n    s <- tolower(s)\n    consonants <- c('b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', \n                    'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z')\n    for (i in seq_along(s)) {\n        s[i] <- gsub(\"\
    [aeiou]\", \"\", s[i])\n        s[i] <- nchar(s[i])\n    }\n    s <- s[s == n]\n\
    \    s <- paste(names(s), collapse = \" \")\n    return(unlist(strsplit(s, \"\
    \ \")))\n}\n", "\n  s <- strsplit(s, ' ')[[1]]\n  s <- s[nchar(s) == n]\n  vapply(s,\
    \ function(x) {\n    n <- as.character(x)\n    n <- n[grepl('[^aAeEiIoOuU]', n)]\n\
    \    length(n) == n\n  }, logical(1))\n  s[which(vapply(s, function(x) {\n   \
    \ n <- as.character(x)\n    n <- n[grepl('[^aAeEiIoOuU]', n)]\n    length(n) ==\
    \ n\n  }, logical(1)))]\n}\n", "\n  if(length(s)==0) {\n    return(c())\n  }\n\
    \  words <- strsplit(s, \" \")[[1]]\n  words <- words[vowels(words)==n]\n  return(words)\n\
    }\nselect_words('Mary had a little lamb', 4)\n", "\n  s <- gsub(\"[^[:alpha:]]\"\
    ,\" \",s)\n  x <- strsplit(s, \" \")[[1]]\n  x <- x[x!=\"\"]\n  y <- sapply(x,\
    \ FUN=function(s) sum(grepl(pattern=\"[a-z&&[^aeiou]]\", s,\n                \
    \                         ignore.case=TRUE)))\n  y <- x[y==n]\n  return(y)\n}",
  "\n    if (nchar(s) == 0)\n        return(character(0))\n    \n    input <- gsub(\"\
    \ \", \",\", s)\n    words <- strsplit(input, \",\")[[1]]\n    wordsWithNConsonants\
    \ <- c()\n    \n    for (i in seq_along(words)) {\n        consonants <- sapply(strsplit(words[i],\
    \ \"\"), \n                             function(x) sum(!str_detect(x, \"[aeiou]\"\
    )))\n        if (consonants == n) {\n            wordsWithNConsonants <- c(wordsWithNConsonants,\
    \ words[i])\n        }\n    }\n    \n    return(wordsWithNConsonants)\n}\nselect_words('Mary\
    \ had a little lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple\
    \ white space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam',\
    \ 3)\n", "\n  if (nchar(s) == 0) {\n    return (character())\n  }\n  words <-\
    \ strsplit(s, \" \")[[1]]\n  consonants <- gsub(\"[^aeiouAEIOU]\", \"\", words)\n\
    \  n_consonants <- nchar(consonants)\n  words[n_consonants == n]\n}\n", "\n  \
    \  v = unlist(strsplit(s, \" \"))\n    v[str_count(v, \"[^aeiou]\") == n]\n}\n",
  "\n  s <- strsplit(s, split=\" \")[[1]]\n  s <- s[grep(s, pattern = \"^[^aeiou]+$\"\
    , ignore.case = TRUE)]\n  s <- s[nchar(s) == n]\n  return(s)\n}\n", "\n  # extract\
    \ words from s\n  words <- strsplit(s, \"\\\\s+\")[[1]]\n  # initialize list with\
    \ words that contain exactly n consonants\n  selected_words <- list()\n  # iterate\
    \ over words\n  for (word in words) {\n    # initialize number of consonants to\
    \ 0\n    cons <- 0\n    # iterate over word's characters\n    for (letter in word)\
    \ {\n      # if current character is a consonant, then increase the number of\
    \ \n      # consonants by 1\n      if (consonant(letter)) {\n        cons <- cons\
    \ + 1\n      }\n    }\n    # if word contains exactly n consonants, then add it\
    \ to list of selected \n    # words\n    if (cons == n) {\n      selected_words\
    \ <- c(selected_words, word)\n    }\n  }\n  # return list of selected words\n\
    \  return(selected_words)\n}\n", "\n  words <- unlist(strsplit(s, \" \"))\n  consonants\
    \ <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \n\
    \                  \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n  lengths <- sapply(words, function(word) {\n    length(unlist(strsplit(word,\
    \ \"\")))\n  })\n  cond <- sapply(words, function(word) {\n    str_detect(word,\
    \ paste(consonants, collapse = \"|\"))\n  })\n  lapply(which(cond & lengths ==\
    \ n), function(i) {\n    words[i]\n  })\n}\n ", "\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  filtered <- words[stringr::str_count(words, \"[bcdfghjklmnpqrstvwxyz]\"\
    ) == n]\n  return(filtered)\n}", "\n    result <- c()\n    words <- unlist(strsplit(s,\
    \ \" \"))\n    for (word in words) {\n        nn <- nconsonants(word)\n      \
    \  if (nn == n) {\n            result <- c(result, word)\n        }\n    }\n \
    \   return(result)\n}\n", "\n    if (length(s) == 0) return(c())\n    # Split\
    \ by space\n    words <- unlist(strsplit(s, \" \"))\n    # Build consonant lookup\
    \ table\n    consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n    consonant_count <- character(length(words))\n    for\
    \ (word in words) {\n        consonant_count[word] <- sum(consonants %in% strsplit(word,\
    \ \"\")[[1]])\n    }\n    return(words[which(consonant_count == n)])\n}\nselect_words(\"\
    Mary had a little lamb\", 4)\n", "\n  words <- unlist(strsplit(s, \" \"))\n  consonants\
    \ <- list(\"B\" = TRUE, \"C\" = TRUE, \"D\" = TRUE, \"F\" = TRUE, \"G\" = TRUE,\n\
    \                     \"H\" = TRUE, \"J\" = TRUE, \"K\" = TRUE, \"L\" = TRUE,\
    \ \"M\" = TRUE,\n                     \"N\" = TRUE, \"P\" = TRUE, \"Q\" = TRUE,\
    \ \"R\" = TRUE, \"S\" = TRUE,\n                     \"T\" = TRUE, \"V\" = TRUE,\
    \ \"W\" = TRUE, \"X\" = TRUE, \"Y\" = TRUE,\n                     \"Z\" = TRUE)\n\
    \  n <- unlist(strsplit(s, \" \"))\n  consonants <- list(\"B\" = TRUE, \"C\" =\
    \ TRUE, \"D\" = TRUE, \"F\" = TRUE, \"G\" = TRUE,\n                     \"H\"\
    \ = TRUE, \"J\" = TRUE, \"K\" = TRUE, \"L\" = TRUE, \"M\" = TRUE,\n          \
    \           \"N\" = TRUE, \"P\" = TRUE, \"Q\" = TRUE, \"R\" = TRUE, \"S\" = TRUE,\n\
    \                     \"T\" = TRUE, \"V\" = TRUE, \"W\" = TRUE, \"X\" = TRUE,\
    \ \"Y\" = TRUE,\n                     \"Z\" = TRUE)\n  words_with_n_consonants\
    \ <- c()\n  for (word in words) {\n    word_count <- 0\n    for (i in 1:nchar(word))\
    \ {\n      if (consonants[substr(word, i, i)]) {\n        word_count <- word_count\
    \ + 1\n      }\n    }\n    if (word_count == n) {\n      words_with_n_consonants\
    \ <- c(words_with_n_consonants, word)\n    }\n  }\n  return(words_with_n_consonants)\n\
    }\n\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s, \" \"))\n\
    \  words_with_n_consonants <- lapply(words, function(x) {\n    if (sum(nchar(gsub(\"",
  "\n  regex <- paste0(\"([^a,e,i,o,u,y,A,E,I,O,U,Y]{\", n, \"})\")\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  res <- lapply(words, function(w) ifelse(grepl(regex, w), w, NULL))\n\
    \  res <- res[!sapply(res, is.null)]\n  res\n}\nselect_words(\"Mary had a little\
    \ lamb\", 4)\nselect_words(\"Mary had a little lamb\", 3)\nselect_words(\"simple\
    \ white space\", 2)\nselect_words(\"Hello world\", 4)\nselect_words(\"Uncle sam\"\
    , 3)\n ", "\n  if(nchar(s) == 0) {\n    return(c())\n  }\n  else {\n    words\
    \ <- strsplit(s, \" \")[[1]]\n    consonants <- function(s) {\n      num_consonants\
    \ <- length(grep(\"[b-df-hj-np-tv-z]\", s, ignore.case = TRUE))\n      return(num_consonants)\n\
    \    }\n    idx <- which(sapply(words, consonants) == n)\n    return(words[idx])\n\
    \  }\n}\n", "\n  \n  # Splits string into words\n  word_vector <- unlist(strsplit(s,\
    \ \" \"))\n  \n  consonants <- unlist(strsplit(gsub('[[:punct:]]', '', gsub('[[:space:]]',\
    \ '', s)), ''))\n  for (i in 1:length(consonants)) {\n    if (consonants[i] %in%\
    \ c('a', 'e', 'i', 'o', 'u', 'y')) {\n      consonants[i] <- 0\n    } else {\n\
    \      consonants[i] <- 1\n    }\n  }\n  \n  res <- vector(mode = \"character\"\
    , length = 0)\n  for (i in 1:length(word_vector)) {\n    word <- unlist(strsplit(word_vector[i],\
    \ ''))\n    word_consonants <- 0\n    for (j in 1:length(word)) {\n      if (word[j]\
    \ %in% c('a', 'e', 'i', 'o', 'u', 'y')) {\n        word_consonants <- word_consonants\
    \ + 0\n      } else {\n        word_consonants <- word_consonants + 1\n      }\n\
    \    }\n    if (word_consonants == n) {\n      res <- c(res, word_vector[i])\n\
    \    }\n  }\n  res\n}\n ", "\n    s <- unlist(strsplit(s, ' '))\n    y <- 0\n\
    \    for (i in s) {\n        v <- nchar(gsub(\"[aeiouAEIOU]\", \"\", i))\n   \
    \     if (v == n) {\n            y <- y + 1\n        }\n    }\n    if (y == 0)\
    \ {\n        cat(\"c()\")\n    } else {\n        s <- unlist(strsplit(s, ' '))\n\
    \        x <- 0\n        for (i in s) {\n            v <- nchar(gsub(\"[aeiouAEIOU]\"\
    , \"\", i))\n            if (v == n) {\n                x <- x + 1\n         \
    \       s <- c(s, i)\n            }\n        }\n        s <- unique(s[x+1:length(s)])\n\
    \        cat(\"c(\",paste(s,collapse = \",\"),\")\")\n    }\n}\n", "\n  words\
    \ <- unlist(strsplit(s, ' '))\n  consonants <- function(w) {\n    str_count(w,\
    \ '[bcdfghjklmnpqrstvwxyz]')\n  }\n  words[consonants(words) == n]\n}\n", "\n\
    \    words <- unlist(strsplit(s, \" \"))\n    ncons <- sapply(words, function(w)\
    \ sum(grepl(\"[^aeiou]\", w)))\n    return(words[ncons == n])\n}\n", "\n    words\
    \ <- unlist(strsplit(s, \" \"))\n    num_consonants <- function(x) {\n       \
    \ nchar(gsub(\"[aeiouyAEIOUY]\", \"\", x))\n    }\n    words[num_consonants(words)\
    \ == n]\n}\n", "\n  if (s == \"\") return(character())\n  s <- unlist(strsplit(s,\
    \ \" \"))\n  consonants <- \n    unlist(lapply(s, function(x) sum(stringr::str_count(x,\
    \ \"[a-z]\") - \n                                       stringr::str_count(x,\
    \ \"[aeiou]\") == n)))\n  s[consonants != 0]\n}\n", "\n  # Split the string into\
    \ words.\n  words <- unlist(strsplit(s, ' '))\n  # Consonants to count.\n  consonants\
    \ <- c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z')\n  # Cleaned up words.\n  clean_words <- list()\n\
    \  # Loop through each word in words.\n  for (word in words) {\n    # Count the\
    \ number of consonants in the word.\n    consonant_count <- 0\n    # Loop through\
    \ each letter in the word.\n    for (letter in word) {\n      # If the letter\
    \ is a consonant, increase the count by 1.\n      if (letter %in% consonants)\
    \ {\n        consonant_count <- consonant_count + 1\n      }\n    }\n    # If\
    \ the number of consonants in the word equals n, add it to the list.\n    if (consonant_count\
    \ == n) {\n      clean_words <- c(clean_words, word)\n    }\n  }\n  # Remove any\
    \ duplicates.\n  clean_words <- unique(clean_words)\n  # Return the resulting\
    \ list.\n  return(clean_words)\n}\n", "\n  if (nchar(s) == 0) {\n    return(c())\n\
    \  } else {\n    words <- unlist(strsplit(s, ' '))\n    res <- words[nchar(gsub('[aeiou]',\
    \ '', words)) == n]\n    return(res)\n  }\n}\n", "\n  list(\"your\", \"code\"\
    , \"here\")\n}\nrun_test_eq(\"select_words('Mary had a little lamb', 4)\", c(\"\
    little\"))\nrun_test_eq(\"select_words('Mary had a little lamb', 3)\", c(\"Mary\"\
    , \"lamb\"))\nrun_test_eq(\"select_words('simple white space', 2)\", c())\nrun_test_eq(\"\
    select_words('Hello world', 4)\", c(\"world\"))\nrun_test_eq(\"select_words('Uncle\
    \ sam', 3)\", c(\"Uncle\"))\n ", "\n  if (nchar(s) == 0) return(c())\n  ss <-\
    \ strsplit(s, \" \")[[1]]\n  ss[sapply(ss, function(x) sum(grepl(\"[aeiouAEIOU]\"\
    , x)) == n)]\n}\n", "\n  x <- strsplit(s, ' ')[[1]]\n  x <- x[nchar(x) == n]\n\
    \  x\n}\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary had a little\
    \ lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello world',\
    \ 4)\nselect_words('Uncle sam', 3)", "\n  words <- strsplit(s, ' ')[[1]]\n  words[nchar(gsub('[aeiouAEIOU]',\
    \ '', words)) == n]\n}\n", "\n  if (nchar(s) == 0) {\n    return(character())\n\
    \  }\n  words <- unlist(strsplit(s, \" \"))\n  result <- character()\n  for (word\
    \ in words) {\n    word <- stringr::str_replace_all(word, \"[^A-Za-z]\", \"\"\
    )\n    if (is.null(regexpr(\"[^aeiouAEIOU]\", word)) == FALSE) {\n      pattern\
    \ <- \"(?=.*?[^aeiouAEIOU]{1})\"\n      pattern <- paste0(pattern, paste0(rep(\"\
    .*?[^aeiouAEIOU]{1}\", n - 1), collapse = \"\"))\n      if (is.null(regexpr(pattern,\
    \ word)) == FALSE) {\n        result <- c(result, word)\n      }\n    }\n  }\n\
    \  return(result)\n}\n", "\n  stopifnot(is.character(s), is.numeric(n))\n  sapply(strsplit(s,\
    \ ' '), function(word) {\n    if (length(word) != 1) return(word)\n    if (nchar(word)\
    \ != n) return(word)\n    if (grepl(\"[aeiou]\", word)) return(word)\n    return(NULL)\n\
    \  })\n}", "\n    # Assuming all the input are correct\n    if (s == \"\") return(character())\n\
    \    s = strsplit(s, \" \")[[1]]\n    ans = character()\n    for (i in s) {\n\
    \        if (nchar(i) - nchar(gsub(\"[aeiouAEIOU]\", \"\", i)) == n) {\n     \
    \       ans = c(ans, i)\n        }\n    }\n    return(ans)\n}\n\nselect_words(\"\
    Mary had a little lamb\", 4)\nselect_words(\"Mary had a little lamb\", 3)\nselect_words(\"\
    simple white space\", 2)\nselect_words(\"Hello world\", 4)\nselect_words(\"Uncle\
    \ sam\", 3)\n", "\n  if (nchar(s) == 0)\n    return(character())\n  else {\n \
    \   s <- unlist(strsplit(s, \" \"))\n    s <- s[nchar(gsub(\"[^aeiou]\", \"\"\
    , s)) == n]\n    return(s)\n  }\n}\n", "\n    d <- strsplit(s, \" \")[[1]]\n \
    \   res <- d[lengths(regmatches(d, gregexpr(\"(?i)[^aeiou]\", d))) == n]\n   \
    \ res\n}", "\n  words <- unlist(strsplit(s, \" \"))\n  result <- c()\n  for (word\
    \ in words) {\n    if (sum(grepl(\"[aeiou]\", word)) == length(word) - n) {\n\
    \      result <- c(result, word)\n    }\n  }\n  return(result)\n}\nselect_words('Mary\
    \ had a little lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple\
    \ white space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam',\
    \ 3)\n", "\n  if(nchar(s) == 0) {\n    return(c())\n  }\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[words != \"\"]\n  ncons <- sapply(words, function(w)\
    \ {\n    return(length(grep(\"[bcdfghjklmnpqrstvwxyz]\", w, value = TRUE)))\n\
    \  })\n  words[ncons == n]\n}\n", "\n    # Your code here\n    x <- strsplit(s,\
    \ \" \")[[1]]\n    x <- gsub(\"[^aeiouAEIOU]\", \"\", x)\n    x <- nchar(x)\n\
    \    y <- names(which(x == n))\n    return(y)\n}\ns <- \"Mary had a little lamb\"\
    \nn <- 4\nselect_words(s, n)\n\ns <- \"Mary had a little lamb\"\nn <- 3\nselect_words(s,\
    \ n)\n\ns <- \"simple white space\"\nn <- 2\nselect_words(s, n)\n\ns <- \"Hello\
    \ world\"\nn <- 4\nselect_words(s, n)\n\ns <- \"Uncle sam\"\nn <- 3\nselect_words(s,\
    \ n)\n", "\n    #\n    # YOUR CODE HERE\n    #\n    if(nchar(s) == 0) return(c())\n\
    \    if(n == 0) return(c())\n    ss <- unlist(strsplit(s, \" \"))\n    cc <- sapply(ss,\
    \ function(x) sum(!grepl(\"[aeiou]\", x)))\n    return(ss[cc == n])\n}\n ", "\n\
    \  n <- n - 1  # because n=1 is no consonants\n  if (is.null(match.call())) {\n\
    \    #do nothing\n  } else {\n    s <- eval(match.call()[[2]])\n    n <- eval(match.call()[[3]])\n\
    \  }\n  if (s==\"\") {\n    return(list())\n  }\n  words <- strsplit(s, \"\\\\\
    s+\")[[1]]\n  number_of_consonants <- function(w) {\n    return(sum(grepl(\"[^aeiou]\"\
    , tolower(w))))\n  }\n  consonants <- lapply(words, number_of_consonants)\n  return(words[consonants==n])\n\
    }\n ", "\n  s <- unlist(strsplit(s, \" \"))\n  out <- NULL\n  for (i in 1:length(s))\
    \ {\n    if (length(grep(\"[qwrtpsdfghjklzxcvbnm]\", tolower(unlist(strsplit(s[i],\
    \ \"\"))))) == n) {\n      out <- c(out, s[i])\n    }\n  }\n  return(out)\n}\n",
  "\n  strsplit(strsplit(s, split = ' ')[[1]], split = '')[[1]][str_count(strsplit(s,\
    \ split = ' ')[[1]], pattern = '[^aeiou]') == n]\n}", "\n    s_list <- strsplit(s,\
    \ \" \")[[1]]\n    consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n    result <- \"\"\n    for (index in seq_along(s_list))\
    \ {\n        word <- s_list[index]\n        n_consonants <- 0\n        for (char\
    \ in seq_along(word)) {\n            if (any(word[char] == consonants)) {\n  \
    \              n_consonants <- n_consonants + 1\n            }\n        }\n  \
    \      if (n_consonants == n) {\n            result <- c(result, word)\n     \
    \   }\n    }\n    return(result)\n}", "\n  return(words[vowels %in% n])\n}\n",
  "\n  s <- strsplit(s, ' ')[[1]]\n  sapply(s, function(x) length(grep('[^aeiou]',\
    \ x, value = TRUE))) == n\n}", "\n    words <- scan(text = s, what = character(),\
    \ sep = ' ')\n    consonants <- c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n    words_with_n_consonants\
    \ <- c()\n    for (i in 1:length(words)) {\n        w <- words[i]\n        char_count\
    \ <- 0\n        for (j in 1:nchar(w)) {\n            if (w[j] %in% consonants)\
    \ {\n                char_count <- char_count + 1\n            }\n        }\n\
    \        if (char_count == n) {\n            words_with_n_consonants <- c(words_with_n_consonants,\
    \ w)\n        }\n    }\n    return(words_with_n_consonants)\n}", "\n  string <-\
    \ unlist(strsplit(s, \" \"))\n  result <- vector(\"list\", length(string))\n \
    \ for (i in 1:length(string)) {\n    current <- string[i]\n    count <- 0\n  \
    \  for (j in 1:nchar(current)) {\n      if (current[j] %in% c(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")) {\n        count <- count + 1\n\
    \      }\n    }\n    if (count == n) {\n      result[[i]] <- string[i]\n    }\n\
    \  }\n  return(unlist(result))\n}\n\nprint(select_words('Mary had a little lamb',\
    \ 4))\nprint(select_words('Mary had a little lamb', 3))\nprint(select_words('simple\
    \ white space', 2))\nprint(select_words('Hello world', 4))\nprint(select_words('Uncle\
    \ sam', 3))\n", "\n  if (nchar(s) == 0) {\n    return(character())\n  }\n  x <-\
    \ strsplit(s, \" \")[[1]]\n  selected <- x[str_count(x, \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    ) == n]\n  return(selected)\n}\nselect_words(\"Mary had a little lamb\", 4)\n\
    select_words(\"Mary had a little lamb\", 3)\nselect_words(\"simple white space\"\
    , 2)\nselect_words(\"Hello world\", 4)\nselect_words(\"Uncle sam\", 3)", "\n \
    \   # Your code here\n    if(nchar(s) == 0) return (c())\n    a <- unlist(strsplit(s,\
    \ \" \"))\n    b <- c()\n    for(i in 1:length(a)) {\n        if(nconsonants(a[i])\
    \ == n) {\n            b <- c(b, a[i])\n        }\n    }\n    return (b)\n}\n ",
  "\n  # your code goes here \n}", "\n  if(nchar(s)==0) return(c())\n  v=unlist(strsplit(s,\"\
    \ \"))\n  f=function(s) sum(sapply(strsplit(s,\"\")[[1]],function(k) k %in% \"\
    aeiou\"))\n  v[sapply(v, function(k) sum(nchar(k))-f(k)==n)]\n}", "\n    if(nchar(s)\
    \ == 0) return(c())\n    reg_express <- \".*?([^aeiouAEIOU\\\\s]+){$n}\"\n   \
    \ regmatches(s, gregexpr(reg_express, s))[[1]]\n}\n", "\n  word_list <- unlist(strsplit(s,\
    \ split = ' '))\n  cons_count_list <- sapply(word_list, function(w) {\n    sum(stri_count_regex(w,\
    \ regex = '[bcdfghjklmnpqrstvwxyz]', opts_regex = '[i]'))\n  })\n  word_list[cons_count_list\
    \ == n]\n}\n ", "\n  words <- unlist(strsplit(s, ' '))\n  words[sapply(words,\
    \ function(word) \n    sum(!word %in% c('a', 'e', 'i', 'o', 'u')) == n)]\n}\n",
  "\n  words <- strsplit(s, ' ')[[1]]\n  cons <- function(w) {\n    length(grep('[^aeiouAEIOU]',\
    \ w))\n  }\n  words[sapply(words, cons) == n]\n}", "\n  # your code goes here\n\
    \  words <- unlist(strsplit(s, \" \"))\n  lapply(words, function(x) {\n    if\
    \ (length(grep(\"[aeiou]\", x, invert = TRUE)) == n) {\n      return(x)\n    }\n\
    \  })\n}", "\n  # Return a vector of strings\n  words = unlist(strsplit(s, \"\
    \ \"))\n  lapply(words, function(x) if(sum(stri_count_fixed(x, \"[b-df-hj-np-tv-z]{1}\"\
    ) == n)) x else NULL)\n}\n", "\n    reg<- \"(?<=[^aeiouAEIOU])[^aeiouAEIOU]{2,3}(?=[^aeiouAEIOU])\"\
    \n    len<- str_count(s, reg)\n    words<- str_split(s, \" \")[[1]]\n    return(words[len==n])\n\
    }\ncat(\"-----test-----\")\ncat(\"\\n\")\ntest<- \"Mary had a little lamb\"\n\
    result<- select_words(test, 3)\nprint(result)\ntest<- \"Mary had a little lamb\"\
    \nresult<- select_words(test, 4)\nprint(result)\ntest<- \"simple white space\"\
    \nresult<- select_words(test, 2)\nprint(result)\ntest<- \"Hello world\"\nresult<-\
    \ select_words(test, 4)\nprint(result)\ntest<- \"Uncle sam\"\nresult<- select_words(test,\
    \ 3)\nprint(result)\n", "\n    # YOUR CODE HERE\n    return(character())\n}\n",
  "\n    out <- NULL\n    splitS <- strsplit(s, \" \")[[1]]\n    for (x in splitS)\
    \ {\n        if (length(grep(\"[aeiou]\", x, invert = TRUE)) == n) {\n       \
    \     out <- c(out, x)\n        }\n    }\n    return(out)\n}\n ", "\n  if(nchar(s)\
    \ == 0) return(character())\n  if(str_count(s, \"a|e|i|o|u|A|E|I|O|U\") == 0)\
    \ return(character())\n  y <- unlist(str_extract_all(s, \"[a-zA-Z]+\"))\n  y <-\
    \ y[str_count(y, \"a|e|i|o|u|A|E|I|O|U\")==n]\n  return(y)\n}\n", "\n  words <-\
    \ unlist(strsplit(s, \" \"))\n  words[sapply(words, function(x) {\n    sum(grepl(\"\
    [bcdfghjklmnpqrstvwxyz]\",x)) == n\n  })]\n}\n\nselect_words(\"simple white space\"\
    , 2)\nselect_words(\"Uncle sam\", 3)\n", "\n  # Your code here\n}\n ", "\n  #split\
    \ the string and remove words with less than n letters\n  list <- strsplit(s,\
    \ \" \")[[1]]\n  list <- list[nchar(list)>=n]\n  #remove vowel words\n  list <-\
    \ list[!grepl(\"[aeiou]+\", list, ignore.case = TRUE)]\n  #remove words with more\
    \ than n consonants\n  list <- list[nchar(gsub(\"[aeiou]+\", \"\", list, ignore.case\
    \ = TRUE))==n]\n  return(list)\n}\n", "\n  stopifnot(is.character(s))\n  stopifnot(is.numeric(n))\n\
    \  stopifnot(n >= 0)\n  s <- as.character(s)\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words <- sapply(words, function(w) {\n    stopifnot(is.character(w))\n    w\
    \ <- as.character(w)\n    w <- strsplit(w, \"\")[[1]]\n    w <- length(w[!(w %in%\
    \ c(\"a\", \"e\", \"i\", \"o\", \"u\"))])\n    if (w == n) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  })\n  return(words[words == TRUE])\n\
    }", "\n  consonants <- c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  indexes <- which(grepl(paste0(consonants, collapse = \"|\"), words))\n\
    \  word_consonants <- sapply(words[indexes], function(x) {\n    sum(grepl(paste0(consonants,\
    \ collapse = \"|\"), unlist(strsplit(x, \"\"))))\n  })\n  return(words[indexes][word_consonants\
    \ == n])\n}\n", "\n  s <- unlist(strsplit(s, \" \"))\n  strings <- s[which(nchar(gsub(\"\
    [aeiouAEIOU]\", \"\", s)) == n)]\n  if (length(strings) == 0) {\n    return(list())\n\
    \  } else {\n    return(strings)\n  }\n}", "\n    word_list <- unlist(strsplit(s,\
    \ ' '))\n    consonant_count <- sapply(word_list, function(s) { sum(!stri_detect_fixed(s,\
    \ '[aeiouAEIOU]')) })\n    return(word_list[consonant_count == n])\n}\nselect_words('Mary\
    \ had a little lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple\
    \ white space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam',\
    \ 3)\n", "\n    # YOUR CODE HERE\n    vec<-unlist(strsplit(s, \" \"))\n    ans<-c()\n\
    \    for(i in 1:length(vec))\n    {\n        if(num_consonants(vec[i])==n)\n \
    \       {\n            ans<-c(ans,vec[i])\n        }\n    }\n    return(ans)\n\
    }\n ", "\n    if (nchar(s) == 0) {\n        return (character())\n    } else {\n\
    \        words <- unlist(strsplit(s, \" \"))\n        consonants <- sapply(words,\
    \ function(x) {\n            nchar(x) - nchar(gsub(\"[aeiou]\", \"\", x))\n  \
    \      })\n        return (words[consonants == n])\n    }\n}\n", "\n  consonants\
    \ <- c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z')\n  s <- tolower(s)\n  s <- strsplit(s, ' ')[[1]]\n\
    \  #print(s)\n  result <- sapply(s, function(x) {\n    a <- strsplit(x, '')[[1]]\n\
    \    sum(a %in% consonants)\n  })\n  #print(result)\n  s[result == n]\n}\n\nselect_words('Mary\
    \ had a little lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple\
    \ white space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam',\
    \ 3)\n", "\n  vowels <- c('a', 'e', 'i', 'o', 'u')\n  consonants <- setdiff(LETTERS,\
    \ toupper(vowels))\n  s_split <- strsplit(s, ' ')[[1]]\n  s_split[nchar(s_split)\
    \ == n]\n}\n\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary had\
    \ a little lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello\
    \ world', 4)\nselect_words('Uncle sam', 3)\n", "\n    s = gsub(\"\\\\s+\", \"\
    \ \", s)\n    words = unlist(strsplit(s, \" \"))\n    filtered = lapply(words,\
    \ function(x) {\n        # count the number of consonants\n        consonants\
    \ = str_count(x, \"[^aeiou]\")\n        if (consonants == n) {\n            #\
    \ return the word\n            return(x)\n        }\n    })\n    # remove NULL\
    \ elements\n    filtered = filtered[!is.na(filtered)]\n    return(filtered)\n\
    }\n\nprint(select_words('Mary had a little lamb', 4))\nprint(select_words('Mary\
    \ had a little lamb', 3))\nprint(select_words('simple white space', 2))\nprint(select_words('Hello\
    \ world', 4))\nprint(select_words('Uncle sam', 3))\n", "\n  s %>% \n    strsplit(split\
    \ = \" \") %>% \n    unlist() %>% \n    str_extract_all(\"[aeiouy]\") %>% \n \
    \   lapply(length) %>% \n    as.integer() %>% \n    which(. == n) %>% \n    s[.]\n\
    }\nselect_words('Mary had a little lamb', 4)\n\nselect_words('Mary had a little\
    \ lamb', 3)\n\nselect_words('simple white space', 2)\n\nselect_words('Hello world',\
    \ 4)\n\nselect_words('Uncle sam', 3)\n", "\n  m <- stringr::str_split(s, \" \"\
    )[[1]]\n  vapply(m, function(x) sum(stringr::str_count(x, \"[^aeiou]\") == n),\n\
    \         1)\n}\n", "\n  # your solution here\n}\n\n", "\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words[sapply(words, function(w) {length(grep(\"[^aeiouAEIOU]\", unlist(strsplit(w,\
    \ \"\")))) == n})]\n}\n", "\n    if (nchar(s) == 0) {\n        return(NULL)\n\
    \    } else {\n        if (nchar(gsub(\"[aeiou]\", \"\", s)) == n) {\n       \
    \     return(s)\n        } else {\n            return(NULL)\n        }\n    }\n\
    }\n\nstrings <- strsplit(input$str, \" \")[[1]]\nsapply(strings, select_words,\
    \ n = input$n)\n ", "\n  # write your code here\n  numCons <- function(x) {\n\
    \    numVow <- 0\n    for ( i in strsplit(x, \"\")[[1]] ) {\n      if (i %in%\
    \ c(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")) {\n\
    \        numVow <- numVow + 1\n      }\n    }\n    return(nchar(x) - numVow)\n\
    \  }\n  temp <- strsplit(s, \" \")[[1]]\n  return(temp[numCons(temp) == n])\n\
    }\n", "\n  my_words <- strsplit(s, ' ')[[1]]\n  result <- c()\n  for (word in\
    \ my_words) {\n    consonants <- consonants(word)\n    if (length(consonants)\
    \ == n) {\n      result <- c(result, word)\n    }\n  }\n  return(result)\n}\n",
  "\n  words <- strsplit(s, ' ')[[1]]\n  return(words[sapply(words, consonants) ==\
    \ n])\n}\n\nselect_words <- function(s, n) {\n  words <- strsplit(s, ' ')[[1]]\n\
    \  return(words[sapply(words, \n            function(word) sum(!letter %in% c('a',\
    \ 'e', 'i', 'o', 'u') & \n                                 strsplit(word, '')[[1]]))\
    \ == n])\n}\n\nselect_words <- function(s, n) {\n  s <- trimws(s)\n  if (length(s)\
    \ == 0) {\n    return(c())\n  }\n  words <- gregexpr('(\\\\w+)', s)[[1]]\n  words\
    \ <- regmatches(s, words)\n  words <- words[sapply(words, \n            function(word)\
    \ sum(!letter %in% c('a', 'e', 'i', 'o', 'u') & \n                           \
    \      strsplit(word, '')[[1]])) == n]\n  return(words)\n}\n\nstrsplit <- function(str,\
    \ sep) {\n  return(strsplit(str, sep, perl = TRUE))\n}\n\ntrimws <- function(x)\
    \ {\n  sub('^\\\\s+', '', sub('\\\\s+$', '', x))\n}\nconsonants <- function(word)\
    \ {\n  sum(!letter %in% c('a', 'e', 'i', 'o', 'u') & \n      strsplit(word, '')[[1]])\n\
    }\n", "\n  s <- tolower(s)\n  s <- gsub(\"\\\\s+\", \" \", s)\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n  result <- lapply(words, function(x) length(intersect(strsplit(x,\
    \ \"\")[[1]], consonants)))\n  words[result == n]\n}\n", "\n  ss <- strsplit(s,\
    \ \" \")[[1]]\n  ss[sapply(ss, function(x) sum(!is.na(stri_match_all_regex(x,\
    \ \"[^aeiouAEIOU]\")))) == n]\n}\n\ns <- 'Mary had a little lamb'\nn <- 4\nselect_words(s,\
    \ n)\n\ns <- 'Mary had a little lamb'\nn <- 3\nselect_words(s, n)\n\ns <- 'simple\
    \ white space'\nn <- 2\nselect_words(s, n)\n\ns <- 'Hello world'\nn <- 4\nselect_words(s,\
    \ n)\n\ns <- 'Uncle sam'\nn <- 3\nselect_words(s, n)\n", "\n  if (nchar(s) ==\
    \ 0) {\n    return(list())\n  }\n  space_positions <- which(strsplit(s, \"\")[[1]]\
    \ == \" \")\n  space_positions <- c(0, space_positions, nchar(s))\n  start_positions\
    \ <- space_positions[1:(length(space_positions) - 1)] + 1\n  end_positions <-\
    \ space_positions[2:length(space_positions)] - 1\n  words <- mapply(function(start,\
    \ end) substr(s, start, end), start_positions, end_positions)\n  n_consonants\
    \ <- sapply(words, function(word) sum(grepl(\"[^aeiou]\", word)))\n  return(words[n_consonants\
    \ == n])\n}\n", "\n    vowels <- \"aeiou\"\n    consonants <- c(setdiff(letters,\
    \ vowels))\n    words <- unlist(strsplit(s, \" \"))\n    words <- words[nchar(words)\
    \ != 0]\n    words <- words[unlist(lapply(words, function(x) {\n        tolower(x)\
    \ %in% consonants\n    }))]\n    words <- words[unlist(lapply(words, function(x)\
    \ {\n        length(strsplit(x, \"\")[[1]]) == n\n    }))]\n    words\n}\n", "\n\
    \    # write your code here\n    return(character())\n}\n", "\n  # Your code here\n\
    }\n ", "\n    split_s <- strsplit(s, ' ')[[1]]\n    selected_words <- c()\n  \
    \  for (w in split_s) {\n        if (consonants(w) == n) {\n            selected_words\
    \ <- c(selected_words, w)\n        }\n    }\n    return(selected_words)\n}\n ",
  "\n  if (nchar(s) == 0) {\n    return(list())\n  }\n  words <- strsplit(s, ' ')[[1]]\n\
    \  consonants <- '[^aeiou ]'\n  select_words <- words[nchar(regmatches(words,\
    \ regexpr(consonants, words))) == n]\n  return(select_words)\n}\n", "\n  cs <-\
    \ c('a', 'e', 'i', 'o', 'u')\n  con <- unlist(strsplit(s, ' '))\n  con <- con[str_count(con,\
    \ cs) == n]\n  return(con)\n}\nprint(select_words('Mary had a little lamb', 4))\n\
    print(select_words('Mary had a little lamb', 3))\nprint(select_words('simple white\
    \ space', 2))\nprint(select_words('Hello world', 4))\nprint(select_words('Uncle\
    \ sam', 3))\n", "\n    words <- strsplit(s, \" \")[[1]]\n    num_consonants <-\
    \ function(w) {\n        letters <- strsplit(w, \"\")[[1]]\n        length(setdiff(letters,\
    \ c(\"a\", \"e\", \"i\", \"o\", \"u\")))\n    }\n    return(words[num_consonants(words)\
    \ == n])\n}\n\nprint(select_words('Mary had a little lamb', 4))\nprint(select_words('Mary\
    \ had a little lamb', 3))\nprint(select_words('simple white space', 2))\nprint(select_words('Hello\
    \ world', 4))\nprint(select_words('Uncle sam', 3))\n", "\n  x <- strsplit(s, \"\
    \ \")[[1]]\n  m <- lapply(x, function(x) length(grep(\"[^aeiouAEIOU ]\", x)))\n\
    \  y <- x[m == n]\n  return(y)\n}\nprint(select_words('Mary had a little lamb',\
    \ 4))\nprint(select_words('Mary had a little lamb', 3))\nprint(select_words('simple\
    \ white space', 2))\nprint(select_words('Hello world', 4))\nprint(select_words('Uncle\
    \ sam', 3))\n", "\n  s <- strsplit(s, split=\" \")[[1]]\n  return(s[sapply(s,\
    \ function(x) sum(stri_count_fixed(x, pattern=\"[^aeyiou]\"))) == n])\n}", "\n\
    \  x <- strsplit(s, \" \")[[1]]\n  res <- x[stringr::str_count(x, \"[^aeiou]\"\
    ) == n]\n  return(res)\n}\n", "\n    s %>% strsplit(split = \"\\\\s+\") %>% unlist()\
    \ %>% \n    Filter(function(x) length(x) == n)\n}\n", "\n  return(strsplit(s,\
    \ \" \")[[1]][str_count(strsplit(s, \" \")[[1]], \"[^aeiouAEIOU]\") == n])\n}\n",
  "\n  vowels <- c('a', 'e', 'i', 'o', 'u')\n  words <- strsplit(s, ' ')[[1]]\n  words\
    \ <- unlist(words)\n  words <- words[nchar(words) == n]\n  words <- words[is.na(words)\
    \ == FALSE]\n  words <- words[is.na(words) == FALSE]\n  words <- words[grepl(paste(vowels,\
    \ collapse = '|'), words) == FALSE]\n  words <- words[nchar(words) == n]\n  words\
    \ <- words[grepl(paste(vowels, collapse = '|'), words) == FALSE]\n  words <- words[nchar(words)\
    \ == n]\n  return(words)\n}\nselect_words('Mary had a little lamb', 4)\n", "\n\
    \    v <- unlist(strsplit(s, split = ' '))\n    for (i in seq_along(v)) {\n  \
    \      if (!is.na(which(v[i] %in% c('a', 'e', 'i', 'o', 'u')))) {\n          \
    \  v[i] <- v[i][-which(v[i] %in% c('a', 'e', 'i', 'o', 'u'))]\n        }\n   \
    \ }\n    v <- v[nchar(v) == n]\n    v\n}", "\n  words <- unlist(strsplit(s, '\
    \ '))\n  result <- c()\n  for (word in words) {\n    l <- length(grep('[bcdfghjklmnpqrstvwxyz]',\
    \ tolower(word)))\n    if (l == n) {\n      result <- c(result, word)\n    }\n\
    \  }\n  return(result)\n}\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary\
    \ had a little lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello\
    \ world', 4)\nselect_words('Uncle sam', 3)\n", "\n  vowels <- c('a', 'e', 'i',\
    \ 'o', 'u')\n  words <- strsplit(s, ' ')[[1]]\n  filtered_words <- \n    words[sapply(words,\
    \ function(word) {\n      length(grep(paste0('[^', paste(vowels, collapse = ''),\
    \ ']'), word)) == n\n    })]\n  \n  return(filtered_words)\n}\nselect_words('Mary\
    \ had a little lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple\
    \ white space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam',\
    \ 3)\n ", "\n  lst <- unlist(strsplit(s, \" \"))\n  lst[sapply(lst, function(x)\
    \ consonants(x) == n)]\n}\n", "\n  words <- unique(unlist(strsplit(s, ' ')))\n\
    \  selected_words <- words[nchar(gsub('[aeiouAEIOU]', '', words)) == n]\n  return(selected_words)\n\
    }\n", "\n  s <- strsplit(s, \" \")[[1]]\n  lapply(s, function(x) {\n    l <- length(grep(\"\
    [^aeiouAEIOU]\", unlist(strsplit(x, \"\"))))\n    if (l == n) {\n      x\n   \
    \ }\n  })\n}\n", "\n    words <- strsplit(s, ' ')[[1]]\n    words <- words[nchar(words)\
    \ >= n]\n    words <- words[vapply(words, function(w) {\n        regexpr('[^aeiou]',\
    \ w)\n    }, integer(1)) == n]\n    return(words)\n}\nselect_words('Mary had a\
    \ little lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple\
    \ white space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam',\
    \ 3)\n", "\n  if (nchar(s) == 0) return(c())\n  words <- unlist(strsplit(s, \"\
    \ \"))\n  lapply(words, function(word) if (n == sum(is.na(unlist(strsplit(word,\
    \ \"[aeiou]\"))))) word)\n}", "\n  all_words <- unlist(strsplit(s, \" \"))\n \
    \ consonants <- function(word) {\n    sum(grepl(\"[^aeiou]\", word))\n  }\n  consonants_words\
    \ <- function(n) {\n    sapply(all_words, consonants) == n\n  }\n  all_words[consonants_words(n)]\n\
    }", "\n  consonants <- c('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n  words <- unlist(strsplit(s,\
    \ ' '))\n  lengths <- sapply(words, function(word) sum(word %in% consonants))\n\
    \  return(words[lengths == n])\n}\n ", "\n    sapply(strsplit(s, \" \"), function(w)\
    \ if (str_count(w, \"[aeiou]\") == n) w)\n}\n", "\n\t# Your code here\n\ts <-\
    \ strsplit(s, \" \")[[1]]\n\ts <- unlist(sapply(s, function(x) ifelse(nchar(gsub(\"\
    a|e|i|o|u\", \"\", x)) == n, x, NA)))\n\treturn(s)\n}", "\n    words <- unlist(strsplit(s,\
    \ \" \"))\n    n_cons <- sapply(words, function(w) sum(stri_count_fixed(w, \"\
    a|e|i|o|u\") == 0))\n    words[n_cons == n]\n}\n", "\n  split <- strsplit(s, \"\
    \ \")[[1]]\n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n  split\n  len <- length(split)\n  words_with_exactly_n_consonants\
    \ <- list()\n  for (i in 1:len) {\n    if (length(grep(paste0(\"[\", paste(consonants,\
    \ collapse = \"\"), \"]\"), split[i], value = TRUE)) == n) {\n      words_with_exactly_n_consonants\
    \ <- c(words_with_exactly_n_consonants, split[i])\n    }\n  }\n  return(words_with_exactly_n_consonants)\n\
    }\nselect_words('Hello world', 4)\n", "\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words[nchar(gsub(\"[aeiou]\", \"\", tolower(words))) == n]\n}\nselect_words('Mary\
    \ had a little lamb', 4)\nselect_words('Mary had a little lamb', 3)\nselect_words('simple\
    \ white space', 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam',\
    \ 3)\n", "\n  pattern <- paste(replicate(n, \"[^aeiouy]\"), collapse = \"\")\n\
    \  regmatches(s, gregexpr(pattern, s))[[1]]\n}\n", "\n  # split the string into\
    \ a list\n  s <- strsplit(s, \" \")[[1]]\n  # create a vector to store the words\
    \ with n consonants\n  word_vector <- c()\n  # iterate through each word in the\
    \ list\n  for (word in s) {\n    # count the number of consonants in the word\n\
    \    consonants <- length(grep('[bcdfghjklmnpqrstvwxyz]', word, perl = TRUE))\n\
    \    # if the number of consonants equals n, add the word to the vector\n    if\
    \ (consonants == n) {\n      word_vector <- c(word_vector, word)\n    }\n  }\n\
    \  # return the vector\n  return(word_vector)\n}\n", "\n  # convert string to\
    \ character vector\n  s <- unlist(strsplit(s, ' '))\n  # convert each word to\
    \ lower case\n  s <- tolower(s)\n  # convert each character to vector\n  s <-\
    \ lapply(s, function(x) strsplit(x, '')[[1]])\n  # count number of consonants\n\
    \  s <- lapply(s, function(x) sum(! x %in% c('a', 'e', 'i', 'o', 'u')))\n  # return\
    \ words that have n number of consonants\n  s[s == n]\n}\n", "\n  # We are looking\
    \ for only the letters\n  s <- unlist(strsplit(s, ' '))\n  # Vowels\n  v <- c('a',\
    \ 'e', 'i', 'o', 'u')\n  # Select the words with n consonants\n  out <- s[nchar(s)\
    \ - sapply(s, function(x) sum(x %in% v)) == n]\n  return(out)\n}", "\n  s = strsplit(s,\
    \ split = ' ')[[1]]\n  s = s[nchar(s) >= n]\n  s = s[unlist(lapply(s, function(x)\
    \ sum(!grepl('[aeiou]', x)))) == n]\n  return(s)\n}\n", "\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  words[sapply(words, consonants_count) == n]\n}\nselect_words('Mary\
    \ had a little lamb', 4)\n", "\n  words <- strsplit(s, \" \")[[1]]\n  consonants\
    \ <- function(word) {\n    word <- unlist(strsplit(word, \"\"))\n    length(word[!(word\
    \ %in% c(\"a\", \"e\", \"i\", \"o\", \"u\"))])\n  }\n  words[consonants(words)\
    \ == n]\n}\nselect_words(\"Mary had a little lamb\", 4)\nselect_words(\"Mary had\
    \ a little lamb\", 3)\nselect_words(\"simple white space\", 2)\nselect_words(\"\
    Hello world\", 4)\nselect_words(\"Uncle sam\", 3)\n", "\n    s <- strsplit(s,\
    \ \" \")[[1]]\n    cons = c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\")\n    words = c()\n    for (word in s) {\n        numCons = 0\n   \
    \     for (c in word) {\n            if (c %in% cons) {\n                numCons\
    \ = numCons + 1\n            }\n        }\n        if (numCons == n) {\n     \
    \       words = c(words, word)\n        }\n    }\n    return(words)\n}\n", "\n\
    \  matches <- str_extract_all(s, paste(\"\\\\w+\", '{', n, ',}', sep = ''))\n\
    \  if (is.null(matches[[1]])) return (NULL)\n  matches <- matches[[1]]\n  matches\
    \ <- matches[matches != \"\"]\n  return (matches)\n}\n", "\n  return(grep(paste0(\"\
    [^aeiou]{\", n, \"}$\"), strsplit(s, \" \")[[1]], value = TRUE))\n}\n", "\n  s\
    \ <- unlist(strsplit(s, \" \"))\n  consonants <- function(s) {\n    sum(grepl(\"\
    [bcdfghjklmnpqrstvwxyz]\", unlist(strsplit(s, \"\"))))\n  }\n  lapply(s, function(x)\
    \ {\n    if (consonants(x) == n) {\n      x\n    }\n  })\n}\nselect_words('Mary\
    \ had a little lamb', 4)\n", "\n    # create a vector of booleans, each element\
    \ of it is TRUE if the corresponding\n    # word in the input string has exactly\
    \ n consonants, otherwise FALSE\n    str <- unlist(strsplit(s, \" \"))\n    b\
    \ <- sapply(str, function(w) sum(!grepl(\"[aeiouAEIOU]\", w)) == n)\n    # return\
    \ those words of the input string that have exactly n consonants\n    return(str[b])\n\
    }", "\n  s <- sapply(strsplit(s, \" \"), \n              function(x) gsub(\"[[:punct:]]\"\
    , \"\", x))\n  v <- sapply(s, function(x) length(grep(\"[^aeiouAEIOU]\", x)))\n\
    \  s[v == n]\n}\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary\
    \ had a little lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello\
    \ world', 4)\nselect_words('Uncle sam', 3)\n", "\n  words <- strsplit(s, \" \"\
    )[[1]]\n  words[grepl(paste0(\"[^aeiouAEIOU]{\", n, \"}\"), words)]\n}\n\nselect_words(\"\
    Mary had a little lamb\", 4)", "\n  s <- unlist(strsplit(s, split = ' '))\n  f\
    \ <- function(w) {\n    sum(c(grepl('[qwrtypsdfghjklzxcvbnm]', w)) == 1) == n\n\
    \  }\n  s[sapply(s, f)]\n}", "\n  \n  # Split the string into words, and return\
    \ an empty character vector if \n  # there are no words\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  if (length(words) == 0) return(character(0))\n  \n  # Select only\
    \ words that have n consonants, and return the result\n  return(words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n])\n}\n\nselect_words(\"Mary had a little lamb\"\
    , 4)", "\n  words <- unlist(strsplit(s, \" \"))\n  words_consonants <- lapply(words,\
    \ function(word) {\n    word <- gsub(\"[aeiou]\", \"\", word, ignore.case = TRUE)\n\
    \    length(word)\n  })\n  words[which(words_consonants == n)]\n}\n", "\n  num_consonants\
    \ <- function(w) {\n    # number of consonants in word\n    str_count(w, \"[^aeiou\\\
    \\s]\")\n  }\n  str_trim(str_split(s, \"\\\\s+\")[[1]][num_consonants(str_split(s,\
    \ \"\\\\s+\")[[1]]) == n])\n}\nselect_words('Mary had a little lamb', 4)\nselect_words('Mary\
    \ had a little lamb', 3)\nselect_words('simple white space', 2)\nselect_words('Hello\
    \ world', 4)\nselect_words('Uncle sam', 3)\n", "\n  word_list <- unlist(strsplit(s,\
    \ \" \"))\n  consonant_list <- c()\n  for (i in word_list) {\n    if (consonant(i)\
    \ == n) {\n      consonant_list <- c(consonant_list, i)\n    }\n  }\n  return(consonant_list)\n\
    }\n\nconsonant <- function(s) {\n  vowel_list <- c(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n  consonant_counter <- 0\n  for (i in s) {\n    if (!(i %in% vowel_list))\
    \ {\n      consonant_counter <- consonant_counter + 1\n    }\n  }\n  return(consonant_counter)\n\
    }\n", "\n    word_list <- strsplit(s, ' ')[[1]]\n    word_list[lengths(lapply(word_list,\
    \ function(x) grep('[b-df-hj-np-tv-z]', x))) == n]\n}\n", "\n  # Your code here\n\
    }", "\n  ## check if the string is empty\n  if(nchar(s) == 0) {\n    return(list())\n\
    \  }\n  ## split the string into words\n  words <- unlist(strsplit(s, \" \"))\n\
    \  ## check how many consonants the word contains\n  consonants <- sapply(words,\
    \ function(x) {\n    count_consonants(x)\n  })\n  ## extract words that contain\
    \ exactly n consonants\n  words[consonants == n]\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
