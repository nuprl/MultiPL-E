name: HumanEval_117_select_words
language: r
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
  \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little lamb',\
  \ 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n# c()\n\
  # >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle sam',\
  \ 3)\n# c('Uncle')\nselect_words <- function(s, n) {"
tests: "test_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
  \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
  \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
  \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
  \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
  \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
  \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n    if (nchar(s) == 0) return(NULL)\n    idx <- which(nchar(strsplit(s,\
    \ split = \" \")[[1]]) == n)\n    strsplit(s, split = \" \")[[1]][idx]\n}", "\n\
    \  \n}\nselect_words('Mary had a little lamb', 4)\n\nselect_words('Mary had a\
    \ little lamb', 3)\n\nselect_words('simple white space', 2)\n\nselect_words('Hello\
    \ world', 4)\n\nselect_words('Uncle sam', 3)\n", "\n    words <- strsplit(s, \"\
    \ \")[[1]]\n    letters <- sapply(words, strsplit, '')\n    consonants <- letters[is.na(match(letters,\
    \ c('a', 'e', 'i', 'o', 'u')))]\n    n_consonants <- sapply(consonants, length)\n\
    \    words[n_consonants == n]\n}\n\nselect_words(\"Mary had a little lamb\", 4)\n",
  "\n    if(!s) {\n        return(list())\n    }\n    strsplit(s, \" \")[[1]][lengths(regmatches(s,\
    \ gregexpr(\"[aeiou]\", s))) == n]\n}\n", "\n    # Write your code here\n}\n ",
  "\n\ts <- unlist(strsplit(s, ' '))\n\tresult <- s[vowel_count(s) == n]\n\tnames(result)\
    \ <- NULL\n\treturn(result)\n}\n\nvowel_count <- function(s) {\n\tlength(s) -\
    \ nchar(gsub('[aeiou]', '', s))\n}\n", "\n    s <- strsplit(s, \"\\\\s+\")[[1]]\n\
    \    v <- stringi::stri_extract_all_regex(s, \"^(?![aeiou])(?![aeiou])[a-z]+(?=[aeiou])|^(?![aeiou])[a-z]+(?=[aeiou])[a-z]+(?=[aeiou])[a-z]+(?=[aeiou])\"\
    )\n    v <- unlist(v)\n    v <- sapply(v, function(x) stringi::stri_count_regex(x,\
    \ \"^(?![aeiou])\"))\n    names(v) <- s\n    v <- names(v[v == n])\n    v\n}\n",
  "\n    words <- unlist(strsplit(s, split = \" \"))\n    words <- words[nchar(words)\
    \ != 0]\n    words <- words[nchar(words) >= n]\n    words <- words[nchar(gsub(\"\
    [aeiouAEIOU]\", \"\", words)) == n]\n    return(words)\n}\n", "\n    s <- strsplit(s,\
    \ \" \")[[1]]\n    v <- vector(\"character\", length = length(s))\n    for (i\
    \ in seq_along(s)) {\n        if (consonants(s[i]) == n) {\n            v[i] <-\
    \ s[i]\n        }\n    }\n    return(v[v != \"\"])\n}\n", "\n    # 's' is the\
    \ string\n    # 'n' is the number of consonants to search\n    if (identical(s,\
    \ '')) {\n        # return an empty list\n        return(list())\n    } else {\n\
    \        # convert all characters to lowercase, then split the string into a list\n\
    \        # of words based on space\n        words <- unlist(strsplit(tolower(s),\
    \ ' '))\n        output <- c()\n        for (word in words) {\n            # for\
    \ each word, count the number of consonants using 'grep'\n            cons <-\
    \ length(grep('[^aeiou]', word))\n            if (cons == n) {\n             \
    \   # if the number of consonants is equal to 'n', then append the word\n    \
    \            # to the output list\n                output <- c(output, word)\n\
    \            }\n        }\n        return(output)\n    }\n}\ns <- 'Mary had a\
    \ little lamb'\nn <- 4\nselect_words(s, n)\n\ns <- 'Mary had a little lamb'\n\
    n <- 3\nselect_words(s, n)\n\ns <- 'simple white space'\nn <- 2\nselect_words(s,\
    \ n)\n\ns <- 'Hello world'\nn <- 4\nselect_words(s, n)\n\ns <- 'Uncle sam'\nn\
    \ <- 3\nselect_words(s, n)\n", "\n  if (s == \"\"){\n    return(c())\n  }\n  data\
    \ = unlist(strsplit(s, split = ' '))\n  l = length(data)\n  result = c()\n  for\
    \ (i in 1:l){\n    num = 0\n    for (j in 1:nchar(data[i])){\n      if (data[i][j]\
    \ %in% c('a', 'e', 'i', 'o', 'u')){\n        num = num + 1\n      }\n    }\n \
    \   if (num == n){\n      result = c(result, data[i])\n    }\n  }\n  return(result)\n\
    }\n", "\n    library(stringr)\n    library(purrr)\n    library(dplyr)\n    # Remove\
    \ punctuation\n    s_stripped <- str_replace_all(s, \"[[:punct:]]\", \"\")\n \
    \   # Split words into list\n    s_list <- str_split(s_stripped, \" \")\n    #\
    \ Count number of consonants in each word\n    s_consonants <- map_int(s_list,\
    \ ~ sum(stri_count_fixed(., \"aeiou\") == 0))\n    # Filter by number of consonants\n\
    \    s_filtered <- filter(s_list, s_consonants == n)\n    # Return as a vector\n\
    \    as.vector(s_filtered)\n}\n", "\n  word <- strsplit(s, ' ')[[1]]\n  filter(word,\
    \ nchar(gsub('[^aeiouAEIOU]', '', .)) == n)\n}\n", "\n  c()\n}\n\nselect_words('Mary\
    \ had a little lamb', 4)", "\n  if(identical(s, '')) return(character(0))\n  words\
    \ <- unlist(strsplit(s, ' '))\n  words[sapply(words, function(w) length(grep('[^aeiou]',\
    \ w, value = TRUE)) == n)]\n}\n", "\n  # Enter your code here\n  str <- strsplit(s,\
    \ \" \")[[1]]\n  res <- vector()\n  for (strs in str) {\n    if (nchar(strs) -\
    \ nchar(gsub(\"[aeiouAEIOU]\", \"\", strs)) == n) {\n      res <- c(res, strs)\n\
    \    }\n  }\n  return(res)\n}\n", "\n  if (length(s) == 0) {\n    return(list())\n\
    \  }\n  words <- strsplit(s, \" \")[[1]]\n  #print(words)\n  return(words[nchar(gsub(\"\
    [aieou]\", \"\", words)) == n])\n}\nselect_words('Mary had a little lamb', 4)\n\
    select_words('Mary had a little lamb', 3)\nselect_words('simple white space',\
    \ 2)\nselect_words('Hello world', 4)\nselect_words('Uncle sam', 3)\n", "\n  words\
    \ <- strsplit(s, \" \")[[1]]\n  consonants <- function(w) sum(grepl(\"[bcdfghjklmnpqrstvwxz]\"\
    , w))\n  consonant_words <- words[sapply(words, consonants) == n]\n  return(consonant_words)\n\
    }\nstr <- 'simple white space'\nselect_words(str, 2)", "\n  words <- unlist(strsplit(s,\
    \ ' '))\n  words <- words[words != '']\n  len <- sapply(words, nchar)\n  words\
    \ <- words[len == n]\n  return(words)\n}\n", "\n  s <- strsplit(s, \" \")[[1]]\n\
    \  lapply(s, function(x) {\n    if (nchar(gsub(\"[^aeiou]\", \"\", x)) == n) x\n\
    \  })\n}"]
stop_tokens:
- "\n#"
- "\n```"
