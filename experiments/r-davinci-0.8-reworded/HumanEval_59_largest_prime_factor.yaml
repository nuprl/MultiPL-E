name: HumanEval_59_largest_prime_factor
language: r
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
  largest_prime_factor <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- largest_prime_factor\n    if(!identical(candidate(15),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(27), 3)){quit('no', 1)}\n    if(!identical(candidate(63),\
  \ 7)){quit('no', 1)}\n    if(!identical(candidate(330), 11)){quit('no', 1)}\n  \
  \  if(!identical(candidate(13195), 29)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor == 0) {\n \
    \     n <- n / factor\n    } else {\n      factor <- factor + 1\n    }\n  }\n\
    \  factor\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n\
    \  prime <- 2\n  while (n != 1) {\n    if (n %% prime == 0) {\n      n <- n /\
    \ prime\n    } else {\n      prime <- next_prime(prime)\n    }\n  }\n  prime\n\
    }\nlargest_prime_factor(13195)\n\nlargest_prime_factor(2048)\n", "\n  # your code\
    \ here\n}\n ", "\n  stopifnot(n > 1, !is.prime(n))\n  largest_prime_factor <-\
    \ 2\n  while (n > 1) {\n    while (n %% largest_prime_factor == 0) {\n      n\
    \ <- n / largest_prime_factor\n    }\n    largest_prime_factor <- largest_prime_factor\
    \ + 1\n  }\n  largest_prime_factor\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(600851475143)",
  "\n  for (i in 2:n) {\n    if (n%%i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n  return(n)\n}\n", "\n  # determine all prime factors of n\n  factors\
    \ <- prime_factors(n)\n  # return the last element\n  factors[length(factors)]\n\
    }\n", "\n  prime_factors <- c()\n  for (i in 2:n) {\n    if (n %% i == 0) {\n\
    \      prime_factors <- c(prime_factors, i)\n      n <- n / i\n    }\n  }\n  max(prime_factors)\n\
    }\n\nlargest_prime_factor(13195)\n\nlargest_prime_factor(2048)\n", "\n  for (i\
    \ in 2:n) {\n    if (is_prime(i) && n %% i == 0) {\n      return(i)\n    }\n \
    \ }\n}\n\nanswer <- largest_prime_factor(600851475143)\nprint(answer)\n", "\n\
    \  factors <- c()\n  factor_check <- 2\n  # divide n by a factor f (2) until n\
    \ == 1 or no longer divides n.\n  # if n % f == 0, then f is a factor of n.\n\
    \  while (n > 1) {\n    if (n %% factor_check == 0) {\n      factors <- c(factors,\
    \ factor_check)\n      n <- n / factor_check\n    } else {\n      factor_check\
    \ <- factor_check + 1\n    }\n  }\n  # return the last factor\n  return(factors[length(factors)])\n\
    }\nlargest_prime_factor(13195)\n", "\n    i <- 2\n    while (i < n) {\n      \
    \  if (n %% i == 0) {\n            n <- n / i\n        } else {\n            i\
    \ <- i + 1\n        }\n    }\n    return(n)\n}\nlargest_prime_factor(24)\n", "\n\
    \  x <- 2 # Starting with the first prime number\n  while (n > x) {\n    if (n\
    \ %% x == 0) n <- n/x else x <- x + 1\n  }\n  return(x)\n}\n", "\n  stopifnot(is.numeric(n)\
    \ && n > 1 && !is.prime(n))\n  res <- 2\n  while (n > 1) {\n    if (n %% res ==\
    \ 0) {\n      n <- n / res\n    } else {\n      res <- res + 1\n    }\n  }\n \
    \ res\n}", "\n    p <- 2\n    while (n > 1) {\n        if (n %% p == 0) {\n  \
    \          n <- n %/% p\n        } else {\n            p <- p + 1\n        }\n\
    \    }\n    return(p)\n}\n", "\n  \n}\n", "\n  # Find a prime factor of n.\n \
    \ # >>> largest_prime_factor(1024)\n  # 2\n  find_prime_factor <- function(n)\
    \ {\n    # Find a factor of n, and check if it is prime.\n    # >>> find_prime_factor(1024)\n\
    \    # 2\n    find_factor <- function(n) {\n      # Find a factor of n, by checking\
    \ every number\n      # between 2 and the square root of n.\n      # >>> find_factor(1024)\n\
    \      # 2\n      factor <- function(n) {\n        start <- 2\n        finish\
    \ <- floor(sqrt(n))\n        # Iterate through every number between 2 and the\
    \ square root of n.\n        for (i in start:finish) {\n          # If the number\
    \ is a factor of n, return it.\n          if (n %% i == 0) {\n            return(i)\n\
    \          }\n        }\n      }\n      # If no factor was found, return n.\n\
    \      return(n)\n    }\n    # Check if the factor is prime.\n    # >>> find_prime_factor(1024)\n\
    \    # 2\n    is_prime <- function(n) {\n      # If n is divisible by a number\
    \ between 2 and n-1, return false.\n      for (i in 2:(n-1)) {\n        if (n\
    \ %% i == 0) {\n          return(FALSE)\n        }\n      }\n      # Otherwise,\
    \ return true.\n      return(TRUE)\n    }\n    # Get the factor and check if it\
    \ is prime.\n    f <- find_factor(n)\n    p <- is_prime(f)\n    # If the factor\
    \ is prime, return it.\n    if (p) {\n      return(f)\n    }\n    # Otherwise,\
    \ return the largest prime factor of the factor.\n    return(largest_prime_factor(f))\n\
    \  }\n  # Get the prime factor.\n  p <- find_prime_factor(n)\n  # If the prime\
    \ factor is 1, return n.\n  if (p == 1) {\n    return(n)\n  }\n  # Otherwise,\
    \ return the largest prime factor of the prime factor.\n  return(largest", "\n\
    \  # Code here\n}\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n\
    \ ", "\n  # Prime factorize n, then return the largest of the prime factors.\n\
    \  return(max(prime_factors(n)))\n}\n", "\n  max(prime_factors(n))\n}\n\nlargest_prime_factor(13195)\n",
  "\n    largest <- 0\n    i <- 2\n    # The largest prime factor of n must be smaller\
    \ than the square root of n.\n    while (i < sqrt(n)) {\n        # if i is a factor\
    \ of n and is prime, it must be the largest prime factor of n.\n        if (n\
    \ %% i == 0 && is_prime(i)) {\n            largest <- i\n        }\n        i\
    \ <- i + 1\n    }\n    return(largest)\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n",
  "\n    factorization <- factor(n)\n    primes <- factorization[which(isPrime(factorization))]\n\
    \    return(max(primes))\n}\n\nlargest_prime_factor(13195)\n", "\n    # use c(2:n)\
    \ if n is large\n    seq <- c(2:n)\n    p <- 2\n    # loop until the number is\
    \ 1\n    while (n != 1) {\n        # if n % p is 0, n is divisible by p\n    \
    \    if (n %% p == 0) {\n            # divide n by p\n            n <- n %/% p\n\
    \        } else {\n            # check the next number in the sequence\n     \
    \       p <- p + 1\n        }\n    }\n    # return the last prime\n    return(p)\n\
    }\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))\n", "\n\
    \  # Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \  if (is.prime(n)) {\n    return(n)\n  } else {\n    # Get all possible prime\
    \ factors.\n    pfs <- prime_factors(n)\n    # Return the largest.\n    return(pfs[length(pfs)])\n\
    \  }\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n  # YOUR\
    \ CODE HERE\n  answer <- 0\n  for (i in seq(2,n)){\n    if (is_prime(i) && n%%i\
    \ == 0){\n      answer <- i\n    }\n  }\n  return(answer)\n}\n", "\n  l <- length(s\
    \ <- .Primitive(\"divisors\")(n))\n  if (l == 2) return(n)\n  f <- s[l - 1]\n\
    \  if (f == 2) return(largest_prime_factor(n / f))\n  2 * largest_prime_factor(n\
    \ / f)\n}\nlargest_prime_factor(600851475143)", "\n  factors <- factor(n)\n  factors[length(factors)]\n\
    }", "\n  f <- factor(n)\n  g <- grep(\"^[0-9]+$\", f, invert = TRUE)\n  max(as.numeric(gsub(\"\
    \\\\*\", \"\", f[g])))\n}\n\nlargest_prime_factor(13195)", "\n  if (is.prime(n))\
    \ {\n    n\n  } else {\n    k <- n\n    while (!is.prime(k)) {\n      for (p in\
    \ seq(2, n)) {\n        if (is.prime(p) && n %% p == 0) {\n          k <- p\n\
    \          break\n        }\n      }\n      n <- n / k\n    }\n    k\n  }\n}\n\
    \nlargest_prime_factor(13195)\n\nlargest_prime_factor(2048)\n\nlargest_prime_factor(600851475143)\n",
  "\n  i <- 2\n  # keep dividing n by i until n can no longer be divided by i\n  while\
    \ (n %% i != 0) {\n    i <- i + 1\n  }\n  # check if n is now prime\n  if (is_prime(n))\
    \ {\n    return(n)\n  } else {\n    return(largest_prime_factor(n / i))\n  }\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n  factor <- 2\n  while (n > 1)\
    \ {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n      factor\
    \ <- factor + 1\n    }\n  }\n  factor\n}\nlargest_prime_factor(600851475143)\n",
  "\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n / i\n    }\
    \ else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n\nlargest_prime_factor(13195)\n\
    largest_prime_factor(2048)\n", "\n  factors <- factor(n)\n  factors <- unlist(factors)\n\
    \  num_prime_factors <- length(factors) - 1\n  ind <- which(factors == max(factors))\
    \ - 1\n  return(factors[ind])\n}\nn <- rnorm(100)\ns <- sd(n)\ns\n", "\n  i <-\
    \ 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n / i\n    } else {\n\
    \      i <- i + 1\n    }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n    factor(n)\n}\n", "\n  p <- 2\n  while (n > 1) {\n    if (n %% p == 0) {\n\
    \      n <- n %/% p\n    } else {\n      p <- p + 1\n    }\n  }\n  p\n}\nlargest_prime_factor(600851475143)\n",
  "\n  prime_factors <- function(n) {\n    i <- 2\n    factors <- list()\n    while\
    \ (i * i <= n) {\n      if (n %% i) {\n        i <- i + 1\n      } else {\n  \
    \      n <- n / i\n        factors <- c(factors, i)\n      }\n    }\n    if (n\
    \ > 1)\n      factors <- c(factors, n)\n    factors\n  }\n  return(max(prime_factors(n)))\n\
    }\n", "\n  x <- n\n  while (x > 1) {\n    if (n%%x == 0) {\n      break\n    }\n\
    \    x <- x - 1\n  }\n  return(x)\n}\n", "\n    if(n %% 2 == 0) n <- n / 2\n \
    \   factor <- 3\n    while(n > 1) {\n        if(n %% factor == 0) {\n        \
    \    n <- n / factor\n        } else {\n            factor <- factor + 2\n   \
    \     }\n    }\n    factor\n}\nlargest_prime_factor(600851475143)\n", "\n    prime_factors(n)[length(prime_factors(n))]\n\
    }\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n  return(max(factor(n)))\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n    # YOUR CODE HERE\n}\n", "\n\
    \    if(is.prime(n)) {\n        return(n)\n    } else {\n        # get all factors\
    \ of n\n        factors <- factorize(n)\n        # get all primes\n        primes\
    \ <- lapply(factors, is.prime)\n        # return the last TRUE element\n     \
    \   return(factors[which(primes)][length(primes)])\n    }\n}\nlargest_prime_factor(13195)\n\
    largest_prime_factor(2048)\n", "\n  # YOUR CODE HERE\n  return(NULL)\n}\n", "\n\
    \  # your code here\n  if (is.prime(n)) {\n    return(n)\n  } else {\n    for\
    \ (i in 2:n) {\n      if (is.prime(i) && n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\nlargest_prime_factor(13195)\n\nlargest_prime_factor(2048)\n\
    \nlargest_prime_factor(600851475143)\n", "\n  # TODO: compute the largest prime\
    \ factor of n\n  factor <- n\n  while (factor > 1) {\n    i <- 2\n    while ((i\
    \ <= factor) && (factor %% i != 0)) {\n      i <- i + 1\n    }\n    if (i < factor)\
    \ {\n      factor <- factor / i\n    } else {\n      return(factor)\n    }\n \
    \ }\n}", "\n  # TODO\n}", "\n\tlargest <- 0\n\tdivisor <- 2\n\tloop {\n\t\tif\
    \ (divisor > n) break\n\t\tif (n %% divisor == 0) {\n\t\t\tn <- n / divisor\n\t\
    \t\tlargest <- divisor\n\t\t} else {\n\t\t\tdivisor <- divisor + 1\n\t\t}\n\t\
    }\n\tlargest\n}\n", "\n  max(n[n %% 1:n == 0 & is.prime(n)])\n}\n", "\n  largest_prime_factor_helper(n,\
    \ 2)\n}\n\nlargest_prime_factor_helper <- function(n, divisor) {\n  if (n == divisor)\
    \ {\n    n\n  } else if (mod(n, divisor) == 0) {\n    largest_prime_factor_helper(n\
    \ / divisor, divisor)\n  } else {\n    largest_prime_factor_helper(n, divisor\
    \ + 1)\n  }\n}\n", "\n  # YOUR CODE HERE\n  #\n  # NOTE: To ensure correctness,\
    \ you will want to perform the Sieve of\n  # Eratosthenes algorithm, which is\
    \ a method of finding all prime numbers\n  # up to a certain number n.\n  #\n\
    \  # >>> sieve <- function(n) {\n  # ...   primes <- rep(FALSE, n)\n  # ...  \
    \ primes[1] <- TRUE\n  # ...   for (p in seq(2, n)) {\n  # ...     if (!primes[p])\
    \ {\n  # ...       primes[seq(2*p, n, p)] <- TRUE\n  # ...     }\n  # ...   }\n\
    \  # ...   return(which(!primes))\n  # ... }\n  # >>> sieve(100)\n  #  [1]  2\
    \  3  5  7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n  #\
    \ You can then test to see if your result is correct by running:\n  # >>> isCorrect()\n\
    \  #\n  # There are a lot of test cases, so you may want to test your result\n\
    \  # by hand.\n  #\n  # Examples:\n  # n = 13195 returns 29\n  # n = 20480 returns\
    \ 2\n}", "\n  if (is_prime(n)) {\n    return(n)\n  }\n  else {\n    next_factor\
    \ <- 2\n    while (n % next_factor != 0) {\n      next_factor <- next_factor +\
    \ 1\n    }\n    return(largest_prime_factor(n / next_factor))\n  }\n}\n \nlargest_prime_factor(600851475143)\n",
  "\n  for (factor in rev(2:n)) {\n    if (n %% factor == 0 && is_prime(factor)) {\n\
    \      return(factor)\n    }\n  }\n}\n", "\n    # Your code here.\n    factors\
    \ <- prime_factors(n)\n    max(factors)\n}\n", "\n  ## Your code here\n}", "\n\
    \  factors <- factor(n)\n  factors[nchar(factors)]\n}\n", "\n    if (is_prime(n))\
    \ {\n        return(n)\n    } else {\n        # TODO: Implement this.\n      \
    \  # Here are some hints:\n        # - Prime factors come in pairs (a, b).\n \
    \       # - Let's say the smaller factor of (a, b) is a.\n        # - Then, n\
    \ = a * b.\n        # - Try to find this a.\n        # - a must be a prime.\n\
    \        # - You'll need to try out all a until you find it.\n        # - (1,\
    \ n) is a solution, but is not what we're looking for.\n        # - Instead, we\
    \ should stop at sqrt(n) because a > sqrt(n) is\n        #   impossible since\
    \ n = a * b.\n        # - This gives you the upper bound for a.\n        # - a\
    \ must be a divisor of n.\n        # - This gives you the lower bound for a.\n\
    \        # - The code to implement this looks like a for loop.\n        for (i\
    \ in seq(2, floor(sqrt(n)))) {\n            if (n %% i == 0) {\n             \
    \   b <- n / i\n                if (is_prime(b)) {\n                    return(b)\n\
    \                }\n            }\n        }\n    }\n}", "\n    largest_factor(n)\n\
    }\n", "\n  for (i in seq(2, n - 1)) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n  return(n)\n}\nlargest_prime_factor(600851475143)\n", "\n\t\
    max <- 0\n\ti <- 2\n\twhile (i <= n) {\n\t\tif (n %% i == 0) {\n\t\t\tmax <- i\n\
    \t\t\tn <- n %/% i\n\t\t} else {\n\t\t\ti <- i + 1\n\t\t}\n\t}\n\treturn(max)\n\
    }\n", "\n  a <- 2\n  while (n > 1) {\n    if (n %% a == 0) {\n      while (n %%\
    \ a == 0) {\n        n <- n / a\n      }\n    }\n    a <- a + 1\n  }\n  return(a\
    \ - 1)\n}\n", "\n  get_factors <- function(n) {\n    # Return a vector of factors\
    \ of n.\n    x <- as.integer(sqrt(n))\n    v <- rep(0, x)\n    k <- 1\n    for\
    \ (i in 1:x) {\n      if (n %% i == 0) {\n        v[k] <- i\n        k <- k +\
    \ 1\n      }\n    }\n    return(v[1:(k - 1)])\n  }\n  factors <- get_factors(n)\n\
    \  i <- 1\n  while (i <= length(factors)) {\n    j <- 1\n    while (j <= length(factors))\
    \ {\n      if (factors[i] == factors[j]) {\n        factors <- factors[-j]\n \
    \     }\n      j <- j + 1\n    }\n    i <- i + 1\n  }\n  return(factors[1])\n\
    }\n", "\n  x <- 2\n  while (n %% x) {\n    x <- x + 1\n  }\n  n / x\n}\nlargest_prime_factor(13195)",
  "\n    k <- floor(sqrt(n))\n    while (k > 1) {\n        if (n %% k == 0 && is_prime(k))\
    \ {\n            return(k)\n        }\n        k <- k - 1\n    }\n}\nlargest_prime_factor(13195)\n",
  "\n\treturn (largest_prime_factor_helper(n, 2))\n}\n\nlargest_prime_factor_helper\
    \ <- function(n, i) {\n\tif (n == i) {\n\t\treturn (n)\n\t} else if (is_prime(i)\
    \ && n %% i == 0) {\n\t\treturn (largest_prime_factor_helper(n / i, i))\n\t} else\
    \ {\n\t\treturn (largest_prime_factor_helper(n, i + 1))\n\t}\n}\n", "\n  for (i\
    \ in seq(from = 2, to = n)) {\n    if (is_prime(i) && n %% i == 0) {\n      return(i)\n\
    \    }\n  }\n}\n", "\n  if(is_prime(n)) {\n    return(n)\n  }\n  x <- seq(2, ceiling(sqrt(n)))\n\
    \  x <- x[(n %% x == 0) & is_prime(x)]\n  return(max(x))\n}\n", "\n    factors\
    \ <- factorize(n)\n    return(factors[max(which(factors > 1))])\n}\n", "\n  #\
    \ Your code here\n}", "\n\tfor (k in seq(2, (n / 2), by = 1)) {\n\t\tif (n %%\
    \ k == 0) {\n\t\t\treturn(largest_prime_factor(n / k))\n\t\t}\n\t}\n\tn\n}\n",
  "\n  y <- sqrt(n)\n  if(n %% 2 == 0) {\n    y <- y / 2\n  }\n  i <- 3\n  while(i\
    \ <= y) {\n    if(n %% i == 0) {\n      n <- n / i\n      y <- sqrt(n)\n    }\n\
    \    i <- i + 2\n  }\n  return(n)\n}\n\nlargest_prime_factor(13195)\nlargest_prime_factor(600851475143)\n",
  "\n    curr_prime <- 2\n    last_prime <- 1\n    while (n > 1) {\n        while\
    \ (n %% curr_prime == 0) {\n            n <- n / curr_prime\n            last_prime\
    \ <- curr_prime\n        }\n        curr_prime <- curr_prime + 1\n    }\n    return(last_prime)\n\
    }\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n  factor(n)\n\
    }\n", "\n  stopifnot(n > 1)\n  if (n == 2) return(2)\n  for (factor in seq(2,\
    \ n, 2)) {\n    if (n %% factor == 0) {\n      n <- n %/% factor\n      if (n\
    \ == 1) return(factor)\n    }\n  }\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n",
  "\n    # your code here\n    prime_factor <- function(n) {\n        if(n == 1)\n\
    \            return(n)\n        for(i in 2:n) {\n            if(n%%i == 0) {\n\
    \                return(c(i, prime_factor(n/i)))\n            }\n        }\n \
    \   }\n    prime_factor(n)\n}\n", "\n  check.positive.integer(n)\n  check.prime(n)\n\
    \  prime_factor <- primes(sqrt(n))[primes(sqrt(n)) < n]\n  n %/% prime_factor[-1]\n\
    }\nlargest_prime_factor(2048)\n", "\n    for (i in 2:n) {\n        if (n %% i\
    \ == 0) {\n            if (i == n) {\n                return(i)\n            }\
    \ else {\n                return(largest_prime_factor(n/i))\n            }\n \
    \       }\n    }\n}\n \nlarge_factor <- largest_prime_factor(600851475143)\nprint(large_factor)\n",
  "\n  if (is_prime(n)) {\n    return(n)\n  }\n  primes <- as.integer(sieve_of_eratosthenes(n))\n\
    \  return(tail(primes[primes<n], 1))\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  # ...\n}\n", "\n  largest_prime_factor <- function(n, candidate) {\n \
    \   if (is_prime(n)) {\n      return(n)\n    }\n    if (candidate > floor(sqrt(n)))\
    \ {\n      return(n)\n    }\n    if (n %% candidate == 0) {\n      return(largest_prime_factor(n\
    \ / candidate, candidate))\n    }\n    else {\n      return(largest_prime_factor(n,\
    \ candidate + 1))\n    }\n  }\n  largest_prime_factor(n, 2)\n}\nlargest_prime_factor(13195)\n\
    largest_prime_factor(2048)\nlargest_prime_factor(600851475143)\n ", "\n    if\
    \ (is.prime(n)) {\n        return(n)\n    } else {\n        factors <- unique(prime_factors(n))\n\
    \        return(factors[length(factors)])\n    }\n}\n", "\n  # Your code here\n\
    }\n", "\n  largest_prime_factor_helper(n, 2)\n}\nlargest_prime_factor_helper <-\
    \ function(n, d) {\n  if (n == d) {\n    return(n)\n  }\n  if (n %% d == 0) {\n\
    \    return(largest_prime_factor_helper(n / d, d))\n  }\n  else {\n    return(largest_prime_factor_helper(n,\
    \ d + 1))\n  }\n}\n", "\n  #...\n}", "\n    # YOUR CODE HERE\n    divisor <- 2\n\
    \    while (divisor < n) {\n        if (n %% divisor == 0) {\n            n <-\
    \ n / divisor\n        } else {\n            divisor <- divisor + 1\n        }\n\
    \    }\n    n\n}\n ", "\n  #if n is even, cut it in half and return the largest\
    \ prime factor of that\n  if (n %% 2 == 0) {\n    return(largest_prime_factor(n/2))\n\
    \  } else {\n    #otherwise, find the smallest odd integer greater than 1 and\
    \ less than n that divides n\n    i <- 3\n    while(n %% i != 0) {\n      i <-\
    \ i + 2\n    }\n    #and return the largest prime factor of that\n    return(largest_prime_factor(n/i))\n\
    \  }\n}\n", "\n  factors <- factor(n)\n  factors[length(factors)]\n}", "\n   \
    \ \n    last <- n / 2\n    last_factor <- 1\n    \n    while (last > 1) {\n  \
    \      if (n %% last == 0) {\n            for (i in last:2) {\n              \
    \  if (last %% i == 0) {\n                    if (i != last) {\n             \
    \           break\n                    } else {\n                        last_factor\
    \ <- last\n                        break\n                    }\n            \
    \    }\n            }\n        }\n        last <- last - 1\n    }\n    \n    return(last_factor)\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n  x <- 2\n  while (n > 1) {\n \
    \   if (n %% x == 0) {\n      n <- n / x\n    } else {\n      x <- x + 1\n   \
    \ }\n  }\n  x\n}\n", "\n  while (n %% 2 == 0) { n <- n / 2 }\n  factor <- 3\n\
    \  while (n > 1) {\n    while (n %% factor == 0) { n <- n / factor }\n    factor\
    \ <- factor + 2\n  }\n  factor - 2\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    divisor <- factor(n)[1]\n    largest_prime_factor(n/divisor)\n\
    \  }\n}\nlargest_prime_factor(600851475143)\n", "\n  # Ensure that the input is\
    \ of the expected type\n  if (!(is.numeric(n) && n > 1)) {\n    stop(\"The input\
    \ must be a numeric number larger than 1.\")\n  }\n  # Find all prime factors\
    \ of n\n  pf <- prime_factors(n)\n  # Get the last element of the vector\n  return(pf[length(pf)])\n\
    }\n", "\n    factors <- c()\n    d <- 2\n    while (n > 1) {\n        while (n\
    \ %% d == 0) {\n            factors <- c(factors, d)\n            n <- n / d\n\
    \        }\n        d <- d + 1\n    }\n    max(factors)\n}\n", "\n  if (is.prime(n))\
    \ {\n    return(n)\n  }\n  else {\n    # find the first divisor\n    divisor <-\
    \ divisors(n)[1]\n    return(largest_prime_factor(n / divisor))\n  }\n}\n", "\n\
    \    i <- 2\n    while (i < n) {\n        if (n %% i == 0) {\n            n <-\
    \ n %/% i\n        } else {\n            i <- i + 1\n        }\n    }\n    return(n)\n\
    }\n\nlargest_prime_factor(2048)\n", "\n    prime_factors <- function(n) {\n  \
    \      divisors <- seq(2, n - 1)\n        divisors <- divisors[n %% divisors ==\
    \ 0]\n        which(divisors %in% is_prime(divisors))\n    }\n    max(prime_factors(n))\n\
    }\n", "\n  prime_factors <- function(n, factors = c()) {\n    potential_factor\
    \ <- 2\n    largest_factor <- n\n    while (potential_factor < largest_factor)\
    \ {\n      if (largest_factor %% potential_factor == 0) {\n        largest_factor\
    \ <- largest_factor / potential_factor\n        factors <- c(factors, potential_factor)\n\
    \      } else {\n        potential_factor <- potential_factor + 1\n      }\n \
    \   }\n    return(factors)\n  }\n  all_factors <- prime_factors(n)\n  return(all_factors[length(all_factors)])\n\
    }\n", "\n   factors <- factor(n)\n   factors[length(factors)]\n}", "\n    return(0)\n\
    }\n", "\n    max(primes_upto(floor(sqrt(n)))[n %% primes_upto(floor(sqrt(n)))\
    \ == 0])\n}\n", "\n  factors <- factor(n)\n  factors[which.max(factors)]\n}\n",
  "\n  factors <- function(n) {\n    prime_factors <- function(n) {\n      result\
    \ <- 1\n      if (is.prime(n)) {\n        result <- n\n      } else {\n      \
    \  for (i in 2:n) {\n          if (is.prime(i) && n %% i == 0) {\n           \
    \ result <- i\n            break\n          }\n        }\n      }\n      result\n\
    \    }\n    result <- c()\n    while (n > 1) {\n      result <- c(result, prime_factors(n))\n\
    \      n <- n / prime_factors(n)\n    }\n    result\n  }\n  factors(n)[length(factors(n))]\n\
    }\n", "\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n / i\n\
    \    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}", "\n  x <- 2\n  while\
    \ (n %% x != 0) {\n    x <- x + 1\n  }\n  if (n > x) {\n    largest_prime_factor(n\
    \ / x)\n  } else {\n    n\n  }\n}", "\n  factors <- c()\n  for (i in 2:n) {\n\
    \    if (n %% i == 0) {\n      factors <- c(factors, i)\n    }\n  }\n  lapply(factors,\
    \ function(x) {\n    prime <- TRUE\n    for (i in 2:x) {\n      if (x %% i ==\
    \ 0) {\n        prime <- FALSE\n      }\n    }\n    if (prime) {\n      return(x)\n\
    \    }\n  })\n}\n\n", "\n\tlargest_prime <- 1\n\t# prime_factors <- NULL\n\twhile\
    \ (n > 1) {\n\t\t# print(n)\n\t\tdiv <- 2\n\t\twhile (div <= n & n %% div != 0)\
    \ {\n\t\t\tdiv <- div + 1\n\t\t}\n\t\t# largest_prime <- div\n\t\tif (div > largest_prime)\
    \ {\n\t\t\tlargest_prime <- div\n\t\t}\n\t\tn <- n %/% div\n\t}\n\t# print(prime_factors)\n\
    \tlargest_prime\n}\n", "\n    for (i in seq(2, n, 1)) {\n        if (is_prime(i)\
    \ && n %% i == 0) {\n            n <- n / i\n        }\n    }\n    return(n)\n\
    }\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n    last_div\
    \ <- trunc(sqrt(n))\n    while(!is.na(n%%last_div)) {\n        last_div <- last_div\
    \ - 1\n    }\n    if(last_div < 2) {\n        n\n    } else {\n        largest_prime_factor(n\
    \ / last_div)\n    }\n}\n", "\n  # YOUR CODE HERE\n  factor(n)\n}\ntest_that(\"\
    largest_prime_factor() works\", {\n  expect_equal(largest_prime_factor(13195),\
    \ 29)\n  expect_equal(largest_prime_factor(2048), 2)\n})", "\n  largest_prime_factor_helper(n,\
    \ n)\n}\n\nlargest_prime_factor_helper <- function(n, a) {\n  if (n == 1) {\n\
    \    return(1)\n  }\n  else if (a == 1) {\n    return(n)\n  }\n  else if (n %%\
    \ a == 0) {\n    return(largest_prime_factor_helper(n / a, a))\n  }\n  else {\n\
    \    return(largest_prime_factor_helper(n, a - 1))\n  }\n}", "\n  if (is.prime(n))\
    \ stop('n must not be prime')\n  largest_prime_factor_recur(n, 2)\n}\n\nlargest_prime_factor_recur\
    \ <- function(n, p) {\n  if (n == 1) {\n    return(p)\n  } else if (is.prime(n))\
    \ {\n    return(n)\n  } else if (n %% p == 0) {\n    return(largest_prime_factor_recur(n\
    \ / p, p))\n  } else {\n    return(largest_prime_factor_recur(n, next_prime(p)))\n\
    \  }\n}\n\n", "\n    # Your code here\n}\n\"\n\ntest_run() {\n    for s in ${!test_cases[@]};\
    \ do\n        sed -e \"/^#/d\" -e \"/^\\s*$/d\" -e \"s/^/$s/\" -e \"s/^/\\t/\"\
    \ <<< \"${test_cases[$s]}\"\n    done\n}\n\ntest_run | while read -r t; do\n \
    \   if [[ \"$t\" =~ ^[0-9]+$ ]]; then\n        echo -e \"\\n### $t: ${test_descriptions[$t]}\"\
    \n    else\n        res=\"$(R -q -e \"$t\")\"\n        echo \"$res\"\n    fi\n\
    done", "\n  prime_factors <- c()\n  for (i in 2:n) {\n    if (n %% i == 0) {\n\
    \      # print(i)\n      is_prime <- TRUE\n      for (j in 2:i) {\n        if\
    \ (i %% j == 0 & j != i) {\n          is_prime <- FALSE\n        }\n      }\n\
    \      if (is_prime) {\n        prime_factors <- c(prime_factors, i)\n      }\n\
    \    }\n  }\n  max(prime_factors)\n}\n\nlargest_prime_factor(13195)\nlargest_prime_factor(600851475143)\n",
  "\n    largest_prime_factor_helper(n, 2)\n}\n\nlargest_prime_factor_helper <- function(n,\
    \ i) {\n    if (n % i == 0) {\n        if (is_prime(n/i)) {\n            return(n/i)\n\
    \        } else {\n            return(largest_prime_factor_helper(n/i, i))\n \
    \       }\n    } else {\n        return(largest_prime_factor_helper(n, i+1))\n\
    \    }\n}\nlargest_prime_factor(13195)\n\nlargest_prime_factor(600851475143)\n",
  "\n    largest_prime_factor <- NULL\n    i <- 2\n    while (i * i <= n) {\n    \
    \    if (n %% i == 0) {\n            largest_prime_factor <- i\n            n\
    \ <- n / i\n        } else {\n            i <- i + 1\n        }\n    }\n    if\
    \ (n > 1) {\n        largest_prime_factor <- n\n    }\n    return(largest_prime_factor)\n\
    }", "\n  i <- 2\n  while (n > 1) {\n    if (n %% i == 0) {\n      n <- n %/% i\n\
    \    } else {\n      i <- i + 1\n    }\n  }\n  return(i)\n}\n", "\n  f <- 2\n\
    \  while (f <= n) {\n    if (n %% f == 0) {\n      n <- n / f\n    } else {\n\
    \      f <- f + 1\n    }\n  }\n  f\n}\n\nlargest_prime_factor(13195)\n", "\n \
    \   factors <- 2:n\n    prime_factors <- factors[n %% factors == 0]\n    prime_factors[length(prime_factors)]\n\
    }\n\nlargest_prime_factor(600851475143)\n ", "\n  factor(n)$prime[length(factor(n)$prime)]\n\
    }\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n  # FILL IN\
    \ CODE\n}\n", "\n    # YOUR CODE HERE\n    lpf <- 1\n    for (i in 2:n) {\n  \
    \      if (n %% i == 0) {\n            lpf <- i\n            if (lpf != n) {\n\
    \                n <- n / lpf\n            }\n        }\n    }\n    return(lpf)\n\
    }", "\n  # YOUR CODE HERE\n}\n", "\n  return(2)\n}\n", "\n  v <- 2\n  while (n\
    \ > 1) {\n    if (n %% v == 0) {\n      n <- n / v\n    } else {\n      v <- v\
    \ + 1\n    }\n  }\n  v\n}", "\n  # The largest possible factor of n is n/2 rounded\
    \ up.\n  for (i in ceiling(n/2):1) {\n    if (n %% i == 0) {\n      if (is.prime(i))\
    \ return(i)\n    }\n  }\n}\n\nlargest_prime_factor(n)\n", "\n    # YOUR CODE HERE\n\
    \    p <- 2\n    while (p * p <= n) {\n        if (n %% p == 0) {\n          \
    \  n <- n %/% p\n        } else {\n            p <- p + 1\n        }\n    }\n\
    \    return(n)\n}\n", "\n    factor(n)\n}\n", "\n    factors <- factor(n)\n  \
    \  factors[length(factors)]\n}\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n",
  "\n  for (p in primes(n)) {\n    if (n %% p == 0) {\n      return(p)\n    }\n  }\n\
    }\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\nlargest_prime_factor(600851475143)\n",
  "\n    if (n == 1) {\n        return(1)\n    }\n    for (i in (n:2)) {\n       \
    \ if (is.prime(i) && n %% i == 0) {\n            return(i)\n        }\n    }\n\
    }\n\ncat(largest_prime_factor(13195))\ncat(largest_prime_factor(2048))\n", "\n\
    \  primes <- seq_len(n)\n  primes <- primes[which(is.prime(primes))]\n  return(primes[which(n\
    \ %% primes == 0)][length(primes[which(n %% primes == 0)])])\n}\n", "\n  # TODO:\
    \ implement largest_prime_factor\n  return(NULL)\n}\n ", "\n    factors <- factor(n)\n\
    \    factors[length(factors)]\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n\
    \nlargest_prime_factor <- function(n) {\n    factors <- NULL\n    for (i in 1:n)\
    \ {\n        if (n %% i == 0) {\n            factors <- c(factors, i)\n      \
    \  }\n    }\n    factors[length(factors)]\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n\
    \nlargest_prime_factor <- function(n) {\n    i <- 2\n    while (n > 1) {\n   \
    \     if (n %% i == 0) {\n            n <- n %/% i\n        } else {\n       \
    \     i <- i + 1\n        }\n    }\n    i\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n\
    \nlargest_prime_factor <- function(n) {\n    i <- 1\n    while (n != 1) {\n  \
    \      i <- i + 1\n        if (is.prime(i) && n %% i == 0) {\n            n <-\
    \ n %/% i\n        }\n    }\n    i\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n\
    \nlargest_prime_factor <- function(n) {\n    i <- 1\n    while (n != 1) {\n  \
    \      i <- i + 1\n        if (is.prime(i) && n %% i == 0) {\n            n <-\
    \ n %/% i\n        }\n    }\n    i\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n",
  "\n  #### Your Code Here ####\n  for (i in 2:n) {\n    if (is.prime(i) & (n %% i\
    \ == 0)){\n      n <- n/i\n    }\n  }\n  return(n)\n  #### End of Code ####\n\
    }\n", "\n  factors <- factor(n)\n  factors <- unlist(factors)\n  print(factors)\n\
    \  # print(max(factors))\n  for (i in 1:length(factors)) {\n    if (is_prime(factors[i]))\
    \ {\n      p <- factors[i]\n    }\n  }\n  print(p)\n}\n\nlargest_prime_factor(13195)",
  "\n  stopifnot(n > 1)\n  # Factorize n.\n  fs <- factor(n)\n  # Find the largest\
    \ prime factor.\n  max(fs[is.prime(fs)])\n}\n", "\n  # We could write a whole\
    \ factorization algorithm, but the tidyverse\n  # has a function for it.\n  factors(n)\
    \ %>% head(1)\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n ",
  "\n    factor(n)[[length(factor(n))]]\n}", "\n  # Your code here.\n  if (is.prime(n))\
    \ {\n    return(n)\n  }\n  i = 2\n  while (i < sqrt(n)) {\n    if (n %% i == 0)\
    \ {\n      if (is.prime(n/i)) {\n        return(n/i)\n      }\n      if (is.prime(i))\
    \ {\n        return(i)\n      }\n    }\n    i = i + 1\n  }\n}\n", "\n  if (n <=\
    \ 1) {\n    stop(\"n must be greater than 1\")\n  }\n  prime <- 2\n  while(n >\
    \ 1) {\n    if (n %% prime == 0) {\n      n <- n %/% prime\n    } else {\n   \
    \   prime <- next_prime(prime)\n    }\n  }\n  prime\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  factor <- primes(n)[n %% primes(n) == 0]\n  return(max(factor))\n}\n", "\n\
    \  p <- 2\n  while (n > 1) {\n    if (is_prime(p) && n %% p == 0) {\n      n <-\
    \ n / p\n    } else {\n      p <- p + 1\n    }\n  }\n  return(p)\n}\n ", "\n \
    \ x <- 2\n  y <- n\n  while (x < y) {\n    if (y %% x == 0) {\n      y <- y /\
    \ x\n    } else {\n      x <- x + 1\n    }\n  }\n  return(y)\n}\n ", "\n    factors\
    \ <- factor(n)\n    as.integer(tail(factors, n=1))\n}\n\nfor (i in seq(1, 1000000,\
    \ by=1000)) {\n    isPrime(i)\n}\n\nfor (i in seq(1, 1000000, by=1000)) {\n  \
    \  largest_prime_factor(i)\n}", "\n  # YOUR CODE HERE\n  max(prime_factors(n))\n\
    }\nlargest_prime_factor(2048)\n", "\n    \n}\n", "\n  if(is.prime(n)) {\n    return(n)\n\
    \  } else {\n    for(i in seq(from = 2, to = ceiling(sqrt(n)))) {\n      if(n\
    \ %% i == 0 && is.prime(i)) {\n        return(largest_prime_factor(n / i))\n \
    \     }\n    }\n  }\n}\n\nlargest_prime_factor(2048)\n", "\n  for (i in 2:n) {\n\
    \    if (n %% i == 0) {\n      return(largest_prime_factor(n / i))\n    }\n  }\n\
    \  return(n)\n}\n\nlargest_prime_factor(13195)\n", "\n\ti <- 2\n\twhile (n > 1)\
    \ {\n\t\tif (n %% i == 0) {\n\t\t\tn <- n %/% i\n\t\t} else {\n\t\t\ti <- i +\
    \ 1\n\t\t}\n\t}\n\treturn(i)\n}\nlargest_prime_factor(600851475143)\n", "\n  if(is.prime(n))\n\
    \    return(n)\n  if(n %% 2 == 0)\n    return(largest_prime_factor(n / 2))\n \
    \ if(n %% 3 == 0)\n    return(largest_prime_factor(n / 3))\n  if(n %% 5 == 0)\n\
    \    return(largest_prime_factor(n / 5))\n  if(n %% 7 == 0)\n    return(largest_prime_factor(n\
    \ / 7))\n  if(n %% 11 == 0)\n    return(largest_prime_factor(n / 11))\n  return(largest_prime_factor(n\
    \ - 1))\n}\n", "\n    factors <- factor(n)\n    factors[length(factors)]\n}\n",
  "\n  ## fill in\n  factorization <- factor(n)\n  for (i in length(factorization):1)\
    \ {\n    if (factorization[i] == 1) {\n      return(factorization[i-1])\n    }\n\
    \  }\n  return(NA)\n}\nlargest_prime_factor(2048)\n", "\n    # Base case - the\
    \ number is prime\n    if (is_prime(n)) {\n        return(n)\n    }\n    # Get\
    \ the smallest prime factor of n\n    x <- min(factors(n))\n    # Recursively\
    \ get the largest prime factor of n/x\n    return(largest_prime_factor(n/x))\n\
    }\nprint(largest_prime_factor(600851475143))\n", "\n  x <- 2\n  while (x < n)\
    \ {\n    if (n %% x == 0) {\n      n <- n / x\n    } else {\n      x <- x + 1\n\
    \    }\n  }\n  return(n)\n}", "\n  if(is.prime(n))\n    return(n)\n  else{\n \
    \   x <- n\n    while(!is.prime(x)){\n      x <- x-1\n    }\n    return(x)\n \
    \ }\n}\n", "\n  i <- 2\n  while (i <= n) {\n    if (n %% i == 0) {\n      n <-\
    \ n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(i)\n}\nlargest_prime_factor(13195)\n\
    largest_prime_factor(2048)\n", "\n  # Sieve of Eratosthenes\n  primes <- vector(\"\
    logical\", length=n)\n  primes[1] <- TRUE\n\n  prime_factors <- integer(0)\n\n\
    \  i <- 2\n  while (i < n) {\n    if (!primes[i]) {\n      prime_factors <- c(prime_factors,\
    \ i)\n      j <- i\n      while (j < n) {\n        primes[j] <- TRUE\n       \
    \ j <- j + i\n      }\n    }\n    i <- i + 1\n  }\n\n  prime_factors\n}\n \nl\
    \ <- largest_prime_factor(600851475143)\ncat(\"Largest prime factor is \", max(l),\
    \ \"\\n\")\n", "\n  factors <- c()\n  for (i in 2:n) {\n    if (n %% i == 0) {\n\
    \      factors <- c(factors, i)\n    }\n  }\n  max(factors)\n}\n", "\n  if (is.prime(n))\
    \ {\n    n\n  } else {\n    largest_prime_factor(n/which(1:n %in% c(1,n) & n %%\
    \ 1:n == 0))\n  }\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n",
  "\n    if (n <= 1 || is_prime(n)) {\n        return(n)\n    }\n    # 1. List all\
    \ of the prime factors of n.\n    prime_factors <- factor(n)\n    # 2. Return\
    \ the largest prime factor.\n    max(prime_factors)\n}\n\nlargest_prime_factor(13195)\n\
    largest_prime_factor(2048)\n", "\n  for (i in 2:n) {\n    if (n%%i == 0) {\n \
    \     n <- n/i\n    }\n  }\n  return(n)\n}\n", "\n    max(filter(primes, n %%\
    \ primes == 0))\n}\n", "\n    n <- n\n    while (n %% 2 == 0) {\n        n <-\
    \ n / 2\n    }\n    if (n == 1) {\n        return(2)\n    }\n    p <- 3\n    while\
    \ (n != 1) {\n        while (n %% p == 0) {\n            n <- n / p\n        }\n\
    \        p <- p + 2\n    }\n    return(p - 2)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n    largest_factor <- function(n) {\n        for (i in 1:(n-1)) {\n         \
    \   if (n %% i == 0) {\n                return(i)\n            }\n        }\n\
    \    }\n    largest_factor(n)\n}\n\nlargest_prime_factor(9)\n", "\n    factor\
    \ <- 3\n    while (n > 1) {\n        if (n %% factor == 0) {\n            n <-\
    \ n / factor\n        } else {\n            factor <- factor + 2\n        }\n\
    \    }\n    return(factor)\n}\n ", "\n    if (is_prime(n)) {\n        return(n)\n\
    \    } else {\n        factor_list <- factor(n)\n        return(max(factor_list))\n\
    \    }\n}\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n", "\n \
    \ return (1)\n}\n", "\n  # YOUR CODE HERE\n  factors <- c()\n  for (i in 2:n)\
    \ {\n    if (n %% i == 0) {\n      factors <- c(factors, i)\n    }\n  }\n  prime_factors\
    \ <- c()\n  for (j in 1:length(factors)) {\n    if (is.prime(factors[j])) {\n\
    \      prime_factors <- c(prime_factors, factors[j])\n    }\n  }\n  return(max(prime_factors))\n\
    }\n \n", "\n    i <- 2\n    # divide n by i as long as it is even\n    while (i\
    \ < n) {\n        if (n %% i == 0) {\n            n <- n %/% i\n        } else\
    \ {\n            i <- i + 1\n        }\n    }\n    i\n}\nlargest_prime_factor(2048)\n",
  "\n    prime_factors <- numeric()\n    for (i in 2:n) {\n        if (is_prime(i)\
    \ & n %% i == 0) {\n            prime_factors <- c(prime_factors, i)\n       \
    \ }\n    }\n    return(max(prime_factors))\n}\nlargest_prime_factor(13195)\n\n\
    largest_prime_factor(600851475143)\n ", "\n  if (is.prime(n)) {\n    n\n  } else\
    \ {\n    for (i in seq(2, n)) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  x <- n\n  y <- 2\n  while (x > y) {\n    if (0\
    \ == x %% y) {\n      x <- x / y\n    } else {\n      y <- y + 1\n    }\n  }\n\
    \  x\n}\n\nlargest_prime_factor(600851475143)\n", "\n  lpf <- function(x, y) {\n\
    \    if (x == 1) {\n      return(y)\n    }\n    if (x %% y == 0) {\n      return(lpf(x\
    \ / y, y))\n    }\n    return(lpf(x, y + 1))\n  }\n  lpf(n, 2)\n}\n", "\n    factors\
    \ <- integer(0)\n    # Factor n down until it is no longer divisible by 2.\n \
    \   while (n %% 2 == 0) {\n        factors <- c(factors, 2)\n        n <- n /\
    \ 2\n    }\n    # Skip to odd factors, only testing up to the square root of n.\n\
    \    candidate <- 3\n    while (candidate <= sqrt(n)) {\n        while (n %% candidate\
    \ == 0) {\n            factors <- c(factors, candidate)\n            n <- n /\
    \ candidate\n        }\n        candidate <- candidate + 2\n    }\n    # If we've\
    \ got here, n is not divisible by any of the factors we've found.\n    # So it\
    \ must be prime itself.\n    factors <- c(factors, n)\n    return(max(factors))\n\
    }\nlargest_prime_factor(600851475143)\n", "\n  if(is.prime(n)) {\n    return(n)\n\
    \  } else {\n    last_prime_factor <- n\n    for(factor in seq(2, n/2)) {\n  \
    \    if(is.prime(factor) && n %% factor == 0) {\n        last_prime_factor <-\
    \ factor\n      }\n    }\n    return(last_prime_factor)\n  }\n}\n", "\n    # TODO:\
    \ Return the largest prime factor of n.\n    i = 2\n    while (n > 1) {\n    \
    \    if (n %% i == 0) {\n            n = n / i\n        } else {\n           \
    \ i = i + 1\n        }\n    }\n    return(i)\n}\n", "\n  stopifnot(n > 1, is.integer(n))\n\
    \  factor(n)[[2]]\n}\n", "\n    # YOUR CODE HERE\n    x <- 1\n    for (i in 1:n)\
    \ {\n        if (n %% i == 0) {\n            if (is_prime(i)) {\n            \
    \    x <- i\n            }\n        }\n    }\n    return(x)\n}\nlargest_prime_factor(2048)\n\
    \ ", "\n    factor <- 1\n    i <- 2\n    while (i < n) {\n        if (n %% i ==\
    \ 0) {\n            if (is_prime(i)) {\n                factor <- i\n        \
    \    }\n        }\n        i <- i + 1\n    }\n    return(factor)\n}\nlargest_prime_factor(13195)\n",
  "\n    largest <- 0\n    factors <- list()\n    for (i in 2:n) {\n        if (n\
    \ %% i == 0) {\n            factors <- c(factors, i)\n        }\n    }\n    for\
    \ (i in factors) {\n        if (is.prime(i)) {\n            largest <- i\n   \
    \     }\n    }\n    return(largest)\n}\n ", "\n    # We check all integers less\
    \ than or equal to n / 2 (if n is prime, we would have returned in the previous\
    \ check).\n    for (i in 1:(n/2)) {\n        # If i divides n, and i is prime\
    \ (do not forget to check i > 1), then i is a prime factor of n.\n        if (n\
    \ %% i == 0 && is_prime(i)) {\n            # Return i.\n            return(i)\n\
    \        }\n    }\n}\n \nlargest_prime_factor(13195)\n\nlargest_prime_factor(2048)\n\
    \ ", "\n    # >>> smallest_prime_factor(2048)\n    # 2\n    # >>> smallest_prime_factor(13195)\n\
    \    # 5\n    # >>> smallest_prime_factor(100)\n    # 5\n    smallest_prime_factor\
    \ <- function(n) {\n        # 2 is the only even prime number.\n        if (n\
    \ %% 2 == 0) return(2)\n        # >>> is_prime(12)\n        # False\n        #\
    \ >>> is_prime(13)\n        # True\n        is_prime <- function(n) {\n      \
    \      # >>> is_factor(12, 1)\n            # True\n            # >>> is_factor(12,\
    \ 2)\n            # True\n            # >>> is_factor(12, 3)\n            # True\n\
    \            # >>> is_factor(12, 4)\n            # True\n            # >>> is_factor(12,\
    \ 5)\n            # False\n            # >>> is_factor(12, 6)\n            # True\n\
    \            # >>> is_factor(12, 7)\n            # False\n            # >>> is_factor(12,\
    \ 8)\n            # False\n            # >>> is_factor(12, 9)\n            # False\n\
    \            # >>> is_factor(12, 10)\n            # False\n            # >>> is_factor(12,\
    \ 11)\n            # False\n            # >>> is_factor(12, 12)\n            #\
    \ True\n            is_factor <- function(n, f) {\n                n %% f == 0\n\
    \            }\n            # >>> is_prime(12)\n            # False\n        \
    \    # >>> is_prime(13)\n            # True\n            if (n == 1) return(FALSE)\n\
    \            if (n == 2) return(TRUE)\n            if (n %% 2 == 0) return(FALSE)\n\
    \            i <- 3\n            sqrt_n <- sqrt(n)\n            while (i <= sqrt_n)\
    \ {\n                if (is_factor(n, i)) return(FALSE)\n                i <-\
    \ i + 2\n            }\n            return(TRUE)\n        }\n        if (is_prime(n))\
    \ return(n)\n        i <- 3\n        sqrt_n <- sqrt(n)\n        while", "\n  if\
    \ (is.prime(n))\n    return(n)\n  f <- 2\n  while (f < n) {\n    if (n %% f ==\
    \ 0) {\n      n <- n / f\n      if (is.prime(n))\n        return(n)\n    } else\n\
    \      f <- f + 1\n  }\n}\n", "\n  prime <- function(x) {\n    for (i in seq(2,\
    \ floor(sqrt(x)))) {\n      if (x %% i == 0) {\n        return(FALSE)\n      }\n\
    \    }\n    return(TRUE)\n  }\n  x <- 2\n  while (x <= n) {\n    if (n %% x ==\
    \ 0 && prime(x)) {\n      return(x)\n    }\n    x <- x + 1\n  }\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n    p <- n/2\n    for (i in seq(1,p)) {\n        if (n %% i == 0) {\n       \
    \     if (i %% 2 == 0 || i %% 3 == 0 || i %% 5 == 0 || i %% 7 == 0) {\n      \
    \          return(i)\n            }\n        }\n    }\n}\n", "\n  # Given n, returns\
    \ the smallest prime factor of n.\n  smallest_prime_factor <- function(n) {\n\
    \    if (is_prime(n)) {\n      return(n)\n    } else {\n      # Go through all\
    \ the odd numbers from 3 to sqrt(n) and if n is\n      # evenly divisible by any\
    \ of them, that number is the smallest\n      # prime factor of n.\n      for\
    \ (i in seq(3, ceiling(sqrt(n)), 2)) {\n        if (n %% i == 0) {\n         \
    \ return(i)\n        }\n      }\n    }\n  }\n  # If n is the prime, the largest\
    \ prime factor is n. Otherwise, the\n  # largest prime factor is the largest prime\
    \ factor of the quotient of\n  # n and the smallest prime factor of n.\n  if (is_prime(n))\
    \ {\n    return(n)\n  } else {\n    return(largest_prime_factor(n / smallest_prime_factor(n)))\n\
    \  }\n}\n\nlargest_prime_factor(13195)", "\n  a <- 2\n  while (n > 1) {\n    if\
    \ (n %% a == 0) {\n      n <- n / a\n    } else {\n      a <- a + 1\n    }\n \
    \ }\n  return(a)\n}\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n",
  "\n  largest_prime_factor_helper(n, 2)\n}\nlargest_prime_factor_helper <- function(n,\
    \ factor) {\n  if (n <= 1) {\n    print(\"n is too small\")\n    return(-1)\n\
    \  }\n  if (is_prime(n)) {\n    return(n)\n  }\n  if (n %% factor == 0) {\n  \
    \  return(largest_prime_factor_helper(n/factor, factor))\n  } else {\n    return(largest_prime_factor_helper(n,\
    \ factor + 1))\n  }\n}\n", "\n  stopifnot(n > 1)\n  stopifnot(is.numeric(n))\n\
    \  stopifnot(!is.na(n))\n  stopifnot(!is.na(is_prime(n)))\n  stopifnot(!is_prime(n))\n\
    \  largest_prime_factor_recurse(n, 2)\n}\n\nlargest_prime_factor_recurse <- function(n,\
    \ i) {\n  if (i == n) {\n    return(i)\n  } else if (n %% i == 0) {\n    return(largest_prime_factor_recurse(n\
    \ / i, i))\n  } else {\n    return(largest_prime_factor_recurse(n, i + 1))\n \
    \ }\n}\n", "\n    a <- n\n    while(is.prime(a)==FALSE){\n        a <- largest_prime_factor_helper(a)\n\
    \    }\n    return(a)\n}\n\nlargest_prime_factor_helper <- function(n) {\n   \
    \ for (i in 2:n) {\n        if (n %% i == 0 && is.prime(i)) {\n            return(n/i)\n\
    \        }\n    }\n}\n", "\n  for (i in seq(2, floor(sqrt(n)))) {\n    if (n %%\
    \ i == 0 && is_prime(i)) {\n      return(i)\n    }\n  }\n}\n", "\n  # (Your solution\
    \ goes here)\n  return(NULL)\n}\n ", "\n  factor(n)[[1]]\n}\n", "\n  factors <-\
    \ c()\n  i <- 1\n  while (i < n) {\n    i <- i + 1\n    if (n %% i == 0) {\n \
    \     factors <- c(factors, i)\n    }\n  }\n  is_prime <- function(x) {\n    if\
    \ (x == 1) {\n      return(FALSE)\n    }\n    factors <- c()\n    i <- 1\n   \
    \ while (i < x) {\n      i <- i + 1\n      if (x %% i == 0) {\n        factors\
    \ <- c(factors, i)\n      }\n    }\n    if (length(factors) == 0) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  }\n  for (i in factors) {\n    if\
    \ (is_prime(i)) {\n      largest_prime <- i\n    }\n  }\n  return(largest_prime)\n\
    }\n", "\n  l <- largest_prime_factor_rec(n, 2)\n  l$val\n}\n\nlargest_prime_factor_rec\
    \ <- function(n, i) {\n  if (n % i == 0) {\n    if (is.prime(n / i)) {\n     \
    \ list(val = n / i, i = i)\n    } else {\n      largest_prime_factor_rec(n / i,\
    \ i)\n    }\n  } else {\n    largest_prime_factor_rec(n, i + 1)\n  }\n}\n\nif\
    \ (interactive()) {\n  n <- as.integer(readline(\"n: \"))\n  print(largest_prime_factor(n))\n\
    }\n", "\n  lpf <- lpf_helper(n, n - 1)\n  return(lpf)\n}\n", "\n    x <- factor(n)\n\
    \    as.numeric(x[length(x)])\n}\n\nlargest_prime_factor(13195)\n\nlargest_prime_factor(2048)\n",
  "\n    # Get a list of the factors of n\n    factors <- factor(n)\n    # The length\
    \ of the factors is the number of unique factors\n    # return the largest factor\n\
    \    return(factors[length(factors)])\n}", "\n\t# TODO: REPLACE THIS COMMENT WITH\
    \ YOUR CODE\n}\n", "\n  # If n is even, take out 2's until the result is odd.\n\
    \  while (n %% 2 == 0) {\n    n <- n / 2\n  }\n  # Try to take out 3's, etc. until\
    \ the result is prime.\n  factor <- 3\n  while (n > 1) {\n    if (n %% factor\
    \ == 0) {\n      n <- n / factor\n    } else {\n      factor <- factor + 2\n \
    \   }\n  }\n  factor\n}\n\nlargest_prime_factor(13195)\n", "\n    factor <- 2\n\
    \    while (n > 1) {\n        while (n %% factor == 0) {\n            n <- n/factor\n\
    \        }\n        factor <- factor + 1\n    }\n    return(factor-1)\n}\n", "\n\
    \  stopifnot(n > 1)\n  stopifnot(isPrime(n) == FALSE)\n  # sequence of prime numbers\n\
    \  primes <- c(2, 3, seq(5, n, 2))\n  # find the largest prime factor of n\n \
    \ primes[primes < n & n %% primes == 0][1]\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
