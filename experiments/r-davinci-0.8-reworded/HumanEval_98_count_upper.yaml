name: HumanEval_98_count_upper
language: r
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper('aBCdEf')\n# 1\n# >>> count_upper('abcdefg')\n\
  # 0\n# >>> count_upper('dBBE')\n# 0\ncount_upper <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- count_upper\n    if(!identical(candidate('aBCdEf'),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate('abcdefg'), 0)){quit('no', 1)}\n\
  \    if(!identical(candidate('dBBE'), 0)){quit('no', 1)}\n    if(!identical(candidate('B'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('U'), 1)){quit('no', 1)}\n   \
  \ if(!identical(candidate(''), 0)){quit('no', 1)}\n    if(!identical(candidate('EEEE'),\
  \ 2)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # remove all vowels in odd indices\n  s.vowels.evens <- gsub('([AEIOUaeiou])',\
    \ '', s, 2)\n  # remove all non-vowels\n  s.vowels.evens <- gsub('[^AEIOUaeiou]',\
    \ '', s.vowels.evens)\n  # count the number of vowels remaining\n  return(nchar(s.vowels.evens))\n\
    }\n", "\n    upper_even <- sapply(seq_along(s), function(i) {\n        if (i %%\
    \ 2 == 0) {\n            x <- toupper(substr(s, i, i))\n            grepl(\"A|E|I|O|U\"\
    , x)\n        }\n    })\n    sum(upper_even)\n}\n", "\n\tupper_vowels <- c(\"\
    A\", \"E\", \"I\", \"O\", \"U\")\n\tcount <- 0\n\tfor (i in 1:nchar(s)) {\n\t\t\
    if (i %% 2 == 0) {\n\t\t\tif (substr(s, i, i) %in% upper_vowels) {\n\t\t\t\tcount\
    \ <- count + 1\n\t\t\t}\n\t\t}\n\t}\n\tcount\n}\n", "\n  # Assume there are no\
    \ uppercase vowels in the string.\n  count <- 0\n  # Loop through the characters\
    \ in the string.\n  for (char in strsplit(s, '')[[1]]) {\n    # If it's an uppercase\
    \ vowel and in an even index, increment the count.\n    if (is.element(char, c('A',\
    \ 'E', 'I', 'O', 'U')) &&\n        is.element(match(char, strsplit(s, '')[[1]]),\
    \ c(2, 4, 6, 8))) {\n      count <- count + 1\n    }\n  }\n  # Return the count.\n\
    \  return(count)\n}\ncount_upper('aBCdEf')\ncount_upper('abcdefg')\ncount_upper('dBBE')\n",
  "\n    match(substr(toupper(s), seq(2, nchar(s), 2), seq(2, nchar(s), 2)), c(\"\
    A\", \"E\", \"I\", \"O\", \"U\"))\n}\ncount_upper(\"aBCdEf\")\ncount_upper(\"\
    abcdefg\")\ncount_upper(\"dBBE\")\n", "\n  x <- strsplit(s, \"\")\n  x <- x[[1]]\n\
    \  s <- sub(\"[aeiou]\", \" \", x, ignore.case = TRUE)\n  s <- sub(\"[^ ]\", \"\
    \", s)\n  nchar(s)\n}\n", "\n    counter = 0\n    for (i in seq(1, length(s),\
    \ 2)) {\n        if (s[i] %in% c(\"A\", \"E\", \"I\", \"O\", \"U\")) {\n     \
    \       counter = counter + 1\n        }\n    }\n    counter\n}", "\n  s <- gsub(\"\
    [^AEIOU]\", \"\", toupper(s))\n  return(sum(seq_along(s) %% 2 == 0))\n}\n", "\n\
    \  # Your code here\n  count <- 0\n  for (i in seq(1, length(s), 2)) {\n    if\
    \ (s[i] %in% c(\"A\", \"E\", \"I\", \"O\", \"U\")) {\n      count <- count + 1\n\
    \    }\n  }\n  return(count)\n}\ncount_upper('aBCdEf')\ncount_upper('abcdefg')\n\
    count_upper('dBBE')\n ", "\n  # ENTER YOUR CODE HERE\n}\n", "\n  # Your code here\n\
    }\n ", "\n  count(s, TRUE, function(ch) {\n    nchar(gsub(\"[aeiou]\", \"\", toupper(ch)))\
    \ == 0\n  })\n}\n", "\n  sum(s %in% c(\"A\", \"E\", \"I\", \"O\", \"U\") & seq_along(s)\
    \ %% 2 == 0)\n}\ncount_upper(\"aBCdEf\")\ncount_upper(\"abcdefg\")\ncount_upper(\"\
    dBBE\")", "\n    c(str_count(s, \"[AEIOU][A-Z]*\"))\n}\ncount_upper(\"My name\
    \ is Ekta\")\n", "\n  s <- strsplit(s, \"\")[[1]]\n  vowels <- c(\"A\", \"E\"\
    , \"I\", \"O\", \"U\")\n  vowel_indices <- which(s %in% vowels)\n  even_indices\
    \ <- vowel_indices[vowel_indices %% 2 == 0]\n  return(length(even_indices))\n\
    }\nprint(count_upper(\"aBCdEf\"))\nprint(count_upper(\"abcdefg\"))\nprint(count_upper(\"\
    dBBE\"))", "\n  vowels <- c(\"A\", \"E\", \"I\", \"O\", \"U\")\n  letters <- strsplit(s,\
    \ \"\")[[1]]\n  vowel_idx <- which(letters %in% vowels)\n  even_idx <- which(vowel_idx\
    \ %% 2 == 0)\n  upper_vowels <- letters[vowel_idx[even_idx]]\n  sum(upper_vowels\
    \ == toupper(upper_vowels))\n}\n", "\n  stringi::stri_count_regex(s, \"[AEIOU]\"\
    )\n}", "\n    count <- 0\n    vowels <- c(\"A\", \"E\", \"I\", \"O\", \"U\")\n\
    \    for (i in 1:nchar(s)) {\n        if (i %% 2 == 0) {\n            if (toupper(substr(s,\
    \ i, i)) %in% vowels) {\n                count <- count + 1\n            }\n \
    \       }\n    }\n    return(count)\n}\n\ncount_upper(\"aBCdEf\")\ncount_upper(\"\
    abcdefg\")\ncount_upper(\"dBBE\")\n", "\n  s <- strsplit(s, '')[[1]]\n  uppercase\
    \ <- c('A', 'E', 'I', 'O', 'U')\n  return(sum(s[seq(1, length(s), 2)] %in% uppercase))\n\
    }\n\ncount_upper('aBCdEf')\ncount_upper('abcdefg')\ncount_upper('dBBE')\n", "\n\
    \  s <- strsplit(s, \"\")[[1]]\n  return(sum(s %in% c(\"A\", \"E\", \"I\", \"\
    O\", \"U\") & seq_along(s) %% 2 == 0))\n}\n\ncount_upper(\"dBBE\")\n\n"]
stop_tokens:
- "\n#"
- "\n```"
