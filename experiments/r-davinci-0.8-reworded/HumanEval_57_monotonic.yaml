name: HumanEval_57_monotonic
language: r
prompt: "# Return TRUE is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic(c(1, 2, 4, 20))\n# TRUE\n# >>> monotonic(c(1, 20, 4, 10))\n# FALSE\n\
  # >>> monotonic(c(4, 1, 0, -10))\n# TRUE\nmonotonic <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- monotonic\n    if(!identical(candidate(c(1,\
  \ 2, 4, 10)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 4, 20)),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 20, 4, 10)), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(4, 1, 0, -10)), TRUE)){quit('no', 1)}\n   \
  \ if(!identical(candidate(c(4, 1, 1, 0)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 2, 3, 2, 5, 60)), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2,\
  \ 3, 4, 5, 60)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(9, 9, 9, 9)),\
  \ TRUE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  prev <- l[1]\n  for (i in l[2:length(l)]) {\n    if (prev * i <\
    \ 0) {\n      return(FALSE)\n    }\n    prev <- i\n  }\n  return(TRUE)\n}\n",
  "\n    # YOUR CODE HERE\n    is.monotonic <- function(vec) {\n        vec[-1] %>%\
    \ diff() %>% diff() %>% all() %>% all()\n    }\n    is.monotonic(l) | is.monotonic(-l)\n\
    }\n", "\n  if (length(l) == 1) {\n    return(TRUE)\n  } else {\n    if (l[1] >\
    \ l[2]) {\n      return(all(diff(l) <= 0))\n    } else {\n      return(all(diff(l)\
    \ >= 0))\n    }\n  }\n}\n", "\n  if (length(l) < 2) return(TRUE)\n  if (all(diff(l)\
    \ >= 0)) return(TRUE)\n  if (all(diff(l) <= 0)) return(TRUE)\n  return(FALSE)\n\
    }\n", "\n    if (length(l) <= 1) {\n        return(TRUE)\n    }\n    else {\n\
    \        diff <- l[2:length(l)] - l[1:(length(l) - 1)]\n        if (all(diff >\
    \ 0) || all(diff < 0)) {\n            return(TRUE)\n        }\n        else {\n\
    \            return(FALSE)\n        }\n    }\n}\n", "\n  match_inc <- any(l[-1]\
    \ > l[-length(l)])\n  match_dec <- any(l[-1] < l[-length(l)])\n  return(match_inc\
    \ || match_dec)\n}\n", "\n    if (length(l) < 2) return(TRUE)\n\n    if (l[1]\
    \ < l[2]) {\n        return(all(diff(l) >= 0))\n    } else {\n        return(all(diff(l)\
    \ <= 0))\n    }\n}", "\n  n <- length(l)\n  diff <- c(0, diff(l))\n  cumsum(diff)\
    \ == (n - 1) * min(diff) || cumsum(diff) == (n - 1) * max(diff)\n}\n", "\n   \
    \ n <- length(l)\n    for (i in 1:(n-1)) {\n        if (l[i] < l[i+1]) {\n   \
    \         inc <- TRUE\n            break\n        } else if (l[i] > l[i+1]) {\n\
    \            inc <- FALSE\n            break\n        }\n    }\n    if (is.null(inc))\n\
    \        return(TRUE)\n    for (i in 1:(n-1)) {\n        if (inc && l[i] > l[i+1])\n\
    \            return(FALSE)\n        if (!inc && l[i] < l[i+1])\n            return(FALSE)\n\
    \    }\n    return(TRUE)\n}\n", "\n  if (is.numeric(l)) {\n    return(all(diff(l)\
    \ >= 0) || all(diff(l) <= 0))\n  } else {\n    return(NULL)\n  }\n}\n", "\n  if\
    \ (length(l) <= 1) return(TRUE)\n  return(all(diff(l) >= 0) || all(diff(l) <=\
    \ 0))\n}\n", "\n  monotonic_inc <- function(l) {\n    res <- TRUE\n    for (i\
    \ in 2:length(l)) {\n      if (l[i] < l[i-1]) {\n        res <- FALSE\n      \
    \  break\n      }\n    }\n    res\n  }\n  monotonic_dec <- function(l) {\n   \
    \ res <- TRUE\n    for (i in 2:length(l)) {\n      if (l[i] > l[i-1]) {\n    \
    \    res <- FALSE\n        break\n      }\n    }\n    res\n  }\n  monotonic_inc(l)\
    \ || monotonic_dec(l)\n}\n", "\n    c(TRUE, diff(l)) %>% all(. == sign(l[1]))\n\
    }\n", "\n    # Write the code for this function.\n    if (length(l)==1){\n   \
    \     return(TRUE)\n    }\n    diff = diff(l)\n    for (val in diff){\n      \
    \  if (val==0){\n            return(FALSE)\n        }\n    }\n    if (all(diff\
    \ > 0) | all(diff < 0)){\n        return(TRUE)\n    }\n    return(FALSE)\n}",
  "\n    sig <- sign(diff(l))\n    return(!any(sig == 0) && sig[1] != 0)\n}", "\n\
    \    l[2:length(l)] - l[1:(length(l) - 1)] == sign(l[2:length(l)] - l[1])\n}\n",
  "\n  diffs <- sapply(l, diff)\n  all(diffs == 0 | diffs > 0 | diffs < 0)\n}\n",
  "\n\tif (length(l) < 2) {\n\t\treturn(TRUE)\n\t}\n\t\n\t# Find the first two adjacent\
    \ numbers that are different\n\tfor (i in 1:(length(l) - 1)) {\n\t\tif (sign(l[i]\
    \ - l[i + 1]) != 0) {\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\t# The list is constant,\
    \ so it's monotonic\n\tif (i == length(l)) {\n\t\treturn(TRUE)\n\t}\n\t\n\t# Extract\
    \ the sign of the first two different numbers\n\tsign <- sign(l[i] - l[i + 1])\n\
    \t\n\t# Check if all other numbers have the same sign\n\tfor (j in (i + 1):(length(l)\
    \ - 1)) {\n\t\tif (sign(l[j] - l[j + 1]) != sign) {\n\t\t\treturn(FALSE)\n\t\t\
    }\n\t}\n\t\n\treturn(TRUE)\n}\n", "\n  is_monotonic <- TRUE\n  for (i in 2:length(l))\
    \ {\n    # Check decreasing\n    if (l[i] < l[i-1]) {\n      for (j in i:length(l))\
    \ {\n        if (l[j] > l[j-1]) {\n          is_monotonic <- FALSE\n         \
    \ break\n        }\n      }\n      if (!is_monotonic) {\n        break\n     \
    \ }\n    }\n    # Check increasing\n    if (l[i] > l[i-1]) {\n      for (j in\
    \ i:length(l)) {\n        if (l[j] < l[j-1]) {\n          is_monotonic <- FALSE\n\
    \          break\n        }\n      }\n      if (!is_monotonic) {\n        break\n\
    \      }\n    }\n  }\n  return(is_monotonic)\n}\n", "\n  sign(diff(l)) == sign(l[1])\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
