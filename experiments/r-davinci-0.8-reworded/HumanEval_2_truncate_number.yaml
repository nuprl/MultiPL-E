name: HumanEval_2_truncate_number
language: r
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number(3.5)\n# 0.5\ntruncate_number <- function(number) {"
tests: "test_humaneval <- function() {\ncandidate <- truncate_number\n    if(!identical(candidate(3.5),\
  \ 0.5)){quit('no', 1)}\n    if(!identical(candidate(1.25), 0.25)){quit('no', 1)}\n\
  \    if(!identical(candidate(123.0), 0.0)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    return(number - floor(number))\n}\n", "\n    # Get the sign of\
    \ the number.\n    number_sign <- sign(number)\n    # Get the integer part.\n\
    \    number_integers <- floor(number)\n    # Take the absolute value for the decimal\
    \ part calculation.\n    number <- abs(number)\n    # Get the decimal part.\n\
    \    number_decimals <- number - number_integers\n    # Restore the sign.\n  \
    \  return(number_sign * number_decimals)\n}\n", "\n    # Round number to integer\n\
    \    integer_part <- round(number)\n    # Subtract integer part from number\n\
    \    decimal_part <- number - integer_part\n    # return\n    return(decimal_part)\n\
    }\n\ntruncate_number(3.5)\n", "\n  return (number - trunc(number))\n}", "\n  #\
    \ TODO\n}\n", "\n  # Complete this function\n}", "\n    num <- strsplit(as.character(number),\
    \ \"\\\\.\")[[1]]\n    decimal_part <- 0\n    if (length(num) > 1) {\n       \
    \ decimal_part <- as.numeric(paste0(\"0.\", num[2]))\n    }\n    return(decimal_part)\n\
    }\n", "\n  return (number - floor(number))\n}\n", "\n  # TODO: place your code\
    \ here\n}\n", "\n    return (number - floor(number))\n}\n", "\n    int_part <-\
    \ floor(number)\n    dec_part <- number - int_part\n    return(dec_part)\n}\n\
    truncate_number(5.5)\n", "\n    if (number > 0) {\n        return(number - floor(number))\n\
    \    } else {\n        return(number - ceiling(number))\n    }\n}\n", "\n  return\
    \ (number - floor(number))\n}\n", "\n  return(number %/% 1)\n}", "\n    if (number\
    \ < 0) {\n        stop(\"Number should be positive\")\n    }\n\n    number %>%\
    \ as.integer() %>% `-`(number)\n}\n", "\n  return(number - floor(number))\n}\n",
  "\n    # Your code here\n    return(number - floor(number))\n}\n", "\n    return(number\
    \ - trunc(number))\n}\n", "\n  ## <- YOUR CODE HERE\n  return (number-trunc(number))\n\
    }\n", "\n  number - trunc(number)\n}\n\ntruncate_number(3.5)\n"]
stop_tokens:
- "\n#"
- "\n```"
