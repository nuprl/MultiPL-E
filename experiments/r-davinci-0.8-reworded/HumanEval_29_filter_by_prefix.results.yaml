name: HumanEval_29_filter_by_prefix
language: r
results:
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    grep(sprintf('^%s', prefix), strings, value = TRUE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings[grep(sprintf('^%s', prefix), strings)]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    return(Filter(prefix_match(prefix), strings))\n}\nprefix_match\
    \ <- function(prefix) {\n    return(function(s) { return(prefix_match(s, prefix))\
    \ })\n}\nprefix_match <- function(s, prefix) {\n    return(substr(s, 1, nchar(prefix))\
    \ == prefix)\n}\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in nchar(prefix) : argument \"prefix\" is missing, with no default\\\
    nCalls: test_humaneval ... Filter -> match.fun -> prefix_match -> substr -> nchar\\\
    nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    strings[substr(strings, 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  matching_strings <- c()\n  for (string in strings) {\n    if (string\
    \ == '') {\n      break\n    }\n    if (substr(string, 1, 1) == prefix) {\n  \
    \    matching_strings <- c(matching_strings, string)\n    }\n  }\n  return(matching_strings)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  substring(x = strings, first = 1, last = nchar(prefix)) == prefix\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in substring(x = strings, first = 1, last = nchar(prefix)) : \\n\
    \  unused argument (x = strings)\\nCalls: test_humaneval -> identical -> candidate\\\
    nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    strings[substr(strings, 1, length(prefix)) == prefix]\n}\n\n\
    test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings[startsWith(strings, prefix)]\n}\ntest_humaneval <- function()\
    \ {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in startsWith(strings, prefix) : non-character object(s)\\nCalls:\
    \ test_humaneval -> identical -> candidate -> startsWith\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  target <- paste0('^', prefix)\n  return(strings[grep(target, strings)])\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  return(strings[grep(paste0('^', prefix), strings)])\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    to_keep <- strings[startsWith(strings, prefix)]\n    if (length(to_keep)\
    \ == 0) {\n        return(c())\n    }\n    return(to_keep)\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in startsWith(strings, prefix) : non-character object(s)\\nCalls:\
    \ test_humaneval -> identical -> candidate -> startsWith\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  grep(paste('^', prefix, sep=''), strings, value=TRUE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    return(strings[startsWith(strings, prefix)])\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in startsWith(strings, prefix) : non-character object(s)\\nCalls:\
    \ test_humaneval -> identical -> candidate -> startsWith\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings[str_detect(strings, paste0('^', prefix))]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in str_detect(strings, paste0(\"^\", prefix)) : \\n  could not find\
    \ function \"str_detect\"\\nCalls: test_humaneval -> identical -> candidate\\\
    nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  if (prefix == '') {\n    return(strings)\n  }\n  return(strings[(grepl(paste0('^',\
    \ prefix), strings))])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings[grepl(paste0('^', prefix), strings)]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings[grepl(paste0('^', prefix), strings)]\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  # Require some prefix\n  stopifnot(length(prefix) > 0)\n  # Filter\
    \ the input\n  regmatches(strings, regexpr(paste0('^', prefix), strings))\n}\n\
    test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    return(strings[startsWith(strings, prefix)])\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in startsWith(strings, prefix) : non-character object(s)\\nCalls:\
    \ test_humaneval -> identical -> candidate -> startsWith\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
