name: HumanEval_18_how_many_times
language: r
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
  \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\nhow_many_times <- function(string,\
  \ substring) {"
tests: "test_humaneval <- function() {\ncandidate <- how_many_times\n    if(!identical(candidate('',\
  \ 'x'), 0)){quit('no', 1)}\n    if(!identical(candidate('xyxyxyx', 'x'), 4)){quit('no',\
  \ 1)}\n    if(!identical(candidate('cacacacac', 'cac'), 4)){quit('no', 1)}\n   \
  \ if(!identical(candidate('john doe', 'john'), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    # YOUR CODE HERE\n    return (sum(nchar(gsub(substring,\"\",string))\
    \ < nchar(string)))\n}\n", "\n    gregexpr(substring, string)[[1]]\n}\n", "\n\
    \    if (string == '' | substring == '') {\n        return(0)\n    }\n    m <-\
    \ gregexpr(substring, string)\n    return(length(m[[1]]))\n}\n", "\n    # Write\
    \ the function here.\n    cnt=0\n    if(substring!=\"\"){\n        for(i in 1:nchar(string)){\n\
    \            if(substring == substr(string,i,i+nchar(substring)-1)){\n       \
    \         cnt=cnt+1\n            }\n        }\n    }\n    return(cnt)\n}\n", "\n\
    \  #TODO: Your code here\n  count = 0\n  loc = 1\n  while(loc>0){\n    loc = stringr::str_locate(string,\
    \ substring)[1]\n    if(loc>0){\n      count = count + 1\n      string = substr(string,\
    \ loc+1, nchar(string))\n    }\n  }\n  return(count)\n}\n ", "\n    stopifnot(is.character(string))\n\
    \    stopifnot(is.character(substring))\n    # 1. Paste code here.\n}\ntest_that('Test\
    \ how_many_times', {\n    expect_equal(how_many_times('', 'a'), 0)\n    expect_equal(how_many_times('aaa',\
    \ 'a'), 3)\n    expect_equal(how_many_times('aaaa', 'aa'), 3)\n})\n ", "\n  overlap\
    \ <- substr(string, 1, nchar(substring))\n  0\n}\n", "\n  nchar(gsub(substring,\
    \ '', string))\n}\n", "\n    count <- 0\n    while (substring %in% string) {\n\
    \        string <- string[-which(string == substring[1])]\n        count <- count\
    \ + 1\n    }\n    return(count)\n}\n", "\n  \n}\n\nprint('Testing how_many_times')\n\
    testthat::expect_equal(how_many_times('', 'a'), 0)\ntestthat::expect_equal(how_many_times('aaa',\
    \ 'a'), 3)\ntestthat::expect_equal(how_many_times('aaaa', 'aa'), 3)\n", "\n  if\
    \ (is.null(string) || is.null(substring))\n    return(0)\n  if (string == \"\"\
    \ || substring == \"\")\n    return(0)\n  if (nchar(substring) > nchar(string))\n\
    \    return(0)\n  if (nchar(substring) == nchar(string))\n    return(string ==\
    \ substring)\n  count <- 0\n  if (substring == substr(string, 1, nchar(substring)))\n\
    \    count <- count + 1\n  count <- count + how_many_times(substr(string, 2, nchar(string)),\
    \ substring)\n  return(count)\n}\n", "\n  count <- 0\n  string_pos <- 0\n  while(string_pos\
    \ < nchar(string)) {\n    substring_pos <- stringr::str_locate(string[string_pos\
    \ + 1], substring)\n    if(substring_pos[1] == -1) {\n      break\n    }\n   \
    \ string_pos <- string_pos + substring_pos[1]\n    count <- count + 1\n  }\n \
    \ return(count)\n}\n", "\n    string <- strsplit(string, split = \"\")[[1]]\n\
    \    substring <- strsplit(substring, split = \"\")[[1]]\n    n <- length(string)\n\
    \    m <- length(substring)\n    i <- 1\n    result <- 0\n    while (i <= n -\
    \ m + 1) {\n        if (all(string[i:(i + m - 1)] == substring)) {\n         \
    \   result <- result + 1\n            i <- i + m\n        } else {\n         \
    \   i <- i + 1\n        }\n    }\n    return(result)\n}\n\nprint(how_many_times('',\
    \ 'a'))\nprint(how_many_times('aaa', 'a'))\nprint(how_many_times('aaaa', 'aa'))\n",
  "\n    # TODO: Implement this.\n}\n ", "\n\tcount <- 0\n\tfor (i in 1:(nchar(string)\
    \ - nchar(substring) + 1)) {\n\t\tif (substring == substr(string, i, i + nchar(substring)\
    \ - 1)) {\n\t\t\tcount <- count + 1\n\t\t}\n\t}\n\tcount\n}\n\nprint(how_many_times('',\
    \ 'a'))\nprint(how_many_times('aaa', 'a'))\nprint(how_many_times('aaaa', 'aa'))\n",
  "\n    regex <- regex(substring, ignore_case = TRUE)\n    if (is.na(regex)) return(0)\n\
    \    return(length(str_extract_all(string, regex))[[1]])\n}\n", "\n  return(sum(gregexpr(substring,\
    \ string)[[1]] != -1))\n}\n", "\n    return (sum(gregexpr(substring, string)[[1]]\
    \ != -1))\n}\n", "\n  # substring_length <- nchar(substring)\n  # string_length\
    \ <- nchar(string)\n  #\n  # m <- matrix(0, string_length, substring_length)\n\
    \  # m[1, ] <- substring == string[1]\n  # for (i in 2:string_length) {\n  # \
    \  m[i, ] <- substring == string[i]\n  #   for (j in 1:(substring_length - 1))\
    \ {\n  #     m[i, j] <- m[i - 1, j + 1]\n  #   }\n  # }\n  #\n  # sum(m)\n  count\
    \ <- 0\n  for (i in 1:(nchar(string) - nchar(substring) + 1)) {\n    if (string[i]\
    \ == substring[1]) {\n      if (substring == substr(string, i, i + nchar(substring)\
    \ - 1)) {\n        count <- count + 1\n      }\n    }\n  }\n  count\n}\n", "\n\
    \    occ <- 0\n    for (i in seq(1, nchar(string) - nchar(substring))) {\n   \
    \     if (substring == substr(string, i, i + nchar(substring) - 1)) {\n      \
    \      occ <- occ + 1\n        }\n    }\n    return(occ)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
