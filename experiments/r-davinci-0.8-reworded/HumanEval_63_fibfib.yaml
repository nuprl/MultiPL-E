name: HumanEval_63_fibfib
language: r
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nfibfib <- function(n)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- fibfib\n    if(!identical(candidate(2),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(1), 0)){quit('no', 1)}\n    if(!identical(candidate(5),\
  \ 4)){quit('no', 1)}\n    if(!identical(candidate(8), 24)){quit('no', 1)}\n    if(!identical(candidate(10),\
  \ 81)){quit('no', 1)}\n    if(!identical(candidate(12), 274)){quit('no', 1)}\n \
  \   if(!identical(candidate(14), 927)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    if (n <= 2) {\n        return(n - 1)\n    } else {\n        return(fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3))\n    }\n}\n\nprint(fibfib(1))\nprint(fibfib(5))\n\
    print(fibfib(8))\n", "\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n  if\
    \ (n == 2) return(1)\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\nfibfib(5)\n",
  "\n  x1 <- 0\n  x2 <- 0\n  x3 <- 1\n  if (n==0) {\n    return(x1)\n  } else if (n==1)\
    \ {\n    return(x2)\n  } else if (n==2) {\n    return(x3)\n  } else {\n    for\
    \ (i in 1:n-3) {\n      x4 <- x1 + x2 + x3\n      x1 <- x2\n      x2 <- x3\n \
    \     x3 <- x4\n    }\n    return(x4)\n  }\n}\n", "\n  if (n == 0) {\n    return(0)\n\
    \  } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n\
    \    if (n == 0) return(0)\n    if (n == 1) return(0)\n    if (n == 2) return(1)\n\
    \    if (n == 3) return(1)\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\nfibfib(1)\nfibfib(5)\nfibfib(8)", "\n  if (n == 0) {\n    return(0)\n  } else\
    \ if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else\
    \ {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n  a <-\
    \ 0\n  b <- 0\n  c <- 1\n  for (i in 1:n) {\n    a <- b\n    b <- c\n    c <-\
    \ a + b + c\n  }\n  c\n}\n", "\n  if (n <= 1) return(0)\n  if (n == 2) return(1)\n\
    \  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\nfibfib(1)\n\nfibfib <-\
    \ function(n) {\n  fib <- c(0, 0, 1)\n  for (i in seq(4, n)) {\n    fib <- fib[2:3]\
    \ + fib[3]\n  }\n  return(fib[3])\n}\nfibfib(1)\n", "\n    if (n < 0) {\n    \
    \    return(-1)\n    }\n    else if (n == 0) {\n        return(0)\n    }\n   \
    \ else if (n == 1) {\n        return(0)\n    }\n    else if (n == 2) {\n     \
    \   return(1)\n    }\n    else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \    }\n}\n", "\n  if (n < 2) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n\
    \  if (n == 0) {\n    0\n  } else if (n == 1) {\n    0\n  } else if (n == 2) {\n\
    \    1\n  } else {\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\nfibfib\
    \ <- function(n) {\n  if (n == 0) {\n    0\n  } else if (n == 1) {\n    0\n  }\
    \ else if (n == 2) {\n    1\n  } else {\n    fibfib <- function(n) {\n      if\
    \ (n == 0) {\n        0\n      } else if (n == 1) {\n        0\n      } else if\
    \ (n == 2) {\n        1\n      } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \      }\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\nfibfib\
    \ <- function(n) {\n  if (n == 0) {\n    0\n  } else if (n == 1) {\n    0\n  }\
    \ else if (n == 2) {\n    1\n  } else {\n    fibfib <- function(n) {\n      if\
    \ (n == 0) {\n        0\n      } else if (n == 1) {\n        0\n      } else if\
    \ (n == 2) {\n        1\n      } else {\n        fibfib <- function(n) {\n   \
    \       if (n == 0) {\n            0\n          } else if (n == 1) {\n       \
    \     0\n          } else if (n == 2) {\n            1\n          } else {\n \
    \           fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n          }\n        }\n\
    \        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n      }\n    }\n    fibfib(n-1)\
    \ + fibfib(n", "\n   if (n == 0) {\n       return(0)\n   }\n   else if (n == 1)\
    \ {\n       return(0)\n   }\n   else if (n == 2) {\n       return(1)\n   }\n \
    \  else {\n       return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n   }\n}", "\n\
    \    fib <- function(n) {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n-1) + fib(n-2)\n    }\n    fib(n) + fib(n-1) + fib(n-2)\n}\n",
  "\n  # Complete the function here.\n  if (n < 3)\n    return(n - 1)\n  return(fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3))\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n  # For this problem, the base case is defined as n = 0 and n = 1.\n  if (n ==\
    \ 0 || n == 1) {\n    0\n  } else {\n    # Use recursion to compute the fibfib\
    \ sequence.\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n\
    \  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else\
    \ if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n\nprint(fibfib(1))\nprint(fibfib(5))\nprint(fibfib(8))\n",
  "\n    z = c(0,0,1)\n    for (i in 4:n) {\n        z <- c(z[2], z[3], sum(z))\n\
    \    }\n    return(z[3])\n}\n\nfibfib(12)\n", "\n    if (n == 0) return(0)\n \
    \   if (n == 1) return(0)\n    if (n == 2) return(1)\n    else return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n \
    \   if (n == 0) {\n        0\n    } else if (n == 1) {\n        0\n    } else\
    \ if (n == 2) {\n        1\n    } else {\n        fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    if (n == 0)\
    \ {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n    } else\
    \ if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3))\n    }\n}", "\n  fib <- fibfib_recursive(n)\n  return(fib)\n\
    }\n\nfibfib_recursive <- function(n) {\n  if (n <= 0) {\n    return(0)\n  } else\
    \ if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else\
    \ {\n    return(fibfib_recursive(n-1) + fibfib_recursive(n-2) + fibfib_recursive(n-3))\n\
    \  }\n}\n", "\n  if (n <= 1) {\n    0\n  } else if (n == 2) {\n    1\n  } else\
    \ {\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n", "\n  a <- 1:n\n \
    \ a[1] <- 0\n  a[2] <- 0\n  a[3] <- 1\n  for (i in 4:n) {\n    a[i] <- a[i-1]\
    \ + a[i-2] + a[i-3]\n  }\n  a[n]\n}\n", "\n    if (n < 0) {\n        return(NULL)\n\
    \    }\n    if (n == 0) {\n        return(0)\n    }\n    if (n == 1) {\n     \
    \   return(0)\n    }\n    if (n == 2) {\n        return(1)\n    }\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib <- function(n) {\n    if (n < 0) {\n\
    \        return(NULL)\n    }\n    if (n == 0) {\n        return(0)\n    }\n  \
    \  if (n == 1) {\n        return(0)\n    }\n    if (n == 2) {\n        return(1)\n\
    \    }\n    first <- 0\n    second <- 0\n    third <- 1\n    fourth <- 0\n   \
    \ for (i in 4:n) {\n        fourth <- first + second + third\n        first <-\
    \ second\n        second <- third\n        third <- fourth\n    }\n    return(fourth)\n\
    }\n", "\n  if(n == 0) return(0)\n  else if(n == 1) return(0)\n  else if(n == 2)\
    \ return(1)\n  else return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)", "\n  \n}\n", "\n    if (n < 3) {\n        return(n-1)\n\
    \    }\n    else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \    }\n}", "\n    if (n < 0) {\n        return (NA)\n    }\n    x <- 0\n    y\
    \ <- 0\n    z <- 1\n    for (i in 1:n) {\n        x <- y\n        y <- z\n   \
    \     z <- x + y + z\n    }\n    return (x)\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n  if (n <= 2) {\n    return(0)\n  } else if (n == 3) {\n    return(1)\n  } else\
    \ {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n    if\
    \ (n == 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\n", "\n    if (n == 0) return(0)\n  \
    \  if (n == 1) return(0)\n    if (n == 2) return(1)\n    return(fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3))\n}", "\n  if (n == 0) {\n    return(0)\n  } else\
    \ if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else\
    \ {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n  if (n\
    \ == 0)\n    return(0)\n  if (n == 1)\n    return(0)\n  if (n == 2)\n    return(1)\n\
    \  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib(5)", "\n  if (n\
    \ == 0) return(0)\n  if (n == 1) return(0)\n  if (n == 2) return(1)\n  res <-\
    \ c(0, 0, 1)\n  for (i in 4:n) {\n    res <- c(res[2], res[3], sum(res))\n  }\n\
    \  return(res[3])\n}\n", "\n    if (n == 0) {\n        0\n    } else if (n ==\
    \ 1) {\n        0\n    } else if (n == 2) {\n        1\n    } else {\n       \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}", "\n\t##\n\t## TODO: Implement\
    \ your answer\n\t##\n\tif (n == 0) {\n\t\treturn(0)\n\t}\n\tif (n == 1) {\n\t\t\
    return(0)\n\t}\n\tif (n == 2) {\n\t\treturn(1)\n\t}\n\treturn(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n}\n\n", "\n  return(ifelse(n < 3, n-1, fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)))\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  fibfib_list <-\
    \ vector(\"integer\", n+1)\n  fibfib_list[1] <- 0\n  fibfib_list[2] <- 0\n  fibfib_list[3]\
    \ <- 1\n  for (i in 4:n) {\n    fibfib_list[i] <- fibfib_list[i-1] + fibfib_list[i-2]\
    \ + fibfib_list[i-3]\n  }\n  return(fibfib_list[n])\n}\n\nfibfib(1)\n\nfibfib(5)\n\
    \nfibfib(8)\n", "\n  \n  if (n <= 0) {\n    return(0)\n  }\n  \n  if (n == 1)\
    \ {\n    return(0)\n  }\n  \n  if (n == 2) {\n    return(1)\n  }\n  \n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n\t# YOUR CODE HERE\n\treturn(1)\n}\n\
    test_that(\"test fibfib\", {\n\texpect_equal(fibfib(1), 0)\n\texpect_equal(fibfib(5),\
    \ 4)\n\texpect_equal(fibfib(8), 24)\n})", "\n  if (n == 0) {\n    return(0)\n\
    \  } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}", "\n\
    \  # TODO\n}\n ", "\n  if (n <= 2) {\n    return(0)\n  } else if (n == 3) {\n\
    \    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    if (n <= 1) {\n        0\n\
    \    } else if (n == 2) {\n        1\n    } else {\n        fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  if(n ==\
    \ 0) {\n    return(0)\n  } else if(n == 1) {\n    return(0)\n  } else if(n ==\
    \ 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  if (n <= 2) return(n-1)\n  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfibfib <- function(n) {\n  f <- numeric(n)\n\
    \  f[1:3] <- 0:2\n  for (i in 4:n) f[i] <- f[i-1] + f[i-2] + f[i-3]\n  f[n]\n\
    }\n", "\n  f <- numeric(n)\n  f[1] <- 0\n  f[2] <- 0\n  f[3] <- 1\n  for (i in\
    \ 4:n) {\n    f[i] <- f[i-1] + f[i-2] + f[i-3]\n  }\n  return(f[n])\n}\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n    fibfib <- integer(n)\n    fibfib[1] <- 0\n   \
    \ fibfib[2] <- 0\n    fibfib[3] <- 1\n    for (i in 4:n) {\n        fibfib[i]\
    \ <- fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return(fibfib[n])\n}",
  "\n    if (n < 3) {\n        return(n-1)\n    }\n    res <- 0\n    f <- c(0, 0,\
    \ 1)\n    for (i in 3:n) {\n        res <- f[1] + f[2] + f[3]\n        f[1] <-\
    \ f[2]\n        f[2] <- f[3]\n        f[3] <- res\n    }\n    return(res)\n}\n\
    \nfibfib(5)\n\nfibfib(8)\n", "\n    if (n == 0) {\n        return(0)\n    } else\
    \ if (n == 1) {\n        return(0)\n    } else if (n == 2) {\n        return(1)\n\
    \    } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n\
    }\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    if (n < 2) return(0)\n    if (n\
    \ == 2) return(1)\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n",
  "\n  if (n == 0 || n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n  if (n <= 1) {\n    return(0)\n  } else if (n ==\
    \ 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\n", "\n   if (n == 0)\n      return(0)\n   else if (n == 1)\n      return(0)\n\
    \   else if (n == 2)\n      return(1)\n   else\n      return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n}\n", "\n  if (n==0) {\n    return(0)\n  } else if (n==1) {\n\
    \    return(0)\n  } else if (n==2) {\n    return(1)\n  } else {\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n  }\n}\n\nfibfib(1)\n\nfibfib(5)\n\nfibfib(8)\n",
  "\n  n <- n + 1\n  x <- vector(\"numeric\", n)\n  x[1] <- 0\n  x[2] <- 0\n  x[3]\
    \ <- 1\n  if (n < 4)\n    x[1:n]\n  else {\n    for (i in 4:n) {\n      x[i] <-\
    \ x[i-1] + x[i-2] + x[i-3]\n    }\n    x[n]\n  }\n}\n", "\n  if (n == 0)\n   \
    \ return(0)\n  if (n == 1)\n    return(0)\n  if (n == 2)\n    return(1)\n  if\
    \ (n > 2)\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n", "\n    if\
    \ (n == 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\n", "\n    stopifnot(n>=0, n==round(n))\n\
    \    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\n\nfibfib <- function(n) {\n    stopifnot(n>=0,\
    \ n==round(n))\n    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n\
    \        return(0)\n    } else if (n == 2) {\n        return(1)\n    } else {\n\
    \        f <- numeric(n)\n        f[1] <- 0\n        f[2] <- 0\n        f[3] <-\
    \ 1\n        for (i in 4:n) {\n            f[i] <- f[i-1] + f[i-2] + f[i-3]\n\
    \        }\n        return(f[n])\n    }\n}\n", "\n    if (n == 0) return(0)\n\
    \    if (n == 1) return(0)\n    if (n == 2) return(1)\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n  f <- c(0, 0, 1)\n  for (i in 3:n) {\n\
    \    f[i+1] <- f[i] + f[i-1] + f[i-2]\n  }\n  return(f[n+1])\n}\n", "\n  result\
    \ <- numeric(n+1)\n  result[1] <- 0\n  result[2] <- 0\n  result[3] <- 1\n  for\
    \ (i in 4:n+1) {\n    result[i] <- result[i-1] + result[i-2] + result[i-3]\n \
    \ }\n  return(result[n+1])\n}\n\nfibfib(1)\n\nfibfib(5)\n\nfibfib(8)\n", "\n \
    \   f0 <- 0\n    f1 <- 0\n    f2 <- 1\n    for (i in 3:n) {\n        f0 <- f1\n\
    \        f1 <- f2\n        f2 <- f1 + f0 + f2\n    }\n    return(f2)\n}\nfibfib(8)\n",
  "\n    if (n == 0) {return(0)}\n    if (n == 1) {return(0)}\n    if (n == 2) {return(1)}\n\
    \    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}", "\n    if (n == 0) {\n\
    \        return(0)\n    } else if (n == 1) {\n        return(0)\n    } else if\
    \ (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n    }\n}\n", "\n  if (n==0) {\n    return(0)\n  } else if (n==1)\
    \ {\n    return(0)\n  } else if (n==2) {\n    return(1)\n  } else {\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n  if(n <= 2) {\n    return(n-1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n  if (n <= 1) {\n    return(0)\n  } else if (n ==\
    \ 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  fib <- function(n, a = 0,\
    \ b = 0, c = 1) {\n    if (n == 0) {\n      a\n    } else if (n == 1) {\n    \
    \  b\n    } else if (n == 2) {\n      c\n    } else {\n      fib(n - 1, b, c,\
    \ a + b + c)\n    }\n  }\n  fib(n)\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n\
    \  if (n < 0) return(0)\n  z <- fibfib <- 0\n  fib <- 1\n  for (i in seq(2, n,\
    \ 1)) {\n    z <- fibfib\n    fibfib <- fib\n    fib <- fibfib + z + fibfib\n\
    \  }\n  return(fib)\n}", "\n  fibfib <- numeric(n)\n  fibfib[1] <- 0\n  fibfib[2]\
    \ <- 0\n  fibfib[3] <- 1\n  for (i in 4:n) fibfib[i] <- fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n  fibfib[n]\n}\n", "\n    if (n == 0) return(0)\n    if (n ==\
    \ 1) return(0)\n    if (n == 2) return(1)\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n}\nprint(fibfib(1))\nprint(fibfib(5))\nprint(fibfib(8))\n",
  "\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else\
    \ if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  # Your code\
    \ here!\n  fibfib_count <- c(0,0,1)\n  for (i in 3:n) {\n    fibfib_count[i+1]\
    \ <- fibfib_count[i] + fibfib_count[i-1] + fibfib_count[i-2]\n  }\n  return(fibfib_count[n+1])\n\
    }\n\n\n", "\n  \n  if (n <= 2) {\n    return(0)\n  }\n  \n  a <- 0\n  b <- 0\n\
    \  c <- 1\n  \n  for (i in 3:n) {\n    temp <- a + b + c\n    a <- b\n    b <-\
    \ c\n    c <- temp\n  }\n  \n  return(c)\n}\n", "\n    if (n < 3) return(0)\n\
    \    if (n == 3) return(1)\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "\n  if (n < 0) {\n    stop(\"invalid argument n: should be positive\")\n  }\n \
    \ if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return(0)\n  }\n  if\
    \ (n == 2) {\n    return(1)\n  }\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "\n  fibfib <- function(n) {\n    if (n==0) return(0)\n    if (n==1) return(0)\n\
    \    if (n==2) return(1)\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n  return(fibfib(n))\n}\n", "\n  if(n==0) {\n    return(0)\n  }\n  if(n==1)\
    \ {\n    return(0)\n  }\n  if(n==2) {\n    return(1)\n  }\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n  if (n <= 2) {\n    n\n  } else {\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\nfibfib(8)\n", "\n  ##\
    \ Your code here\n  fibfib <- c(0,0,1)\n  if (n <= 2)\n    return(fibfib[n+1])\n\
    \  for (i in 3:n) {\n    fibfib[i+1] <- fibfib[i] + fibfib[i-1] + fibfib[i-2]\n\
    \  }\n  return(fibfib[n+1])\n}\nfibfib(0)\nfibfib(1)\nfibfib(2)\nfibfib(3)\nfibfib(4)\n\
    fibfib(5)\nfibfib(8)\n\nfibfib_iter <- function(n) {\n  f1 = 0\n  f2 = 0\n  f3\
    \ = 1\n  for (i in 2:n) {\n    f1 = f2\n    f2 = f3\n    f3 = f2 + f1 + f1\n \
    \ }\n  return(f3)\n}\nfibfib_iter(8)\n", "\n   fibFib <- function(n, memo) {\n\
    \     if(n==0) return(0)\n     if(n==1) return(0)\n     if(n==2) return(1)\n \
    \    if(!is.null(memo[n])) return(memo[n])\n     val <- fibFib(n-1, memo) + fibFib(n-2,\
    \ memo) + fibFib(n-3, memo)\n     memo[n] <- val\n     return(val)\n   }\n   return(fibFib(n,\
    \ vector(length=n+1)))\n}\nfibfib(8)\n", "\n  if (n < 3) {\n    0\n  } else {\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n", "\n  fibfib <- numeric(n+1)\n\
    \  fibfib[1] <- 0\n  fibfib[2] <- 0\n  fibfib[3] <- 1\n  for (i in 4:n) {\n  \
    \  fibfib[i] <- fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  fibfib[n]\n}\n",
  "\n    memo <- vector(length = n + 1)\n    fibfib.memo <- function(n) {\n      \
    \  if (n == 0) {\n            return(0)\n        } else if (n == 1) {\n      \
    \      return(0)\n        } else if (n == 2) {\n            return(1)\n      \
    \  } else if (memo[n] != 0) {\n            return(memo[n])\n        } else {\n\
    \            memo[n] <- fibfib.memo(n - 1) + fibfib.memo(n - 2) + fibfib.memo(n\
    \ - 3)\n            return(memo[n])\n        }\n    }\n    fibfib.memo(n)\n}",
  "\n    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else\
    \ if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n", "\n  fibfib <- c(0, 0, 1)\n  for (i in 4:n) {\n \
    \   fibfib[i] <- fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return(fibfib[n])\n\
    }\n", "\n    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n    \
    \    return(0)\n    } else if (n == 2) {\n        return(1)\n    } else {\n  \
    \      return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n}\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n  if (n == 0) {\n    return(0)\n  } else if (n ==\
    \ 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else {\n   \
    \ return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n\nfibfib(8)\n", "\n\
    \  if (n < 3) return(n-1)\n  else return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\n\nfibfib_memo <- function(n) {\n  fibfib_memo2(n, rep(NA, n))\n}\n\nfibfib_memo2\
    \ <- function(n, cache) {\n  if (n < 3) return(n-1)\n  if (is.na(cache[n])) cache[n]\
    \ <- fibfib_memo2(n-1, cache) + fibfib_memo2(n-2, cache) + fibfib_memo2(n-3, cache)\n\
    \  return(cache[n])\n}\n\nfibfib_tab <- function(n) {\n  if (n < 3) return(n-1)\n\
    \  if (n == 3) return(2)\n  fibfib <- rep(NA, n)\n  fibfib[1] <- 0\n  fibfib[2]\
    \ <- 0\n  fibfib[3] <- 1\n  for (i in 4:n) {\n    fibfib[i] <- fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n  }\n  return(fibfib[n])\n}\n\nfibfib_tab2 <- function(n) {\n\
    \  if (n < 3) return(n-1)\n  if (n == 3) return(2)\n  n1 <- 0\n  n2 <- 0\n  n3\
    \ <- 1\n  for (i in 4:n) {\n    n4 <- n1 + n2 + n3\n    n1 <- n2\n    n2 <- n3\n\
    \    n3 <- n4\n  }\n  return(n4)\n}\n", "\n  if (n == 0) {\n    return(0)\n  }\
    \ else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n \
    \ } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n\
    \  ## Your code here!\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  if (n == 0)\n\
    \    return(0)\n  if (n == 1)\n    return(0)\n  if (n == 2)\n    return(1)\n \
    \ if (n > 2)\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n", "\n \
    \ # your code here\n}\nprint(fibfib(1))\nprint(fibfib(5))\nprint(fibfib(8))\n ",
  "\n\t# For 0 and 1 return 0\n\tif (n < 2) return(0)\n\t# For 2 return 1\n\tif (n\
    \ == 2) return(1)\n\t# Start sequence at 0, 0, 1\n\tf1 <- 0\n\tf2 <- 0\n\tf3 <-\
    \ 1\n\t# Loop through n - 2 times\n\tfor (i in (3:n)) {\n\t\t# Calculate the next\
    \ number\n\t\tfn <- f1 + f2 + f3\n\t\t# Shift everything over by 1\n\t\tf1 <-\
    \ f2\n\t\tf2 <- f3\n\t\tf3 <- fn\n\t}\n\t# Return the last number\n\treturn(fn)\n\
    }", "\n  if (n < 0) {\n    return (NA)\n  }\n  if (n < 2) {\n    return (0)\n\
    \  }\n  if (n == 2) {\n    return (1)\n  }\n  res <- 0\n  fib1 <- 0\n  fib2 <-\
    \ 0\n  fib3 <- 1\n  for (i in 3:n) {\n    res <- fib1 + fib2 + fib3\n    fib1\
    \ <- fib2\n    fib2 <- fib3\n    fib3 <- res\n  }\n  return (res)\n}\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n  if (n <= 1) {\n    return(0)\n  } else if (n ==\
    \ 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\n\nsapply(0:8, fibfib)\n", "\n  f <- rep(0, n+1)\n  f[1] <- 0\n  f[2]\
    \ <- 0\n  f[3] <- 1\n  for (i in 4:n) {\n    f[i] <- f[i-1] + f[i-2] + f[i-3]\n\
    \  }\n  return(f[n])\n}\n", "\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n\
    \  if (n == 2) return(1)\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "\n\
    \  if (n==0) {\n    return(0)\n  } else if (n==1) {\n    return(0)\n  } else if\
    \ (n==2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3))\n  }\n}", "\n  if (n <= 1) {\n    return(0)\n  } else if (n ==\
    \ 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\nprint(fibfib(1))\nprint(fibfib(5))\nprint(fibfib(8))\n", "\n  if (n <\
    \ 2)\n    return(0)\n  if (n == 2)\n    return(1)\n  c(0,0,1)[n] + fibfib(n-1)\
    \ + fibfib(n-2)\n}\n\nfibfib <- function(n) {\n  if (n < 2)\n    return(0)\n \
    \ if (n == 2)\n    return(1)\n  last <- c(0,0,1)\n  curr <- c(0,0,1)\n  for (i\
    \ in 3:n) {\n    curr[i] <- last[i-1] + last[i-2] + last[i-3]\n    last <- curr\n\
    \  }\n  return(curr[n])\n}\n", "\n  if(n==0) {\n    return(0)\n  }\n  if(n==1)\
    \ {\n    return(0)\n  }\n  if(n==2) {\n    return(1)\n  }\n  a = 0\n  b = 0\n\
    \  c = 1\n  for(i in 1:n-2) {\n    res = a + b + c\n    a = b\n    b = c\n   \
    \ c = res\n  }\n  return(res)\n}\n", "\n  fibfib <- c(0, 0, 1)\n  if (n <= 2)\
    \ {\n    return(fibfib[n])\n  }\n  for (i in 3:n) {\n    fibfib[i] <- fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n  }\n  return(fibfib[n])\n}\n", "\n  if (n==0)\
    \ return(0)\n  if (n==1) return(0)\n  if (n==2) return(1)\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}", "\n  fibfib <- c(0, 0, 1)\n  for (i in seq(3,\
    \ n)) {\n    fibfib[i + 1] <- fibfib[i] + fibfib[i - 1] + fibfib[i - 2]\n  }\n\
    \  fibfib[n + 1]\n}\nfibfib(1)\n", "\n    a <- 0\n    b <- 0\n    c <- 1\n   \
    \ for (i in 2:n) {\n        a <- b\n        b <- c\n        c <- b + a + c\n \
    \   }\n    return(c)\n}\n", "\n  fib <- function(n) {\n    if (n <= 2) n else\
    \ fib(n-1) + fib(n-2)\n  }\n  fib(n) + fib(n-1) + fib(n-2)\n}\n", "\n    if (n\
    \ <= 1) {\n        return(0)\n    } else if (n == 2) {\n        return(1)\n  \
    \  } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n\
    }\n\nfibfib <- function(n) {\n    if (n <= 1) {\n        return(0)\n    } else\
    \ if (n == 2) {\n        return(1)\n    } else {\n        n_1 <- 0\n        n_2\
    \ <- 0\n        n_3 <- 1\n        for (i in 3:n) {\n            n_1 <- n_2\n \
    \           n_2 <- n_3\n            n_3 <- n_1 + n_2 + n_3\n        }\n      \
    \  return(n_3)\n    }\n}\n\nfibfib <- function(n) {\n    if (n <= 1) {\n     \
    \   return(0)\n    } else if (n == 2) {\n        return(1)\n    } else {\n   \
    \     fibs <- c(0, 0, 1)\n        for (i in 3:n) {\n            fibs <- c(fibs[-1],\
    \ sum(fibs))\n        }\n        return(fibs[length(fibs)])\n    }\n}\n", "\n\
    \    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\nfor (i in 1:10) {\n    print(paste(i,\
    \ fibfib(i)))\n}\n", "\n  a <- 0\n  b <- 0\n  c <- 1\n  for (i in 1:n) {\n   \
    \ a <- b\n    b <- c\n    c <- a + b + c\n  }\n  a\n}\n\nfibfib(8)\n", "\n   \
    \ if (n <= 2) {\n        return(0)\n    } else if (n == 3) {\n        return(1)\n\
    \    } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n\
    }\nfibfib(8)\n", "\n  fib <- numeric(n+1)\n  fib[1] <- 0\n  fib[2] <- 0\n  fib[3]\
    \ <- 1\n  for (i in 4:n) {\n    fib[i] <- fib[i-1] + fib[i-2] + fib[i-3]\n  }\n\
    \  fib[n]\n}", "\n  if(n <= 1) return(0)\n  if(n == 2) return(1)\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n    if (n == 0) {\n        return(0)\n\
    \    } else if (n == 1) {\n        return(0)\n    } else if (n == 2) {\n     \
    \   return(1)\n    } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \    }\n}\n\nfibfib(10)\nfibfib(4)\n", "\n  if(n == 0) return(0)\n  if(n == 1)\
    \ return(0)\n  if(n == 2) return(1)\n  if(n == 3) return(1)\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n \
    \ if (n < 3) {\n    return(n-1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    if (n ==\
    \ 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n    }\
    \ else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\n", "\n  if (n == 0) {\n    return(0)\n\
    \  } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n\
    \  if(n == 0) return(0)\n  if(n == 1) return(0)\n  if(n == 2) return(1)\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  fib\
    \ <- c(0,0,1)\n  if (n <= 2) return(fib[n+1])\n  for (i in 3:n) fib <- c(fib[2],\
    \ fib[3], sum(fib))\n  return(fib[3])\n}", "\n  if(n == 0) {\n    0\n  } else\
    \ if(n == 1) {\n    0\n  } else if(n == 2) {\n    1\n  } else {\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  }\n}\n\nfibfib <- function(n) {\n  out <- NULL\n\
    \  if(n == 0) {\n    out <<- 0\n  } else if(n == 1) {\n    out <<- 0\n  } else\
    \ if(n == 2) {\n    out <<- 1\n  } else {\n    out <<- fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  }\n  out\n}\n", "\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n\
    \  if (n == 2) return(1)\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\n", "\n    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n    \
    \    return(0)\n    } else if (n == 2) {\n        return(1)\n    } else {\n  \
    \      return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n}\n\nfibfib(8)\n",
  "\n    x <- vector()\n    x[1] <- 0\n    x[2] <- 0\n    x[3] <- 1\n    for (i in\
    \ 4:n) {\n        x[i] <- x[i-1] + x[i-2] + x[i-3]\n    }\n    return(x[n])\n\
    }\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  x <- numeric(n)\n  x[1] <- 0\n  x[2]\
    \ <- 0\n  x[3] <- 1\n  for (i in 4:n) {\n    x[i] <- x[i-1] + x[i-2] + x[i-3]\n\
    \  }\n  return(x[n])\n}\n", "\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n\
    \  if (n == 2) return(1)\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}",
  "\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n  if (n == 2) return(1)\n \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfibfib_fast <- function(n) {\n\
    \  a1 <- 0\n  a2 <- 0\n  a3 <- 1\n  for (i in 4:n) {\n    a1 <- a2\n    a2 <-\
    \ a3\n    a3 <- a1 + a2 + a3\n  }\n  return(a3)\n}\n\nprint(fibfib(1000))\nprint(fibfib_fast(1000))\n",
  "\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else\
    \ if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n", "\n  if (n < 3) {\n    return(0)\n  } else {\n  \
    \  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n}\n", "\n    if (n <= 2)\n  \
    \      return(0)\n    if (n == 3)\n        return(1)\n    return(fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3))\n}\n", "\n  if (n == 0) {\n    return(0)\n  } else\
    \ if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else\
    \ {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}", "\n    if (n\
    \ <= 1) {\n        return(0)\n    } else if (n == 2) {\n        return(1)\n  \
    \  } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n\
    }\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  fibfibs <- numeric(n+1)\n  fibfibs[1]\
    \ <- 0\n  fibfibs[2] <- 0\n  fibfibs[3] <- 1\n  for (i in 4:n) {\n    fibfibs[i]\
    \ <- fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3]\n  }\n  fibfibs[n]\n}\n", "\n\
    \  if(n == 0){\n    return(0)\n  }\n  if(n == 1){\n    return(0)\n  }\n  if(n\
    \ == 2){\n    return(1)\n  }\n  if(n == 3){\n    return(1)\n  }\n  else{\n   \
    \ return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n  fib <- vector(\"\
    numeric\", n+1)\n  fib[1] <- 0\n  fib[2] <- 0\n  fib[3] <- 1\n  for (i in 4:n)\
    \ {\n    fib[i] <- fib[i-1] + fib[i-2] + fib[i-3]\n  }\n  fib[n]\n}\n", "\n  if\
    \ (n == 0) return(0)\n  if (n == 1) return(0)\n  if (n == 2) return(1)\n  a <-\
    \ 0\n  b <- 0\n  c <- 1\n  for (i in 3:n) {\n    d <- a + b + c\n    a <- b\n\
    \    b <- c\n    c <- d\n  }\n  return(d)\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n\tif (n <= 2) {\n\t\treturn(0)\n\t}\n\telse if (n == 3) {\n\t\treturn(1)\n\t\
    }\n\telse {\n\t\treturn(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\t}\n}\n", "\n\t\
    if (n < 3) {\n\t\treturn(0)\n\t}\n\tnums <- c(0, 0, 1)\n\tfor (i in 4:n) {\n\t\
    \tnums <- c(nums[2], nums[3], sum(nums))\n\t}\n\treturn(nums[3])\n}\n", "\n  \
    \  switch(n,\n           0,0,\n           1,0,\n           2,1,\n           fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n  return(switch(n, 0, 0, 1, 0, 2, 1,\
    \ n-1 + fibfib(n-2) + fibfib(n-3)))\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n\
    \  f <- rep(0, length=n+1)\n  f[1] <- 0\n  f[2] <- 0\n  f[3] <- 1\n  if (n ==\
    \ 1 || n == 2) {\n    return(f[n])\n  } else {\n    for (i in 4:n) {\n      f[i]\
    \ <- f[i-1] + f[i-2] + f[i-3]\n    }\n    return(f[n])\n  }\n}\n", "\n  fibfibs\
    \ <- numeric(n)\n  fibfibs[1] <- 0\n  fibfibs[2] <- 0\n  fibfibs[3] <- 1\n  for\
    \ (i in 4:n) {\n    fibfibs[i] <- fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3]\n\
    \  }\n  return(fibfibs[n])\n}\n", "\n  if (n < 3) {\n    0\n  } else {\n    1\
    \ + fibfib(n-1) + fibfib(n-2)\n  }\n}\n", "\n    if (n <= 1)\n        return(0)\n\
    \    if (n == 2)\n        return(1)\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\n", "\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n\
    \  } else if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n", "\n  if (n < 3) {\n    return(n-1)\n  } else {\n\
    \    a <- c(0, 0, 1)\n    for (i in seq(3, n)) {\n      a <- c(a[2], a[3], sum(a))\n\
    \    }\n    return(a[3])\n  }\n}\n\n", "\n\tif (n <= 1) {\n\t\treturn(0)\n\t}\
    \ else if (n == 2) {\n\t\treturn(1)\n\t} else {\n\t\treturn(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n\t}\n}\n", "\n    if (n == 0) {\n        return(0)\n    } else\
    \ if (n == 1) {\n        return(0)\n    } else if (n == 2) {\n        return(1)\n\
    \    } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n\
    }\n", "\n  if (n < 3) {\n    return(0)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n", "\n  if(n == 0) {\n    return(0)\n  }\n  if(n ==\
    \ 1) {\n    return(0)\n  }\n  if(n == 2) {\n    return(1)\n  }\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib <- function(n) {\n  if(n == 0) {\n\
    \    return(0)\n  }\n  if(n == 1) {\n    return(0)\n  }\n  if(n == 2) {\n    return(1)\n\
    \  }\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib <- function(n)\
    \ {\n  if(n == 0) {\n    return(0)\n  }\n  if(n == 1) {\n    return(0)\n  }\n\
    \  if(n == 2) {\n    return(1)\n  }\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\n\nfibfib <- function(n) {\n  if(n == 0) {\n    return(0)\n  }\n  if(n == 1)\
    \ {\n    return(0)\n  }\n  if(n == 2) {\n    return(1)\n  }\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib <- function(n) {\n  if(n == 0) {\n\
    \    return(0)\n  }\n  if(n == 1) {\n    return(0)\n  }\n  if(n == 2) {\n    return(1)\n\
    \  }\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib <- function(n)\
    \ {\n  if(n == 0) {\n    return(0)\n", "\n  #\n  # finish this function.\n  #\n\
    }\n", "\n  return(if(n < 3) { n } else {\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  })\n}\n", "\n  if(n == 0) {\n    0\n  } else if(n == 1) {\n    0\n  } else\
    \ if(n == 2) {\n    1\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\n \nfibfib(1)", "\n  if (n < 2)\n    return(0)\n  else if (n == 2)\n \
    \   return(1)\n  else\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n\
    \nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    result <- rep(0, n)\n    result[1]\
    \ <- 0\n    result[2] <- 0\n    result[3] <- 1\n    for (i in 4:n) {\n       \
    \ result[i] <- result[i-1] + result[i-2] + result[i-3]\n    }\n    return(result[n])\n\
    }\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  if (n == 0) {\n    return(0)\n \
    \ } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n  # There must be a faster way to do this, but I'll\
    \ use memoization\n  # And reference, to avoid recalculating.\n  # First, I'll\
    \ recursively define the function\n  fibfib.func <- function(n, memo = rep(NA,\
    \ n + 1)) {\n    if (n < 0) {\n      stop(\"n must be greater than 0\")\n    }\
    \ else if (n == 0) {\n      return(0)\n    } else if (n == 1) {\n      return(0)\n\
    \    } else if (n == 2) {\n      return(1)\n    } else if (is.na(memo[n])) {\n\
    \      memo[n] <- fibfib.func(n - 1, memo) + fibfib.func(n - 2, memo) + fibfib.func(n\
    \ - 3, memo)\n      return(memo[n])\n    } else {\n      return(memo[n])\n   \
    \ }\n  }\n  fibfib.func(n)\n}\n", "\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n\
    \  if (n == 2) return(1)\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\n\nfibfib <- function(n) {\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n\
    \  if (n == 2) return(1)\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\n\nfibfib(5)", "\n  #your code here\n}\n", "\n    if (n == 0) {\n        return(0)\n\
    \    } else if (n == 1) {\n        return(0)\n    } else if (n == 2) {\n     \
    \   return(1)\n    } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \    }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    if (n == 0) return(0)\n\
    \    if (n == 1) return(0)\n    if (n == 2) return(1)\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n  if (n == 0) {\n    return(0)\n  } else\
    \ if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else\
    \ {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n \nfibfib(1)",
  "\n  fib <- numeric(n)\n  fib[1] <- 0\n  fib[2] <- 0\n  fib[3] <- 1\n  for (i in\
    \ 4:n) {\n    fib[i] <- fib[i-1] + fib[i-2] + fib[i-3]\n  }\n  fib[n]\n}\n\nfibfib(3)\n\
    \nfibfib(4)\n\nfibfib(5)\n\nfibfib(8)\n", "\n    if (n == 0) return(0)\n    if\
    \ (n == 1) return(0)\n    if (n == 2) return(1)\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n}\n", "\n  if (n==0) {\n    return(0)\n  } else if (n==1) {\n\
    \    return(0)\n  } else if (n==2) {\n    return(1)\n  } else {\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n  }\n}\n\nfibfib(0)\nfibfib(1)\nfibfib(2)\nfibfib(5)\n\
    fibfib(8)\n", "\n  if(n==0) {\n    return(0)\n  }\n  if(n==1) {\n    return(0)\n\
    \  }\n  if(n==2) {\n    return(1)\n  }\n  if(n==3) {\n    return(1)\n  }\n  if(n>3)\
    \ {\n    return(fibfib(n-1)+fibfib(n-2)+fibfib(n-3))\n  }\n}\n", "\n    if (n\
    \ == 0)\n        return(0)\n    if (n == 1)\n        return(0)\n    if (n == 2)\n\
    \        return(1)\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n\n\
    fibfib <- function(n) {\n    if (n == 0) return(0)\n    fib1 <- 0\n    fib2 <-\
    \ 0\n    fib3 <- 1\n    for (i in 1:n) {\n        fib <- fib1 + fib2 + fib3\n\
    \        fib1 <- fib2\n        fib2 <- fib3\n        fib3 <- fib\n    }\n    return(fib)\n\
    }\n", "\n    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n    \
    \    return(0)\n    } else if (n == 2) {\n        return(1)\n    } else {\n  \
    \      return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n}\n", "\n  fibfib\
    \ <- function(n, cache) {\n    if (n == 0) return(0)\n    if (n == 1) return(0)\n\
    \    if (n == 2) return(1)\n    if (n <= length(cache)) return(cache[n])\n   \
    \ cache <- c(cache, cache[n-1] + cache[n-2] + cache[n-3])\n    return(fibfib(n,\
    \ cache))\n  }\n  fibfib(n, numeric(n))\n}\n\n", "\n    # your code here\n   \
    \ if (n == 0) {\n        0\n    } else if (n == 1) {\n        0\n    } else if\
    \ (n == 2) {\n        1\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n", "\n  f <- rep(0, n + 1)\n  for (i in c(1:n)) {\n    if (i <= 2)\
    \ {\n      f[i + 1] <- i - 1\n    } else {\n      f[i + 1] <- f[i] + f[i - 1]\
    \ + f[i - 2]\n    }\n  }\n  return(f[n + 1])\n}\n", "\n  if (n <= 1) return(0)\n\
    \  if (n == 2) return(1)\n  return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}",
  "\n    if (n == 0) {\n        0\n    } else if (n == 1) {\n        0\n    } else\
    \ if (n == 2) {\n        1\n    } else {\n        fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    }\n}\n", "\n  if (n < 3)\n    return(n - 1)\n  if (n == 3)\n\
    \    return(1)\n  return(fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3))\n}\n\n\
    fibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  c(0,0,1)[(n%%3)+1] +ifelse(n<3,0,fibfib(n-1)+fibfib(n-2)+fibfib(n-3))\n\
    }\n\nfibfib <- function(n) {\n  fn <- c(0,0,1)\n  for (i in seq(4,n)) fn[i%%3+1]\
    \ <- fn[i%%3+1] + fn[(i-1)%%3+1] + fn[(i-2)%%3+1] + fn[(i-3)%%3+1]\n  fn[n%%3+1]\n\
    }\n", "\n  fibfib_0 <- 0\n  fibfib_1 <- 0\n  fibfib_2 <- 1\n  for (i in 1:n) {\n\
    \    temp <- fibfib_0\n    fibfib_0 <- fibfib_1\n    fibfib_1 <- fibfib_2\n  \
    \  fibfib_2 <- temp + fibfib_0 + fibfib_1\n  }\n  return(fibfib_2)\n}", "\n  \
    \  a <- 0\n    b <- 0\n    c <- 1\n    for (i in 3:n) {\n        d <- a + b +\
    \ c\n        a <- b\n        b <- c\n        c <- d\n    }\n    return(c)\n}\n",
  "\n  if(n <= 1) {\n    return(0)\n  } else if(n == 2) {\n    return(1)\n  } else\
    \ {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n    seq <- c(0,0,1)\n    while (length(seq) < n) {\n\
    \        seq <- c(seq, sum(seq[length(seq)-2:length(seq)]))\n    }\n    return(seq[n])\n\
    }\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  if (n == 0)\n    return(0)\n  if (n\
    \ == 1)\n    return(0)\n  if (n == 2)\n    return(1)\n  if (n > 2)\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\nfibfib(10)\n",
  "\n  ## Validate input\n  if (n <= 0) {\n    stop(\"n must be greater than zero.\"\
    )\n  }\n  ## Declare a vector to hold all the fibfib values\n  fibfib_vec <- vector(mode\
    \ = \"integer\", length = n)\n  ## Initialize first three terms in the sequence\n\
    \  fibfib_vec[1] <- 0\n  fibfib_vec[2] <- 0\n  fibfib_vec[3] <- 1\n  ## Loop through\
    \ remaining terms in the sequence\n  for (i in 4:n) {\n    fibfib_vec[i] <- fibfib_vec[i-1]\
    \ + fibfib_vec[i-2] + fibfib_vec[i-3]\n  }\n  return(fibfib_vec[n])\n}", "\n \
    \   fiblist <- c(0,0,1)\n    for (i in 4:n) {\n        fiblist[i] <- fiblist[i-1]\
    \ + fiblist[i-2] + fiblist[i-3]\n    }\n    return(fiblist[n])\n}\n \nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n    fibfib <- c(0,0,1)\n    for (i in 1:n-3) {\n \
    \       fibfib <- c(fibfib[2], fibfib[3], sum(fibfib))\n    }\n    return(fibfib[3])\n\
    }\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  if (n == 0) {\n    return(0)\n  }\
    \ else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n \
    \ } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\nfibfib(5)\n",
  "\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else\
    \ if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n", "\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n\
    \  if (n == 2) return(1)\n  else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fibfib <- function(n) {\n  if (n == 0) return(0)\n  if (n == 1) return(0)\n  if\
    \ (n == 2) return(1)\n  else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfibfib(1)",
  "\n  fib <- function(n) {\n    fib <- function(n) {\n      if(n == 0) {\n      \
    \  return(0)\n      } else if(n == 1) {\n        return(1)\n      } else {\n \
    \       return(fib(n-1) + fib(n-2))\n      }\n    }\n  }\n  if(n == 0) {\n   \
    \ return(0)\n  } else if(n == 1) {\n    return(0)\n  } else if(n == 2) {\n   \
    \ return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  # write your code here\n}\n\
    \ ", "\n    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n     \
    \   return(0)\n    } else if (n == 2) {\n        return(1)\n    } else {\n   \
    \     return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n}\n\nfibfib(1)\n\
    fibfib(5)\nfibfib(8)\n", "\n  if (n == 0) {\n    return(0)\n  } else if (n ==\
    \ 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else {\n   \
    \ return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else if (n == 2)\
    \ {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n  \n  if (n == 0) {\n    return(0)\n\
    \  } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n  \n}\n\
    \nfibfib(5)\n\nfibfib <- function(n) {\n  \n  if (n == 0) {\n    return(0)\n \
    \ } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n\
    \  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n  \n}\n\
    \nfibfib(0)\n", "\n  if(n == 0){\n    return(0)\n  }\n  if(n == 1){\n    return(0)\n\
    \  }\n  if(n == 2){\n    return(1)\n  }\n  return(fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3))\n}\n\n", "\n    if (n < 3) {\n        return(n - 1)\n    }\n  \
    \  return(fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3))\n}\nfibfib(8)\n", "\n\
    \    if (n == 0) {\n        return(0)\n    } else if (n == 1) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n    a <- 0\n    b <- 0\n    c <- 1\n    for (i in 2:n) {\n        a <- b\n  \
    \      b <- c\n        c <- a + b + c\n    }\n    return(c)\n}\nfibfib(1)\nfibfib(5)\n\
    fibfib(8)\n", "\n  if (n == 0)\n    return(0)\n  else if (n == 1)\n    return(0)\n\
    \  else if (n == 2)\n    return(1)\n  else\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n}\n\nfibfib <- function(n) {\n  if (n < 3)\n    return(n-1)\n\
    \  else\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib <- function(n)\
    \ {\n  if (n < 3)\n    return(n-1)\n  else\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n}\n\nfibfib <- function(n) {\n  a <- 0\n  b <- 0\n  c <- 1\n\
    \  for (i in 3:n) {\n    d <- a + b + c\n    a <- b\n    b <- c\n    c <- d\n\
    \  }\n  return(c)\n}\n\nfibfib <- function(n) {\n  a <- 0\n  b <- 0\n  c <- 1\n\
    \  for (i in 3:n) {\n    d <- a + b + c\n    a <- b\n    b <- c\n    c <- d\n\
    \  }\n  return(c)\n}"]
stop_tokens:
- "\n#"
- "\n```"
