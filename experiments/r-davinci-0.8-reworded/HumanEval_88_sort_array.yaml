name: HumanEval_88_sort_array
language: r
prompt: "# Given a vector of non-negative integers, return a cor of the given vector\
  \ after sorting,\n# you will sort the given vector in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given vector.\n# Examples:\n# >>> sort_array(c())\n# c()\n# >>> sort_array(c(5))\n\
  # c(5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5))\n# c(0, 1, 2, 3, 4, 5)\n# >>> sort_array(c(2,\
  \ 4, 3, 0, 1, 5, 6))\n# c(6, 5, 4, 3, 2, 1, 0)\nsort_array <- function(array) {"
tests: "test_humaneval <- function() {\ncandidate <- sort_array\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(5)), c(5))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(2, 4, 3, 0, 1, 5)), c(0, 1, 2, 3, 4, 5))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(2, 4, 3, 0, 1, 5, 6)), c(6, 5, 4, 3, 2, 1,\
  \ 0))){quit('no', 1)}\n    if(!identical(candidate(c(2, 1)), c(1, 2))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(15, 42, 87, 32, 11, 0)), c(0, 11, 15, 32, 42,\
  \ 87))){quit('no', 1)}\n    if(!identical(candidate(c(21, 14, 23, 11)), c(23, 21,\
  \ 14, 11))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(length(array)==0)\n    array\n  else{\n    if(sum(array[1],array[length(array)])%%2==0)\n\
    \      rev(sort(array))\n    else\n      sort(array)\n  }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2) {\n    sort(array)\n  } else {\n    sort(array,\
    \ decreasing = TRUE)\n  }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6))\nsort_array(c())\nsort_array(c(5))\n", "\n  if (sum(c(1,\
    \ length(array))) %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n\
    \  }\n}\n", "\n  array[order(c(0, cumsum(array) %% 2))]\n}\nsort_array(c(2, 4,\
    \ 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n\t# your code goes here\n\
    \  if(length(array) <= 1)\n    return(array)\n  else{\n    if((array[1] + array[length(array)])\
    \ %% 2 == 0){\n      sort(array, decreasing = TRUE)\n    }\n    else {\n     \
    \ sort(array)\n    }\n  }\n}", "\n  # Your code goes here...\n}", "\n    # Write\
    \ your solution here\n}", "\n  if (sum(array[1], array[length(array)]) %% 2 ==\
    \ 0) {\n    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n\
    }\nsort_array(c(2, 4, 3, 0, 1, 5))\n", "\n  # TODO: complete this function\n \
    \ return(array)\n}\n", "\n  if(sum(c(array[1], array[length(array)])) %% 2 ==\
    \ 0) {\n    array[order(array, decreasing = TRUE)]\n  } else {\n    array[order(array)]\n\
    \  }\n}", "\n    if(sum(c(array[1], array[length(array)])) %% 2 == 0) return(sort(array,\
    \ decreasing = TRUE))\n    else return(sort(array))\n}\n", "\n  if(sum(array)\
    \ %% 2 == 0) {\n    return(rev(sort(array)))\n  }\n  return(sort(array))\n}",
  "\n  # Write your code here\n  sum = array[1] + array[length(array)]\n  if (sum%%2\
    \ == 0) {\n    array = sort(array, decreasing = TRUE)\n  } else {\n    array =\
    \ sort(array)\n  }\n  return(array)\n}", "\n    #not sure if this is allowed,\
    \ but I'll take the liberty of using the `sort` function here.\n    array_length\
    \ <- length(array)\n    if (array_length == 0) {\n        return(c())\n    } else\
    \ if (array_length == 1) {\n        return(array)\n    } else {\n        if (sum(c(array[1],\
    \ array[array_length])) %% 2 == 0) {\n            return(sort(array, decreasing\
    \ = TRUE))\n        } else {\n            return(sort(array))\n        }\n   \
    \ }\n}\n", "\n  if (length(array) == 0 | length(array) == 1) {\n    return(array)\n\
    \  }\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n   \
    \ if (sum(c(1, length(array))) %% 2 == 0) {\n        sort(array, decreasing =\
    \ TRUE)\n    } else {\n        sort(array)\n    }\n}\n", "\n  if(length(array)\
    \ > 0) {\n    if(sum(c(1, length(array))) %% 2 == 0) {\n      sort(array, decreasing\
    \ = TRUE)\n    } else {\n      sort(array)\n    }\n  } else {\n    array\n  }\n\
    }\n", "\n  # do your magic here\n}\n", "\n  i <- 1\n  n <- length(array)\n  if\
    \ (n == 0 || n == 1) return(array)\n  if (array[1] + array[n] %% 2 == 0) {\n \
    \   while (i < n) {\n      x <- i\n      while (x > 0 && array[x] < array[x -\
    \ 1]) {\n        array[x] <- array[x] + array[x - 1]\n        array[x - 1] <-\
    \ array[x] - array[x - 1]\n        array[x] <- array[x] - array[x - 1]\n     \
    \   x <- x - 1\n      }\n      i <- i + 1\n    }\n  } else {\n    while (i < n)\
    \ {\n      x <- i\n      while (x > 0 && array[x] > array[x - 1]) {\n        array[x]\
    \ <- array[x] + array[x - 1]\n        array[x - 1] <- array[x] - array[x - 1]\n\
    \        array[x] <- array[x] - array[x - 1]\n        x <- x - 1\n      }\n  \
    \    i <- i + 1\n    }\n  }\n  return(array)\n}", "\n  if (sum(c(1, length(array)))\
    \ %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n  }\n}"]
stop_tokens:
- "\n#"
- "\n```"
