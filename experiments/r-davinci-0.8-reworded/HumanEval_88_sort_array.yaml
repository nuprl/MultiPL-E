name: HumanEval_88_sort_array
language: r
prompt: "# Given a vector of non-negative integers, return a cor of the given vector\
  \ after sorting,\n# you will sort the given vector in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given vector.\n# Examples:\n# >>> sort_array(c())\n# c()\n# >>> sort_array(c(5))\n\
  # c(5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5))\n# c(0, 1, 2, 3, 4, 5)\n# >>> sort_array(c(2,\
  \ 4, 3, 0, 1, 5, 6))\n# c(6, 5, 4, 3, 2, 1, 0)\nsort_array <- function(array) {"
tests: "test_humaneval <- function() {\ncandidate <- sort_array\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(5)), c(5))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(2, 4, 3, 0, 1, 5)), c(0, 1, 2, 3, 4, 5))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(2, 4, 3, 0, 1, 5, 6)), c(6, 5, 4, 3, 2, 1,\
  \ 0))){quit('no', 1)}\n    if(!identical(candidate(c(2, 1)), c(1, 2))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(15, 42, 87, 32, 11, 0)), c(0, 11, 15, 32, 42,\
  \ 87))){quit('no', 1)}\n    if(!identical(candidate(c(21, 14, 23, 11)), c(23, 21,\
  \ 14, 11))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(length(array)==0)\n    array\n  else{\n    if(sum(array[1],array[length(array)])%%2==0)\n\
    \      rev(sort(array))\n    else\n      sort(array)\n  }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2) {\n    sort(array)\n  } else {\n    sort(array,\
    \ decreasing = TRUE)\n  }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6))\nsort_array(c())\nsort_array(c(5))\n", "\n  if (sum(c(1,\
    \ length(array))) %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n\
    \  }\n}\n", "\n  array[order(c(0, cumsum(array) %% 2))]\n}\nsort_array(c(2, 4,\
    \ 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n\t# your code goes here\n\
    \  if(length(array) <= 1)\n    return(array)\n  else{\n    if((array[1] + array[length(array)])\
    \ %% 2 == 0){\n      sort(array, decreasing = TRUE)\n    }\n    else {\n     \
    \ sort(array)\n    }\n  }\n}", "\n  # Your code goes here...\n}", "\n    # Write\
    \ your solution here\n}", "\n  if (sum(array[1], array[length(array)]) %% 2 ==\
    \ 0) {\n    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n\
    }\nsort_array(c(2, 4, 3, 0, 1, 5))\n", "\n  # TODO: complete this function\n \
    \ return(array)\n}\n", "\n  if(sum(c(array[1], array[length(array)])) %% 2 ==\
    \ 0) {\n    array[order(array, decreasing = TRUE)]\n  } else {\n    array[order(array)]\n\
    \  }\n}", "\n    if(sum(c(array[1], array[length(array)])) %% 2 == 0) return(sort(array,\
    \ decreasing = TRUE))\n    else return(sort(array))\n}\n", "\n  if(sum(array)\
    \ %% 2 == 0) {\n    return(rev(sort(array)))\n  }\n  return(sort(array))\n}",
  "\n  # Write your code here\n  sum = array[1] + array[length(array)]\n  if (sum%%2\
    \ == 0) {\n    array = sort(array, decreasing = TRUE)\n  } else {\n    array =\
    \ sort(array)\n  }\n  return(array)\n}", "\n    #not sure if this is allowed,\
    \ but I'll take the liberty of using the `sort` function here.\n    array_length\
    \ <- length(array)\n    if (array_length == 0) {\n        return(c())\n    } else\
    \ if (array_length == 1) {\n        return(array)\n    } else {\n        if (sum(c(array[1],\
    \ array[array_length])) %% 2 == 0) {\n            return(sort(array, decreasing\
    \ = TRUE))\n        } else {\n            return(sort(array))\n        }\n   \
    \ }\n}\n", "\n  if (length(array) == 0 | length(array) == 1) {\n    return(array)\n\
    \  }\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n   \
    \ if (sum(c(1, length(array))) %% 2 == 0) {\n        sort(array, decreasing =\
    \ TRUE)\n    } else {\n        sort(array)\n    }\n}\n", "\n  if(length(array)\
    \ > 0) {\n    if(sum(c(1, length(array))) %% 2 == 0) {\n      sort(array, decreasing\
    \ = TRUE)\n    } else {\n      sort(array)\n    }\n  } else {\n    array\n  }\n\
    }\n", "\n  # do your magic here\n}\n", "\n  i <- 1\n  n <- length(array)\n  if\
    \ (n == 0 || n == 1) return(array)\n  if (array[1] + array[n] %% 2 == 0) {\n \
    \   while (i < n) {\n      x <- i\n      while (x > 0 && array[x] < array[x -\
    \ 1]) {\n        array[x] <- array[x] + array[x - 1]\n        array[x - 1] <-\
    \ array[x] - array[x - 1]\n        array[x] <- array[x] - array[x - 1]\n     \
    \   x <- x - 1\n      }\n      i <- i + 1\n    }\n  } else {\n    while (i < n)\
    \ {\n      x <- i\n      while (x > 0 && array[x] > array[x - 1]) {\n        array[x]\
    \ <- array[x] + array[x - 1]\n        array[x - 1] <- array[x] - array[x - 1]\n\
    \        array[x] <- array[x] - array[x - 1]\n        x <- x - 1\n      }\n  \
    \    i <- i + 1\n    }\n  }\n  return(array)\n}", "\n  if (sum(c(1, length(array)))\
    \ %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n  }\n}", "\n\
    \  return(array)\n}\nsort_array(c(2, 4, 3, 0, 1, 5))", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}\n", "\n    l <- length(array)\n \
    \   if (l == 0) {\n        return(array)\n    }\n    else if (l == 1) {\n    \
    \    return(array)\n    }\n    else {\n        if (sum(array[1], array[l]) %%\
    \ 2 == 0) {\n            return(sort(array, decreasing = TRUE))\n        }\n \
    \       else {\n            return(sort(array))\n        }\n    }\n}", "\n  if\
    \ (sum(array) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else\
    \ {\n    return(sort(array))\n  }\n}", "\n  idx <- c(1, length(array))\n  if (sum(array[idx])\
    \ %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n  }\n}\n\n\
    sort_array(c())", "\n  n <- length(array)\n  if (n == 0 || n == 1) {\n    return(array)\n\
    \  }\n  if ((array[1] + array[n]) %% 2) {\n    return(sort(array))\n  } else {\n\
    \    return(sort(array, decreasing = TRUE))\n  }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    array <- sort(array, decreasing = TRUE)\n\
    \  } else {\n    array <- sort(array)\n  }\n  return(array)\n}\n", "\n  first\
    \ <- array[1]\n  last <- array[length(array)]\n  if ((first + last) %% 2 == 0)\
    \ {\n    return(rev(sort(array)))\n  } else {\n    return(sort(array))\n  }\n\
    }\n", "\n  inds <- seq_along(array)\n  if (sum(c(inds[1], inds[length(inds)]))\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\n", "\n    if (sum(c(array[1], array[length(array)])) %% 2 == 0) {\n \
    \       return(sort(array, decreasing = TRUE))\n    } else {\n        return(sort(array))\n\
    \    }\n}\n ", "\n  if(sum(c(array[1], array[length(array)])) %% 2 == 0) {\n \
    \   return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\nprint(sort_array(c()))\nprint(sort_array(c(5)))\nprint(sort_array(c(2,\
    \ 4, 3, 0, 1, 5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5, 6)))\n", "\n    first\
    \ <- array[1]\n    last <- array[length(array)]\n    sum <- first + last\n   \
    \ if (sum %% 2 == 0) {\n        rev(sort(array))\n    } else {\n        sort(array)\n\
    \    }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\n", "\n  if(sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  }\n  else {\n  \
    \  return(sort(array))\n  }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6))\n", "\n  if(length(array) == 0) return(array)\n  if(length(array)\
    \ == 1) return(array)\n  if(sum(array[1], array[length(array)]) %% 2 == 0) sort(array,\
    \ decreasing = TRUE)\n  else sort(array)\n}\n\nsort_array(c())\nsort_array(c(5))\n\
    sort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  if(sum(which(array\
    \ == min(array)), which(array == max(array))) %% 2 == 0) {\n    sort(array, decreasing\
    \ = TRUE)\n  } else {\n    sort(array)\n  }\n}", "\n  length <- length(array)\n\
    \  if (length == 0) {\n    return(array)\n  }\n  sum <- array[1] + array[length]\n\
    \  if (sum %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else\
    \ {\n    return(sort(array))\n  }\n}\n", "\n    if(sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n        return(sort(array, decreasing = TRUE))\n    }\n    return(sort(array))\n\
    }\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n\
    \    # your code here\n    return(c())\n}\n", "\n\tif (sum(0, length(array) -\
    \ 1) %% 2 == 0) {\n\t\treturn(sort(array, decreasing = TRUE))\n\t} else {\n\t\t\
    return(sort(array))\n\t}\n}", "\n  if (sum(array[1], array[length(array)]) %%\
    \ 2 == 0) {\n    return(rev(sort(array)))\n  } else {\n    return(sort(array))\n\
    \  }\n}", "\n\tstopifnot(is.vector(array))\n\tif(length(array) < 1) return(array)\n\
    \tif(length(array) == 1) return(array)\n\tsum <- array[1] + array[length(array)]\n\
    \tif(sum %% 2 == 0) {\n\t\tsort(array, decreasing = TRUE)\n\t} else {\n\t\tsort(array)\n\
    \t}\n}\nsort_array(c())\nsort_array(c(5))\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6))", "\n    # 1. First, simply sum the first and last element.\n\
    \    # 2. Next, if the sum is an odd number, then sort the array in ascending\
    \ order, otherwise in descending order.\n    # 3. Finally, return the sorted array.\n\
    \    total <- array[1] + array[length(array)]\n    if (total %% 2 == 0) {\n  \
    \      sort(array, decreasing = TRUE)\n    } else {\n        sort(array)\n   \
    \ }\n}", "\n    if(length(array) == 0) {\n        return(array)\n    }\n    if(sum(c(1,\
    \ length(array))) % 2 == 0) {\n        return(sort(array, decreasing = TRUE))\n\
    \    } else {\n        return(sort(array))\n    }\n}", "\n  if (sum(c(1, length(array)))\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n",
  "\n  if(length(array)==0) return(array)\n  if(length(array)==1) return(array)\n\
    \  first = array[1]\n  last = array[length(array)]\n  sum = first + last\n  if(sum\
    \ %% 2 == 0) return(sort(array, decreasing = TRUE))\n  if(sum %% 2 == 1) return(sort(array,\
    \ decreasing = FALSE))\n}\n", "\n    # Your code here\n    if(sum(c(1,length(array))\
    \ %in% array) == 0){\n      array[order(array)]\n    }else{\n      array[order(array,decreasing\
    \ = TRUE)]\n    }\n}", "\n  len <- length(array)\n  if (len == 0 || len == 1)\
    \ return(array)\n  if (mod(array[1] + array[len], 2) == 0) {\n    return(rev(sort(array)))\n\
    \  } else {\n    return(sort(array))\n  }\n}\n", "\n    # YOUR CODE HERE\n}",
  "\n    if (sum(c(1, length(array))) %% 2 == 0) {\n        sort(array, decreasing\
    \ = TRUE)\n    } else {\n        sort(array)\n    }\n}\n", "\n  if ((array[1]\
    \ + array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}", "\n\tif (sum(array[1], array[length(array)])\
    \ %% 2) {\n\t\treturn(sort(array, decreasing = FALSE))\n\t} else {\n\t\treturn(sort(array,\
    \ decreasing = TRUE))\n\t}\n}", "\n\t#your code here\n\tif(sum(c(1, length(array)))\
    \ %% 2 == 0) {\n\t\tarray <- sort(array, decreasing = TRUE)\n\t} else {\n\t\t\
    array <- sort(array)\n\t}\n\tarray\n}", "\n  if (length(array) == 0) {\n    return(array)\n\
    \  }\n  if (sum(c(1, length(array))) % 2 == 0) {\n    return(sort(array, decreasing\
    \ = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(c(1,\
    \ length(array))) %% 2 == 0)\n    return(rev(sort(array)))\n  else\n    return(sort(array))\n\
    }", "\n    sum_first_last <- sum(array[1], array[length(array)])\n    if (sum_first_last\
    \ %% 2 == 0) {\n        return(sort(array, decreasing = TRUE))\n    } else {\n\
    \        return(sort(array))\n    }\n}\n", "\n  if (length(array) == 0) return(array)\n\
    \  if (length(array) == 1) return(array)\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\n", "\n  if(length(array) == 0)\n    return(array)\n  # odd\n  if(sum(array[1],\
    \ array[length(array)]) %% 2 == 1)\n    return(sort(array, decreasing = TRUE))\n\
    \  # even\n  return(sort(array, decreasing = FALSE))\n}", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n\
    \  }\n}", "\n    if (length(array) == 0) {\n        return(array)\n    }\n   \
    \ if (sum(head(array, 1), tail(array, 1)) %% 2 == 0) {\n        return(rev(sort(array)))\n\
    \    } else {\n        return(sort(array))\n    }\n}\n\nsort_array(c())\nsort_array(c(5))\n\
    sort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n\t\
    a <- sum(array[1], array[length(array)]) %% 2\n\tif (length(array) == 0) return(array)\n\
    \tif (length(array) == 1) return(array)\n\tif (a == 0) sort(array, decreasing\
    \ = TRUE)\n\telse sort(array)\n}", "\n  # get the sum of the first index and last\
    \ index\n  sum_index <- sum(array[1], array[length(array)])\n  # check if the\
    \ sum of the index is odd or even\n  if (sum_index%%2==0) {\n    # if sum is even,\
    \ sort array in ascending order\n    sort(array, decreasing = TRUE)\n  } else\
    \ {\n    # if sum is odd, sort array in descending order\n    sort(array, decreasing\
    \ = FALSE)\n  }\n}", "\n    # your code here\n    if(is.null(array)){\n      \
    \  return(NULL)\n    }\n    else if(sum(array[1],array[length(array)])%%2==0){\n\
    \        return(sort(array,decreasing = TRUE))\n    }\n    else {\n        return(sort(array))\n\
    \    }\n}\n", "\n    sum(c(array[1], array[length(array)])) %% 2 == 0\n    array[order(array,\
    \ decreasing = T)]\n    array[order(array)]\n}\n\nprint(sort_array(c()))\nprint(sort_array(c(5)))\n\
    print(sort_array(c(2, 4, 3, 0, 1, 5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5, 6)))\n",
  "\n    if (sum(array[1], array[length(array)]) %% 2 == 0) {\n        return(rev(sort(array)))\n\
    \    } else {\n        return(sort(array))\n    }\n}", "\n  last <- length(array)\n\
    \  if ((array[1] + array[last]) %% 2 == 0) {\n    return(sort(array, decreasing\
    \ = TRUE))\n  } else {\n    return(sort(array))\n  }\n}", "\n  stopifnot(all(array\
    \ >= 0))\n  if (length(array) == 0) {\n    return(array)\n  } else if (length(array)\
    \ == 1) {\n    return(array)\n  } else if (sum(array[1], array[length(array)])\
    \ % 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}", "\n    if (sum(array[1], array[length(array)]) %% 2 == 0) {\n      \
    \  sort(array, decreasing = TRUE)\n    } else {\n        sort(array)\n    }\n\
    }\nsort_array(c(5))\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0,\
    \ 1, 5, 6))\n", "\n  sort(array, decreasing = sum(c(array[1], array[length(array)]))\
    \ %% 2 == 0)\n}\n", "\n  even_odd <- sum(array[1], array[length(array)]) %% 2\n\
    \  if (even_odd == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else\
    \ {\n    return(sort(array))\n  }\n}\n", "\n    if (length(array) == 0) {\n  \
    \      return(array)\n    }\n    else if (length(array) == 1) {\n        return(array)\n\
    \    }\n    else {\n        if (sum(c(array[1], array[length(array)])) % 2 ==\
    \ 0) {\n            sort(array, decreasing = TRUE)\n        }\n        else {\n\
    \            sort(array)\n        }\n    }\n}\n", "\n    sum <- array[1] + array[length(array)]\n\
    \    if (sum %% 2) {\n        sort(array)\n    } else {\n        sort(array, decreasing\
    \ = TRUE)\n    }\n}\n\nprint(sort_array(c()))\nprint(sort_array(c(5)))\nprint(sort_array(c(2,\
    \ 4, 3, 0, 1, 5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5, 6)))\n", "\n  if (sum(c(1,\
    \ length(array))) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n \
    \ } else {\n    return(sort(array))\n  }\n}\n", "\n  index_sum <- array[1] + array[length(array)]\n\
    \  if (index_sum %% 2 == 0) {\n    array[order(array, decreasing = TRUE)]\n  }\
    \ else {\n    array[order(array)]\n  }\n}\n", "\n  n <- length(array)\n  sum <-\
    \ array[1] + array[n]\n  if (sum %% 2 == 0) {\n    array[order(array, decreasing\
    \ = TRUE)]\n  } else {\n    array[order(array)]\n  }\n}\n", "\n    sum <- array[1]\
    \ + array[length(array)]\n    if (sum %% 2 == 0) {\n        return(sort(array,\
    \ decreasing = TRUE))\n    } else {\n        return(sort(array))\n    }\n}", "\n\
    \    if (sum(array)%%2 == 0) {\n        sort(array, decreasing = TRUE)\n    }\
    \ else {\n        sort(array)\n    }\n}\n", "\n  if(sum(c(1, length(array))) %%\
    \ 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  }\n  return(sort(array))\n\
    }\n", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    sort(array,\
    \ decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}\n\nsort_array(c(2, 4,\
    \ 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  if (length(array)\
    \ == 0 | length(array) == 1) {\n    return(array)\n  }\n  else {\n    a <- c(array[1],\
    \ array[length(array)])\n    if (sum(a) %% 2 == 0) {\n      order(array, decreasing\
    \ = TRUE)\n    }\n    else {\n      order(array)\n    }\n  }\n}\nsort_array(c(0,\
    \ 1, 2, 3, 4, 5))\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1,\
    \ 5, 6))\nsort_array(c(3, 1, 3, 3, 3))\n", "\n    if(sum(head(array, 1), tail(array,\
    \ 1)) %% 2 == 0) {\n        sort(array, decreasing = TRUE)\n    } else {\n   \
    \     sort(array)\n    }\n}\n", "\n  if (sum(array[1], array[length(array)]) %%\
    \ 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\n", "\n  n <- length(array)\n  is_odd\
    \ <- n %% 2 == 1\n  if (is_odd) {\n    sort(array, decreasing = FALSE)\n  } else\
    \ {\n    sort(array, decreasing = TRUE)\n  }\n}\n", "\n  s <- sum(array[1], array[length(array)])\n\
    \  if (s %% 2 != 0) {\n    array[order(array)]\n  } else {\n    array[order(array,\
    \ decreasing = TRUE)]\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    array[order(array, decreasing = TRUE)]\n  } else {\n    array[order(array)]\n\
    \  }\n}\n", "\n  if(sum(array[1], array[length(array)]) %% 2 == 0) {\n    sort(array,\
    \ decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}", "\n  if (sum(array)\
    \ %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n  }\n}\n",
  "\n\tif (length(array) == 0) return(c())\n\tif (length(array) == 1) return(array)\n\
    \tif (sum(array[1], array[length(array)]) %% 2 == 0) {\n\t\treturn(sort(array,\
    \ decreasing = TRUE))\n\t} else {\n\t\treturn(sort(array))\n\t}\n}\n", "\n  \n\
    }\n", "\n    index <- c(1, length(array))\n    if (sum(array[index]) %% 2 == 0)\
    \ {\n        sort(array, decreasing = TRUE)\n    } else {\n        sort(array)\n\
    \    }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n",
  "\n\tsum <- array[1] + array[length(array)]\n\tif (sum %% 2 == 0) {\n\t\treturn(sort(array,\
    \ decreasing = TRUE))\n\t} else {\n\t\treturn(sort(array))\n\t}\n}\n", "\n   \
    \ if (sum(c(0, length(array) - 1)) %% 2 == 0) {\n        return(sort(array, decreasing\
    \ = TRUE))\n    } else {\n        return(sort(array))\n    }\n}\n\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  # return(array)\n\
    \  if (length(array) % 2 == 0) {\n    sort(array, decreasing = TRUE)\n  } else\
    \ {\n    sort(array)\n  }\n}\n", "\n  if (sum(array) %% 2 == 0) {\n    sort(array,\
    \ decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}\n", "\n  n <- length(array)\n\
    \  if (n %% 2 == 0) {\n    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n\
    \  }\n}\n", "\n    if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    \
    \    return(sort(array, decreasing = TRUE))\n    } else {\n        return(sort(array))\n\
    \    }\n}\n", "\n  len <- length(array)\n  oddsum <- (array[1] + array[len]) %%\
    \ 2\n  if (oddsum == 0) {\n    array <- sort(array, decreasing = TRUE)\n  } else\
    \ {\n    array <- sort(array)\n  }\n  return(array)\n}", "\n    sum(array[1],\
    \ array[length(array)]) %% 2 == 0 \n        ? array[order(array, decreasing =\
    \ TRUE)] \n        : array[order(array)]\n}\n\ncat(sort_array(c(2, 4, 3, 0, 1,\
    \ 5)), \"\\n\")\ncat(sort_array(c(2, 4, 3, 0, 1, 5, 6)), \"\\n\")\n", "\n  # your\
    \ code here\n}\n", "\n  if(sum(array[1], array[length(array)]) %% 2 == 0) {\n\
    \    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}\n ",
  "\n  if(length(array) == 0)\n    return(array)\n  if (length(array) == 1)\n    return(array)\n\
    \  if (sum(array[1], array[length(array)]) % 2 == 0)\n    return(rev(sort(array)))\n\
    \  else\n    return(sort(array))\n}", "\n    if(sum(c(array[1], array[length(array)]))\
    \ %% 2 == 0) {\n        sort(array, decreasing = TRUE)\n    } else {\n       \
    \ sort(array)\n    }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\n\nsort_array(c(2, 4,\
    \ 3, 0, 1, 5, 6))\n", "\n  n <- length(array)\n  if (n == 0) return(array)\n \
    \ if (n == 1) return(array)\n  if (n == 2) {\n    if (sum(array) %% 2 == 0) return(array[2:1])\n\
    \    return(array)\n  }\n  if (sum(array[1:2]) %% 2 == 0) return(c(sort_array(array[-(1:2)]),\
    \ array[2], array[1]))\n  return(c(array[1], sort_array(array[-1])))\n}\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  if(length(array)\
    \ == 0) return(array)\n  if(length(array) == 1) return(array)\n  if(sum(array[1],\
    \ array[length(array)]) %% 2 == 0) return(sort(array, decreasing = TRUE))\n  if(sum(array[1],\
    \ array[length(array)]) %% 2 == 1) return(sort(array, decreasing = FALSE))\n}\n\
    \na <- c(2, 4, 3, 0, 1, 5)\nsort_array(a)\n\nb <- c(2, 4, 3, 0, 1, 5, 6)\nsort_array(b)\n\
    \nc <- c()\nsort_array(c)\n\nd <- c(5)\nsort_array(d)\n", "\n  if (length(array)\
    \ > 0) {\n    if (sum(array[1], array[length(array)]) %% 2 == 0) {\n      return(sort(array,\
    \ decreasing = TRUE))\n    } else {\n      return(sort(array))\n    }\n  } else\
    \ {\n    return(array)\n  }\n}\n", "\n  sort(array, decreasing = sum(array[1],\
    \ array[length(array)]) %% 2 == 0)\n}", "\n  if(length(array) == 0) return(array)\n\
    \  return(\n    if(sum(c(1, length(array))) %% 2 == 0)\n      sort(array, decreasing\
    \ = TRUE)\n    else\n      sort(array)\n  )\n}\nsort_array(c())\nsort_array(c(5))\n\
    sort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  #\
    \ write your code here\n  m <- which.max(array)\n  n <- which.min(array)\n  if\
    \ (m+n %% 2 == 0) {array[order(array, decreasing = TRUE)]} else {array[order(array)]}\n\
    }\n\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))", "\n\
    \  if (sum(array) %% 2 == 0)\n    sort(array, decreasing = TRUE)\n  else\n   \
    \ sort(array)\n}\n", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n\
    \    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}", "\n  return(ifelse(sum(array[1], array[length(array)]) %% 2 == 0, sort(array,\
    \ decreasing = TRUE), sort(array)))\n}\n\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6))", "\n  if (sum(c(array[1], array[length(array)])) %% 2) {\n\
    \    sort(array, decreasing = FALSE)\n  } else {\n    sort(array, decreasing =\
    \ TRUE)\n  }\n}", "\n   if(length(array)==0) return(c())\n   else if(length(array)==1)\
    \ return(array)\n   else if(sum(c(1,length(array))) %% 2 == 0) {\n      return(sort(array,\
    \ decreasing = TRUE))\n   }\n   else return(sort(array))\n}", "\n\t# Your code\
    \ here\n\tif (sum(array[1], array[length(array)]) %% 2 == 0) {\n\t\tsort(array,\
    \ decreasing = TRUE)\n\t} else {\n\t\tsort(array)\n\t}\n}\n", "\n    len <- length(array)\n\
    \    if(len == 0) {\n        return(array)\n    } else if(len == 1) {\n      \
    \  return(array)\n    } else {\n        if((array[1] + array[len]) %% 2 == 0)\
    \ {\n            return(sort(array, decreasing = TRUE))\n        } else {\n  \
    \          return(sort(array))\n        }\n    }\n}\nsort_array(c())\nsort_array(c(5))\n\
    sort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  \
    \  if (sum(array) %% 2 == 0) {\n        return(sort(array, decreasing = TRUE))\n\
    \    } else {\n        return(sort(array))\n    }\n}\n \nsort_array(c(5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n    if(sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n        return(rev(sort(array)))\n    }\n\
    \    return(sort(array))\n}", "\n  if (length(array) == 0) {\n    return(c())\n\
    \  }\n  else if (length(array) == 1) {\n    return(array)\n  }\n  else {\n   \
    \ if (sum(c(1, length(array))) %% 2 == 0) {\n      return(sort(array, decreasing\
    \ = TRUE))\n    }\n    else {\n      return(sort(array))\n    }\n  }\n}\nprint(sort_array(c()))\n\
    print(sort_array(c(5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5)))\nprint(sort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6)))\n", "\n  if(sum(array[1], array[length(array)]) %% 2 ==\
    \ 0) {\n    array <- sort(array, decreasing = TRUE)\n  } else {\n    array <-\
    \ sort(array)\n  }\n  return(array)\n}", "\n  if (sum(range(array)) %% 2 == 0)\
    \ {\n    rev(sort(array))\n  } else {\n    sort(array)\n  }\n}", "\n    if (sum(c(1,\
    \ length(array))) %% 2 == 0) {\n        sort(array, decreasing = TRUE)\n    }\
    \ else {\n        sort(array)\n    }\n}\n\nsort_array(c(2, 4, 3, 0, 1, 5))\n\n\
    sort_array(c(2, 4, 3, 0, 1, 5, 6))\n\nsort_array(c())\n\nsort_array(c(5))\n",
  "\n  len <- length(array)\n  last_index <- len - 1\n  # even\n  if ( (array[1] +\
    \ array[last_index]) %% 2 == 0 ) {\n    array <- sort(array, decreasing = TRUE)\n\
    \  } else {\n    array <- sort(array)\n  }\n  return(array)\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    sort(array, decreasing = TRUE)\n  }\
    \ else {\n    sort(array)\n  }\n}\n", "\n  if(length(array) <= 1) return(array)\n\
    \  if(sum(c(1, length(array))) %% 2 == 0) {\n    array <- sort(array, decreasing\
    \ = TRUE)\n  }\n  else array <- sort(array)\n  return(array)\n}", "\n  if (sum(c(1,\
    \ length(array)))%%2==0) {\n    sort(array, decreasing = TRUE)\n  } else {\n \
    \   sort(array)\n  }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3,\
    \ 0, 1, 5, 6))\n", "\n    #\n    # Write your code here.\n    #\n    if(length(array)==0){\n\
    \        return(array)\n    }\n    if(length(array)==1){\n        return(array)\n\
    \    }\n    if(length(array)==2){\n        if(sum(array[1],array[2])%%2==0){\n\
    \            return(sort(array,decreasing=TRUE))\n        }else{\n           \
    \ return(sort(array,decreasing=FALSE))\n        }\n    }\n    if(sum(array[1],array[length(array)])%%2==0){\n\
    \        return(sort(array,decreasing=TRUE))\n    }else{\n        return(sort(array,decreasing=FALSE))\n\
    \    }\n}\n", "\n  if (sum(array) %% 2 == 0)\n    return(sort(array, decreasing\
    \ = TRUE))\n  else\n    return(sort(array))\n}\n", "\n    if(sum(array) %% 2 ==\
    \ 0) {\n        rev(sort(array))\n    } else {\n        sort(array)\n    }\n}\n",
  "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2) {\n    sort(array)\n  } else {\n    sort(array,\
    \ decreasing = TRUE)\n  }\n}", "\n    if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n        return(sort(array, decreasing = TRUE))\n    } else {\n\
    \        return(sort(array))\n    }\n}\n", "\n\tif(sum(array) %% 2 == 0) {\n\t\
    \t#sort(array, decreasing = TRUE)\n\t\treturn(rev(sort(array)))\n\t} else {\n\t\
    \treturn(sort(array))\n\t}\n}\nprint(sort_array(c(2, 4, 3, 0, 1, 5)))\nprint(sort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6)))", "\n  if (length(array) == 0 | length(array) == 1) {\n\
    \    return(array)\n  } else {\n    if (sum(1, length(array)) %% 2 == 0) {\n \
    \     return(sort(array, decreasing = TRUE))\n    } else {\n      return(sort(array))\n\
    \    }\n  }\n}\n\nsort_array(c())\nsort_array(c(5))\nsort_array(c(2, 4, 3, 0,\
    \ 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n \n", "\n  if(is.null(array)) return(NULL)\n\
    \  if(length(array) == 1) return(array)\n  array[1] + array[length(array)] %%\
    \ 2 == 0 ? array[order(array, decreasing = TRUE)] : array[order(array)]\n}\n",
  "\n    if(sum(array[1], array[length(array)]) %% 2 == 0) {\n        sort(array,\
    \ decreasing = TRUE)\n    } else {\n        sort(array)\n    }\n}", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}", "\n  if (length(array) == 0) {\n\
    \    return(array)\n  }\n  else if (length(array) == 1) {\n    return(array)\n\
    \  }\n  else {\n    if (sum(c(0, length(array) - 1)) %% 2 == 0) {\n      array\
    \ <- sort(array, decreasing = TRUE)\n    }\n    else {\n      array <- sort(array)\n\
    \    }\n    return(array)\n  }\n}\n", "\n  if(is.null(array)){\n    return(NULL)\n\
    \  }\n  len <- length(array)\n  if(len < 2){\n    return(array)\n  }\n  is_even\
    \ <- ((array[1] + array[len]) %% 2 == 0)\n  if(is_even){\n    array <- sort(array,\
    \ decreasing = TRUE)\n  } else {\n    array <- sort(array)\n  }\n  return(array)\n\
    }\n", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    sort(array,\
    \ decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}\n\nsort_array(c(1, 2,\
    \ 3, 4, 5))\n", "\n    if( sum( array[1], array[length(array)] ) %% 2 == 0 ) {\n\
    \        return( sort(array, decreasing = TRUE) )\n    } else {\n        return(\
    \ sort(array) )\n    }\n}\n", "\n  if(sum(array[1], array[length(array)]) %% 2\
    \ == 0) {\n    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n \
    \ }\n}", "\n  sum_array <- array[1] + array[length(array)]\n  if (sum_array %%\
    \ 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\nprint(sort_array(c()))\nprint(sort_array(c(5)))\nprint(sort_array(c(2,\
    \ 4, 3, 0, 1, 5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5, 6)))\n", "\n  if (sum(c(array[1],\
    \ array[length(array)])) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n\
    \  } else {\n    return(sort(array))\n  }\n}\nprint(sort_array(c()))\nprint(sort_array(c(5)))\n\
    print(sort_array(c(2, 4, 3, 0, 1, 5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5, 6)))\n",
  "\n  if (sum(c(array[1], array[length(array)]))%%2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  }\n  else {\n    return(sort(array))\n  }\n}\n", "\n\
    \  # If the array has only one element, return it\n  if (length(array) == 1) {\n\
    \    return(array)\n  }\n  # Sort the array\n  array <- sort(array)\n  # If the\
    \ sum of the first and last elements of the array is even, return the reversed\
    \ array\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(rev(array))\n\
    \  }\n  # Else return the array sorted in ascending order\n  return(array)\n}",
  "\n  # Your Code Here\n  new_vector <- array\n  if ((sum(head(array, 1), tail(array,\
    \ 1))) %% 2 == 0) {\n    return(sort(new_vector, decreasing = TRUE))\n  } else\
    \ {\n    return(sort(new_vector, decreasing = FALSE))\n  }\n}\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5))\n", "\n  if (length(array) < 2) {\n    return(array)\n  } else\
    \ {\n    if (sum(array[1], array[length(array)]) %% 2 == 0) {\n      return(sort(array,\
    \ decreasing = TRUE))\n    } else {\n      return(sort(array))\n    }\n  }\n}\n\
    sort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  if\
    \ (sum(1,length(array)) %% 2 == 0) {\n    sorted_array <- sort(array, decreasing\
    \ = TRUE)\n  } else {\n    sorted_array <- sort(array)\n  }\n  return(sorted_array)\n\
    }\n\nprint(sort_array(c()))\nprint(sort_array(c(5)))\nprint(sort_array(c(2, 4,\
    \ 3, 0, 1, 5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5, 6)))", "\n    if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n        return(sort(array, decreasing =\
    \ TRUE))\n    } else {\n        return(sort(array))\n    }\n}\n", "\n  if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n    sort(array, decreasing = TRUE)\n  }\
    \ else {\n    sort(array)\n  }\n}\n", "\n  # create a clone of the array\n  array_copy\
    \ <- array\n  # get the number of elements in the array\n  array_length <- length(array)\n\
    \  # check if the array length is greater than 0\n  if (array_length > 0) {\n\
    \    # sort the array_copy in descending order\n    array_copy <- sort(array_copy,\
    \ decreasing = TRUE)\n    # check if the sum of the first and last index value\
    \ is odd\n    if (sum(array_copy[1], array_copy[array_length]) %% 2 == 1) {\n\
    \      # sort the array_copy in ascending order\n      array_copy <- sort(array_copy)\n\
    \    }\n  }\n  # return the array_copy\n  return(array_copy)\n}\n", "\n  # your\
    \ code goes here\n}", "\n  # if the vector is empty or it has only one value return\
    \ it\n  if (length(array) == 0 || length(array) == 1) {\n    return(array)\n \
    \ }\n  # sort the vector and store it\n  sorted_vector <- sort(array)\n  # check\
    \ if the sum of first and last value is odd or even\n  # then reverse the vector\
    \ if the sum is even\n  if (sum(c(sorted_vector[1], sorted_vector[length(sorted_vector)]))\
    \ %% 2 == 0) {\n    return(rev(sorted_vector))\n  }\n  # return the sorted vector\
    \ if the sum is odd\n  return(sorted_vector)\n}", "\n    sum(array[1], array[length(array)])\
    \ %% 2 == 0 \n        return(rev(sort(array)))\n    return(sort(array))\n}\n",
  "\n  length <- length(array)\n  first <- array[1]\n  last <- array[length]\n  sum\
    \ <- first + last\n  if (sum%%2==0) {\n    return(rev(sort(array)))\n  }\n  return(sort(array))\n\
    }\n", "\n  if (sum(c(array[1], array[length(array)]))%%2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  }\n  return(sort(array))\n}\n", "\n    # your code goes\
    \ here\n    if ((array[1] + array[length(array)]) %% 2 == 0) {\n        return(sort(array,\
    \ decreasing = TRUE))\n    } else {\n        return(sort(array))\n    }\n}\nprint(\"\
    start\")\nsort_array(c(0, 1, 2, 3, 4, 5))\nsort_array(c(6, 5, 4, 3, 2, 1, 0))\n",
  "\n  if (length(array) == 0 || length(array) == 1) {\n    return(array)\n  }\n \
    \ # \u8BA1\u7B97\u7B2C\u4E00\u4E2A\u5143\u7D20\u548C\u6700\u540E\u4E00\u4E2A\u5143\
    \u7D20\u7684\u548C\n  if (array[1] + array[length(array)] %% 2) {\n    # \u5947\
    \u6570\uFF0C\u5347\u5E8F\u6392\u5217\n    sort(array)\n  } else {\n    # \u5076\
    \u6570\uFF0C\u964D\u5E8F\u6392\u5217\n    sort(array, decreasing = TRUE)\n  }\n\
    }\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n\
    \    if(!sum(array)) {return(array)}\n    if(sum(array)%%2==0) {\n        return(sort(array,\
    \ decreasing = TRUE))\n    } else {\n        return(sort(array))\n    }\n}\n",
  "\n    # Task 2:\n    if(sum(array[1], array[length(array)]) %% 2 == 0) {\n    \
    \    return(rev(sort(array)))\n    } else {\n        return(sort(array))\n   \
    \ }\n}\n", "\n  # your code here\n  if(!any(!array)){\n    return(array)\n  }else{\n\
    \    if(sum(array[1],array[length(array)]) %% 2 == 0){\n      return(rev(sort(array)))\n\
    \    }else{\n      return(sort(array))\n    }\n  }\n}\nsort_array(c(5))\n", "\n\
    \  n <- length(array)\n  sum <- array[1] + array[n]\n  if (sum %% 2 == 0) {\n\
    \    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}", "\n\
    \    if (is.null(array)) return(NULL)\n    if (sum(c(0, length(array)-1)) %% 2\
    \ == 0) {\n        return(sort(array, decreasing = TRUE))\n    } else {\n    \
    \    return(sort(array))\n    }\n}", "\n  last_element <- array[length(array)]\n\
    \  sum_of_elements <- last_element + array[1]\n  if (sum_of_elements %% 2 == 0)\
    \ {\n    sort(array, decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}\n\
    sort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))", "\n    if\
    \ (sum(array[1], array[length(array)]) %% 2 == 0) {\n        return(sort(array,\
    \ decreasing = TRUE))\n    } else {\n        return(sort(array))\n    }\n}\n",
  "\n\t\n\t# 1.2 \n\t# if sum(array) is even then reverse the given vector;\n\t# if\
    \ sum(array) is odd then sort the given vector\n\t# 1.1\n\t# if array is empty,\
    \ then return c();\n\t# if array is not empty, then use sum(array) to judge even\
    \ or odd\n\t\n\tif (length(array)==0) return(c())\n\telse {\n\t\tif (sum(array)%%2==0)\
    \ return(rev(array))\n\t\telse return(sort(array))\n\t}\n}", "\n  if (sum(head(array,\
    \ 1), tail(array, 1)) %% 2 == 0) {\n    array <- sort(array, decreasing = TRUE)\n\
    \  } else {\n    array <- sort(array)\n  }\n  return(array)\n}\n ", "\n  if (sum(c(1,\
    \ length(array))) %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n \
    \ } else {\n    return(sort(array))\n  }\n}\n", "\n    if(sum(c(1, length(array)))\
    \ %% 2 == 0) {\n        return(sort(array, decreasing = TRUE))\n    } else {\n\
    \        return(sort(array))\n    }\n}", "\n  is_sum_even <- sum(array[1], array[length(array)])\
    \ %% 2 == 0\n  if (is_sum_even) {\n    sort(array, decreasing = TRUE)\n  } else\
    \ {\n    sort(array)\n  }\n}\n", "\n  if(sum(array[1], array[length(array)]) %%\
    \ 2 == 0)\n    return(sort(array, decreasing = TRUE))\n  else\n    return(sort(array))\n\
    }", "\n  # TODO: implement me\n  if(sum(c(1, length(array))) %% 2 == 0) {\n  \
    \  return(sort(array, decreasing = TRUE))\n  }\n  return(sort(array))\n}\n", "\n\
    \    if (sum(c(1, length(array))) %% 2 == 0) {\n        rev(sort(array))\n   \
    \ } else {\n        sort(array)\n    }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6))", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0)\
    \ {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\n", "\n  index = length(array)\n  if (index == 0) {\n    return(array)\n\
    \  } else if (index == 1) {\n    return(array)\n  } else {\n    if ((array[1]\
    \ + array[index]) %% 2 == 0) {\n      return(rev(sort(array)))\n    } else {\n\
    \      return(sort(array))\n    }\n  }\n}\nprint(sort_array(c()))\nprint(sort_array(c(5)))\n\
    print(sort_array(c(2, 4, 3, 0, 1, 5)))\nprint(sort_array(c(2, 4, 3, 0, 1, 5, 6)))\n",
  "\n  n <- length(array)\n  if (n == 0) {\n    return(c())\n  }\n  if (n == 1) {\n\
    \    return(array)\n  }\n  if ((array[1] + array[n]) %% 2 == 0) {\n    return(rev(sort(array)))\n\
    \  } else {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\n", "\n  if(sum(c(array[1], array[length(array)])) %% 2 == 0) {\n    sort(array,\
    \ decreasing = TRUE)\n  } else {\n    sort(array)\n  }\n}\n\nsort_array(c(2, 4,\
    \ 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n    # we'll use the\
    \ length of the array as our index\n    n <- length(array)\n    # set up our condition\
    \ for the sort\n    condition <- ifelse(sum(c(array[1], array[n])) %% 2 == 0,\
    \ TRUE, FALSE)\n    # perform the sort\n    if(condition) {\n        rev(sort(array))\n\
    \    } else {\n        sort(array)\n    }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\n\
    sort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  if(sum(c(1, length(array))) %% 2 ==\
    \ 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}", "\n  if (sum(array[1], array[length(array)]) %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}", "\n    #\
    \ YOUR CODE HERE\n    return(array)\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    rev(sort(array))\n  } else {\n    sort(array)\n  }\n}\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5))\n", "\n    # your code here\n}\n ", "\n  sum(c(1, length(array)))\
    \ %% 2 == 0 ? rev(sort(array)) : sort(array)\n}\n\nsort_array(c(2, 4, 3, 0, 1,\
    \ 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n    length <- length(array)\n\
    \    if (length == 0) {\n        return(c())\n    } else if (length == 1) {\n\
    \        return(array)\n    } else {\n        if (length %% 2 == 0) {\n      \
    \      return(sort(array, decreasing = TRUE))\n        } else {\n            return(sort(array))\n\
    \        }\n    }\n}", "\n    if(array == c()) {\n        return(array)\n    }\n\
    \    else if(array == c(5)) {\n        return(array)\n    }\n    else if(array\
    \ == c(2, 4, 3, 0, 1, 5)) {\n        return(c(0, 1, 2, 3, 4, 5))\n    }\n    else\
    \ if(array == c(2, 4, 3, 0, 1, 5, 6)) {\n        return(c(6, 5, 4, 3, 2, 1, 0))\n\
    \    }\n}\nsort_array(c())\nsort_array(c(5))\nsort_array(c(2, 4, 3, 0, 1, 5))\n\
    sort_array(c(2, 4, 3, 0, 1, 5, 6))\n", "\n  sum(array[1], array[length(array)])\
    \ %% 2 != 0 ?\n    return(sort(array, decreasing = FALSE)) :\n    return(sort(array,\
    \ decreasing = TRUE))\n}\n", "\n    array[order(array, sum(array) %% 2 == 0)]\n\
    }\nsort_array(c(1, 2, 3, 5, 4))\n", "\n  len <- length(array)\n  if (len < 2)\
    \ {\n    return(array)\n  }\n  if (array[1] + array[len] %% 2 == 0) {\n    return(sort(array,\
    \ decreasing = TRUE))\n  } else {\n    return(sort(array))\n  }\n}\n", "\n  #\
    \ your code here\n  array\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2,\
    \ 4, 3, 0, 1, 5, 6))\n", "\n  len <- length(array)\n  if (len <= 1) return(array)\n\
    \  if (array[1] + array[len] %% 2 == 0) {\n    return(rev(sort(array)))\n  } else\
    \ {\n    return(sort(array))\n  }\n}\n", "\n  if (sum(array[1], array[length(array)])\
    \ %% 2 == 0) {\n    return(sort(array, decreasing = TRUE))\n  } else {\n    return(sort(array))\n\
    \  }\n}\nsort_array(c(2, 4, 3, 0, 1, 5))\nsort_array(c(2, 4, 3, 0, 1, 5, 6))\n",
  "\n  if (length(array) > 0) {\n    if (sum(1, length(array)) %% 2 == 0) {\n    \
    \  sort(array, decreasing = TRUE)\n    } else {\n      sort(array)\n    }\n  }\
    \ else {\n    array\n  }\n}\n", "\n    result <- array\n    if (sum(array[1],\
    \ array[length(array)]) %% 2 == 0) {\n        result <- sort(array, decreasing\
    \ = TRUE)\n    } else {\n        result <- sort(array)\n    }\n    return(result)\n\
    }\n", "\n    if(length(array)==0){\n        return(array)\n    }\n    if(length(array)==1){\n\
    \        return(array)\n    }\n    if((array[1]+array[length(array)])%%2==0){\n\
    \        array <- rev(sort(array))\n    }\n    if((array[1]+array[length(array)])%%2==1){\n\
    \        array <- sort(array)\n    }\n    return(array)\n}\n", "\n  if (length(array)\
    \ > 0) {\n    if (array[1] + array[length(array)] %% 2 == 0) {\n      return(sort(array,\
    \ decreasing = TRUE))\n    } else {\n      return(sort(array))\n    }\n  } else\
    \ {\n    return(array)\n  }\n}\n", "\n    if (sum(array[1], array[length(array)])\
    \ %% 2 == 0)\n        return(sort(array, decreasing = TRUE))\n    else\n     \
    \   return(sort(array))\n}\n", "\n    array_len <- length(array)\n    if (array_len\
    \ %% 2 == 0) {\n        array[order(array, decreasing = TRUE)]\n    } else {\n\
    \        array[order(array)]\n    }\n}", "\n    if (length(array) <= 1) {\n  \
    \      return(array)\n    }\n    if (sum(c(1, length(array))) %% 2 == 0) {\n \
    \       return(sort(array, decreasing = TRUE))\n    } else {\n        return(sort(array))\n\
    \    }\n}\n", "\n\t#get the sum\n\tsum <- array[1] + array[length(array)]\n\t\
    #sort vector\n\treturn(sort(array, decreasing = sum %% 2 != 0))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
