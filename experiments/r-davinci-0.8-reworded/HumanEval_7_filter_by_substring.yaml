name: HumanEval_7_filter_by_substring
language: r
prompt: "# Filter an input list of strings only for ones that contain given substring\n\
  # >>> filter_by_substring(c(), 'a')\n# c()\n# >>> filter_by_substring(c('abc', 'bacd',\
  \ 'cde', 'array'), 'a')\n# c('abc', 'bacd', 'array')\nfilter_by_substring <- function(strings,\
  \ substring) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_substring\n    if(!identical(candidate(c(),\
  \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
  \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
  \    if(!identical(candidate(c('xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'),\
  \ 'xx'), c('xxx', 'aaaxxy', 'xxxAAA', 'xxx'))){quit('no', 1)}\n    if(!identical(candidate(c('grunt',\
  \ 'trumpet', 'prune', 'gruesome'), 'run'), c('grunt', 'prune'))){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  strings[grep(substring, strings)]\n}\n", "\n  strings[stringr::str_detect(strings,\
    \ substring)]\n}\n", "\n    substr(strings, start = 1, stop = nchar(substring))\
    \ == substring\n}\n", "\n    return(strings[stri_detect_fixed(strings, substring)])\n\
    }", "\n  strings[grepl(substring, strings)]\n}\n", "\n    strings[grep(substring,\
    \ strings)]\n}\n", "\n  sapply(strings, grepl, pattern = substring) %>%\n    which\
    \ %>%\n    strings[. %in% .]\n}\n", "\n  if (length(strings) == 0) {\n    strings\n\
    \  } else {\n    strings[grep(substring, strings)]\n  }\n}\n", "\n  res <- strings[grepl(substring,\
    \ strings)]\n  return(res)\n}\n", "\n    return(strings[grepl(substring, strings)])\n\
    }\n", "\n    strings[stringr::str_detect(strings, substring)]\n}\n", "\n  # https://stackoverflow.com/questions/19542622/how-to-filter-a-character-vector-in-r\n\
    \  strings[grepl(substring, strings)]\n}", "\n    matches <- c()\n    for (string\
    \ in strings) {\n        if (stringr::str_detect(string, substring)) {\n     \
    \       matches <- c(matches, string)\n        }\n    }\n    return(matches)\n\
    }\n", "\n  return(Filter(function(x) grepl(substring, x), strings))\n}\n", "\n\
    \  # strings <- which(strings == substring)\n  # strings <- strings[which(strings\
    \ == substring)]\n  # strings <- strings[grepl(substring, strings)]\n  # strings\
    \ <- strings[strings %in% substring]\n  # strings <- strings[strings %like% substring]\n\
    \  # strings <- strings[substring %in% strings]\n  # strings <- strings[substring\
    \ %like% strings]\n  strings <- strings[grepl(substring, strings)]\n  strings\n\
    }\n", "\n    return(strings[grepl(substring, strings)])\n}\n", "\n  substrings\
    \ <- sapply(strings, function(x) { grep(substring, x) })\n  return(strings[!sapply(substrings,\
    \ is.null)])\n}\n", "\n    return(strings[grepl(substring, strings)])\n}\n", "\n\
    \    strings[grep(substring, strings)]\n}\n", "\n    return(strings[grepl(substring,\
    \ strings)])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
