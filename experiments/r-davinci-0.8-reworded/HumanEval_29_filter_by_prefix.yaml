name: HumanEval_29_filter_by_prefix
language: r
prompt: "# Filter an input list of strings only for ones that start with a given prefix.\n\
  # >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc', 'bcd',\
  \ 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
  \ prefix) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
  \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
  \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n    grep(sprintf('^%s', prefix), strings, value = TRUE)\n}\n", "\n\
    \  strings[grep(sprintf('^%s', prefix), strings)]\n}\n", "\n    return(Filter(prefix_match(prefix),\
    \ strings))\n}\nprefix_match <- function(prefix) {\n    return(function(s) { return(prefix_match(s,\
    \ prefix)) })\n}\nprefix_match <- function(s, prefix) {\n    return(substr(s,\
    \ 1, nchar(prefix)) == prefix)\n}", "\n    strings[substr(strings, 1, nchar(prefix))\
    \ == prefix]\n}\n", "\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n\
    }\n", "\n  matching_strings <- c()\n  for (string in strings) {\n    if (string\
    \ == '') {\n      break\n    }\n    if (substr(string, 1, 1) == prefix) {\n  \
    \    matching_strings <- c(matching_strings, string)\n    }\n  }\n  return(matching_strings)\n\
    }\n", "\n  substring(x = strings, first = 1, last = nchar(prefix)) == prefix\n\
    }\n", "\n    strings[substr(strings, 1, length(prefix)) == prefix]\n}\n", "\n\
    \  strings[startsWith(strings, prefix)]\n}", "\n  target <- paste0('^', prefix)\n\
    \  return(strings[grep(target, strings)])\n}\n", "\n  return(strings[grep(paste0('^',\
    \ prefix), strings)])\n}\n", "\n    to_keep <- strings[startsWith(strings, prefix)]\n\
    \    if (length(to_keep) == 0) {\n        return(c())\n    }\n    return(to_keep)\n\
    }", "\n  grep(paste('^', prefix, sep=''), strings, value=TRUE)\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[str_detect(strings, paste0('^', prefix))]\n}\n",
  "\n  if (prefix == '') {\n    return(strings)\n  }\n  return(strings[(grepl(paste0('^',\
    \ prefix), strings))])\n}\n", "\n  strings[grepl(paste0('^', prefix), strings)]\n\
    }\n", "\n  strings[grepl(paste0('^', prefix), strings)]\n}", "\n  # Require some\
    \ prefix\n  stopifnot(length(prefix) > 0)\n  # Filter the input\n  regmatches(strings,\
    \ regexpr(paste0('^', prefix), strings))\n}", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}", "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \    res <- strings[startsWith(strings, prefix)]\n    return(res)\n}\n", "\n \
    \ return(strings[grepl(paste('^', prefix, sep=''), strings)])\n}\n", "\n  if (length(strings)\
    \ == 0) return(strings)\n  if (length(prefix) == 0) return(strings)\n  if (grepl(pattern\
    \ = paste0(\"^\", prefix), x = strings))\n    return(strings[grepl(pattern = paste0(\"\
    ^\", prefix), x = strings)])\n  return(c())\n}\n", "\n    strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n", "\n  strings[startsWith(strings, prefix)]\n\
    }\n", "\n  # return those strings starting with a specific prefix\n  return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n", "\n    return(strings[substr(strings, 1,\
    \ nchar(prefix)) == prefix])\n}\n", "\n    pattern <- paste0(\"^\", prefix)\n\
    \    matches <- grep(pattern, strings, fixed = TRUE)\n    strings[matches]\n}\n",
  "\n  if (is.null(strings)) {\n    return(strings)\n  }\n  return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n", "\n    return(Filter(function(s) {nchar(s)\
    \ >= nchar(prefix) && substr(s, 1, nchar(prefix)) == prefix}, strings))\n}\n",
  "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}", "\n    substring(strings, 1, nchar(prefix)) == prefix\n}", "\n\
    \  if (length(strings) == 0) {\n    return(strings)\n  }\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n", "\n    sapply(strings, function(x) {ifelse(startsWith(x,\
    \ prefix), x, NA)})\n}\n", "\n  Filter(function(x) grepl(paste0(\"^\", prefix),\
    \ x), strings)\n}\n", "\n  (strings[startsWith(strings, prefix)])\n}\n", "\n \
    \   return(strings[substr(strings, 1, nchar(prefix)) == prefix])\n}\n", "\n  stringr::str_subset(strings,\
    \ paste0('^', prefix))\n}", "\n    return(strings[startsWith(strings, prefix)])\n\
    }\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n ", "\n    strings[prefix\
    \ %in% sub(\"^\" + prefix, \"\", strings)]\n}\n", "\n    strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    return(Filter(function(x) grepl(paste0('^', prefix),\
    \ x), strings))\n}\n", "\n    Filter(function(s) grepl(paste0(\"^\", prefix),\
    \ s), strings)\n}\n", "\n    return(strings[substr(strings, 1, nchar(prefix))\
    \ == prefix])\n}\n", "\n  return(strings[substr(strings, 1, nchar(prefix)) ==\
    \ prefix])\n}\n", "\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n\
    }\n", "\n  return(strings[grep(prefix, strings)])\n}\n", "\n  return(strings[grepl(paste('^',\
    \ prefix, sep=''), strings)])\n}\n", "\n  grep(pattern = paste0('^', prefix),\
    \ x = strings, value = TRUE)\n}\n", "\n  strings[grep(paste0('^', prefix), strings)]\n\
    }\n", "\n    strings[substr(strings, 1, nchar(prefix)) == prefix]\n}\n", "\n \
    \ strings[strings %in% paste0(prefix, collapse = '|')]\n}\n", "\n    return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n", "\n  if (!is.character(strings))\n    stop('input\
    \ must be a character vector')\n  filter(strings, startsWith(strings, prefix))\n\
    }\n", "\n  regmatches(strings, regexpr(paste0('^', prefix), strings))\n}\n", "\n\
    \    return(strings[startsWith(strings, prefix)])\n}\n", "\n    strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n", "\n    strings[grep(paste0('^', prefix),\
    \ strings)]\n}\n", "\n  return(strings[grep(prefix, strings)])\n}", "\n  return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  x <- strings[startsWith(strings, prefix)]\n  if (length(x)\
    \ == 0) {\n    return(NULL)\n  }\n  return(x)\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n\
    }\n", "\n    grep(sprintf('^%s', prefix), strings, value = TRUE)\n}\n", "\n  \
    \  return(grep(prefix, strings, value = TRUE))\n}\n", "\n    return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}", "\n  return(strings[substr(strings, 1, nchar(prefix))\
    \ == prefix])\n}\n", "\n    return(strings[substr(strings, 1, nchar(prefix)) ==\
    \ prefix])\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \  return(strings[startsWith(strings, prefix)])\n}\n", "\n    if (!is.character(strings))\
    \ {\n        stop('first argument must be a vector of strings')\n    }\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \    return(strings[startsWith(strings, prefix)])\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n\
    }\n", "\n  strings[grep(prefix, strings)]\n}\n", "\n    found_strings <- c()\n\
    \    for (string in strings) {\n        if (startsWith(string, prefix)) {\n  \
    \          found_strings <- c(found_strings, string)\n        }\n    }\n    return(found_strings)\n\
    }\n", "\n  idx <- grepl(paste('^', prefix, sep = ''), strings)\n  strings[idx]\n\
    }\n", "\n  prefix_length <- nchar(prefix)\n  starts_with_prefix <- sapply(strings,\n\
    \                               function(s) substr(s, 1, prefix_length) == prefix)\n\
    \  return(strings[starts_with_prefix])\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}", "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n \
    \   strings[startsWith(strings, prefix)]\n}\n", "\n  match_prefix <- function(string)\
    \ {\n    substr(string, 1, nchar(prefix)) == prefix\n  }\n  return(strings[sapply(strings,\
    \ match_prefix)])\n}\n", "\n  starts_with(strings, prefix)\n}\n", "\n  return(Filter(function(s)\
    \ grepl(prefix, s), strings))\n}\n", "\n  strings[startsWith(strings, prefix)]\n\
    }\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  grep(prefix, strings,\
    \ fixed = TRUE, value = TRUE)\n}\n", "\n    strings[startsWith(strings, prefix)]\n\
    }\n", "\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n}\n", "\n   \
    \ return(Filter(startsWith(prefix), strings))\n}\n\nstrs = c('abc', 'bcd', 'cde',\
    \ 'array')\nprint(filter_by_prefix(strs, 'a'))\n", "\n  return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  prefix\
    \ <- paste0('^', prefix)\n  return(Filter(function(x) { regexpr(prefix, x) ==\
    \ 1 }, strings))\n}", "\n  return(strings[startsWith(strings, prefix)])\n}\n",
  "\n    filter(strings, function(str) str_starts(str, prefix))\n}\nfilter_by_prefix\
    \ <- function(strings, prefix) {\n    strings[startsWith(strings, prefix)]\n}\n\
    filter_by_prefix <- function(strings, prefix) {\n    grep(paste0('^', prefix),\
    \ strings, value = TRUE)\n}\nfilter_by_prefix <- function(strings, prefix) {\n\
    \    for (i in 1:length(strings)) {\n        if (!startsWith(strings[i], prefix))\
    \ {\n            strings[i] <- NA\n        }\n    }\n    strings[!is.na(strings)]\n\
    }\nfilter_by_prefix <- function(strings, prefix) {\n    regmatches(strings, regexpr(paste0('^',\
    \ prefix), strings))\n}\n", "\n  return(strings[grepl(paste0('^', prefix), strings)])\n\
    }\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n  grep(paste0('^',\
    \ prefix), strings, value = TRUE)\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}", "\n  return(strings[substr(strings, 1, nchar(prefix)) == prefix])\n\
    }\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n    return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n", "\n  # Use the regex matching operator\
    \ '==' to determine if each input string\n  # starts with the desired prefix.\n\
    \  matches <- strings == paste0(prefix, '.*')\n  strings[matches]\n}\n", "\n \
    \ ret <- strings[substr(strings, 1, nchar(prefix)) == prefix]\n  return(ret)\n\
    }\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n    prefix <- as.character(prefix)\n\
    \    if (length(prefix) == 0) {\n        return(strings)\n    }\n    strings <-\
    \ if (is.null(strings)) {\n        c()\n    } else {\n        unlist(strings)\n\
    \    }\n    return(strings[startsWith(strings, prefix)])\n}", "\n  sapply(strings,\
    \ function(x) startsWith(x, prefix)) %>%\n    which() %>%\n    lapply(strings)\
    \ %>%\n    unlist()\n}\n", "\n  return(strings[startsWith(strings, prefix)])\n\
    }", "\n    return(strings[grep(paste0('^', prefix), strings)])\n}\n", "\n  if\
    \ (!is.character(strings))\n    stop('Given list must be of type character!')\n\
    \  return(strings[grepl(prefix, strings)])\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n    filtered <- strings[startsWith(strings, prefix)]\n \
    \   if (length(filtered) == 0) {\n        stop('No sequences found starting with\
    \ prefix: ', prefix)\n    }\n    return(filenced <- filtered[order(filtered)])\n\
    }\n", "\n  return(strings[grepl(sprintf('^%s', prefix), strings)])\n}\n", "\n\
    \  return(strings[substr(strings, 1, nchar(prefix)) == prefix])\n}\n", "\n  #\
    \ For each string\n  vapply(strings,\n         # If the string starts with the\
    \ given prefix, return TRUE,\n         # otherwise FALSE.\n         function(string)\
    \ {\n           # As the string can be empty, check that it has a length before\n\
    \           # checking the prefix.\n           if (length(string) > 0) {\n   \
    \          substr(string, 1, nchar(prefix)) == prefix\n           } else {\n \
    \            FALSE\n           }\n         },\n         # If a single string is\
    \ passed to the function, return a single\n         # logical value.\n       \
    \  logical(1))\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n \
    \ grep(prefix, strings, value = TRUE)\n}\n", "\n  strings[strings %in% unique(paste0(prefix,\
    \ collapse='.$|', prefix, '.'))]\n}", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  return(strings[stringr::str_detect(strings, paste0('^',\
    \ prefix))])\n}\n", "\n    strings[substr(strings, 1, nchar(prefix)) == prefix]\n\
    }", "\n  match <- filter(strings, function(x) {\n    !is.na(startsWith(x, prefix))\n\
    \  })\n  return(match)\n}\n", "\n  strings[grep(paste0('^', prefix), strings)]\n\
    }\n", "\n  strings[!is.na(stri_detect_fixed(strings, prefix))]\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \  return(strings[substr(strings, 1, 1) == prefix])\n}\n", "\n  return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n", "\n  strings[substr(strings, 1, nchar(prefix))\
    \ == prefix]\n}\n", "\n    Filter(function(x) {\n        return(startsWith(x,\
    \ prefix))\n    }, strings)\n}\n", "\n  reg <- paste0('^', prefix)\n  return(strings[grepl(reg,\
    \ strings)])\n}", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n    if(!is.character(strings))\
    \ {\n        stop('`strings` must be a character vector')\n    }\n    if(!is.character(prefix))\
    \ {\n        stop('`prefix` must be a character vector')\n    }\n    if(length(prefix)\
    \ != 1) {\n        stop('`prefix` must have length 1')\n    }\n    strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    filtered <- strings[startsWith(strings, prefix)]\n  \
    \  if (length(filtered) == 0)\n        filtered <- strings[grepl(paste0(prefix,\
    \ \"([^a-z])?\"), strings)]\n    return(filtered)\n}\n", "\n    return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}", "\n  prefix_len <- nchar(prefix)\n  head(strings[nchar(strings)\
    \ >= prefix_len], prefix) == prefix\n}\n", "\n    return(strings[grepl(prefix,\
    \ strings)])\n}\n", "\n    return(strings[grep(paste0('^', prefix), strings)])\n\
    }\n", "\n    stringr::str_detect(strings, paste0('^', prefix)) %>% \n        which()\
    \ %>% \n        strings[.]\n}\n", "\n  return(Filter(function(element) grepl(sprintf('^%s',\
    \ prefix), element), strings))\n}\n", "\n  matched <- grepl(sprintf('^%s', prefix),\
    \ strings)\n  return(strings[matched])\n}\n", "\n    return(grep(paste0('^', prefix),\
    \ strings, value = TRUE))\n}\n", "\n  Filter(function(elem) grepl(sprintf('^%s',\
    \ prefix), elem), strings)\n}\n", "\n    strings[startsWith(strings, prefix)]\n\
    }\n", "\n    strings[substr(strings, 1, nchar(prefix)) == prefix]\n}\n", "\n \
    \ return(strings[grepl(paste0(\"^\", prefix), strings)])\n}\n", "\n  prefix_length\
    \ <- nchar(prefix)\n  paste0(prefix, collapse = '') %in% paste0(strings, collapse\
    \ = '') %>%\n    which() %>%\n    substring(1, prefix_length) %>%\n    unique()\n\
    }\n", "\n  re <- paste0('^', prefix)\n  strings[grep(re, strings)]\n}\n", "\n\
    \  res <- strings[startsWith(strings, prefix)]\n  if (length(res) == 0) {\n  \
    \  res <- NA\n  }\n  return(res)\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n",
  "\n  prefix_length <- nchar(prefix)\n  filtered <- strings[substr(strings, 1, prefix_length)\
    \ == prefix]\n  return(filtered)\n}\n", "\n  strings[grep(paste0('^', prefix),\
    \ strings)]\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n  res\
    \ <- strings[substr(strings, 1, 1) == prefix]\n  return(res)\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  filtered <- strings[grepl(prefix, strings)]\n  if (is.null(filtered))\
    \ {\n    return(c())\n  } else {\n    return(filtered)\n  }\n}\n", "\n  r <- rlang::as_name(prefix)\n\
    \  return(strings[substr(strings, 1, nchar(r)) == r])\n}\n", "\n  return(strings[stringr::str_detect(strings,\
    \ paste0(\"^\", prefix))])\n}", "\n    pattern <- paste0('^', prefix)\n    return(strings[grepl(pattern,\
    \ strings)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  if (prefix\
    \ == '') {\n    return(strings)\n  }\n  prefix_length <- nchar(prefix)\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n    return(Filter(function(x) stringr::str_starts(x, prefix),\
    \ strings))\n}", "\n  if (length(strings) == 0) return(strings)\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  return(strings[grepl(paste0('^', prefix), strings)])\n\
    }\n", "\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \    return(strings[startsWith(strings, prefix)])\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n    strings[grep(paste0('^',\
    \ prefix), strings)]\n}\n", "\n  return(Filter(function(x) {\n    return(startsWith(x,\
    \ prefix))\n  }, strings))\n}\n", "\n  if (is.null(strings)) {\n    return(strings)\n\
    \  }\n  strings[grepl(sprintf('^%s', prefix), strings)]\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  if (is.null(strings))\
    \ return(c())\n  strings[substr(strings, 1, 1) == prefix]\n}\n", "\n  return(strings[grepl(paste0('^',\
    \ prefix), strings)])\n}\n", "\n    #if (is.null(strings)) return(strings)\n \
    \   ret <- strings[startsWith(strings, prefix)]\n    if (is.null(ret)) return(c())\n\
    \    return(ret)\n}\n", "\n  return(strings[substr(strings, 1, nchar(prefix))\
    \ == prefix])\n}\n", "\n    prefix <- paste0(prefix, '[a-z]*')\n    return(strings[grep(prefix,\
    \ strings)])\n}\n", "\n  # Your code here\n  strings[startsWith(strings, prefix)]\n\
    }\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n", "\n  # if the\
    \ prefix is NA, return all strings. This is to make sure R doesn't\n  # skip over\
    \ NA values when using the %in% operator.\n  if (is.na(prefix)) {\n    return(strings)\n\
    \  }\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  out <- strings[grep(paste0('^', prefix), strings)]\n  return(out)\n\
    }\n", "\n  if (length(strings) == 0) return(strings)\n  if (length(prefix) ==\
    \ 0) return(strings)\n  strings[substr(strings, 1, 1) == prefix]\n}\n", "\n  strings[grepl(paste0('^',\
    \ prefix), strings)]\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n\
    }\n", "\n  prefix_length <- nchar(prefix)\n  filtered <- strings[startsWith(strings,\
    \ prefix)]\n  return(filtered)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
