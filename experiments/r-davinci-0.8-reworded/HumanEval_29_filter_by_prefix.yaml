name: HumanEval_29_filter_by_prefix
language: r
prompt: "# Filter an input list of strings only for ones that start with a given prefix.\n\
  # >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc', 'bcd',\
  \ 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings,\
  \ prefix) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
  \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
  \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n    grep(sprintf('^%s', prefix), strings, value = TRUE)\n}\n", "\n\
    \  strings[grep(sprintf('^%s', prefix), strings)]\n}\n", "\n    return(Filter(prefix_match(prefix),\
    \ strings))\n}\nprefix_match <- function(prefix) {\n    return(function(s) { return(prefix_match(s,\
    \ prefix)) })\n}\nprefix_match <- function(s, prefix) {\n    return(substr(s,\
    \ 1, nchar(prefix)) == prefix)\n}", "\n    strings[substr(strings, 1, nchar(prefix))\
    \ == prefix]\n}\n", "\n  strings[substr(strings, 1, nchar(prefix)) == prefix]\n\
    }\n", "\n  matching_strings <- c()\n  for (string in strings) {\n    if (string\
    \ == '') {\n      break\n    }\n    if (substr(string, 1, 1) == prefix) {\n  \
    \    matching_strings <- c(matching_strings, string)\n    }\n  }\n  return(matching_strings)\n\
    }\n", "\n  substring(x = strings, first = 1, last = nchar(prefix)) == prefix\n\
    }\n", "\n    strings[substr(strings, 1, length(prefix)) == prefix]\n}\n", "\n\
    \  strings[startsWith(strings, prefix)]\n}", "\n  target <- paste0('^', prefix)\n\
    \  return(strings[grep(target, strings)])\n}\n", "\n  return(strings[grep(paste0('^',\
    \ prefix), strings)])\n}\n", "\n    to_keep <- strings[startsWith(strings, prefix)]\n\
    \    if (length(to_keep) == 0) {\n        return(c())\n    }\n    return(to_keep)\n\
    }", "\n  grep(paste('^', prefix, sep=''), strings, value=TRUE)\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[str_detect(strings, paste0('^', prefix))]\n}\n",
  "\n  if (prefix == '') {\n    return(strings)\n  }\n  return(strings[(grepl(paste0('^',\
    \ prefix), strings))])\n}\n", "\n  strings[grepl(paste0('^', prefix), strings)]\n\
    }\n", "\n  strings[grepl(paste0('^', prefix), strings)]\n}", "\n  # Require some\
    \ prefix\n  stopifnot(length(prefix) > 0)\n  # Filter the input\n  regmatches(strings,\
    \ regexpr(paste0('^', prefix), strings))\n}", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}"]
stop_tokens:
- "\n#"
- "\n```"
