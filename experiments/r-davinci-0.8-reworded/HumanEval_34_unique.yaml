name: HumanEval_34_unique
language: r
prompt: "# Return sorted unique elements in a list\n# >>> unique(c(5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123))\n# c(0, 2, 3, 5, 9, 123)\nunique <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- unique\n    if(!identical(candidate(c(5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123)), c(0, 2, 3, 5, 9, 123))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  l[!duplicated(l)]\n}\n", "\n\tif(is.vector(l)) {\n\t\treturn(sort(unique(as.character(l))))\n\
    \t} else {\n\t\treturn(l)\n\t}\n}\n", "\n    sort(table(l) > 0)\n}", "\n\tl <-\
    \ sort(l)\n\tresult <- c()\n\tcurrent <- l[1]\n\tresult <- c(result, current)\n\
    \tfor (i in 2:length(l)) {\n\t\tif (l[i] != current) {\n\t\t\tcurrent <- l[i]\n\
    \t\t\tresult <- c(result, current)\n\t\t}\n\t}\n\treturn(result)\n}\n", "\n  sort(unique(l))\n\
    }\n", "\n  if (length(l) > 0) {\n    sort(unique(unlist(l)))\n  } else {\n   \
    \ l\n  }\n}\n", "\n  return(sort(unique(unlist(l))))\n}\n", "\n    sort(unique(unlist(l)))\n\
    }\n", "\n    sort(unique(l))\n}\n", "\n  b <- as.list(l)\n  t <- sort(b)\n  u\
    \ <- unique(t)\n  return(u)\n}\n", "\n  sort(unique(l))\n}", "\n  length(l) >\
    \ 0 && sort(l)[length(l) == cumsum(l != shift(l, 1, fill = TRUE))]\n}\n", "\n\
    \    return(sort(unique(l)))\n}\n", "\n  return(sort(unique(unlist(l))))\n}\n",
  "\n    u <- sort(l)\n    u[!duplicated(u)]\n}", "\n    sort(unique(unlist(l)))\n\
    }\n", "\n    sort(unique(l))\n}\n", "\n    sort(c(l))[!duplicated(l)]\n}\n", "\n\
    \    sort(unique(unlist(l)))\n}\n ", "\n    sort(unique(unlist(l)))\n}\n\ncolors\
    \ <- function(n, alpha = 1) {\n    rev(brewer.pal(n, \"Spectral\"))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
