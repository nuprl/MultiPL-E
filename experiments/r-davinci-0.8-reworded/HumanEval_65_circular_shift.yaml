name: HumanEval_65_circular_shift
language: r
prompt: "# Circular shift the digits of the integer x, shift the digits right by shift\n\
  # and return the result as a string.\n# If shift > number of digits, return digits\
  \ reversed.\n# >>> circular_shift(12, 1)\n# '21'\n# >>> circular_shift(12, 2)\n\
  # '12'\ncircular_shift <- function(x, shift) {"
tests: "test_humaneval <- function() {\ncandidate <- circular_shift\n    if(!identical(candidate(100,\
  \ 2), '001')){quit('no', 1)}\n    if(!identical(candidate(12, 2), '12')){quit('no',\
  \ 1)}\n    if(!identical(candidate(97, 8), '79')){quit('no', 1)}\n    if(!identical(candidate(12,\
  \ 1), '21')){quit('no', 1)}\n    if(!identical(candidate(11, 101), '11')){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  if (shift > nchar(x)) {\n    return(rev(as.character(x)))\n  }\n\
    \  else {\n    if (nchar(x) == 1) {\n      return(as.character(x))\n    }\n  \
    \  else {\n      return(paste(substr(x, 1 + shift, nchar(x)), substr(x, 1, shift),\
    \ sep = \"\"))\n    }\n  }\n}\n", "\n  if (shift > 0) {\n    x <- toString(x)\n\
    \    x <- paste(x[shift:length(x)], x[1:(shift-1)], sep=\"\")\n  }\n  return(x)\n\
    }\n", "\n  digits <- strsplit(as.character(x), \"\")[[1]]\n  if (shift > length(digits))\
    \ {\n    rev(digits)\n  } else {\n    c(digits[-length(digits):-(length(digits)\
    \ - shift + 1)], digits[1:shift])\n  }\n}", "\n  return(as.character(rev(as.integer(rev(as.character(x)))\
    \ * 10^shift)))\n}\n\ncircular_shift(12, 1)\ncircular_shift(12, 2)\n", "\n   \
    \ digits <- strsplit(as.character(x), \"\")[[1]]\n    n <- length(digits)\n  \
    \  if (shift >= n) {\n        paste(rev(digits), collapse = \"\")\n    } else\
    \ {\n        shift <- shift %% n\n        digits <- c(digits[(shift + 1):n], digits[1:shift])\n\
    \        paste(digits, collapse = \"\")\n    }\n}\n", "\n    return(paste(rev(digits(x,\
    \ shift)), collapse = \"\"))\n}\n", "\n\tx <- as.integer(x)\n\tx <- x[(length(x)\
    \ - shift + 1):length(x)]\n\tpaste(x, collapse = \"\")\n}\n", "\n  n <- nchar(x)\n\
    \  y <- substr(x, shift + 1, n)\n  paste0(y, substr(x, 1, shift))\n}\n", "\n \
    \ if (shift == 0) return(paste0(x))\n  digits <- floor(log10(x)) + 1\n  if (shift\
    \ > digits) {\n    return(paste0(stringr::str_reverse(paste0(x))))\n  }\n  # TODO:\
    \ This is terrible code, make better\n  # TODO: This should work for negative\
    \ numbers\n  digits_list <- sapply(1:digits, function(i) {\n    floor(x / 10^(digits\
    \ - i)) %/% 10\n  })\n  digits_list <- digits_list[shift:digits]\n  digits_list\
    \ <- c(digits_list, digits_list[1:(shift - 1)])\n  paste0(digits_list)\n}\n",
  "\n  stopifnot(is.integer(x))\n  stopifnot(is.integer(shift))\n  x_string <- as.character(x)\n\
    \  split_x <- strsplit(x_string, \"\")[[1]]\n  if (shift >= length(split_x)) {\n\
    \    reverse(split_x)\n  } else {\n    c(split_x[(length(split_x) - shift + 1):length(split_x)],\n\
    \      split_x[1:(length(split_x) - shift)])\n  }\n}\n", "\n    as.character(x)\n\
    }\n", "\n    digits <- strsplit(as.character(x), \"\")[[1]]\n    if (shift > length(digits))\
    \ {\n        digits <- digits[length(digits):1]\n    } else {\n        digits\
    \ <- c(digits[(length(digits) - shift + 1):length(digits)], digits[1:(length(digits)\
    \ - shift)])\n    }\n    return(paste(digits, collapse = \"\"))\n}\n", "\n  digits\
    \ <- strsplit(as.character(x), split = '')[[1]]\n  if (shift > length(digits))\
    \ {\n    digits <- digits[length(digits):1]\n  } else {\n    for (i in 1:shift)\
    \ {\n      digits <- c(tail(digits, 1), head(digits, length(digits) - 1))\n  \
    \  }\n  }\n  return(paste(digits, collapse = ''))\n}\n", "\n    str <- as.character(x)\n\
    \    if (shift >= nchar(str)) {\n        return(strrev(str))\n    }\n    return(paste(substr(str,\
    \ shift + 1, nchar(str)), substr(str, 1, shift), sep = \"\"))\n}\n", "\n  # Determine\
    \ the number of digits in x\n  n <- nchar(x)\n  # If shift > number of digits,\
    \ return reversed digits.\n  if (shift > n) {\n    paste(rev(unlist(strsplit(as.character(x),\
    \ \"\"))), collapse = \"\")\n  } else {\n    # Split the integer into a vector\
    \ of strings (one string per digit)\n    # and create a vector that looks like:\n\
    \    # [shift, shift + 1, ..., n - 1, 0, 1, ..., shift - 1]\n    # Then use that\
    \ vector to reorder the digits\n    # and join them back together as a single\
    \ string\n    digits <- unlist(strsplit(as.character(x), \"\"))\n    order <-\
    \ c(seq(shift, n - 1), seq(0, shift - 1))\n    paste(digits[order], collapse =\
    \ \"\")\n  }\n}\n", "\n    number_of_digits <- nchar(x)\n    if (shift > number_of_digits)\
    \ {\n        return(stringr::str_reverse(x))\n    }\n    first_part <- substr(x,\
    \ (number_of_digits - shift + 1), number_of_digits)\n    second_part <- substr(x,\
    \ 1, (number_of_digits - shift))\n    return(paste0(first_part, second_part))\n\
    }\n", "\n    x_digits <- strsplit(as.character(x), \"\")[[1]]\n    if (shift >\
    \ length(x_digits)) {\n        return(paste(rev(x_digits), collapse=\"\"))\n \
    \   }\n    shifted_digits <- c(x_digits[(length(x_digits) - shift + 1):length(x_digits)],\n\
    \                        x_digits[1:(length(x_digits) - shift)])\n    return(paste(shifted_digits,\
    \ collapse=\"\"))\n}\n", "\n  string <- x %>%\n    as.character() %>%\n    substr(start\
    \ = seq(1, nchar(.)),\n           stop = seq(nchar(.), 1, -1))\n  if (nchar(string)\
    \ <= shift) {\n    return(string %>%\n             str_split(pattern = \"\") %>%\n\
    \             unlist() %>%\n             rev() %>%\n             paste(collapse\
    \ = \"\"))\n  } else {\n    return(string %>%\n             str_split(pattern\
    \ = \"\") %>%\n             unlist() %>%\n             rev() %>%\n           \
    \  c(rep(NA, shift)) %>%\n             rev() %>%\n             na.omit() %>%\n\
    \             paste(collapse = \"\"))\n  }\n}\n", "\n    if (shift <= 0) {\n \
    \       return(as.character(x))\n    }\n    else {\n        x <- as.character(x)\n\
    \        s <- substring(x, shift + 1)\n        d <- substring(x, 1, shift)\n \
    \       return(paste(s, d, sep = \"\"))\n    }\n}\n", "\n  \n  # YOUR CODE HERE\n\
    \  str <- as.character(x)\n  len <- nchar(str)\n  if (shift > len) {\n    return(rev(str))\n\
    \  }\n  for (i in 1:shift) {\n    char <- substr(str, 1, 1)\n    str <- paste(substr(str,\
    \ 2, len), char, sep = \"\")\n  }\n  return(str)\n}\n", "\n  \n  # Convert x to\
    \ string and store as a character vector\n  x_str <- as.character(x)\n  \n  #\
    \ Convert integer to vector of digits\n  x_vec <- as.numeric(strsplit(x_str, \"\
    \")[[1]])\n  \n  # If shift > number of digits, reverse vector\n  if (shift >\
    \ length(x_vec)) {\n    x_vec <- rev(x_vec)\n    \n  # Else, rotate vector by\
    \ shift\n  } else {\n    x_vec <- x_vec[shift:length(x_vec)]\n    x_vec <- c(x_vec,\
    \ x_vec[1:(shift - 1)])\n  }\n  \n  # Return vector as a string\n  paste(x_vec,\
    \ collapse = \"\")\n}\n", "\n  stopifnot(is.integer(x))\n  stopifnot(is.integer(shift))\n\
    \  sx <- as.integer(strsplit(as.character(x), '')[[1]])\n  shift <- x %% length(sx)\n\
    \  sx <- c(sx[shift + 1:length(sx)], sx[1:shift])\n  paste(sx, collapse = '')\n\
    }\ncircular_shift(12, 1)\n", "\n    string <- paste(rev(unlist(strsplit(as.character(x),\
    \ ''))), collapse = '')\n    if (length(string) > shift) {\n        paste(rev(unlist(strsplit(string,\
    \ ''))[c(shift + 1):length(string), ]), collapse = '')\n    } else {\n       \
    \ string\n    }\n}", "\n  if (x < 10) {\n    return(x)\n  } else {\n    # Split\
    \ the integer into a character string.\n    # Note that x is coerced to a character\
    \ string.\n    x_chr <- strsplit(x, \"\")[[1]]\n    # Shift the characters.\n\
    \    x_shifted <- x_chr[-shift]\n    # Append the first character to the end of\
    \ the string.\n    x_shifted <- c(x_shifted, x_chr[shift])\n    # Return the result\
    \ as a string.\n    return(paste(x_shifted, collapse = \"\"))\n  }\n}\n", "\n\
    \  s <- as.integer(nchar(x))\n  if (shift > s)\n    return(paste(rev(strsplit(as.character(x),\
    \ split = '')[[1]]), collapse = ''))\n  a <- strsplit(as.character(x), split =\
    \ '')[[1]]\n  b <- a[c(seq(shift, s), seq(1, shift - 1))]\n  paste(b, collapse\
    \ = '')\n}\n", "\n    stopifnot(shift <= nchar(x))\n    shift <- shift %/% nchar(x)\n\
    \    string <- as.character(x)\n    c(string[shift + 1:nchar(x)], string[1:shift])\n\
    }\n", "\n    # Convert to string, then make it a vector of its characters.\n \
    \   str <- as.character(x)\n    x <- as.integer(strsplit(str, \"\")[[1]])\n  \
    \  if (shift > length(x)) {\n        return(rev(x))\n    }\n    x <- append(tail(x,\
    \ length(x) - shift), head(x, shift))\n    paste(x, collapse = \"\")\n}\ncircular_shift(12,\
    \ 1)\ncircular_shift(12, 2)\n", "\n  stopifnot(is.integer(x), is.integer(shift))\n\
    \  if (x < 0) {\n    stop(\"x must be non-negative\")\n  }\n  if (shift < 0) {\n\
    \    stop(\"shift must be non-negative\")\n  }\n  digits <- as.integer(unlist(strsplit(as.character(x),\
    \ \"\")))\n  length <- length(digits)\n  if (shift > length) {\n    return(digits[length:1])\n\
    \  }\n  shift_digits <- digits[(length - shift + 1):length]\n  c(shift_digits,\
    \ digits[1:(length - shift)])\n}\n", "\n  digits <- strsplit(as.character(x),\
    \ \"\")[[1]]\n  shift <- shift %% length(digits)\n  if (shift == 0) {\n    return(paste(digits,\
    \ collapse = \"\"))\n  }\n  return(paste(digits[(length(digits)-shift+1):length(digits)],\n\
    \               digits[1:(length(digits)-shift)],\n               collapse = \"\
    \"))\n}\n", "\n\tdigits <- split(as.character(x), '')\n\tif (shift > length(digits))\
    \ {\n\t\tdigits <- rev(digits)\n\t} else {\n\t\tdigits <- c(digits[(shift + 1):length(digits)],\
    \ digits[1:shift])\n\t}\n\treturn(paste(digits, collapse = ''))\n}\n", "\n  digits\
    \ <- strsplit(as.character(x), '')[[1]]\n  res <- c(digits[(length(digits) - shift\
    \ + 1):length(digits)],\n           digits[1:(length(digits) - shift)])\n  return(paste(res,\
    \ collapse = ''))\n}\n", "\n  str_shifted <- numeric_to_string(x)\n  if (shift\
    \ > nchar(str_shifted))\n    return(numeric_to_string(x))\n  digits <- strsplit(str_shifted,\
    \ '')[[1]]\n  if (shift > 0) {\n    shifted <- c(digits[shift:length(digits)],\
    \ digits[1:(shift-1)])\n  } else {\n    shifted <- c(digits[(length(digits) +\
    \ shift + 1):length(digits)],\n                 digits[1:(length(digits) + shift)])\n\
    \  }\n  return(paste(shifted, collapse=''))\n}\n", "\n    digits <- paste(as.character(x),\
    \ collapse = \"\")\n    res <- stringr::str_sub(digits, -shift)\n    res <- paste(res,\
    \ stringr::str_sub(digits, 1, -(shift + 1)), sep = \"\")\n    return(res)\n}",
  "\n  if (shift <= 0) {\n    return(x)\n  }\n  if (x <= 0) {\n    return(x)\n  }\n\
    \  num_digits <- floor(log10(x))\n  if (shift > num_digits) {\n    digits <- intToBits(x)\n\
    \    digits <- digits[length(digits):1]\n    return(bitsToInt(digits))\n  }\n\
    \  digits <- intToBits(x)\n  digits <- c(digits[shift+1:length(digits)], digits[1:shift])\n\
    \  bitsToInt(digits)\n}\n", "\n    output <- x\n    if (shift >= length(x)){\n\
    \        output <- sort(x, decreasing = TRUE)\n    } else {\n        output <-\
    \ c(output[-length(x)], output[1:shift])\n    }\n    paste(output, collapse =\
    \ \"\")\n}\n", "\n  digits <- strsplit(as.character(x), '')[[1]]\n  return(paste(c(digits[(shift\
    \ + 1):length(digits)], digits[1:shift]), collapse = ''))\n}\n", "\n    str <-\
    \ as.character(x)\n    n <- nchar(str)\n    if (shift > n) {\n        paste(rev(str),\
    \ collapse = \"\")\n    } else {\n        paste(substr(str, n - shift + 1, n),\
    \ substr(str, 1, n - shift), collapse = \"\")\n    }\n}", "\n    return (paste(rev(strsplit(x,\
    \ \"\")[[1]]), collapse = \"\"))\n}\n", "\n  if(shift > nchar(x)) {\n    return(rev(x))\n\
    \  }\n  return(paste(rev(substr(x, 1, nchar(x) - shift)), substr(x, nchar(x) -\
    \ shift + 1, nchar(x)), sep = \"\"))\n}\n", "\n  x <- as.character(x)\n  if (shift\
    \ > nchar(x)) {\n    return(rev(x))\n  }\n  x <- paste(substr(x, shift+1, nchar(x)),\
    \ substr(x, 1, shift), sep = \"\")\n  return(x)\n}\n", "\n    # TODO: fill in\
    \ code to extract digits from x, shift them\n    # and return the result as a\
    \ string\n    # Replace the next line with your code\n    digits <- paste(sort(as.character(x),\
    \ decreasing = TRUE), collapse = \"\")\n    return(paste(sort(as.character(x),\
    \ decreasing = TRUE), collapse = \"\"))\n}\n", "\n    paste(rev(digits(x)[seq(shift+1,\
    \ length(digits(x)))]),\n          digits(x)[seq(1, shift)],\n          sep=\"\
    \")\n}", "\n  digits <- strsplit(x, \"\")[[1]]\n  if (shift > length(digits))\
    \ {\n    return(strsplit(x, \"\")[[1]][length(digits):1])\n  }\n  digits_shifted\
    \ <- c(digits[(length(digits) - shift + 1):length(digits)],\n                \
    \      digits[1:(length(digits) - shift)])\n  return(digits_shifted)\n}\n", "\n\
    \  # convert integer to string\n  string <- as.character(x)\n  # split to vector\
    \ of chars\n  chars <- strsplit(string, \"\")[[1]]\n  # get length of string\n\
    \  length <- length(chars)\n  # append chars to front of vector\n  shifted <-\
    \ c(chars[(length - shift + 1):length], chars[1:(length - shift)])\n  # convert\
    \ back to string\n  paste(shifted, collapse = \"\")\n}\n\ncircular_shift(12, 1)\n\
    circular_shift(12, 2)\ncircular_shift(12, 12)\ncircular_shift(12, 13)\n", "\n\
    \    # if shift is greater than number of digits, return digits reversed\n   \
    \ if (shift > nchar(x)) {\n        return(paste(rev(as.character(x)), collapse\
    \ = \"\"))\n    }\n    # otherwise, split into a vector of digits, shift vector\
    \ of digits,\n    # and paste them back together\n    split_digits <- strsplit(as.character(x),\
    \ split = \"\")[[1]]\n    digits_shifted <- c(split_digits[-(length(split_digits)-shift+1):length(split_digits)],\n\
    \                        split_digits[1:(length(split_digits)-shift)])\n    return(paste(digits_shifted,\
    \ collapse = \"\"))\n}\ncircular_shift(12, 1)\ncircular_shift(12, 2)\n", "\n \
    \   if(shift > nchar(x)){\n        return(paste(rev(unlist(strsplit(x, ''))),\
    \ collapse=''))\n    } else {\n        return(paste(unlist(strsplit(tail(as.character(x),\
    \ n=shift), '')) %>% c(unlist(strsplit(head(as.character(x), n=nchar(x)-shift),\
    \ ''))), collapse=''))\n    }\n}\n", "\n  # Extract digits and sum of digits of\
    \ x.\n  x_digits <- strsplit(as.character(x), \"\")[[1]]\n  x_digits_sum <- sum(as.numeric(x_digits))\n\
    \  # Circular shift the digits of x.\n  x_digits_circ <- c(x_digits[length(x_digits)\
    \ - shift + 1:length(x_digits)],\n                     x_digits[1:length(x_digits)\
    \ - shift])\n  # Compute the sum of digits of the circular shifted x.\n  x_digits_circ_sum\
    \ <- sum(as.numeric(x_digits_circ))\n  # Only return the digits of the circular\
    \ shifted x if the sum of digits\n  # of the circular shifted x is less than the\
    \ sum of digits of x.\n  if (x_digits_circ_sum < x_digits_sum) {\n    paste(x_digits_circ,\
    \ collapse = \"\")\n  } else {\n    paste(rev(x_digits), collapse = \"\")\n  }\n\
    }", "\n    digits <- floor(log10(x))\n    if (shift > digits) {\n        paste(rev(digits_of(x)),\
    \ collapse = \"\")\n    } else {\n        left <- x %% 10^shift\n        right\
    \ <- x %/% 10^shift\n        paste(digits_of(left), digits_of(right), collapse\
    \ = \"\")\n    }\n}\n", "\n    digits <- strsplit(as.character(x), split = '')[[1]]\n\
    \    if (shift > length(digits)) {\n        return(rev(digits))\n    }\n    i\
    \ <- length(digits) - shift + 1\n    return(paste(digits[i:length(digits)], digits[1:(i\
    \ - 1)], sep = ''))\n}\n", "\n  x_str <- as.character(x)\n  x_str_len <- nchar(x_str)\n\
    \  if (shift > x_str_len)\n    rev(x_str)\n  else\n    paste(substr(x_str, shift\
    \ + 1, x_str_len), substr(x_str, 1, shift), sep = \"\")\n}\n", "\n\t# Convert\
    \ number to string\n\tx = as.character(x)\n\t# Get length of number\n\tn = nchar(x)\n\
    \t# If shift is > number of digits, reverse digits\n\tif (shift > n) {\n\t\treturn(rev(x))\n\
    \t}\n\t# Get last shift digits\n\tx1 = substr(x, n - shift + 1, n)\n\t# Get all\
    \ digits but last shift digits\n\tx2 = substr(x, 1, n - shift)\n\t# Concatenate\
    \ digits\n\treturn(paste(x1, x2, sep = \"\"))\n}\n", "\n  if(x == 0) {\n    return(\"\
    0\")\n  }\n  if(shift == 0) {\n    return(x)\n  }\n  digits <- integer(0)\n  while(x\
    \ > 0) {\n    digits <- c(digits, x %% 10)\n    x <- x %/% 10\n  }\n  digits <-\
    \ digits[-(1:shift)]\n  rev(digits)\n}\n", "\n  \n  if (shift > nchar(x)) {\n\
    \    return(rev(x))\n  }\n  \n  digits <- strsplit(as.character(x), \"\")[[1]]\n\
    \  digits <- digits[length(digits):1]\n  digits <- c(digits[1:shift], digits[(shift+1):length(digits)])\n\
    \  res <- as.integer(paste(digits, collapse = \"\"))\n  \n  return(res)\n}\n\n\
    circular_shift(12, 1)\ncircular_shift(12, 2)\n", "\n\tstring <- as.character(x)\n\
    \tif (shift > nchar(string)) {\n\t\treturn(rev(string))\n\t}\n\treturn(substr(string,\
    \ shift + 1, nchar(string)) %>%\n\t\tpaste(substr(string, 1, shift), sep = \"\"\
    ))\n}\n", "\n  digits <- strsplit(as.character(x), \"\")[[1]]\n  digits[seq(from\
    \ = length(digits) - shift + 1, to = length(digits))] <- digits[seq(from = 1,\
    \ to = shift)]\n  digits[seq(from = 1, to = length(digits) - shift)] <- digits[seq(from\
    \ = shift + 1, to = length(digits))]\n  return(paste(digits, collapse = \"\"))\n\
    }\n", "\n  # Check the inputs\n  if (!is.integer(x))\n    stop(\"Argument x must\
    \ be an integer\")\n  if (!is.integer(shift))\n    stop(\"Argument shift must\
    \ be an integer\")\n  # Convert x to a character string\n  xstr <- toString(x)\n\
    \  if (length(xstr) <= shift)\n    return(strrev(xstr))\n  # Split the string\
    \ into two parts, circularly shift right and reassemble\n  first_part <- substring(xstr,\
    \ 1, length(xstr) - shift)\n  second_part <- substring(xstr, length(xstr) - shift\
    \ + 1, length(xstr))\n  paste(second_part, first_part, sep = \"\")\n}\n\nlibrary(testthat)\n\
    expect_equal(circular_shift(12, 1), \"21\")\nexpect_equal(circular_shift(12, 2),\
    \ \"12\")\nexpect_equal(circular_shift(123, 2), \"312\")\nexpect_equal(circular_shift(123,\
    \ 3), \"231\")\nexpect_equal(circular_shift(123, 4), \"123\")\nexpect_equal(circular_shift(123,\
    \ 5), \"312\")\nexpect_equal(circular_shift(123, 6), \"231\")\n ", "\n  x <- as.integer(x)\n\
    \  x_str <- toString(x)\n  if (shift > nchar(x_str)) {\n    return(rev(x_str))\n\
    \  }\n  new_x_str <- sprintf(\"%s%s\", substr(x_str, shift + 1, nchar(x_str)),\n\
    \                                 substr(x_str, 1, shift))\n  return(new_x_str)\n\
    }\n", "\n    digits <- as.character(x)\n    if (shift > nchar(digits)) {\n   \
    \     return(paste(rev(digits), collapse=\"\"))\n    }\n    shifted <- rep(0,\
    \ nchar(digits))\n    for (i in 1:nchar(digits)) {\n        shifted[i] <- digits[mod(i\
    \ + shift - 1, nchar(digits)) + 1]\n    }\n    return(paste(shifted, collapse=\"\
    \"))\n}\n", "\n  x <- as.character(x)\n  if (nchar(x) < shift) return(rev(x))\n\
    \  return(paste(x[(1 + shift):nchar(x)], x[1:(shift)], sep = \"\"))\n}", "\n \
    \ digits <- lapply(integer_to_digits(x), as.character)\n  if (shift > length(digits))\
    \ {\n    return(paste(rev(digits), collapse = \"\"))\n  }\n  else {\n    digits\
    \ <- c(digits[(shift + 1):length(digits)], digits[1:shift])\n    return(paste(digits,\
    \ collapse = \"\"))\n  }\n}\n", "\n  if (shift > nchar(x)) {\n    return(rev(x))\n\
    \  }\n  digits <- strsplit(x, \"\")[[1]]\n  return(paste(tail(digits, shift),\
    \ head(digits, length(digits) - shift), sep = \"\"))\n}\n", "\n  if (is.na(x))\
    \ {\n    return(x)\n  }\n  x_s <- as.integer(x)\n  x_s_len <- nchar(x_s)\n  if\
    \ (shift > x_s_len) {\n    x_s <- as.integer(rev(x_s))\n  } else {\n    # left\
    \ rotate by length - shift\n    x_s <- x_s %/% 10^(x_s_len - shift) + 10^shift\
    \ * (x_s %% 10^(x_s_len - shift))\n  }\n  as.character(x_s)\n}\n", "\n\tdigits\
    \ <- strsplit(as.character(x), split = \"\")[[1]]\n\tif (shift > length(digits))\
    \ {\n\t\tpaste(rev(digits), collapse = \"\")\n\t} else {\n\t\tpaste(c(digits[-(1:shift)],\
    \ digits[1:shift]), collapse = \"\")\n\t}\n}\n", "\n    # YOUR CODE HERE\n   \
    \ paste(rev(strsplit(as.character(x), \"\")[[1]]), collapse = \"\")\n}\n", "\n\
    \  x <- as.integer(x)\n  shift <- as.integer(shift)\n  ndigits <- nchar(x)\n \
    \ if (shift > ndigits) {\n    x <- as.integer(rev(sprintf('%i', x)))\n  } else\
    \ {\n    x1 <- x %% 10^shift\n    x2 <- x %/% 10^shift\n    x <- x1 * 10^(ndigits\
    \ - shift) + x2\n  }\n  as.character(x)\n}\n", "\n  if(shift > nchar(x)) return(paste(rev(unlist(strsplit(x,\
    \ \"\"))), collapse = \"\"))\n  x_digits <- unlist(strsplit(x, \"\"))\n  x_digits[1:shift]\
    \ <- rev(x_digits[1:shift])\n  return(paste(rev(x_digits), collapse = \"\"))\n\
    }\n", "\n    if(x <= 0) return(x)\n    if(x < 10) return(x)\n    digits <- integer(shift)\n\
    \    for(i in 1:shift) {\n        digits[i] <- x %% 10\n        x <- floor(x /\
    \ 10)\n    }\n    digits <- digits[order(digits)]\n    out <- digits[1]\n    for(i\
    \ in 2:shift) {\n        out <- out * 10 + digits[i]\n    }\n    return(out)\n\
    }\n ", "\n  # Create empty string to hold shifted number\n  result <- ''\n  #\
    \ Obtain length of the number\n  n <- nchar(x)\n  # If shift is greater than number\
    \ of digits, return digits reversed\n  if (shift > n) return(rev(as.character(x)))\n\
    \  # If shift is less than number of digits, shift right\n  else {\n    # Create\
    \ vector of the digits of the integer, x\n    digits <- strsplit(as.character(x),\
    \ '')[[1]]\n    # Obtain the index of the shift\n    shift_index <- n + 1 - shift\n\
    \    # Create vector of shifted digits\n    result <- c(digits[shift_index:n],\
    \ digits[1:(shift_index - 1)])\n    # Concatenate shifted digits vector to create\
    \ result string\n    result <- paste(result, collapse = '')\n  }\n  # Return result\n\
    \  return(result)\n}", "\n  x <- as.character(x)\n  if (shift > nchar(x)) {\n\
    \    x <- rev(x)\n  } else {\n    x <- paste(substr(x, shift+1, nchar(x)),\n \
    \              substr(x, 1, shift), sep=\"\")\n  }\n  x\n}\n", "\n  digits <-\
    \ round(log10(x))\n  if (digits <= shift)\n    return(rev(digits))\n  x_log <-\
    \ floor(log10(x))\n  for (i in 1:shift) {\n    a <- x %% 10\n    b <- floor(x\
    \ / 10)\n    x <- 10^x_log * a + b\n  }\n  return(as.character(x))\n}\n", "\n\t\
    x_str <- num2str(x)\n\tx_len <- str_length(x_str)\n\tif (shift > x_len) {\n\t\t\
    return(str_reverse(x_str))\n\t}\n\tx_str_rev <- str_reverse(x_str)\n\tstr_c(str_sub(x_str_rev,\
    \ 0, shift - 1), str_sub(x_str_rev, shift, x_len))\n}\n", "\n  str <- intToUtf8(x)\n\
    \n  # Mangle the ASCII values\n  str <- str - 48\n\n  # Shift the numbers\n  str\
    \ <- str[c(shift:length(str), 1:(shift-1))]\n\n  # Unmangle the ASCII values\n\
    \  str <- str + 48\n\n  # Convert back to integers\n  str <- utf8ToInt(str)\n\n\
    \  # Convert the integers to a string\n  str <- rawToChar(str)\n\n  # Return the\
    \ string\n  return(str)\n}\n", "\n  str_length <- nchar(x)\n  # If the shift exceeds\
    \ the number of digits, reverse the number.\n  if (shift > str_length) {\n   \
    \ x <- rev(x)\n  } else {\n    # Otherwise, perform the circular shift.\n    x\
    \ <- paste(substr(x, shift + 1, str_length),\n               substr(x, 1, shift),\n\
    \               sep = \"\")\n  }\n  return(x)\n}\n", "\n    # Check if shift is\
    \ larger than the number of digits\n    if (shift > nchar(x)) {\n        return(strrev(x))\n\
    \    }\n    string <- strsplit(as.character(x), '')[[1]]\n    shift_string <-\
    \ c(string[-(1:shift)], string[1:shift])\n    return(paste(shift_string, collapse\
    \ = ''))\n}\n", "\n  x <- paste0(x)\n  if (shift > nchar(x)) {\n    x <- paste0(rev(x))\n\
    \  } else {\n    x <- paste0(substr(x, shift + 1, nchar(x)), substr(x, 1, shift))\n\
    \  }\n  return(x)\n}\n", "\n  digits <- convert(x, 0:9)\n  length(digits) - shift\
    \ <- shift(length(digits) - shift)\n  paste(digits, collapse = \"\")\n}\n", "\n\
    \  digits <- as.character(x)\n  length(digits) - shift <- seq_along(digits)\n\
    \  length(digits) - shift[is.na(length(digits) - shift)] <- seq_along(digits)\n\
    \  return(paste(digits[length(digits) - shift], collapse = \"\"))\n}\n", "\n \
    \   x_string <- as.character(x)\n    x_string <- substr(x_string, shift + 1, nchar(x_string))\n\
    \    x_string <- paste(x_string, substr(x_string, 1, shift), sep = \"\")\n   \
    \ return(x_string)\n}\n", "\n    # YOUR CODE HERE\n    if(x == 0) {\n        return(\"\
    0\")\n    } else {\n        x_s <- as.character(x)\n        if(shift > nchar(x_s))\
    \ {\n            return(rev(x_s))\n        } else {\n            return(paste(substr(x_s,\
    \ shift+1, nchar(x_s)), substr(x_s, 1, shift), sep=\"\"))\n        }\n    }\n\
    }\n", "\n    x <- as.integer(x)\n    if (x >= 10 ^ shift) {\n        return(sprintf(\"\
    %0*d\", nchar(x), x))\n    }\n    x_chars <- as.character(x)\n    x_chars <- c(x_chars[(shift\
    \ + 1):nchar(x)], x_chars[1:shift])\n    return(paste(x_chars, collapse = \"\"\
    ))\n}\n", "\n  # x is a number; shift is a non-negative integer\n  # Returns a\
    \ string with the circular shift of x to the right by shift\n  # digits\n  xstr\
    \ <- as.character(x)\n  xlen <- nchar(xstr)\n  if (shift > xlen) {\n    return(gsub('',\
    \ '', strrev(xstr)))\n  }\n  first <- substr(xstr, 1L, xlen - shift)\n  second\
    \ <- substr(xstr, xlen - shift + 1L, xlen)\n  return(paste(second, first, sep=''))\n\
    }\n", "\n  digits <- x %/% 10 ^ shift\n  digits <- digits %% 10 ^ as.integer(log10(digits))\
    \ + 1\n  return(as.character(digits))\n}\n", "\n  # create a character vector\
    \ of the digits in x\n  digits <- strsplit(as.character(x), \"\")[[1]]\n  # shift\
    \ the digits to the right\n  shifted <- c(digits[-length(digits)], digits[length(digits)])\n\
    \  # if shift > digits, recursively apply circular_shift\n  if (shift > 1) {\n\
    \    shifted <- circular_shift(shifted, shift - 1)\n  }\n  # return digits shifted\
    \ to the right by shift\n  return(shifted)\n}\n", "\n    shift = shift % nchar(x)\n\
    \    x = paste0(rev(strsplit(as.character(x), \"\")[[1]]), collapse = \"\")\n\
    \    x = paste0(rev(strsplit(x, \"\")[[1]]), collapse = \"\")\n    return(x)\n\
    }\n\nstr_split <- function(x, split) {\n    return(strsplit(x, split)[[1]])\n\
    }\n", "\n    to_str <- function(i) {\n        tmp <- (i %% 10)\n        if (i\
    \ > 0) {\n            tmp <- c(tmp, to_str(i %/% 10))\n        }\n        tmp\n\
    \    }\n    digits <- to_str(x)\n    if (shift > length(digits)) {\n        return(rev(digits))\n\
    \    }\n    digits[(length(digits) - shift + 1):length(digits)] <- digits[1:(shift)]\n\
    \    digits[1:(length(digits) - shift)] <- digits[(shift + 1):length(digits)]\n\
    \    unlist(digits)\n}\n", "\n    x <- int_to_digits(x)\n    shift <- shift %%\
    \ length(x)\n    x <- c(x[-shift], x[shift])\n    digits_to_int(x)\n}\n", "\n\
    \    x <- strsplit(as.character(x), \"\")[[1]]\n    i <- shift %% length(x)\n\
    \    y <- x[c(i+1):length(x), ]\n    y <- c(y, x[1:i])\n    return(paste(y, collapse=\"\
    \"))\n}\n", "\n    x <- as.integer(x)\n    digit_cnt <- nchar(x)\n    offset <-\
    \ shift %% digit_cnt\n    return(substr(as.character(x), offset + 1, digit_cnt)\
    \ %+% substr(as.character(x), 1, offset))\n}\n", "\n    x <- as.character(x)\n\
    \    if (shift > nchar(x)) {\n        return(rev(x))\n    }\n    x <- substr(x,\
    \ shift + 1, nchar(x))\n    x <- paste(x, substr(x, 1, shift), sep = \"\")\n \
    \   return(x)\n}\n\nprint(circular_shift(12, 2))\nprint(circular_shift(12, 1))\n\
    print(circular_shift(12, 3))\nprint(circular_shift(12, 4))\n", "\n  x <- as.integer(x)\n\
    \  x_digits <- nchar(x)\n  if (shift >= x_digits) {\n    return(paste(rev(strsplit(x,\
    \ \"\")[[1]]), collapse = \"\"))\n  }\n  shift <- shift %% x_digits\n  split_digits\
    \ <- strsplit(x, \"\")[[1]]\n  shifted_digits <- c(split_digits[x_digits - shift\
    \ + 1:x_digits], split_digits[1:x_digits - shift])\n  return(paste(shifted_digits,\
    \ collapse = \"\"))\n}\ncircular_shift(12, 1)\n", "\n  x <- as.integer(x)\n  shift\
    \ <- as.integer(shift)\n  digits <- nchar(x)\n  if (shift > digits) {\n    x <-\
    \ rev(intToUtf8(x))\n  } else {\n    x <- strsplit(intToUtf8(x), \"\")[[1]]\n\
    \    x <- c(x[(shift + 1):digits], x[1:shift])\n    x <- paste(x, collapse = \"\
    \")\n  }\n  return(x)\n}\n", "\n  len <- str_length(as.character(x))\n  if (shift\
    \ > len) {\n    return(as.character(x)[rev(1:len)])\n  }\n  as.character(x)[c(len-shift+1:len,\
    \ 1:len-shift)]\n}", "\n    if (shift >= str_length(x)) {\n        return(str_reverse(x))\n\
    \    }\n    else {\n        return(str_c(str_sub(x, shift + 1, str_length(x)),\n\
    \                     str_sub(x, 1, shift)))\n    }\n}\n", "\n   str <- as.character(x)\n\
    \   n <- nchar(str)\n   if (shift > n) {\n      paste(rev(str), collapse = \"\"\
    )\n   } else {\n      paste(substr(str, n - shift + 1, n), substr(str, 1, n -\
    \ shift), collapse = \"\")\n   }\n}\n", "\n  # Convert x to a character string\n\
    \  x_str <- as.character(x)\n  # Determine length of x_str\n  len <- nchar(x_str)\n\
    \  # If shift > number of digits, return digits reversed\n  if (shift > len) {\n\
    \    # Reverse x_str\n    x_str <- rev(x_str)\n  } else {\n    # Reverse the first\
    \ shift elements of x_str\n    x_str[1:shift] <- rev(x_str[1:shift])\n    # Reverse\
    \ the remaining elements of x_str\n    x_str[(shift + 1):len] <- rev(x_str[(shift\
    \ + 1):len])\n  }\n  # Convert x_str back to integer\n  x_int <- as.integer(x_str)\n\
    \  # Return the result as a string\n  return(as.character(x_int))\n}", "\n   \
    \ cat(sprintf(\"%d\", x))\n}\n", "\n  if (shift >= nchar(x)) {\n    paste(rev(as.character(x)),\
    \ collapse = \"\")\n  } else {\n    x <- sprintf(\"%0*d\", nchar(x), x)\n    c(substr(x,\
    \ shift + 1, nchar(x)), substr(x, 1, shift))\n  }\n}\n", "\n  digits <- strsplit(as.character(x),\
    \ \"\")[[1]]\n  length(digits) < shift\n  shifted <- shift > length(digits)\n\
    \  shifted[1:shift] <- digits[(length(digits)-shift+1):length(digits)]\n  shifted[(shift+1):length(digits)]\
    \ <- digits[1:(length(digits)-shift)]\n  paste(shifted, collapse=\"\")\n}\n",
  "\n  x_digits <- strsplit(as.character(x), \"\")[[1]]\n  if (shift > length(x_digits))\
    \ {\n    return(paste(rev(x_digits), collapse = \"\"))\n  }\n  last_index <- length(x_digits)\
    \ - shift\n  return(paste(c(x_digits[(last_index + 1):length(x_digits)],\n   \
    \             x_digits[1:last_index]), collapse = \"\"))\n}\n", "\n  if (shift\
    \ > nchar(x)) {\n    return(as.character(rev(x)))\n  } else {\n    digits <- as.character(x)\n\
    \    for (i in 1:shift) {\n      digits <- digits[2:length(digits)] %>%\n    \
    \    paste(digits[1], ., sep=\"\")\n    }\n    return(digits)\n  }\n}\n", "\n\
    \  p1 <- toString(x)\n  n <- nchar(p1)\n  p2 <- substr(p1, n - shift + 1, n)\n\
    \  p3 <- substr(p1, 1, n - shift)\n  paste(p2, p3, sep = \"\")\n}\n", "\n    if\
    \ (shift > nchar(x)) {\n        x <- rev(x)\n    } else {\n        x <- paste(substr(x,\
    \ (1+shift):nchar(x), shift))\n    }\n    return(x)\n}\n", "\n    n <- nchar(x)\n\
    \    base <- 10^(n-1)\n    digits <- c()\n    while (x > 0) {\n        digits\
    \ <- c(digits, x %% 10)\n        x <- x %/% 10\n    }\n    if (shift > n) {\n\
    \        digits <- digits[rev(seq_len(n))]\n    } else {\n        digits <- digits[c(rev(seq_len(shift)),\
    \ rev(seq_len(n-shift)))]\n    }\n    x <- digits[1]\n    for (i in seq_len(n-1))\
    \ {\n        x <- x + digits[i+1] * base\n        base <- base / 10\n    }\n \
    \   x\n}\n", "\n  x <- as.character(x)\n  if (shift >= nchar(x)) {\n    return(x[nchar(x):1])\n\
    \  }\n  x <- c(substr(x, shift + 1, nchar(x)), substr(x, 1, shift))\n  return(x)\n\
    }\n", "\n    digits <- as.character(x)\n    shift <- shift %% length(digits)\n\
    \    if (shift == 0) {\n        digits\n    } else {\n        c(digits[shift +\
    \ 1:length(digits)], digits[1:shift])\n    }\n}\ncircular_shift(12, 1)\ncircular_shift(12,\
    \ 2)\n", "\n    x <- as.integer(x)\n    x <- as.character(x)\n    x <- as.character(rev(x))\n\
    \    for (i in 1:shift) {\n        x <- c(tail(x, 1), head(x, length(x) - 1))\n\
    \    }\n    x <- as.integer(x)\n    x <- as.character(x)\n    x <- as.character(rev(x))\n\
    \    return(x)\n}\n", "\n  num_digits <- nchar(x)\n  str_x <- toString(x)\n  sub_str_x\
    \ <- substr(str_x, num_digits-shift+1, num_digits)\n  sub_str_x <- paste(sub_str_x,\
    \ substr(str_x, 1, num_digits-shift), sep=\"\")\n  sub_str_x\n}\n", "\n    if\
    \ (is.numeric(x)) {\n        x <- as.character(x)\n    }\n    x <- strsplit(x,\
    \ \"\")[[1]]\n    shift <- shift %% length(x)\n    c(x[-(1:shift)], x[1:shift])\n\
    }\n", "\n  x_str <- as.character(x)\n  len <- nchar(x_str)\n  if (shift > len)\
    \ {\n    return(rev(x_str))\n  }\n  return(substr(x_str, shift+1, len) %s+% substr(x_str,\
    \ 1, shift))\n}", "\n  return(as.character(rev(unlist(strsplit(paste(rev(digits(x)),\
    \ collapse=\"\"), '')))))\n}\n", "\n  digits <- nchar(x)\n  y <- as.integer(nchar(x)\
    \ - shift)\n  if (y > digits) {\n    y <- as.integer(y - digits)\n  }\n  if (y\
    \ < 1) {\n    y <- as.integer(y + digits)\n  }\n  paste(substr(x, y, digits),\
    \ substr(x, 1, y - 1), sep = \"\")\n}\n", "\n  digits <- strsplit(as.character(x),\
    \ '')[[1]]\n  shifted <- append(digits[shift:length(digits)], digits[1:(shift-1)])\n\
    \  paste(shifted, collapse='')\n}\n", "\n    x_str <- as.character(x)\n    x_len\
    \ <- nchar(x_str)\n    to_shift <- min(x_len, shift)\n    x_str <- paste(substr(x_str,\
    \ to_shift + 1, x_len), substr(x_str, 1, to_shift), sep = \"\")\n    x_str\n}\n\
    circular_shift(12, 1)\ncircular_shift(12, 2)\n", "\n  # YOUR CODE HERE\n  message(\"\
    Fix me\")\n}\n", "\n  n <- nchar(x)\n  x <- as.character(x)\n  if (shift > n)\
    \ {\n    x <- rev(x)\n  } else {\n    x <- x[c(seq(shift + 1, n), seq(1, shift))]\n\
    \  }\n  return(x)\n}\ncircular_shift(12, 1)\n", "\n  # use stringr::str_split_fixed()\
    \ to split string into individual characters\n  # and transform the character\
    \ vector into an integer vector\n  characters <- as.integer(str_split_fixed(x,\
    \ \"\", n=1))\n  # determine how many characters to shift\n  shift_amt <- if (shift\
    \ > length(characters)) length(characters) else shift\n  # shift the characters\n\
    \  digits <- c(characters[(length(characters) - shift_amt + 1):length(characters)],\n\
    \              characters[1:(length(characters) - shift_amt)])\n  # paste the\
    \ shifted characters together\n  paste(digits, collapse=\"\")\n}\n", "\n    num_digits\
    \ <- floor(log10(x)) + 1\n    return(paste(substr(x, shift + 1, num_digits), substr(x,\
    \ 1, shift), sep = \"\"))\n}\n", "\n    # Write the body of the function here\n\
    \    digits = as.character(x)\n    length = nchar(digits)\n    if (shift > length)\
    \ {\n        return(paste(rev(digits), collapse = \"\"))\n    }\n    return(paste(substr(digits,\
    \ shift + 1, length), substr(digits, 1, shift),\n     collapse = \"\"))\n}\n",
  "\n    x <- as.character(x)\n    if (shift > nchar(x)) {\n        x <- paste(rev(x),\
    \ collapse = \"\")\n    } else {\n        x <- paste(c(substr(x, shift + 1, nchar(x)),\
    \ substr(x, 1, shift)), collapse = \"\")\n    }\n    return(x)\n}\n", "\n  return(as.character(rev(as.integer(substring(as.character(x),\
    \ shift, nchar(x))\n                                             % substr(as.character(x),\
    \ 1, shift-1)))))\n}\n", "\n    res <- as.character(x)\n    while (shift > 0)\
    \ {\n        res <- paste(tail(res, 1), head(res, -1), sep = \"\")\n        shift\
    \ <- shift - 1\n    }\n    return(res)\n}\n", "\n  if (shift > length(as.character(x)))\
    \ {\n    paste(reverse(strsplit(as.character(x), \"\")[[1]]), collapse = \"\"\
    )\n  } else {\n    shift.left <- substr(as.character(x), 1, length(as.character(x))\
    \ - shift)\n    shift.right <- substr(as.character(x), length(as.character(x))\
    \ - shift + 1, length(as.character(x)))\n    paste(shift.right, shift.left, sep\
    \ = \"\")\n  }\n}\n", "\n  x <- as.character(x)\n  x <- gsub('^0+', '', x)\n \
    \ digits <- nchar(x)\n  shift <- shift %% digits\n  x <- substr(x, (digits - shift\
    \ + 1):digits)\n  x <- paste0(x, substr(x, 1, shift))\n  x\n}\n", "\n  # Convert\
    \ the integer x to a string of digits.\n  digits <- strsplit(as.character(x),\
    \ \"\")[[1]]\n  shift <- shift %% length(digits)\n  # Circularly shift the digits.\n\
    \  shifted <- c(digits[(shift + 1):length(digits)], digits[1:shift])\n  # Convert\
    \ the list back to a string.\n  paste(shifted, collapse = \"\")\n}\n", "\n   \
    \ if (shift > length(x)) {\n        return(paste(rev(x), collapse = \"\"))\n \
    \   }\n    else {\n        right <- rev(substr(x, 1, shift))\n        left <-\
    \ substr(x, shift + 1, length(x))\n        return(paste(right, left, collapse\
    \ = \"\"))\n    }\n}\n", "\n  n <- nchar(x)\n  x <- as.character(x)\n  if (shift\
    \ > n) {\n    return(rev(x))\n  }\n  return(paste(x[1:(n - shift)], x[(n - shift\
    \ + 1):n], sep = \"\"))\n}\n", "\n  num_digits <- nchar(x)\n  if (shift > num_digits)\
    \ {\n    return(paste(rev(strsplit(as.character(x), '')[[1]]), collapse = ''))\n\
    \  } else {\n    # split digits into vector\n    digits <- strsplit(as.character(x),\
    \ '')[[1]]\n    # circular shift vector\n    digits <- c(digits[(shift + 1):num_digits],\
    \ digits[1:shift])\n    # return digits as string\n    return(paste(digits, collapse\
    \ = ''))\n  }\n}\n", "\n  if (shift > length(x)) {\n    x <- rev(x)\n  } else\
    \ {\n    x <- c(x[shift:length(x)], x[1:(shift-1)])\n  }\n  as.character(x)\n}",
  "\n  if(shift > nchar(x)) {\n    return(rev(as.character(x)))\n  }\n  else {\n \
    \   return(paste(substr(as.character(x), shift+1, nchar(x)), substr(as.character(x),\
    \ 1, shift), sep = \"\"))\n  }\n}\n", "\n  if (shift == 0) {\n    return(as.character(x))\n\
    \  } else {\n    x_string <- as.character(x)\n    n <- nchar(x_string)\n    if\
    \ (shift >= n) {\n      return(strrev(x_string))\n    } else {\n      return(substr(x_string,\
    \ n - shift + 1, n) %>%\n               paste(substr(x_string, 1, n - shift),\
    \ sep = \"\"))\n    }\n  }\n}\n", "\n  digits <- strsplit(as.character(x), \"\"\
    )[[1]]\n  xlen <- length(digits)\n  shift <- shift %% xlen\n  shifted <- c(digits[(xlen\
    \ - shift + 1):xlen], digits[1:(xlen - shift)])\n  paste(shifted, collapse = \"\
    \")\n}\n", "\n  x <- as.character(x)\n  if (length(x) < shift) {\n    paste(rev(x),\
    \ collapse=\"\")\n  } else {\n    paste(c(substr(x, 1 + shift, length(x)), substr(x,\
    \ 1, shift)), collapse=\"\")\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(x %in% c(0:9)){\n\
    \    as.character(x)\n  }else{\n    length <- nchar(x)\n    x_str <- as.character(x)\n\
    \    new_str <- substring(x_str, shift+1)\n    new_str <- paste(new_str, substring(x_str,\
    \ 1, shift), sep = \"\")\n    new_str\n  }\n}", "\n  digits <- strsplit(as.character(x),\
    \ '')[[1]]\n  shift <- shift %% length(digits)\n  c(digits[(length(digits)-shift+1):length(digits)],\
    \ digits[1:(length(digits)-shift)]) %>%\n    unlist() %>%\n    as.character()\
    \ %>%\n    paste(collapse='')\n}\n", "\n  digits <- strsplit(x, \"\")[[1]]\n \
    \ c(digits[seq(shift + 1, length(digits))], digits[seq(1, shift)]) %>% paste(collapse\
    \ = \"\")\n}\n\ncircular_shift(12, 1)\ncircular_shift(12, 2)\n", "\n  if(shift\
    \ > nchar(x)) {\n    paste(rev(charToRaw(x)), collapse = \"\")\n  } else {\n \
    \   paste(rev(charToRaw(x)), collapse = \"\")[shift:nchar(x)]\n  }\n}\ncircular_shift(x\
    \ = 12, shift = 1)\n", "\n    original = x\n    count = 0\n    while (x != 0)\
    \ {\n        count = count + 1\n        x = x %/% 10\n    }\n    x = original\n\
    \    for (i in 1:shift) {\n        x = (x %% 10) * 10^(count-1) + x %/% 10\n \
    \   }\n    x\n}", "\n  if (shift > nchar(x)) return(as.character(x)[nchar(x):1])\n\
    \  as.character(x)[(1+shift):nchar(x)] <- as.character(x)[1:(nchar(x)-shift)]\n\
    \  as.character(x)[1:shift] <- as.character(x)[nchar(x)-shift+1:nchar(x)]\n  as.character(x)\n\
    }\n", "\n    # return (strsplit(substr(x, shift, length(x)), \"\")[[1]])\n   \
    \ digits <- unlist(strsplit(substr(x, shift, length(x)), \"\"))\n    if(length(digits)\
    \ < shift) {\n        return (rev(digits))\n    }\n    return (digits)\n}\n",
  "\n  n <- nchar(x)\n  if (shift > n) {\n    return(rev(x))\n  }\n  x <- as.character(x)\n\
    \  return(paste(x[(n-shift+1):n], x[1:(n-shift)], sep = \"\"))\n}\n", "\n    if(shift\
    \ == 0) {\n        return(as.character(x))\n    }\n    y <- as.character(x)\n\
    \    if(shift >= length(y)) {\n        return(paste(rev(y), collapse = \"\"))\n\
    \    }\n    return(paste(y[(length(y) - shift + 1):length(y)], y[1:(length(y)\
    \ - shift)], sep = \"\"))\n}\n", "\n  x <- as.integer(x)\n  shift <- as.integer(shift)\n\
    \  n <- nchar(x)\n  if (shift > n) {\n    paste(rev(unlist(strsplit(as.character(x),\
    \ \"\"))), collapse = \"\")\n  } else {\n    paste(unlist(strsplit(paste(unlist(strsplit(as.character(x),\
    \ \"\")), collapse = \"\"), \"\")), collapse = \"\")\n  }\n}\n", "\n  digits <-\
    \ strsplit(as.character(x), \"\")[[1]]\n  len <- length(digits)\n  if (shift >\
    \ len) {\n    digits <- rev(digits)\n  } else {\n    digits <- c(digits[(shift\
    \ + 1):len], digits[1:shift])\n  }\n  return(paste(digits, collapse = \"\"))\n\
    }\n", "\n  x2 <- x\n  while (shift > 0) {\n    x2 <- (x2 %/% 10) + (x2 %% 10)\
    \ * 10^(floor(log10(x2)) + 1)\n    shift <- shift - 1\n  }\n  return(x2)\n}\n",
  "\n  x <- (format(x, scientific = FALSE))\n  shift <- shift % nchar(x)\n  if(nchar(x)\
    \ == 1) {\n    return(x)\n  } else {\n    return(paste(substr(x, (shift + 1):nchar(x),\
    \ (shift + 1):nchar(x)), substr(x, 1:shift, 1:shift), sep = \"\"))\n  }\n}\n",
  "\n  str(x)\n  x_chars <- unlist(strsplit(as.character(x), \"\"))\n  n <- length(x_chars)\n\
    \  x_chars[c(shift+1:n, 1:shift)]\n}\n", "\n  result <- sprintf(\"%0*d\", digits(x),\
    \ x)\n  result <- substr(result, length(result) - shift + 1, length(result))\n\
    \  result <- paste(result, substr(result, 1, shift - 1), sep = \"\")\n  return(result)\n\
    }\n", "\n   shift <- shift %% nchar(x)\n   paste(substr(x, nchar(x) - shift +\
    \ 1, nchar(x)), substr(x, 1, nchar(x) - shift), sep=\"\")\n}", "\n  x <- as.character(x)\n\
    \  n <- length(x)\n  shift <- shift %% n\n  if (shift == 0) {\n    x\n  } else\
    \ {\n    paste(rev(x[(n - shift + 1):n]), rev(x[1:(n - shift)]), sep = \"\")\n\
    \  }\n}\n", "\n  digits <- strsplit(as.character(x), \"\")[[1]]\n  length <- length(digits)\n\
    \  if (shift > length) {\n    digits <- digits[length:1]\n  } else {\n    digits\
    \ <- c(digits[(length - shift + 1):length], digits[1:(length - shift)])\n  }\n\
    \  return(paste(digits, collapse = \"\"))\n}\n", "\n    if (shift == 0) {\n  \
    \      return(x)\n    }\n    else {\n        digits <- as.integer(nchar(x))\n\
    \        digits_to_shift <- max(0, digits - shift)\n        string_format <- sprintf(\"\
    %%0%dd\", digits)\n        x_str <- sprintf(string_format, x)\n        paste(substr(x_str,\
    \ digits_to_shift + 1, digits),\n              substr(x_str, 1, digits_to_shift),\n\
    \              sep = \"\")\n    }\n}\n", "\n    x_str <- as.character(x)\n   \
    \ shift <- as.integer(shift)\n    if (shift > nchar(x_str))\n        return(stringr::str_reverse(x_str))\n\
    \    else {\n        x_str <- paste0(stringr::str_split(x_str, \"\")[[1]], collapse\
    \ = \"\")\n        return(stringr::str_c(stringr::str_sub(x_str, seq(shift + 1,\
    \ nchar(x_str)), shift + 1),\n            stringr::str_sub(x_str, 1, shift)))\n\
    \    }\n}\n", "\n  shift <- shift %% nchar(x)\n  return(paste(substr(x, shift\
    \ + 1, nchar(x)), substr(x, 1, shift), sep=\"\"))\n}\n", "\n  if (shift > nchar(x))\
    \ {\n    return(paste(rev(strsplit(as.character(x), \"\")[[1]]), collapse = \"\
    \"))\n  }\n  digits <- strsplit(as.character(x), \"\")[[1]]\n  circ_split <- nchar(x)\
    \ - shift\n  return(paste(c(digits[(circ_split + 1):nchar(x)], digits[1:circ_split]),\
    \ collapse = \"\"))\n}\n", "\n  digits <- as.character(x)\n  if (shift > nchar(digits))\
    \ {\n    return(sapply(strsplit(digits, ''), '[[', nchar(digits):1))\n  }\n  digits\
    \ <- c(digits[shift+1:nchar(digits)], digits[1:shift])\n  return(digits)\n}\n",
  "\n  digits <- strsplit(as.character(x), '')[[1]]\n  if (shift > length(digits))\
    \ {\n    rev(digits)\n  } else {\n    c(digits[(length(digits) - shift + 1):length(digits)],\
    \ digits[1:(length(digits) - shift)])\n  }\n}\n", "\n    if (shift > nchar(x))\
    \ {\n        # If shift is greater than number of digits in the input\n      \
    \  return(strrev(as.character(x)))\n    } else {\n        # Otherwise shift digits\
    \ right by shift\n        s <- strsplit(as.character(x), split=\"\")[[1]]\n  \
    \      return(paste(s[(shift+1):length(s)], s[1:shift], sep=\"\"))\n    }\n}\n",
  "\n  digits <- integer_to_digits(x)\n  n <- length(digits)\n  shifted <- c(digits[n\
    \ - shift + 1:n], digits[1:(n - shift)])\n  return(digits_to_integer(shifted))\n\
    }\ncircular_shift(12, 1)\n", "\n  x <- as.character(x)\n  if (length(x) <= shift)\
    \ {\n    rev(x)\n  } else {\n    c(x[-(1:shift)], x[1:shift])\n  }\n}\n", "\n\
    \    digits <- strsplit(as.character(x), '')[[1]]\n    c(digits[(length(digits)\
    \ - shift + 1):length(digits)], digits[1:(length(digits) - shift)]) %>%\n    \
    \    paste(collapse = '')\n}\n\ncircular_shift(12, 1)\ncircular_shift(12, 2)\n",
  "\n  if (shift <= 0) return(as.character(x))\n  if (shift > nchar(x)) return(rev(as.character(x)))\n\
    \  string <- as.character(x)\n  char_vec <- string(nchar(string))\n  for (i in\
    \ seq_along(string)) {\n    index <- i + shift\n    if (index > nchar(string))\
    \ index <- index - nchar(string)\n    char_vec[index] <- string[i]\n  }\n  paste(char_vec,\
    \ collapse = \"\")\n}\n", "\n    stopifnot(x > 0, shift > 0)\n    digits <- digits(x)\n\
    \    shift <- shift %% length(digits)\n    c(digits[(shift + 1):length(digits)],\
    \ digits[1:shift])\n}\n", "\n  # YOUR CODE HERE\n  digits <- strsplit(as.character(x),\
    \ \"\")[[1]]\n  if (shift > length(digits))\n    digits <- digits[length(digits):1]\n\
    \  else {\n    digits <- digits[(length(digits)-shift+1):length(digits)]\n   \
    \ digits <- c(digits, digits[1:(length(digits)-shift)])\n  }\n  return(paste(digits,\
    \ collapse=\"\"))\n}\n\ngrade(\"tests/q3.R\")\n ", "\n  digits <- strsplit(as.character(x),\
    \ \"\")[[1]]\n  shifts <- strsplit(as.character(shift), \"\")[[1]]\n  l <- length(digits)\n\
    \  out <- c(digits[shift + 1:l], digits[1:shift])\n  paste(out, collapse = \"\"\
    )\n}\n", "\n  # Extract the digits as characters\n  digits <- as.character(x)\n\
    \  # Circular shift the digits and return as a string\n  return(paste(digits[(length(digits)\
    \ - shift + 1):length(digits)],\n               digits[1:(length(digits) - shift)],\
    \ sep = \"\"))\n}", "\n  # N.B. the ceiling rounds up, i.e. 1.5 -> 2\n  shifted\
    \ <- ifelse(shift > ceiling(log10(x)), rev(as.character(x)),\n               \
    \     paste(tail(as.character(x), shift),\n                          head(as.character(x),\
    \ -shift), sep = \"\"))\n  return(shifted)\n}\n", "\n  str_c(rev(stringr::str_split(string\
    \ = x, pattern = \"\")[[1]]), collapse = \"\")\n}\n", "\n  digits <- strsplit(as.character(x),\
    \ split=\"\")[[1]]\n  shifted <- c(digits[-(1:shift)], digits[1:shift])\n  return(paste(shifted,\
    \ collapse=\"\"))\n}\n", "\n  x_string <- as.character(x)\n  return(paste(c(tail(x_string,\
    \ shift), head(x_string, nchar(x_string) - shift)), collapse = \"\"))\n}\n", "\n\
    \  digs <- digits(x)\n  y <- as.integer(paste(c(digs[(length(digs)-shift+1):length(digs)],\
    \ digs[1:(length(digs)-shift)]), collapse = \"\"))\n  return(y)\n}\n\nrotate <-\
    \ function(k) {\n  c <- circular_shift(k, 1)\n  return(c)\n}\n", "\n  num_digits\
    \ <- nchar(x)\n  if (shift > num_digits) return(rev(as.character(x)))\n  for (i\
    \ in 1:shift) {\n    x <- x %/% 10 + x %% 10 * 10^(num_digits - 1)\n  }\n  as.character(x)\n\
    }\ncircular_shift(12, 1)\n", "\n  str <- as.character(x)\n  n_digit <- nchar(str)\n\
    \  if (shift >= n_digit) {\n    paste(rev(str), collapse = \"\")\n  } else {\n\
    \    sub(str, pattern = \"(.{\" + shift + \"})(.*)\", replacement = \"\\\\2\\\\\
    1\")\n  }\n}\n ", "\n  x = toString(x)\n  if (shift >= nchar(x)) {\n    x = stringr::str_reverse(x)\n\
    \  } else {\n    x = stringr::str_c(stringr::str_sub(x, 1 + shift, -1),\n    \
    \                   stringr::str_sub(x, 1, shift))\n  }\n  return(x)\n}", "\n\
    \  if (shift >= length(as.character(x))) {\n    rev(as.character(x))\n  } else\
    \ {\n    substr(paste0(x, x), (shift + 1):(shift + length(as.character(x))),\n\
    \          (shift + 1):(shift + length(as.character(x))))\n  }\n}\n", "\n    n\
    \ <- nchar(x)\n    digits <- strsplit(as.character(x), \"\")[[1]]\n    if (shift\
    \ > n) {\n        rev(digits)\n    } else {\n        c(digits[-(1:shift)], digits[1:shift])\n\
    \    }\n}\ncircular_shift(12, 1)\ncircular_shift(12, 2)\n", "\n  N <- floor(log10(x))\n\
    \  x <- x * 10 ^ (shift - 1)\n  x <- x %% 10 ^ N\n  x <- x * 10 ^ (N - shift +\
    \ 1)\n  return(as.character(x))\n}\n", "\n    digs <- strsplit(as.character(x),\
    \ \"\")[[1]]\n    if (shift > length(digs))\n        rev(digs)\n    else\n   \
    \     c(digs[-(1:shift)], digs[1:shift])\n}\n", "\n  digits <- strsplit(as.character(x),\
    \ '')[[1]]\n  digits <- c(digits[length(digits)-shift+1:length(digits)], digits[1:length(digits)-shift])\n\
    \  paste(digits, collapse='')\n}\n", "\n  res <- x\n  while (shift > 0) {\n  \
    \  res <- res %/% 10 + (res %% 10) * 10^(floor(log10(res)) + 1)\n    shift <-\
    \ shift - 1\n  }\n  return(res)\n}\n", "\n  x_str <- format(x, width = 0, scientific\
    \ = FALSE)\n  if (shift > nchar(x_str)) {\n    return(reverse(x_str))\n  }\n \
    \ substr(x_str, shift + 1, nchar(x_str)) %>% str_c(substr(x_str, 1, shift))\n\
    }\n", "\n  stopifnot(is.integer(x))\n  x <- as.character(x)\n  n <- nchar(x)\n\
    \  # If shift > number of digits, return digits reversed.\n  if (shift > n) {\n\
    \    return(stringr::str_reverse(x))\n  }\n  tail <- stringr::str_sub(x, -shift)\n\
    \  head <- stringr::str_sub(x, 1, n - shift)\n  return(paste0(tail, head))\n}\n",
  "\n  string <- as.character(x)\n  shift <- shift %% nchar(string)\n  string <- paste(substr(string,\
    \ 1 + shift, nchar(string)),\n                  substr(string, 1, shift), sep\
    \ = \"\")\n  return(string)\n}\n", "\n    sapply(strsplit(x, \"\"), function(x)\
    \ paste(rev(x), collapse=\"\"))\n}\n", "\n  digits <- as.integer(intToBits(x))\n\
    \  digits <- digits[seq_len(shift):length(digits)]\n  digits <- c(digits, digits[seq_len(shift-1)])\n\
    \  paste(digits, collapse = \"\")\n}", "\n  n <- floor(log10(x)) + 1\n  # Shift\
    \ is bigger than digits, return reversed\n  if (shift > n) return(digits_to_int(rev(int_to_digits(x))))\n\
    \  # Otherwise, rotate digits right by shift amount\n  else return(digits_to_int(c(int_to_digits(x)[(shift+1):n],\
    \ int_to_digits(x)[1:shift])))\n}\n", "\n  x <- as.integer(x)\n  shift <- as.integer(shift)\n\
    \  x_str <- as.character(x)\n  num_digits <- nchar(x_str)\n  if (shift > num_digits)\
    \ {\n    return(rev(x_str))\n  }\n  shift_str <- substr(x_str, (num_digits - shift\
    \ + 1):num_digits, 1)\n  shifted_str <- substr(x_str, 1:(num_digits - shift),\
    \ 1)\n  paste(shift_str, shifted_str, sep = \"\")\n}\n", "\n  str <- paste(x,\
    \ collapse=\"\")\n  if (shift > nchar(str)) {\n    return(rev(str))\n  }\n  return(paste(substr(str,\
    \ shift + 1, nchar(str)), substr(str, 1, shift), sep=\"\"))\n}\n", "\n  if(x <=\
    \ 10^shift) {\n    return(strreverse(as.character(x)))\n  } else {\n    x <- strsplit(as.character(x),\
    \ \"\")[[1]]\n    x <- c(x[(length(x)-shift+1):length(x)], x[1:(length(x)-shift)])\n\
    \    return(paste(x, collapse=\"\"))\n  }\n}\n", "\n  if (shift <= 0) return(as.character(x))\n\
    \  digits <- as.character(x)\n  digits <- c(digits[-(1:shift)], digits[1:shift])\n\
    \  return(digits)\n}", "\n    x <- as.character(x)\n    if (shift >= nchar(x))\
    \ {\n        paste(rev(strsplit(x, '')[[1]]), collapse = '')\n    } else {\n \
    \       paste(strsplit(substr(x, shift + 1, nchar(x)), '')[[1]], \n          \
    \    strsplit(substr(x, 1, shift), '')[[1]], collapse = '')\n    }\n}\n", "\n\
    \    digits <- strsplit(as.character(x), '')[[1]]\n    n <- length(digits)\n \
    \   if (shift < n) {\n        digits[shift + 1:n] <- digits[1:n - shift]\n   \
    \     digits[1:shift] <- digits[n - shift + 1:n]\n    } else {\n        digits\
    \ <- digits[n:1]\n    }\n    paste(digits, collapse = '')\n}\n", "\n  x_str <-\
    \ sprintf(\"%d\", x)\n  num_digits <- nchar(x_str)\n  if (shift > num_digits)\
    \ {\n    rev(x_str)\n  } else {\n    x_str <- substr(x_str, shift+1, num_digits)\n\
    \    x_str <- paste(x_str, substr(x_str, 1, shift), sep=\"\")\n  }\n}\n", "\n\
    \  if(shift > nchar(x)) {\n    return(paste(rev(strsplit(as.character(x), \"\"\
    )[[1]]), collapse=\"\"))\n  } else {\n    x_as_string <- as.character(x)\n   \
    \ return(paste(tail(strsplit(x_as_string, \"\")[[1]], shift),\n              \
    \  head(strsplit(x_as_string, \"\")[[1]], nchar(x_as_string) - shift),\n     \
    \           collapse=\"\"))\n  }\n}\n", "\n  x_digits <- as.numeric(strsplit(as.character(x),\
    \ split = \"\")[[1]])\n  n <- length(x_digits)\n  x_digits_shifted <- c(x_digits[-(n-shift+1):n],\
    \ x_digits[-(n-shift):(n-1)])\n  as.numeric(paste(x_digits_shifted, collapse =\
    \ \"\"))\n}\n", "\n    if(shift > nchar(x))\n        return(reverse(as.character(x)))\n\
    \    a <- as.character(x)\n    return(paste(a[(shift+1):nchar(x)], a[1:shift],\
    \ sep=\"\"))\n}\n", "\n    # A vector of characters\n    x_chars <- strsplit(as.character(x),\
    \ \"\")[[1]]\n    length(x_chars)\n    shift_chars <- c(x_chars[(length(x_chars)\
    \ - shift + 1):length(x_chars)], x_chars[1:(length(x_chars) - shift)])\n    paste(shift_chars,\
    \ collapse = \"\")\n}\ncircular_shift(12, 1)\ncircular_shift(12, 2)\n", "\n  digits\
    \ <- as.integer(unlist(strsplit(as.character(x), split=\"\")))\n  if (shift >\
    \ length(digits)) {\n    paste(rev(digits), collapse=\"\")\n  } else {\n    paste(c(digits[(length(digits)\
    \ - shift + 1):length(digits)],\n            digits[1:(length(digits) - shift)]),\
    \ collapse=\"\")\n  }\n}\n", "\n    charvec <- strsplit(as.character(x), \"\"\
    )[[1]]\n    charvec <- c(charvec[(length(charvec) - shift + 1):length(charvec)],\
    \ charvec[1:(length(charvec) - shift)])\n    paste(charvec, collapse = \"\")\n\
    }\ncircular_shift(12, 1)\ncircular_shift(12, 2)\ncircular_shift(12, 3)\n", "\n\
    \  return(paste(stringr::str_split(x, \"\")[[1]][c(seq(shift, length(x)), seq(1,\
    \ shift - 1))], collapse = \"\"))\n}\n", "\n  digits <- strsplit(as.character(x),\
    \ \"\")[[1]]\n  # http://stackoverflow.com/questions/11744808/shift-array-elements-circularly-in-r\n\
    \  digits <- c(digits[(shift+1):length(digits)], digits[1:shift])\n  return(paste(digits,\
    \ collapse=\"\"))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
