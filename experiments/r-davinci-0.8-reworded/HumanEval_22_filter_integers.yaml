name: HumanEval_22_filter_integers
language: r
prompt: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
  \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n# c(1,\
  \ 2, 3)\nfilter_integers <- function(values) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_integers\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(4, list(), c(), 23.2, 9, 'adasd')),\
  \ c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3, 'c', 3, 3, 'a', 'b')),\
  \ c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  ints <- NULL\n  for (v in values) {\n    if (is.integer(v)) {\n\
    \      ints <- c(ints, v)\n    }\n  }\n  return(ints)\n}\n", "\n  lapply(values,\
    \ \n         is.integer, \n         simplify = FALSE, \n         USE.NAMES = FALSE)\n\
    }\n", "\n    # Insert your code here\n    return(values[sapply(values, is.integer)])\n\
    }\n", "\n    ## TODO\n    integers <- list()\n    for (i in 1:length(values))\
    \ {\n        if (is.integer(values[i])) {\n            integers <- c(integers,\
    \ values[i])\n        }\n    }\n    return(integers)\n}\n", "\n    values[is.integer(values)]\n\
    }\n", "\n  return(c(values[which(is.integer(values))]))\n}\n", "\n    int_values\
    \ <- c()\n    for (val in values) {\n        if (is.integer(val)) {\n        \
    \    int_values <- c(int_values, val)\n        }\n    }\n    return(int_values)\n\
    }\n", "\n    return(values[sapply(values, function(v) is.integer(v))])\n}\n",
  "\n  values <- sapply(values, is.integer)\n  return(values)\n}\n", "\n    return(Filter(function(value)\
    \ is.integer(value), values))\n}\n", "\n  # Your code goes here\n  values[sapply(values,\
    \ is.integer)]\n}\n ", "\n  return(values[sapply(values, is.integer)])\n}\n",
  "\n    matches <- vapply(values, is.integer, logical(1))\n    values[matches]\n\
    }\n", "\n  return(values[!is.na(values) & is.integer(values)])\n}\n", "\n    integers\
    \ = lapply(values, is.integer)\n    return(values[as.logical(integers)])\n}\n\
    filter_integers(c('a', 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc', list(), c()))\n",
  "\n  # Filter only for integers\n  filtered <- Filter(is.integer, values)\n  return(filtered)\n\
    }\n", "\n    values <- values[sapply(values, is.integer)]\n    return(values)\n\
    }\n", "\n  # use vapply to get the type of the values and then return those which\
    \ are integer\n  return(values[vapply(values, FUN.VALUE = integer(1), typeof)\
    \ == 'integer'])\n}\n", "\n    return(values[sapply(values, is.integer)])\n}\n",
  "\n  # code omitted\n}"]
stop_tokens:
- "\n#"
- "\n```"
