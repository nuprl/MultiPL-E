name: HumanEval_22_filter_integers
language: r
prompt: "# Filter given list of any rthon values only for integers\n# >>> filter_integers(c('a',\
  \ 3.14, 5))\n# c(5)\n# >>> filter_integers(c(1, 2, 3, 'abc', list(), c()))\n# c(1,\
  \ 2, 3)\nfilter_integers <- function(values) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_integers\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(4, list(), c(), 23.2, 9, 'adasd')),\
  \ c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3, 'c', 3, 3, 'a', 'b')),\
  \ c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  ints <- NULL\n  for (v in values) {\n    if (is.integer(v)) {\n\
    \      ints <- c(ints, v)\n    }\n  }\n  return(ints)\n}\n", "\n  lapply(values,\
    \ \n         is.integer, \n         simplify = FALSE, \n         USE.NAMES = FALSE)\n\
    }\n", "\n    # Insert your code here\n    return(values[sapply(values, is.integer)])\n\
    }\n", "\n    ## TODO\n    integers <- list()\n    for (i in 1:length(values))\
    \ {\n        if (is.integer(values[i])) {\n            integers <- c(integers,\
    \ values[i])\n        }\n    }\n    return(integers)\n}\n", "\n    values[is.integer(values)]\n\
    }\n", "\n  return(c(values[which(is.integer(values))]))\n}\n", "\n    int_values\
    \ <- c()\n    for (val in values) {\n        if (is.integer(val)) {\n        \
    \    int_values <- c(int_values, val)\n        }\n    }\n    return(int_values)\n\
    }\n", "\n    return(values[sapply(values, function(v) is.integer(v))])\n}\n",
  "\n  values <- sapply(values, is.integer)\n  return(values)\n}\n", "\n    return(Filter(function(value)\
    \ is.integer(value), values))\n}\n", "\n  # Your code goes here\n  values[sapply(values,\
    \ is.integer)]\n}\n ", "\n  return(values[sapply(values, is.integer)])\n}\n",
  "\n    matches <- vapply(values, is.integer, logical(1))\n    values[matches]\n\
    }\n", "\n  return(values[!is.na(values) & is.integer(values)])\n}\n", "\n    integers\
    \ = lapply(values, is.integer)\n    return(values[as.logical(integers)])\n}\n\
    filter_integers(c('a', 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc', list(), c()))\n",
  "\n  # Filter only for integers\n  filtered <- Filter(is.integer, values)\n  return(filtered)\n\
    }\n", "\n    values <- values[sapply(values, is.integer)]\n    return(values)\n\
    }\n", "\n  # use vapply to get the type of the values and then return those which\
    \ are integer\n  return(values[vapply(values, FUN.VALUE = integer(1), typeof)\
    \ == 'integer'])\n}\n", "\n    return(values[sapply(values, is.integer)])\n}\n",
  "\n  # code omitted\n}", "\n    if(is.null(values)) {\n        return(NULL)\n  \
    \  }\n    return(values[which(sapply(values, is.integer))])\n}\n", "\n    # write\
    \ your code here\n}\n ", "\n  values[sapply(values, is.integer)]\n}\n", "\n  \
    \  val_is_int <- sapply(values, is.integer)\n    values[val_is_int]\n}\nprint(filter_integers(c('a',\
    \ 3.14, 5)))\nprint(filter_integers(c(1, 2, 3, 'abc', list(), c())))\n", "\n \
    \ if (is.null(values)) {\n    return(NULL)\n  }\n  values[which(!is.null(values)\
    \ & is.integer(values))]\n}\n", "\n  return(values[sapply(values, inherits, \"\
    integer\")])\n}\n", "\n    # TODO: YOUR CODE HERE\n    x <- values[which(!is.na(values))]\n\
    \    x <- x[which(is.integer(x))]\n    return(x)\n}\n", "\n  if (!is.vector(values))\n\
    \    stop('Values parameter should be a vector')\n  # ...\n}\n", "\n\tvalues[sapply(values,\
    \ function(x) is.integer(x))]\n}\n", "\n  filtered <- c()\n  for (value in values)\
    \ {\n    if (is.integer(value)) {\n      filtered <- c(filtered, value)\n    }\n\
    \  }\n  return(filtered)\n}\n", "\n    return(Filter(function(x) is.integer(x),\
    \ values))\n}\n", "\n  values[sapply(values, is.integer)]\n}\n", "\n  return(Filter(is.integer,\
    \ values))\n}\n", "\n  return(Filter(is.integer, values))\n}\n ", "\n    # TODO:\
    \ implement your code here\n    return(values)\n}\n\ntest_that('test for filter_integers',\
    \ {\n    expect_equal(sort(filter_integers(c('a', 3.14, 5))), 5)\n    expect_equal(sort(filter_integers(c(1,\
    \ 2, 3, 'abc', list(), c()))), 1:3)\n})\n ", "\n  is.integer(values)\n}\n", "\n\
    \    # YOUR CODE HERE\n    ls = list()\n    for (i in values) {\n        if (is.integer(i))\
    \ {\n            ls = c(ls, i)\n        }\n    }\n    return(ls)\n}\n", "\n  unlist(values[sapply(values,\
    \ is.integer)])\n}\n", "\n  values[\n    sapply(values, function(value) {\n  \
    \    class(value) == 'integer'\n    })\n  ]\n}\n", "\n    return(Filter(is.integer,\
    \ values))\n}\n", "\n    integer_numbers <- c()\n    for (value in values) {\n\
    \        if (is.integer(value)) {\n            integer_numbers <- c(integer_numbers,\
    \ value)\n        }\n    }\n    return(integer_numbers)\n}\nfilter_integers(c('a',\
    \ 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc', list(), c()))\n", "\n\tint_filter\
    \ <- function(x) {\n\t\tif (class(x) == 'integer') {\n\t\t\treturn(TRUE)\n\t\t\
    } else {\n\t\t\treturn(FALSE)\n\t\t}\n\t}\n\treturn(Filter(int_filter, values))\n\
    }\n\n", "\n  list_of_integers <- list()\n  for (value in values) {\n    # Check\
    \ if value can be cast to integer\n    is_integer <- tryCatch(\n      {\n    \
    \    as.integer(value)\n        TRUE\n      },\n      error = function(e) {\n\
    \        FALSE\n      }\n    )\n    if (is_integer) {\n      list_of_integers\
    \ <- c(list_of_integers, value)\n    }\n  }\n  return(list_of_integers)\n}\n",
  "\n  return(values[unlist(sapply(values, is.integer))])\n}\n", "\n  integers <-\
    \ vector(mode='integer', length=0)\n  for (value in values) {\n    if (is.integer(value))\
    \ {\n      integers <- c(integers, value)\n    }\n  }\n  return(integers)\n}\n",
  "\n  return(values[values %in% as.integer(values)])\n}\n", "\n    return(values[which(sapply(values,\
    \ is.integer))])\n}", "\n    filter(values, is.integer)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  int_values <- values[sapply(values, function(x) class(x) == \"integer\"\
    )]\n  return(int_values)\n}\n", "\n  return(unlist(lapply(values, function(x)\
    \ if (is.integer(x)) x else NULL)))\n}\n", "\n  # TODO: Replace with your code\n\
    \  # return a vector of only the integers\n  return (values[sapply(values, is.integer)])\n\
    }\n", "\n    # TODO\n    integers_only <- integer(0)\n    for (i in 1:length(values)){\n\
    \        if (is.integer(values[i])){\n            integers_only <- c(integers_only,\
    \ values[i])\n        }\n    }\n    return(integers_only)\n}\n ", "\n  filtered_values\
    \ <- lapply(values, function(value) {\n    if (class(value) == 'integer') {\n\
    \      value\n    }\n  })\n  filtered_values <- filtered_values[!sapply(filtered_values,\
    \ is.null)]\n  return(filtered_values)\n}\n", "\n    list_values <- c()\n    for\
    \ (value in values) {\n        if (is.integer(value)) {\n            list_values\
    \ <- c(list_values, value)\n        }\n    }\n    return(list_values)\n}\nfilter_integers(c('a',\
    \ 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc', list(), c()))\n", "\n    filtered_values\
    \ <- c()\n    for (value in values) {\n        if (is.integer(value)) {\n    \
    \        filtered_values <- c(filtered_values, value)\n        }\n    }\n    return(filtered_values)\n\
    }\n", "\n    ints <- numeric()\n    for (n in values) {\n        if (is.integer(n))\
    \ {\n            ints <- c(ints, n)\n        }\n    }\n    return(ints)\n}\n",
  "\n  integers <- c()\n  for (value in values) {\n    if (is.integer(value)) {\n\
    \      integers <- c(integers, value)\n    }\n  }\n  return(integers)\n}", "\n\
    \  # YOUR CODE HERE\n  sapply(values, function(x) {\n      if (is.integer(x))\
    \ {\n        return(x)\n      }\n    })\n}\n", "\n  values[sapply(values, is.integer)]\n\
    }", "\n  return(Filter(is.integer, values))\n}", "\n    integers <- vector()\n\
    \    for (value in values) {\n        if (is.integer(value)) {\n            integers\
    \ <- c(integers, value)\n        }\n    }\n    return(integers)\n}\n", "\n  lapply(values,\
    \ function(value) {\n    # Check if it is an integer\n    if (is.integer(value))\
    \ {\n      # Return the value\n      return(value)\n    }\n  })\n}\n", "\n  Filter(function(x)\
    \ {\n    if (is.integer(x)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  }, values)\n}\n", "\n    return(Filter(is.integer, values))\n}\n ",
  "\n  Filter(is.integer, values)\n}\n", "\n    values[sapply(values, is.integer)]\n\
    }\n", "\n    filtered <- values[sapply(values, function(x) is.integer(x))]\n \
    \   return(filtered)\n}\n", "\n  unlist(lapply(values, function(x) {\n    if (is.integer(x))\
    \ x\n  }))\n}\n", "\n  return(Filter(is.integer, values))\n}\n ", "\n  return(as.vector(values[is.integer(values)]))\n\
    }\n", "\n  return(values[sapply(values, is.integer)])\n}\n", "\n  # Hard coded\
    \ for now\n  filter(values, function(x) is.integer(x))\n}\n", "\n    # Your code\
    \ goes here\n    a <- c()\n    for (i in values) {\n        if (is.integer(i))\
    \ {\n            a <- c(a, i)\n        }\n    }\n    return(a)\n}\n", "\n    i\
    \ = 0\n    for (v in values) {\n        if (is.integer(v)) {\n            if (i\
    \ == 0) {\n                output = c(v)\n            } else {\n             \
    \   output = c(output, v)\n            }\n            i = i + 1\n        }\n \
    \   }\n    return(output)\n}\n", "\n    Filter(is.integer, values)\n}\n", "\n\
    \    type_validation_with_error_message(values, 'vector')\n    return(Filter(is.integer,\
    \ values))\n}\n", "\n  return(values[sapply(values, is.integer)])\n}\n", "\n \
    \ values[is.integer(values)]\n}\n ", "\n  values <- as.list(values)\n  filtered\
    \ <- Filter(is.integer, values)\n  return(filtered)\n}\n", "\n    out <- values[sapply(values,\
    \ is.integer)]\n    return(out)\n}\n", "\n  return(values[sapply(values, is.integer)])\n\
    }\n", "\n  # Your code here\n}", "\n  values %>% \n    filter(is.integer(.))\n\
    }\n", "\n  values <- as.list(values)\n  # Only keep the values of type integer\n\
    \  values <- Filter(is.integer, values)\n  values\n}\n", "\n  if (length(values)\
    \ < 1) {\n    return(NULL)\n  }\n\n  # Initialize boolean vector with True\n \
    \ filtered <- rep(TRUE, length(values))\n\n  for (i in 1:length(values)) {\n \
    \   if (!is.integer(values[i])) {\n      filtered[i] <- FALSE\n    }\n  }\n\n\
    \  return(values[filtered])\n}", "\n  return(values[sapply(values, is.integer)])\n\
    }", "\n  integers <- logical(length(values))\n  for (i in seq_along(values)) {\n\
    \    integers[i] <- is.integer(values[[i]])\n  }\n  return(values[integers])\n\
    }\n", "\n\tintegers <- c()\n\tfor (value in values) {\n\t\tif (is.integer(value))\
    \ {\n\t\t\tintegers <- c(integers, value)\n\t\t}\n\t}\n\treturn(integers)\n}\n",
  "\n    return(Filter(is.integer, values))\n}", "\n  Filter(is.integer, values)\n\
    }\n", "\n  as.list(sapply(values, function(val) {\n    if(typeof(val) == 'integer')\
    \ {\n      val\n    }\n  }))\n}", "\n  filtered <- lapply(values, is.integer)\n\
    \  values[filtered]\n}\n", "\n  integers <- values[sapply(values, is.integer)]\n\
    \  return(integers)\n}\n ", "\n  # TODO: fill the function body\n}\n", "\n  return(Filter(is.integer,\
    \ values))\n}\n", "\n\treturn(\n\t\tFilter(is.integer, values)\n\t)\n}\n", "\n\
    \    integers <- Filter(is.integer, values)\n    return(integers)\n}\n", "\n \
    \ return(Filter(is.integer, values))\n}\nfilter_integers(c(1, 2, 3, 'abc', list(),\
    \ c()))\n", "\n    return(Filter(is.integer, values))\n}\n", "\n  # Your code\
    \ here\n}\n", "\n    # your code here\n    return(NULL)\n}\n", "\n    return(Filter(is.integer,\
    \ values))\n}\n", "\n  return(values[sapply(values, function(x) is.integer(x))])\n\
    }\n", "\n  return(values[sapply(values, is.integer)])\n}\n", "\n  if (!is.list(values))\
    \ {\n    stop(\"Wrong type of argument!\")\n  }\n  list_type <- lapply(values,\
    \ function(x) is.integer(x))\n  filtered_list <- values[list_type]\n  return(filtered_list)\n\
    }\n", "\n  filter(values, function(x) typeof(x) == 'integer')\n}\n", "\n    #\
    \ Your code here\n    return(values[sapply(values, is.integer)])\n}\n", "\n  \
    \  values[sapply(values, is.integer)]\n}\n", "\n  integer_values <- NULL\n  for\
    \ (index in seq_along(values)) {\n    if (is.integer(values[[index]])) {\n   \
    \   integer_values <- c(integer_values, values[[index]])\n    }\n  }\n  return(integer_values)\n\
    }", "\n\tfilter(values, function(item) typeof(item) == 'integer')\n}\n", "\n \
    \   lapply(values, function(x) {\n        if (is.integer(x)) {\n            return(x)\n\
    \        }\n    })\n}\n", "\n  unlist(Filter(is.integer, values))\n}", "\n  return(values[(typeof(values)\
    \ == 'integer')])\n}\n ", "\n  return(Filter(is.integer, values))\n}\n", "\n \
    \   # your code here\n    values[is.integer(values)]\n}\n", "\n\tvalues[sapply(values,\
    \ is.integer)]\n}\n", "\n  filtered <- c()\n  for (v in values) {\n    if (is.integer(v))\
    \ {\n      filtered <- c(filtered, v)\n    }\n  }\n  return(filtered)\n}\n", "\n\
    \  values[typeof(values) == 'integer']\n}\n", "\n  values[sapply(values, is.integer)]\n\
    }\n\nprint_list <- function(list) {\n  for (i in 1:length(list)) {\n    print(list[[i]])\n\
    \  }\n}\n\nget_list_of_integers <- function(values) {\n  list()\n}\n\nprint_list(get_list_of_integers(c('a',\
    \ 3.14, 5)))\nprint_list(get_list_of_integers(c(1, 2, 3, 'abc', list(), c())))\n",
  "\n    values[sapply(values, is.integer)]\n}\n", "\n  return(Filter(is.integer,\
    \ values))\n}", "\n  filter(values, is.integer)\n}\n", "\n    if (length(values)\
    \ == 0) {\n        return (numeric())\n    }\n    res <- list()\n    i <- 1\n\
    \    for (v in values) {\n        if (is.integer(v)) {\n            res[[i]] <-\
    \ v\n            i <- i + 1\n        }\n    }\n    unlist(res)\n}\n", "\n\treturn(values[sapply(values,\
    \ is.integer)])\n}", "\n    return(Filter(is.integer, values))\n}\n", "\n  integers\
    \ <- c()\n  for (value in values) {\n    if (is.integer(value)) {\n      integers\
    \ <- c(integers, value)\n    }\n  }\n  return(integers)\n}\n", "\n    positive_integers\
    \ <- function(value) {\n        is.integer(value) && value > 0\n    }\n    Filter(positive_integers,\
    \ values)\n}\n", "\n    # TODO\n    return(values)\n}\n", "\n  return(Filter(is.integer,\
    \ values))\n}", "\n  return(values[which(sapply(values, function(x) is.integer(x)\
    \ == TRUE))])\n}\n", "\n    if(length(values) == 0) {\n        return(list())\n\
    \    }\n    if(is.null(values)) {\n        return(list())\n    }\n    filtered\
    \ <- list()\n    for(value in values) {\n        if(is.integer(value)) {\n   \
    \         filtered <- c(filtered, value)\n        }\n    }\n    return(filtered)\n\
    }\n", "\n  unlist(values[sapply(values, is.integer)])\n}", "\n    # TODO: fill\
    \ in the gaps\n    is.integer(values)\n    return(values)\n}\n", "\n    numbers\
    \ <- list()\n    for (value in values) {\n        if (is.integer(value)) {\n \
    \           numbers <- c(numbers, value)\n        }\n    }\n    return(numbers)\n\
    }\n", "\n    values[sapply(values, is.integer)]\n}\n", "\n  res <- Filter(is.integer,\
    \ values)\n  return(res)\n}\n ", "\n  filter(values, function(x) is.integer(x))\n\
    }\n ", "\n    values[!(is.double(values) | is.integer(values))]\n}\n", "\n  Filter(is.integer,\
    \ values)\n}\n", "\n  res <- c()\n  for (value in values) {\n    if (typeof(value)\
    \ == 'integer') {\n      res <- c(res, value)\n    }\n  }\n  return(res)\n}\n",
  "\n\t# TODO: implement\n\tres <- c()\n\tfor (i in 1:length(values)) {\n\t\tif (is.integer(values[i]))\n\
    \t\t\tres <- c(res, values[i])\n\t}\n\tres\n}\n", "\n\tret <- c()\n\tfor (value\
    \ in values) {\n\t\tif (is.integer(value)) {\n\t\t\tret <- c(ret, value)\n\t\t\
    }\n\t}\n\treturn(ret)\n}\n", "\n  return(sapply(values, function(value) {\n  \
    \  as.integer(value)\n  }))\n}\n", "\n  value_of_class <- function(value, class)\
    \ {\n    class(value) == class\n  }\n  values[sapply(values, value_of_class, class\
    \ = 'integer')]\n}\n", "\n    lapply(values, is.integer)\n}\n", "\n    values[sapply(values,\
    \ is.integer)]\n}\nfilter_integers(c('a', 3.14, 5))\nfilter_integers(c(1, 2, 3,\
    \ 'abc', list(), c()))\n", "\n    ints = vector()\n    for (value in values) {\n\
    \        if (is.integer(value)) {\n            ints = c(ints, value)\n       \
    \ }\n    }\n    return(ints)\n}\n \nfilter_integers(c('a', 3.14, 5))\nfilter_integers(c(1,\
    \ 2, 3, 'abc', list(), c()))\n", "\n  values[!(sapply(values, is.numeric) && sapply(values,\
    \ is.integer))]\n}\n", "\n    filtered <- c()\n    for (value in values) {\n \
    \       if (is.integer(value)) {\n            filtered <- c(filtered, value)\n\
    \        }\n    }\n    return(filtered)\n}\n ", "\n    values %>%\n        keep(function(x)\
    \ is.integer(x))\n}\n ", "\n  typeof(values) != 'integer'\n}\n", "\n  filtered_list\
    \ <- vector()\n  for (value in values) {\n    if (is.integer(value)) {\n     \
    \ filtered_list <- c(filtered_list, value)\n    }\n  }\n  return(filtered_list)\n\
    }\n\nfilter_integers(c('a', 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc', list(),\
    \ c()))\n ", "\n  filtered_values <- values[sapply(values, function(value) {\n\
    \    is.integer(value)\n  })]\n  filtered_values\n}\n", "\n  filtered <- vector()\n\
    \  for (value in values) {\n    if (is.integer(value)) {\n      filtered <- c(filtered,\
    \ value)\n    }\n  }\n  return(filtered)\n}\n", "\n  values <- Filter(is.integer,\
    \ values)\n  return(values)\n}\n", "\n    # ...\n    values[is.integer(values)]\n\
    }\n", "\n  as.integer(values[sapply(values, function(x) x == as.integer(x))])\n\
    }\n \n", "\n    integer_vec <- vector(mode = 'integer', length = 0)\n    for (val\
    \ in values) {\n        if (is.integer(val)) {\n            integer_vec <- c(integer_vec,\
    \ val)\n        }\n    }\n    return(integer_vec)\n}\n", "\n  print(values)\n\
    \  filtered_integers <- filter(values, is.integer)\n  print(filtered_integers)\n\
    \  filtered_integers\n}\n", "\n    use <- sapply(values, is.integer)\n    return(values[use])\n\
    }\n", "\n  return(Filter(is.integer, values))\n}\n", "\n  # Unlist the array and\
    \ remove NA values\n  values <- unlist(values)\n  values <- values[!is.na(values)]\n\
    \  # Remove all non-integer values\n  values <- values[sapply(values, is.integer)]\n\
    \  return(values)\n}\n", "\n  if (missing(values)) {\n    stop('filter_integers:\
    \ missing argument \"values\"')\n  }\n  values[!sapply(values, function(x) is.integer(x)\
    \ && is.numeric(x))]\n}\n", "\n  return(Filter(is.integer, values))\n}\n", "\n\
    \  integer_indices <- lapply(values, function(v) {\n    is.integer(v)\n  })\n\
    \  indices <- which(integer_indices)\n  values[indices]\n}\n", "\n  ints <- Filter(function(value)\
    \ {\n    inherits(value, 'integer')\n  }, values)\n  return(ints)\n}\n", "\n \
    \   values[sapply(values, function(v) {\n        class(v) == 'integer'\n    })]\n\
    }\n", "\n    out <- vector(mode='integer', length=0)\n    for (item in values)\
    \ {\n        if (is.integer(item)) {\n            out <- c(out, item)\n      \
    \  }\n    }\n    return(out)\n}\n", "\n  values[which(sapply(values, is.integer))]\n\
    }\n", "\n    # if (! is.list(values)) return(list())\n    # if (is.integer(values))\
    \ return(values)\n    # if (is.list(values)) {\n    #     filtered_values <- list()\n\
    \    #     for (v in values) {\n    #         if (is.integer(v)) {\n    #    \
    \         filtered_values <- c(filtered_values, v)\n    #         }\n    #   \
    \  }\n    #     return(filtered_values)\n    # }\n    # return(list())\n    return(Filter(is.integer,\
    \ values))\n}\n", "\n    ret <- vector()\n    for (val in values) {\n        if\
    \ (is.integer(val)) {\n            ret <- c(ret, val)\n        }\n    }\n    return(ret)\n\
    }\nfilter_integers(c('a', 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc', list(),\
    \ c()))\n", "\n  integer_list <- c()\n  for (value in values) {\n    if (is.integer(value))\
    \ {\n      integer_list <- c(integer_list, value)\n    }\n  }\n  return(integer_list)\n\
    }\n ", "\n  integers <- lapply(values, function(value) {\n    tryCatch(as.integer(value),\
    \ error = function(ex) {\n      return(NA)\n    })\n  })\n  integers <- Filter(function(integer)\
    \ {\n    !is.na(integer)\n  }, integers)\n  return(integers)\n}\n", "\n  # your\
    \ solution here\n  ind <- sapply(values, function(x) {\n    if(!is.integer(x))\
    \ return(FALSE)\n    x\n  })\n  values[ind]\n}\n ", "\n    filter(values, is.integer)\n\
    }\n", "\n  return(Filter(is.integer, values))\n}\n", "\n\tresult <- values[sapply(values,\
    \ is.integer)]\n\treturn(result)\n}\n", "\n    values <- Filter(is.integer, values)\n\
    \    return(values)\n}\n", "\n\tvalues[!is.null(values) & is.integer(values)]\n\
    }\n", "\n  integer_values <- Filter(is.integer, values)\n  return(integer_values)\n\
    }\n", "\n  integers <- Filter(is.integer, values)\n  integers\n}", "\n  unlist(lapply(values,\
    \ function(x) if (is.integer(x)) x))\n}\n", "\n  int_list <- c()\n  # Loop through\
    \ all values\n  for (value in values) {\n    # Test if current value is an integer\n\
    \    if (is.integer(value)) {\n      # If so, append current value to our int_list\n\
    \      int_list <- c(int_list, value)\n    }\n  }\n  # Return int_list\n  return(int_list)\n\
    }", "\n  ints <- Vectorize(function(x) {\n    as.integer(x)\n  })(values)\n  Filter(is.integer,\
    \ ints)\n}\n", "\n  values[sapply(values, is.integer)]\n}\n", "\n    ret <- c()\n\
    \    for (element in values) {\n        if (is.integer(element)) {\n         \
    \   ret <- c(ret, element)\n        }\n    }\n    return(ret)\n}\n", "\n  return(values[sapply(values,\
    \ function(x) is.integer(x))])\n}", "\n    filtered_values <- c()\n    for (value\
    \ in values) {\n        if (is.integer(value)) {\n            filtered_values\
    \ <- c(filtered_values, value)\n        }\n    }\n    return(filtered_values)\n\
    }\nfilter_integers(c('a', 3.14, 5))\n", "\n  # put your code here\n}\ncheck_function(\"\
    filter_integers\", args = c(\"values\"))\ntest_that(\"filter_integers\", {\n \
    \ expect_true(identical(filter_integers(c(\"a\", 3.14, 5)), c(5)))\n  expect_true(identical(filter_integers(c(1,\
    \ 2, 3, \"abc\", list(), c())), c(1, 2, 3)))\n})\nprint(\"Success!\")\n ", "\n\
    \  return(values[unlist(lapply(values, function(x) is.integer(x)))])\n}\n", "\n\
    \  s = list()\n  for (i in values) {\n    if (class(i) == 'integer') {\n     \
    \ s = c(s, i)\n    }\n  }\n  return(s)\n}\n", "\n  values %>%\n    filter(is.integer(.))\n\
    }\n", "\n  filtered_values <- values[ which( sapply(values, is.integer) ) ]\n\
    \  return(filtered_values)\n}\n ", "\n  func <- function(x) {\n    if(is.integer(x))\
    \ {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  return(Filter(func,\
    \ values))\n}\n", "\n    filtered <- Filter(is.integer, values)\n    return(filtered)\n\
    }\n", "\n  return(values[sapply(values, is.integer)])\n}\n", "\n\treturn(values[as.numeric(as.character(values))])\n\
    }\n", "\n    filter(values, is.integer)\n}\n", "\n    return( Filter(function(x)\
    \ is.integer(x), values) )\n}", "\n    valid_values <- list()\n    for (value\
    \ in values) {\n        if (is.integer(value)) {\n            valid_values <-\
    \ c(valid_values, value)\n        }\n    }\n    return(valid_values)\n}"]
stop_tokens:
- "\n#"
- "\n```"
