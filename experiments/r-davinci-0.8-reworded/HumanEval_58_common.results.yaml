name: HumanEval_58_common
language: r
results:
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(intersect(l1,\
    \ l2), intersect(l2, l1)))))\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ common\n    if(!identical(candidate(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5,\
    \ 9, 653, 121)), c(1, 5, 653))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 3, 2, 8), c(3, 2)), c(2, 3))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 8), c()), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(l1[l1\
    \ %in% l2])))\n}\ncommon(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n\
    \ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b'[1]   1   5 653\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    u <- unique(c(l1,\
    \ l2))\n    u[duplicated(u) | duplicated(u, fromLast = TRUE)]\n}\nl1 <- c(1, 4,\
    \ 3, 34, 653, 2, 5)\nl2 <- c(5, 7, 1, 5, 9, 653, 121)\ncommon(l1, l2)\n\nl1 <-\
    \ c(5, 3, 2, 8)\nl2 <- c(3, 2)\ncommon(l1, l2)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- common\n    if(!identical(candidate(c(1, 4, 3, 34, 653, 2, 5),\
    \ c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 3, 2, 8), c(3, 2)), c(2, 3))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 8), c()), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'numeric(0)\nnumeric(0)\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  sort(unique(c(l1,\
    \ l2)))\n}\n \ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    a1 <- unlist(l1)\n\
    \    a2 <- unlist(l2)\n    return(sort(unique(intersect(a1, a2))))\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1, 4, 3,\
    \ 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  # your code here\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n\treturn(sort(unique(c(l1,\
    \ l2))[duplicated(c(l1, l2))]))\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- common\n    if(!identical(candidate(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1,\
    \ 5, 9, 653, 121)), c(1, 5, 653))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 3, 2, 8), c(3, 2)), c(2, 3))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ 3, 2, 8), c()), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    intersect(l1,\
    \ l2)\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    sort(unique(c(l1,\
    \ l2)))\n}\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  intersection(unique(l1),\
    \ unique(l2))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in intersection(unique(l1), unique(l2)) : \\n  could not find function\
    \ \"intersection\"\\nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    uniq(sort(l1[l1\
    \ %in% l2]))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in uniq(sort(l1[l1 %in% l2])) : could not find function \"uniq\"\\\
    nCalls: test_humaneval -> candidate\\nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  # Return sorted\
    \ unique common elements for two lists.\n  sapply(intersect(l1, l2), unique)\n\
    }\ncommon(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n\ntest_humaneval\
    \ <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1, 4, 3,\
    \ 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b'[1]   1 653   5\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(sort(unique(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  return(sort(unique(intersect(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  i1 <- match(l1,\
    \ l2)\n  i2 <- match(l2, l1)\n  return(sort(unique(c(l1[i1 != NA], l2[i2 != NA]))))\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  intersect(l1,\
    \ l2)\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n\tsort(unique(c(l1,\
    \ l2)))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5,\
    \ 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n    return(unique(sort(c(l1,\
    \ l2))))\n}\n\ntest_humaneval <- function() {\ncandidate <- common\n    if(!identical(candidate(c(1,\
    \ 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121)), c(1, 5, 653))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(5, 3, 2, 8), c(3, 2)), c(2, 3))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c(3, 2, 4)), c(2, 3, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, 3, 2, 8), c()), c())){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
