name: HumanEval_131_digits
language: r
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n\
  # 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n  \
  \  if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
  \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  if (all(n %% 2 == 0)) {\n    return(0)\n  }\n  else {\n    product\
    \ <- 1\n    for (i in 1:nchar(n)) {\n      product <- product * substr(n, i, i)\n\
    \    }\n    return(product)\n  }\n}\n", "\n    n2 <- as.character(n)\n    oddDigits\
    \ <- 0\n    for (i in n2) {\n        if (as.numeric(i) %% 2 != 0) {\n        \
    \    oddDigits <- oddDigits * as.numeric(i)\n        }\n    }\n    return(oddDigits)\n\
    }", "\n  is_even <- function(x) (x %% 2) == 0\n  prod(sapply(strsplit(as.character(n),\
    \ '')[[1]], as.integer)[!is_even(as.integer(strsplit(as.character(n), '')[[1]]))])\n\
    }\n", "\n    if (n < 0) return(-1)\n    prod <- 1\n    while (n > 0) {\n     \
    \   digit <- n %% 10\n        if (digit %% 2 != 0) prod <- prod * digit\n    \
    \    n <- floor(n / 10)\n    }\n    return(prod)\n}\n", "\n  if (n < 10) return(n\
    \ %% 2 != 0)\n  else return(digits(n %/% 10) * (n %% 10 %% 2 != 0))\n}\n\ndigits(1)\n\
    digits(4)\ndigits(235)\n", "\n    prod(as.integer(substr(n, which(grepl('[13579]',\
    \ n)), nchar(n))))\n}\n", "\n    n <- as.character(n)\n    n <- strsplit(n, \"\
    \")[[1]]\n    n <- as.numeric(n)\n    n <- n[n %% 2 == 1]\n    if (length(n) ==\
    \ 0) {\n        return(0)\n    } else {\n        return(prod(n))\n    }\n}\n",
  "\n  string <- as.character(n)\n  product <- 1\n  for (i in 1:nchar(string)) {\n\
    \    product <- product * as.numeric(substr(string, i, i))\n  }\n  return(product)\n\
    }\n\ndigits(1)\ndigits(4)\ndigits(235)\n", "\n  c <- 1\n  n <- n %/% 10\n  while\
    \ (n > 0) {\n    m <- n %% 10\n    if (m %% 2 != 0) {\n      c <- c * m\n    }\n\
    \    n <- n %/% 10\n  }\n  return(c)\n}\ndigits(1)\ndigits(4)\ndigits(235)\n",
  "\n    out <- 1\n    while (n != 0) {\n        if ((n %% 10) %% 2 != 0) {\n    \
    \        out <- out * (n %% 10)\n        }\n        n <- n %/% 10\n    }\n   \
    \ out\n}\ndigits(235)\n", "\n    odd_digits <- unlist(strsplit(as.character(n),\
    \ \"\"))[unlist(strsplit(as.character(n), \"\"))%%2!=0]\n    if (odd_digits ==\
    \ \"\") {\n        return(0)\n    } else {\n        return(prod(as.numeric(odd_digits)))\n\
    \    }\n}\n\n", "\n  # Using the sum function in R.\n  x <- sum(x = as.numeric(strsplit(as.character(n),\
    \ '')[[1]])[as.numeric(strsplit(as.character(n), '')[[1]]) %% 2 != 0])\n  if(x\
    \ == 0) return(0)\n  return(x)\n}\n", "\n  a <- unlist(strsplit(as.character(n),\
    \ ''))\n  a <- as.numeric(a)\n  a <- a[a %% 2 != 0]\n  a <- prod(a)\n  if (a ==\
    \ 0)\n    a <- 0\n  a\n}\n", "\n  if (n == 0) {\n    return(0)\n  }\n  else {\n\
    \    return(as.integer(as.character(n)[nchar(n)])) * digits(floor(n/10))\n  }\n\
    }\ndigits(1)\ndigits(4)\ndigits(235)\ndigits(0)\ndigits(111111)\n ", "\n    #\
    \ Your code here\n    if (n == 0) return(0)\n    else if (n %% 2 == 1) return(n\
    \ %% 10 * digits(n %/% 10))\n    else return(digits(n %/% 10))\n}", "\n  i = 1\n\
    \  result = 1\n  while (n > 0) {\n    nextDigit = n %% 10\n    if (nextDigit %%\
    \ 2 != 0) {\n      result = result * nextDigit\n    }\n    n = n %/% 10\n  }\n\
    \  return(result)\n}\n", "\n  digit_list <- strsplit(as.character(n), split =\
    \ \"\")[[1]]\n  total <- 1\n  for (d in digit_list) {\n    if (as.integer(d) %%\
    \ 2 == 1) {\n      total <- total * as.integer(d)\n    }\n  }\n  return(total)\n\
    }", "\n    f <- function(x) {\n        prod(as.numeric(substr(x, seq_along(x),\
    \ seq_along(x))))\n    }\n    if (all(nchar(n)==1)) {\n        if (n %% 2 == 0)\
    \ {\n            f(n)\n        } else {\n            0\n        }\n    } else\
    \ {\n        if (all(n %% 2 == 0)) {\n            f(n)\n        } else {\n   \
    \         0\n        }\n    }\n}\ndigits(4)\ndigits(4L)\ndigits(6L)\ndigits(235)\n\
    digits(n=235)\ndigits(n=4)\ndigits(n=4L)\n", "\n    nums <- strsplit(as.character(n),\
    \ split = '')[[1]]\n    return(as.numeric(prod(nums[nums %% 2 == 1])))\n}\ndigits(c(1,\
    \ 4, 235))\n", "\n  res <- 1\n  while (n > 0) {\n    d <- n %% 10\n    if (d %%\
    \ 2 == 1) {\n      res <- res * d\n    }\n    n <- n %/% 10\n  }\n  return(res)\n\
    }\ndigits(1)\ndigits(4)\ndigits(235)\n"]
stop_tokens:
- "\n#"
- "\n```"
