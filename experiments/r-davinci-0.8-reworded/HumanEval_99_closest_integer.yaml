name: HumanEval_99_closest_integer
language: r
prompt: "# Create a function that takes a value (string) representing a number\n#\
  \ and returns the closest integer to it. If the number is equidistant\n# from two\
  \ integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n\
  # 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means\
  \ that if the given number is equidistant\n# from two integers, the one you should\
  \ return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  closest_integer <- function(value) {"
tests: "test_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'),\
  \ 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n\
  \    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'),\
  \ 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\n\
  test_humaneval()"
completions: ["\n  if (substr(value, nchar(value), nchar(value)) > 4) {\n    return(as.integer(value)+1)\n\
    \  } else {\n    return(as.integer(value))\n  }\n}\n", "\n    # ... your code\
    \ here ...\n}\nlibrary(testthat)\ntest_that(\"Testing closest_integer\", {\n \
    \   expect_equal(closest_integer(\"10\"), 10)\n    expect_equal(closest_integer(\"\
    15.3\"), 15)\n    expect_equal(closest_integer(\"14.5\"), 15)\n    expect_equal(closest_integer(\"\
    -14.5\"), -15)\n})\n \n ", "\n    value <- as.integer(value)\n    return(value)\n\
    }\nclosest_integer('10')\n", "\n  # value to number\n  value <- as.numeric(value)\n\
    \  # checking if value is integer,\n  # if it is just return it\n  if (value ==\
    \ as.integer(value)) {\n    return(value)\n  }\n  # if not, return the closest\
    \ integer\n  else {\n    # checking if the value is positive\n    if (value >\
    \ 0) {\n      # if it is, return the floor value\n      return(floor(value))\n\
    \    }\n    # but if it is negative, return the ceiling value\n    else {\n  \
    \    return(ceiling(value))\n    }\n  }\n}", "\n    if (is.character(value)) {\n\
    \        value <- as.numeric(value)\n    }\n    if (is.numeric(value)) {\n   \
    \     value <- round(value)\n    }\n    if (is.integer(value)) {\n        value\
    \ <- value\n    }\n    return(value)\n}\n\nclosest_integer(\"10\")\n", "\n  if\
    \ (value > 0) {\n    return(floor(value))\n  } else {\n    return(ceiling(value))\n\
    \  }\n}\n", "\n    # your code here\n    return(NA)\n}\n ", "\n  return( round(as.numeric(value))\
    \ )\n}\nclosest_integer('10')\nclosest_integer('15.3')", "\n  # your code here\n\
    \  as.integer(value)\n}", "\n  # Convert the string to a numeric type.\n  number\
    \ <- as.numeric(value)\n  # Round the number using the round function.\n  round(number)\n\
    }", "\n  value <- as.numeric(value)\n  if(value%%1 > 0.5) {\n    return(value\
    \ %/% 1 + 1)\n  } else {\n    return(value %/% 1)\n  }\n}\n\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"10\")\nclosest_integer(\"-14.5\")\n", "\n  # split\
    \ the number into digits\n  digits <- strsplit(value, \"\")[[1]]\n  result <-\
    \ c()\n  # if there is no decimal point in the number, just return the number\n\
    \  if (!grepl(\"\\\\.\", value)) {\n    return(as.integer(value))\n  }\n  # search\
    \ for the decimal point and remove the fractional part\n  for (digit in digits)\
    \ {\n    if (digit == \".\") {\n      break\n    }\n    result <- c(result, digit)\n\
    \  }\n  # check to see if the number is greater than 5\n  if (as.integer(result[length(result)])\
    \ >= 5) {\n    result[length(result)] <- result[length(result)] + 1\n  }\n  as.integer(paste(result,\
    \ collapse = \"\"))\n}\n", "\n    if (value - floor(value) > 0.5) {\n        return(ceiling(value))\n\
    \    } else {\n        return(floor(value))\n    }\n}\n", "\n  # Generate the\
    \ two choices, then use the ternary operator to select the\n  # one that is farther\
    \ from zero.\n  c <- ceiling(as.numeric(value))\n  f <- floor(as.numeric(value))\n\
    \  c - f > 1 ? f : c\n}\n", "\n  value <- as.integer(value)\n\n  if(value %% 1\
    \ == 0) {\n    return(value)\n  } else {\n    return(value + 0.5)\n  }\n}\n\n\
    closest_integer('10')\nclosest_integer('15.3')\n", "\n  as.integer(round(as.numeric(value),\
    \ digits = 0))\n}\n", "\n  value_number <- as.numeric(value)\n  cat(value_number,\
    \ \"\\n\")\n  up_to_integer <- ceiling(value_number)\n  less_to_integer <- floor(value_number)\n\
    \  if (value_number - less_to_integer > up_to_integer - value_number) {\n    return(up_to_integer)\n\
    \  } else {\n    return(less_to_integer)\n  }\n}\n\ncat(closest_integer(\"14.5\"\
    ), \"\\n\")\ncat(closest_integer(\"-14.5\"), \"\\n\")\n", "\n  x <- as.numeric(value)\n\
    \  x_round <- round(x)\n  x_ceiling <- ceiling(x)\n  x_floor <- floor(x)\n  if(abs(x\
    \ - x_round) == abs(x - x_ceiling)) {\n    if(abs(x_ceiling) >= abs(x_round))\
    \ {\n      x_ceiling\n    } else {\n      x_round\n    }\n  } else if(abs(x -\
    \ x_round) == abs(x - x_floor)) {\n    if(abs(x_floor) >= abs(x_round)) {\n  \
    \    x_floor\n    } else {\n      x_round\n    }\n  } else if(abs(x - x_round)\
    \ < abs(x - x_ceiling)) {\n    x_round\n  } else if(abs(x - x_round) < abs(x -\
    \ x_floor)) {\n    x_round\n  } else if(abs(x - x_ceiling) < abs(x - x_round))\
    \ {\n    x_ceiling\n  } else if(abs(x - x_floor) < abs(x - x_round)) {\n    x_floor\n\
    \  }\n}", "\n    # check that value is numeric\n    if (!is.numeric(value)) {\n\
    \        stop(\"Value must be numeric\")\n    }\n\n    # check that number is\
    \ not a fraction\n    # if it is a fraction round it to the closest integer\n\
    \    if (fround(value) != value) {\n        value <- fround(value)\n    }\n\n\
    \    # create a list of integers close to the number\n    if (value > 0) {\n \
    \       list <- c(value-1, value, value+1)\n    } else {\n        list <- c(value-1,\
    \ value, value+1)\n    }\n\n    # check which integer is closest to the number\n\
    \    # round it and return it\n    if (abs(value - list[1]) <= abs(value - list[2]))\
    \ {\n        return(fround(list[1]))\n    } else {\n        return(fround(list[3]))\n\
    \    }\n}", "\n  int_val <- as.integer(value)\n  float_val <- as.double(value)\n\
    \  float_val - int_val > 0.5 ? int_val + 1 : int_val\n}\n \nclosest_integer('10')\n",
  "\n  as.integer(value)\n}\n", "\n  round(as.integer(as.numeric(value)))\n}\n\nclosest_integer('10')\n\
    closest_integer('15.3')\n", "\n  value <- as.numeric(value)\n  floor_value <-\
    \ floor(value)\n  difference <- abs(value - floor_value)\n  ceiling_value <- ceiling(value)\n\
    \  difference_ceiling <- abs(value - ceiling_value)\n  if (difference == difference_ceiling)\
    \ {\n    if (floor_value > 0) {\n      ceiling_value\n    } else {\n      floor_value\n\
    \    }\n  } else if (difference < difference_ceiling) {\n    floor_value\n  }\
    \ else {\n    ceiling_value\n  }\n}\n\nprint(\"Test # 1: closest_integer('10')\"\
    )\nprint(closest_integer('10'))\nprint(\"Test # 2: closest_integer('15.3')\")\n\
    print(closest_integer('15.3'))\nprint(\"Test # 3: closest_integer('14.5')\")\n\
    print(closest_integer('14.5'))\nprint(\"Test # 4: closest_integer('-14.5')\")\n\
    print(closest_integer('-14.5'))\n", "\n  number <- as.integer(as.numeric(value))\n\
    \  fraction <- as.numeric(value) - number\n  if (fraction >= 0.5) number + 1 else\
    \ number\n}\nclosest_integer('10')\nclosest_integer('15.3')\nclosest_integer('-15.3')\n",
  "\n  x <- as.integer(value)\n  if (x == value) return(x)\n  if (value < 0) {\n \
    \   x <- x - 1\n    if (value + 0.5 == x) return(x)\n  }\n  return(x)\n}\nclosest_integer('10')\n\
    closest_integer('15.3')\nclosest_integer('14.5')\nclosest_integer('-14.5')\n",
  "\n  # if the value is a string, convert it to a numeric type\n  if (class(value)\
    \ == \"character\") {\n    value <- as.numeric(value)\n  }\n  # use the ceiling\
    \ and floor functions to find the nearest integers to\n  # the input value\n \
    \ ceiling <- ceiling(value)\n  floor <- floor(value)\n  # if the value is equidistant\
    \ from two integers, choose the one\n  # farthest from zero\n  if (value == ceiling)\
    \ {\n    if (ceiling >= 0) {\n      ceiling\n    } else {\n      floor\n    }\n\
    \  } else if (value == floor) {\n    if (floor <= 0) {\n      floor\n    } else\
    \ {\n      ceiling\n    }\n  } else if (value > 0) {\n    if (value - floor <\
    \ ceiling - value) {\n      floor\n    } else {\n      ceiling\n    }\n  } else\
    \ {\n    if (value - floor > ceiling - value) {\n      floor\n    } else {\n \
    \     ceiling\n    }\n  }\n}\n\nclosest_integer(\"10\")\nclosest_integer(\"15.3\"\
    )\nclosest_integer(14.5)\nclosest_integer(-14.5)\n", "\n    value = as.numeric(value)\n\
    \    low = floor(value)\n    high = ceiling(value)\n    if ((value - low) <= (high\
    \ - value)) {\n        return(low)\n    } else {\n        return(high)\n    }\n\
    }\n\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n  return(round(as.numeric(value)))\n\
    }\n", "\n  number <- as.numeric(value)\n  if (number%%1 == 0) return(number)\n\
    \  ceiling(number)-0.5\n}\n", "\n  value <- round(as.numeric(value))\n  if(value\
    \ > 0) {\n    return(value)\n  } else {\n    return(value - 1)\n  }\n}\n", "\n\
    \  sign = sign(as.numeric(value))\n  value = as.numeric(value)\n  if (sign ==\
    \ -1) {\n    return(sign * floor(abs(value)))\n  } else {\n    return(sign * ceiling(abs(value)))\n\
    \  }\n}\n", "\n    if (substr(value, nchar(value), nchar(value)) == '5') {\n \
    \       n <- as.integer(substr(value, 1, nchar(value) - 1))\n        if (nchar(value)\
    \ == 2) {\n            return(ifelse(substr(value, 1, 1) == '-', n - 1, n + 1))\n\
    \        } else {\n            return(ifelse(substr(value, 1, 1) == '-', n, n\
    \ + 1))\n        }\n    } else {\n        return(as.integer(value))\n    }\n}\n",
  "\n  int_value <- as.integer(value)\n  if (value - int_value >= 0.5) {\n    int_value\
    \ + 1\n  } else {\n    int_value\n  }\n}\nclosest_integer(\"10\")\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\")\n", "\n  x <- as.numeric(value)\n\
    \  if (x == round(x)) return(x)\n  if (x < 0) return(ceiling(x))\n  return(floor(x))\n\
    }\n\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n    value <- as.numeric(value)\n\
    \    integer <- round(value)\n    fraction <- value - integer\n    # take care\
    \ of the case when fraction is equal to 0.5\n    if (fraction == 0.5) {\n    \
    \    if (integer < 0) {\n            integer <- integer - 1\n        } else {\n\
    \            integer <- integer + 1\n        }\n    }\n    return(integer)\n}\n",
  "\n\t\n}\n", "\n  # round the value to the nearest integer\n  value <- round(as.numeric(value))\n\
    \  # calculate the distance between the integer and the value\n  value_dist <-\
    \ abs(value - as.numeric(value))\n  # compare the distance with 0.5 to determine\
    \ if\n  # the number should be rounded up or down\n  if (value_dist > 0.5) {\n\
    \    value <- ceiling(as.numeric(value))\n  } else {\n    value <- floor(as.numeric(value))\n\
    \  }\n  return(value)\n}\nclosest_integer('14.5')\nclosest_integer('-14.5')\n\
    closest_integer('13.2')\nclosest_integer('14.3')\n", "\n    round(as.numeric(value))\n\
    }\nprint(closest_integer('10'))\n", "\n  value <- as.numeric(value)\n  if (value\
    \ >= 0) {\n    value <- ceiling(value)\n  } else {\n    value <- floor(value)\n\
    \  }\n  return(value)\n}\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n\
    \  num <- as.numeric(value)\n  round(num)\n}\n\nclosest_integer('10')\nclosest_integer('15.3')\n\
    closest_integer('14.5')\nclosest_integer('-14.5')\n", "\n  value = as.numeric(value)\n\
    \  if(value >= 0) {\n    ceiling(value)\n  } else {\n    floor(value)\n  }\n}",
  "\n  as.integer(round(as.numeric(value), 0))\n}", "\n    value <- as.numeric(value)\n\
    \    x <- floor(value)\n    y <- ceiling(value)\n    return(ifelse(abs(x - value)\
    \ > abs(y - value), y, x))\n}\nprint(closest_integer('10'))\nprint(closest_integer('15.3'))\n",
  "\n  # One way is to use the round() function, which rounds to\n  # the nearest\
    \ integer.\n  round(as.numeric(value))\n}\n\nclosest_integer('10')\nclosest_integer('15.3')\n",
  "\n  return (as.integer(signif(as.numeric(value), digits = 0)))\n}\nclosest_integer('15.3')\n",
  "\n  # Take note that as.numeric returns NaN if the string isn't a number\n  value\
    \ <- as.numeric(value)\n  # If it is NaN, return it\n  if (is.na(value)) return(value)\n\
    \  # However, if it isn't, continue the processing\n  if (value-floor(value) ==\
    \ 0.5) {\n    if (value >= 0) value <- floor(value) + 1\n    else value <- floor(value)\
    \ - 1\n  } else {\n    value <- round(value)\n  }\n  return(value)\n}\n", "\n\
    \  # split the value into two parts, the integer and the decimal\n  split <- strsplit(value,\
    \ \"\\\\.\")\n  # if the decimal is half or greater, then round up\n  if (as.numeric(split[[1]][2])\
    \ >= 5) {\n    return(as.numeric(split[[1]][1]) + 1)\n  } else {\n    return(as.numeric(split[[1]][1]))\n\
    \  }\n}\n", "\n  value %>% as.numeric() %>% round()\n}\nclosest_integer('10')\n\
    closest_integer('15.3')\nclosest_integer('14.5')\nclosest_integer('-14.5')\n",
  "\n  v <- as.integer(as.double(value))\n  return(max(v, as.integer(v - 0.5)))\n\
    }\n", "\n  float <- as.numeric(value)\n  integer <- as.integer(value)\n  if (float-integer\
    \ == 0.5) {\n    return(integer + sign(integer))\n  } else {\n    return(integer)\n\
    \  }\n}\n\nclosest_integer <- function(value) {\n  return(as.integer(value)+as.integer(sign(value)))\n\
    }", "\n  return(ifelse(round(as.numeric(value), 0) > as.numeric(value),\n    \
    \            round(as.numeric(value), 0) - 1,\n                round(as.numeric(value),\
    \ 0)))\n}", "\n    # Calculate the closest integer to the given value (string).\n\
    \    # Value: string, the number of which the closest integer needs to be found.\n\
    \    # Return: integer, the closest integer to the given value.\n    \n    # Convert\
    \ the given value to numeric.\n    value <- as.numeric(value)\n    \n    # Get\
    \ the closest integer (rounding away from zero).\n    output <- signif(value,\
    \ 0)\n    \n    # Return the output.\n    return(output)\n}", "\n  as.integer(floor(as.numeric(value)\
    \ + 0.5))\n}\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n  value <-\
    \ as.numeric(value)\n  floor(value + 0.5)\n}\nclosest_integer('10')\nclosest_integer('15.3')\n\
    closest_integer('14.5')\nclosest_integer('-14.5')\n", "\n    x <- as.numeric(value)\n\
    \    if (abs(x - as.integer(x)) == 0.5) {\n        x <- sign(x) * ceiling(abs(x))\n\
    \    } else {\n        x <- as.integer(x)\n    }\n    x\n}\n\nclosest_integer(\"\
    10\")\nclosest_integer(\"15.3\")\n", "\n  value <- as.numeric(value)\n  ceiling(value)\n\
    }\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n  value <- as.integer(value)\n\
    \  round(value)\n}\n\nclosest_integer(\"10\")\n\nclosest_integer(\"15.3\")\n\n\
    \n", "\n  value <- as.numeric(value)\n  if(value - as.integer(value) < 0.5)\n\
    \    return(as.integer(value))\n  else\n    return(as.integer(value)+1)\n}", "\n\
    \  return(round(as.numeric(value)))\n}", "\n  value <- as.numeric(value)\n  if\
    \ (all(value == ceiling(value))) {\n    value <- ceiling(value)\n  } else {\n\
    \    value <- floor(value)\n  }\n  value\n}\n", "\n  return(as.integer(value))\n\
    }", "\n    return(round(as.numeric(value)))\n}", "\n  x <- as.numeric(value)\n\
    \  y <- round(x)\n  print(paste0(\"Closest integer to \", value, \" is \", y))\n\
    }\n\nclosest_integer(\"10\")\nclosest_integer(\"15.3\")\n", "\n    # round the\
    \ value first\n    v <- round(as.numeric(value))\n    d <- as.numeric(value) -\
    \ v\n    if(abs(d) >= 0.5) {\n        return(v + sign(d))\n    } else {\n    \
    \    return(v)\n    }\n}\n", "\n  # Write your code here\n  return as.integer(value)\n\
    }\n ", "\n  # Round 'value' up or down, depending on whether it is closer to the\
    \ next\n  # integer or the previous integer.\n  # E.g. '10.5' is round to 11,\
    \ whereas '9.5' is rounded to 9.\n  round(value)\n}", "\n  value <- as.numeric(value)\n\
    \  round(value)\n}\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n   \
    \ round(as.numeric(value))\n}", "\n  rounded_up <- ceiling(as.numeric(value))\n\
    \  rounded_down <- floor(as.numeric(value))\n  if (abs(rounded_up - as.numeric(value))\
    \ > abs(rounded_down - as.numeric(value))) {\n    return(rounded_down)\n  } else\
    \ {\n    return(rounded_up)\n  }\n}\n\nclosest_integer('10')\nclosest_integer('15.3')\n\
    closest_integer('-15.3')\n", "\n  return(round(as.numeric(value)))\n}", "\n  as.integer(round(as.numeric(value),\
    \ 0))\n}\n\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n  # YOUR CODE\
    \ HERE\n}\n", "\n    value <- as.integer(value)\n    value\n}\nclosest_integer('15.3')\n",
  "\n    value <- as.numeric(value)\n    if (value >= 0) {\n        value = round(value)\n\
    \    } else {\n        value = round(value) - 1\n    }\n    value\n}\n ", "\n\
    \  as.integer(value + 0.5 * sign(value))\n}\nclosest_integer('10')\nclosest_integer('15.3')\n\
    closest_integer('14.5')\nclosest_integer('-14.5')\n", "\n  y <- as.numeric(value)\n\
    \  y <- round(y)\n  y\n}\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n\
    \    x <- round(as.numeric(value))\n    y <- round(as.numeric(value), digits =\
    \ 0)\n    if(x - y > 0)\n        return(x + 1)\n    else\n        return(x)\n\
    }\n\nclose", "\n    x <- as.numeric(value)\n    closest <- ifelse(abs(x - round(x))\
    \ > abs(x - round(x) - 1),\n        round(x) - 1, round(x))\n    return(closest)\n\
    }\n\nclosest_integer('10')\n\nclosest_integer('15.3')\n\nclosest_integer('14.5')\n\
    \nclosest_integer('-14.5')\n", "\n    if(is.null(value)) {\n        value <- readline(prompt\
    \ = \"Enter value: \")\n    }\n    d <- as.numeric(value)\n    if(d > 0) {\n \
    \       i <- as.integer(d)\n        ri <- i + 1\n        rd <- (d - i) / (ri -\
    \ i)\n        return(ifelse(rd >= 0.5, ri, i))\n    } else {\n        i <- as.integer(d)\n\
    \        ri <- i - 1\n        rd <- (d - i) / (ri - i)\n        return(ifelse(rd\
    \ >= 0.5, i, ri))\n    }\n}\nclosest_integer()\n", "\n  if (value == 0) {\n  \
    \  return(0)\n  } else if (value > 0) {\n    return(ceiling(value))\n  } else\
    \ {\n    return(floor(value))\n  }\n}", "\n  ifelse(value %% 1 >= 0.5, ceiling(value),\
    \ floor(value))\n}\n", "\n  value <- as.numeric(value)\n  floor_val <- floor(value)\n\
    \  ceil_val <- ceiling(value)\n  if (value - floor_val > ceil_val - value) {\n\
    \    ceil_val\n  } else {\n    floor_val\n  }\n}\nclosest_integer('10')\n", "\n\
    \    round(as.numeric(value))\n}\n", "\n    # Use the round() function to round\
    \ to the nearest integer.\n    # If the given number is equidistant from two integers,\
    \ the\n    # one you should return is the one that is the farthest from\n    #\
    \ zero.  For example closest_integer(\"14.5\") should return 15\n    # and closest_integer(\"\
    -14.5\") should return -15.\n    \n    # YOUR CODE HERE\n    return(round(as.numeric(value)))\n\
    }\n", "\n  num <- as.integer(as.numeric(value))\n  if(value - num < 0.5) return(num)\n\
    \  else return(num + 1)\n}\n", "\n    return(round(as.numeric(value)))\n}", "\n\
    \  # Rounding away from zero means that if the given number is equidistant\n \
    \ # from two integers, the one you should return is the one that is the\n  # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n  # return 15 and closest_integer(\"\
    -14.5\") should return -15.\n  if (floor(as.numeric(value)) == ceiling(as.numeric(value)))\
    \ {\n    if (as.numeric(value) < 0) {\n      return(floor(as.numeric(value)))\n\
    \    } else {\n      return(ceiling(as.numeric(value)))\n    }\n  }\n  return(round(as.numeric(value)))\n\
    }\n", "\n    return (round(as.numeric(value)))\n}", "\n  round(as.numeric(value))\n\
    }\n\nexpect_equal(closest_integer('10'), 10)\nexpect_equal(closest_integer('15.3'),\
    \ 15)\n", "\n    # Rounding away from zero\n    round(as.numeric(value), 0)\n\
    }\n\nclosest_integer('10')\nclosest_integer('15.3')\nclosest_integer('-14.5')\n",
  "\n    round(as.numeric(value))\n}\n", "\n  # value is a string\n  value <- as.numeric(value)\n\
    \  # find the integer closest to value\n  if (value < 0) {\n    value <- floor(value)\n\
    \  } else {\n    value <- ceiling(value)\n  }\n  return(value)\n}\n\nclosest_integer(\"\
    10\")\nclosest_integer(\"15.3\")\n", "\n  value <- as.numeric(value)\n  upper\
    \ <- ceiling(value)\n  lower <- floor(value)\n  if (value == upper | value ==\
    \ lower) {\n    return(value)\n  } else if (abs(value - upper) > abs(value - lower))\
    \ {\n    return(lower)\n  } else {\n    return(upper)\n  }\n}", "\n    value <-\
    \ as.numeric(value)\n    if(value < 0){\n        round(value, 0)\n    }else if(value\
    \ > 0){\n        round(value, 0)\n    }else{\n        return(0)\n    }\n}\n",
  "\n  value <- as.numeric(value)\n  if (value %% 1 == 0) {\n    return(value)\n \
    \ } else {\n    value_abs <- abs(value)\n    value_floor <- floor(value_abs)\n\
    \    if (value_abs - value_floor < 0.5) {\n      return(value_floor * sign(value))\n\
    \    } else {\n      return(ceiling(value_abs) * sign(value))\n    }\n  }\n}",
  "\n  value = as.numeric(value)\n  k = round(value)\n  dif = abs(value - k)\n  if\
    \ (k == value) {\n    k\n  } else if (dif >= 0.5) {\n    k - 1\n  } else {\n \
    \   k\n  }\n}\nclosest_integer('10')\nclosest_integer('15.3')\nclosest_integer('14.5')\n\
    closest_integer('-14.5')", "\n    rounded_value <- round(as.numeric(value))\n\
    \    return(rounded_value)\n}\nclosest_integer('10')\nclosest_integer('15.3')\n",
  "\n  fl <- floor(as.numeric(value))\n  cl <- ceiling(as.numeric(value))\n  if(as.numeric(value)\
    \ - fl == 0.5) {\n    if(fl > 0) {\n      cl\n    } else {\n      fl\n    }\n\
    \  } else {\n    if(as.numeric(value) - fl > 0.5) {\n      cl\n    } else {\n\
    \      fl\n    }\n  }\n}\n", "\n    round(as.numeric(value))\n}\nclosest_integer('10')\n\
    closest_integer('15.3')", "\n    # your code goes here\n    if(value %% 1 == 0)\
    \ {\n        return(value)\n    } else {\n        return(round(value))\n    }\n\
    }\n\nclosest_integer(\"14.5\") # should return 15\nclosest_integer(\"-14.5\")\
    \ # should return -15\n", "\n  if(value%%1==0) {\n    return(value)\n  } else\
    \ {\n    if(value>0) {\n      return(ceiling(value))\n    } else {\n      return(floor(value))\n\
    \    }\n  }\n}\n", "\n  return(as.integer(round(as.double(value), digits = 0)))\n\
    }\nclosest_integer('10')\nclosest_integer('15.3')\n", "\n  value_num <- as.numeric(value)\n\
    \  if (value_num %% 1 == 0) {\n    return(value_num)\n  } else {\n    if (value_num\
    \ >= 0) {\n      return(ceiling(value_num))\n    } else {\n      return(floor(value_num))\n\
    \    }\n  }\n}\n", "\n  if (as.numeric(value) %% 1 == 0) {\n    as.integer(value)\n\
    \  } else {\n    round(as.numeric(value))\n  }\n}\n", "\n  value <- as.numeric(value)\n\
    \  if(abs(value - round(value)) >= 0.5) {\n    if(value > 0) {\n      return(ceiling(value))\n\
    \    } else {\n      return(floor(value))\n    }\n  } else {\n    return(round(value))\n\
    \  }\n}\n", "\n  value <- as.numeric(value)\n  closest <- round(value)\n  if (closest\
    \ - value < 0.5) {\n    return(closest)\n  } else {\n    return(closest - 1)\n\
    \  }\n}", "\n  if(value==0) {\n    return(0)\n  } else if(value < 0) {\n    return(floor(value))\n\
    \  } else {\n    return(ceiling(value))\n  }\n}\n", "\n    return(round(as.numeric(value)))\n\
    }\n", "\n  value <- as.numeric(value)\n  print(value)\n  if (abs(value) == value)\
    \ {\n    value = round(value, 0)\n  } else {\n    value = -round(-value, 0)\n\
    \  }\n  return(value)\n}\n\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"\
    15.3\"))\n", "\n    num <- as.numeric(value)\n    int <- trunc(num)\n    diff\
    \ <- num - int\n    if (diff < 0.5)\n        return(int)\n    else\n        return(int\
    \ + 1)\n}", "\n  return(as.integer(signif(as.numeric(value), digits = 0)))\n}\n",
  "\n  return(round(as.numeric(value)))\n}\n", "\n  if (value == round(value))\n \
    \   value\n  else if (value > 0)\n    ceiling(value)\n  else\n    floor(value)\n\
    }", "\n  value <- as.numeric(value)\n  x <- trunc(value)\n  if (value - x >= 0.5)\
    \ {\n    x <- x + 1\n  }\n  x\n}\n", "\n  # your code here\n}", "\n  digits <-\
    \ nchar(value) - nchar(sub(\"\\\\.\", \"\", value)) - 1\n  if (digits > 0) {\n\
    \    value <- round(value, digits=digits)\n  }\n  if (value >= 0) {\n    value\
    \ <- floor(value)\n  } else {\n    value <- ceiling(value)\n  }\n  value\n}\n",
  "\n  return(round(as.numeric(value)))\n}\nclosest_integer('15.3')\n\n", "\n    value\
    \ <- as.numeric(value)\n    if (value %% 1 >= 0.5) return(ceiling(value))\n  \
    \  else return(floor(value))\n}\n", "\n    return(round(as.numeric(value)))\n\
    }\n\nclosest_integer('10')\nclosest_integer('15.3')\nclosest_integer('14.5')\n\
    closest_integer('-14.5')\n", "\n  if (value > 0) {\n    value <- floor(value)\n\
    \  } else {\n    value <- ceiling(value)\n  }\n  return(value)\n}\n", "\n  # input:\
    \ a value (string) representing a number\n  # output: the closest integer to the\
    \ number\n  # example: closest_integer('10') returns 10\n  # and closest_integer('15.3')\
    \ returns 15\n  # test vectors:\n  value <- as.numeric(value)\n  # paste string\
    \ here to create message\n  message(\"Value is: \", value)\n  closest_integer\
    \ <- round(value)\n  # paste string here to create message\n  message(\"Closest\
    \ integer is: \", closest_integer)\n  closest_integer\n}\nclosest_integer('10')\n\
    \nclosest_integer('15.3')\n", "\n    int = round(as.numeric(value))\n    dec =\
    \ as.numeric(value) - int\n    if (dec < 0) {\n        dec = abs(dec)\n    }\n\
    \    if (dec == 0.5) {\n        if (as.numeric(value) < 0) {\n            return(int\
    \ - 1)\n        } else {\n            return(int + 1)\n        }\n    } else {\n\
    \        return(int)\n    }\n}", "\n    # Your code here!\n    if (value < 0){\n\
    \        y = as.integer(value) - as.integer(value)%%1 + 1\n    }\n    else{\n\
    \        y = as.integer(value) - as.integer(value)%%1\n    }\n    return(y)\n}",
  "\n  # FIXME!\n  return(0)\n}\n", "\n  round(as.numeric(value))\n}\nclosest_integer('10')\n\
    closest_integer('15.3')\n", "\n    as.integer(as.numeric(value))\n}\n\nclosest_integer(\"\
    14.5\")\n", "\n    as.integer(round(as.numeric(value), digits = 0))\n}", "\n \
    \ round(as.numeric(value))\n}\nclosest_integer('10')\nclosest_integer('15.3')\n",
  "\n  if (value == abs(value)) {\n    as.integer(value)\n  } else {\n    as.integer(floor(value))\n\
    \  }\n}\nclosest_integer(10)\nclosest_integer(15.3)\nclosest_integer(14.5)\nclosest_integer(-14.5)\n",
  "\n  a <- as.numeric(value)\n  return(signif(a, 0))\n}\n", "\n    # Your code here\n\
    \    0\n}\n", "\n  nearest <- round(as.numeric(value))\n  difference <- abs(as.numeric(value)\
    \ - nearest)\n  if (difference < 0.5)\n    return(nearest)\n  else if (difference\
    \ == 0.5)\n    return(sign(as.numeric(value)) * (abs(nearest) + 1))\n  else\n\
    \    return(nearest)\n}\n", "\n  val <- as.integer(value)\n  rint(value)\n}\n\
    closest_integer(\"10\")\nclosest_integer(\"15.3\")\n", "\n    value <- as.numeric(value)\n\
    \    return(round(value))\n}\n", "\n    round(as.integer(value))\n}\n", "\n  value\
    \ <- as.numeric(value)\n  integer <- as.integer(value)\n  decimal <- value - integer\n\
    \  if(decimal == 0) {\n    return(integer)\n  } else if(decimal > 0) {\n    return(integer\
    \ + 1)\n  } else {\n    return(integer - 1)\n  }\n}\n", "\n    return(as.integer(round(as.double(value),\
    \ 0)))\n}", "\n  floor(as.numeric(value) + 0.5)\n}\n", "\n  value_l <- as.numeric(value)\n\
    \  if (value_l == 0) {\n    value_round <- round(value_l)\n  } else {\n    value_round\
    \ <- round(value_l, digits = 0)\n  }\n  return(value_round)\n}\n", "\n  val <-\
    \ as.numeric(value)\n  if (is.na(val))\n    return(val)\n  if (val < 0)\n    return(ceiling(val))\n\
    \  else\n    return(floor(val))\n}\nclosest_integer('10')\nclosest_integer('15.3')\n\
    closest_integer('-14.5')\n ", "\n  value <- as.numeric(value)\n  if (value >=\
    \ 0) {\n    if (value - as.integer(value) >= 0.5) {\n      return(as.integer(value)\
    \ + 1)\n    } else {\n      return(as.integer(value))\n    }\n  } else {\n   \
    \ if (value - as.integer(value) <= -0.5) {\n      return(as.integer(value) - 1)\n\
    \    } else {\n      return(as.integer(value))\n    }\n  }\n}\nclosest_integer('10')\n\
    closest_integer('15.3')\n", "\n  # Create a vector with all integers\n  integers\
    \ <- seq(-6, 6)\n  # Rounding away from zero\n  if(value > 0)\n    closest_integer\
    \ <- round(value)\n  else\n    closest_integer <- round(value) - 1\n  # If the\
    \ number is equidistant from two integers, round it away from zero\n  if(abs(value\
    \ - closest_integer) == 0.5) {\n    closest_integer <- max(integers[integers %in%\n\
    \                                       c(round(value) - 1, round(value))])\n\
    \  }\n  closest_integer\n}\nclosest_integer(15.3)\nclosest_integer(-14.5)\nclosest_integer(14.5)\n",
  "\n  # TODO: Implement the function here\n  as.integer(value)\n}\n", "\n\tif (value\
    \ >= 0) {\n\t\tinteger <- as.integer(value)\n\t\tif (integer == value) {\n\t\t\
    \treturn(integer)\n\t\t} else {\n\t\t\treturn(integer + 1)\n\t\t}\n\t} else {\n\
    \t\tinteger <- as.integer(value)\n\t\tif (integer == value) {\n\t\t\treturn(integer)\n\
    \t\t} else {\n\t\t\treturn(integer - 1)\n\t\t}\n\t}\n}\nclosest_integer <- Vectorize(closest_integer)\n",
  "\n  val <- as.numeric(value)\n  floor(val) + ceiling(val) - val == 2\n  round(val)\n\
    }\n", "\n  return(as.integer(round(as.numeric(value), 0)))\n}\nclosest_integer('10')\n\
    closest_integer('15.3')\n", "\n  as.integer(round(as.numeric(value), 0))\n}\n\
    closest_integer('10')\nclosest_integer('15.3')\n", "\n  value <- as.numeric(value)\n\
    \  if (value > floor(value) + 0.5) {\n    return(ceiling(value))\n  } else {\n\
    \    return(floor(value))\n  }\n}", "\n  as.integer(value)\n}\n", "\n  return(floor(as.numeric(value)\
    \ + 0.5))\n}\n", "\n  closest <- round(as.numeric(value))\n  for (i in seq(-9,9))\
    \ {\n    if (abs(as.numeric(value) - closest) > abs(as.numeric(value) - i)) {\n\
    \      closest <- i\n    }\n  }\n  return(closest)\n}", "\n  value_num <- as.numeric(value)\n\
    \  ifelse(value_num == round(value_num),\n         round(value_num),\n       \
    \  ifelse(abs(value_num - round(value_num)) == 0.5,\n                round(value_num,\
    \ 0) + sign(value_num),\n                round(value_num, 0)))\n}\n", "\n  value\
    \ <- as.numeric(value)\n  if (value > 0) {\n    value <- ceiling(value)\n  } else\
    \ {\n    value <- floor(value)\n  }\n  return(value)\n}\n", "\n  value <- as.numeric(value)\n\
    \  floor(value) + ceiling(value) == 2 * value\n  if (floor(value) + ceiling(value)\
    \ == 2 * value) {\n    value <- ceiling(value)\n  } else {\n    value <- round(value)\n\
    \  }\n  return(value)\n}\n", "\n  num <- as.integer(round(as.numeric(value)))\n\
    \  return(num)\n}", "\n  # Do some stuff...\n  result <- 0\n  # Round away from\
    \ zero\n  result <- sign(as.numeric(value)) * ceiling(abs(as.numeric(value)))\n\
    \  return(result)\n}\n \ntest_that(\"test_closest_integer_numeric\", {\n  expect_equal(10,\
    \ closest_integer(10))\n  expect_equal(15, closest_integer(15.3))\n  expect_equal(15,\
    \ closest_integer(14.5))\n  expect_equal(-15, closest_integer(-14.5))\n})\n ",
  "\n  num <- as.numeric(value)\n  num_int <- floor(num)\n  if (num - num_int < 0.5)\
    \ {\n    return(num_int)\n  } else {\n    return(num_int + 1)\n  }\n}\n", "\n\
    \  value <- as.numeric(value)\n  floor(value + 0.5)\n}\nclosest_integer(c(\"10\"\
    , \"15.3\"))\n", "\n  as.integer(value)\n}\ntest_that('Closest integer is chosen',\
    \ {\n  expect_true(closest_integer('10') == 10)\n  expect_true(closest_integer('15.3')\
    \ == 15)\n  expect_true(closest_integer('14.5') == 15)\n  expect_true(closest_integer('-14.5')\
    \ == -15)\n})\n ", "\n    value <- as.numeric(value)\n    floor_val <- floor(value)\n\
    \    ceiling_val <- ceiling(value)\n    fraction <- value - floor_val\n    if\
    \ (fraction > ceiling_val - value) {\n        return(ceiling_val)\n    } else\
    \ {\n        return(floor_val)\n    }\n}\n", "\n  if (as.numeric(value) >= 0)\
    \ {\n    round(as.numeric(value))\n  } else {\n    round(as.numeric(value), digits\
    \ = 0)\n  }\n}\n\nclosest_integer(\"10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"\
    14.5\")\nclosest_integer(\"-14.5\")\n", "\n    value <- as.numeric(value)\n  \
    \  if (value >= 0) {\n        return(floor(value + 0.5))\n    } else {\n     \
    \   return(ceiling(value - 0.5))\n    }\n}\n", "\n    number <- as.numeric(value)\n\
    \    if(number - floor(number) == 0.5) {\n        if(number > 0) {\n         \
    \   return(number - 0.5)\n        } else {\n            return(number + 0.5)\n\
    \        }\n    } else {\n        return(round(number))\n    }\n}", "\n  round(as.numeric(value))\n\
    }\n", "\n  value <- as.integer(as.numeric(value))\n  return(value)\n}\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"10\")\n", "\n  x <- as.integer(value)\n  if (x == value)\
    \ {\n    x\n  } else {\n    (value > 0) * (x + 1) + (value < 0) * (x - 1)\n  }\n\
    }\nclosest_integer('10')\nclosest_integer('15.3')\nclosest_integer(\"14.5\")\n\
    closest_integer(\"-14.5\")\n", "\n  value = as.numeric(value)\n  if (value > 0)\
    \ {\n    value = floor(value + 0.5)\n  } else {\n    value = ceiling(value - 0.5)\n\
    \  }\n  return(value)\n}\nclosest_integer(\"10\")\nclosest_integer(\"15.3\")\n",
  "\n  return(round(as.numeric(value)))\n}\nclosest_integer('10')\nclosest_integer('15.3')\n",
  "\n  floor(as.integer(value))\n}\n\nprint(closest_integer('10'))\nprint(closest_integer('15.3'))\n",
  "\n    as.integer(value)\n}\n\nclosest_integer('10')\nclosest_integer('15.3')\n\n\
    closest_integer <- function(value) {\n    round(value)\n}\n\nclosest_integer('10')\n\
    closest_integer('15.3')\nclosest_integer('14.5')\nclosest_integer('-14.5')\nclosest_integer('-15.3')\n\
    \nclosest_integer <- function(value) {\n    round(value, 0)\n}\n\nclosest_integer('10')\n\
    closest_integer('15.3')\nclosest_integer('14.5')\nclosest_integer('-14.5')\nclosest_integer('-15.3')\n\
    \nclosest_integer <- function(value) {\n    round(value, 0, digits = 0)\n}\n\n\
    closest_integer('10')\nclosest_integer('15.3')\nclosest_integer('14.5')\nclosest_integer('-14.5')\n\
    closest_integer('-15.3')\n\nclosest_integer <- function(value) {\n    if (value\
    \ - as.integer(value) < 0.5) {\n        as.integer(value)\n    } else {\n    \
    \    as.integer(value) + 1\n    }\n}\n\nclosest_integer('10')\nclosest_integer('15.3')\n\
    closest_integer('14.5')\nclosest_integer('-14.5')\nclosest_integer('-15.3')\n\n\
    closest_integer <- function(value) {\n    if (value - as.integer(value) < 0.5)\
    \ {\n        as.integer(value)\n    } else {\n        if (value < 0) {\n     \
    \       as.integer(value) - 1\n        } else {\n            as.integer(value)\
    \ + 1\n        }\n    }\n}\n\nclosest_integer('10')\nclosest_integer('15.3')\n\
    closest_integer('14.5')\nclosest_integer('-", "\n  int_value <- as.integer(value)\n\
    \  decimal_value <- as.numeric(value) - int_value\n  if (abs(decimal_value) <\
    \ 0.5) {\n    return(int_value)\n  } else if (decimal_value > 0) {\n    return(int_value\
    \ + 1)\n  } else {\n    return(int_value - 1)\n  }\n}\n\nprint(closest_integer('10'))\n\
    print(closest_integer('15.3'))\nprint(closest_integer('14.5'))\nprint(closest_integer('-14.5'))\n",
  "\n    value_parsed <- as.integer(value)\n    value_abs <- abs(value_parsed)\n \
    \   value_is_even <- value_abs %% 2 == 0\n    if (value_is_even) {\n        value_parsed\n\
    \    } else {\n        value_parsed + (value_parsed / value_abs)\n    }\n}\n\n\
    cat(closest_integer('10'), \"\\n\")\ncat(closest_integer('15.3'), \"\\n\")\n",
  "\n  int_part <- floor(as.numeric(value))\n  if (as.numeric(value) - int_part <\
    \ 0.5) {\n    return(int_part)\n  } else {\n    return(int_part + 1)\n  }\n}\n\
    print(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))\n", "\n  \
    \  if (is.na(value)) return(NA)\n    as.integer(trunc(as.numeric(value)))\n}\n\
    \ ", "\n  # Convert value to numeric.\n  value <- as.numeric(value)\n  # Get the\
    \ integer above the value.\n  ceil <- ceiling(value)\n  # Get the integer below\
    \ the value.\n  floor <- floor(value)\n  # Get the absolute difference between\
    \ the values.\n  ceiling_diff <- abs(ceil - value)\n  floor_diff <- abs(floor\
    \ - value)\n  # Use a ternary operator to get the closest integer.\n  if (ceiling_diff\
    \ < floor_diff) {\n    ceil\n  } else {\n    floor\n  }\n}\n\ncat(closest_integer(\"\
    10\"))\ncat(closest_integer(\"15.3\"))\n", "\n    value <- as.numeric(value)\n\
    \    floor(value + 0.5)\n}\nclosest_integer('10')\nclosest_integer('15.3')\n",
  "\n  value <- as.numeric(value)\n  if (is.integer(value)) {\n    return(value)\n\
    \  } else {\n    number_vector <- c(floor(value), ceiling(value))\n    return(number_vector[(number_vector\
    \ - value) == min(number_vector - value)])\n  }\n}\n", "\n    return(round(as.numeric(value)))\n\
    }", "\n  close_to_int <- as.integer(value)\n  if (as.numeric(value) - close_to_int\
    \ >= 0.5) {\n    close_to_int <- close_to_int + 1\n  }\n  close_to_int\n}\n",
  "\n  return(round(as.numeric(value)))\n}", "\n  if (value > 0) {\n    return(floor(value))\n\
    \  } else {\n    return(ceiling(value))\n  }\n}\n", "\n    as.integer(round(as.numeric(value),\
    \ 0))\n}\nclosest_integer(\"10\")\n", "\n  return(round(as.numeric(value)))\n\
    }\n", "\n  value <- as.numeric(value)\n  if (value%%1 >= 0.5) {\n    value <-\
    \ ceiling(value)\n  } else {\n    value <- floor(value)\n  }\n  return(value)\n\
    }\n", "\n  value = as.integer(value)\n  return(value)\n}\n", "\n  if (str_detect(value,\
    \ \"\\\\.\")) {\n    dec = str_extract(value, \"\\\\.[0-9]+\")\n    if (as.numeric(dec)\
    \ >= 0.5) {\n      return(as.integer(value) + 1)\n    } else {\n      return(as.integer(value))\n\
    \    }\n  } else {\n    return(as.integer(value))\n  }\n}", "\n  as.integer(value)\n\
    }\n ", "\n  z <- as.integer(value)\n  if (value > z) {\n    z + 1\n  } else {\n\
    \    z\n  }\n}", "\n  if (value >= 0) {\n    return(as.integer(value) + 1)\n \
    \ } else {\n    return(as.integer(value))\n  }\n}\n", "\n  # Your code here\n}",
  "\n  value <- as.numeric(value)\n  round(value)\n}\n", "\n    closest <- as.integer(as.numeric(value))\n\
    \    closest\n}", "\n  int <- as.integer(round(as.numeric(value)))\n  # Catches\
    \ the most common rounding errors\n  if (int == -1 && value > -1) int <- 0\n \
    \ if (int == 1 && value < 1) int <- 0\n  if (int == 0) {\n    d <- abs(value)\n\
    \    int <- as.integer(round(d))\n    if (int == 0) int <- 1\n    if (value <\
    \ 0) int <- -int\n  }\n  int\n}\n", "\n  value <- as.numeric(value)\n  if (value\
    \ >= 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n\
    \  }\n}\n\nprint(closest_integer('10'))\nprint(closest_integer('15.3'))\nprint(closest_integer('14.5'))\n\
    print(closest_integer('-14.5'))\n", "\n  cat(as.integer(value), \"\\n\")\n}\n\n\
    closest_integer('10')\nclosest_integer('15.3')\nclosest_integer('-2.5')\nclosest_integer('21.8')\n",
  "\n  num <- as.numeric(value)\n  if (length(num) != 1) {\n    return(NULL)\n  }\n\
    \  if (num - floor(num) == 0.5) {\n    if (num < 0) {\n      num <- floor(num)\n\
    \    } else {\n      num <- ceiling(num)\n    }\n  } else {\n    num <- round(num)\n\
    \  }\n  num\n}\n", "\n  value <- as.numeric(value)\n  y <- ceiling(value)\n  z\
    \ <- floor(value)\n  if (value %% 1 == 0) {\n    return(value)\n  } else if (value\
    \ - z > y - value) {\n    return(y)\n  } else {\n    return(z)\n  }\n}\n", "\n\
    \    n <- as.numeric(value)\n    decimal <- n - floor(n)\n    if(decimal >= 0.5)\
    \ {\n        n_integer <- floor(n) + 1\n    } else {\n        n_integer <- floor(n)\n\
    \    }\n    return(n_integer)\n}", "\n  value <- as.numeric(value)\n  if(floor(value)\
    \ == ceiling(value)) {\n    return(floor(value))\n  } else {\n    lower_value\
    \ <- floor(value)\n    upper_value <- ceiling(value)\n    lower_abs <- abs(lower_value\
    \ - value)\n    upper_abs <- abs(upper_value - value)\n    if(lower_abs < upper_abs)\
    \ {\n      return(lower_value)\n    } else {\n      return(upper_value)\n    }\n\
    \  }\n}", "\n  return(round(as.numeric(value)))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
