name: HumanEval_120_maximum
language: r
results:
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    stopifnot(k >= 0, k <=\
    \ length(arr))\n    sort(arr, decreasing = TRUE)[1:k]\n}\n\ntest_humaneval <-\
    \ function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4, 5),\
    \ 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4, 4),\
    \ 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n \
    \   if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    max_index <- c()\n    i\
    \ <- 0\n    while (i < k) {\n        m <- max(arr)\n        max_index <- c(max_index,\
    \ which(arr == m))\n        arr[max_index] <- -Inf\n        i <- i + 1\n    }\n\
    \    return(arr[max_index])\n}\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4),\
    \ 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\ntest_humaneval <- function() {\n\
    candidate <- maximum\n    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3,\
    \ 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20,\
    \ 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123, 20, 0, 1, 2, -3),\
    \ 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5, 15, 0,\
    \ 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4),\
    \ 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10), 2), c(-10,\
    \ 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23, 243, -400,\
    \ 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] -Inf -Inf -Inf\n[1] -Inf -Inf -Inf\n[1] -Inf -Inf\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  # Your code here\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n\t# Like in C++, R sort works\
    \ in-place.\n\tarr[order(arr, decreasing = TRUE)][1:k]\n}\nprint(maximum(c(-3,\
    \ -4, 5), 3))\nprint(maximum(c(4, -4, 4), 2))\nprint(maximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1))\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  sort(arr, decreasing = TRUE)[1:k]\n\
    }\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  min = min(arr)\n  max = max(arr)\n\
    \  temp = rep(min, length(arr))\n  for (i in seq_along(arr)) {\n    if (arr[i]\
    \ > temp[i]) {\n      temp[i] = arr[i]\n    }\n  }\n  if (k > length(arr)) {\n\
    \    return(sort(arr, decreasing = TRUE))\n  } else {\n    return(sort(temp, decreasing\
    \ = TRUE)[1:k])\n  }\n}\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    # TODO: Fill in the blanks.\n\
    \    sorted_arr <- sort(arr, decreasing = TRUE)\n    print(head(sorted_arr, k))\n\
    }\n\ntests <- function(v, k) {\n    expected <- sort(v, decreasing = TRUE)[1:k]\n\
    \    print(expected)\n    output <- maximum(v, k)\n    print(output)\n    stopifnot(identical(output,\
    \ expected))\n}\n\narr1 <- c(-3, -4, 5)\nk1 <- 3\ntests(arr1, k1)\n\narr2 <- c(4,\
    \ -4, 4)\nk2 <- 2\ntests(arr2, k2)\n\narr3 <- c(-3, 2, 1, 2, -1, -2, 1)\nk3 <-\
    \ 1\ntests(arr3, k3)\n\narr4 <- c(5, 2, 3, 1, 4)\nk4 <- 2\ntests(arr4, k4)\n\n\
    arr5 <- c(1000, 1001, 857, 1)\nk5 <- 3\ntests(arr5, k5)\n\narr6 <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n\
    test_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1]  5 -3 -4\n[1]  5 -3 -4\n[1] 4 4\n[1] 4 4\n[1] 4 4\n[1]
    2\n[1] 2\n[1] 2\n[1] 5 4\n[1] 5 4\n[1] 5 4\n[1] 1001 1000  857\n[1] 1001 1000  857\n[1]
    1001 1000  857\n'
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError: unexpected symbol in:\\n\"}\\ntest_humaneval\"\\nExecution halted\\\
    n'"
  exit_code: 1
  status: SyntaxError
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    ord <- order(arr, decreasing\
    \ = TRUE)\n    res <- arr[ord]\n    return(res[1:k])\n}\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n \ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    arr <- sort(arr, decreasing\
    \ = TRUE)\n    arr[1:k]\n}\n\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    if (length(arr) < k) stop(\"\
    k is too big\")\n    sort(arr, decreasing = TRUE)[1:k]\n}\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  order(arr, decreasing = TRUE)[1:k]\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    if (length(arr) == 1) {\n\
    \        return(arr)\n    }\n    start <- 1\n    end <- length(arr)\n    while\
    \ (start < end) {\n        pivot <- arr[start]\n        i <- start + 1\n     \
    \   j <- end\n        while (i <= j) {\n            while (i <= j && arr[i] >=\
    \ pivot) {\n                i <- i + 1\n            }\n            while (i <=\
    \ j && arr[j] <= pivot) {\n                j <- j - 1\n            }\n       \
    \     if (i < j) {\n                tmp <- arr[i]\n                arr[i] <- arr[j]\n\
    \                arr[j] <- tmp\n            }\n        }\n        tmp <- arr[start]\n\
    \        arr[start] <- arr[j]\n        arr[j] <- tmp\n        if (j == k) {\n\
    \            break\n        } else if (j < k) {\n            start <- j + 1\n\
    \        } else {\n            end <- j - 1\n        }\n    }\n    arr[1:k]\n\
    }\nmaximum(c(-3, -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1,\
    \ -2, 1), 1)\n\ntest_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
    \ -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1,\
    \ 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    if (length(arr) > 1) {\n\
    \        for (i in 1:(length(arr) - 1)) {\n            if (arr[i] > arr[i + 1])\
    \ {\n                arr[i] <- arr[i] + arr[i + 1]\n                arr[i + 1]\
    \ <- arr[i] - arr[i + 1]\n                arr[i] <- arr[i] - arr[i + 1]\n    \
    \        }\n        }\n        maximum(arr[1:(length(arr) - 1)], k)\n    } else\
    \ {\n        arr\n    }\n}\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n  sort(arr, decreasing = TRUE)[1:k]\n\
    }\nmaximum(c(-3, -4, 5), 3)\n\ntest_humaneval <- function() {\ncandidate <- maximum\n\
    \    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
    \ 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
    \ -123, 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1]  5 -3 -4\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    length <- length(arr)\n\
    \    k <- ifelse(k > length, length, k)\n    for (i in 1:(length - 1)) {\n   \
    \     for (j in (i + 1):length) {\n            if (arr[i] < arr[j]) {\n      \
    \          arr[i] <- arr[i] + arr[j]\n                arr[j] <- arr[i] - arr[j]\n\
    \                arr[i] <- arr[i] - arr[j]\n            }\n        }\n    }\n\
    \    res <- c()\n    for (i in (length - k + 1):length) {\n        res <- c(res,\
    \ arr[i])\n    }\n    return(res)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- maximum\n    if(!identical(candidate(c(-3, -4, 5), 3), c(-4, -3, 5))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(4, -4, 4), 2), c(4, 4))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(-3, 2, 1, 2, -1, -2, 1), 1), c(2))){quit('no',\
    \ 1)}\n    if(!identical(candidate(c(123, -123, 20, 0, 1, 2, -3), 3), c(2, 20,\
    \ 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123, 20, 0, 1, 2, -3),\
    \ 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5, 15, 0,\
    \ 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n    if(!identical(candidate(c(-1,\
    \ 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
    \ 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4),\
    \ 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10), 2), c(-10,\
    \ 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23, 243, -400,\
    \ 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Given a vector arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
    \ maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4,\
    \ 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\
    # c(2)\n# Note:\n# 1. The length of the vector will be in the range of [1, 1000].\n\
    # 2. The elements in the vector will be in the range of [-1000, 1000].\n# 3. 0\
    \ <= k <= len(arr)\nmaximum <- function(arr, k) {\n    set.seed(1)\n    temp <-\
    \ sort(arr)\n    temp[(length(temp)-k+1):length(temp)]\n}\nmaximum(c(-3, -4, 5),\
    \ 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3, -4,\
    \ 5), 3), c(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4, -4,\
    \ 4), 2), c(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2, 1, 2,\
    \ -1, -2, 1), 1), c(2))){quit('no', 1)}\n    if(!identical(candidate(c(123, -123,\
    \ 20, 0, 1, 2, -3), 3), c(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
    \ 20, 0, 1, 2, -3), 4), c(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
    \ 15, 0, 3, -13, -8, 0), 7), c(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n   \
    \ if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), c(3, 5))){quit('no', 1)}\n\
    \    if(!identical(candidate(c(1, 0, 5, -7), 1), c(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
    \ -4), 2), c(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
    \ 2), c(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
    \ 243, -400, 0), 0), c())){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] -4 -3  5\n[1] 4 4\n[1] 2\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
