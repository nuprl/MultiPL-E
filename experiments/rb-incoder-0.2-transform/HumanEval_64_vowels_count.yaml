name: HumanEval_64_vowels_count
language: rb
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count.call(\"abcde\")\n\
  # 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n\
  \    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"\
  ))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"\
  key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"\
  keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"\
  ACEDY\"))\n  end\nend\n"
completions: ["  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"aeiou\")\nend", "  s.scan(/[aeiouy]+/).count\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"\
    u\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    aeiou\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend",
  "  s.scan(/[aeiouy]+/)\n  s.count('y')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.chars.each do |c|\n    next if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u'\n    break if c == 'y'\n  end\n \
    \ s.chars.count('a'..'u')\nend", "  s.downcase!\n  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"\
    i\")\n  s.count(\"o\")\n  s.count(\"u\")\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"i\")\n  s.count(\"\
    o\")\n  s.count(\"u\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend",
  "  s.scan(/[aeiou]/)\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\"\
    )\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\n  s.count(\"\
    e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"u\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]+/, '')\n  s.count('aeiou')\nend", "  s.scan(/[aeiouy]+/)\n\
    \  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"\
    u\")\nend", "  s.chars.each do |c|\n    next if c == 'a'\n    next if c == 'e'\n\
    \    next if c == 'i'\n    next if c == 'o'\n    next if c == 'u'\n    break\n\
    \  end\n  s.size - s.chars.count('a'..'u')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.scan(/[aeiouy]+/).size\n\
    end", "  s.each_char.with_index.with_object(0) do |char, idx|\n    idx = idx %\
    \ 5\n    idx == 0 ? char == 'a' : char == 'e' ? char == 'i' : char == 'o' ? char\
    \ == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char == 'i' : char == 'o'\
    \ ? char == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char == 'i' : char\
    \ == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char == 'i'\
    \ : char == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char\
    \ == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char == 'e'\
    \ ? char == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char\
    \ == 'e' ? char == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char == 'a'\
    \ : char == 'e' ? char == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char\
    \ == 'a' : char == 'e' ? char == 'i' : char == 'o' ? char == 'u' : char == 'y'\
    \ ? char == 'a' : char == 'e' ? char == 'i' : char == 'o' ? char == 'u' : char\
    \ == 'y' ? char == 'a' : char == 'e' ? char == 'i' : char == 'o' ? char == 'u'\
    \ : char == 'y' ? char == 'a' : char == 'e' ? char == 'i' : char == 'o' ? char\
    \ == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char == 'i' : char == 'o'\
    \ ? char == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char == 'i' : char\
    \ == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char == 'i'\
    \ : char == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char == 'e' ? char\
    \ == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char == 'e'\
    \ ? char == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char == 'a' : char\
    \ == 'e' ? char == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char == 'a'\
    \ : char == 'e' ? char == 'i' : char == 'o' ? char == 'u' : char == 'y' ? char\
    \ == 'a' : char == 'e' ? char == 'i' : char == 'o' ? char == 'u' : char == 'y'\
    \ ? char == 'a' : char == '", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend",
  "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend", " \
    \ s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('aeiou')\n\
    end", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiouy]+/)\n \
    \ s.count(\"y\")\nend", "  s.chars.each do |c|\n    next if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u'\n    break if c == 'y'\n  end\n  s.size\
    \ - s.chars.count('a'..'u')\nend", "  s.each_char.with_index.inject(0) do |sum,\
    \ (c, i)|\n    sum + 1 if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u'\n  end\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  s.scan(/[aeiouy]+/)\n\
    \  s.count(\"y\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiouy]+/)\n\
    \  s.count(\"y\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\n  s.count(\"\
    e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"u\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\nend", "  s.scan(/[aeiou]/)\n \
    \ s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  s.chars.each\
    \ do |c|\n    next if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \    break if c == 'y'\n    vowels_count += 1 if c == 'a'\n    vowels_count +=\
    \ 1 if c == 'e'\n    vowels_count += 1 if c == 'i'\n    vowels_count += 1 if c\
    \ == 'o'\n    vowels_count += 1 if c == 'u'\n    vowels_count += 1 if c == 'y'\n\
    \  end\n  vowels_count\nend", "  s.chars.each do |c|\n    next if c == 'y' ||\
    \ c == 'Y'\n    next if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \    next if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    next\
    \ if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n    next if c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    next if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n    next if c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U'\n    next if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'\n    next if c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U'\n    next if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n    next if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U'\n    next if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\
    \    next if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    next\
    \ if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n    next if c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n    next if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n    next if c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U'\n    next if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'\n    next if c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U'\n    next if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u'\n    next if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U'\n    next if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == '", " \
    \ s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.scan(/[aeiouy]+/)\n\
    \  s.count('y')\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count('a')\n  s.count('e')\n  s.count('i')\n  s.count('o')\n  s.count('u')\n\
    end", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend\n</cell>\n<cell>", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend",
  "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('aeiou')\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend", "  s.scan(/[aeiouy]+/)\n\
    \  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.gsub!(/[aeiouy]$/, '')\n \
    \ s.count('aeiou')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiou]/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", " \
    \ s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.chars.each do |c|\n    next\
    \ if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n    break if c\
    \ == 'y'\n  end\n  s.chars.count('a'..'u')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", " \
    \ s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.each_char do |c|\n    if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u'\n      puts c\n    end\n  end\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"\
    u\")\nend\n</cell>\n<cell>", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", " \
    \ s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.chars.each do |c|\n    next if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n    break if c == 'y'\n  end\n  s.size - s.chars.count('a'..'z')\
    \ - s.chars.count('y'..'z')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like\
    \ the use of downcase and gsub! to remove vowels. I didn't know about that method.\n\
    <|/ c |>\n<| c |>\nI like your use of downcase and gsub! too. Thanks for sharing.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.scan(/[aeiouy]+/)\n\
    \  s.count(\"y\")\nend", "  s.chars.each do |c|\n    if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u'\n      count += 1\n    end\n  end\n  count\n\
    end", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.scan(/[aeiou]/)\n \
    \ s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('aeiou')\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend",
  "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend", "  s.scan(/[aeiouy]+/)\n\
    \  s.count(\"y\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend\n</cell>\n<cell>", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.chars.each do |c|\n    next if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'\n    break if c == 'y'\n  end\n  s.size - s.chars.count('a'..'u')\n\
    end", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiouy]+/)\n\
    \  s.count(\"y\")\nend", "  s.each_char.with_index do |c,i|\n    if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n      i += 1\n    end\n  end\n\
    \  s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n\
    end", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend\n</cell>\n\
    <cell>", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"\
    u\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.chars.each do |c|\n    next if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u'\n    break if c == 'y'\n  end\n \
    \ s.size - s.chars.count('a'..'z')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\"\
    )\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\n  s.count(\"\
    e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"u\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.each_char.with_index.inject(0) do |sum, (c, i)|\n\
    \    sum + case c\n      when 'a' then 1\n      when 'e' then 1\n      when 'i'\
    \ then 1\n      when 'o' then 1\n      when 'u' then 1\n      when 'y' then -1\n\
    \      else 0\n    end\n  end\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\n\
    end", "  s.downcase!\n  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend\n</cell>\n\
    <cell>", "  s.downcase!\n  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n  s.scan(/[aeiouy]+/)\n\
    \  s.count('y')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\n\
    end", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend\n</code>\n<|/ a tags=ruby,string |>\n<| a dscore=1\
    \ |>\n<code>", "  s.downcase!\n  s.gsub!(/[aeiou]/, '')\n  s.gsub!(/[aeiouy]/,\
    \ '')\n  s.count('aeiou')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n\
    \  s.count('aeiou')\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"y\")\nend", " \
    \ s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"aeiou\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"aeiou\")\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.chars.each do |c|\n    next if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n    break if c ==\
    \ 'y'\n  end\n  s.size - s.chars.count('a'..'z') + s.chars.count('a'..'z').to_i\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, but I believe\
    \ it would be more efficient to just count the vowels once and store them in a\
    \ hash.  Then you can just look up the count for each letter in the hash.\n<|/\
    \ c |>\n<| c |>\n: Yes, that's a good idea. I was thinking about it but decided\
    \ against it because I thought it would be too much to explain in a comment. I'll\
    \ add it to the answer.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.scan(/[aeiou]/)\n\
    \  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count('a')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
