name: HumanEval_64_vowels_count
language: rb
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count.call(\"abcde\")\n\
  # 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n\
  \    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"\
  ))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"\
  key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"\
  keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"\
  ACEDY\"))\n  end\nend\n"
completions: ["  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"aeiou\")\nend", "  s.scan(/[aeiouy]+/).count\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"i\")\n  s.count(\"o\")\n  s.count(\"\
    u\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"a\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiou]/, '')\n  s.count('aeiou')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    aeiou\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\nend", "  s.downcase!\n\
    \  s.gsub!(/[aeiouy]/, '')\n  s.count('a')\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    a\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/, '')\n  s.count('a')\nend",
  "  s.scan(/[aeiouy]+/)\n  s.count('y')\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]+/,\
    \ '')\n  s.count('a')\nend", "  s.chars.each do |c|\n    next if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u'\n    break if c == 'y'\n  end\n \
    \ s.chars.count('a'..'u')\nend", "  s.downcase!\n  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"a\")\n  s.count(\"e\")\n  s.count(\"\
    i\")\n  s.count(\"o\")\n  s.count(\"u\")\nend", "  s.scan(/[aeiouy]+/)\n  s.count(\"\
    y\")\nend", "  s.downcase!\n  s.gsub!(/[aeiouy]/, '')\n  s.count('aeiou')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
