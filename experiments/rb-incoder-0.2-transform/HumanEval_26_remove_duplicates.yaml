name: HumanEval_26_remove_duplicates
language: rb
prompt: "# From a list of integers, remove all elements that occur more than once.\n\
  # Keep order of elements left the same as in the input.\n# >>> remove_duplicates.call([1,\
  \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
  \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
  \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
completions: ["  numbers.uniq!\nend", "  numbers.uniq!\nend", "  numbers.uniq!\nend",
  "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    \  numbers\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", " \
    \ numbers.uniq!\nend", "  numbers.uniq!\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n\
    \  numbers\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\nend", " \
    \ numbers.uniq!\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend",
  "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", " \
    \ numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", " \
    \ numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    \  numbers\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", " \
    \ numbers.uniq!\nend", "  numbers.uniq!\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n\
    \  numbers\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't\
    \ work if you have a hash with duplicate keys. For example, `{ :a => 1, :a =>\
    \ 2 }` returns `{ :a => 2 }`.\n<|/ c |>\n<| c |>\nIt doesn't work for hashes with\
    \ duplicate keys. Try `{ :a => 1, :a => 2 }`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ Try `{ :a => 1, :a => 2 }.to_h`.\n<|/ c |>\n<| c |>\nIt doesn't work for hashes\
    \ with duplicate keys. Try `{ :a => 1, :a => 2 }`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for hashes with duplicate keys. Try `{ :a => 1, :a => 2 }`.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\n\
    end", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", " \
    \ numbers.uniq!\n  numbers\nend", "  numbers.uniq!\nend", "  numbers.uniq!\nend",
  "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n  numbers\nend", " \
    \ numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n \
    \ numbers\nend", "  numbers.uniq!\nend", "  numbers.uniq!\nend\n</code>\n<|/ a\
    \ tags=ruby,arrays |>\n<| c |>\n`uniq!` modifies the original array, so this won't\
    \ work if you want to keep the original array intact.\n<|/ c |>\n<| c |>\n`uniq!`\
    \ modifies the original array and returns `nil`. So you can do `numbers = numbers.uniq!`\n\
    <|/ c |>\n<| c |>\n`uniq!` modifies the original array and returns `nil`. So you\
    \ can do `numbers = numbers.uniq!`\n<|/ c |>\n<| c |>\n`uniq!` modifies the original\
    \ array and returns `nil`. So you can do `numbers = numbers.uniq!`\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\na = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, ", "  numbers.uniq!\n\
    end", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", "  numbers.uniq!\n\
    end", "  numbers.uniq!\n  numbers\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n\
    `uniq!` mutates the receiver. `uniq` returns a new array.\n<|/ c |>\n<| c |>\n\
    Thanks, I didn't know that. I've updated my answer.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  numbers.uniq!\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n\
    \  numbers\nend", "  numbers.uniq!\nend", "  numbers.uniq!\n  numbers\nend", " \
    \ numbers.uniq!\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
