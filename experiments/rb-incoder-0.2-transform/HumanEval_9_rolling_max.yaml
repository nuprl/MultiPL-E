name: HumanEval_9_rolling_max
language: rb
prompt: "# From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max.call([1, 2, 3,\
  \ 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
  \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
  \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
  \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
completions: ["  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1]\
    \ > n }.compact\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? || b.nil?\n\
    \    a.last > b.last ? a : b\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    next if a.nil? || b.nil?\n    a.last > b.last ? a : b\n  end\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([]) do |max,\
    \ (number, index)|\n    max << number if index == numbers.size - 1\n    max\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if index == 0\n    max = max > number\
    \ ? max : number\n    max\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map { |n, i| n\
    \ if i > 0 && numbers[i - 1] <= n }.max\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i >= rolling_max.moment }.compact\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max\
    \ << number if index > numbers.length - 2\n    max\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max\
    \ << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map { |n,\
    \ i| n if i > 0 && numbers[i - 1] <= n }.max\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  rolling_max_numbers = []\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  ", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.map { |n, i| n if i >= numbers.size\
    \ }.max\nend", "  numbers.each_with_index.map { |number, i| number if number >\
    \ numbers[i - 1] }\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |n, i| [n, i] }.\n    sort_by { |n, i| i }.\n    map { |n, i| n }.\n    each_cons(2).\n\
    \    map { |a, b| b }.\n    map { |n| n }.\n    reduce(:+)\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    number > numbers[index] ? number : numbers[index]\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.length - 1\n    max\n  end\nend", "  rolling_max_numbers\
    \ = []\n  rolling_max_numbers.push numbers[0]\n  numbers.each do |number|\n  \
    \  rolling_max_numbers.push number if rolling_max_numbers.last < number\n  end\n\
    \  rolling_max_numbers\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index > 0\n    max\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] > n\
    \ }.compact\nend", "  numbers.each_with_index.map { |number, i| number if number\
    \ > numbers[i-1] }\nend", "  numbers.each_cons(2).map { |a, b| a > b ? a : b }\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([]) do |rolling_max,\
    \ (number, index)|\n    rolling_max << number if number > rolling_max[-1]\n  \
    \  rolling_max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max = max if number > max\n    max = number if number == max\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max = max << number if index != 0\n    max\n  end\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.last > b.last ? a : b\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([]) do |max,\
    \ (number, index)|\n    max = max << number if index == numbers.size - 1\n   \
    \ max\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend",
  "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", "  rolling_max_numbers\
    \ = []\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  rolling_max_numbers_size = numbers.size\n\
    \  rolling_max_numbers_index = 0\n  roll", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.map do |number, index|\n    number > numbers[index\
    \ - 1] ? number : numbers[index - 1]\n  end\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  numbers.each_with_index.inject([]) do |rolling_max, (number, index)|\n    rolling_max\
    \ << number if index == numbers.size - 1\n    rolling_max << number if index ==\
    \ 0\n    rolling_max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index.map\
    \ do |number, i|\n    number > numbers[i - 1] ? number : numbers[i - 1]\n  end\n\
    end", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? || b.nil?\n    next\
    \ if a.last < b.last\n    a.last > b.last ? a : b\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index > 0\n    max\n  end\n\
    end", "  numbers.each_with_index.inject([]) do |rolling_max, (number, index)|\n\
    \    rolling_max << number if rolling_max.last < number\n    rolling_max\n  end\n\
    end", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_with_index.map { |number, index| number if index\
    \ == numbers.size - 1 }.max\nend", "  numbers.each_cons(2) do |a, b|\n    a.last\
    \ > b.last ? a : b\n  end\nend", "  rolling_max_numbers = []\n  rolling_max_numbers.push\
    \ numbers[0]\n  numbers.each do |number|\n    rolling_max_numbers.push number\
    \ if rolling_max_numbers.last < number\n  end\n  rolling_max_numbers\nend", " \
    \ numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do |a, b|\n\
    \    a.last > b.last ? a : b\n  end\nend", "  numbers.each_with_index.map { |n,\
    \ i| n if i > 0 && (numbers[i - 1] < n || numbers[i - 1] == n) }.compact\nend",
  "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max << number\
    \ if index > 0\n    max\n  end\nend", "  numbers.each_with_index.inject([]) do\
    \ |max, (number, index)|\n    max = max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max = max << number if index > 0\n    max\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] <=\
    \ n }.max\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.map do |number, index|\n   \
    \ number > numbers[index - 1] ? number : numbers[index - 1]\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.map { |number, i| number if number > numbers[i\
    \ - 1] }\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index == numbers.size - 1\n    max\n  end\nend",
  "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index == numbers.size - 1\n    max\n  end\nend",
  "  numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n  end\nend", " \
    \ numbers.each_with_index.map do |number, index|\n    number > numbers[index]\
    \ ? number : numbers[index]\n  end\nend", "  numbers.each_cons(2) do |a, b|\n\
    \    next if a.nil? || b.nil?\n    a.max b\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] <=\
    \ n }.max\nend", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend", "  numbers.each_with_index.map { |n, i| n\
    \ if i > 0 && numbers[i - 1] <= n }.max\nend", "  numbers.reduce(:<<)\nend", " \
    \ numbers.each_with_index.inject([]) do |max, (number, index)|\n    max << number\
    \ if index == numbers.size - 1\n    max\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.map { |number, index| number\
    \ > numbers[index] ? number : numbers[index] }\nend", "  rolling_max_numbers =\
    \ []\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  numbers.each\
    \ do |number|\n    rolling_max_numbers_index += 1\n    rolling_max_numbers.push(number)\
    \ if rolling_max_numbers_index == number\n  end\n  rolling_max_numbers\nend",
  "  numbers.each_with_index.map { |number, index| number > numbers[index] ? number\
    \ : numbers[index] }\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b",
  "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max << number\
    \ if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2).map { |a, b| a > b ? a : b }.compact\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b",
  "  numbers.each_with_index.inject([]) do |rolling_max, (number, index)|\n    rolling_max\
    \ << number if index == numbers.size - 1\n    rolling_max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.map do |number, index|\n   \
    \ number > numbers[index] ? number : numbers[index]\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.map { |number, i| number if number > numbers[i-1]\
    \ }\nend", "  numbers.reduce(:<<)\nend", "  rolling_max.max_value = nil\n  rolling_max.max_element\
    \ = nil\n  rolling_max.max_index = nil\n  rolling_max.max_index = nil\n  rolling_max.max_value\
    \ = nil\n  numbers.each do |number|\n    if number > rolling_max.max_value\n \
    \     rolling_max.max_value = number\n      rolling_max.max_element = number\n\
    \      rolling_max.max_index = number\n    end\n  end\n  rolling_max.max_value\n\
    end", "  numbers.each_cons(2) do |a, b|\n    a.last < b.last ? a : b\n  end\n\
    end", "  rolling_max_numbers = []\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  ", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  rolling_max_numbers = []\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  ", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = max << number if index > 0\n    max\n \
    \ end\nend", "  numbers.each_with_index.inject([]) do |rolling_max, (number, index)|\n\
    \    rolling_max << number if index == numbers.size - 1\n    rolling_max << number\
    \ if index == 0\n    rolling_max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do\
    \ |a, b|\n    a.last.nil? ? a << b : a << b unless a.last.nil? || a.last.last\
    \ < b\n  end\nend", "  numbers.each_with_index.map { |number, i| number > numbers[i\
    \ - 1] ? number : numbers[i - 1] }\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.length - 1\n\
    \    max\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do\
    \ |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if index == 0\n    max\n  end\n\
    end", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max\
    \ << number if index == numbers.size - 1\n    max\n  end\nend", "  rolling_max_numbers\
    \ = []\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  ",
  "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i - 1] <= n }.max\nend", "  rolling_max_numbers\
    \ = []\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  ",
  "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i-1] <= n }.max\nend", "  rolling_max_numbers\
    \ = []\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  ",
  "  numbers.reduce(:<<)\nend", "  rolling_max_numbers = []\n  rolling_max_numbers.push\
    \ numbers[0]\n  rolling_max_numbers.push numbers[1]\n  rolling_max_numbers.push\
    \ numbers[2]\n  rolling_max_numbers.push numbers[3]\n  rolling_max_numbers.push\
    \ numbers[4]\n  rolling_max_numbers.push numbers[5]\n  rolling_max_numbers.push\
    \ numbers[6]\n  rolling_max_numbers.push numbers[7]\n  rolling_max_numbers.push\
    \ numbers[8]\n  rolling_max_numbers.push numbers[9]\n  rolling_max_numbers.push\
    \ numbers[10]\n  rolling_max_numbers.push numbers[11]\n  rolling_max_numbers.push\
    \ numbers[12]\n  rolling_max_numbers.push numbers[13]\n  rolling_max_numbers.push\
    \ numbers[14]\n  rolling_max_numbers.push numbers[15]\n  rolling_max_numbers.push\
    \ numbers[16]\n  rolling_max_numbers.push numbers[17]\n  rolling_max_numbers.push\
    \ numbers[18]\n  rolling_max_numbers.push numbers[19]\n  rolling_max_numbers.push\
    \ numbers[20]\n  rolling_max_numbers.push numbers[21]\n  rolling_max_numbers.push\
    \ numbers[22]\n  rolling_max_numbers.push numbers[23]\n  rolling_max_numbers.push\
    \ numbers[24]\n  rolling_max_numbers.push numbers[25]\n  rolling_max_numbers.push\
    \ numbers[26]\n  rolling_max_numbers.push numbers[27]\n  rolling_max_numbers.push\
    \ numbers[28]\n  rolling_max_numbers.push numbers[29]\n  rolling_max_numbers.push\
    \ numbers[30]\n  rolling_max_numbers.push numbers[31]\n  rolling_max_numbers.push\
    \ numbers[32]\n  rolling_max_numbers.push numbers[33]\n  rolling_max_numbers.push\
    \ numbers[34]\n  rolling_max_numbers.push numbers[35]\n  rolling_max_numbers.push\
    \ numbers[36]\n  rolling_max_numbers.push numbers[37]\n  rolling_max_numbers.push\
    \ numbers[38]\n  rolling_max_numbers.push numbers[39]\n  rolling_max_numbers.push\
    \ numbers[40]\n  rolling_max_numbers.push numbers[41]\n  rolling_max_numbers.push\
    \ numbers[42]\n  rolling_max_numbers.push numbers[43]\n  rolling_max_numbers.push\
    \ numbers[44]\n  rolling_max_numbers.push numbers[45]\n  rolling_max_numbers.push\
    \ numbers[46]\n  rolling_max_numbers.", "  numbers.each_with_index.map { |n, i|\
    \ n if i > 0 && numbers[i-1] > n }.compact.first\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i - 1] > n }.compact\nend", "  rolling_max.max_value\
    \ = nil\n  rolling_max.max_index = nil\n  rolling_max.max_value = nil\n  rolling_max.max_index\
    \ = nil\n  numbers.each do |number|\n    if number > rolling_max.max_value\n \
    \     rolling_max.max_value = number\n      rolling_max.max_index = number\n \
    \   end\n  end\n  rolling_max.max_value\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  rolling_max_numbers = []\n  rolling_max_numbers.push numbers[0]\n  rolling_max_numbers.push\
    \ numbers[1]\n  rolling_max_numbers.push numbers[2]\n  rolling_max_numbers.push\
    \ numbers[3]\n  rolling_max_numbers.push numbers[4]\n  rolling_max_numbers.push\
    \ numbers[5]\n  rolling_max_numbers.push numbers[6]\n  rolling_max_numbers.push\
    \ numbers[7]\n  rolling_max_numbers.push numbers[8]\n  rolling_max_numbers.push\
    \ numbers[9]\n  rolling_max_numbers.push numbers[10]\n  rolling_max_numbers.push\
    \ numbers[11]\n  rolling_max_numbers.push numbers[12]\n  rolling_max_numbers.push\
    \ numbers[13]\n  rolling_max_numbers.push numbers[14]\n  rolling_max_numbers.push\
    \ numbers[15]\n  rolling_max_numbers.push numbers[16]\n  rolling_max_numbers.push\
    \ numbers[17]\n  rolling_max_numbers.push numbers[18]\n  rolling_max_numbers.push\
    \ numbers[19]\n  rolling_max_numbers.push numbers[20]\n  rolling_max_numbers.push\
    \ numbers[21]\n  rolling_max_numbers.push numbers[22]\n  rolling_max_numbers.push\
    \ numbers[23]\n  rolling_max_numbers.push numbers[24]\n  rolling_max_numbers.push\
    \ numbers[25]\n  rolling_max_numbers.push numbers[26]\n  rolling_max_numbers.push\
    \ numbers[27]\n  rolling_max_numbers.push numbers[28]\n  rolling_max_numbers.push\
    \ numbers[29]\n  rolling_max_numbers.push numbers[30]\n  rolling_max_numbers.push\
    \ numbers[31]\n  rolling_max_numbers.push numbers[32]\n  rolling_max_numbers.push\
    \ numbers[33]\n  rolling_max_numbers.push numbers[34]\n  rolling_max_numbers.push\
    \ numbers[35]\n  rolling_max_numbers.push numbers[36]\n  rolling_max_numbers.push\
    \ numbers[37]\n  rolling_max_numbers.push numbers[38]\n  rolling_max_numbers.push\
    \ numbers[39]\n  rolling_max_numbers.push numbers[40]\n  rolling_max_numbers.push\
    \ numbers[41]\n  rolling_max_numbers.push numbers[42]\n  rolling_max_numbers.push\
    \ numbers[43]\n  rolling_max_numbers.push numbers[44]\n  rolling_max_numbers.push\
    \ numbers[45]\n  rolling_max_numbers.push numbers[46]\n  rolling_max_numbers.",
  "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil?\
    \ || b.nil?\n    next if a.last < b.last\n    a.last > b.last ? a : b\n  end\n\
    end", "  numbers.each_with_index.map do |number, index|\n    number > numbers[index\
    \ - 1] ? number : numbers[index - 1]\n  end\nend", "  numbers.each_with_index.map\
    \ { |number, index| number > numbers[index] ? number : numbers[index] }\nend",
  "  rolling_max_numbers = []\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index = 0\n  rolling_max_numbers_index\
    \ = 0\n  ", "  numbers.each_with_index.inject([]) do |rolling_max, (number, index)|\n\
    \    rolling_max << number if number > rolling_max[-1]\n    rolling_max\n  end\n\
    end", "  numbers.reduce(:<<)\nend", "  rolling_max.max_value = nil\n  rolling_max.max_index\
    \ = nil\n  rolling_max.max_value = numbers[0]\n  rolling_max.max_index = numbers[0]\n\
    \  numbers.each do |number|\n    if number > rolling_max.max_value\n      rolling_max.max_value\
    \ = number\n      rolling_max.max_index = number\n    end\n  end\n  rolling_max.max_value\n\
    end", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.inject([]) do |max,\
    \ (number, index)|\n    max << number if index == numbers.length - 1\n    max\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max = max if index == 0\n    max > number ? max : number\n  end\nend", " \
    \ numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n  end\nend", " \
    \ numbers.each_with_index.inject([]) do |max, (number, index)|\n    max = max\
    \ << number if index > 0\n    max\n  end\nend", "  numbers.reduce(:<<)\nend",
  "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_cons(2) do |a, b|\n    a.last > b.last ? a : b\n\
    \  end\nend", "  numbers.reduce(:<<)\nend", "  rolling_max_numbers = []\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  rolling_max_numbers_size = numbers.size\n  rolling_max_numbers_index\
    \ = 0\n  roll", "  numbers.reduce(:<<)\nend", "  numbers.reduce(:<<)\nend", " \
    \ numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil?\
    \ || b.nil?\n    a.max b\n  end\nend", "  numbers.each_with_index.map { |n, i|\
    \ n if i > 0 && numbers[i-1] > n }.compact\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && (numbers[i-1] + numbers[i]) == n }.compact\nend", " \
    \ numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] <= n }.max\n\
    end", "  numbers.each_cons(2) do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n\
    \  end\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? || b.nil?\n\
    \    a.max b\n  end\nend", "  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i - 1] > n }.compact\nend", "  numbers.each_with_index.map\
    \ { |n, i| n if i > 0 && numbers[i - 1] <= n }.max\nend", "  numbers.each_cons(2)\
    \ do |a, b|\n    a.max(b).max(b).max(b).max(b).max(b).max(b).max(b)\n  end\nend",
  "  numbers.each_with_index.map { |n, i| n if i > 0 && numbers[i - 1] <= n }.max\n\
    end", "  numbers.reduce(:<<)\nend", "  rolling_max_numbers = []\n  rolling_max_numbers.push\
    \ numbers[0]\n  rolling_max_numbers.push numbers[1]\n  rolling_max_numbers.push\
    \ numbers[2]\n  rolling_max_numbers.push numbers[3]\n  rolling_max_numbers.push\
    \ numbers[4]\n  rolling_max_numbers.push numbers[5]\n  rolling_max_numbers.push\
    \ numbers[6]\n  rolling_max_numbers.push numbers[7]\n  rolling_max_numbers.push\
    \ numbers[8]\n  rolling_max_numbers.push numbers[9]\n  rolling_max_numbers.push\
    \ numbers[10]\n  rolling_max_numbers.push numbers[11]\n  rolling_max_numbers.push\
    \ numbers[12]\n  rolling_max_numbers.push numbers[13]\n  rolling_max_numbers.push\
    \ numbers[14]\n  rolling_max_numbers.push numbers[15]\n  rolling_max_numbers.push\
    \ numbers[16]\n  rolling_max_numbers.push numbers[17]\n  rolling_max_numbers.push\
    \ numbers[18]\n  rolling_max_numbers.push numbers[19]\n  rolling_max_numbers.push\
    \ numbers[20]\n  rolling_max_numbers.push numbers[21]\n  rolling_max_numbers.push\
    \ numbers[22]\n  rolling_max_numbers.push numbers[23]\n  rolling_max_numbers.push\
    \ numbers[24]\n  rolling_max_numbers.push numbers[25]\n  rolling_max_numbers.push\
    \ numbers[26]\n  rolling_max_numbers.push numbers[27]\n  rolling_max_numbers.push\
    \ numbers[28]\n  rolling_max_numbers.push numbers[29]\n  rolling_max_numbers.push\
    \ numbers[30]\n  rolling_max_numbers.push numbers[31]\n  rolling_max_numbers.push\
    \ numbers[32]\n  rolling_max_numbers.push numbers[33]\n  rolling_max_numbers.push\
    \ numbers[34]\n  rolling_max_numbers.push numbers[35]\n  rolling_max_numbers.push\
    \ numbers[36]\n  rolling_max_numbers.push numbers[37]\n  rolling_max_numbers.push\
    \ numbers[38]\n  rolling_max_numbers.push numbers[39]\n  rolling_max_numbers.push\
    \ numbers[40]\n  rolling_max_numbers.push numbers[41]\n  rolling_max_numbers.push\
    \ numbers[42]\n  rolling_max_numbers.push numbers[43]\n  rolling_max_numbers.push\
    \ numbers[44]\n  rolling_max_numbers.push numbers[45]\n  rolling_max_numbers.push\
    \ numbers[46]\n  rolling_max_numbers.", "  numbers.each_cons(2) do |a, b|\n  \
    \  a.max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b).max(b",
  "  numbers.reduce(:<<)\nend", "  numbers.each_cons(2) do |a, b|\n    a.last > b.last\
    \ ? a : b\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
