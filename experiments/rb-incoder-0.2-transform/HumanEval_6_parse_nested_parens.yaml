name: HumanEval_6_parse_nested_parens
language: rb
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/) do |paren|\n    level =\
    \ 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n      paren_string.scan(/[\\\
    (\\)]/) do |paren|\n        level += 1\n        paren_string.scan(/[\\(\\)]/)\
    \ do |paren|\n          level += 1\n        end\n      end\n    end\n  end\nend",
  "  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_", "  paren_string.scan(/[\\(\\)]/) do |paren|\n    level\
    \ = 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n      paren_string.scan(/[\\\
    (\\)]/) do |paren|\n        level += 1\n      end\n    end\n    level\n  end\n\
    end", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_levels = []\n  paren_levels_count = 0\n  paren_levels_sum = 0\n\
    \  paren_levels_sums = []\n  paren_levels_sums_count = 0\n  paren_levels_sums_sum\
    \ = 0\n  paren_levels_sums_sums = []\n  paren_levels_sums_sums_count = 0\n  paren_levels_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums = []\n  paren_levels_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sum = 0\n  paren_levels_sums_sums_sums_sums\
    \ = []\n  paren_levels_sums_sums_sums_sums_count = 0\n  paren_levels_sums_sums_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums = []\n  paren_levels_sums_sums_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sum = 0\n  paren_levels_sums_sums_sums_sums_sums_sums\
    \ = []\n  paren_levels_sums_sums_sums_sums_sums_sums_count = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums = []\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sum = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = []\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_count = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums = []\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum =\
    \ 0\n  paren_levels_sums_sums_", "  paren_string.scan(/[^()]+/).map { |x| x.length\
    \ }.max\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\s*|\\\
    s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\\
    (\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |group|\n    group.to_s.scan(/\\s*\\(\\\
    s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\\
    (([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |level|\n\
    \      level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*\\)/).map do |level|\n        level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |level|\n       \
    \   level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*\\)/).map do |level|\n            level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |level|\n       \
    \       level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*\\)/).map do |level|\n                level.to_s.scan(/\\s*\\(\\s*",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*\\)/) do |group|\n\
    \    group.scan(/\\s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_group|\n      nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_group|\n        nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_group|\n          nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_group|\n       \
    \     nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]*)\\)\\s*\\)/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\\
    (([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[^()]+/).map { |x| x.to_i\
    \ }\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\s*\\)\\s*\\)/) do |group|\n    if group.captures.size == 1\n      group.captures.first.to_i\n\
    \    else\n      group.captures.map { |x| x.to_i }.max\n    end\n  end\nend",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nest", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/) do |paren_group|\n    paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \        nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n         \
    \ nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n            nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n              nested_paren_group.scan(/[^()]+/) do\
    \ |nested_paren_group|\n                nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                  nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                        nested_paren_group.scan(/[^()]+/) do\
    \ |nested_paren_group|\n                                          nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                            nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                              nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                  nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                  \
    \  nested_paren_group.scan(/[^()]+/) do |nested_", "  paren_string.scan(/[\\(\\\
    )]+/) do |paren_char|\n    paren_char = paren_char.strip\n    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n      paren_char = paren_char.strip\n      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n        paren_char = paren_char.strip\n        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n          paren_char = paren_char.strip\n          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n            paren_char = paren_char.strip\n        \
    \    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char =\
    \ paren_char.strip\n              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                paren_char = paren_char.strip\n                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                  paren_char = paren_char.strip\n  \
    \                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              \
    \      paren_char = paren_char.strip\n                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                      paren_char = paren_char.strip\n\
    \                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        \
    \                paren_char = paren_char.strip\n                        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                          paren_char = paren_char.strip\n\
    \                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \                        paren_char = paren_char.strip\n                     \
    \       paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                       \
    \       paren_char = paren_char.strip\n                              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                paren_char = paren_char.strip\n\
    \                                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char = paren_char.strip\n           \
    \                       paren_char.scan(/[\\(\\)]+/) do |paren_char|\n       \
    \                             paren_char = paren_char.strip\n                \
    \                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          \
    \                            ", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/) do |group|\n    if group.captures.size == 1\n      group.captures.first\n\
    \    else\n      group.captures.max\n    end\n  end\nend", '  paren_string.scan(/\s*\(\s*\((?<level>\d+)\)\s*\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)',
  "  paren_string.scan(/[()]/).map { |x| x.to_i }.reduce(:+)\nend", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_count\
    \ = 0\n  paren_nesting_count_max = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0", "  paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n     \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = \"\"\
    \n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_level", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend",
  "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/\\(/) do\
    \ |paren_string|\n      paren_string.scan(/\\)/) do |paren_string|\n        paren_string.scan(/\\\
    )/) do |paren_string|\n          paren_string.scan(/\\)/) do |paren_string|\n\
    \            paren_string.scan(/\\)/) do |paren_string|\n              paren_string.scan(/\\\
    )/) do |paren_string|\n                paren_string.scan(/\\)/) do |paren_string|\n\
    \                  paren_string.scan(/\\)/) do |paren_string|\n              \
    \      paren_string.scan(/\\)/) do |paren_string|\n                      paren_string.scan(/\\\
    )/) do |paren_string|\n                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                          paren_string.scan(/\\)/) do |paren_string|\n      \
    \                      paren_string.scan(/\\)/) do |paren_string|\n          \
    \                    paren_string.scan(/\\)/) do |paren_string|\n            \
    \                    paren_string.scan(/\\)/) do |paren_string|\n            \
    \                      paren_string.scan(/\\)/) do |paren_string|\n          \
    \                          paren_string.scan(/\\)/) do |paren_string|\n      \
    \                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                          paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/\\)/) do |paren_string|\n\
    \                                              paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/\\)/) do\
    \ |paren_string|\n                                                    paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/\\)/) do |paren_string|\n                              \
    \                            paren_string.scan(/\\)/) do |paren_string|\n    \
    \                                                        paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/\\)/) do |paren_string|\n                        \
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                                                    paren_string.scan(/\\)/)\
    \ do |paren_string|\n                                                        \
    \                paren_string.scan(/\\)/) do |paren_string|\n                \
    \                                                ", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.length }.max\nend", "  paren_stack = []\n  paren_level = 0\n\
    \  paren_levels = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n \
    \ paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n\
    \  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs =\
    \ []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_index",
  "  paren_string.scan(/[\\(\\)]/) do |paren|\n    paren_level = 0\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      paren_level += 1\n      if paren_level > max_nested_paren_level\n\
    \        max_nested_paren_level = paren_level\n      end\n    end\n  end\n  max_nested_paren_level\n\
    end", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n\
    \  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/)\n  level = 0\n  paren_levels = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren", "  paren_string.scan(/[^()]+/).map do |x|\n    x.to_s.split('(').map\
    \ do |y|\n      y.split(')').map do |z|\n        z.count('(') - z.count(')')\n\
    \      end\n    end.max\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.to_i }\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*\\)/) do |group|\n\
    \    group.to_a.inject(0) do |max_level, paren|\n      max_level = max_level if\
    \ paren.include?('(')\n      max_level\n    end\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\)]/) do |paren_char|\n \
    \       paren_char.scan(/[\\(\\)]/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]/) do |paren_char|\n           \
    \           paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    \
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                            paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                  paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                                    paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/[\\(\\\
    )]/) do |paren_char|\n    paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \          paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/) do |group|\n    group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_group|\n\
    \      nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_group|\n\
    \            nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_group|\n        \
    \          nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n \
    \                   nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                  nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n\
    \    paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n     \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n            paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                    paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                      paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                        paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                            paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        \
    \                          paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do\
    \ |paren_string|\n                                    paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n                                   \
    \   paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n      \
    \                                  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ do |paren_string|\n                                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \             paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n\
    \                                              paren_string.scan(", "  paren_string.scan(/[()]/).map\
    \ { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \    paren.scan(/[\\(\\)]+/) do |paren|\n      paren.scan(/[\\(\\)]+/) do |paren|\n\
    \        paren.scan(/[\\(\\)]+/) do |paren|\n          paren.scan(/[\\(\\)]+/)\
    \ do |paren|\n            paren.scan(/[\\(\\)]+/) do |paren|\n              paren.scan(/[\\\
    (\\)]+/) do |paren|\n                paren.scan(/[\\(\\)]+/) do |paren|\n    \
    \              paren.scan(/[\\(\\)]+/) do |paren|\n                    paren.scan(/[\\\
    (\\)]+/) do |paren|\n                      paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                        paren.scan(/[\\(\\)]+/) do |paren|\n                \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                            paren.scan(/[\\\
    (\\)]+/) do |paren|\n                              paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                                        paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                  paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                                    paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                      paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \  paren.scan(/[\\(\\)]+/) do |paren|\n                                      \
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \                                            paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                                paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                              \
    \                                      paren.scan(/[\\(\\)]+/) do |paren|\n",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/["]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
