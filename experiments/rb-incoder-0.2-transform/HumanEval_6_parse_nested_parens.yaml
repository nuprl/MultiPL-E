name: HumanEval_6_parse_nested_parens
language: rb
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/) do |paren|\n    level =\
    \ 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n      paren_string.scan(/[\\\
    (\\)]/) do |paren|\n        level += 1\n        paren_string.scan(/[\\(\\)]/)\
    \ do |paren|\n          level += 1\n        end\n      end\n    end\n  end\nend",
  "  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_level = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_level\
    \ = 0\n  paren_nesting_", "  paren_string.scan(/[\\(\\)]/) do |paren|\n    level\
    \ = 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n      paren_string.scan(/[\\\
    (\\)]/) do |paren|\n        level += 1\n      end\n    end\n    level\n  end\n\
    end", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_levels = []\n  paren_levels_count = 0\n  paren_levels_sum = 0\n\
    \  paren_levels_sums = []\n  paren_levels_sums_count = 0\n  paren_levels_sums_sum\
    \ = 0\n  paren_levels_sums_sums = []\n  paren_levels_sums_sums_count = 0\n  paren_levels_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums = []\n  paren_levels_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sum = 0\n  paren_levels_sums_sums_sums_sums\
    \ = []\n  paren_levels_sums_sums_sums_sums_count = 0\n  paren_levels_sums_sums_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums = []\n  paren_levels_sums_sums_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sum = 0\n  paren_levels_sums_sums_sums_sums_sums_sums\
    \ = []\n  paren_levels_sums_sums_sums_sums_sums_sums_count = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums = []\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sum = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = []\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_count = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums = []\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n  paren_levels_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum =\
    \ 0\n  paren_levels_sums_sums_", "  paren_string.scan(/[^()]+/).map { |x| x.length\
    \ }.max\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\s*|\\\
    s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\\
    (\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |group|\n    group.to_s.scan(/\\s*\\(\\\
    s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\\
    (([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |level|\n\
    \      level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*\\)/).map do |level|\n        level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |level|\n       \
    \   level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*\\)/).map do |level|\n            level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |level|\n       \
    \       level.to_s.scan(/\\s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\\
    s*\\)\\s*\\)\\s*|\\s*\\(\\s*\\(([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*\\)/).map do |level|\n                level.to_s.scan(/\\s*\\(\\s*",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*\\)/) do |group|\n\
    \    group.scan(/\\s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_group|\n      nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_group|\n        nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_group|\n          nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_group|\n       \
    \     nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]*)\\)\\s*\\)/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\\
    (([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]*)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[^()]+/).map { |x| x.to_i\
    \ }\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\s*\\)\\s*\\)/) do |group|\n    if group.captures.size == 1\n      group.captures.first.to_i\n\
    \    else\n      group.captures.map { |x| x.to_i }.max\n    end\n  end\nend",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nest", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/) do |paren_group|\n    paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \        nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n         \
    \ nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n            nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n              nested_paren_group.scan(/[^()]+/) do\
    \ |nested_paren_group|\n                nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                  nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[^()]+/) do |nested_paren_group|\n\
    \                                        nested_paren_group.scan(/[^()]+/) do\
    \ |nested_paren_group|\n                                          nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                            nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                              nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                  nested_paren_group.scan(/[^()]+/)\
    \ do |nested_paren_group|\n                                                  \
    \  nested_paren_group.scan(/[^()]+/) do |nested_", "  paren_string.scan(/[\\(\\\
    )]+/) do |paren_char|\n    paren_char = paren_char.strip\n    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n      paren_char = paren_char.strip\n      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n        paren_char = paren_char.strip\n        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n          paren_char = paren_char.strip\n          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n            paren_char = paren_char.strip\n        \
    \    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char =\
    \ paren_char.strip\n              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                paren_char = paren_char.strip\n                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                  paren_char = paren_char.strip\n  \
    \                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              \
    \      paren_char = paren_char.strip\n                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                      paren_char = paren_char.strip\n\
    \                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        \
    \                paren_char = paren_char.strip\n                        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                          paren_char = paren_char.strip\n\
    \                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \                        paren_char = paren_char.strip\n                     \
    \       paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                       \
    \       paren_char = paren_char.strip\n                              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                paren_char = paren_char.strip\n\
    \                                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char = paren_char.strip\n           \
    \                       paren_char.scan(/[\\(\\)]+/) do |paren_char|\n       \
    \                             paren_char = paren_char.strip\n                \
    \                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          \
    \                            ", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/) do |group|\n    if group.captures.size == 1\n      group.captures.first\n\
    \    else\n      group.captures.max\n    end\n  end\nend", '  paren_string.scan(/\s*\(\s*\((?<level>\d+)\)\s*\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)',
  "  paren_string.scan(/[()]/).map { |x| x.to_i }.reduce(:+)\nend", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_count\
    \ = 0\n  paren_nesting_count_max = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n\
    \  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index\
    \ = 0\n  paren_nesting_count_max_index = 0\n  paren_nesting_count_max_index =\
    \ 0\n  paren_nesting_count_max_index = 0", "  paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n     \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = \"\"\
    \n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_level", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend",
  "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/\\(/) do\
    \ |paren_string|\n      paren_string.scan(/\\)/) do |paren_string|\n        paren_string.scan(/\\\
    )/) do |paren_string|\n          paren_string.scan(/\\)/) do |paren_string|\n\
    \            paren_string.scan(/\\)/) do |paren_string|\n              paren_string.scan(/\\\
    )/) do |paren_string|\n                paren_string.scan(/\\)/) do |paren_string|\n\
    \                  paren_string.scan(/\\)/) do |paren_string|\n              \
    \      paren_string.scan(/\\)/) do |paren_string|\n                      paren_string.scan(/\\\
    )/) do |paren_string|\n                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                          paren_string.scan(/\\)/) do |paren_string|\n      \
    \                      paren_string.scan(/\\)/) do |paren_string|\n          \
    \                    paren_string.scan(/\\)/) do |paren_string|\n            \
    \                    paren_string.scan(/\\)/) do |paren_string|\n            \
    \                      paren_string.scan(/\\)/) do |paren_string|\n          \
    \                          paren_string.scan(/\\)/) do |paren_string|\n      \
    \                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                          paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/\\)/) do |paren_string|\n\
    \                                              paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/\\)/) do\
    \ |paren_string|\n                                                    paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/\\)/) do |paren_string|\n                              \
    \                            paren_string.scan(/\\)/) do |paren_string|\n    \
    \                                                        paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/\\)/) do |paren_string|\n                        \
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                                                    paren_string.scan(/\\)/)\
    \ do |paren_string|\n                                                        \
    \                paren_string.scan(/\\)/) do |paren_string|\n                \
    \                                                ", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.length }.max\nend", "  paren_stack = []\n  paren_level = 0\n\
    \  paren_levels = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n \
    \ paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n\
    \  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs =\
    \ []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_index",
  "  paren_string.scan(/[\\(\\)]/) do |paren|\n    paren_level = 0\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      paren_level += 1\n      if paren_level > max_nested_paren_level\n\
    \        max_nested_paren_level = paren_level\n      end\n    end\n  end\n  max_nested_paren_level\n\
    end", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n\
    \  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/)\n  level = 0\n  paren_levels = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren_levels_size = []\n  paren_levels_size = []\n  paren_levels_size\
    \ = []\n  paren", "  paren_string.scan(/[^()]+/).map do |x|\n    x.to_s.split('(').map\
    \ do |y|\n      y.split(')').map do |z|\n        z.count('(') - z.count(')')\n\
    \      end\n    end.max\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.to_i }\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*\\)/) do |group|\n\
    \    group.to_a.inject(0) do |max_level, paren|\n      max_level = max_level if\
    \ paren.include?('(')\n      max_level\n    end\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\)]/) do |paren_char|\n \
    \       paren_char.scan(/[\\(\\)]/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]/) do |paren_char|\n           \
    \           paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    \
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                            paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                  paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                                    paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/[\\(\\\
    )]/) do |paren_char|\n    paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \          paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/) do |group|\n    group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_group|\n\
    \      nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_group|\n\
    \            nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_group|\n        \
    \          nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n \
    \                   nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                  nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n\
    \    paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n     \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n            paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                    paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                      paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                        paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                            paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                              paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n        \
    \                          paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do\
    \ |paren_string|\n                                    paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*/).map do |paren_string|\n                                   \
    \   paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n      \
    \                                  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ do |paren_string|\n                                          paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n                               \
    \             paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |paren_string|\n\
    \                                              paren_string.scan(", "  paren_string.scan(/[()]/).map\
    \ { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \    paren.scan(/[\\(\\)]+/) do |paren|\n      paren.scan(/[\\(\\)]+/) do |paren|\n\
    \        paren.scan(/[\\(\\)]+/) do |paren|\n          paren.scan(/[\\(\\)]+/)\
    \ do |paren|\n            paren.scan(/[\\(\\)]+/) do |paren|\n              paren.scan(/[\\\
    (\\)]+/) do |paren|\n                paren.scan(/[\\(\\)]+/) do |paren|\n    \
    \              paren.scan(/[\\(\\)]+/) do |paren|\n                    paren.scan(/[\\\
    (\\)]+/) do |paren|\n                      paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                        paren.scan(/[\\(\\)]+/) do |paren|\n                \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                            paren.scan(/[\\\
    (\\)]+/) do |paren|\n                              paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                                        paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                  paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                                    paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                      paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \  paren.scan(/[\\(\\)]+/) do |paren|\n                                      \
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \                                            paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                                paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                              \
    \                                      paren.scan(/[\\(\\)]+/) do |paren|\n",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n    paren_level = 0\n    paren_string.scan(/[\\\
    (\\)]/) do |paren_char|\n      paren_level += 1\n      paren_char\n    end\n \
    \   paren_level\n  end\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n \
    \   paren_string.scan(/[\\(\\)]+/) do |paren|\n      paren_string.scan(/[\\(\\\
    )]+/) do |paren|\n        paren_string.scan(/[\\(\\)]+/) do |paren|\n        \
    \  paren_string.scan(/[\\(\\)]+/) do |paren|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n              paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren|\n                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren|\n                    paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                      paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren|\n         \
    \                 paren_string.scan(/[\\(\\)]+/) do |paren|\n                \
    \            paren_string.scan(/[\\(\\)]+/) do |paren|\n                     \
    \         paren_string.scan(/[\\(\\)]+/) do |paren|\n                        \
    \        paren_string.scan(/[\\(\\)]+/) do |paren|\n                         \
    \         paren_string.scan(/[\\(\\)]+/) do |paren|\n                        \
    \            paren_string.scan(/[\\(\\)]+/) do |paren|\n                     \
    \                 paren_string.scan(/[\\(\\)]+/) do |paren|\n                \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren|\n         \
    \                                 paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \  paren_string.scan(/[\\(\\)]+/) do |paren|\n                               \
    \                             paren_string.scan(/[\\(\\)]+/) do |paren|\n    \
    \                                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \        paren_string.scan(/[\\(\\)]+/) do |paren|\n", "  paren_stack = []\n \
    \ paren_level = 0\n  paren_levels = []\n  paren_levels_count = 0\n  paren_levels_max\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index\
    \ = 0\n  paren_levels_max_count = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count\
    \ = 0\n  paren_levels_max_index = 0\n  paren_levels_max_count = 0\n  paren_",
  "  paren_string.scan(/[\\(\\)]/).map do |x|\n    x.to_i if x.to_i > 0\n  end.reduce(:+)\n\
    end", "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[()]/).map { |x| x.to_i\
    \ }.max\nend", "  paren_string.scan(/[()]/) do |char|\n    if paren_string.peek(/[()]/)\n\
    \      paren_string.scan(/[()]/) do |char|\n        paren_string.scan(/[()]/)\
    \ do |char|\n          paren_string.scan(/[()]/) do |char|\n            paren_string.scan(/[()]/)\
    \ do |char|\n              paren_string.scan(/[()]/) do |char|\n             \
    \   paren_string.scan(/[()]/) do |char|\n                  paren_string.scan(/[()]/)\
    \ do |char|\n                    paren_string.scan(/[()]/) do |char|\n       \
    \               paren_string.scan(/[()]/) do |char|\n                        paren_string.scan(/[()]/)\
    \ do |char|\n                          paren_string.scan(/[()]/) do |char|\n \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                                      paren_string.scan(/[()]/) do |char|\n \
    \                                                   paren_string.scan(/[()]/)\
    \ do |char|\n                                                      paren_string.scan(/[()]/)\
    \ do |char|\n                                                        paren_string.scan(/[()]/)\
    \ do |char|\n                                                          paren_string.scan(/[()]/)\
    \ do |char|\n                                                            paren_string.scan(/[()]/)\
    \ do |char|\n                                                              paren_string.scan(/[()]/)\
    \ do |char|\n                                                                paren_string.scan(/[()]/)\
    \ do |char|\n                                                                \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \                               paren_string.scan(/[()]/) do |char|\n        \
    \                                                            paren_string", " \
    \ paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n \
    \ paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting = 0\n\
    \  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }.inject(0) { |sum, el|\
    \ sum + el }\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/) do |group|\n    group.each\
    \ do |item|\n      item.gsub!(/\\s+/, \"\")\n      item.gsub!(/\\(/, \"\")\n \
    \     item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\\
    )/, \"\")\n      item.gsub!(/\\)/, \"\")\n      item.gsub!(/\\)/, \"\")\n    \
    \  item.gsub!(/\\)/", "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n      paren_string.scan(/[^()]+/) do |paren_string|\n   \
    \     paren_string.scan(/[^()]+/) do |paren_string|\n          paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n            paren_string.scan(/[^()]+/) do |paren_string|\n\
    \              paren_string.scan(/[^()]+/) do |paren_string|\n               \
    \ paren_string.scan(/[^()]+/) do |paren_string|\n                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                    paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                      paren_string.scan(/[^()]+/) do |paren_string|\n       \
    \                 paren_string.scan(/[^()]+/) do |paren_string|\n            \
    \              paren_string.scan(/[^()]+/) do |paren_string|\n               \
    \             paren_string.scan(/[^()]+/) do |paren_string|\n                \
    \              paren_string.scan(/[^()]+/) do |paren_string|\n               \
    \                 paren_string.scan(/[^()]+/) do |paren_string|\n            \
    \                      paren_string.scan(/[^()]+/) do |paren_string|\n       \
    \                             paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                              paren_string.scan(/[^()]+/) do\
    \ |paren_string|\n                                                paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[^()]+/) do |paren_string|\n                           \
    \                                 paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                                              paren", "  paren_string.scan(/\\\
    s*\\(\\s*\\((?<paren_level>\\d+)\\)\\s*\\)\\s*(?<paren_level>\\d+)\\s*\\)/) do\
    \ |match|\n    paren_levels[match[:paren_level].to_i] += 1\n  end\n  paren_levels\n\
    end", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/) do |group|\n    if group[1]\n\
    \      parse_nested_parens(group[1])\n    else\n      parse_nested_parens(group[2])\n\
    \    end\n  end\nend", "  paren_string = paren_string.strip\n  paren_string.gsub!(/\\\
    s+/, \"\")\n  paren_string.gsub!(/\\(/, \"(\")\n  paren_string.gsub!(/\\)/, \"\
    )\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n\
    \  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\\
    )/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \"\
    )\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n\
    \  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\\
    )/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \"\
    )\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n\
    \  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\\
    )/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \"\
    )\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n\
    \  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\\
    )/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \"\
    )\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n\
    \  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\\
    )/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \"\
    )\")\n  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")\")\n\
    \  paren_string.gsub!(/\\)/, \")\")\n  paren_string.gsub!(/\\)/, \")", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n    paren_level\
    \ = 0\n    paren_string.scan(/[\\(\\)]+/) do |paren|\n      paren_level += 1\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren|\n        paren_level += 1\n \
    \       paren_string.scan(/[\\(\\)]+/) do |paren|\n          paren_level += 1\n\
    \        end\n      end\n    end\n  end\nend", "  paren_string.scan(/[^()]+/)\n\
    \  max_level = 0\n  paren_level = 0\n  paren_nesting = []\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  ", " \
    \ paren_string.scan(/[\\(\\)]/).map do |char|\n    char = char.downcase\n    case\
    \ char\n    when \"(\"\n      1\n    when \")\"\n      -1\n    else\n      0\n\
    \    end\n  end.reduce(:+)\nend", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\\
    )\\s*\\)/) do |group|\n    group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_group|\n\
    \      nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do\
    \ |nested_nested_nested_nested_group|\n            nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_group|\n\
    \              nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\\
    s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n               \
    \ nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\\
    )/) do |nested_nested_nested_nested_nested_nested_nested_group|\n            \
    \      nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n     \
    \               nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan",
  "  paren_string.scan(/[()]/) do |paren_char|\n    if paren_char == \"(\"\n     \
    \ paren_level += 1 \n    elsif paren_char == \")\"\n      paren_level -= 1 \n\
    \    end\n  end\n  paren_level\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*([^\\(\\)]+)\\\
    s*\\)/).map do |group|\n    group.to_i if group.to_i > 0\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]/)\n  paren_levels = paren_string.scan(/[\\(\\)]/).count\n  paren_levels\
    \ -= 1 if paren_levels == 0\n  paren_levels -= 1 if paren_levels == 1\n  paren_levels\
    \ -= 1 if paren_levels == 2\n  paren_levels -= 1 if paren_levels == 3\n  paren_levels\
    \ -= 1 if paren_levels == 4\n  paren_levels -= 1 if paren_levels == 5\n  paren_levels\
    \ -= 1 if paren_levels == 6\n  paren_levels -= 1 if paren_levels == 7\n  paren_levels\
    \ -= 1 if paren_levels == 8\n  paren_levels -= 1 if paren_levels == 9\n  paren_levels\
    \ -= 1 if paren_levels == 10\n  paren_levels -= 1 if paren_levels == 11\n  paren_levels\
    \ -= 1 if paren_levels == 12\n  paren_levels -= 1 if paren_levels == 13\n  paren_levels\
    \ -= 1 if paren_levels == 14\n  paren_levels -= 1 if paren_levels == 15\n  paren_levels\
    \ -= 1 if paren_levels == 16\n  paren_levels -= 1 if paren_levels == 17\n  paren_levels\
    \ -= 1 if paren_levels == 18\n  paren_levels -= 1 if paren_levels == 19\n  paren_levels\
    \ -= 1 if paren_levels == 20\n  paren_levels -= 1 if paren_levels == 21\n  paren_levels\
    \ -= 1 if paren_levels == 22\n  paren_levels -= 1 if paren_levels == 23\n  paren_levels\
    \ -= 1 if paren_levels == 24\n  paren_levels -= 1 if paren_levels == 25\n  paren_levels\
    \ -= 1 if paren_levels == 26\n  paren_levels -= 1 if paren_levels == 27\n  paren_levels\
    \ -= 1 if paren_levels == 28\n  paren_levels -= 1 if paren_levels == 29\n  paren_levels\
    \ -= 1 if paren_levels == 30\n  paren_levels -= 1 if paren_levels == 31\n  paren_levels\
    \ -= 1 if paren_levels == 32\n  paren_levels -= 1 if paren_levels == 33\n  paren_levels\
    \ -= 1 if paren_levels == 34\n  paren_levels -= 1 if paren_levels == 35\n  paren_levels\
    \ -= 1 if paren_levels == 36\n", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nest", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          \
    \          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  \
    \    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                          paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                            paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                              paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                  paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                                    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                      paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                            paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \    paren_string.scan(/[()]/).map do |paren_string|\n      paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n        paren_string.scan(/[()]/).map do |paren_string|\n\
    \          paren_string.scan(/[^()]+/).map do |paren_string|\n            paren_string.scan(/[()]/).map\
    \ do |paren_string|\n              paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \                paren_string.scan(/[()]/).map do |paren_string|\n           \
    \       paren_string.scan(/[^()]+/).map do |paren_string|\n                  \
    \  paren_string.scan(/[()]/).map do |paren_string|\n                      paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                        paren_string.scan(/[()]/).map do\
    \ |paren_string|\n                          paren_string.scan(/[^()]+/).map do\
    \ |paren_string|\n                            paren_string.scan(/[()]/).map do\
    \ |paren_string|\n                              paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                  paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                      paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                          paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                            paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                              paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                  paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                      paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[^()]+/).map do |paren_string|\n                       \
    \                                     paren_string.", "  paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n          paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n            paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n        \
    \        paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n              \
    \    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                    \
    \  paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                    \
    \    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                  \
    \        paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n              \
    \              paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n        \
    \                      paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                             \
    \ paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                     \
    \                           paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                                  paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                             \
    \         paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n             \
    \                                           paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[\\", "  paren_string.scan(/[^()]+/).map { |x| x.length\
    \ }.max\nend", "  paren_string.scan(/[^()]+/).map { |x| x.length }.max\nend",
  '  paren_string.scan(/\s*\(\s*\((?<level>\d+)\)\s*\)\s*|\s*\(\s*\((?<level>\d+)\)\s*\)\s*\((?<level>\d+)\)\s*|\s*\(\s*\((?<level>\d+)\)\s*\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level>\d+)\)\s*\((?<level',
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n          \
    \  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n            \
    \  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n            \
    \    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n          \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_string.scan(/[^()]+/).map { |s| s.to_i }.reduce(:+)\n\
    end", "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_count = 0\n  paren_nesting_paren_level\
    \ = 0\n  paren_nesting_paren_count = 0\n  paren_nesting_paren_nesting_level =\
    \ 0\n  paren_nesting_paren_nesting_count = 0\n  paren_nesting_paren_nesting_paren_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_count = 0\n  paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_count = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_count = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_count = 0\n \
    \ paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_count\
    \ = 0\n  paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level\
    \ = 0\n  paren_nesting_paren_nesting_paren_nest", "  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_groups = []\n  paren_group = []\n  paren_group_level\
    \ = 0\n  paren_group_nesting = 0\n  paren_group_groups = []\n  paren_group_group\
    \ = []\n  paren_group_group_level = 0\n  paren_group_group_nesting = 0\n  paren_group_group_groups\
    \ = []\n  paren_group_group_group = []\n  paren_group_group_group_level = 0\n\
    \  paren_group_group_group_nesting = 0\n  paren_group_group_group_groups = []\n\
    \  paren_group_group_group_group = []\n  paren_group_group_group_group_level =\
    \ 0\n  paren_group_group_group_group_nesting = 0\n  paren_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group = []\n  paren_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren_group_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group_group = []\n  paren_group_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren_group_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group_group = []\n  paren_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren_group_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group_group = []\n  paren_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren_group_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group_group = []\n  paren_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren_group_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group_group = []\n  paren_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren_group_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group_group = []\n  paren_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren_group_group_group_group_group_groups\
    \ = []\n  paren_group_group_group_group_group_group = []\n  paren_group_group_group_group_group_level\
    \ = 0\n  paren_group_group_group_group_group_nesting = 0\n  paren", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |group|\n    group.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |inner_group|\n      inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_group|\n\
    \        inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_group|\n\
    \          inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_group|\n\
    \            inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |inner_inner_inner_inner_inner_group|\n              inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_group|\n  \
    \              inner_inner_inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_group|\n           \
    \       inner_inner_inner_inner_inner_inner_inner_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_group|\n     \
    \               inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                      inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                        inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                          inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                            inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                              inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group|\n\
    \                                inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map ", "  paren_string.scan(/[()]/) do |paren_char|\n \
    \   paren_char = paren_char.downcase\n    if paren_char == '('\n      paren_level\
    \ = 1\n    elsif paren_char == ')'\n      paren_level = paren_level - 1\n    end\n\
    \    if paren_level > 0\n      paren_level\n    else\n      0\n    end\n  end\n\
    end", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren", '  paren_string.scan(/\s*\(\s*\(([^\(\)]*)\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)\s*\)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^\(\)]*)',
  "  paren_string.scan(/[^()]+/) do |paren_group|\n    paren_group.scan(/\\(/) do\
    \ |paren_level|\n      paren_level += 1 unless paren_level == 0\n      paren_level\n\
    \    end\n  end\nend", "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/[()]/)\
    \ do |paren_string|\n      paren_string.scan(/[()]/) do |paren_string|\n     \
    \   paren_string.scan(/[()]/) do |paren_string|\n          paren_string.scan(/[()]/)\
    \ do |paren_string|\n            paren_string.scan(/[()]/) do |paren_string|\n\
    \              paren_string.scan(/[()]/) do |paren_string|\n                paren_string.scan(/[()]/)\
    \ do |paren_string|\n                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                    paren_string.scan(/[()]/) do |paren_string|\n           \
    \           paren_string.scan(/[()]/) do |paren_string|\n                    \
    \    paren_string.scan(/[()]/) do |paren_string|\n                          paren_string.scan(/[()]/)\
    \ do |paren_string|\n                            paren_string.scan(/[()]/) do\
    \ |paren_string|\n                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                paren_string.scan(/[()]/) do |paren_string|\n\
    \                                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                                    paren_string.scan(/[()]/) do |paren_string|\n\
    \                                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n    paren_char\
    \ = paren_char.chr.downcase\n    if paren_char == '('\n      paren_level = 1\n\
    \    elsif paren_char == ')'\n      paren_level = paren_level - 1\n    end\n \
    \   if paren_level > 0\n      paren_level\n    else\n      0\n    end\n  end\n\
    end", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/) do |paren|\n    level =\
    \ 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      level += 1\n      paren_string.scan(/[\\\
    (\\)]/) do |paren|\n        level += 1\n      end\n    end\n    level\n  end\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n   \
    \ if group.captures.size == 1\n      group.captures.first\n    else\n      group.captures.map\
    \ { |i| i.to_i }\n    end\n  end\nend", "  paren_stack = []\n  paren_level = 0\n\
    \  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting = 0\n\
    \  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting = 0\n  paren_nesting\
    \ = 0\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n\
    \  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting_level = 0\n\
    \  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nest",
  "  paren_string.scan(/[^()]+/).map { |s| s.to_i }.reduce(:+)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }\nend", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n   \
    \ paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \     paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*|([^()]+)/) do |group|\n    if group[1]\n      parse_nested_parens(group[1])\n\
    \    else\n      parse_nested_parens(group[2])\n    end\n  end\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\)]*)\\)\\s*\\)/) do |group|\n\
    \    if group[1]\n      parse_nested_parens(group[1])\n    else\n      parse_nested_parens(group[2])\n\
    \    end\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n\
    \    paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n     \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n        paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n          paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n            paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n              paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                    paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                      paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                        paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                          paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                            paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                              paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                               \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n        \
    \                          paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do\
    \ |paren_string|\n                                    paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/).map do |paren_string|\n                                   \
    \   paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n      \
    \                                  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n                                          paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                               \
    \             paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n\
    \                                              paren_string.scan(", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map\
    \ do |group|\n    group.to_s.scan(/\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map\
    \ { |nested_group| nested_group.to_s.size }.reduce(:+)\n  end\nend", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_level",
  "  paren_string.scan(/[\\(\\)]/).map { |x| x.length }.max\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index2 = 0\n  paren_nesting_level_max_index3\
    \ = 0\n  paren_nesting_level_max_index4 = 0\n  paren_nesting_level_max_index5\
    \ = 0\n  paren_nesting_level_max_index6 = 0\n  paren_nesting_level_max_index7\
    \ = 0\n  paren_nesting_level_max_index8 = 0\n  paren_nesting_level_max_index9\
    \ = 0\n  paren_nesting_level_max_index10 = 0\n  paren_nesting_level_max_index11\
    \ = 0\n  paren_nesting_level_max_index12 = 0\n  paren_nesting_level_max_index13\
    \ = 0\n  paren_nesting_level_max_index14 = 0\n  paren_nesting_level_max_index15\
    \ = 0\n  paren_nesting_level_max_index16 = 0\n  paren_nesting_level_max_index17\
    \ = 0\n  paren_nesting_level_max_index18 = 0\n  paren_nesting_level_max_index19\
    \ = 0\n  paren_nesting_level_max_index20 = 0\n  paren_nesting_level_max_index21\
    \ = 0\n  paren_nesting_level_max_index22 = 0\n  paren_nesting_level_max_index23\
    \ = 0\n  paren_nesting_level_max_index24 = 0\n  paren_nesting_level_max_index25\
    \ = 0\n  paren_nesting_level_max_index26 = 0\n  paren_nesting_level_max_index27\
    \ = 0\n  paren_nesting_level_max_index28 = 0\n  paren_nesting_level_max_index29\
    \ = 0\n  paren_nesting_level_max_index30 = 0\n  paren_nesting_level_max_index31\
    \ = 0\n  paren_nesting_level_max_index32 = 0\n  paren_nesting_level_max_index33\
    \ = 0\n  paren_nesting_level_max_index34 = 0\n  paren_nesting_level_max_index35\
    \ = 0\n  paren_nesting_level_max_index36 = 0\n  paren_nesting_level_max_index37\
    \ = 0\n  paren_nesting_level_max_index38 = 0\n  paren_nesting_level_max_index39\
    \ = 0\n  paren_nesting_level_max_index40 = 0\n  paren_nesting_level_max_index41\
    \ = 0\n  paren_nesting_level_max_index42 = 0\n  paren_nesting_level_max_index43\
    \ = 0\n  paren_nest", "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n   \
    \ paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n        nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n  \
    \            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n  \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do\
    \ |group|\n    group.captures.map { |x| x.to_i }.max\n  end\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/).map\
    \ do |group|\n    if group.captures.size == 1\n      group.captures.first\n  \
    \  else\n      group.captures.map { |g| g.to_i }\n    end\n  end\nend", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/[()]/)\
    \ do |paren_string|\n      paren_string.scan(/[()]/) do |paren_string|\n     \
    \   paren_string.scan(/[()]/) do |paren_string|\n          paren_string.scan(/[()]/)\
    \ do |paren_string|\n            paren_string.scan(/[()]/) do |paren_string|\n\
    \              paren_string.scan(/[()]/) do |paren_string|\n                paren_string.scan(/[()]/)\
    \ do |paren_string|\n                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                    paren_string.scan(/[()]/) do |paren_string|\n           \
    \           paren_string.scan(/[()]/) do |paren_string|\n                    \
    \    paren_string.scan(/[()]/) do |paren_string|\n                          paren_string.scan(/[()]/)\
    \ do |paren_string|\n                            paren_string.scan(/[()]/) do\
    \ |paren_string|\n                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                paren_string.scan(/[()]/) do |paren_string|\n\
    \                                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                                    paren_string.scan(/[()]/) do |paren_string|\n\
    \                                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/[()]/)\
    \ do |char|\n    paren_stack << char\n  end\n  paren_stack\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ << match[:content]\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\\
    )\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]] << match[:content]\n\
    \  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] << match[:content]\n  end\n  paren_string.scan(/\\\
    s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ << match[:content]\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\\
    )\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]] << match[:content]\n\
    \  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] << match[:content]\n  end\n  paren_string.scan(/\\\
    s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ << match[:content]\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\\
    )\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]] << match[:content]\n\
    \  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] << match[:content]\n  end\n  paren_string.scan(/\\\
    s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]] ",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]*)\\s*\\)\\s*\\)/) do |group|\n    group.captures.map { |x| x.to_i }\n  end\n\
    end", "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\\
    )\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/) do |group|\n    if group.captures.size\
    \ == 1\n      group.captures.first\n    else\n      group.captures.inject(0) do\
    \ |max_level, paren|\n        if paren.start_with?(\"(\")\n          max_level\n\
    \        else\n          max_level + 1\n        end\n      end\n    end\n  end\n\
    end", "  paren_string.scan(/[()]/) do |paren|\n    level = 0\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren|\n\
    \      level -= 1\n    end\n    paren\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.size }.max\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\\
    (\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/) do |group|\n   \
    \ if group.captures.size == 1\n      group.captures.first\n    else\n      group.captures.map\
    \ { |parens| parens.to_i }\n    end\n  end\nend", "  paren_string.scan(/[\\(\\\
    )]+/) do |paren_char|\n    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n            \
    \        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                        paren_char.scan(/[\\(\\)]+/)\
    \ do |paren_char|\n                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", " \
    \ paren_string.scan(/[()]/) do |paren|\n    paren_level = 0\n    paren_string.scan(/[()]/)\
    \ do |paren|\n      paren_level += 1\n      paren_string.scan(/[()]/) do |paren|\n\
    \        paren_level += 1\n        paren_string.scan(/[()]/) do |paren|\n    \
    \      paren_level += 1\n        end\n      end\n    end\n    paren_level\n  end\n\
    end", "  paren_string.scan(/[\\(\\)]/).map { |x| x.to_i }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size == 1\n\
    \      group.captures.first\n    else\n      group.captures.map { |i| i.to_i }\n\
    \    end\n  end\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char\
    \ = paren_char.downcase\n    if paren_char == \"(\"\n      paren_stack << paren_char\n\
    \    elsif paren_char == \")\"\n      paren_stack.pop\n    end\n  end\n  paren_stack.size\n\
    end", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]/) do |paren|\n    paren_level = 0\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      paren_level += 1\n      paren_string.scan(/[\\(\\)]/)\
    \ do |paren|\n        paren_level += 1\n      end\n    end\n    paren_level\n\
    \  end\nend", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren_level>\\d+)\\)\\s*\\\
    )\\s*(?<content>[^()]+)/) do |paren_level, content|\n    paren_levels[paren_level]\
    \ += 1\n  end\n  paren_levels\nend", "  paren_stack = []\n  paren_stack_size =\
    \ -1\n  paren_stack_depth = 0\n  paren_stack_level = 0\n  paren_stack_max_level\
    \ = 0\n  paren_stack_max_depth = 0\n  paren_stack_max_level_size = 0\n  paren_stack_max_depth_size\
    \ = 0\n  paren_stack_max_level_nesting = 0\n  paren_stack_max_depth_nesting =\
    \ 0\n  paren_stack_max_level_nesting_size = 0\n  paren_stack_max_depth_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting = 0\n  paren_stack_max_depth_nesting_nesting\
    \ = 0\n  paren_stack_max_level_nesting_nesting_size = 0\n  paren_stack_max_depth_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting = 0\n  paren_stack_max_depth_nesting_nesting_nesting\
    \ = 0\n  paren_stack_max_level_nesting_nesting_size = 0\n  paren_stack_max_depth_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_level_nesting_nesting_nesting_size = 0\n  paren_stack_max_level_nesting_nesting_nesting_size\
    \ = 0\n  paren_stack_max_", "  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n\
    \  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n\
    \  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n\
    \  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n\
    \  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n\
    \  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n\
    \  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n\
    \  paren_string.scan(/[()]/) while paren_string.peek(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.peek(", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/) do\
    \ |paren_group|\n    paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |paren_group|\n\
    \      paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |paren_group|\n        paren_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |paren_group|\n          paren_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |paren_group|\n            paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/)\
    \ do |paren_group|\n              paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do\
    \ |paren_group|\n                paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do\
    \ |paren_group|\n                  paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/)\
    \ do |paren_group|\n                    paren_group.scan(/\\s*\\(([^()]+)\\)\\\
    s*/) do |paren_group|\n                      paren_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |paren_group|\n                        paren_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |paren_group|\n                          paren_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |paren_group|\n                            paren_group.scan(/\\s*\\\
    (([^()]+)\\)\\s*/) do |paren_group|\n                              paren_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |paren_group|\n                                paren_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |paren_group|\n                                  paren_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |paren_group|\n                                    paren_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |paren_group|\n                                    \
    \  paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |paren_group|\n             \
    \                           paren_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |paren_group|\n\
    \                                          paren_group.scan(/\\s*\\(([^()]+)\\\
    )\\s*/) do |paren_group|\n                                            paren_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |paren_group|\n                                    \
    \          paren_group.scan(", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).map\
    \ do |group|\n    group.to_s.count('(') - group.to_s.count(')')\n  end\nend\n\
    </code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ inside parentheses, e.g. `((()))` returns `[1, 1, 1]`\n<|/ c |>\n<| c |>\n:\
    \ I added a solution for nested parentheses.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ for nested parentheses.\n<|/ c |>\n<| c |>\n: I added a solution for nested\
    \ parentheses.\n<|/ c |>\n<| c |>\n: I added a solution for nested parentheses.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\nI suggest you to use this regex:\n<code>\n\
    /\\(\\s*\\((?!\\()[^()]+\\)\\s*\\)\\s*\\)/\n</code>\nIt will match all nested\
    \ parentheses.\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ inside parentheses, e.g. `((()))` returns `[1, 1, 1]`\n<|/ c |>\n<| c |>\n:\
    \ I added a solution for nested parentheses.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    /\\(\\s*\\((?!\\()[^()]+\\)\\s*\\)\\s*\\)/\n</code>\nThis regex will match all\
    \ nested parentheses.\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for\
    \ nested parentheses inside parentheses, e.g. `((()))` returns `[1, 1, 1]`\n<|/\
    \ c |>\n<| a tags=ruby,regex |>\n<code>\n/\\(\\s*\\((?!\\()[^()]+\\)\\s*\\)\\\
    s*\\)/\n</code>\nThis regex will match all nested parentheses.\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n/\\(\\s*\\((?!\\()[^()]+\\)\\s*\\)\\s*\\)/\n</code>\n\
    This regex will match all nested parentheses.\n<|/ a tags=ruby,regex |>\n<| a\
    \ tags=ruby,regex |>\n<code>\n/\\(\\s*\\((?!\\()[^()]+\\)\\s*\\)\\s*\\)/\n</code>\n\
    This regex will match all nested parentheses.\n<|/ a dscore=1 |>\n", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n    paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |paren_string|\n      paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n        paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do\
    \ |paren_string|\n          paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do\
    \ |paren_string|\n            paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n              paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n                paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n                  paren_string.scan(/\\s*\\(([^()]+)\\)\\\
    s*/).map do |paren_string|\n                    paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |paren_string|\n                      paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/).map do |paren_string|\n                        paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                          paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                            paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                              paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                               \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n        \
    \                          paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do\
    \ |paren_string|\n                                    paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/).map do |paren_string|\n                                   \
    \   paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n      \
    \                                  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map\
    \ do |paren_string|\n                                          paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n                               \
    \             paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |paren_string|\n\
    \                                              paren_string.scan(", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/)\
    \ do |group|\n    if group[1]\n      max_level = 0\n      group[1].scan(/\\s*\\\
    (\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/) do |nested_group|\n        if nested_group[1]\n\
    \          max_level = max(max_level, parse_nested_parens(nested_group[1]).max)\n\
    \        else\n          max_level = max(max_level, parse_nested_parens(nested_group[0]).max)\n\
    \        end\n      end\n      max_level\n    else\n      parse_nested_parens(group[0]).max\n\
    \    end\n  end\nend", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/", "  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_level", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n    paren_string.scan(/\\(/) do |paren_string|\n      paren_string.scan(/\\\
    )/) do |paren_string|\n        paren_string.scan(/\\)/) do |paren_string|\n  \
    \        paren_string.scan(/\\)/) do |paren_string|\n            paren_string.scan(/\\\
    )/) do |paren_string|\n              paren_string.scan(/\\)/) do |paren_string|\n\
    \                paren_string.scan(/\\)/) do |paren_string|\n                \
    \  paren_string.scan(/\\)/) do |paren_string|\n                    paren_string.scan(/\\\
    )/) do |paren_string|\n                      paren_string.scan(/\\)/) do |paren_string|\n\
    \                        paren_string.scan(/\\)/) do |paren_string|\n        \
    \                  paren_string.scan(/\\)/) do |paren_string|\n              \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \            paren_string.scan(/\\)/) do |paren_string|\n                    \
    \            paren_string.scan(/\\)/) do |paren_string|\n                    \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                  paren_string.scan(/\\)/) do |paren_string|\n              \
    \                        paren_string.scan(/\\)/) do |paren_string|\n        \
    \                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                          paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/\\)/) do |paren_string|\n\
    \                                              paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/\\)/) do\
    \ |paren_string|\n                                                    paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/\\)/) do |paren_string|\n                              \
    \                            paren_string.scan(/\\)/) do |paren_string|\n    \
    \                                                        paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/\\)/) do |paren_string|\n                        \
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                                                  paren_string.scan(/\\)/) do\
    \ |paren_string|\n                                                           \
    \         paren_string.scan(/\\)/) do |paren_string|\n                       \
    \         ", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size\
    \ == 1\n      group.captures.first\n    else\n      group.captures.max\n    end\n\
    \  end\nend", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_stack =\
    \ []\n  paren_nesting_levels = []\n  paren_nesting_levels_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren_nesting_levels_index_min_index = 0\n  paren_nesting_levels_index_max\
    \ = 0\n  paren_nesting_levels_index_max_index = 0\n  paren_nesting_levels_index_min\
    \ = 0\n  paren", "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n    \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = \"\"\n  paren_stack_string = paren_string\n  paren_stack_string.scan(/[^()]+/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n  paren_stack_string.scan(/[()]/)\n\
    \  paren_stack_string.", "  paren_string.scan(/[^()]+/)\n  level = 0\n  paren_stack\
    \ = []\n  paren_stack.push paren_string.count(\"(\")\n  paren_stack.push paren_string.count(\"\
    )\")\n  paren_stack.push paren_string.count(\"{\")\n  paren_stack.push paren_string.count(\"\
    }\")\n  paren_stack.push paren_string.count(\"[\")\n  paren_stack.push paren_string.count(\"\
    ]\")\n  paren_stack.push paren_string.count(\"(\")\n  paren_stack.push paren_string.count(\"\
    )\")\n  paren_stack.push paren_string.count(\"{\")\n  paren_stack.push paren_string.count(\"\
    }\")\n  paren_stack.push paren_string.count(\"[\")\n  paren_stack.push paren_string.count(\"\
    ]\")\n  paren_stack.push paren_string.count(\"(\")\n  paren_stack.push paren_string.count(\"\
    )\")\n  paren_stack.push paren_string.count(\"{\")\n  paren_stack.push paren_string.count(\"\
    }\")\n  paren_stack.push paren_string.count(\"[\")\n  paren_stack.push paren_string.count(\"\
    ]\")\n  paren_stack.push paren_string.count(\"(\")\n  paren_stack.push paren_string.count(\"\
    )\")\n  paren_stack.push paren_string.count(\"{\")\n  paren_stack.push paren_string.count(\"\
    }\")\n  paren_stack.push paren_string.count(\"[\")\n  paren_stack.push paren_string.count(\"\
    ]\")\n  paren_stack.push paren_string.count(\"(\")\n  paren_stack.push paren_string.count(\"\
    )\")\n  paren_stack.push paren_string.count(\"{\")\n  paren_stack.push paren_string.count(\"\
    }\")\n  paren_stack.push paren_string.count(\"[\")\n  paren_stack.push paren_string.count(\"\
    ]\")\n  paren_stack.push paren_string.count(\"(\")\n  paren_stack.push paren_string.count(\"\
    )\")\n  paren_stack.push paren_string.count(\"{\")\n  paren_stack.push paren_string.count(\"\
    }\")\n  paren_stack.push paren_string.count(\"[\")\n  paren_stack.push paren_string.count(\"\
    ]\")\n  paren_stack.push paren_string.count(\"(\")\n  paren_stack.push paren_string.count(\"\
    )\")\n  paren_stack.push paren_string.count(\"{\")\n  ", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_max\
    \ = 0\n  paren_nesting_max_index = 0\n  paren_nesting_max_index2 = 0\n  paren_nesting_max_index3\
    \ = 0\n  paren_nesting_max_index4 = 0\n  paren_nesting_max_index5 = 0\n  paren_nesting_max_index6\
    \ = 0\n  paren_nesting_max_index7 = 0\n  paren_nesting_max_index8 = 0\n  paren_nesting_max_index9\
    \ = 0\n  paren_nesting_max_index10 = 0\n  paren_nesting_max_index11 = 0\n  paren_nesting_max_index12\
    \ = 0\n  paren_nesting_max_index13 = 0\n  paren_nesting_max_index14 = 0\n  paren_nesting_max_index15\
    \ = 0\n  paren_nesting_max_index16 = 0\n  paren_nesting_max_index17 = 0\n  paren_nesting_max_index18\
    \ = 0\n  paren_nesting_max_index19 = 0\n  paren_nesting_max_index20 = 0\n  paren_nesting_max_index21\
    \ = 0\n  paren_nesting_max_index22 = 0\n  paren_nesting_max_index23 = 0\n  paren_nesting_max_index24\
    \ = 0\n  paren_nesting_max_index25 = 0\n  paren_nesting_max_index26 = 0\n  paren_nesting_max_index27\
    \ = 0\n  paren_nesting_max_index28 = 0\n  paren_nesting_max_index29 = 0\n  paren_nesting_max_index30\
    \ = 0\n  paren_nesting_max_index31 = 0\n  paren_nesting_max_index32 = 0\n  paren_nesting_max_index33\
    \ = 0\n  paren_nesting_max_index34 = 0\n  paren_nesting_max_index35 = 0\n  paren_nesting_max_index36\
    \ = 0\n  paren_nesting_max_index37 = 0\n  paren_nesting_max_index38 = 0\n  paren_nesting_max_index39\
    \ = 0\n  paren_nesting_max_index40 = 0\n  paren_nesting_max_index41 = 0\n  paren_nesting_max_index42\
    \ = 0\n  paren_nesting_max_index43 = 0\n  paren_nesting_max_index44 = 0\n  paren_nesting_max_index45\
    \ = 0\n  paren_nesting_max_index46 = 0\n  paren_nesting_max_index47 = 0\n  paren_nesting_max_index",
  "  paren_string.scan(/[\\(\\)]+/) do |paren|\n    paren.scan(/[\\(\\)]+/) do |nested_paren|\n\
    \      nested_paren.scan(/[\\(\\)]+/) do |nested_paren_again|\n        nested_paren_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again|\n          nested_paren_again_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again_again|\n            nested_paren_again_again_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again_again_again|\n              nested_paren_again_again_again_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again_again_again_again|\n                nested_paren_again_again_again_again_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again_again_again_again_again|\n             \
    \     nested_paren_again_again_again_again_again_again.scan(/[\\(\\)]+/) do |nested_paren_again_again_again_again_again_again_again|\n\
    \                    nested_paren_again_again_again_again_again_again_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again_again_again_again_again_again_again|\n \
    \                     nested_paren_again_again_again_again_again_again_again_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again_again_again_again_again_again_again_again|\n\
    \                        nested_paren_again_again_again_again_again_again_again_again_again.scan(/[\\\
    (\\)]+/) do |nested_paren_again_again_again_again_again_again_again_again_again_again|\n\
    \                          nested_paren_again_again_again_again_again_again_again_again_again_again_again.scan(/",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = \"\"\
    \n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_level", "  paren_string.scan(/[\\\
    (\\)]/) do |paren_char|\n    paren_char.scan(/[\\(\\)]/) do |paren_char|\n   \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \            paren_char.scan(/[\\(\\)]/) do |paren_char|\n              paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n             \
    \       paren_char.scan(/[\\(\\)]/) do |paren_char|\n                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n   \
    \                           paren_char.scan(/[\\(\\)]/) do |paren_char|\n    \
    \                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n   \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                    paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_levels = []\n  paren_levels_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_levels_strings_count = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_min", "  paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n     \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string.any?\n  paren_string.scan(/[()]/) while paren_string.any?\n\
    \  paren_string.scan(/[()]/) while paren_string.any?\n  paren_string.scan(/[()]/)\
    \ while paren_string", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_string\
    \ = \"\"\n  paren_stack_level = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_size = 0\n  paren_stack_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max = 0\n  paren_stack_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_size = 0\n  paren_stack_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max = 0\n  paren_stack_level_max_string_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren", "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level\
    \ = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 10\n  paren_nesting_level_max_str = paren_nesting_level_max.to_s\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_float = paren_nesting_level_max.to_f\n\
    \  paren_nesting_level_max_float = paren_nesting_level_max.to_f\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int\
    \ = paren_nesting_level_max.to_i\n  paren_nesting_level_max_int = paren_nesting_level_max.to_i\n\
    \  paren_nesting_level_", "  paren_string.scan(/[^()]+/).map { |x| x.length }.max\n\
    end", "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_stack = []\n  paren_stack_size = -1\n\
    \  paren_stack_count = 0\n  paren_stack_string = \"\"\n  paren_stack_level = 0\n\
    \  paren_stack_max_level = 0\n  paren_stack_max_level_count = 0\n  paren_stack_max_level_string\
    \ = \"\"\n  paren_stack_max_level_level = 0\n  paren_stack_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_count = 0\n  paren_stack_max_level_max_level_string\
    \ = \"\"\n  paren_stack_max_level_max_level_level = 0\n  paren_stack_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_count = 0\n  paren_stack_max_level_max_level_max_level_string\
    \ = \"\"\n  paren_stack_max_level_max_level_max_level_level = 0\n  paren_stack_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_count = 0\n  paren_stack_max_level_max_level_max_level_max_level_string\
    \ = \"\"\n  paren_stack_max_level_max_level_max_level_max_level_level = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_count =\
    \ 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_string =\
    \ \"\"\n  paren_stack_max_level_max_level_max_level_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_count\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_string\
    \ = \"\"\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_count\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_string\
    \ = \"\"\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_count\
    \ = 0\n  paren_stack_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_string\
    \ = \"\"\n  paren_stack_max_", "  paren_string.scan(/[^()]+/).map { |x| x.to_i\
    \ }.inject(0) { |sum, el| sum + el }\nend", "  paren_string.scan(/[()]/)\n  max_level\
    \ = 0\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_count\
    \ = 0\n  paren_nesting_string = \"\"\n  paren_nesting_strings = []\n  paren_nesting_strings_level\
    \ = []\n  paren_nesting_strings_level_count = []\n  paren_nesting_strings_level_total\
    \ = 0\n  paren_nesting_strings_level_total_count = 0\n  paren_nesting_strings_level_total_string\
    \ = \"\"\n  paren_nesting_strings_level_total_strings = []\n  paren_nesting_strings_level_total_strings_level\
    \ = []\n  paren_nesting_strings_level_total_strings_level_total = 0\n  paren_nesting_strings_level_total_strings_level_total_count\
    \ = 0\n  paren_nesting_strings_level_total_strings_level_total_string = \"\"\n\
    \  paren_nesting_strings_level_total_strings_level_total_strings = []\n  paren_nesting_strings_level_total_strings_level_total_strings_level\
    \ = []\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total\
    \ = 0\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_count\
    \ = 0\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_string\
    \ = \"\"\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings\
    \ = []\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level\
    \ = []\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level_total\
    \ = 0\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level_total_count\
    \ = 0\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level_total_string\
    \ = \"\"\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level_total_strings\
    \ = []\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level_total_strings_level\
    \ = []\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level_total_strings_level_total\
    \ = 0\n  paren_nesting_strings_level_total_strings_level_total_strings_level_total_strings_level_total_strings_level_total_count\
    \ = 0\n  paren_nesting_strings_level_total_strings_level_total_strings_level_",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_string|\n    if\
    \ paren_string.empty?\n      []\n    elsif paren_string.scan(/\\(/)\n      parse_nested_parens(paren_string)\n\
    \    elsif paren_string.scan(/\\)/)\n      parse_nested_parens(paren_string).max\n\
    \    else\n      paren_string.scan(/[^()]+/).max\n    end\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/).map { |s| s.to_i }\nend",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n    paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n      nested_paren_char.scan(/[\\(\\)]+/) do\
    \ |nested_paren_char|\n        nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \          nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n      \
    \      nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n          \
    \    nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n            \
    \    nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n            \
    \      nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n          \
    \          nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n      \
    \                nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                        nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                          nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                            nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                              nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                                nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                                  nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                                    nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                                      nested_paren_char.scan(/[\\(\\)]+/) do\
    \ |nested_paren_char|\n                                        nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                          nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                            nested_paren_char.scan(/[\\\
    (\\)]+/) do |nested_paren_char|\n                                            \
    \  nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n              \
    \                                  nested_paren_char.scan(/[\\(\\)]+/) do |nested_paren_char|\n\
    \                                                  nested_paren_char.scan(/[\\\
    (\\)]", "  paren_string.scan(/[()]/).map { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.length }.max\nend", "  paren_string.scan(/[()]/) do |paren_char|\n \
    \   paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_max = 0\n  paren_nesting_max_index = 0\n  paren_nesting_max_index2\
    \ = 0\n  paren_nesting_max_index3 = 0\n  paren_nesting_max_index4 = 0\n  paren_nesting_max_index5\
    \ = 0\n  paren_nesting_max_index6 = 0\n  paren_nesting_max_index7 = 0\n  paren_nesting_max_index8\
    \ = 0\n  paren_nesting_max_index9 = 0\n  paren_nesting_max_index10 = 0\n  paren_nesting_max_index11\
    \ = 0\n  paren_nesting_max_index12 = 0\n  paren_nesting_max_index13 = 0\n  paren_nesting_max_index14\
    \ = 0\n  paren_nesting_max_index15 = 0\n  paren_nesting_max_index16 = 0\n  paren_nesting_max_index17\
    \ = 0\n  paren_nesting_max_index18 = 0\n  paren_nesting_max_index19 = 0\n  paren_nesting_max_index20\
    \ = 0\n  paren_nesting_max_index21 = 0\n  paren_nesting_max_index22 = 0\n  paren_nesting_max_index23\
    \ = 0\n  paren_nesting_max_index24 = 0\n  paren_nesting_max_index25 = 0\n  paren_nesting_max_index26\
    \ = 0\n  paren_nesting_max_index27 = 0\n  paren_nesting_max_index28 = 0\n  paren_nesting_max_index29\
    \ = 0\n  paren_nesting_max_index30 = 0\n  paren_nesting_max_index31 = 0\n  paren_nesting_max_index32\
    \ = 0\n  paren_nesting_max_index33 = 0\n  paren_nesting_max_index34 = 0\n  paren_nesting_max_index35\
    \ = 0\n  paren_nesting_max_index36 = 0\n  paren_nesting_max_index37 = 0\n  paren_nesting_max_index38\
    \ = 0\n  paren_nesting_max_index39 = 0\n  paren_nesting_max_index40 = 0\n  paren_nesting_max_index41\
    \ = 0\n  paren_nesting_max_index42 = 0\n  paren_nesting_max_index43 = 0\n  paren_nesting_max_index44\
    \ = 0\n  paren_nesting_max_index45 = 0\n  paren_nesting_max_index46 = 0\n  paren_nesting_max_index47\
    \ = 0\n  paren_nesting_max_index", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n\
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n  \
    \        paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_stack = []\n  paren_count\
    \ = 0\n  paren_level = 0\n  paren_stack = paren_string.split(\" \").map { |x|\
    \ x.to_i }\n  paren_stack.each do |x|\n    if paren_stack.length >= x\n      paren_stack.shift\n\
    \      paren_count += 1\n      paren_level -= 1\n    end\n  end\n  paren_level\n\
    end", "  paren_string.scan(/[()]/)\n  max_level = 0\n  paren_level = 0\n  paren_nesting\
    \ = []\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(paren_level)\n  paren", "  paren_stack = []\n  paren_stack_size\
    \ = -1\n  paren_stack_string = \"\"\n  paren_stack_string_size = 0\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_string = \"\"\n  paren_stack_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_length\
    \ = 0\n  paren_stack_level_max_string_level = 0\n  paren_stack_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string = \"\"\n  paren_stack_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_index = 0\n  paren_stack_level_max_string_level_max_string_length\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level = 0\n  paren_stack_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string = \"\"\
    \n  paren_stack_level_max_string_level_max_string_level_max_string_size = 0\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_index = 0\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_length = 0\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_level = 0\n\
    \  paren_stack_level_max_string_level_max_string_level_max_string_level_max =\
    \ 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_length\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_index\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_length\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_string_level_max_string_level_max_string_level\
    \ = 0\n  paren_stack_level_max_string_level_max_string_level_max_", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_max = 0\n  paren_nesting_max_index\
    \ = 0\n  paren_nesting_max_index2 = 0\n  paren_nesting_max_index3 = 0\n  paren_nesting_max_index4\
    \ = 0\n  paren_nesting_max_index5 = 0\n  paren_nesting_max_index6 = 0\n  paren_nesting_max_index7\
    \ = 0\n  paren_nesting_max_index8 = 0\n  paren_nesting_max_index9 = 0\n  paren_nesting_max_index10\
    \ = 0\n  paren_nesting_max_index11 = 0\n  paren_nesting_max_index12 = 0\n  paren_nesting_max_index13\
    \ = 0\n  paren_nesting_max_index14 = 0\n  paren_nesting_max_index15 = 0\n  paren_nesting_max_index16\
    \ = 0\n  paren_nesting_max_index17 = 0\n  paren_nesting_max_index18 = 0\n  paren_nesting_max_index19\
    \ = 0\n  paren_nesting_max_index20 = 0\n  paren_nesting_max_index21 = 0\n  paren_nesting_max_index22\
    \ = 0\n  paren_nesting_max_index23 = 0\n  paren_nesting_max_index24 = 0\n  paren_nesting_max_index25\
    \ = 0\n  paren_nesting_max_index26 = 0\n  paren_nesting_max_index27 = 0\n  paren_nesting_max_index28\
    \ = 0\n  paren_nesting_max_index29 = 0\n  paren_nesting_max_index30 = 0\n  paren_nesting_max_index31\
    \ = 0\n  paren_nesting_max_index32 = 0\n  paren_nesting_max_index33 = 0\n  paren_nesting_max_index34\
    \ = 0\n  paren_nesting_max_index35 = 0\n  paren_nesting_max_index36 = 0\n  paren_nesting_max_index37\
    \ = 0\n  paren_nesting_max_index38 = 0\n  paren_nesting_max_index39 = 0\n  paren_nesting_max_index40\
    \ = 0\n  paren_nesting_max_index41 = 0\n  paren_nesting_max_index42 = 0\n  paren_nesting_max_index43\
    \ = 0\n  paren_nesting_max_index44 = 0\n  paren_nesting_max_index45 = 0\n  paren_nesting_max_index46\
    \ = 0\n  paren_nesting_max_index47 = 0\n  paren_nesting_max_index48 = 0\n  paren_nesting_max_",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }.inject(0)\
    \ { |max, x| x > max ? x : max }\nend", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char = paren_char.downcase\n    paren_char == \")\" ? (@level -= 1)\
    \ : (@level += 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n    paren_char\
    \ = paren_char.downcase\n    paren_char == \"(\" ? (@level += 1) : (@level -=\
    \ 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.downcase\n\
    \    paren_char == \")\" ? (@level -= 1) : (@level += 1)\n  end\n  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char = paren_char.downcase\n    paren_char == \"\
    (\" ? (@level += 1) : (@level -= 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char = paren_char.downcase\n    paren_char == \")\" ? (@level -= 1)\
    \ : (@level += 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n    paren_char\
    \ = paren_char.downcase\n    paren_char == \"(\" ? (@level += 1) : (@level -=\
    \ 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.downcase\n\
    \    paren_char == \")\" ? (@level -= 1) : (@level += 1)\n  end\n  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char = paren_char.downcase\n    paren_char == \"\
    (\" ? (@level += 1) : (@level -= 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char = paren_char.downcase\n    paren_char == \")\" ? (@level -= 1)\
    \ : (@level += 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n    paren_char\
    \ = paren_char.downcase\n    paren_char == \"(\" ? (@level += 1) : (@level -=\
    \ 1)\n  end\n  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.downcase\n\
    \    paren_char", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\)]/) do |paren_char|\n \
    \       paren_char.scan(/[\\(\\)]/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]/) do |paren_char|\n           \
    \           paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    \
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                            paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                  paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                                    paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/\\s*\\\
    (\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\\
    (\\s*([^\\(\\)]+)\\)\\s*\\)\\s*\\)/).map do |group|\n    group.to_s.scan(/\\s*\\\
    (\\s*([^\\(\\)]+)\\)\\s*\\)/).map do |nested_group|\n      nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_group|\n        nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_group|\n          nested_nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_group|\n   \
    \         nested_nested_nested_nested_group.to_s.scan(/\\s*\\(([^\\(\\)]+)\\)\\\
    s*\\)/).map do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_group.to_s.scan(/\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_group|\n      \
    \            nested_nested_nested_nested_nested_group.to_s.scan(/\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              ", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/).map { |x| x.to_i }\nend",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\\
    )\\s*\\)/) do |group|\n    group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_group|\n\
    \      nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/) do\
    \ |nested_nested_nested_nested_group|\n            nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_group|\n\
    \              nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\\
    s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n               \
    \ nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\\
    )/) do |nested_nested_nested_nested_nested_nested_nested_group|\n            \
    \      nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n     \
    \               nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^\\\
    (\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\\
    s*\\)\\s*|\\s*([^()]*?)\\s*\\)\\s*\\)/).map do |group|\n    group.captures.map\
    \ do |paren_group|\n      paren_group.to_i if paren_group\n    end.max\n  end\n\
    end", "  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels\
    \ = []", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_stack\
    \ = []\n  paren_stack_size = -1\n  paren_stack_level = 0\n  paren_stack_max_level\
    \ = 0\n  paren_stack_max_level_size = 0\n  paren_stack_max_level_sizes = []\n\
    \  paren_stack_max_level_sizes_size = 0\n  paren_stack_max_level_sizes_index =\
    \ 0\n  paren_stack_max_level_sizes_sizes = []\n  paren_stack_max_level_sizes_size\
    \ = 0\n  paren_stack_max_level_sizes_index = 0\n  paren_stack_max_level_sizes_sizes\
    \ = []\n  paren_stack_max_level_sizes_size = 0\n  paren_stack_max_level_sizes_index\
    \ = 0\n  paren_stack_max_level_sizes_sizes = []\n  paren_stack_max_level_sizes_size\
    \ = 0\n  paren_stack_max_level_sizes_index = 0\n  paren_stack_max_level_sizes_sizes\
    \ = []\n  paren_stack_max_level_sizes_size = 0\n  paren_stack_max_level_sizes_index\
    \ = 0\n  paren_stack_max_level_sizes_sizes = []\n  paren_stack_max_level_sizes_size\
    \ = 0\n  paren_stack_max_level_sizes_index = 0\n  paren_stack_max_level_sizes_sizes\
    \ = []\n  paren_stack_max_level_sizes_size = 0\n  paren_stack_max_level_sizes_index\
    \ = 0\n  paren_stack_max_level_sizes_sizes = []\n  paren_stack_max_level_sizes_size\
    \ = 0\n  paren_stack_max_level_sizes_index = 0\n  paren_stack_max_level_sizes_sizes\
    \ = []\n  paren_stack_max_level_sizes_size = 0\n  paren_stack_max_level_sizes_index\
    \ = 0\n  paren_stack_max_level_sizes_sizes = []\n  paren_stack_max_level_sizes_size\
    \ = 0\n  paren_stack_max_level_sizes_index = 0\n  paren_stack_max_level_sizes_sizes\
    \ = []\n  paren_stack_max_level_sizes_size = 0\n  paren_stack_max_level_sizes_index\
    \ = 0\n  paren_stack_max_level_sizes_sizes = []\n  paren_stack_max_level_sizes_size\
    \ = 0\n  paren_stack_max_level_sizes_index = 0\n  paren_stack_max_level_sizes_sizes\
    \ = []\n  paren_stack_max_level_sizes_size = 0\n  paren_stack_max_level_sizes_index\
    \ = 0\n  paren_stack_max_level_sizes_sizes = []\n  paren_stack_max_level_sizes_size\
    \ = 0\n  paren_stack_max_level_sizes_index = 0\n  paren_stack_max_level_sizes_sizes\
    \ = []\n  paren_stack_"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
