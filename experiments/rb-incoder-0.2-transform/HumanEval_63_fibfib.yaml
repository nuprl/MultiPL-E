name: HumanEval_63_fibfib
language: rb
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib.call(1)\n# 0\n# >>> fibfib.call(5)\n# 4\n# >>> fibfib.call(8)\n# 24\ndef\
  \ fibfib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n\
  \    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0,\
  \ candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24,\
  \ candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274,\
  \ candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"
completions: ["  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend",
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) if n > 3 else 0\n  return fibfib\nend", "  if n == 0\n\
    \    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <= 3\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-4) + fibfib(n-5)\n  end\nend", "  fibfib = (1..n).inject(:+).to_a\n\
    \  fibfib[n-1]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >= 3\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2)\n\
    \  end\nend\n</cell>\n<text>\nExercise 3\nWrite a recursive function called fibonacci\
    \ that computes the nth element of the fibonacci number sequence. For example,\
    \ fibonacci(0) should return 0, fibonacci(1) should return 1, and fibonacci(5)\
    \ should return 8.", "  fibfib = (n-1) + (n-2) + (n-3) \n  return fibfib\nend",
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fibfib = [0,1]\n  fibfib[n] = fibfib[n-1] + fibfib[n-2]\
    \ + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib = [0,1]\n  fibfib[n] = fibfib[n-1]\
    \ + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend", "  if n == 0\n    0\n  elsif n == 1\n\
    \    1\n  elsif n == 2\n    1\n  elsif n >= 3\n    fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  end\nend", "  fibfib = (n-1) * (n-2) * (n-3) + fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if\
    \ n < 0\n    raise ArgumentError, \"fibfib: negative argument\"\n  elsif n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib = (n<2) ? n : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<cell>", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib =\
    \ (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (1..n).inject(:+).to_a\n\
    \  fibfib[n-1]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + (n-2) +\
    \ (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (1..n).inject(:+)\n  fibfib\nend", "  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end", "  if n < 0\n    raise ArgumentError, \"fibfib: negative number\"\n  elsif\
    \ n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n<2) ? n : fibfib(n-1) + fibfib(n-2)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) +\
    \ (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = [0,1]\n  fibfib[0] = 0\n\
    \  fibfib[1] = 1\n  fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return\
    \ fibfib[n]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n<2)\
    \ ? n : fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n ==\
    \ 2\n    1\n  elsif n <= 3\n    fibfib(n-1) + fibfib(n-2)\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib = (n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1) * (n-2) * (n-3) + fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"fibfib: negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n\
    \    return 0\n  elsif n == 2\n    return 1\n  else\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + (n-2) + (n-3) \n  return fibfib\n\
    end", "  fibfib = (n-1) * (n-2) * (n-3) + fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n\
    \ == 2\n    1\n  elsif n > 2\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  if n < 0\n    raise ArgumentError, \"fibfib(n) expects\
    \ n to be non-negative\"\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  fibfib = (1..n).inject(:+).to_a\n  fibfib[n]\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1)\
    \ * (n-2) * (n-3) + fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend\n</cell>\n\
    <cell>", "  if n <= 0\n    0\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n   \
    \ 1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n\
    \ == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <= 3\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3) + fibfib(n-4) + fibfib(n-5)\n  end\nend\n</cell>\n<cell>", " \
    \ fibfib = (n-1) + (n-2) + (n-3) # fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + (n-2) + (n-3) # fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  fibfib\nend\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that computes the factorial of a given number. For example, factorial(5)\
    \ = 5 * 5 * 4 * 3 * 2 * 1 = 120.", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function to compute the factorial of a number. For\
    \ example, factorial(5) = 5 * 5 * 5.", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end\n</cell>\n<cell>", "  fibfib = [0,1,1,1]\n  fibfib[n-1] = fibfib[n-2] + fibfib[n-3]\n\
    \  return fibfib[n-1]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n \
    \ return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (1..n).inject(:+)\n  fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n \
    \   1\n  elsif n >= 3\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end", "  fibfib = (n<2) ? n : fibfib(n-1) + fibfib(n-2)\nend", "  fibfib = (n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", '  fibfib = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,49072961619,80145070459,13049695449,21114850779,34164645756,55279397007,89443943239,144723340248,234167281407,378890623707,617671021473,991948530942,1548008755920,2504730781900,4166266521407,675539920929,1094801796262,1796326537329,2835008145264,4674395307428,7406976656449,1285896340489,2074645660991,3299628288497,4901432904049,8053064578148,1307494667439,2114187732801,3428643278449,5557716674390,8956494334390,14644090524289,23495948874970,37990785574390,61897007142890,99811889742890,154800875591900,250473078190900,416626652140700,675539920929000,109480179626200,1796326537328900,283500814526400,467439530742800,740697665644900,1285896340489000,2074645660991000,3299628288497000,49014',
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = [0,1]\n  fibfib[1]\
    \ = fibfib[0]\n  fibfib[2] = fibfib[1]\n  fibfib[n] = fibfib[n-1] + fibfib[n-2]\
    \ + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n\
    <cell>", "  fibfib = (1..n).inject(:+).to_a\n  fibfib[n-1]\nend\n</cell>\n<cell>",
  "  fibfib = [0,1]\n  fibfib[1] = fibfib[0]\n  fibfib[2] = fibfib[1]\n  fibfib[n]\
    \ = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib\
    \ = (1..n).inject(:+)\n  fibfib\nend", "  fibfib = (n<2) ? n : fibfib(n-1) + fibfib(n-2)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  else\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ fibfib(1)\n</cell>\n<code language=julia-1.0>\n@time fibfib(2)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fibfib(10)\n</cell>\n<code language=julia-1.0>\n\
    @time fibfib(100)\n</cell>\n<code language=julia-1.0>\n@time fibfib(1000)\n</cell>\n\
    <code language=julia-1.0>\n@time fibfib(10000)\n</cell>\n<code language=julia-1.0>\n\
    @time fibfib(100000)\n</cell>\n<code language=julia-1.0>\n@time fibfib(1000000)\n\
    </cell>\n<code language=julia-1.0>\n@time fibfib(10000000)\n</cell>\n<code language=julia-1.0>\n\
    @time fibfib(100000000)\n</cell>\n<code language=julia-1.0>\n@time fibfib(1000000000)\n\
    </cell>\n<code language=julia-1.0>\n@time fibfib(10000000000)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fibfib(100000000000)\n</cell>\n<code language=julia-1.0>\n\
    @time fibfib(1000000000000)\n</cell>\n<code language=julia-1.0>\n@time fibfib(10000000000000)\n\
    </cell>\n<code language=julia-1.0>\n@time fibfib(100000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fibfib(1000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    @time fibfib(10000000000000000)\n</cell>\n<code language=julia-1.0>\n@time fibfib(100000000000000000)\n\
    </cell>\n<code language=julia-1.0>\n@time fibfib(1000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\n@time fibfib(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fibfib(100000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    @time fibfib(1000000000000000000000)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fibfib(10000000000000000000000)\n</cell>\n<code language=julia-1.0>\n@time fibfib(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\n@time fibfib(1000000000000000000000000)\n\
    </cell>", "  fibfib = (n<2) ? n : fibfib(n-1) + fibfib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time fibfib(1)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fibfib(5)\n</cell>\n<code language=julia-1.0>\n@time fibfib(8)\n</cell>\n<text>\n\
    Problem 7: Fibonacci numbers\nThe Fibonacci numbers are the numbers in the following\
    \ integer sequence: $0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...$", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  if n < 0\n  \
    \  raise ArgumentError, 'fibfib(n) expects n to be a non-negative integer'\n \
    \ else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1)\
    \ + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = (1..n).inject(:+).to_a\n\
    \  fibfib[n-1]\nend", "  if n < 0\n    raise ArgumentError, \"fibfib: n must be\
    \ >= 0\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif\
    \ n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib = (n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  if n < 0\n\
    \    puts \"fibfib: negative number\"\n  elsif n == 0\n    0\n  elsif n == 1\n\
    \    0\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  fibfib = [0,1]\n  fibfib[1] = fibfib[0]\n  fibfib[2] = fibfib[1]\n\
    \  fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\nend",
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  if n <\
    \ 0\n    raise ArgumentError, 'fibfib(n) expects n to be non-negative'\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib = (n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend\n</cell>\n<cell>", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (1..n).inject(:+).to_a\n \
    \ fibfib[n-1]\nend\n</cell>\n<cell>", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ if n < 0\n    raise ArgumentError, \"fibfib: negative argument\"\n  elsif n\
    \ == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n == 0\n    0\n  elsif n ==\
    \ 1\n    1\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  fibfib = (n-1) + (n-2) + (n-3) if n > 3 else n\n  return fibfib\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <=\
    \ 3\n    fibfib(n-1) + fibfib(n-2)\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <= 3\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "  fibfib = [0,1]\n  fibfib[0] = 0\n  fibfib[1]\
    \ = 1\n  fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif\
    \ n >= 3\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >= 3\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "  fibfib = [0,1]\n  fibfib[n] = fibfib[n-1] + fibfib[n-2]\
    \ + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib = (1..n).inject(:+)\n  fibfib\n\
    end", "  fibfib = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = [0,1]\n  fibfib[0] = 0\n  fibfib[1]\
    \ = 1\n  fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ fibfib = (n-1) + (n-2) + (n-3) \n  return fibfib\nend\n</cell>\n<cell>", " \
    \ fibfib = [0,1]\n  fibfib[1] = fibfib[0]\n  fibfib[2] = fibfib[1]\n  fibfib[n]\
    \ = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n < 0\n    puts \"fibfib(n)\
    \ must be non-negative\"\n  elsif n == 0\n    0\n  elsif n == 1\n    0\n  elsif\
    \ n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "  fibfib = (1..n).inject(:+)\n  fibfib\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1) + (n-2) + (n-3) if n\
    \ > 3 else n\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end\n</cell>\n<cell>", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end", "  fibfib = (1..n).inject(:+).to_a\n  fibfib[n-1]\nend", "  if n < 0\n \
    \   puts \"fibfib: negative number\"\n    return nil\n  end\n  if n == 0\n   \
    \ return 0\n  end\n  if n == 1\n    return 0\n  end\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end", "  fibfib = [0,1]\n  fibfib[1] = fibfib[0]\n  fibfib[2] = fibfib[1]\n  fibfib[n]\
    \ = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\nend", "  if n\
    \ == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >= 3\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n == 0\n    0\n\
    \  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <= 3\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-4)\n  end\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend\n</cell>\n<cell>", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (1..n).inject(:+).to_a\n  fibfib[n-1]\nend",
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n<2) ? n : fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1) + (n-2)\
    \ + (n-3) \n  return fibfib\nend", "  fibfib = (1..n).inject(:+).to_a\n  fibfib[n-1]\n\
    end\n</cell>\n<cell>", "  if n < 0\n    raise ArgumentError, 'fibfib: negative\
    \ number'\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif\
    \ n == 2\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = [0,1]\n  fibfib[0] = 0\n  fibfib[1] = 1\n\
    \  for i in 2..n\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  end\n\
    \  fibfib[n]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end\n</cell>\n<cell>", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ fibfib = (n-1) + (n-2) + (n-3) \n  return fibfib\nend\n</cell>\n<cell>", " \
    \ fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  if n == 0\n \
    \   0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n > 2\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib = (n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n<2) ? n : fibfib(n-1) + fibfib(n-2)\n\
    end", "  fibfib = (n-1) + (n-2) + (n-3) if n > 3 else 0\n  return fibfib\nend",
  "  if n < 0\n    puts \"fibfib: negative argument\"\n  elsif n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend\n</cell>\n<cell>", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ if n < 0\n    raise ArgumentError, \"fibfib: negative argument\"\n  elsif n\
    \ == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib\
    \ = (n<2) ? n : fibfib(n-1) + fibfib(n-2)\nend", "  fibfib = (1..n).inject(:+).to_a\n\
    \  fibfib[n-1]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n<2) ? n : fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", " \
    \ if n < 0\n    raise ArgumentError, \"fibfib: negative number\"\n  else\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
