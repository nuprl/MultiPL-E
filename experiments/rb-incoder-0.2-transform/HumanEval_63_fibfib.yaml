name: HumanEval_63_fibfib
language: rb
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib.call(1)\n# 0\n# >>> fibfib.call(5)\n# 4\n# >>> fibfib.call(8)\n# 24\ndef\
  \ fibfib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n\
  \    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0,\
  \ candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24,\
  \ candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274,\
  \ candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"
completions: ["  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend",
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) if n > 3 else 0\n  return fibfib\nend", "  if n == 0\n\
    \    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <= 3\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-4) + fibfib(n-5)\n  end\nend", "  fibfib = (1..n).inject(:+).to_a\n\
    \  fibfib[n-1]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >= 3\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-1) + fibfib(n-2)\n\
    \  end\nend\n</cell>\n<text>\nExercise 3\nWrite a recursive function called fibonacci\
    \ that computes the nth element of the fibonacci number sequence. For example,\
    \ fibonacci(0) should return 0, fibonacci(1) should return 1, and fibonacci(5)\
    \ should return 8.", "  fibfib = (n-1) + (n-2) + (n-3) \n  return fibfib\nend",
  "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fibfib = [0,1]\n  fibfib[n] = fibfib[n-1] + fibfib[n-2]\
    \ + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib = [0,1]\n  fibfib[n] = fibfib[n-1]\
    \ + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  return fibfib\nend", "  if n == 0\n    0\n  elsif n == 1\n\
    \    1\n  elsif n == 2\n    1\n  elsif n >= 3\n    fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  end\nend", "  fibfib = (n-1) * (n-2) * (n-3) + fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if\
    \ n < 0\n    raise ArgumentError, \"fibfib: negative argument\"\n  elsif n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib = (n<2) ? n : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<cell>", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib =\
    \ (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (1..n).inject(:+).to_a\n\
    \  fibfib[n-1]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib\
    \ = (n-1) + (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + (n-2) +\
    \ (n-3) \n  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (1..n).inject(:+)\n  fibfib\nend", "  fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  return fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return\
    \ fibfib\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\n\
    end", "  if n < 0\n    raise ArgumentError, \"fibfib: negative number\"\n  elsif\
    \ n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n<2) ? n : fibfib(n-1) + fibfib(n-2)\n\
    end", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) +\
    \ (n-2) + (n-3) \n  return fibfib\nend", "  fibfib = [0,1]\n  fibfib[0] = 0\n\
    \  fibfib[1] = 1\n  fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return\
    \ fibfib[n]\nend", "  fibfib = (n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3)\n  return fibfib\nend", "  fibfib = (n<2)\
    \ ? n : fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fibfib = (n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
