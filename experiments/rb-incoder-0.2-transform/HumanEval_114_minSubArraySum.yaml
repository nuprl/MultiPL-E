name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n\
  # 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.each do |n|\n    min = n\n    n.times\
    \ do |i|\n      min = min > nums[i] ? min : nums[i]\n    end\n    return min\n\
    \  end\nend", "  nums.each_with_index do |n, i|\n    min = nums[i]\n    (i..nums.size-1).each\
    \ do |j|\n      min = min > nums[j] ? min : nums[j]\n    end\n    return min\n\
    \  end\nend", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min\
    \ = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    min = min if min > n\n    nums[i] = min\n\
    \  end\n  nums.reduce(:+)\nend", "  nums.each do |n|\n    min = n\n    n.times\
    \ do |i|\n      min = min > nums[i] || nums[i] > 0 ? min : nums[i]\n    end\n\
    \    return min\n  end\nend", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.each\
    \ do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n    end\n   \
    \ return sum if sum < 0\n  end\n  0\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  sum\nend", "  nums.each do |n|\n    min = n\n    n.times do |i|\n  \
    \    min = min + nums[i]\n    end\n    return min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b\
    \ }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(max))\n\
    \    end\n    return min\n  end\nend", "  nums.each do |n|\n    sum = n\n    n.times\
    \ do |i|\n      sum = sum + nums[i]\n    end\n    return sum if sum < 0\n  end\n\
    \  0\nend", "  nums.reduce(:+)\nend", "  nums.each_with_index do |num, i|\n  \
    \  min = num\n    min = num if nums.size - 1 == i\n    min = num if nums.size\
    \ - 2 == i\n    min = num if nums.size - 3 == i\n    min = num if nums.size -\
    \ 4 == i\n    min = num if nums.size - 5 == i\n    min = num if nums.size - 6\
    \ == i\n    min = num if nums.size - 7 == i\n    min = num if nums.size - 8 ==\
    \ i\n    min = num if nums.size - 9 == i\n    min = num if nums.size - 10 == i\n\
    \    min = num if nums.size - 11 == i\n    min = num if nums.size - 12 == i\n\
    \    min = num if nums.size - 13 == i\n    min = num if nums.size - 14 == i\n\
    \    min = num if nums.size - 15 == i\n    min = num if nums.size - 16 == i\n\
    \    min = num if nums.size - 17 == i\n    min = num if nums.size - 18 == i\n\
    \    min = num if nums.size - 19 == i\n    min = num if nums.size - 20 == i\n\
    \    min = num if nums.size - 21 == i\n    min = num if nums.size - 22 == i\n\
    \    min = num if nums.size - 23 == i\n    min = num if nums.size - 24 == i\n\
    \    min = num if nums.size - 25 == i\n    min = num if nums.size - 26 == i\n\
    \    min = num if nums.size - 27 == i\n    min = num if nums.size - 28 == i\n\
    \    min = num if nums.size - 29 == i\n    min = num if nums.size - 30 == i\n\
    \    min = num if nums.size - 31 == i\n    min = num if nums.size - 32 == i\n\
    \    min = num if nums.size - 33 == i\n    min = num if nums.size - 34 == i\n\
    \    min = num if nums.size - 35 == i\n    min = num if nums.size - 36 == i\n\
    \    min = num if nums.size - 37 == i\n    min = num if nums.size - 38 == i\n\
    \    min = num if nums.size - 39 == i\n    min = num if nums.size - 40 == i\n\
    \    min = num if nums.size - 41 == i\n    min = num if nums.size - 42 == i\n\
    \    min = num if nums.size - 43 == i\n    min = num if nums.size - 44 == i\n\
    \    min = num if nums.size - 45 == i\n    min = num if ", "  nums.sort!\n  sum\
    \ = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  return sum\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min {|a, b| a + b}\n\
    \      max = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(0)\n\
    \    end\n    return min if min > max\n  end\n  return nil\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      min = num if sum < min\n      max = num if sum > max\n    end\n    return\
    \ min if min != max\n  end\nend", "  nums.each_with_index do |n, i|\n    min =\
    \ nums[i]\n    max = nums[i]\n    \n    n.times do |j|\n      min = nums[j] if\
    \ nums[j] < min\n      max = nums[j] if nums[j] > max\n    end\n    \n    return\
    \ min if min > max\n  end\n  \n  return 0\nend", "  nums.each do |num|\n    min\
    \ = num\n    max = num\n    until nums.empty? do\n      min = nums.min { |a, b|\
    \ a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\n  return nil\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      next if sum < min or sum > max\n      min = sum\n    end\n    return min\n\
    \  end\nend", "  nums.each do |n|\n    n.times do |i|\n      nums.each do |j|\n\
    \        next if i == j\n        next if j == i + 1 && nums[j] > 0\n        nums[j]\
    \ = nums[j] + nums[i]\n      end\n    end\n  end\n  nums.min\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    min = num if nums.size - 1 == i\n    min = num\
    \ if nums.size - 2 == i\n    min = num if nums.size - 3 == i\n    min = num if\
    \ nums.size - 4 == i\n    min = num if nums.size - 5 == i\n    min = num if nums.size\
    \ - 6 == i\n    min = num if nums.size - 7 == i\n    min = num if nums.size -\
    \ 8 == i\n    min = num if nums.size - 9 == i\n    min = num if nums.size - 10\
    \ == i\n    min = num if nums.size - 11 == i\n    min = num if nums.size - 12\
    \ == i\n    min = num if nums.size - 13 == i\n    min = num if nums.size - 14\
    \ == i\n    min = num if nums.size - 15 == i\n    min = num if nums.size - 16\
    \ == i\n    min = num if nums.size - 17 == i\n    min = num if nums.size - 18\
    \ == i\n    min = num if nums.size - 19 == i\n    min = num if nums.size - 20\
    \ == i\n    min = num if nums.size - 21 == i\n    min = num if nums.size - 22\
    \ == i\n    min = num if nums.size - 23 == i\n    min = num if nums.size - 24\
    \ == i\n    min = num if nums.size - 25 == i\n    min = num if nums.size - 26\
    \ == i\n    min = num if nums.size - 27 == i\n    min = num if nums.size - 28\
    \ == i\n    min = num if nums.size - 29 == i\n    min = num if nums.size - 30\
    \ == i\n    min = num if nums.size - 31 == i\n    min = num if nums.size - 32\
    \ == i\n    min = num if nums.size - 33 == i\n    min = num if nums.size - 34\
    \ == i\n    min = num if nums.size - 35 == i\n    min = num if nums.size - 36\
    \ == i\n    min = num if nums.size - 37 == i\n    min = num if nums.size - 38\
    \ == i\n    min = num if nums.size - 39 == i\n    min = num if nums.size - 40\
    \ == i\n    min = num if nums.size - 41 == i\n    min = num if nums.size - 42\
    \ == i\n    min = num if nums.size - 43 == i\n    min = num if nums.size - 44\
    \ == i\n    min = num if nums.size - 45 == i\n    min = num if ", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i\
    \ in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  return sum\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n      max =\
    \ nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n    end\n\
    \    return min\n  end\nend", "  nums.each do |num|\n    min = num\n    max =\
    \ num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n     \
    \ max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n   \
    \ end\n    return min if min > max\n  end\nend", "  nums.sort!\n  min = nums[0]\n\
    \  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n \
    \ min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum = sum\
    \ + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n\
    \  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.each do |num|\n    min = num\n    max = num\n   \
    \ until nums.empty? do\n      min = nums.min {|a, b| a + b}\n      max = nums.max\
    \ {|a, b| a + b}\n      nums.delete_at(nums.index(max))\n    end\n    return min\n\
    \  end\nend", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |n|\n    n.times do |i|\n      nums.each do |j|\n        if j -\
    \ i > n and nums[j - i] == n\n          return j - i\n        end\n      end\n\
    \    end\n  end\nend", "  nums.each do |n|\n    min = n\n    n.times do |i|\n\
    \      min = min > nums[i] || nums[i] > 0 ? min : nums[i]\n    end\n    return\
    \ min\n  end\nend", "  nums.each do |n|\n    sum = 0\n    n.times do |i|\n   \
    \   sum += nums[i]\n    end\n    return sum if sum < 0\n  end\n  0\nend", "  nums.each\
    \ do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i] ? min : nums[i]\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n \
    \ sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n  \
    \    sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums[0]\n  for\
    \ i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min {|a, b| a + b}\n      max = nums.max {|a, b| a + b}\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i]\
    \ ? min : nums[i]\n  end\n  min\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty?\n      sum = nums.shift\n      sum += min\n\
    \      sum += max\n      if sum < min\n        min = sum\n      elsif sum > max\n\
    \        max = sum\n      else\n        break\n      end\n    end\n    return\
    \ min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n   \
    \ sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    j = i + 1\n    while j < nums.length\n   \
    \   min = min > nums[j] ? min : nums[j]\n      j += 1\n    end\n    min = min\
    \ > n ? min : n\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length-1\n    sum += nums[i]\n\
    \  end\n  sum\nend", "  nums.each do |num|\n    min = num\n    max = num\n   \
    \ until nums.empty? do\n      min = nums.min { |a, b| a + b }\n      max = nums.max\
    \ { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n    end\n    return\
    \ min if min > max\n  end\n  return nil\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  return sum\nend", "  nums.sort!\n  min = nums[0]\n  for i in\
    \ 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      sum = nums.shift\n      min = sum if sum < min\n      max = sum if sum\
    \ > max\n    end\n    return min if min > max\n  end\nend", "  nums.sort!\n  min\
    \ = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n  \
    \  sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  return sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      if sum < min\n        min = sum\n      elsif sum > max\n        max = sum\n\
    \      else\n        break\n      end\n    end\n    return min\n  end\nend", " \
    \ nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
