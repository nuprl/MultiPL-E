name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n\
  # 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.each do |n|\n    min = n\n    n.times\
    \ do |i|\n      min = min > nums[i] ? min : nums[i]\n    end\n    return min\n\
    \  end\nend", "  nums.each_with_index do |n, i|\n    min = nums[i]\n    (i..nums.size-1).each\
    \ do |j|\n      min = min > nums[j] ? min : nums[j]\n    end\n    return min\n\
    \  end\nend", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min\
    \ = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    min = min if min > n\n    nums[i] = min\n\
    \  end\n  nums.reduce(:+)\nend", "  nums.each do |n|\n    min = n\n    n.times\
    \ do |i|\n      min = min > nums[i] || nums[i] > 0 ? min : nums[i]\n    end\n\
    \    return min\n  end\nend", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.each\
    \ do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n    end\n   \
    \ return sum if sum < 0\n  end\n  0\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  sum\nend", "  nums.each do |n|\n    min = n\n    n.times do |i|\n  \
    \    min = min + nums[i]\n    end\n    return min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b\
    \ }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(max))\n\
    \    end\n    return min\n  end\nend", "  nums.each do |n|\n    sum = n\n    n.times\
    \ do |i|\n      sum = sum + nums[i]\n    end\n    return sum if sum < 0\n  end\n\
    \  0\nend", "  nums.reduce(:+)\nend", "  nums.each_with_index do |num, i|\n  \
    \  min = num\n    min = num if nums.size - 1 == i\n    min = num if nums.size\
    \ - 2 == i\n    min = num if nums.size - 3 == i\n    min = num if nums.size -\
    \ 4 == i\n    min = num if nums.size - 5 == i\n    min = num if nums.size - 6\
    \ == i\n    min = num if nums.size - 7 == i\n    min = num if nums.size - 8 ==\
    \ i\n    min = num if nums.size - 9 == i\n    min = num if nums.size - 10 == i\n\
    \    min = num if nums.size - 11 == i\n    min = num if nums.size - 12 == i\n\
    \    min = num if nums.size - 13 == i\n    min = num if nums.size - 14 == i\n\
    \    min = num if nums.size - 15 == i\n    min = num if nums.size - 16 == i\n\
    \    min = num if nums.size - 17 == i\n    min = num if nums.size - 18 == i\n\
    \    min = num if nums.size - 19 == i\n    min = num if nums.size - 20 == i\n\
    \    min = num if nums.size - 21 == i\n    min = num if nums.size - 22 == i\n\
    \    min = num if nums.size - 23 == i\n    min = num if nums.size - 24 == i\n\
    \    min = num if nums.size - 25 == i\n    min = num if nums.size - 26 == i\n\
    \    min = num if nums.size - 27 == i\n    min = num if nums.size - 28 == i\n\
    \    min = num if nums.size - 29 == i\n    min = num if nums.size - 30 == i\n\
    \    min = num if nums.size - 31 == i\n    min = num if nums.size - 32 == i\n\
    \    min = num if nums.size - 33 == i\n    min = num if nums.size - 34 == i\n\
    \    min = num if nums.size - 35 == i\n    min = num if nums.size - 36 == i\n\
    \    min = num if nums.size - 37 == i\n    min = num if nums.size - 38 == i\n\
    \    min = num if nums.size - 39 == i\n    min = num if nums.size - 40 == i\n\
    \    min = num if nums.size - 41 == i\n    min = num if nums.size - 42 == i\n\
    \    min = num if nums.size - 43 == i\n    min = num if nums.size - 44 == i\n\
    \    min = num if nums.size - 45 == i\n    min = num if ", "  nums.sort!\n  sum\
    \ = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  return sum\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min {|a, b| a + b}\n\
    \      max = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(0)\n\
    \    end\n    return min if min > max\n  end\n  return nil\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      min = num if sum < min\n      max = num if sum > max\n    end\n    return\
    \ min if min != max\n  end\nend", "  nums.each_with_index do |n, i|\n    min =\
    \ nums[i]\n    max = nums[i]\n    \n    n.times do |j|\n      min = nums[j] if\
    \ nums[j] < min\n      max = nums[j] if nums[j] > max\n    end\n    \n    return\
    \ min if min > max\n  end\n  \n  return 0\nend", "  nums.each do |num|\n    min\
    \ = num\n    max = num\n    until nums.empty? do\n      min = nums.min { |a, b|\
    \ a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\n  return nil\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      next if sum < min or sum > max\n      min = sum\n    end\n    return min\n\
    \  end\nend", "  nums.each do |n|\n    n.times do |i|\n      nums.each do |j|\n\
    \        next if i == j\n        next if j == i + 1 && nums[j] > 0\n        nums[j]\
    \ = nums[j] + nums[i]\n      end\n    end\n  end\n  nums.min\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    min = num if nums.size - 1 == i\n    min = num\
    \ if nums.size - 2 == i\n    min = num if nums.size - 3 == i\n    min = num if\
    \ nums.size - 4 == i\n    min = num if nums.size - 5 == i\n    min = num if nums.size\
    \ - 6 == i\n    min = num if nums.size - 7 == i\n    min = num if nums.size -\
    \ 8 == i\n    min = num if nums.size - 9 == i\n    min = num if nums.size - 10\
    \ == i\n    min = num if nums.size - 11 == i\n    min = num if nums.size - 12\
    \ == i\n    min = num if nums.size - 13 == i\n    min = num if nums.size - 14\
    \ == i\n    min = num if nums.size - 15 == i\n    min = num if nums.size - 16\
    \ == i\n    min = num if nums.size - 17 == i\n    min = num if nums.size - 18\
    \ == i\n    min = num if nums.size - 19 == i\n    min = num if nums.size - 20\
    \ == i\n    min = num if nums.size - 21 == i\n    min = num if nums.size - 22\
    \ == i\n    min = num if nums.size - 23 == i\n    min = num if nums.size - 24\
    \ == i\n    min = num if nums.size - 25 == i\n    min = num if nums.size - 26\
    \ == i\n    min = num if nums.size - 27 == i\n    min = num if nums.size - 28\
    \ == i\n    min = num if nums.size - 29 == i\n    min = num if nums.size - 30\
    \ == i\n    min = num if nums.size - 31 == i\n    min = num if nums.size - 32\
    \ == i\n    min = num if nums.size - 33 == i\n    min = num if nums.size - 34\
    \ == i\n    min = num if nums.size - 35 == i\n    min = num if nums.size - 36\
    \ == i\n    min = num if nums.size - 37 == i\n    min = num if nums.size - 38\
    \ == i\n    min = num if nums.size - 39 == i\n    min = num if nums.size - 40\
    \ == i\n    min = num if nums.size - 41 == i\n    min = num if nums.size - 42\
    \ == i\n    min = num if nums.size - 43 == i\n    min = num if nums.size - 44\
    \ == i\n    min = num if nums.size - 45 == i\n    min = num if ", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i\
    \ in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  return sum\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n      max =\
    \ nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n    end\n\
    \    return min\n  end\nend", "  nums.each do |num|\n    min = num\n    max =\
    \ num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n     \
    \ max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n   \
    \ end\n    return min if min > max\n  end\nend", "  nums.sort!\n  min = nums[0]\n\
    \  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n \
    \ min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum = sum\
    \ + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n\
    \  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.each do |num|\n    min = num\n    max = num\n   \
    \ until nums.empty? do\n      min = nums.min {|a, b| a + b}\n      max = nums.max\
    \ {|a, b| a + b}\n      nums.delete_at(nums.index(max))\n    end\n    return min\n\
    \  end\nend", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |n|\n    n.times do |i|\n      nums.each do |j|\n        if j -\
    \ i > n and nums[j - i] == n\n          return j - i\n        end\n      end\n\
    \    end\n  end\nend", "  nums.each do |n|\n    min = n\n    n.times do |i|\n\
    \      min = min > nums[i] || nums[i] > 0 ? min : nums[i]\n    end\n    return\
    \ min\n  end\nend", "  nums.each do |n|\n    sum = 0\n    n.times do |i|\n   \
    \   sum += nums[i]\n    end\n    return sum if sum < 0\n  end\n  0\nend", "  nums.each\
    \ do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i] ? min : nums[i]\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n \
    \ sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n  \
    \    sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums[0]\n  for\
    \ i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min {|a, b| a + b}\n      max = nums.max {|a, b| a + b}\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i]\
    \ ? min : nums[i]\n  end\n  min\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty?\n      sum = nums.shift\n      sum += min\n\
    \      sum += max\n      if sum < min\n        min = sum\n      elsif sum > max\n\
    \        max = sum\n      else\n        break\n      end\n    end\n    return\
    \ min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n   \
    \ sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    j = i + 1\n    while j < nums.length\n   \
    \   min = min > nums[j] ? min : nums[j]\n      j += 1\n    end\n    min = min\
    \ > n ? min : n\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length-1\n    sum += nums[i]\n\
    \  end\n  sum\nend", "  nums.each do |num|\n    min = num\n    max = num\n   \
    \ until nums.empty? do\n      min = nums.min { |a, b| a + b }\n      max = nums.max\
    \ { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n    end\n    return\
    \ min if min > max\n  end\n  return nil\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  return sum\nend", "  nums.sort!\n  min = nums[0]\n  for i in\
    \ 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      sum = nums.shift\n      min = sum if sum < min\n      max = sum if sum\
    \ > max\n    end\n    return min if min > max\n  end\nend", "  nums.sort!\n  min\
    \ = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n  \
    \  sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  return sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      if sum < min\n        min = sum\n      elsif sum > max\n        max = sum\n\
    \      else\n        break\n      end\n    end\n    return min\n  end\nend", " \
    \ nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums[0]\n \
    \ for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    min = num if nums.size - 1 == i\n    min = num\
    \ if nums.size - 2 == i\n    min = num if nums.size - 3 == i\n    min = num if\
    \ nums.size - 4 == i\n    min = num if nums.size - 5 == i\n    min = num if nums.size\
    \ - 6 == i\n    min = num if nums.size - 7 == i\n    min = num if nums.size -\
    \ 8 == i\n    min = num if nums.size - 9 == i\n    min = num if nums.size - 10\
    \ == i\n    min = num if nums.size - 11 == i\n    min = num if nums.size - 12\
    \ == i\n    min = num if nums.size - 13 == i\n    min = num if nums.size - 14\
    \ == i\n    min = num if nums.size - 15 == i\n    min = num if nums.size - 16\
    \ == i\n    min = num if nums.size - 17 == i\n    min = num if nums.size - 18\
    \ == i\n    min = num if nums.size - 19 == i\n    min = num if nums.size - 20\
    \ == i\n    min = num if nums.size - 21 == i\n    min = num if nums.size - 22\
    \ == i\n    min = num if nums.size - 23 == i\n    min = num if nums.size - 24\
    \ == i\n    min = num if nums.size - 25 == i\n    min = num if nums.size - 26\
    \ == i\n    min = num if nums.size - 27 == i\n    min = num if nums.size - 28\
    \ == i\n    min = num if nums.size - 29 == i\n    min = num if nums.size - 30\
    \ == i\n    min = num if nums.size - 31 == i\n    min = num if nums.size - 32\
    \ == i\n    min = num if nums.size - 33 == i\n    min = num if nums.size - 34\
    \ == i\n    min = num if nums.size - 35 == i\n    min = num if nums.size - 36\
    \ == i\n    min = num if nums.size - 37 == i\n    min = num if nums.size - 38\
    \ == i\n    min = num if nums.size - 39 == i\n    min = num if nums.size - 40\
    \ == i\n    min = num if nums.size - 41 == i\n    min = num if nums.size - 42\
    \ == i\n    min = num if nums.size - 43 == i\n    min = num if nums.size - 44\
    \ == i\n    min = num if nums.size - 45 == i\n    min = num if ", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend",
  "  nums.each do |n|\n    sum = n\n    n.times do |i|\n      sum = sum + nums[i]\n\
    \    end\n    return sum if sum < 0\n  end\n  0\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    n.times do |j|\n      min = nums[j] if nums[j]\
    \ < min\n    end\n    return min if min != 0\n  end\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      sum = nums.shift\n\
    \      if sum < min then\n        min = sum\n      elsif sum > max then\n    \
    \    max = sum\n      else\n        break\n      end\n    end\n    return min\
    \ if min > max\n  end\n  return nil\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  sum\nend", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length-1\n    sum += nums[i]\n  end\n  sum\nend", "  nums.each\
    \ do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n    end\n   \
    \ return sum if sum < 0\n  end\n  0\nend", "  nums.sort!\n  min = nums[0]\n  for\
    \ i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\n\
    end", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min\
    \ > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.each do |num|\n    min\
    \ = num\n    max = num\n    until nums.empty? do\n      min = nums.min { |a, b|\
    \ a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(max))\n\
    \    end\n    return min\n  end\nend", "  nums.each do |n|\n    sum = 0\n    n.times\
    \ do |i|\n      sum += nums[i]\n    end\n    return sum if sum < 0\n  end\n  0\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      min = num if sum < min\n      max = num if sum > max\n    end\n    min\n\
    \  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum +=\
    \ nums[i]\n  end\n  return sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n   \
    \ end\n    return sum if sum < 0\n  end\n  0\nend", "  nums.sort!\n  sum = 0\n\
    \  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length-1\n    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n\
    \    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n\
    \  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.each do |n|\n    min = n\n    n.times do |i|\n  \
    \    min = min > nums[i] ? min : nums[i]\n    end\n    return min\n  end\nend",
  "  nums.each do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i]\
    \ ? min : nums[i]\n    end\n    return min\n  end\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      sum = nums.shift\n\
    \      if sum < min then\n        min = sum\n      elsif sum > max then\n    \
    \    max = sum\n      else\n        break\n      end\n    end\n    return min\n\
    \  end\nend", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      sum = nums.shift\n      min = num if sum < min\n      max = num if\
    \ sum > max\n    end\n    return min if min != max\n  end\n  return nil\nend",
  "  nums.reduce(:+)\nend", "  nums.each_with_index do |num, i|\n    min = num\n \
    \   (i..nums.size-1).each do |j|\n      min = min + nums[j] if nums[j] < num\n\
    \    end\n    return min if min > num\n  end\nend", "  nums.each do |num|\n  \
    \  min = num\n    max = num\n    until nums.empty? do\n      min = nums.min {\
    \ |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(0)\n\
    \    end\n    return min if min > max\n  end\n  return nil\nend", "  nums.each\
    \ do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i] || nums[i]\
    \ > 0 ? min : nums[i]\n    end\n    return min\n  end\nend", "  nums.sort!\n \
    \ sum = 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n\
    \      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i\
    \ in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  return sum\nend", "  nums.each_with_index do |num, i|\n    min = num\n\
    \    min = num if nums.size - i == 1\n    min = num if nums.size - i == 2\n  \
    \  min = num if nums.size - i == 3\n    min = num if nums.size - i == 4\n    min\
    \ = num if nums.size - i == 5\n    min = num if nums.size - i == 6\n    min =\
    \ num if nums.size - i == 7\n    min = num if nums.size - i == 8\n    min = num\
    \ if nums.size - i == 9\n    min = num if nums.size - i == 10\n    min = num if\
    \ nums.size - i == 11\n    min = num if nums.size - i == 12\n    min = num if\
    \ nums.size - i == 13\n    min = num if nums.size - i == 14\n    min = num if\
    \ nums.size - i == 15\n    min = num if nums.size - i == 16\n    min = num if\
    \ nums.size - i == 17\n    min = num if nums.size - i == 18\n    min = num if\
    \ nums.size - i == 19\n    min = num if nums.size - i == 20\n    min = num if\
    \ nums.size - i == 21\n    min = num if nums.size - i == 22\n    min = num if\
    \ nums.size - i == 23\n    min = num if nums.size - i == 24\n    min = num if\
    \ nums.size - i == 25\n    min = num if nums.size - i == 26\n    min = num if\
    \ nums.size - i == 27\n    min = num if nums.size - i == 28\n    min = num if\
    \ nums.size - i == 29\n    min = num if nums.size - i == 30\n    min = num if\
    \ nums.size - i == 31\n    min = num if nums.size - i == 32\n    min = num if\
    \ nums.size - i == 33\n    min = num if nums.size - i == 34\n    min = num if\
    \ nums.size - i == 35\n    min = num if nums.size - i == 36\n    min = num if\
    \ nums.size - i == 37\n    min = num if nums.size - i == 38\n    min = num if\
    \ nums.size - i == 39\n    min = num if nums.size - i == 40\n    min = num if\
    \ nums.size - i == 41\n    min = num if nums.size - i == 42\n    min = num if\
    \ nums.size - i == 43\n    min = num if nums.size - i == 44\n    min = num if\
    \ nums.size - i == 45\n    min = num if nums.size - i == 46\n    min = num if\
    \ nums.size - i == 47\n    min = num if nums.size - i == 48\n    min = num if\
    \ nums.size - i == 49\n    min = num if num", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  sum\nend", "  nums.each do |n|\n    min = n\n    n.times do |i|\n\
    \      min = min > nums[i] || nums[i] > 0 ? nums[i] : min\n    end\n  end\n  min\n\
    end", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min\
    \ > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length-1\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums.first\n  for i in 1..nums.size\n\
    \    min = min > nums[i] ? min + nums[i] : nums[i]\n  end\n  min\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    j = i + 1\n    while j < nums.length\n     \
    \ min = min > nums[j] ? nums[j] : min\n      j += 1\n    end\n    return min\n\
    \  end\nend", "  nums.each do |num|\n    min = num\n    sum = 0\n    until sum\
    \ == min do\n      sum += num\n      num.times do |i|\n        min = num if nums[i]\
    \ > min\n      end\n    end\n    return sum\n  end\n  return nil\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index do |num, i|\n\
    \    min = num\n    min = num if nums.size - 1 == i\n    min = num if nums.size\
    \ - 1 == i - 1\n    min = num if nums.size - 1 == i - 2\n    min = num if nums.size\
    \ - 1 == i - 3\n    min = num if nums.size - 1 == i - 4\n    min = num if nums.size\
    \ - 1 == i - 5\n    min = num if nums.size - 1 == i - 6\n    min = num if nums.size\
    \ - 1 == i - 7\n    min = num if nums.size - 1 == i - 8\n    min = num if nums.size\
    \ - 1 == i - 9\n    min = num if nums.size - 1 == i - 10\n    min = num if nums.size\
    \ - 1 == i - 11\n    min = num if nums.size - 1 == i - 12\n    min = num if nums.size\
    \ - 1 == i - 13\n    min = num if nums.size - 1 == i - 14\n    min = num if nums.size\
    \ - 1 == i - 15\n    min = num if nums.size - 1 == i - 16\n    min = num if nums.size\
    \ - 1 == i - 17\n    min = num if nums.size - 1 == i - 18\n    min = num if nums.size\
    \ - 1 == i - 19\n    min = num if nums.size - 1 == i - 20\n    min = num if nums.size\
    \ - 1 == i - 21\n    min = num if nums.size - 1 == i - 22\n    min = num if nums.size\
    \ - 1 == i - 23\n    min = num if nums.size - 1 == i - 24\n    min = num if nums.size\
    \ - 1 == i - 25\n    min = num if nums.size - 1 == i - 26\n    min = num if nums.size\
    \ - 1 == i - 27\n    min = num if nums.size - 1 == i - 28\n    min = num if nums.size\
    \ - 1 == i - 29\n    min = num if nums.size - 1 == i - 30\n    min = num if nums.size\
    \ - 1 == i - 31\n    min = num if nums.size - 1 == i - 32\n    min = num if nums.size\
    \ - 1 == i - 33\n    min = num if nums.size - 1 == i - 34\n    min = num if nums.size\
    \ - 1 == i - 35\n    min = num if nums.size - 1 == i - 36\n    min = num if nums.size\
    \ - 1 == i - 37\n    min = num if nums.size - 1 == i - 38\n    min = num if nums.size\
    \ - 1 == i - 39\n    min = num if nums.size - 1 == i - 40\n    min = num if nums.size\
    \ - 1 == i - 41\n    min = num if nums.size - 1 == i - 42\n    min = num if nums.size\
    \ - 1 == i - 43\n    min = num if nums.size - 1 == i - 44\n    min = ", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum <\
    \ 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n   \
    \   sum = 0\n    end\n  end\n  sum\nend\n</cell>\n<cell>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<cell>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    The Ruby Programming Language\nRuby is a dynamic programming language that runs\
    \ on the Ruby Virtual Machine. Ruby programs are written in Ruby code that is\
    \ interpreted and executed in the context of a Ruby Virtual Machine. Ruby programs\
    \ are written in Ruby code that is interpreted and executed in the context of\
    \ a Ruby Virtual Machine.", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    (i..nums.size-1).each do |j|\n      min = min\
    \ > nums[j] ? min : nums[j]\n    end\n    return min\n  end\nend", "  nums.each\
    \ do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n    end\n   \
    \ return sum if sum < 0\n  end\n  0\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  sum\nend", "  nums.each do |num|\n    min = num\n    max = num\n   \
    \ until nums.empty? do\n      sum = nums.shift\n      next if sum < min or sum\
    \ > max\n      min = sum\n      max = sum\n    end\n    return min\n  end\nend",
  "  nums.reduce(:+)\nend", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n\
    \    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  return sum\nend", "  nums.each_with_index do\
    \ |n, i|\n    min = nums[i]\n    min = i if nums[i] == min || nums[i] > min &&\
    \ nums[i] <= nums[i+1]\n    nums[i] = min\n  end\n  nums.reduce(:+)\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThis solution doesn't work for negative numbers.\
    \ `minSubArraySum([-1, -2, -3])` returns `-6` instead of `-3`.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for negative numbers. `minSubArraySum([-1, -2, -3])` returns\
    \ `-6` instead of `-3`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    j = i + 1\n    while j < nums.length && nums[j]\
    \ < min\n      min = nums[j]\n      j += 1\n    end\n    nums[i] = min\n  end\n\
    \  nums.reduce(:+)\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty? do\n      sum = nums.shift\n      if sum < min then\n \
    \       min = sum\n      elsif sum > max then\n        max = sum\n      else\n\
    \        break\n      end\n    end\n    return min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.reduce(:+)\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min\
    \ = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index\
    \ {|x| x + min >= max })\n    end\n    return min\n  end\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\n  nil\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    (i..nums.size-1).each do |j|\n      min = min\
    \ + nums[j] if nums[j] > 0\n    end\n    return min if min > 0\n  end\nend\n</cell>\n\
    <cell>", "  nums.each do |n|\n    min = n\n    n.times do |i|\n      min = min\
    \ > nums[i] ? min : nums[i]\n    end\n    return min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n  sum = 0\n\
    \  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  return sum\nend", "  nums.each do |num|\n    min = num\n  \
    \  max = num\n    until nums.empty? do\n      sum = nums.inject(0) {|sum, num|\
    \ sum + num}\n      next if sum < min or sum > max\n      min = sum\n      max\
    \ = sum\n    end\n    min = max\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n\
    \  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  return sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return\
    \ sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum +=\
    \ nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    min = num if nums.size - i == 1\n    min = num\
    \ if nums.size - i == 2\n    min = num if nums.size - i == 3\n    min = num if\
    \ nums.size - i == 4\n    min = num if nums.size - i == 5\n    min = num if nums.size\
    \ - i == 6\n    min = num if nums.size - i == 7\n    min = num if nums.size -\
    \ i == 8\n    min = num if nums.size - i == 9\n    min = num if nums.size - i\
    \ == 10\n    min = num if nums.size - i == 11\n    min = num if nums.size - i\
    \ == 12\n    min = num if nums.size - i == 13\n    min = num if nums.size - i\
    \ == 14\n    min = num if nums.size - i == 15\n    min = num if nums.size - i\
    \ == 16\n    min = num if nums.size - i == 17\n    min = num if nums.size - i\
    \ == 18\n    min = num if nums.size - i == 19\n    min = num if nums.size - i\
    \ == 20\n    min = num if nums.size - i == 21\n    min = num if nums.size - i\
    \ == 22\n    min = num if nums.size - i == 23\n    min = num if nums.size - i\
    \ == 24\n    min = num if nums.size - i == 25\n    min = num if nums.size - i\
    \ == 26\n    min = num if nums.size - i == 27\n    min = num if nums.size - i\
    \ == 28\n    min = num if nums.size - i == 29\n    min = num if nums.size - i\
    \ == 30\n    min = num if nums.size - i == 31\n    min = num if nums.size - i\
    \ == 32\n    min = num if nums.size - i == 33\n    min = num if nums.size - i\
    \ == 34\n    min = num if nums.size - i == 35\n    min = num if nums.size - i\
    \ == 36\n    min = num if nums.size - i == 37\n    min = num if nums.size - i\
    \ == 38\n    min = num if nums.size - i == 39\n    min = num if nums.size - i\
    \ == 40\n    min = num if nums.size - i == 41\n    min = num if nums.size - i\
    \ == 42\n    min = num if nums.size - i == 43\n    min = num if nums.size - i\
    \ == 44\n    min = num if nums.size - i == 45\n    min = num if nums.size - i\
    \ == 46\n    min = num if nums.size - i == 47\n    min = num if nums.size - i\
    \ == 48\n    min = num if nums.size - i == 49\n    min = num if num", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty? do\n      sum\
    \ = nums.shift\n      min = num if sum < min\n      max = num if sum > max\n \
    \   end\n    return min if min != max\n  end\nend", "  nums.reduce(:+)\nend",
  "  nums.each do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i]\
    \ || nums[i] > 0 ? nums[i] : min\n    end\n    return min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  return sum\n\
    end", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min\
    \ > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.reduce(:+)\nend", " \
    \ nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\n  \
    \    sum = nums.shift\n      min = num if sum < min\n      max = num if sum >\
    \ max\n    end\n    return min if min != max\n  end\n  return nil\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min\
    \ = nums.min {|a, b| a + b}\n      max = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index{|x|\
    \ x > min and x < max})\n    end\n    return min\n  end\nend", "  nums.each do\
    \ |n|\n    n.times do |i|\n      min = nums.min { |a, b| a + b }\n      nums.delete_at(i)\n\
    \      break if min == 0\n    end\n  end\n  nums.min\nend", "  nums.sort!\n  sum\
    \ = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.each do |n|\n    min = n\n    n.times\
    \ do |i|\n      min = min > nums[i] || nums[i] > 0 ? min : nums[i]\n    end\n\
    \    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n  end\n  return sum\nend", "  nums.each do |n|\n    sum =\
    \ n\n    n.times do |i|\n      sum = sum + nums[i]\n    end\n    return sum if\
    \ sum < 0\n  end\n  return 0\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n  end\n  sum\nend", "  nums.sort!\n  min = nums.first\n \
    \ for i in 1..nums.size\n    min = min > nums[i] ? min + nums[i] : nums[i]\n \
    \ end\n  min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n   \
    \ sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      sum = nums.shift\n      next if sum < min or sum > max\n      min\
    \ = sum\n      max = sum\n    end\n    return min\n  end\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\n  nil\nend", "  nums.sort!\n  sum\
    \ = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      sum = nums.shift\n      min = min if sum < min\n      max = max if sum\
    \ > max\n    end\n    return min if min != max\n  end\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ {|a, b| a + b}\n      max = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i]\
    \ || nums[i] > 0 ? min : nums[i]\n    end\n    return min\n  end\nend", "  nums.sort!\n\
    \  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.reduce(:+)\nend", "  nums.each do |n|\n    min =\
    \ n\n    n.times do |i|\n      min = min > nums[i] || nums[i] > 0 ? min : nums[i]\n\
    \    end\n    return min\n  end\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b\
    \ }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(0)\n    end\n\
    \    return min if min > max\n  end\n  return nil\nend", "  nums.sort!\n  sum\
    \ = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n  end\n  return sum\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend\n</cell>\n<cell>", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  min = nums[0]\n  for i\
    \ in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i]\
    \ ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n  min = nums[0]\n  for i\
    \ in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.each_with_index do |num, i|\n    min = num\n    min = num if nums.size -\
    \ 1 == i\n    min = num if nums.size - 2 == i\n    min = num if nums.size - 3\
    \ == i\n    min = num if nums.size - 4 == i\n    min = num if nums.size - 5 ==\
    \ i\n    min = num if nums.size - 6 == i\n    min = num if nums.size - 7 == i\n\
    \    min = num if nums.size - 8 == i\n    min = num if nums.size - 9 == i\n  \
    \  min = num if nums.size - 10 == i\n    min = num if nums.size - 11 == i\n  \
    \  min = num if nums.size - 12 == i\n    min = num if nums.size - 13 == i\n  \
    \  min = num if nums.size - 14 == i\n    min = num if nums.size - 15 == i\n  \
    \  min = num if nums.size - 16 == i\n    min = num if nums.size - 17 == i\n  \
    \  min = num if nums.size - 18 == i\n    min = num if nums.size - 19 == i\n  \
    \  min = num if nums.size - 20 == i\n    min = num if nums.size - 21 == i\n  \
    \  min = num if nums.size - 22 == i\n    min = num if nums.size - 23 == i\n  \
    \  min = num if nums.size - 24 == i\n    min = num if nums.size - 25 == i\n  \
    \  min = num if nums.size - 26 == i\n    min = num if nums.size - 27 == i\n  \
    \  min = num if nums.size - 28 == i\n    min = num if nums.size - 29 == i\n  \
    \  min = num if nums.size - 30 == i\n    min = num if nums.size - 31 == i\n  \
    \  min = num if nums.size - 32 == i\n    min = num if nums.size - 33 == i\n  \
    \  min = num if nums.size - 34 == i\n    min = num if nums.size - 35 == i\n  \
    \  min = num if nums.size - 36 == i\n    min = num if nums.size - 37 == i\n  \
    \  min = num if nums.size - 38 == i\n    min = num if nums.size - 39 == i\n  \
    \  min = num if nums.size - 40 == i\n    min = num if nums.size - 41 == i\n  \
    \  min = num if nums.size - 42 == i\n    min = num if nums.size - 43 == i\n  \
    \  min = num if nums.size - 44 == i\n    min = num if nums.size - 45 == i\n  \
    \  min = num if ", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum\
    \ = sum + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the correct answer. Try it out\
    \ with [2,3,4] and [1,2,3,4,5,6,7,8,9] as the input. Your code returns -6 instead\
    \ of 1.\n<|/ c |>\n<| c |>\nI tested it and it returns 1.\n<|/ c |>\n<| c |>\n\
    I tested it and it returns 1. I tested it again and it returns 1. I tested it\
    \ again and it returns 1. I tested it again and it returns 1. I tested it again\
    \ and it returns 1. I tested it again and it returns 1. I tested it again and\
    \ it returns 1. I tested it again and it returns 1. I tested it again and it returns\
    \ 1. I tested it again and it returns 1. I tested it again and it returns 1. I\
    \ tested it again and it returns 1. I tested it again and it returns 1. I tested\
    \ it again and it returns 1. I tested it again and it returns 1. I tested it again\
    \ and it returns 1. I tested it again and it returns 1. I tested it again and\
    \ it returns 1. I tested it again and it returns 1. I tested it again and it returns\
    \ 1. I tested it again and it returns 1. I tested it again and it returns 1. I\
    \ tested it again and it returns 1. I tested it again and it returns 1. I tested\
    \ it again and it returns 1. I tested it again and it returns 1. I tested it again\
    \ and it returns 1. I tested it again and it returns 1. I tested it again and\
    \ it returns 1. I tested it again and it returns 1. I tested it again and it returns\
    \ 1. I tested it again and it returns 1. I tested it again and it returns 1. I\
    \ tested it again and it returns 1. I tested it again and it returns 1. I tested\
    \ it again and it returns 1. I tested it again and it returns 1. I tested it again\
    \ and it returns 1. I tested it again and it returns 1. I tested it again and\
    \ it returns 1. I tested it again and it returns 1. I tested it again and it returns\
    \ 1. I tested it again and it returns 1. I tested it again and it returns 1. I\
    \ tested it again and it returns 1. I tested it again and it returns 1. I tested\
    \ it again and it returns 1. I tested it again and it returns 1. I tested it again\
    \ and it returns 1. I tested it again and it returns 1. I tested it again and\
    \ it returns 1. I tested it again and it returns 1. I tested it again and it returns\
    \ 1. I tested it again and it returns 1. I tested it again and it returns 1. I\
    \ tested it again and it returns 1. I tested ", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  sum\nend\n</cell>\n<cell>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<cell>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven\
    \ a binary tree and a sum, determine if the tree has a root-to-leaf path such\
    \ that adding up all the values along the path equals the given sum.", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      min = sum if sum < min\n      max = sum if sum > max\n    end\n    return\
    \ min if min != max\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length-1\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    min = num if nums.size - i == 1\n    nums.slice!(i..-1).each\
    \ do |num|\n      min = num if num + min > num\n    end\n    return min\n  end\n\
    end", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min\
    \ > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  return sum\nend", "  nums.each do |num|\n    min = num\n    max\
    \ = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n   \
    \   max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n \
    \   end\n    return min\n  end\nend", "  nums.each do |num|\n    min = num\n \
    \   max = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n\
    \      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\n  0\nend", "  nums.each do |n|\n\
    \    min = n\n    n.times do |i|\n      min = min > nums[i] || nums[i] > 0 ? min\
    \ : nums[i]\n    end\n    return min\n  end\nend", "  nums.each_with_index do\
    \ |n, i|\n    min = nums[i]\n    j = i + 1\n    while j < nums.length and nums[j]\
    \ < min\n      min = nums[j]\n      j += 1\n    end\n    nums[i] = min\n  end\n\
    \  nums.reduce(:+)\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n      max =\
    \ nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n    end\n\
    \    return min if min > max\n  end\n  nil\nend", "  nums.each_with_index do |n,\
    \ i|\n    min = nums[i]\n    j = i + 1\n    while j < nums.length\n      min =\
    \ nums[j] if n < min\n      j += 1\n    end\n    min\n  end\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    min = i if n < min\n    nums.delete_at(i)\n\
    \    nums.unshift(min) if min != 0\n  end\n  nums.inject(:+)\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=ruby,arrays |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
