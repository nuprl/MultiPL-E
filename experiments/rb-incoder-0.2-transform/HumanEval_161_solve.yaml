name: HumanEval_161_solve
language: rb
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# >>> solve.call(\"1234\")\n# \"4321\"\n# >>> solve.call(\"\
  ab\")\n# \"AB\"\n# >>> solve.call(\"#a@C\")\n# \"#A@c\"\ndef solve(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"\
  ))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n\
  \    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
  2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
  #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
completions: ["  s.gsub!(/[^A-Za-z]/,'')\n  s.gsub!(/[A-Z]/){|s| s.upcase}\n  s.gsub!(/[a-z]/){|s|\
    \ s.downcase}\n  s\nend", "  s.chars.each do |c|\n    if c.upcase == c\n     \
    \ s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase,\
    \ c.upcase)\n    end\n  end\n  s.chars.reverse!\n  s\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase\
    \ }\n  s.gsub!(/[^A-Z]/i) { |s| s.downcase }\n  s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i)\
    \ { |x| x.upcase }\n  s.gsub!(/[a-z]/i) { |x| x.downcase }\n  s\nend", "  s.chars.each\
    \ do |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.upcase == c\n\
    \    next if c.downcase == c\n    next if c.upcase == c.downcase\n    next if\
    \ c.upcase == c.downcase.upcase\n    next if c.downcase == c.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase\n    next if c.downcase ==\
    \ c.upcase.downcase.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |c| c.upcase }\n  s.gsub!(/[a-z]/i) { |c|\
    \ c.downcase }\n  s\nend", "  s.chars.each do |c|\n    if c.upcase == c\n    \
    \  s = s.gsub(c.upcase, c).gsub(c.downcase, c.upcase)\n    elsif c.downcase ==\
    \ c\n      s = s.gsub(c.downcase, c.downcase).gsub(c.upcase, c.downcase)\n   \
    \ end\n  end\n  s.chars.join\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ your solution, but I believe it can be done more efficiently with one `gsub`\
    \ call. Also, `gsub` can take a block, which would allow you to make a single\
    \ `gsub` call that would replace all instances of one character with another character\
    \ in a single call.\n<|/ c |>\n<| c |>\nYes, I agree with you. My solution was\
    \ more for educational purposes than for production use. Thanks for your comment.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.chars.each do |c|\n    next\
    \ if c.nil?\n    next if c.empty?\n    next if c.start_with?(\"#\")\n    next\
    \ if c.start_with?(\"$\")\n    next if c.start_with?(\"%\")\n    next if c.start_with?(\"\
    &\")\n    next if c.start_with?(\"*\")\n    next if c.start_with?(\"(\")\n   \
    \ next if c.start_with?(\")\")\n    next if c.start_with?(\"+\")\n    next if\
    \ c.start_with?(\"-\")\n    next if c.start_with?(\"=\")\n    next if c.start_with?(\"\
    ?\")\n    next if c.start_with?(\":\")\n    next if c.start_with?(\";\")\n   \
    \ next if c.start_with?(\",\")\n    next if c.start_with?(\".\")\n    next if\
    \ c.start_with?(\"!\")\n    next if c.start_with?(\"~\")\n    next if c.start_with?(\"\
    `\")\n    next if c.start_with?(\"'\")\n    next if c.start_with?(\"[\")\n   \
    \ next if c.start_with?(\"]\")\n    next if c.start_with?(\"{\")\n    next if\
    \ c.start_with?(\"}\")\n    next if c.start_with?(\"|\")\n    next if c.start_with?(\"\
    ;\")\n    next if c.start_with?(\",\")\n    next if c.start_with?(\".\")\n   \
    \ next if c.start_with?(\"!\")\n    next if c.start_with?(\"~\")\n    next if\
    \ c.start_with?(\"`\")\n    next if c.start_with?(\"'\")\n    next if c.start_with?(\"\
    [\")\n    next if c.start_with?(\"]\")\n    next if c.start_with?(\"{\")\n   \
    \ next if c.start_with?(\"}\")\n    next if c.start_with?(\"|\")\n    next if\
    \ c.start_with?(\";\")\n    next if c.start_with?(\",\")\n    next if c.start_with?(\"\
    .\")\n    next if c.start_with?(\"!\")\n    next if c.start_with?(\"~\")\n   \
    \ next if c.start_with?(\"`\")\n    next if c.start_with?(\"'\")\n    next if\
    \ c.start_with?(\"[\")\n    next if c.start_with?(\"]\")\n    next if c.start_with?(\"\
    {\")\n    next if c.start_with?(\"}\")", "  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby,string |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.reverse!\n\
    \  s\nend\n</code>\n<|/ a tags=ruby,string,regex |>\n<| c |>\nI like this solution,\
    \ but I wonder why `gsub!` doesn't return the modified string?\n<|/ c |>\n<| c\
    \ |>\n`gsub!` modifies the string in place. `gsub` returns a new string with the\
    \ modifications.\n<|/ c |>\n<| c |>\nI see, thanks. I guess I should read more\
    \ about `gsub` then.\n<|/ c |>\n<| c |>\n`gsub!` modifies the string in place.\
    \ `gsub` returns a new string with the modifications.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  s.chars.each do\
    \ |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.upcase == c\n \
    \   next if c.downcase == c\n    next if c.upcase == c.downcase\n    next if c.downcase\
    \ == c.upcase\n    next if c.upcase == c.downcase.upcase\n    next if c.downcase\
    \ == c.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase\n \
    \   next if c.downcase == c.upcase.downcase.upcase.downcase\n    next if c.upcase\
    \ == c.downcase.upcase.downcase.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.up",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\nend\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I believe it would be better to use\
    \ the `gsub!` method instead of `gsub` since it modifies the string in place.\
    \ Also, `gsub!` will return the modified string so you can chain it like `s.gsub!(/[^a-z]/i)\
    \ { |x| x.upcase }.reverse!`\n<|/ c |>\n<| c |>\nThanks for the suggestions. I\
    \ updated the answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  s.downcase!\n\
    \  s.gsub(/[^a-z]/i) { |x| x.upcase }\n  s.gsub(/[^A-Z]/i) { |x| x.downcase }\n\
    \  s\nend", "  s.chars.each do |c|\n    next if c.nil?\n    next if c.empty?\n\
    \    next if c.upcase == c\n    next if c.downcase == c\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase.upcase\n    next if c.downcase\
    \ == c.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase\n \
    \   next if c.upcase == c.downcase.upcase.downcase\n    next if c.downcase ==\
    \ c.upcase.downcase.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.up",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s.gsub!(/[a-z]/i, '')\n\
    \  s\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  s.chars.each\
    \ do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase, c.downcase)\n    elsif\
    \ c.downcase == c\n      s = s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s.chars.join\n\
    end", "  s.chars.each do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase,\
    \ c.downcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase, c.upcase)\n\
    \    end\n  end\n  s.chars.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby |>\n<|\
    \ c |>\nThis doesn't work for `solve.call(\"ab\")` which should return `\"AB\"\
    `.\n<|/ c |>\n<| c |>\nI believe that `s.chars.each do |c|` should be `s.each_char\
    \ do |c|`\n<|/ c |>\n<| c |>\nI believe that `s.chars.each do |c|` should be `s.each_char\
    \ do |c|`\n<|/ c |>\n<| c |>\nI believe that `s.chars.each do |c|` should be `s.each_char\
    \ do |c|`\n<|/ c |>\n<| c |>\nI believe that `s.chars.each do |c|` should be `s.each_char\
    \ do |c|`\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }\n  s.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nI like the `gsub` solution, it's more elegant than my solution. Thanks!\n\
    <|/ c |>\n<| c |>\nI like your solution as well, it's more elegant than my solution.\
    \ Thanks!\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s = s.to_s\n  s.chars.each\
    \ do |c|\n    case = c.upcase if c.is_a? String\n    case = c.downcase if c.is_a?\
    \ String\n    case = c.to_s if c.is_a? String\n    case = c.to_s if c.is_a? Fixnum\n\
    \  end\n  s\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you\
    \ have a string like \"#a@C\"\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ with strings with hashes and numbers\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with strings with hashes and numbers\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.reverse!\n  s\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| a dscore=0 |>\n<code>", "  s.gsub!(/[^A-Za-z]/)\
    \ do |x|\n    x.upcase if x.downcase == x\n    x.downcase if x.upcase == x\n \
    \   x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n\
    \    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n\
    \    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n\
    \  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n    x.upcase\
    \ if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase\
    \ if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/)\
    \ do |x|\n    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n \
    \   x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n\
    \    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n\
    \    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n\
    \  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n    x.upcase\
    \ if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase\
    \ if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/)\
    \ do |x|\n    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n \
    \   x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n\
    \    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n\
    \    x.downcase if ", "  s.chars.each do |c|\n    next if c.nil?\n    next if\
    \ c.empty?\n    next if c.upcase == c\n    next if c.downcase == c\n    next if\
    \ c.upcase == c.downcase\n    next if c.upcase == c.downcase.upcase\n    next\
    \ if c.downcase == c.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase\n    next if c.downcase ==\
    \ c.upcase.downcase.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.up",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\nend", "  s.downcase!\n\
    \  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[a-z]/i) { |s| s.downcase }\n\
    \  s\nend\n</code>\n<|/ a tags=ruby,string,regex |>\n<| c |>\nThis doesn't work\
    \ if the string contains numbers, e.g. \"#a@C\".\n<|/ c |>\n<| c |>\n: I didn't\
    \ see that requirement in the question. I'll update my answer.\n<|/ c |>\n<| c\
    \ |>\n: I added a solution that doesn't require the string to be reversed twice.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require the string to be\
    \ reversed twice.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require\
    \ the string to be reversed twice.\n<|/ c |>\n<| a tags=ruby,string,regex |>\n\
    <code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[a-z]/i)\
    \ { |s| s.downcase }\n  s\nend", "  s.gsub!(/[a-z]/) { |x| x.upcase }\n  s.gsub!(/[A-Z]/)\
    \ { |x| x.downcase }\n  s.gsub!(/[^a-zA-Z]/) { |x| x.reverse }\n  s\nend", " \
    \ s.chars.each do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase, c).gsub(c.downcase,\
    \ c.upcase)\n    end\n  end\n  s.chars.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using gsub. Maybe with regular expressions?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use gsub. Hope it helps.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without using gsub. Maybe with regular\
    \ expressions?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use gsub. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.downcase!\n  s.gsub!(/[a-z]/)\
    \ { |c| c.upcase }\n  s.gsub!(/[^a-z]/) { |c| c.downcase }\n  s\nend", "  s =\
    \ s.to_s\n  s.chars.each do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase,\
    \ c.downcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase, c.upcase)\n\
    \    end\n  end\n  s.chars.reverse!\n  s\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>", "  s.chars.each do |c|\n    if c.upcase == c\n     \
    \ s = s.gsub(c.upcase, c).gsub(c.downcase, c.upcase)\n    elsif c.downcase ==\
    \ c\n      s = s.gsub(c.downcase, c.downcase).gsub(c.upcase, c.downcase)\n   \
    \ end\n  end\n  s.chars.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nI like your solution, but I wonder why you used `gsub` instead of `tr`?\n\
    <|/ c |>\n<| c |>\n`tr` only replaces one character at a time, so it can't replace\
    \ multiple characters at once.\n<|/ c |>\n<| c |>\n`tr` replaces multiple characters\
    \ at once, just like `gsub` does. `tr` is more efficient than `gsub` because it\
    \ doesn't have to scan the string multiple times to find all the matches.\n<|/\
    \ c |>\n<| c |>\n`tr` is more efficient than `gsub` because it doesn't have to\
    \ scan the string multiple times to find all the matches. `tr` is more efficient\
    \ than `gsub` because it doesn't have to scan the string multiple times to find\
    \ all the matches. `tr` is more efficient than `gsub` because it doesn't have\
    \ to scan the string multiple times to find all the matches. `tr` is more efficient\
    \ than `gsub` because it doesn't have to scan the string multiple times to find\
    \ all the matches. `tr` is more efficient than `gsub` because it doesn't have\
    \ to scan the string multiple times to find all the matches. `tr` is more efficient\
    \ than `gsub` because it doesn't have to scan the string multiple times to find\
    \ all the matches. `tr` is more efficient than `gsub` because it doesn't have\
    \ to scan the string multiple times to find all the matches. `tr` is more efficient\
    \ than `gsub` because it doesn't have to scan the string multiple times to find\
    \ all the matches.\n<|/ c |>\n<| c |>\n`tr` is more efficient than `gsub` because\
    \ it doesn't have to scan the string multiple times to find all the matches. `tr`\
    \ is more efficient than `gsub` because it doesn't have to scan the string multiple\
    \ times to find all the matches. `tr` is more efficient than `gsub` because it\
    \ doesn't have to scan the string multiple times to find all the matches. `tr`\
    \ is more efficient than `gsub` because it doesn't have to scan the string multiple\
    \ times to find all the matches. `tr` is more efficient than `gsub` because it\
    \ doesn't have to ", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n \
    \ s.reverse!\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like your solution,\
    \ but I wonder why `s.gsub(/[^a-z]/i) { |s| s.upcase }.reverse!` doesn't work?\n\
    <|/ c |>\n<| c |>\nBecause `gsub` returns the modified string, which is not being\
    \ reversed. `gsub!` modifies the string in place. `gsub` returns the modified\
    \ string and `gsub!` modifies the string in place.\n<|/ c |>\n<| c |>\nI see,\
    \ thank you. I'm new to Ruby, so I didn't know about `gsub!`.\n<|/ c |>\n<| a\
    \ dscore=3 |>\n<code>", "  s.chars.reverse_each.with_index.reduce(:+).to_s\nend",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.reverse!\nend", "  s.downcase!\n\
    \  s.gsub(/[[:alpha:]]/) { |c| c.upcase }\n  s.gsub(/[^[:alpha:]]/) { |c| c.downcase\
    \ }\n  s\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  s.chars.each\
    \ do |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.downcase ==\
    \ c\n    next if c.upcase == c\n    next if c.swapcase == c\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.swapcase\n    next if c.downcase ==\
    \ c.swapcase\n    next if c.upcase == c.downcase.swapcase\n    next if c.downcase\
    \ == c.swapcase.upcase\n    next if c.swapcase == c.upcase.downcase\n    next\
    \ if c.swapcase == c.upcase.swapcase.downcase\n    next if c.swapcase == c.upcase.swapcase.swapcase\n\
    \    next if c.upcase.downcase == c.swapcase.upcase.downcase.swapcase\n    next\
    \ if c.upcase.swapcase.downcase == c.swapcase.upcase.swapcase.downcase.swapcase\n\
    \    next if c.upcase.swapcase.swapcase == c.swapcase.upcase.swapcase.swapcase.downcase.swapcase\n\
    \    next if c.upcase.swapcase.swapcase.upcase.downcase.swapcase == c.swapcase.upcase.swapcase.upcase.downcase.swapcase.downcase.swapcase\n\
    \    next if c.upcase.swapcase.swapcase.upcase.downcase.swapcase.swapcase == c.swapcase.upcase.swapcase.upcase.downcase.swapcase.downcase.swapcase.downcase.swapcase\n\
    \    next if c.upcase.swapcase.swapcase.upcase.downcase.swapcase.swapcase.downcase.swapcase\
    \ == c.swapcase.upcase.swapcase.upcase.downcase.swapcase.downcase.swapcase.downcase.swapcase\n\
    \    next if c.upcase.swapcase.swapcase.upcase.downcase.swapcase.swapcase.downcase.swapcase.downcase.swapcase\
    \ == c.swapcase.upcase.swapcase.upcase.downcase.swapcase.downcase.swapcase.downcase.swapcase.downcase.swapcase\n\
    \    next if c.upcase.swapcase.swapcase.upcase.downcase.swapcase.swapcase.downcase.swapcase.downcase.swapcase.downcase.swapcase\
    \ == c.swapcase.upcase.swapcase.upcase.downcase.swapcase.downcase.swapcase.downcase.swapcase.downcase.swapcase\n\
    \    next if c.upcase.swapcase.swapcase.upcase.downcase.swapcase.swapcase.downcase.swapcase.downcase.swapcase.downcase.swapcase\
    \ == c.swapcase.upcase.swapcase.upcase.downcase.swapcase.downcase.swapcase.downcase.swapcase.downcase.swapcase\n\
    \    next if c.up", "  s.downcase!\n  s.gsub(/[^a-z]/i) { |s| s.upcase }\nend",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.reverse!\n  s\nend",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[a-z]/i) { |s|\
    \ s.downcase }\n  s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |c| c.upcase\
    \ }\n  s.gsub!(/[a-z]/i) { |c| c.downcase }\n  s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }\n  s.reverse!\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i) {\
    \ |s| s.upcase }\n  s.reverse!\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c\
    \ |>\nI like this solution, it's very concise and easy to understand. Thanks!\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n\
    \  s.reverse!\n  s\nend\n</code>\n<|/ a tags=ruby,string |>\n<| a dscore=2 |>\n\
    <code>", "  s.chars.each do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase,\
    \ c).gsub(c.downcase, c.upcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase,\
    \ c.downcase).gsub(c.upcase, c.downcase)\n    else\n      s = c\n    end\n  end\n\
    \  s\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  s.downcase!\n\
    \  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[a-z]/i) { |s| s.downcase }\n\
    \  s\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for the answer!\
    \ I appreciate it!\n<|/ c |>\n<| c |>\nI added a more efficient solution that\
    \ doesn't require the downcase/upcase conversion.\n<|/ c |>\n<| c |>\nThanks for\
    \ the update! I appreciate it!\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", " \
    \ s = s.to_s\n  s.gsub!(/[[:alpha:]]/) { |s| s.upcase }\n  s.gsub!(/[[:alpha:]]/)\
    \ { |s| s.downcase }\n  s.gsub!(/[^[:alpha:]]/) { |s| s.reverse }\n  s.gsub!(/[^[:alpha:]]/)\
    \ { |s| s.reverse }\n  s.to_s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x|\
    \ x.upcase }\n  s.gsub!(/[a-z]/i) { |x| x.downcase }\n  s\nend", "  s.gsub!(/[^a-z]/i)\
    \ { |x| x.upcase }\n  s.gsub!(/[a-z]/i) { |x| x.downcase }\n  s\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| a |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s|\
    \ s.upcase }\n  s.gsub!(/[a-z]/i) { |s| s.downcase }\n  s\nend", "  s.chars.each\
    \ do |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.upcase == c\n\
    \    next if c.downcase == c\n    next if c.upcase == c.downcase\n    next if\
    \ c.upcase == c.downcase.upcase\n    next if c.downcase == c.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase\n    next if c.downcase ==\
    \ c.upcase.downcase.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase",
  "  s.chars.each do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase, c.downcase)\n\
    \    elsif c.downcase == c\n      s = s.gsub(c.downcase, c.upcase)\n    end\n\
    \  end\n  s.chars.reverse.join\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis\
    \ doesn't work for `solve.call(\"aB\")` which should return `\"Ab\"`.\n<|/ c |>\n\
    <| c |>\n: I missed that case. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\n`s.chars.reverse.join` can be replaced with `s.reverse`\n<|/\
    \ c |>\n<| c |>\n: Yes, that would work too. Thanks for pointing it out.\n<|/\
    \ c |>\n<| a |>\n<code>", "  s.chars.each do |c|\n    next if c.nil?\n    next\
    \ if c.empty?\n    next if c.upcase == c\n    next if c.downcase == c\n    next\
    \ if c.upcase == c.downcase\n    next if c.downcase == c.upcase\n    next if c.upcase\
    \ == c.downcase.upcase\n    next if c.downcase == c.upcase.downcase\n    next\
    \ if c.upcase == c.downcase.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase\n    next if c.downcase\
    \ == c.upcase.downcase.upcase.downcase.upcase\n    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.", "  s.downcase!\n\
    \  s.gsub(/[^a-z]/i) { |c| c.upcase }\n  s.gsub(/[^A-Z]/i) { |c| c.downcase }\n\
    \  s\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `\"#a@C\"`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the\
    \ answer.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.chars.each do |c|\n\
    \    if c.upcase == c\n      s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase\
    \ == c\n      s = s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s.chars.reverse!\n\
    \  s\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `'a'.upcase\
    \ == 'A'` returns `false`, so `s.gsub(c.upcase, c.downcase)` returns `s`, which\
    \ is `'aA'`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code\
    \ by reversing the string before reversing the characters.\n<|/ c |>\n<| a |>\n\
    <code>", "  s = s.downcase\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.gsub!(/[a-z]/i)\
    \ { |x| x.downcase }\n  s\nend\n</cell>\n<cell>", "  s.downcase!\n  s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }\n  s.reverse!\nend", "  s.downcase!\n  s.gsub(/[^a-z]/i) {\
    \ |c| c.upcase }\n  s.gsub(/[^A-Z]/i) { |c| c.downcase }\n  s\nend", "  s.downcase!\n\
    \  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.gsub!(/[a-z]/i) { |x| x.downcase }\n\
    \  s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.gsub!(/[a-z]/i)\
    \ { |x| x.downcase }\n  s\nend", "  s.chars.each do |c|\n    if c.upcase == c\n\
    \      s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase == c\n      s =\
    \ s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s.chars.reverse!\n  s\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  s.downcase!\n  s.gsub!(/[a-z]/i)\
    \ do |x|\n    x.upcase if x.upcase == x\n  end\n  s.gsub!(/[^a-z]/i) do |x|\n\
    \    x.downcase if x.downcase == x\n  end\n  s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i) { |s| s.upcase }\n  s\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nI like this solution, but I wonder why `s.gsub!(/[^a-z]/i, '')`\
    \ doesn't work. `gsub!` should replace all occurrences of `[^a-z]` with an empty\
    \ string. Why doesn't it work?\n<|/ c |>\n<| c |>\n`[^a-z]` matches any character\
    \ that's not in the range `a-z`. So `gsub!` replaces every occurrence of `[^a-z]`\
    \ with an empty string. `gsub!` doesn't replace `[^a-z]` with an empty string\
    \ because `[^a-z]` matches any character that's not in the range `a-z`.\n<|/ c\
    \ |>\n<| c |>\nI see. Thanks for the explanation!\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\n\
    \  s\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\n`s.gsub(/[^a-z]/i) { |x|\
    \ x.upcase }` is the same as `s.gsub(/[^a-z]/) { |x| x.upcase }`.\n<|/ c |>\n\
    <| c |>\n: Yes, but `gsub` doesn't modify the string in place. `gsub!` does.\n\
    <|/ c |>\n<| c |>\n: Yes, but `gsub` doesn't modify the string in place. `gsub!`\
    \ does.\n<|/ c |>\n<| c |>\n: Yes, but `gsub` doesn't modify the string in place.\
    \ `gsub!` does.\n<|/ c |>\n<| c |>\n: Yes, but `gsub` doesn't modify the string\
    \ in place. `gsub!` does.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  s.downcase!\n\
    \  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[a-z]/i) { |s| s.downcase }\n\
    \  s\nend", "  s.chars.each do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase,\
    \ c).gsub(c.downcase, c.upcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase,\
    \ c.downcase).gsub(c.upcase, c.downcase)\n    end\n  end\n  s.chars.reverse.join\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for the string \"\
    #a@C\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Did you try\
    \ it?\n<|/ c |>\n<| c |>\nYes, I did. But it didn't work for the string \"#a@C\"\
    \n<|/ c |>\n<| c |>\nI tested it again. Works fine for me. Did you try it again?\n\
    <|/ c |>\n<| c |>\nYes, I did. But it didn't work for the string \"#a@C\"\n<|/\
    \ c |>\n<| a tags=ruby |>\n<code>", "  s.chars.each do |c|\n    if c.upcase ==\
    \ c\n      s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase == c\n     \
    \ s = s.gsub(c.downcase, c.upcase)\n    else\n      s = c\n    end\n  end\n  s.chars.reverse!\n\
    \  s\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,string |>\n<code>", "  s.downcase!\n\
    \  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[a-z]/i) { |s| s.downcase }\n\
    \  s\nend", "  s.chars.each do |c|\n    if c.upcase == c\n      s = s.gsub(c.upcase,\
    \ c.downcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase, c.upcase)\n\
    \    end\n  end\n  s.chars.reverse.join\nend", "  s.chars.each do |c|\n    if\
    \ c.upcase == c\n      s = s.gsub(c.upcase, c.downcase)\n    elsif c.downcase\
    \ == c\n      s = s.gsub(c.downcase, c.upcase)\n    end\n  end\n  s.chars.reverse!\n\
    \  s\nend", "  s.chars.each do |c|\n    next if c.nil?\n    next if c.empty?\n\
    \    next if c.is_a? String\n    next if c.is_a? Fixnum\n    next if c.is_a? Bignum\n\
    \    next if c.is_a? Float\n    next if c.is_a? TrueClass\n    next if c.is_a?\
    \ FalseClass\n    next if c.is_a? NilClass\n    next if c.is_a? Symbol\n    next\
    \ if c.is_a? Fixnum\n    next if c.is_a? Bignum\n    next if c.is_a? Float\n \
    \   next if c.is_a? TrueClass\n    next if c.is_a? FalseClass\n    next if c.is_a?\
    \ NilClass\n    next if c.is_a? Symbol\n    next if c.is_a? Fixnum\n    next if\
    \ c.is_a? Bignum\n    next if c.is_a? Float\n    next if c.is_a? TrueClass\n \
    \   next if c.is_a? FalseClass\n    next if c.is_a? NilClass\n    next if c.is_a?\
    \ Symbol\n    next if c.is_a? Fixnum\n    next if c.is_a? Bignum\n    next if\
    \ c.is_a? Float\n    next if c.is_a? TrueClass\n    next if c.is_a? FalseClass\n\
    \    next if c.is_a? NilClass\n    next if c.is_a? Symbol\n    next if c.is_a?\
    \ Fixnum\n    next if c.is_a? Bignum\n    next if c.is_a? Float\n    next if c.is_a?\
    \ TrueClass\n    next if c.is_a? FalseClass\n    next if c.is_a? NilClass\n  \
    \  next if c.is_a? Symbol\n    next if c.is_a? Fixnum\n    next if c.is_a? Bignum\n\
    \    next if c.is_a? Float\n    next if c.is_a? TrueClass\n    next if c.is_a?\
    \ FalseClass\n    next if c.is_a? NilClass\n    next if c.is_a? Symbol\n    next\
    \ if c.is_a? Fixnum\n    next if c.is_a? Bignum\n    next if c.is_a? Float\n \
    \   next if c.is_a? TrueClass\n    next if c.is_a? FalseClass\n    next if c.is_a?\
    \ NilClass\n    next if c.is_a", "  s = s.to_s\n  s.gsub!(/[[:alpha:]]/) { |s|\
    \ s.upcase }\n  s.gsub!(/[[:alpha:]]/) { |s| s.downcase }\n  s.gsub!(/[^[:alpha:]]/)\
    \ { |s| s.reverse }\n  s.gsub!(/[^[:alpha:]]/) { |s| s.reverse }\n  s.to_s\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the string contains\
    \ numbers, punctuation, or other non-alphabetic characters.\n<|/ c |>\n<| c |>\n\
    It does work, just tested it. The only thing it doesn't do is handle non-alphabetic\
    \ characters. But I guess that's not what the OP wanted.\n<|/ c |>\n<| c |>\n\
    It does handle non-alphabetic characters. Try it yourself.\n<|/ c |>\n<| c |>\n\
    It doesn't handle non-alphabetic characters. Try it yourself.\n<|/ c |>\n<| c\
    \ |>\nIt does handle non-alphabetic characters. Try it yourself.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "  s.chars.each do |c|\n    next if c.nil?\n    next\
    \ if c.empty?\n    next if c.upcase == c\n    next if c.downcase == c\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase.upcase\n    next\
    \ if c.downcase == c.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase\n    next if c.downcase ==\
    \ c.upcase.downcase.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.up",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.reverse!\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\n`s.downcase!` will mutate the string in place.\
    \ `s.gsub!(/[^a-z]/i) { |s| s.upcase }` will also mutate the string in place.\
    \ `s.reverse!` will mutate the string in place. `s.gsub!(/[^a-z]/i) { |s| s.upcase\
    \ }` will also mutate the string in place. `s.reverse!` will mutate the string\
    \ in place. `s.gsub!(/[^a-z]/i) { |s| s.upcase }` will also mutate the string\
    \ in place. `s.reverse!` will mutate the string in place. `s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }` will also mutate the string in place. `s.reverse!` will mutate\
    \ the string in place. `s.gsub!(/[^a-z]/i) { |s| s.upcase }` will also mutate\
    \ the string in place. `s.reverse!` will mutate the string in place. `s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }` will also mutate the string in place. `s.reverse!` will mutate\
    \ the string in place. `s.gsub!(/[^a-z]/i) { |s| s.upcase }` will also mutate\
    \ the string in place. `s.reverse!` will mutate the string in place. `s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }` will also mutate the string in place. `s.reverse!` will mutate\
    \ the string in place. `s.gsub!(/[^a-z]/i) { |s| s.upcase }` will also mutate\
    \ the string in place.\n<|/ c |>\n<| c |>\n`s.gsub!(/[^a-z]/i) { |s| s.upcase\
    \ }` will also mutate the string in place. `s.reverse!` will mutate the string\
    \ in place. `s.gsub!(/[^a-z]/i) { |s| s.upcase }` will also mutate the string\
    \ in place. `s.reverse!` will mutate the string in place. `s.gsub!(/[^a-z]/i)\
    \ { |s| s.upcase }` will also mutate the string in place. `s.reverse!` will mutate\
    \ the string ", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.gsub!(/[a-z]/i)\
    \ { |x| x.downcase }\n  s\nend", "  s = s.to_s\n  s.gsub!(/[[:alpha:]]/) { |s|\
    \ s.upcase }\n  s.gsub!(/[[:alpha:]]/) { |s| s.downcase }\n  s.gsub!(/[^[:alpha:]]/)\
    \ { |s| s.reverse }\n  s\nend", "  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[a-z]/i)\
    \ { |s| s.downcase }\n  s.gsub!(/[^A-Z]/i) { |s| s.upcase }\n  s.gsub!(/[A-Z]/i)\
    \ { |s| s.downcase }\n  s\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\n\
    I like your solution, but I believe that `s.gsub(/[^A-Z]/) { |s| s.upcase }` can\
    \ be replaced with `s.tr('A-Z', 'a-z')`\n<|/ c |>\n<| c |>\nI agree, but I wanted\
    \ to keep it simple. `tr` is more flexible and more efficient.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, but I wanted to keep it simple and avoid the use of regular\
    \ expressions.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to keep it simple\
    \ and avoid the use of regular expressions.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I wanted to keep it simple and avoid the use of regular expressions.\n<|/\
    \ c |>\n<| a |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
