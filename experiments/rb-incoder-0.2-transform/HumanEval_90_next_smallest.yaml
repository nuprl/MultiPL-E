name: HumanEval_90_next_smallest
language: rb
prompt: "# You are given a list of integers.\n# Write a function next_smallest() that\
  \ returns the 2nd smallest element of the list.\n# Return None if there is no such\
  \ element.\n# >>> next_smallest.call([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest.call([5,\
  \ 1, 4, 3, 2])\n# 2\n# >>> next_smallest.call([])\n# nil\n# >>> next_smallest.call([1,\
  \ 1])\n# nil\ndef next_smallest(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n\
  \    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1,\
  \ 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil,\
  \ candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1,\
  \ candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n\
  \    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n"
completions: ["  lst.sort.last\nend", "  lst.sort\n  lst.shift if lst.size < 2\n \
    \ lst[0]\nend", "  smallest = nil\n  smallest_index = nil\n  lst.each_with_index\
    \ do |element, index|\n    if smallest == nil or element < smallest\n      smallest\
    \ = element\n      smallest_index = index\n    end\n  end\n  return smallest\n\
    end", "  lst.sort.reverse.first\nend", "  lst.sort.find { |x| x < lst.last }\n\
    end", "  lst.sort\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst[0]\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n \
    \ lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst.shift if lst.size > 1\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[1]\nend", "  return nil if lst.empty?\n  lst.sort { |a, b| a <=>\
    \ b }.first(2)[1]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\n\
    end", "  lst.sort.reverse.first\nend", "  lst.sort!\n  lst.shift if lst.size <\
    \ 2\n  lst[0]\nend", "  lst.sort.reverse.first\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend", "  return lst.sort.last.nil?\
    \ ? nil : lst.sort.last\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst[0]\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[0]\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst[0]\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort.find { |x| x < lst.last ? true : false }\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst\nend", "  smallest = nil\n  smallest_index = nil\n  lst.each do |i|\n\
    \    if smallest.nil? || i < smallest\n      smallest = i\n      smallest_index\
    \ = i\n    end\n  end\n  return smallest_index if smallest_index\n  return nil\n\
    end", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift if lst.size < 2\n\
    \  lst[1]\nend", "  smallest = nil\n  smallest_value = nil\n  lst.each do |i|\n\
    \    if smallest_value.nil? or i < smallest_value\n      smallest_value = i\n\
    \      smallest = i\n    end\n  end\n  return smallest\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort.find\
    \ { |x| x < lst.first }\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\n\
    end", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", " \
    \ return lst.sort.last(2) if lst.size >= 2 else None\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n\
    \  lst\nend", "  lst.sort.reverse.first\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst\nend", "  lst.sort.last\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst.shift\nend", "  lst.sort\n  lst.shift if lst.size > 0\n  lst\nend", " \
    \ lst.sort\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  l", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil\
    \ if lst.empty?\n  smallest = lst[0]\n  lst.delete_at(0) if lst.size < 2\n  lst.each\
    \ do |x|\n    if x < smallest\n      smallest = x\n    end\n  end\n  smallest\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort\n  lst.shift\
    \ if lst.size > 1\n  lst[0] if lst.size > 0\nend", "  lst.sort!\n  lst.shift if\
    \ lst.size < 2\n  lst\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst[0]\n\
    end", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift if lst.size == 1\n\
    \  lst[1]\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst[0]\nend", " \
    \ lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil if lst.empty?\n\
    \  lst.sort!\n  lst.shift if lst.size > 1\n  lst\nend", "  return nil if lst.empty?\n\
    \  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst[0]\nend", "  return nil if lst.empty?\n  smallest = lst[0]\n\
    \  smallest_index = lst.index(smallest)\n  lst.delete_at(smallest_index)\n  return\
    \ smallest\nend", "  lst.sort.last\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst.shift if lst.size > 1\n  lst\nend", "  lst.sort\n  lst.shift if lst.size\
    \ < 2\n  lst\nend", "  lst.sort.find { |x| x < lst.last }\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend", "  smallest = nil\n  smallest_value\
    \ = nil\n  lst.each do |value|\n    if value < smallest_value\n      smallest_value\
    \ = value\n      smallest = value\n    end\n  end\n  smallest\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort.reverse.first\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort.each_with_index\
    \ do |e, i|\n    return e if i == 0\n    return e if e < lst[i-1]\n  end\nend",
  "  return nil if lst.empty?\n  lst.sort!\n  lst.shift if lst.size > 1\n  lst\nend",
  "  lst.sort!\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  ", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort\n  lst.shift\
    \ if lst.size < 2\n  lst[0]\nend", "  smallest = nil\n  smallest_index = nil\n\
    \  lst.each do |i|\n    if smallest.nil? || i < smallest\n      smallest = i\n\
    \      smallest_index = i\n    end\n  end\n  return smallest_index if smallest_index\n\
    \  return nil\nend", "  lst.sort.find { |x| x < lst[1] }\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[1]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst\nend", "  lst.sort.find { |x| x < lst.first }.nil? ?\
    \ nil : lst.sort.find { |x| x < lst.first }\nend", "  lst.sort!\n  lst.shift if\
    \ lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n \
    \ lst.shift if lst.size < 2\n  lst[0]\nend", "  smallest = nil\n  smallest_index\
    \ = nil\n  lst.each do |i|\n    if smallest.nil? || i < smallest\n      smallest\
    \ = i\n      smallest_index = lst.index(i)\n    end\n  end\n  return smallest\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  smallest = nil\n  smallest_index\
    \ = nil\n  lst.each do |i|\n    if smallest.nil? || i < smallest\n      smallest\
    \ = i\n      smallest_index = lst.index(i)\n    end\n  end\n  return smallest\n\
    end", "  lst.sort\n  lst.shift if lst.size > 1\n  lst\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n\
    \  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort\n\
    \  lst.shift if lst.size > 1\n  lst\nend", "  lst.sort.find { |x| x < lst.first\
    \ }\nend", "  return lst.sort.first(2).last\nend", "  lst.sort.each_with_index\
    \ do |e, i|\n    return e if i == 0\n    return e if e < lst[i-1]\n  end\nend",
  "  return lst.sort.reverse.first\nend", "  lst.sort.find { |x| x < lst.last }\n\
    end", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n \
    \ lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  ", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort\n  lst.shift if lst.size\
    \ < 2\n  lst\nend", "  lst.sort\n  lst.shift if lst.size > 1\n  lst\nend", " \
    \ lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil\
    \ if lst.empty?\n  lst.sort!\n  lst.shift if lst.size > 1\n  lst\nend", "  lst.sort.first(2).last\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort.find { |x| x < lst.last }\nend", "  lst.sort.reverse.first\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort.last\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst.shift\nend", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift if lst.size\
    \ > 1\n  lst\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst\nend", " \
    \ lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  l", "  return lst.sort.last(2).first\
    \ if lst.size > 1\n  nil\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\n\
    end", "  lst.sort!\n  lst.shift\n  lst.shift\n  return lst.first if lst.size >\
    \ 0\n  nil\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil if lst.empty?\n\
    \  lst.sort!\n  lst.shift if lst.size == 1\n  lst.first\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst.shift if lst.size > 1\n  lst\nend", "  lst.sort.last\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort.last\nend", "  lst.sort.first\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort.last\n\
    end", "  lst.sort.first\nend", "  lst.sort!\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  ", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\n\
    end", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst\nend", "  lst.sort.first(2).last\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst[1]\nend", "  lst.sort.reverse.first\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[0]\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst[1]\nend",
  "  lst.sort!\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n  lst.shift\n\
    \  ", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend", "  lst.sort\n\
    \  lst.shift\n  lst.first\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n \
    \ lst[0]\nend", "  lst.sort\n  lst.shift if lst.size <= 1\n  lst.shift\nend",
  "  smallest = nil\n  smallest_index = nil\n  lst.each do |i|\n    if smallest.nil?\
    \ or i < smallest\n      smallest = i\n      smallest_index = lst.index(i)\n \
    \   end\n  end\n  return smallest\nend", "  lst.sort.find { |x| x < lst.last }\n\
    end", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift if lst.size == 1\n\
    \  lst[1]\nend", "  lst.sort\n  lst.shift if lst.size < 2\n  lst[0]\nend", " \
    \ lst.sort.first\nend", "  lst.sort.find { |x| x < lst.last }\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst.shift if lst.size > 1\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst\nend", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift if lst.size\
    \ > 1\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", " \
    \ lst.sort.each_with_index do |x, i|\n    return x if i == 0\n    return nil unless\
    \ x < lst[i-1]\n  end\nend", "  lst.sort.reverse.first\nend", "  lst.sort.first(2).last\n\
    end", "  lst.sort.reverse.first\nend", "  lst.sort!\n  lst.shift if lst.size <\
    \ 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", " \
    \ smallest = nil\n  smallest_idx = nil\n  lst.each do |i|\n    if smallest.nil?\
    \ or i < smallest\n      smallest = i\n      smallest_idx = i\n    end\n  end\n\
    \  return smallest_idx\nend", "  return nil if lst.empty?\n  lst.sort!\n  lst.shift\
    \ if lst.size > 1\n  lst\nend", "  lst.sort.reverse.first\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[0]\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst.shift if lst.size > 1\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend",
  "  return nil if lst.empty?\n  lst.sort!\n  lst.shift if lst.size > 1\n  lst\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst[0]\nend", "  lst.sort.reverse.first\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
