language: rb
name: HumanEval_47_median
results:
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  len = (l[-1] - l[0]).abs\n  len = (len / 2.0).ceil if len % 2 ==\
    \ 0\n  len.times { |i| l[i] = l[i] / len }\n  l[len / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_sjy8eio\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmp_sjy8eio.rb:17:in `test_median'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_median\n\
    \     16:     candidate = method(:median)\n  => 17:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     18:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     19:     assert_equal(5, candidate.call([5]))\n     20:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005853344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.84 tests/s, 170.84 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg1mzl5lg\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpg1mzl5lg.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005536706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.61 tests/s, 180.61 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size > 1 \n  l[l.length / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpe5rijha3\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpe5rijha3.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.005545874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.31 tests/s, 180.31 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  return l.sort.inject(0.0, :+) / 2.0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn06_qend\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpn06_qend.rb:13:in `test_median'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_median\n\
    \     12:     candidate = method(:median)\n  => 13:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     14:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     15:     assert_equal(5, candidate.call([5]))\n     16:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<7.5>\n===============================================================================\n\
    \nFinished in 0.005567634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.61 tests/s, 179.61 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  return l.sort.last.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7mml1wvm\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmp7mml1wvm.rb:13:in `test_median'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_median\n\
    \     12:     candidate = method(:median)\n  => 13:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     14:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     15:     assert_equal(5, candidate.call([5]))\n     16:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005886246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.89 tests/s, 169.89 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size/2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp0wal13s\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpp0wal13s.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006441206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.25 tests/s, 155.25 assertions/s\n"
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpoqrca18s\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpoqrca18s.rb:16:in `test_median'\n\
    \     13:   def test_median\n     14:     candidate = method(:median)\n     15:\
    \     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.00642344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.68 tests/s, 311.36 assertions/s\n"
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size > 1 \n  l[l.length / 2]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpe5rijha3\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpe5rijha3.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.005545874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.31 tests/s, 180.31 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\n  l.size / 2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsq58c7jt\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpsq58c7jt.rb:16:in `test_median'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_median\n\
    \     15:     candidate = method(:median)\n  => 16:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     17:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     18:     assert_equal(5, candidate.call([5]))\n     19:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006445201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.15 tests/s, 155.15 assertions/s\n"
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjhrn_qp6\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpjhrn_qp6.rb:16:in `test_median'\n\
    \     13:   def test_median\n     14:     candidate = method(:median)\n     15:\
    \     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.006494049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.99 tests/s, 307.97 assertions/s\n"
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length\n  l = l[1..-1] if l.length < 3 else l\n  l.length\n  l.length\
    \ == 1 ? l[0] : (l.length / 2).floor * 2 + l[(l.length / 2).floor]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpiorz9mz9.rb:9: else without rescue is useless

    ...= l[1..-1] if l.length < 3 else l

    ...                           ^~~~

    '
  stdout: ''
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  return l.sort.last.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7mml1wvm\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmp7mml1wvm.rb:13:in `test_median'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_median\n\
    \     12:     candidate = method(:median)\n  => 13:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     14:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     15:     assert_equal(5, candidate.call([5]))\n     16:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005886246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.89 tests/s, 169.89 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
    \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2,\
    \ 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjhrn_qp6\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpjhrn_qp6.rb:16:in `test_median'\n\
    \     13:   def test_median\n     14:     candidate = method(:median)\n     15:\
    \     assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n  => 16:     assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n\
    \     18:     assert_equal(5.5, candidate.call([6, 5]))\n     19:     assert_equal(7,\
    \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n<8.0> expected but was\n<10>\n\ndiff:\n\
    ? 8.0\n? 1  \n? ??  \n===============================================================================\n\
    \nFinished in 0.006494049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.99 tests/s, 307.97 assertions/s\n"
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length\n  l.length / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzfcdmqro\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpzfcdmqro.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006274948 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.36 tests/s, 159.36 assertions/s\n"
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l.sort\n  if l.length < 2\n    return l[0]\n  mid = l.length\
    \ / 2\n  if l[mid] == l[mid-1]\n    return l[mid]\n  else\n    return l[mid-1]\
    \ + l[mid]/2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_median\n    candidate = method(:median)\n    assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n\
    \    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5, candidate.call([6,\
    \ 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpm8l79wxw.rb:18: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpm8l79wxw.rb:27: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659823433
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_median\n    candidate =\
    \ method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0,\
    \ candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n\
    \    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8,\
    \ 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaz9npafp\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpaz9npafp.rb:15:in `test_median'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median\n\
    \     14:     candidate = method(:median)\n  => 15:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     16:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     17:     assert_equal(5, candidate.call([5]))\n     18:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005742235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.15 tests/s, 174.15 assertions/s\n"
  timestamp: 1659792562
- exit_code: 1
  program: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2,\
    \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n\
    \  l.sort!\n  l.length.to_f / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_median\n    candidate = method(:median)\n\
    \    assert_equal(3, candidate.call([3, 1, 2, 4, 5]))\n    assert_equal(8.0, candidate.call([-10,\
    \ 4, 6, 1000, 10, 20]))\n    assert_equal(5, candidate.call([5]))\n    assert_equal(5.5,\
    \ candidate.call([6, 5]))\n    assert_equal(7, candidate.call([8, 1, 3, 9, 9,\
    \ 2, 7]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzvdkl3v\nStarted\nF\n===============================================================================\n\
    Failure: test_median(TestHumanEval)\n/tmp/tmpgzvdkl3v.rb:14:in `test_median'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_median\n\
    \     13:     candidate = method(:median)\n  => 14:     assert_equal(3, candidate.call([3,\
    \ 1, 2, 4, 5]))\n     15:     assert_equal(8.0, candidate.call([-10, 4, 6, 1000,\
    \ 10, 20]))\n     16:     assert_equal(5, candidate.call([5]))\n     17:     assert_equal(5.5,\
    \ candidate.call([6, 5]))\n<3> expected but was\n<2.5>\n===============================================================================\n\
    \nFinished in 0.005668876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.40 tests/s, 176.40 assertions/s\n"
  timestamp: 1659792562
