name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\
  \n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.upcase == char.next\n\
    \      new_message << char.upcase\n    else\n      new_message << char.next\n\
    \    end\n  end\n  new_message\nend", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase + letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    ", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase if char.upcase\
    \ == char\n    char = char.downcase if char.downcase == char\n    char = char.swapcase\n\
    \    char = char.gsub(/[AEIOUaeiou]/, 'A')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'I')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'O')\n    char = char.gsub(/[AEIOUaeiou]/, 'U')\n    new_message << char\n \
    \ end\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ I added a more concise version that doesn't require you to write any methods.\
    \ I hope it helps!\n<|/ c |>\n<| c |>\nThanks so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/i, \"A\")\n  message.gsub!(/[aeiou]/i, \"a\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"E\")\n  message.gsub!(/[AEIOU]/i, \"e\")\n  message.gsub!(/[AEIOU]/i, \"I\"\
    )\n  message.gsub!(/[AEIOU]/i, \"i\")\n  message.gsub!(/[AEIOU]/i, \"O\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"o\")\n  message.gsub!(/[AEIOU]/i, \"U\")\n  message.gsub!(/[AEIOU]/i, \"u\"\
    )\n  message.gsub!(/[AEIOU]/i, \"Y\")\n  message.gsub!(/[AEIOU]/i, \"y\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"A\")\n  message.gsub!(/[AEIOU]/i, \"a\")\n  message.gsub!(/[AEIOU]/i, \"E\"\
    )\n  message.gsub!(/[AEIOU]/i, \"e\")\n  message.gsub!(/[AEIOU]/i, \"I\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"i\")\n  message.gsub!(/[AEIOU]/i, \"O\")\n  message.gsub!(/[AEIOU]/i, \"o\"\
    )\n  message.gsub!(/[AEIOU]/i, \"U\")\n  message.gsub!(/[AEIOU]/i, \"u\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"Y\")\n  message.gsub!(/[AEIOU]/i, \"y\")\n  message.gsub!(/[AEIOU]/i, \"A\"\
    )\n  message.gsub!(/[AEIOU]/i, \"a\")\n  message.gsub!(/[AEIOU]/i, \"E\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"e\")\n  message.gsub!(/[AEIOU]/i, \"I\")\n  message.gsub!(/[AEIOU]/i, \"i\"\
    )\n  message.gsub!(/[AEIOU]/i, \"O\")\n  message.gsub!(/[AEIOU]/i, \"o\")\n  ",
  "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter.upcase!\n\
    \    letter.gsub!(/[aeiou]/, \"A\")\n    letter.gsub!(/[aeiou]/, \"E\")\n    letter.gsub!(/[aeiou]/,\
    \ \"I\")\n    letter.gsub!(/[aeiou]/, \"O\")\n    letter.gsub!(/[aeiou]/, \"U\"\
    )\n    letter.gsub!(/[aeiou]/, \"a\")\n    letter.gsub!(/[aeiou]/, \"e\")\n  \
    \  letter.gsub!(/[aeiou]/, \"i\")\n    letter.gsub!(/[aeiou]/, \"o\")\n    letter.gsub!(/[aeiou]/,\
    \ \"u\")\n    letter.gsub!(/[aeiou]/, \"A\")\n    letter.gsub!(/[aeiou]/, \"E\"\
    )\n    letter.gsub!(/[aeiou]/, \"I\")\n    letter.gsub!(/[aeiou]/, \"O\")\n  \
    \  letter.gsub!(/[aeiou]/, \"U\")\n    letter.gsub!(/[aeiou]/, \"a\")\n    letter.gsub!(/[aeiou]/,\
    \ \"e\")\n    letter.gsub!(/[aeiou]/, \"i\")\n    letter.gsub!(/[aeiou]/, \"o\"\
    )\n    letter.gsub!(/[aeiou]/, \"u\")\n    new_message << letter\n  end\n  new_message\n\
    end", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter\
    \ = letter.upcase\n    vowels = letter.scan(/[AEIOU]/)\n    vowels.each do |vowel|\n\
    \      new_message << letter.index(vowel) + 2\n    end\n    new_message << letter\n\
    \  end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I tried to run your code, but I got this error: undefined method `scan'\
    \ for nil:NilClass. Do you know why this could be?\n<|/ c |>\n<| c |>\nI fixed\
    \ the error, but now I got this error: undefined method `index' for nil:NilClass.\
    \ Do you know why this could be?\n<|/ c |>\n<| c |>\nI fixed the error, but now\
    \ I got this error: undefined method `index' for nil:NilClass. Do you know why\
    \ this could be?\n<|/ c |>\n<| c |>\nI fixed the error, but now I got this error:\
    \ undefined method `index' for nil:NilClass. Do you know why this could be?\n\
    <|/ c |>\n<| c |>\nI fixed the error, but now I got this error: undefined method\
    \ `index' for nil:NilClass. Do you know why this could be?\n<|/ c |>\n<| a |>\n\
    <code>", "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[ae",
  "  message.downcase!\n  message.gsub(/[aeiou]/) { |letter| \n    letter.upcase +\
    \ letter.succ\n  }\n  message.gsub(/[aeiou]/) { |letter| \n    letter.upcase +\
    \ letter.succ\n  }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks for your answer. I'm a beginner so I didn't know about succ. I'll definitely\
    \ look into it.\n<|/ c |>\n<| c |>\nI added some more explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| ", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    elsif char.downcase == char\n      new_message\
    \ << char.downcase\n    else\n      new_message << char.upcase.next\n    end\n\
    \  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like\
    \ your solution, but I believe that `char.upcase == char` should be `char.upcase\
    \ == char.downcase`\n<|/ c |>\n<| c |>\nYes, I agree. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n\
    \  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nI like your solution, but I believe it can be simplified a little bit\
    \ more. `message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end` can be written as `message.gsub(/[a-z]/) { |letter| letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1] }`\n<|/ c |>\n<| c |>\nThanks for\
    \ the suggestion, I've updated my answer.\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase\n    vowels =\
    \ \"AEIOU\"\n    vowels.each do |vowel|\n      if char == vowel\n        new_message\
    \ << vowel\n      end\n    end\n    new_message << char\n  end\n  new_message\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I'm new to Ruby and I\
    \ really appreciate your help. I understand what you're saying about my code being\
    \ inefficient, but I thought that Ruby was supposed to make things more efficient\
    \ by avoiding loops and using more efficient methods. I guess I'm wrong.\n<|/\
    \ c |>\n<| c |>\nRuby is not \"supposed to make things more efficient\" by avoiding\
    \ loops. Ruby is a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a ", "  message\
    \ = message.downcase\n  vowels = %w(a e i o u)\n  message.gsub(/[aeiou]/) { |vowel|\
    \ vowels[vowels.index(vowel) + 1] }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks\
    \ for your help. I appreciate it. I tried the code you provided and I got this\
    \ error `undefined method 'gsub' for nil:NilClass` I tried to fix it by adding\
    \ `if message` before the `gsub` method but that didn't work. Do you know what\
    \ could be causing this?\n<|/ c |>\n<| c |>\nI added the code I used above in\
    \ my original post. Do you know what could be causing this?\n<|/ c |>\n<| c |>\n\
    I added the code I used above in my original post. Do you know what could be causing\
    \ this?\n<|/ c |>\n<| c |>\nI added the code I used above in my original post.\
    \ Do you know what could be causing this?\n<|/ c |>\n<| c |>\nI added the code\
    \ I used above in my original post. Do you know what could be causing this?\n\
    <|/ c |>\n<| a |>\n<code>", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    char = char.upcase if char.upcase == \"A\"\n    char = char.downcase if char.downcase\
    \ == \"a\"\n    char = char.swapcase\n    char = char.upcase if char.upcase ==\
    \ \"A\"\n    char = char.downcase if char.downcase == \"a\"\n    char = char.swapcase\n\
    \    new_message << char\n  end\n  new_message\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI appreciate your help and your time. I am still getting an error when\
    \ I try to run your code. I am not sure why. I will post the error in the original\
    \ post.\n<|/ c |>\n<| c |>\nI figured it out. I had to change \"message\" to \"\
    messages\" in the encode function. Thank you for your help!\n<|/ c |>\n<| c |>\n\
    Glad you figured it out. Good luck with your coding!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[1..-1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message\nend", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[ae", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/", "  message.gsub!(/[a-z]/) { |letter|\
    \ letter.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| ", "  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'A')\n\
    \  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[aeiou]/,\
    \ 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/,\
    \ 'E')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/,\
    \ 'U')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[aeiou]/,\
    \ 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/",
  "  message.downcase!\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\
    \n      new_message << char.upcase\n    elsif char.upcase == \"E\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"I\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"O\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"U\"\n      new_message << char.upcase\n    elsif char.upcase == \"Y\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"a\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"e\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"i\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"o\"\n      new_message << char.upcase\n    elsif char.upcase == \"u\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"y\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"A\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"E\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"I\"\n      new_message << char.upcase\n    elsif char.upcase == \"O\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"U\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"a\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"e\"\n      new_message << char.upcase\n    elsif char.upcase == \"i\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"o\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"u\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"y\"\n      new_message << char.upcase\n    elsif ",
  "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letters.index(letter.upcase)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.downcase[letters.index(letter.upcase)\
    \ + 2]\n  end\n  message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI\
    \ like your solution, however I believe it can be simplified a bit. `letters.each_with_index.map\
    \ { |letter, index| letter.upcase + letter.downcase[index + 1] }` would do the\
    \ same thing as your first `gsub` block.\n<|/ c |>\n<| c |>\nThanks, I didn't\
    \ know about `each_with_index`. I edited my answer to include your suggestion.\n\
    <|/ c |>\n<| a |>\n<code>", "  message.gsub!(/[a-z]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| ", "  new_message = \"\"\n  message.each_char\
    \ do |c|\n    if c.upcase == \"A\"\n      new_message += \"B\"\n    elsif c.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif c.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif c.upcase == \"O\"\n      new_message += \"K\"\n    elsif\
    \ c.upcase == \"U\"\n      new_message += \"L\"\n    elsif c.upcase == \"Y\"\n\
    \      new_message += \"N\"\n    elsif c.upcase == \"a\"\n      new_message +=\
    \ \"b\"\n    elsif c.upcase == \"e\"\n      new_message += \"f\"\n    elsif c.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif c.upcase == \"o\"\n      new_message\
    \ += \"k\"\n    elsif c.upcase == \"u\"\n      new_message += \"l\"\n    elsif\
    \ c.upcase == \"y\"\n      new_message += \"n\"\n    elsif c.upcase == \"A\"\n\
    \      new_message += \"B\"\n    elsif c.upcase == \"E\"\n      new_message +=\
    \ \"F\"\n    elsif c.upcase == \"I\"\n      new_message += \"J\"\n    elsif c.upcase\
    \ == \"O\"\n      new_message += \"K\"\n    elsif c.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message += \"N\"\n    elsif\
    \ c.upcase == \"a\"\n      new_message += \"b\"\n    elsif c.upcase == \"e\"\n\
    \      new_message += \"f\"\n    elsif c.upcase == \"i\"\n      new_message +=\
    \ \"j\"\n    elsif c.upcase == \"o\"\n      new_message += \"k\"\n    elsif c.upcase\
    \ == \"u\"\n      new_message += \"l\"\n    elsif c.upcase == \"y\"\n      new_message\
    \ += \"n\"\n    else\n      new_message += c\n    end\n  end\n  new_message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for the help! I appreciate\
    \ it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<code>", " \
    \ message.downcase!\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/", "  new_message\
    \ = \"\"\n  message.split(\"\").each do |letter|\n    letter = letter.upcase\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if letter.include?(vowel)\n        letter = letter.gsub(vowel, vowel.upcase)\n\
    \      end\n    end\n    new_message << letter\n  end\n  new_message\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much for this! I really appreciate\
    \ it. I was able to get it working with your help. I appreciate your time!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end", " \
    \ message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x|\
    \ x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[2..-1]\n  end\n  message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if char == vowel\n        char = char.next\n        break\n      end\n\
    \    end\n    new_message << char\n  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like your solution, but I believe it can be simplified a bit.\
    \ `vowels.each { |vowel| new_message << char.send(vowel.next) }` should do the\
    \ trick.\n<|/ c |>\n<| c |>\nThanks, I didn't know about `send`. That is much\
    \ cleaner.\n<|/ c |>\n<| c |>\nThanks guys. I appreciate your help.\n<|/ c |>\n\
    <| c |>\nThanks guys. I appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much! This\
    \ was very helpful.\n<|/ c |>\n<| a tags=ruby |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
