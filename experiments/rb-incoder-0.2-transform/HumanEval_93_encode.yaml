name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\
  \n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.upcase == char.next\n\
    \      new_message << char.upcase\n    else\n      new_message << char.next\n\
    \    end\n  end\n  new_message\nend", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase + letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    ", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase if char.upcase\
    \ == char\n    char = char.downcase if char.downcase == char\n    char = char.swapcase\n\
    \    char = char.gsub(/[AEIOUaeiou]/, 'A')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'E')\n    char = char.gsub(/[AEIOUaeiou]/, 'I')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'O')\n    char = char.gsub(/[AEIOUaeiou]/, 'U')\n    new_message << char\n \
    \ end\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ I added a more concise version that doesn't require you to write any methods.\
    \ I hope it helps!\n<|/ c |>\n<| c |>\nThanks so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/i, \"A\")\n  message.gsub!(/[aeiou]/i, \"a\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"E\")\n  message.gsub!(/[AEIOU]/i, \"e\")\n  message.gsub!(/[AEIOU]/i, \"I\"\
    )\n  message.gsub!(/[AEIOU]/i, \"i\")\n  message.gsub!(/[AEIOU]/i, \"O\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"o\")\n  message.gsub!(/[AEIOU]/i, \"U\")\n  message.gsub!(/[AEIOU]/i, \"u\"\
    )\n  message.gsub!(/[AEIOU]/i, \"Y\")\n  message.gsub!(/[AEIOU]/i, \"y\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"A\")\n  message.gsub!(/[AEIOU]/i, \"a\")\n  message.gsub!(/[AEIOU]/i, \"E\"\
    )\n  message.gsub!(/[AEIOU]/i, \"e\")\n  message.gsub!(/[AEIOU]/i, \"I\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"i\")\n  message.gsub!(/[AEIOU]/i, \"O\")\n  message.gsub!(/[AEIOU]/i, \"o\"\
    )\n  message.gsub!(/[AEIOU]/i, \"U\")\n  message.gsub!(/[AEIOU]/i, \"u\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"Y\")\n  message.gsub!(/[AEIOU]/i, \"y\")\n  message.gsub!(/[AEIOU]/i, \"A\"\
    )\n  message.gsub!(/[AEIOU]/i, \"a\")\n  message.gsub!(/[AEIOU]/i, \"E\")\n  message.gsub!(/[AEIOU]/i,\
    \ \"e\")\n  message.gsub!(/[AEIOU]/i, \"I\")\n  message.gsub!(/[AEIOU]/i, \"i\"\
    )\n  message.gsub!(/[AEIOU]/i, \"O\")\n  message.gsub!(/[AEIOU]/i, \"o\")\n  ",
  "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter.upcase!\n\
    \    letter.gsub!(/[aeiou]/, \"A\")\n    letter.gsub!(/[aeiou]/, \"E\")\n    letter.gsub!(/[aeiou]/,\
    \ \"I\")\n    letter.gsub!(/[aeiou]/, \"O\")\n    letter.gsub!(/[aeiou]/, \"U\"\
    )\n    letter.gsub!(/[aeiou]/, \"a\")\n    letter.gsub!(/[aeiou]/, \"e\")\n  \
    \  letter.gsub!(/[aeiou]/, \"i\")\n    letter.gsub!(/[aeiou]/, \"o\")\n    letter.gsub!(/[aeiou]/,\
    \ \"u\")\n    letter.gsub!(/[aeiou]/, \"A\")\n    letter.gsub!(/[aeiou]/, \"E\"\
    )\n    letter.gsub!(/[aeiou]/, \"I\")\n    letter.gsub!(/[aeiou]/, \"O\")\n  \
    \  letter.gsub!(/[aeiou]/, \"U\")\n    letter.gsub!(/[aeiou]/, \"a\")\n    letter.gsub!(/[aeiou]/,\
    \ \"e\")\n    letter.gsub!(/[aeiou]/, \"i\")\n    letter.gsub!(/[aeiou]/, \"o\"\
    )\n    letter.gsub!(/[aeiou]/, \"u\")\n    new_message << letter\n  end\n  new_message\n\
    end", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    letter\
    \ = letter.upcase\n    vowels = letter.scan(/[AEIOU]/)\n    vowels.each do |vowel|\n\
    \      new_message << letter.index(vowel) + 2\n    end\n    new_message << letter\n\
    \  end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I tried to run your code, but I got this error: undefined method `scan'\
    \ for nil:NilClass. Do you know why this could be?\n<|/ c |>\n<| c |>\nI fixed\
    \ the error, but now I got this error: undefined method `index' for nil:NilClass.\
    \ Do you know why this could be?\n<|/ c |>\n<| c |>\nI fixed the error, but now\
    \ I got this error: undefined method `index' for nil:NilClass. Do you know why\
    \ this could be?\n<|/ c |>\n<| c |>\nI fixed the error, but now I got this error:\
    \ undefined method `index' for nil:NilClass. Do you know why this could be?\n\
    <|/ c |>\n<| c |>\nI fixed the error, but now I got this error: undefined method\
    \ `index' for nil:NilClass. Do you know why this could be?\n<|/ c |>\n<| a |>\n\
    <code>", "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[ae",
  "  message.downcase!\n  message.gsub(/[aeiou]/) { |letter| \n    letter.upcase +\
    \ letter.succ\n  }\n  message.gsub(/[aeiou]/) { |letter| \n    letter.upcase +\
    \ letter.succ\n  }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks for your answer. I'm a beginner so I didn't know about succ. I'll definitely\
    \ look into it.\n<|/ c |>\n<| c |>\nI added some more explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| ", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    elsif char.downcase == char\n      new_message\
    \ << char.downcase\n    else\n      new_message << char.upcase.next\n    end\n\
    \  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like\
    \ your solution, but I believe that `char.upcase == char` should be `char.upcase\
    \ == char.downcase`\n<|/ c |>\n<| c |>\nYes, I agree. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n\
    \  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nI like your solution, but I believe it can be simplified a little bit\
    \ more. `message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end` can be written as `message.gsub(/[a-z]/) { |letter| letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1] }`\n<|/ c |>\n<| c |>\nThanks for\
    \ the suggestion, I've updated my answer.\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase\n    vowels =\
    \ \"AEIOU\"\n    vowels.each do |vowel|\n      if char == vowel\n        new_message\
    \ << vowel\n      end\n    end\n    new_message << char\n  end\n  new_message\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I'm new to Ruby and I\
    \ really appreciate your help. I understand what you're saying about my code being\
    \ inefficient, but I thought that Ruby was supposed to make things more efficient\
    \ by avoiding loops and using more efficient methods. I guess I'm wrong.\n<|/\
    \ c |>\n<| c |>\nRuby is not \"supposed to make things more efficient\" by avoiding\
    \ loops. Ruby is a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a programming\
    \ language that has loops. It's a programming language that has loops. It's a\
    \ programming language that has loops. It's a programming language that has loops.\
    \ It's a programming language that has loops. It's a programming language that\
    \ has loops. It's a programming language that has loops. It's a programming language\
    \ that has loops. It's a programming language that has loops. It's a ", "  message\
    \ = message.downcase\n  vowels = %w(a e i o u)\n  message.gsub(/[aeiou]/) { |vowel|\
    \ vowels[vowels.index(vowel) + 1] }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks\
    \ for your help. I appreciate it. I tried the code you provided and I got this\
    \ error `undefined method 'gsub' for nil:NilClass` I tried to fix it by adding\
    \ `if message` before the `gsub` method but that didn't work. Do you know what\
    \ could be causing this?\n<|/ c |>\n<| c |>\nI added the code I used above in\
    \ my original post. Do you know what could be causing this?\n<|/ c |>\n<| c |>\n\
    I added the code I used above in my original post. Do you know what could be causing\
    \ this?\n<|/ c |>\n<| c |>\nI added the code I used above in my original post.\
    \ Do you know what could be causing this?\n<|/ c |>\n<| c |>\nI added the code\
    \ I used above in my original post. Do you know what could be causing this?\n\
    <|/ c |>\n<| a |>\n<code>", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    char = char.upcase if char.upcase == \"A\"\n    char = char.downcase if char.downcase\
    \ == \"a\"\n    char = char.swapcase\n    char = char.upcase if char.upcase ==\
    \ \"A\"\n    char = char.downcase if char.downcase == \"a\"\n    char = char.swapcase\n\
    \    new_message << char\n  end\n  new_message\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI appreciate your help and your time. I am still getting an error when\
    \ I try to run your code. I am not sure why. I will post the error in the original\
    \ post.\n<|/ c |>\n<| c |>\nI figured it out. I had to change \"message\" to \"\
    messages\" in the encode function. Thank you for your help!\n<|/ c |>\n<| c |>\n\
    Glad you figured it out. Good luck with your coding!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[1..-1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message\nend", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'Y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[ae", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/", "  message.gsub!(/[a-z]/) { |letter|\
    \ letter.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| ", "  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'A')\n\
    \  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[aeiou]/,\
    \ 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/,\
    \ 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/,\
    \ 'E')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[aeiou]/,\
    \ 'U')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'A')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[aeiou]/,\
    \ 'O')\n  message.gsub!(/[aeiou]/, 'U')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/",
  "  message.downcase!\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\
    \n      new_message << char.upcase\n    elsif char.upcase == \"E\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"I\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"O\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"U\"\n      new_message << char.upcase\n    elsif char.upcase == \"Y\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"a\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"e\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"i\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"o\"\n      new_message << char.upcase\n    elsif char.upcase == \"u\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"y\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"A\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"E\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"I\"\n      new_message << char.upcase\n    elsif char.upcase == \"O\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"U\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"a\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"e\"\n      new_message << char.upcase\n    elsif char.upcase == \"i\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"o\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"u\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"y\"\n      new_message << char.upcase\n    elsif ",
  "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letters.index(letter.upcase)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.downcase[letters.index(letter.upcase)\
    \ + 2]\n  end\n  message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI\
    \ like your solution, however I believe it can be simplified a bit. `letters.each_with_index.map\
    \ { |letter, index| letter.upcase + letter.downcase[index + 1] }` would do the\
    \ same thing as your first `gsub` block.\n<|/ c |>\n<| c |>\nThanks, I didn't\
    \ know about `each_with_index`. I edited my answer to include your suggestion.\n\
    <|/ c |>\n<| a |>\n<code>", "  message.gsub!(/[a-z]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| ", "  new_message = \"\"\n  message.each_char\
    \ do |c|\n    if c.upcase == \"A\"\n      new_message += \"B\"\n    elsif c.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif c.upcase == \"I\"\n      new_message\
    \ += \"J\"\n    elsif c.upcase == \"O\"\n      new_message += \"K\"\n    elsif\
    \ c.upcase == \"U\"\n      new_message += \"L\"\n    elsif c.upcase == \"Y\"\n\
    \      new_message += \"N\"\n    elsif c.upcase == \"a\"\n      new_message +=\
    \ \"b\"\n    elsif c.upcase == \"e\"\n      new_message += \"f\"\n    elsif c.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif c.upcase == \"o\"\n      new_message\
    \ += \"k\"\n    elsif c.upcase == \"u\"\n      new_message += \"l\"\n    elsif\
    \ c.upcase == \"y\"\n      new_message += \"n\"\n    elsif c.upcase == \"A\"\n\
    \      new_message += \"B\"\n    elsif c.upcase == \"E\"\n      new_message +=\
    \ \"F\"\n    elsif c.upcase == \"I\"\n      new_message += \"J\"\n    elsif c.upcase\
    \ == \"O\"\n      new_message += \"K\"\n    elsif c.upcase == \"U\"\n      new_message\
    \ += \"L\"\n    elsif c.upcase == \"Y\"\n      new_message += \"N\"\n    elsif\
    \ c.upcase == \"a\"\n      new_message += \"b\"\n    elsif c.upcase == \"e\"\n\
    \      new_message += \"f\"\n    elsif c.upcase == \"i\"\n      new_message +=\
    \ \"j\"\n    elsif c.upcase == \"o\"\n      new_message += \"k\"\n    elsif c.upcase\
    \ == \"u\"\n      new_message += \"l\"\n    elsif c.upcase == \"y\"\n      new_message\
    \ += \"n\"\n    else\n      new_message += c\n    end\n  end\n  new_message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for the help! I appreciate\
    \ it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<code>", " \
    \ message.downcase!\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/", "  new_message\
    \ = \"\"\n  message.split(\"\").each do |letter|\n    letter = letter.upcase\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if letter.include?(vowel)\n        letter = letter.gsub(vowel, vowel.upcase)\n\
    \      end\n    end\n    new_message << letter\n  end\n  new_message\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much for this! I really appreciate\
    \ it. I was able to get it working with your help. I appreciate your time!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end", " \
    \ message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x|\
    \ x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[2..-1]\n  end\n  message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if char == vowel\n        char = char.next\n        break\n      end\n\
    \    end\n    new_message << char\n  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like your solution, but I believe it can be simplified a bit.\
    \ `vowels.each { |vowel| new_message << char.send(vowel.next) }` should do the\
    \ trick.\n<|/ c |>\n<| c |>\nThanks, I didn't know about `send`. That is much\
    \ cleaner.\n<|/ c |>\n<| c |>\nThanks guys. I appreciate your help.\n<|/ c |>\n\
    <| c |>\nThanks guys. I appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much! This\
    \ was very helpful.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub(/[a-z]/) { |letter| letter.upcase }.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }.gsub(/[aeiou]/) { |vowel| vowel.succ }\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work. Try it with `\"This is a\
    \ message\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"This is a message\"\
    `.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `\"This is a message\"`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `\"This is a message\"`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `\"This is a message\"`.\n<|/ c |>\n<| a |>\n\
    <code>", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[a-z]/){|x| x.upcase }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  ", "  new_message = \"\"\
    \n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"E\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"I\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"O\"\n      new_message << char.upcase\n    elsif char.upcase == \"U\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"Y\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"a\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"e\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"i\"\n      new_message << char.upcase\n    elsif char.upcase == \"o\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"u\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"y\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"A\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"E\"\n      new_message << char.upcase\n    elsif char.upcase == \"I\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"O\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"U\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"a\"\n      new_message << char.upcase\n    elsif char.upcase == \"e\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"i\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"o\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"u\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"y\"\n      new_message << char.upcase\n    elsif ", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) + 2 }\n  message.gsub!(/[aeiou]/) { |vowel|\
    \ alphabet.index(vowel) + 1 }\n  message\nend\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ so much for the help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer helped you, please consider accepting it by clicking the check\
    \ mark next to it. This will help future visitors who may have a similar question\
    \ to yours find it more easily.\n<|/ c |>\n<| c |>\nI did it! Thanks again!\n\
    <|/ c |>\n<| c |>\nNo problem! If this answer helped you, please consider accepting\
    \ it by clicking the check mark next to it. This will help future visitors who\
    \ may have a similar question to yours find it more easily.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  new_message = \"\"\n  message.each_char do |char|\n    char\
    \ = char.upcase if char.upcase == char\n    char = char.downcase if char.downcase\
    \ == char\n    char = char.swapcase\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n\
    \    char = char.gsub(/[AEIOUaeiou]/, 'O')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'I')\n    char = char.gsub(/[AEIOUaeiou]/, 'U')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'A')\n    char = char.gsub(/[AEIOUaeiou]/, 'E')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'O')\n    char = char.gsub(/[AEIOUaeiou]/, 'I')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'U')\n    char = char.gsub(/[AEIOUaeiou]/, 'A')\n    new_message << char\n \
    \ end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I appreciate it! I added the code I wrote to my original post. Could\
    \ you take a look and see what I'm doing wrong?\n<|/ c |>\n<| c |>\nI added the\
    \ code I wrote to my original post. Could you take a look and see what I'm doing\
    \ wrong?\n<|/ c |>\n<| c |>\nI added the code I wrote to my original post. Could\
    \ you take a look and see what I'm doing wrong?\n<|/ c |>\n<| c |>\nI added the\
    \ code I wrote to my original post. Could you take a look and see what I'm doing\
    \ wrong?\n<|/ c |>\n<| c |>\nI added the code I wrote to my original post. Could\
    \ you take a look and see what I'm doing wrong?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[1..-1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI believe that `letter.upcase[1..-1]` should\
    \ be `letter.upcase`.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks for pointing\
    \ that out. I've fixed it.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  new_message\
    \ = message\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n \
    \ end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n\
    \  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n\
    \  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  new_message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  new_message.", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n  \
    \  letter.upcase + letter.downcase[2..-1]\n  end\n  message\nend", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ - 1]\n  }\nend\n</code>\n<|/ a tags=ruby,string,algorithm |>\n<| c |>\nThis\
    \ doesn't work. `'a'.succ #=> 'b'`, `'a'.succ #=> 'c'`, `'a'.succ #=> 'd'`, etc.\n\
    <|/ c |>\n<| c |>\nYou're right, I was thinking about `'a'.succ #=> 'b'` as `'a'.succ\
    \ #=> 'c'`. Fixed now.\n<|/ c |>\n<| c |>\nI see what you mean. Fixed now.\n<|/\
    \ c |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it\
    \ without using an array. I'm thinking about a hash table or something similar.\n\
    <|/ c |>\n<| c |>\nI added a solution without an array. Let me know if that helps.\n\
    <|/ c |>\n<| a |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : b }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map ", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[ae", "  message.downcase!\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + alphabet.index(vowel.next)\n  }\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for taking the time to write\
    \ this out. I really appreciate it. I will give this a try and let you know how\
    \ it goes.\n<|/ c |>\n<| c |>\nI ran the code and it works perfectly. Thank you\
    \ so much!\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  new_message = \"\"\
    \n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.next\n      new_message << char.upcase\n\
    \    else\n      new_message << char.next\n    end\n  end\n  new_message\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for taking the time to\
    \ write this out. I really appreciate it. I will try to implement this and see\
    \ how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI implemented this and it works\
    \ perfectly. Thank you so much!\n<|/ c |>\n<| c |>\nGlad I could help. If this\
    \ answer solved your problem, please consider marking it as accepted by clicking\
    \ the check mark next to it. This helps future visitors know that the answer works\
    \ and will help them find the answer more easily if they have a similar question.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n \
    \   letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nI like the way you used `gsub!` instead of `gsub`. It's a lot more\
    \ readable and concise.\n<|/ c |>\n<| c |>\nI like it too. Thanks.\n<|/ c |>\n\
    <| a tags=ruby,string |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n   \
    \ letter.upcase + letter.downcase.chars.zip(letter.upcase.chars).\n      select\
    \ { |a,b| a == b }.\n      map(&:first).\n      join\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase.chars.zip(letter.downcase.chars).\n      select\
    \ { |a,b| a == b }.\n      map(&:first).\n      join\n  end\nend", "  new_message\
    \ = \"\"\n  message.split(\"\").each do |letter|\n    if letter.upcase == \"A\"\
    \n      new_message << letter.upcase\n    elsif letter.upcase == \"E\"\n     \
    \ new_message << letter.upcase\n    elsif letter.upcase == \"I\"\n      new_message\
    \ << letter.upcase\n    elsif letter.upcase == \"O\"\n      new_message << letter.upcase\n\
    \    elsif letter.upcase == \"U\"\n      new_message << letter.upcase\n    elsif\
    \ letter.upcase == \"Y\"\n      new_message << letter.upcase\n    elsif letter.upcase\
    \ == \"a\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"\
    e\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"i\"\n  \
    \    new_message << letter.upcase\n    elsif letter.upcase == \"o\"\n      new_message\
    \ << letter.upcase\n    elsif letter.upcase == \"u\"\n      new_message << letter.upcase\n\
    \    elsif letter.upcase == \"y\"\n      new_message << letter.upcase\n    elsif\
    \ letter.upcase == \"b\"\n      new_message << letter.upcase\n    elsif letter.upcase\
    \ == \"g\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"\
    h\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"j\"\n  \
    \    new_message << letter.upcase\n    elsif letter.upcase == \"k\"\n      new_message\
    \ << letter.upcase\n    elsif letter.upcase == \"l\"\n      new_message << letter.upcase\n\
    \    elsif letter.upcase == \"m\"\n      new_message << letter.upcase\n    elsif\
    \ letter.upcase == \"n\"\n      new_message << letter.upcase\n    elsif letter.upcase\
    \ == \"p\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"\
    q\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"r\"\n  \
    \    new_message << letter.upcase\n    elsif letter.upcase == \"s\"\n      new_message\
    \ << letter.upcase\n    elsif let", "  message.gsub!(/[a-z]/) do |letter|\n  \
    \  letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 2]\n\
    \  end\nend", "  message.downcase!\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n\
    \  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/", "  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase + letter.succ\n  end", "  message.gsub!(/[aeiou]/) { |vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  new_message = \"\"\n  message.each_char do\
    \ |char|\n    if char.upcase == char\n      new_message << char.upcase\n    else\n\
    \      new_message << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/)\
    \ do |char|\n    index = alphabet.index(char.upcase)\n    alphabet[index + 2]\n\
    \  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis\
    \ doesn't work if you have a string like \"aBcDeFgH\" where you want the letter\
    \ 'F' to appear twice in the string.\n<|/ c |>\n<| c |>\nI didn't see that requirement\
    \ in the question. I'll update my answer to account for that.\n<|/ c |>\n<| c\
    \ |>\nI updated my answer to account for that requirement. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |", "  new_message = \"\
    \"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub(/[aeiou]/) do |char|\n    alphabet.index(char.upcase) + alphabet.index(char.downcase)\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)` returns `nil` if the character isn't in the\
    \ alphabet. Try `alphabet = \"abcdefghijklmnopqrstuvwxyz\"`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I fixed the code. Now it works.\n<|/ c |>\n<| a\
    \ tags=ruby |>\n<code>", "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel|\
    \ \n    alphabet.index(vowel) + 2 \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    alphabet.index(vowel) + 1 \n  }\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any gems. I appreciate\
    \ your help though.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ gems.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub(/[aeiou]/) { |vowel|\
    \ \n    alphabet.index(vowel) + alphabet.index(vowel.next)\n  }\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=ruby,string,ruby-on-rails |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |", "  new_message =\
    \ \"\"\n  message.split(\"\").each do |letter|\n    letter.upcase.gsub!(/[AEIOUaeiou]/)\
    \ { |vowel| vowel.succ }\n    letter.gsub!(/[AEIOUaeiou]/) { |vowel| vowel.succ\
    \ }\n    new_message << letter\n  end\n  new_message\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! I understand that my code is not the most\
    \ efficient one, but I still don't understand why my code doesn't work. Could\
    \ you please explain it to me?\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer. Hopefully that helps.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[1..-1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end", " \
    \ new_message = \"\"\n  message.each_char do |char|\n    index = english_alphabet.index(char)\n\
    \    index = index if index != nil\n    index = index - 2 if index > 0\n    index\
    \ = index if index >= 0\n    index = index if index != nil\n    new_message <<\
    \ english_alphabet[index]\n  end\n  new_message\nend", "  new_message = \"\"\n\
    \  message.each_char do |char|\n    char = char.upcase\n    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n      if char == vowel\n\
    \        new_message << vowel\n      end\n    end\n    new_message << char\n \
    \ end\n  new_message\nend", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n\
    \  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[ae", "  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + alphabet.index(vowel.next)\n  }\nend\n\
    </code>\n<|/ a tags=ruby,string,encoding |>\n<| c |>\nThis doesn't work. `alphabet.index(vowel)\
    \ + alphabet.index(vowel.next)` returns `nil` if the vowel isn't in the alphabet.\
    \ `nil.to_i` returns `0`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out.\
    \ I've updated the answer to account for that case.\n<|/ c |>\n<| a dscore=0 |>\n\
    Here's a solution that doesn't use regular expressions:\n<code>", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.next\n      new_message << char.next\n\
    \    else\n      new_message << char.upcase\n    end\n  end\n  new_message\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI see what you did there, but I still don't\
    \ understand how it works. I understand that you're checking if the character\
    \ is uppercase, but I don't understand how that helps me swap case. Can you explain\
    \ that?\n<|/ c |>\n<| c |>\nThe `char.upcase` method returns the character in\
    \ uppercase. `char.upcase == char` checks if the character is uppercase. `char.upcase\
    \ == char.next` checks if the character is uppercase and the next character is\
    \ uppercase. `char.upcase == char.upcase` checks if the character is uppercase\
    \ and it's next character is uppercase. `char.upcase == char.upcase.next` checks\
    \ if the character is uppercase and the next character is uppercase and the next\
    \ character is uppercase. `char.upcase == char.upcase.upcase` checks if the character\
    \ is uppercase and the next character is uppercase and the next character is uppercase\
    \ and the next character is uppercase. `char.upcase == char.upcase.upcase.next`\
    \ checks if the character is uppercase and the next character is uppercase and\
    \ the next character is uppercase and the next character is uppercase and the\
    \ next character is uppercase. `char.upcase == char.upcase.upcase.upcase.next`\
    \ checks if the character is uppercase and the next character is uppercase and\
    \ the next character is uppercase and the next character is uppercase and the\
    \ next character is uppercase and the next character is uppercase.\n<|/ c |>\n\
    <| c |>\n`char.upcase == char.upcase.next` checks if the character is uppercase\
    \ and the next character is uppercase and the next character is uppercase. `char.upcase\
    \ == char.upcase.upcase` checks if the character is uppercase and the next character\
    \ is uppercase and the next character is uppercase and the next character is uppercase.\
    \ `char.upcase == char.upcase.upcase.next` checks if the character is uppercase\
    \ and the next character is uppercase and the next character is uppercase and\
    \ the next character is uppercase and the next character is uppercase. `char.upcase\
    \ == char.upcase.upcase.upcase.next", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  new_message = \"\"\n  message.each_char do\
    \ |char|\n    index = english_alphabet.index(char)\n    next_index = english_alphabet.index(char.next)\n\
    \    new_message += english_alphabet[index] if index != next_index\n    new_message\
    \ += char\n  end\n  new_message\nend", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you so much! This was really helpful!\n<|/ c |>\n<| c |>\n\
    No problem! Glad I could help.\n<|/ c |>\n<| a tags=ruby,string,regex |>\n<code>",
  "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel)\
    \ + 2 \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel) +\
    \ 1 \n  }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<|\
    \ c |>\nThanks so much for your help! I really appreciate it. I tried it out and\
    \ it works perfectly. Thanks again!\n<|/ c |>\n<| c |>\nNo problem. Glad I could\
    \ help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message = message.downcase\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message = message.gsub(/[aeiou]/)\
    \ { |vowel| vowels.index(vowel) + 1 }\n  message = message.gsub(/[aeiou]/) { |vowel|\
    \ vowels.index(vowel) + 1 }\n  message\nend\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>", "  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel)\
    \ + 2 }\n  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel) - 2 }\n  message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help! I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! If this answer solved your problem, please\
    \ consider accepting it by clicking the check mark next to it.\n<|/ c |>\n<| c\
    \ |>\nI did but since I'm new it says I have to wait 8 minutes before I can accept\
    \ it\n<|/ c |>\n<| c |>\nNo worries, glad I could help.\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ",
  "  message.downcase!\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/", "  message.gsub!(/[a-z]/){|letter|\
    \ letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[a-z]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  ", "  message.gsub!(/[a-z]/){|x|\
    \ x.upcase }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  ", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end", " \
    \ new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase if\
    \ char.upcase == \"A\"\n    char = char.downcase if char.downcase == \"a\"\n \
    \   char = char.swapcase if char.swapcase == \"A\"\n    char = char.swapcase if\
    \ char.swapcase == \"a\"\n    new_message << char\n  end\n  new_message\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n\
    <| c |>\nNo problem! If this answered your question, please mark it as the accepted\
    \ answer by clicking the check mark next to it. Thanks!\n<|/ c |>\n<| c |>\nI\
    \ did that but my reputation is too low for it to show publicly\n<|/ c |>\n<|\
    \ c |>\nNo worries! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help! I appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! If you found this answer helpful, please\
    \ consider marking it as accepted (by clicking the check mark next to it). That\
    \ way others who run across this question will know that the answer solved the\
    \ problem and can see that it's been answered. Thanks!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    index = english_alphabet.index(char)\n\
    \    new_message << english_alphabet[(index+1)%english_alphabet.size]\n  end\n\
    \  new_message\nend", "  new_message = \"\"\n  vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n  letters = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n  \n  message.downcase!\n  message.each_char do |char|\n\
    \    if vowels.include?(char)\n      new_message << letters[letters.index(char)\
    \ + 2]\n    else\n      new_message << char\n    end\n  end\n  new_message\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letters.index(letter.upcase) + 1]\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\nend\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ so much! This was very helpful. I'm still trying to wrap my head around how\
    \ this works, but I appreciate it!\n<|/ c |>\n<| c |>\nI added some comments to\
    \ help explain what's going on. Let me know if you have any questions.\n<|/ c\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ",
  "  message.gsub(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase.gsub(/[aeiou]/)\
    \ do |vowel|\n      vowel.succ.succ\n    end\n  end\nend", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end", "  message.downcase!\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    char.upcase!\n    char.downcase!\n    char.gsub!(/[aeiou]/, 'e')\n\
    \    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/, 'u')\n    char.gsub!(/[aeiou]/,\
    \ 'a')\n    char.gsub!(/[aeiou]/, 'e')\n    char.gsub!(/[aeiou]/, 'o')\n    char.gsub!(/[aeiou]/,\
    \ 'u')\n    char.gsub!(/[aeiou]/, 'a')\n    new_message << char\n  end\n  new_message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on \"This\
    \ is a message\".\n<|/ c |>\n<| c |>\nIt does work. Try it on \"This is a message\"\
    .\n<|/ c |>\n<| c |>\nIt doesn't work. Try it on \"This is a message\".\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it on \"This is a message\".\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it on \"This is a message\".\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == \"A\"\n      new_message += \"B\"\n    elsif char.upcase == \"E\"\n     \
    \ new_message += \"F\"\n    elsif char.upcase == \"I\"\n      new_message += \"\
    J\"\n    elsif char.upcase == \"O\"\n      new_message += \"K\"\n    elsif char.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif char.upcase == \"Y\"\n     \
    \ new_message += \"N\"\n    elsif char.upcase == \"a\"\n      new_message += \"\
    b\"\n    elsif char.upcase == \"e\"\n      new_message += \"f\"\n    elsif char.upcase\
    \ == \"i\"\n      new_message += \"j\"\n    elsif char.upcase == \"o\"\n     \
    \ new_message += \"k\"\n    elsif char.upcase == \"u\"\n      new_message += \"\
    l\"\n    elsif char.upcase == \"y\"\n      new_message += \"n\"\n    else\n  \
    \    new_message += char\n    end\n  end\n  new_message\nend", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| ", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase\n    vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n      if char\
    \ == vowel\n        new_message << vowel.next\n      end\n    end\n  end\n  new_message\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work for the OP's\
    \ example input: `\"This is a message\"` -> `\"tHKS KS C MGSSCGG\"`\n<|/ c |>\n\
    <| c |>\nI guess I misunderstood the question. I'll edit my answer.\n<|/ c |>\n\
    <| c |>\nI added a solution that works for the OP's example input.\n<|/ c |>\n\
    <| a tags=ruby,string |>\n<code>", "  message.downcase!\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.downcase!\n  message.gsub(/[aeiou]/) do |letter|\n    letter.upcase!\n\
    \    alphabet.index(letter) + 2\n  end\n  message.gsub(/[aeiou]/) do |letter|\n\
    \    letter.upcase!\n    alphabet.index(letter)\n  end\nend", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  message.gsub!(/[aeiou]/){|l| l.succ }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.succ }\n  ", "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase\
    \ if char.upcase == \"A\" || char.upcase == \"E\" || char.upcase == \"I\" || char.upcase\
    \ == \"O\" || char.upcase == \"U\"\n    char.downcase if char.downcase == \"a\"\
    \ || char.downcase == \"e\" || char.downcase == \"i\" || char.downcase == \"o\"\
    \ || char.downcase == \"u\"\n    new_message << char\n  end\n  new_message\nend",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    elsif char.upcase == char.next\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.next\n    end\n  end\n \
    \ new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer!\
    \ I understand your code, but I still don't understand how it works. Can you explain\
    \ how it works?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your explanation! I understand it now!\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[a-z]/){|letter|\
    \ letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  ", "  message = message.downcase\n\
    \  vowels = %w(a e i o u)\n  message.gsub(/[aeiou]/) { |vowel| vowels.index(vowel)\
    \ + 2 }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much\
    \ for the help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could\
    \ help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    index = english_alphabet.index(char)\n    new_message << english_alphabet[(index\
    \ + 1)%english_alphabet.size]\n  end\n  new_message\nend", "  new_message = \"\
    \"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.downcase == char\n      new_message << char.downcase\n\
    \    elsif char.upcase == char.downcase\n      new_message << char.upcase\n  \
    \  else\n      new_message << char.downcase\n    end\n  end\n  new_message\nend",
  "  message.downcase!\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/", "  message.gsub!(/[a-z]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  ", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ",
  "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ",
  "  new_message = \"\"\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  for i in\
    \ message\n    if vowels.include?(i)\n      new_message << i.upcase\n    else\n\
    \      new_message << i.downcase\n    end\n  end\n  new_message\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nThanks so much for this! I really appreciate it!\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  message.downcase!\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/) do\
    \ |letter|\n    letter.upcase + letter.downcase.chars.zip(letter.upcase.chars).\n\
    \      map { |a,b| a == b ? a : a.succ }.join\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase.chars.zip(letter.upcase.chars).\n\
    \      map { |a,b| a == b ? a : a.succ }.join\n  end\n  message\nend", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter = letter.upcase\n    letter.gsub!(/[aeiou]/) do |vowel|\n\
    \      vowel = vowel.upcase\n      vowel.succ \n    end\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel = vowel.upcase\n    vowel.succ \n  end\n  message\nend",
  "  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  new_message\
    \ = \"\"\n  message.split(\"\").each do |letter|\n    if letter.upcase == \"A\"\
    \n      new_message << letter.upcase\n    elsif letter.upcase == \"E\"\n     \
    \ new_message << letter.upcase\n    elsif letter.upcase == \"I\"\n      new_message\
    \ << letter.upcase\n    elsif letter.upcase == \"O\"\n      new_message << letter.upcase\n\
    \    elsif letter.upcase == \"U\"\n      new_message << letter.upcase\n    elsif\
    \ letter.upcase == \"a\"\n      new_message << letter.upcase\n    elsif letter.upcase\
    \ == \"e\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"\
    i\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"o\"\n  \
    \    new_message << letter.upcase\n    elsif letter.upcase == \"u\"\n      new_message\
    \ << letter.upcase\n    elsif letter.upcase == \"A\"\n      new_message << letter.upcase\n\
    \    elsif letter.upcase == \"E\"\n      new_message << letter.upcase\n    elsif\
    \ letter.upcase == \"I\"\n      new_message << letter.upcase\n    elsif letter.upcase\
    \ == \"O\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"\
    U\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"a\"\n  \
    \    new_message << letter.upcase\n    elsif letter.upcase == \"e\"\n      new_message\
    \ << letter.upcase\n    elsif letter.upcase == \"i\"\n      new_message << letter.upcase\n\
    \    elsif letter.upcase == \"o\"\n      new_message << letter.upcase\n    elsif\
    \ letter.upcase == \"u\"\n      new_message << letter.upcase\n    elsif letter.upcase\
    \ == \"A\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"\
    E\"\n      new_message << letter.upcase\n    elsif letter.upcase == \"I\"\n  \
    \    new_message << letter.upcase\n    elsif letter.upcase == \"O\"\n      new_message\
    \ << letter.upcase\n", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : a.succ }.join\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.chars.zip(letter.upcase.chars).\n      map { |a,b| a == b\
    \ ? a : a.succ }.join\n  end\n  message\nend", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[2..-1]\n  end\n  message\n\
    end", "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase if\
    \ char.upcase == \"A\"\n    char.downcase if char.downcase == \"a\"\n    char.upcase\
    \ if char.upcase == \"E\"\n    char.downcase if char.downcase == \"e\"\n    char.upcase\
    \ if char.upcase == \"I\"\n    char.downcase if char.downcase == \"i\"\n    char.upcase\
    \ if char.upcase == \"O\"\n    char.downcase if char.downcase == \"o\"\n    char.upcase\
    \ if char.upcase == \"U\"\n    char.downcase if char.downcase == \"u\"\n    char.upcase\
    \ if char.upcase == \"Y\"\n    char.downcase if char.downcase == \"y\"\n    new_message\
    \ << char\n  end\n  new_message\nend", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[ae", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub(/[a-z]/) do |letter|\n    letter.upcase +\
    \ letter.downcase.gsub(/[aeiou]/) do |vowel|\n      vowel.succ.succ\n    end\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like your solution,\
    \ it's very concise and readable. Thanks!\n<|/ c |>\n<| a tags=ruby,string |>\n\
    <code>", "  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = \"\"\n  message.each_char do |char|\n    index = english_alphabet.index(char)\n\
    \    new_message << english_alphabet[(index+1)%english_alphabet.size]\n  end\n\
    \  new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for your\
    \ answer! I understand your solution, but I wanted to solve it without using any\
    \ loops. I edited my question to show what I mean.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that doesn't use any loops.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer! I understand your solution, but I wanted to solve\
    \ it without using any loops. I edited my question to show what I mean.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include a solution that doesn't use any loops.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! I understand your solution, but I wanted\
    \ to solve it without using any loops. I edited my question to show what I mean.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/){|x| x.upcase }\n\
    \  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  ", "  message.downcase!\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n  \
    \  vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  new_message = \"\"\n  message.each_char do |char|\n    if\
    \ char.upcase == char\n      new_message << char.upcase\n    else\n      new_message\
    \ << char.downcase\n    end\n  end\n  new_message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel)\
    \ + 2 }\n  new_message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks for the help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem! I added\
    \ a more complete solution to my answer.\n<|/ c |>\n<| c |>\nThanks again! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for this. I really appreciate it. I will try this\
    \ out and let you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nHi again,\
    \ thanks so much for this. I really appreciate it. I will try this out and let\
    \ you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nHi again, thanks so\
    \ much for this. I really appreciate it. I will try this out and let you know\
    \ how it goes. Thanks again!\n<|/ c |>\n<| c |>\nHi again, thanks so much for\
    \ this. I really appreciate it. I will try this out and let you know how it goes.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nHi again, thanks so much for this. I really\
    \ appreciate it. I will try this out and let you know how it goes. Thanks again!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou",
  "  new_message = \"\"\n  message.each_char do |char|\n    char.upcase!\n    char.downcase!\n\
    \    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"\
    AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\"\
    , \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"\
    AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n\
    \    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"\
    AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\"\
    , \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"\
    AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n\
    \    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"\
    AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\"\
    , \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"\
    AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n\
    \    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"\
    AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    char.tr!(\"AEIOUaeiou\"\
    , \"AEIOUaeiou\")\n    char.tr!(\"AEIOUae", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[ae", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'A')\n  message.gsub!(/[AEIOU]/, 'A')\n  message.gsub!(/[aeiou]/, 'B')\n  message.gsub!(/[AEIOU]/,\
    \ 'B')\n  message.gsub!(/[aeiou]/, 'C')\n  message.gsub!(/[AEIOU]/, 'C')\n  message.gsub!(/[aeiou]/,\
    \ 'D')\n  message.gsub!(/[AEIOU]/, 'D')\n  message.gsub!(/[aeiou]/, 'E')\n  message.gsub!(/[AEIOU]/,\
    \ 'E')\n  message.gsub!(/[aeiou]/, 'F')\n  message.gsub!(/[AEIOU]/, 'F')\n  message.gsub!(/[aeiou]/,\
    \ 'G')\n  message.gsub!(/[AEIOU]/, 'G')\n  message.gsub!(/[aeiou]/, 'H')\n  message.gsub!(/[AEIOU]/,\
    \ 'H')\n  message.gsub!(/[aeiou]/, 'I')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[aeiou]/,\
    \ 'J')\n  message.gsub!(/[AEIOU]/, 'J')\n  message.gsub!(/[aeiou]/, 'K')\n  message.gsub!(/[AEIOU]/,\
    \ 'K')\n  message.gsub!(/[aeiou]/, 'L')\n  message.gsub!(/[AEIOU]/, 'L')\n  message.gsub!(/[aeiou]/,\
    \ 'M')\n  message.gsub!(/[AEIOU]/, 'M')\n  message.gsub!(/[aeiou]/, 'N')\n  message.gsub!(/[AEIOU]/,\
    \ 'N')\n  message.gsub!(/[aeiou]/, 'O')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[aeiou]/,\
    \ 'P')\n  message.gsub!(/[AEIOU]/, 'P')\n  message.gsub!(/[aeiou]/, 'Q')\n  message.gsub!(/[AEIOU]/,\
    \ 'Q')\n  message.gsub!(/[aeiou]/, 'R')", "  message.gsub!(/[a-z]/){|x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  ", "  new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase\
    \ if char.upcase >= \"A\" && char.upcase <= \"Z\"\n    char = char.downcase if\
    \ char.downcase >= \"a\" && char.downcase <= \"z\"\n    char = char.swapcase\n\
    \    char = char.tr(\"AEIOUaeiou\", \"AEIOUaeiou\")\n    new_message << char\n\
    \  end\n  new_message\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much!\
    \ This was very helpful!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `\"This\
    \ is a message\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"This is a\
    \ message\"`\n<|/ c |>\n<| c |>\nYes, it does. But it doesn't work for the OP's\
    \ test cases. Try it with `\"test\"`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I'll fix it.\n<|/ c |>\n<| c |>\nI fixed it. I was thinking about a more general\
    \ solution that would work for any message with any number of vowels.\n<|/ c |>\n\
    <| a tags=ruby,string |>\n<code>", "  message.gsub(/[a-z]/) { |letter| letter.upcase\
    \ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. Try it with `encode.call(\"test\")`.\n<|/ c\
    \ |>\n<| c |>\nIt works fine for me. Try it with `encode.call(\"test\")`.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. Yes, it works. But it also works with `encode.call(\"\
    This is a message\")`. Try it with `encode.call(\"This is a message\")`.\n<|/\
    \ c |>\n<| c |>\nAh, I see what you mean. Yes, it works. But it also works with\
    \ `encode.call(\"This is a message\")`. Try it with `encode.call(\"This is a message\"\
    )`.\n<|/ c |>\n<| c |>\nI see what you mean. Yes, it works. But it also works\
    \ with `encode.call(\"This is a message\")`. Try it with `encode.call(\"This is\
    \ a message\")`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n\
    \  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ.succ\n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ.succ\n  }\n", "  message.gsub!(/[a-z]/) { |letter|\
    \ letter.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| ", "  message.gsub!(/[a-z]/){|x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  ", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n    if\
    \ letter.upcase == \"A\"\n      new_message += \"B\"\n    elsif letter.upcase\
    \ == \"E\"\n      new_message += \"F\"\n    elsif letter.upcase == \"I\"\n   \
    \   new_message += \"J\"\n    elsif letter.upcase == \"O\"\n      new_message\
    \ += \"K\"\n    elsif letter.upcase == \"U\"\n      new_message += \"L\"\n   \
    \ elsif letter.upcase == \"Y\"\n      new_message += \"N\"\n    elsif letter.upcase\
    \ == \"a\"\n      new_message += \"b\"\n    elsif letter.upcase == \"e\"\n   \
    \   new_message += \"f\"\n    elsif letter.upcase == \"i\"\n      new_message\
    \ += \"j\"\n    elsif letter.upcase == \"o\"\n      new_message += \"k\"\n   \
    \ elsif letter.upcase == \"u\"\n      new_message += \"l\"\n    elsif letter.upcase\
    \ == \"y\"\n      new_message += \"n\"\n    elsif letter.upcase == \"A\"\n   \
    \   new_message += \"B\"\n    elsif letter.upcase == \"E\"\n      new_message\
    \ += \"F\"\n    elsif letter.upcase == \"I\"\n      new_message += \"J\"\n   \
    \ elsif letter.upcase == \"O\"\n      new_message += \"K\"\n    elsif letter.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif letter.upcase == \"Y\"\n   \
    \   new_message += \"N\"\n    elsif letter.upcase == \"a\"\n      new_message\
    \ += \"b\"\n    elsif letter.upcase == \"e\"\n      new_message += \"f\"\n   \
    \ elsif letter.upcase == \"i\"\n      new_message += \"j\"\n    elsif letter.upcase\
    \ == \"o\"\n      new_message += \"k\"\n    elsif letter.upcase == \"u\"\n   \
    \   new_message += \"l\"\n    elsif letter.upcase == \"y\"\n      new_message\
    \ += \"n\"\n    elsif letter.upcase == \"A\"\n      new_message += \"B\"\n   \
    \ elsif letter.upcase == \"E\"\n      new_message += \"F\"\n    elsif letter.upcase\
    \ == \"I\"\n      new_message += \"", "  message.gsub!(/[a-z]/){|l| l.upcase }\n\
    \  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.downcase\
    \ }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.downcase }\n  ", "  message.gsub!(/[a-z]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  ", "  message.gsub(/[a-z]/)\
    \ { |letter| letter.upcase }.gsub(/[aeiou]/) { |vowel| vowel.succ }.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so\
    \ much! This was really helpful.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.",
  "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n\
    \      new_message << char.upcase\n    else\n      new_message << char.downcase\n\
    \    end\n  end\n  new_message.gsub(/[aeiou]/) do |char|\n    index = alphabet.index(char)\n\
    \    alphabet.index(char) + 2\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. `alphabet` isn't defined anywhere.\n<|/ c |>\n<| c |>\nI fixed\
    \ the typo, thanks. I didn't test the code before posting it, so I didn't know\
    \ what `alphabet` was supposed to be.\n<|/ c |>\n<| c |>\n`alphabet` is supposed\
    \ to be a global variable. `alphabet = %w[a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z]`\n<|/ c |>\n<| c |>\nI see that now. Thanks for pointing that\
    \ out. I was thinking of a different problem where `alphabet` was a local variable\
    \ in the `encode` method.\n<|/ c |>\n<| c |>\nI added a more complete solution\
    \ to my answer.\n<|/ c |>\n<| a |>\nHere's a solution that uses recursion:\n<code>",
  "  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel) + 2 }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) }\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThank you so much for this. I really appreciate it. I will try\
    \ this out and let you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nHi\
    \ again, sorry for the late reply. I am having trouble getting this to work. I\
    \ am getting this error when I try to run it: undefined method `gsub' for nil:NilClass.\
    \ Any ideas?\n<|/ c |>\n<| c |>\nSorry, I forgot to add `message` to the arguments.\
    \ I've edited my answer to reflect this.\n<|/ c |>\n<| c |>\nHi again, sorry for\
    \ the late reply. I am getting this error when I try to run it: undefined method\
    \ `gsub' for nil:NilClass. Any ideas?\n<|/ c |>\n<| c |>\nHi again, sorry for\
    \ the late reply. I am getting this error when I try to run it: undefined method\
    \ `gsub' for nil:NilClass. Any ideas?\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel)\
    \ + 2 }\n  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel) }\n  message\n\
    end\n</code>\n<|/ a tags=ruby,string,encoding |>\n<| c |>\nThanks for the answer!\
    \ I understand that my code is not the most efficient way to solve this problem,\
    \ but I'm just trying to learn Ruby and I wanted to see how it could be done in\
    \ a more efficient way.\n<|/ c |>\n<| c |>\nI added a more efficient solution.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the edit! I understand that my\
    \ code is not the most efficient way to solve this problem, but I'm just trying\
    \ to learn Ruby and I wanted to see how it could be done in a more efficient way.\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for the edit! I understand that my code is not the most efficient\
    \ way to solve this problem, but I'm just trying to learn Ruby and I wanted to\
    \ see how it could be done in a more efficient way.\n<|/ c |>\n<| a tags=ruby,string,encoding\
    \ |>\n<code>", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.g", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[ae", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.upcase\
    \ + vowel.downcase\n  end\n  message.gsub!(/[aeiou]/", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[ae",
  "  message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
