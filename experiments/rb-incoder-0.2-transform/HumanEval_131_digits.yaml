name: HumanEval_131_digits
language: rb
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits.call(1)\n# 1\n# >>> digits.call(4)\n\
  # 0\n# >>> digits.call(235)\n# 15\ndef digits(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n\
  \    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5,\
  \ candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5,\
  \ candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625,\
  \ candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n"
completions: ["  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend",
  "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\"\
    ).each_with_index.inject(0) { |sum, digit, i| sum * 10 + digit.to_i }\nend", " \
    \ n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd?\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\n\
    end", "  n.to_s.chars.each_cons(2).inject(:*)\nend", "  n.to_s.split(\"\").map\
    \ { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ { |sum, digit, i| sum + digit.to_i * (i % 2 == 1 ? -1 : 1) }\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(//).map { |d|\
    \ d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend",
  "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\"\
    ).map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d|\
    \ d.to_i }.inject(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).inject(:*)\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(1) do |sum, digit|\n    sum\
    \ * 2 if digit % 2 == 1\n  end\nend", "  n.to_s.split(//).each_with_index.inject(0)\
    \ {|sum, digit, i| sum * 10 + digit.to_i}\nend", "  n.to_s.split(\"\").map { |d|\
    \ d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(//).inject(:*)\nend", " \
    \ n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  return 0 if n.zero?\
    \ || n.odd? else n.to_s.reverse.scan(/[13579]\\B/).inject(:*)\nend", "  n.to_s.chars.each_cons(2).inject(:*)\n\
    end", "  n.to_s.split(//).each_with_index.map { |d, i| i % 2 == 0 ? d.to_i : 0}\n\
    end", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.chars.each_cons(2).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.split(\"\").inject(1, :*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) {|sum, digit, i| sum * 10 + digit.to_i}\nend", " \
    \ n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  return 0 if n.zero?\
    \ then 0 else n.to_s.reverse.chars.map { |c| c.to_i%2 }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).inject(:*)\nend",
  "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.chars.each_cons(2).reduce(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, i|\n    digit.to_i.odd? ? i * 2 : i\n  end\nend", "  return 0 if\
    \ n.zero? then 0 else n.to_s.chars.map { |c| c.to_i%2 }.inject(:*)\nend", "  n.to_s.split(\"\
    \").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  return 0 if n.zero? then 0 else n.to_s.reverse.chars.map\
    \ { |c| c.to_i%2 }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\"\
    ).map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(//).inject(:*)\nend", " \
    \ n.to_s.split(\"\").each_with_index.inject(1) do |sum, digit|\n    sum * 2 if\
    \ digit % 2 == 1\n  end\nend", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\n\
    end", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(\"\").each_with_index.inject(1)\
    \ do |sum, digit|\n    sum * 2 if digit % 2 == 1\n  end\nend", "  n.to_s.split(//).map\
    \ { |i| i.to_i if i.odd? }.inject(:*)\nend", "  return 0 if n.zero? then 0 else\
    \ n.to_s.reverse.chars.map { |c| c.to_i%2 }.inject(:*)\nend", "  n.to_s.split(//).map\
    \ { |d| d.to_i if d.odd? }.inject(:*)\nend", "  n.to_s.split(\"\").map { |d| d.to_i\
    \ }.inject(:*)\nend", "  n.to_s.split(//).map { |d| d.to_i if d.odd? }.inject(:*)\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i }.inject(:*)\nend", "  n.to_s.split(\"\
    \").inject(:*)\nend", "  n.to_s.split(//).inject(:*)\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) { |sum, digit, i| sum * 10 + digit.to_i if digit.to_i\
    \ % 2 != 0 }\nend", "  return 0 if n.zero? then 0 else n.to_s.chars.reduce(:*)\n\
    end", "  n.to_s.split(//).each_with_index.map { |d, i| i % 2 == 0 ? d.to_i : 0}\n\
    end", "  n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend", " \
    \ n.to_s.split(\"\").map { |d| d.to_i if d.odd? }.inject(:*)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
