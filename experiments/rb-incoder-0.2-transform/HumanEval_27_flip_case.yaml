name: HumanEval_27_flip_case
language: rb
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case.call(\"Hello\")\n# \"hELLO\"\ndef flip_case(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_flip_case\n\
  \    candidate = method(:flip_case)\n    assert_equal(\"\", candidate.call(\"\"\
  ))\n    assert_equal(\"hELLO!\", candidate.call(\"Hello!\"))\n    assert_equal(\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\", candidate.call(\"These violent delights\
  \ have violent ends\"))\n  end\nend\n"
completions: ["  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.gsub(/[a-z]/) { |char| char.upcase\
    \ }\nend", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.gsub(/[a-z]/) { |char| char.upcase }\n  string.gsub(/[A-Z]/) {\
    \ |char| char.downcase }\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.gsub(/[a-z]/) { |char| char.upcase }\n  string.gsub(/[A-Z]/) {\
    \ |char| char.downcase }\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.gsub(/./) { |c| c.upcase == c.downcase ? c.downcase : c.upcase\
    \ }\nend", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.gsub(/[a-z]/) { |char| char.upcase }\n  string.gsub(/[A-Z]/) {\
    \ |char| char.downcase }\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.gsub(/[a-z]/) { |c| c.upcase }\n\
    \  string.gsub(/[A-Z]/) { |c| c.downcase }\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nI like your use of gsub!, but I believe that `gsub` returns the\
    \ original string unchanged, so you might as well just do `string.gsub(/[a-z]/)\
    \ { |c| c.upcase }`.\n<|/ c |>\n<| c |>\n: You're right. I've updated the answer\
    \ to reflect your suggestion.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.gsub(/[a-z]/) { |c| c.upcase }\n\
    \  string.gsub(/[A-Z]/) { |c| c.downcase }\nend\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, because it doesn't require any additional gems.\
    \ I only had to change `string.gsub` to `string.tr` and it worked like a charm.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `tr` is much more elegant\
    \ than `gsub` for this task.\n<|/ c |>\n<| c |>\nI agree with Jordan. `tr` is\
    \ much more elegant than `gsub` for this task.\n<|/ c |>\n<| c |>\nI agree with\
    \ Jordan. `tr` is much more elegant than `gsub` for this task.\n<|/ c |>\n<| c\
    \ |>\nI agree with Jordan. `tr` is much more elegant than `gsub` for this task.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  string.downcase!\n  string.upcase!\n\
    \  string\nend", "  string.gsub(/[a-z]/) { |char| char.upcase }\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.gsub(/./) { |c| c.upcase == c.downcase\
    \ ? c.downcase : c.upcase }\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.downcase!\n  string.upcase!\n  string\nend", "  string.downcase!\n\
    \  string.upcase!\n  string\nend", "  string.downcase!\n  string.upcase!\n  string\n\
    end", "  string.gsub(/[a-z]/) { |char| char.upcase }\n  string.gsub(/[A-Z]/) {\
    \ |char| char.downcase }\nend\n</code>\n<|/ a |>\n<| c |>\nThanks so much! I really\
    \ appreciate your help.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  string.downcase!\n\
    \  string.upcase!\n  string\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
