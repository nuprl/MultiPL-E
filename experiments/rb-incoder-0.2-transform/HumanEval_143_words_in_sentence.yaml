name: HumanEval_143_words_in_sentence
language: rb
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# >>> words_in_sentence.call(\"This is a test\")\n# \"is\"\n# Example\
  \ 2:\n# >>> words_in_sentence.call(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n\
  \    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"\
  This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"\
  ))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available\
  \ here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"\
  ))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\
  \", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"\
  ))\n  end\nend\n"
completions: ["  sentence = sentence.split(\" \").sort\n  result = []\n  for i in\
    \ 0..(sentence.length-1)\n    if sentence[i].to_s.length == 1 && sentence[i].to_s.upcase\
    \ != sentence[i+1].to_s.upcase\n      result.push(sentence[i].to_s)\n    end\n\
    \  end\n  result.join(\" \")\nend", "    sentence = sentence.downcase\n    words\
    \ = sentence.split(\" \")\n    primes = []\n    primes.push 0 # 0 is not a prime\n\
    \    primes.push 1 # 1 is a prime\n    primes.push 2 # 2 is a prime\n    primes.push\
    \ 3 # 3 is a prime\n    primes.push 5 # 5 is a prime\n    primes.push 7 # 7 is\
    \ a prime\n    primes.push 11 # 11 is a prime\n    primes.push 13 # 13 is a prime\n\
    \    primes.push 17 # 17 is a prime\n    primes.push 19 # 19 is a prime\n    primes.push\
    \ 23 # 23 is a prime\n    primes.push 29 # 29 is a prime\n    primes.push 31 #\
    \ 31 is a prime\n    primes.push 37 # 37 is a prime\n    primes.push 41 # 41 is\
    \ a prime\n    primes.push 43 # 43 is a prime\n    primes.push 47 # 47 is a prime\n\
    \    primes.push 53 # 53 is a prime\n    primes.push 59 # 59 is a prime\n    primes.push\
    \ 61 # 61 is a prime\n    primes.push 67 # 67 is a prime\n    primes.push 73 #\
    \ 73 is a prime\n    primes.push 79 # 79 is a prime\n    primes.push 83 # 83 is\
    \ a prime\n    primes.push 89 # 89 is a prime\n    primes.push 93 # 93 is a prime\n\
    \    primes.push 97 # 97 is a prime\n    primes.push 103 # 103 is a prime\n  \
    \  primes.push 109 # 109 is a prime\n    primes.push 113 # 113 is a prime\n  \
    \  primes.push 127 # 127 is a prime\n    primes.push 131 # 131 is a prime\n  \
    \  primes.push 137 # 137 is a prime\n    primes.push 139 # 139 is a prime\n  \
    \  primes.push 143 # 143 is a prime\n    primes.push 147 # 147 is a prime\n  \
    \  primes.push 151 # 151 is a prime\n    primes.push 157 # 157 is a prime\n  \
    \  primes.push 163 # 163 is a prime\n    primes.push 167 # 167 is a prime\n  \
    \  primes.push 173 # 173 is a prime\n    primes.push 179 # 179 is a prime\n  \
    \  primes.push 181 # 181 is a prime\n    primes.push 191 # 191 is a prime\n  \
    \  primes.push 193 # 193 is a prime\n    primes.push 197 # 197 is a prime\n  \
    \  primes.push 199", "  sentence = sentence.split(\" \").map(&:downcase)\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.select { |word| word.chars.all? { |c| c.in?(letters) } }\n  sentence\
    \ = sentence.", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_words = []\n \
    \ prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words =\
    \ []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_",
  "    sentence = sentence.split(\" \").sort\n    sentence.length.each do |length|\n\
    \        sentence.length.times do |i|\n            if sentence.include?(sentence[i])\n\
    \                sentence[i] = \"\"\n            end\n        end\n    end\n \
    \   sentence.join\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do |word|\n\
    \    word = word.downcase\n    next if word.empty?\n    prime_words = []\n   \
    \ prime_words.push(word) if prime_words.include?(word)\n    prime_words.each do\
    \ |prime_word|\n      prime_word = prime_word.downcase\n      next if prime_word.empty?\n\
    \      prime_word.length.times do |i|\n        prime_word = prime_word[0..i] +\
    \ prime_word[i+1..-1]\n        prime_words.push(prime_word)\n      end\n    end\n\
    \  end\n  words.join(\" \")\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if the sentence contains multiple words with different lengths.\n<|/ c\
    \ |>\n<| c |>\nYes, I know. That's why I wrote \"the order of the words in the\
    \ new string should be the same as the original one.\"\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood your question. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer. Now it works with multiple words with different lengths.\n<|/ c |>\n\
    <| c |>\nI edited my answer again. Now it works with multiple words with different\
    \ lengths.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sentence = sentence.split(\"\
    \ \").sort\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_counter2\
    \ = 1\n  prime_counter3 = 2\n  prime_counter4 = 3\n  prime_counter5 = 4\n  prime_counter6\
    \ = 5\n  prime_counter7 = 6\n  prime_counter8 = 7\n  prime_counter9 = 8\n  prime_counter10\
    \ = 9\n  prime_counter11 = 10\n  prime_counter12 = 11\n  prime_counter13 = 12\n\
    \  prime_counter14 = 13\n  prime_counter15 = 14\n  prime_counter16 = 15\n  prime_counter17\
    \ = 16\n  prime_counter18 = 17\n  prime_counter19 = 18\n  prime_counter20 = 19\n\
    \  prime_counter21 = 20\n  prime_counter22 = 21\n  prime_counter23 = 22\n  prime_counter24\
    \ = 23\n  prime_counter25 = 24\n  prime_counter26 = 25\n  prime_counter27 = 26\n\
    \  prime_counter28 = 27\n  prime_counter29 = 28\n  prime_counter30 = 29\n  prime_counter31\
    \ = 30\n  prime_counter32 = 31\n  prime_counter33 = 32\n  prime_counter34 = 33\n\
    \  prime_counter35 = 34\n  prime_counter36 = 35\n  prime_counter37 = 36\n  prime_counter38\
    \ = 37\n  prime_counter39 = 38\n  prime_counter40 = 39\n  prime_counter41 = 40\n\
    \  prime_counter42 = 41\n  prime_counter43 = 42\n  prime_counter44 = 43\n  prime_counter45\
    \ = 44\n  prime_counter46 = 45\n  prime_counter47 = 46\n  prime_counter48 = 47\n\
    \  prime_counter49 = 48\n  prime_counter50 = 49\n  prime_counter51 = 50\n  prime_counter52\
    \ = 51\n  prime_counter53 = 52\n  prime_counter54 = 53\n  prime_counter55 = 54\n\
    \  prime_counter56 = 55\n  prime_counter57 = 56\n  prime_counter58 = 57\n  prime_counter59\
    \ = 58\n  prime_counter60 = 59\n  prime_counter61 = 60\n  prime_counter62 = 61\n\
    \  prime_counter63 = 62\n  prime_counter64 = 63\n  prime_counter", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    word = word.downcase\n    prime_numbers = []\n\
    \    prime_numbers.concat(prime_numbers_from(word))\n    prime_numbers.each do\
    \ |prime|\n      prime_numbers.delete(prime)\n      prime_numbers.each do |prime2|\n\
    \        prime_numbers.delete(prime2)\n        prime_numbers.each do |prime3|\n\
    \          prime_numbers.delete(prime3)\n          prime_numbers.each do |prime4|\n\
    \            prime_numbers.delete(prime4)\n            prime_numbers.each do |prime5|\n\
    \              prime_numbers.delete(prime5)\n              prime_numbers.each\
    \ do |prime6|\n                prime_numbers.delete(prime6)\n                prime_numbers.each\
    \ do |prime7|\n                  prime_numbers.delete(prime7)\n              \
    \    prime_numbers.each do |prime8|\n                    prime_numbers.delete(prime8)\n\
    \                    prime_numbers.each do |prime9|\n                      prime_numbers.delete(prime9)\n\
    \                      prime_numbers.each do |prime10|\n                     \
    \   prime_numbers.delete(prime10)\n                        prime_numbers.each\
    \ do |prime11|\n                          prime_numbers.delete(prime11)\n    \
    \                      prime_numbers.each do |prime12|\n                     \
    \       prime_numbers.delete(prime12)\n                            prime_numbers.each\
    \ do |prime13|\n                              prime_numbers.delete(prime13)\n\
    \                              prime_numbers.each do |prime14|\n             \
    \                   prime_numbers.delete(prime14)\n                          \
    \      prime_numbers.each do |prime15|\n                                  prime_numbers.delete(prime15)\n\
    \                                  prime_numbers.each do |prime16|\n         \
    \                           prime_numbers.delete(prime16)\n                  \
    \                  prime_numbers.each do |prime17|\n                         \
    \             prime_numbers.delete(prime17)\n                                \
    \      prime_numbers.each do |prime18|\n                                     \
    \   prime_numbers.delete(prime18)\n                                        prime_numbers.each\
    \ do |prime19|\n                                          prime_numbers.delete(prime19)\n\
    \                                          prime_numbers.each do |prime20|\n \
    \                                           prime_numbers.delete(prime20)\n  \
    \                                          prime_numbers.each do |prime21|\n \
    \                                             prime_numbers.delete(prime21)\n\
    \                                              prime_numbers.each do |prime22|\n\
    \                                                prime_numbers.delete(prime22)\n\
    \                                                prime_numbers.each do |prime23|\n\
    \                                                  prime_numbers.delete(prime23)\n\
    \                                                  prime_numbers.each do |prime24|\n\
    \                                                    prime_numbers.delete(prime24)\n\
    \                                                    prime_numbers.each do |prime25|\n\
    \                                                      prime_numbers.delete(prime25)\n\
    \                                                      prime_numbers.each ", " \
    \ sentence = sentence.split(\" \").map(&:downcase)\n  sentence = sentence.select\
    \ { |word| word.length == 1 }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence = sentence.select { |word| word.chars.all?\
    \ { |c| c.in?(letters) } }\n  sentence.join\nend", "  sentence = sentence.split(\"\
    \ \").sort\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_numbers\
    \ = 2\n  prime_numbers_counter = 0\n  prime_numbers_counter2 = 0\n  prime_numbers_counter3\
    \ = 0\n  prime_numbers_counter4 = 0\n  prime_numbers_counter5 = 0\n  prime_numbers_counter6\
    \ = 0\n  prime_numbers_counter7 = 0\n  prime_numbers_counter8 = 0\n  prime_numbers_counter9\
    \ = 0\n  prime_numbers_counter10 = 0\n  prime_numbers_counter11 = 0\n  prime_numbers_counter12\
    \ = 0\n  prime_numbers_counter13 = 0\n  prime_numbers_counter14 = 0\n  prime_numbers_counter15\
    \ = 0\n  prime_numbers_counter16 = 0\n  prime_numbers_counter17 = 0\n  prime_numbers_counter18\
    \ = 0\n  prime_numbers_counter19 = 0\n  prime_numbers_counter20 = 0\n  prime_numbers_counter21\
    \ = 0\n  prime_numbers_counter22 = 0\n  prime_numbers_counter23 = 0\n  prime_numbers_counter24\
    \ = 0\n  prime_numbers_counter25 = 0\n  prime_numbers_counter26 = 0\n  prime_numbers_counter27\
    \ = 0\n  prime_numbers_counter28 = 0\n  prime_numbers_counter29 = 0\n  prime_numbers_counter30\
    \ = 0\n  prime_numbers_counter31 = 0\n  prime_numbers_counter32 = 0\n  prime_numbers_counter33\
    \ = 0\n  prime_numbers_counter34 = 0\n  prime_numbers_counter35 = 0\n  prime_numbers_counter36\
    \ = 0\n  prime_numbers_counter37 = 0\n  prime_numbers_counter38 = 0\n  prime_numbers_counter39\
    \ = 0\n  prime_numbers_counter40 = 0\n  prime_numbers_counter41 = 0\n  prime_numbers_counter42\
    \ = 0\n  prime_numbers_counter43 = 0\n  prime_numbers_counter44 = 0\n  prime_numbers_counter45\
    \ = 0\n  prime_numbers_counter46 = 0\n  prime_numbers_counter47 = 0\n  prime_numbers_counter48\
    \ = 0\n  prime_numbers_counter49 = 0\n  prime_numbers_counter50 = 0\n  prime_numbers_counter51\
    \ = 0\n  prime_numbers_counter52 = 0\n  prime_numbers_counter53 = 0\n  prime_numbers_counter54\
    \ = 0", "    sentence = sentence.split(\" \").sort\n    sentence.length.prime?\n\
    \    sentence.join\nend", "  sentence = sentence.split(\" \").sort\n  result =\
    \ \"\"\n  for i in 0..(sentence.length-1)\n    if sentence[i] == \"1\"\n     \
    \ result << sentence[i+1]\n    end\n  end\n  result\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  prime_counter\
    \ = 0\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  words.each do |word|\n    word = word.downcase\n    word = word.gsub(/[^a-z]/,\
    \ \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.split(\" \").map(&:to_i).uniq\n    word = word.sort.join(\"\
    \ \")\n  end\nend", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  primes = []\n  prime_numbers = 2\n  prime_numbers += prime_numbers + 1\n\
    \  prime_numbers += prime_numbers + 2\n  prime_numbers += prime_numbers + 3\n\
    \  prime_numbers += prime_numbers + 4\n  prime_numbers += prime_numbers + 5\n\
    \  prime_numbers += prime_numbers + 6\n  prime_numbers += prime_numbers + 7\n\
    \  prime_numbers += prime_numbers + 8\n  prime_numbers += prime_numbers + 9\n\
    \  prime_numbers += prime_numbers + 10\n  prime_numbers += prime_numbers + 11\n\
    \  prime_numbers += prime_numbers + 12\n  prime_numbers += prime_numbers + 13\n\
    \  prime_numbers += prime_numbers + 14\n  prime_numbers += prime_numbers + 15\n\
    \  prime_numbers += prime_numbers + 16\n  prime_numbers += prime_numbers + 17\n\
    \  prime_numbers += prime_numbers + 18\n  prime_numbers += prime_numbers + 19\n\
    \  prime_numbers += prime_numbers + 20\n  prime_numbers += prime_numbers + 21\n\
    \  prime_numbers += prime_numbers + 22\n  prime_numbers += prime_numbers + 23\n\
    \  prime_numbers += prime_numbers + 24\n  prime_numbers += prime_numbers + 25\n\
    \  prime_numbers += prime_numbers + 26\n  prime_numbers += prime_numbers + 27\n\
    \  prime_numbers += prime_numbers + 28\n  prime_numbers += prime_numbers + 29\n\
    \  prime_numbers += prime_numbers + 30\n  prime_numbers += prime_numbers + 31\n\
    \  prime_numbers += prime_numbers + 32\n  prime_numbers += prime_numbers + 33\n\
    \  prime_numbers += prime_numbers + 34\n  prime_numbers += prime_numbers + 35\n\
    \  prime_numbers += prime_numbers + 36\n  prime_numbers += prime_numbers + 37\n\
    \  prime_numbers += prime_numbers + 38\n  prime_numbers += prime_numbers + 39\n\
    \  prime_numbers += prime_numbers + 40\n  prime_numbers += prime_numbers + 41\n\
    \  prime_numbers += prime_numbers + 42\n  prime_numbers += prime_numbers + 43\n\
    \  prime_numbers += prime_numbers + 44\n", "  sentence = sentence.split(\" \"\
    ).sort\n  result = \"\"\n  for i in sentence\n    if i.to_s.length % 2 == 0\n\
    \      result += i\n    end\n  end\n  return result\nend", "    sentence = sentence.split(\"\
    \ \").sort\n    primes = []\n    prime_numbers = []\n    prime_number = 0\n  \
    \  prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number\
    \ = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n\
    \    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers\
    \ = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n \
    \   prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number\
    \ = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n\
    \    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers\
    \ = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n \
    \   prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number\
    \ = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n\
    \    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers\
    \ = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n \
    \   prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number\
    \ = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n\
    \    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers\
    \ = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n \
    \   prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number\
    \ = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n\
    \    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers\
    \ = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n \
    \   prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n    prime_number\
    \ = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers = []\n\
    \    prime_number = 0\n    prime_numbers = []\n    prime_number = 0\n    prime_numbers\
    \ = []\n    ", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  primes = []\n  prime_words = []\n  prime_word = \"\"\n\
    \  prime_word_count = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_", "  sentence = sentence.downcase\n\
    \  words = sentence.split(' ')\n  words.map!{|word| word.downcase}\n  words.map!{|word|\
    \ word.length}\n  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word|\
    \ word.chars.uniq.sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| word.split('').sort.join}\n  words.map!{|word| word.split('').sort.join}\n\
    \  words.map!{|word| ", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_found\
    \ = false\n  prime_found2 = false\n  prime_found3 = false\n  prime_found4 = false\n\
    \  prime_found5 = false\n  prime_found6 = false\n  prime_found7 = false\n  prime_found8\
    \ = false\n  prime_found9 = false\n  prime_found10 = false\n  prime_found11 =\
    \ false\n  prime_found12 = false\n  prime_found13 = false\n  prime_found14 = false\n\
    \  prime_found15 = false\n  prime_found16 = false\n  prime_found17 = false\n \
    \ prime_found18 = false\n  prime_found19 = false\n  prime_found20 = false\n  prime_found21\
    \ = false\n  prime_found22 = false\n  prime_found23 = false\n  prime_found24 =\
    \ false\n  prime_found25 = false\n  prime_found26 = false\n  prime_found27 = false\n\
    \  prime_found28 = false\n  prime_found29 = false\n  prime_found30 = false\n \
    \ prime_found31 = false\n  prime_found32 = false\n  prime_found33 = false\n  prime_found34\
    \ = false\n  prime_found35 = false\n  prime_found36 = false\n  prime_found37 =\
    \ false\n  prime_found38 = false\n  prime_found39 = false\n  prime_found40 = false\n\
    \  prime_found41 = false\n  prime_found42 = false\n  prime_found43 = false\n \
    \ prime_found44 = false\n  prime_found45 = false\n  prime_found46 = false\n  prime_found47\
    \ = false\n  prime_found48 = false\n  prime_found49 = false\n  prime_found50 =\
    \ false\n  prime_found51 = false\n  prime_found52 = false\n  prime_found53 = false\n\
    \  prime_found54 = false\n  prime_found55 = false\n  prime_found56 = false\n \
    \ prime_found57 = false\n  prime_found58 = false\n  prime_found59 = false\n  prime_found60\
    \ = false\n  prime_found61 = false\n  prime_found62 = false\n  prime_found63 =\
    \ false\n  prime_found64 = false\n  prime_found65 = false\n  prime_found66 = false\n\
    \  prime_found67 = false\n  ", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_found\
    \ = false\n  prime_found2 = false\n  prime_found3 = false\n  prime_found4 = false\n\
    \  prime_found5 = false\n  prime_found6 = false\n  prime_found7 = false\n  prime_found8\
    \ = false\n  prime_found9 = false\n  prime_found10 = false\n  prime_found11 =\
    \ false\n  prime_found12 = false\n  prime_found13 = false\n  prime_found14 = false\n\
    \  prime_found15 = false\n  prime_found16 = false\n  prime_found17 = false\n \
    \ prime_found18 = false\n  prime_found19 = false\n  prime_found20 = false\n  prime_found21\
    \ = false\n  prime_found22 = false\n  prime_found23 = false\n  prime_found24 =\
    \ false\n  prime_found25 = false\n  prime_found26 = false\n  prime_found27 = false\n\
    \  prime_found28 = false\n  prime_found29 = false\n  prime_found30 = false\n \
    \ prime_found31 = false\n  prime_found32 = false\n  prime_found33 = false\n  prime_found34\
    \ = false\n  prime_found35 = false\n  prime_found36 = false\n  prime_found37 =\
    \ false\n  prime_found38 = false\n  prime_found39 = false\n  prime_found40 = false\n\
    \  prime_found41 = false\n  prime_found42 = false\n  prime_found43 = false\n \
    \ prime_found44 = false\n  prime_found45 = false\n  prime_found46 = false\n  prime_found47\
    \ = false\n  prime_found48 = false\n  prime_found49 = false\n  prime_found50 =\
    \ false\n  prime_found51 = false\n  prime_found52 = false\n  prime_found53 = false\n\
    \  prime_found54 = false\n  prime_found55 = false\n  prime_found56 = false\n \
    \ prime_found57 = false\n  prime_found58 = false\n  prime_found59 = false\n  prime_found60\
    \ = false\n  prime_found61 = false\n  prime_found62 = false\n  prime_found63 =\
    \ false\n  prime_found64 = false\n  prime_found65 = false\n  prime_found66 = false\n\
    \  prime_found67 = false\n  ", "  sentence = sentence.split(\" \").sort\n  result\
    \ = \"\"\n  primes = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    word = word.downcase\n    word = word.gsub(/[^a-z]/,\
    \ \"\")\n    word = word.gsub(/\\s+/, \"\")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.split(\" \").sort\n    word = word.uniq\n    word = word.map{|w|\
    \ w.to_i}\n    word = word.select{|w| w > 1 && w % 2 == 0}\n    word = word.map{|w|\
    \ w.to_s}\n    word = word.to_sentence\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. Your code works, but it only returns one\
    \ word per line. How can I get it to return multiple words per line?\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that should work for you.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works, but it only returns\
    \ one word per line. How can I get it to return multiple words per line?\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a solution that should work for\
    \ you.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works, but it only\
    \ returns one word per line. How can I get it to return multiple words per line?\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  primes = []\n  prime_counter = 0\n  prime_words =\
    \ []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  words.map!{|word| word.downcase}\n  words.map!{|word|\
    \ word.length}\n  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word|\
    \ word.join}\n  words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n\
    \  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word| word.join}\n \
    \ words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n\
    \  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word| word.join}\n \
    \ words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n\
    \  words.map!{|word| word.chars.uniq.sort}\n  words.map!{|word| word.join}\n \
    \ words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length}\n  words.map!{|word|\
    \ word.chars.uniq.sort}\n  words.map!{|word| word.join}\n  words.map!{|word",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do\
    \ |word|\n    word = word.downcase\n    next if word.empty?\n    next if word.include?(\"\
    ,\")\n    next if word.include?(\".\")\n    next if word.include?(\"!\")\n   \
    \ next if word.include?(\"?\")\n    next if word.include?(\";\")\n    next if\
    \ word.include?(\":\")\n    next if word.include?(\";\")\n    next if word.include?(\"\
    (\")\n    next if word.include?(\")\")\n    next if word.include?(\"[\")\n   \
    \ next if word.include?(\"]\")\n    next if word.include?(\"{\")\n    next if\
    \ word.include?(\"}\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    \\\"\")\n    next if word.include?(\"'\")\n    next if word.include?(\"`\")\n\
    \    next if word.include?(\"`\")\n    next if word.include?(\"'\")\n    next\
    \ if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?", "  sentence = sentence.split(\" \").map(&:downcase)\n\
    \  primes = Primes.new(sentence.length)\n  primes.each do |prime|\n    sentence\
    \ = sentence.map { |word| word.split(\" \").map(&:downcase).include?(prime) ?\
    \ prime : word }\n  end\n  sentence.join(' ')\nend", "  sentence = sentence.split(\"\
    \ \").sort\n  new_sentence = sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort\n  new_sentence = new_sentence.join(\" \")\n  new_sentence = new_sentence.split(\"\
    \ \").sort", "  sentence = sentence.split(\" \").sort\n  new_sentence = sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort\n  new_sentence = new_sentence.join(\"\
    \ \")\n  new_sentence = new_sentence.split(\" \").sort", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  prime_counter\
    \ = 0\n  prime_numbers = prime_numbers_from(words)\n  prime_numbers.each do |prime|\n\
    \    prime_counter += 1\n    if prime == prime_counter\n      primes << prime\n\
    \    end\n  end\n  primes.each do |prime|\n    result << words[prime]\n  end\n\
    \  result\nend", "    sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n    prime_numbers = sentence.map { |word| word.to_i.prime? }\n    prime_numbers.sort.map\
    \ { |prime| sentence.select { |word| prime == word.to_i } }.join(\" \")\nend",
  "  sentence = sentence.split(\" \").map {|word| word.downcase}\n  primes = Primes.new(sentence.length)\n\
    \  primes.primes.each do |prime|\n    primes.prime_numbers.each do |number|\n\
    \      prime_words = []\n      prime_words.concat(sentence[prime..prime+number-1])\n\
    \      prime_words.concat(sentence[prime+number+1..-1])\n      prime_words.uniq.each\
    \ do |word|\n        prime_words.delete(word)\n      end\n      prime_words.uniq.each\
    \ do |word|\n        sentence[prime..prime+number-1].delete(word)\n        sentence[prime+number+1..-1].delete(word)\n\
    \      end\n    end\n  end\n  sentence.join(\" \")\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  words.each do |word|\n    if word.to_i.prime?\n      puts word\n    end\n\
    \  end\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  primes = []\n  prime_counter = 0\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(' ')\n  words.each do |word|\n\
    \    word = word.downcase\n    next if word.empty?\n    word = word.gsub(/[^a-z]/,\
    \ '')\n    next if word.empty?\n    word = word.gsub(/\\s+/, ' ').split\n    next\
    \ if word.empty?\n    word = word.select { |w| w.prime? }\n    next if word.empty?\n\
    \    word = word.join ' '\n  end\nend", "  sentence = sentence.split(\" \").sort\n\
    \  result = \"\"\n  for i in sentence\n    result << i\n    result << \" \"\n\
    \  end\n  result\nend", "  sentence = sentence.split(\" \").sort\n  result = []\n\
    \  for i in 0...sentence.length\n    if sentence[i].is_prime?\n      result <<\
    \ sentence[i]\n    end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\"\
    \ \").map(&:downcase).join(\" \")\n  primes = Primes.new(sentence.length)\n  primes.each\
    \ do |prime|\n    break if primes.include?(prime)\n    primes.delete(prime)\n\
    \  end\n  primes.sort.each do |prime|\n    break if primes.include?(prime)\n \
    \   sentence = sentence.gsub(\" #{prime} \", \" \")\n  end\n  sentence\nend",
  "  sentence = sentence.split(\" \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n\
    \    if i % 2 == 0\n      result.push(sentence[i])\n    i += 1\n  end\n  result.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  new_words = []\n  primes = []\n  prime_words = []\n  prime_words_count = 0\n\
    \  prime_words_index = 0\n  prime_words_index2 = 0\n  prime_words_index3 = 0\n\
    \  prime_words_index4 = 0\n  prime_words_index5 = 0\n  prime_words_index6 = 0\n\
    \  prime_words_index7 = 0\n  prime_words_index8 = 0\n  prime_words_index9 = 0\n\
    \  prime_words_index10 = 0\n  prime_words_index11 = 0\n  prime_words_index12 =\
    \ 0\n  prime_words_index13 = 0\n  prime_words_index14 = 0\n  prime_words_index15\
    \ = 0\n  prime_words_index16 = 0\n  prime_words_index17 = 0\n  prime_words_index18\
    \ = 0\n  prime_words_index19 = 0\n  prime_words_index20 = 0\n  prime_words_index21\
    \ = 0\n  prime_words_index22 = 0\n  prime_words_index23 = 0\n  prime_words_index24\
    \ = 0\n  prime_words_index25 = 0\n  prime_words_index26 = 0\n  prime_words_index27\
    \ = 0\n  prime_words_index28 = 0\n  prime_words_index29 = 0\n  prime_words_index30\
    \ = 0\n  prime_words_index31 = 0\n  prime_words_index32 = 0\n  prime_words_index33\
    \ = 0\n  prime_words_index34 = 0\n  prime_words_index35 = 0\n  prime_words_index36\
    \ = 0\n  prime_words_index37 = 0\n  prime_words_index38 = 0\n  prime_words_index39\
    \ = 0\n  prime_words_index40 = 0\n  prime_words_index41 = 0\n  prime_words_index42\
    \ = 0\n  prime_words_index43 = 0\n  prime_words_index44 = 0\n  prime_words_index45\
    \ = 0\n  prime_words_index46 = 0\n  prime_words_index47 = 0\n  prime_words_index48\
    \ = 0\n  prime_words_index49 = 0\n  prime_words_index50 = 0\n  prime_words_index51\
    \ = 0\n  prime_words_index52 = 0\n  prime_words_index53 = 0\n  prime_words_index54\
    \ = 0\n  prime_words_index55 = 0\n  prime_words_index56 = 0\n  prime_words_index57\
    \ = 0\n  prime_words_index58 = 0\n  prime_words_index59 = 0\n  prime_words_index60\
    \ = 0\n", "  sentence = sentence.split(\" \").map(&:downcase).join(\" \")\n  prime_numbers\
    \ = PrimeNumber.new(sentence)\n  prime_numbers.each do |prime_number|\n    break\
    \ if prime_number.prime?\n    sentence.gsub!(prime_number.to_s, \"#{prime_number.to_s}\"\
    )\n  end\n  sentence\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for\
    \ your answer! I really appreciate it! I ran your code, and it gave me this error\
    \ though: ```NameError: undefined local variable or method `prime_numbers' for\
    \ main:Object```\n<|/ c |>\n<| c |>\nSorry, I forgot to add `prime_numbers = PrimeNumber.new(sentence)`\
    \ before `prime_numbers.each do |prime_number|`. I've edited my answer.\n<|/ c\
    \ |>\n<| c |>\nThank you so much! It works now! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nYou're welcome! If my answer was helpful, please consider accepting\
    \ it by clicking the green check mark to the left of it. Thanks!\n<|/ c |>\n<|\
    \ c |>\nI did that! Thank you so much!\n<|/ c |>\n<| a tags=ruby,primes |>\nI\
    \ wrote a solution that is more efficient than yours. I used the sieve of Eratosthenes\
    \ algorithm to find prime numbers. I used the sieve of Atkin to find prime numbers.\
    \ I used the sieve of Sieve of Eratosthenes and Sieve of Atkins to find prime\
    \ numbers. I used the sieve of Sieve of Eratosthenes and Sieve of Atkins to find\
    \ prime numbers. I used the sieve of Sieve of Eratosthenes and Sieve of Atkins\
    \ to find prime numbers. I used the sieve of Sieve of Eratosthenes and Sieve of\
    \ Atkins to find prime numbers. I used the sieve of Sieve of Eratosthenes and\
    \ Sieve of Atkins to find prime numbers. I used the sieve of Sieve of Eratosthenes\
    \ and Sieve of Atkins to find prime numbers. I used the sieve of Sieve of Eratosthenes\
    \ and Sieve of Atkins to find prime numbers. I used the si", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    next if word.empty?\n    next if word.include?(\",\")\n    next if word.include?(\"\
    .\")\n    next if word.include?(\"!\")\n    next if word.include?(\"?\")\n   \
    \ next if word.include?(\";\")\n    next if word.include?(\":\")\n    next if\
    \ word.include?(\"(\")\n    next if word.include?(\")\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"[\")\n    next if word.include?(\"]\")\n   \
    \ next if word.include?(\"{\")\n    next if word.include?(\"}\")\n    next if\
    \ word.include?(\";\")\n    next if word.include?(\":\")\n    next if word.include?(\"\
    (\")\n    next if word.include?(\")\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"[\")\n    next if word.include?(\"]\")\n    next if\
    \ word.include?(\"{\")\n    next if word.include?(\"}\")\n    next if word.include?(\"\
    ;\")\n    next if word.include?(\":\")\n    next if word.include?(\"(\")\n   \
    \ next if word.include?(\")\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"[\")\n    next if word.include?(\"]\")\n    next if word.include?(\"\
    {\")\n    next if word.include?(\"}\")\n    next if word.include?(\";\")\n   \
    \ next if word.include?(\":\")\n    next if word.include?(\"(\")\n    next if\
    \ word.include?(\")\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    [\")\n    next if word.include?(\"]\")\n    next if word.include?(\"{\")\n   \
    \ next if word.include?(\"}\")\n    next if word.include?(\";\")\n    next if\
    \ word.include?(\":\")\n    next if word.include?(\"(\")\n    next if word.include?(\"\
    )\")\n    next if word.include?(\"'\")\n    next if word.include?(\"[\")\n   \
    \ next if word.include?(\"]\")\n    next if word.include?(\"{\")\n    next if\
    \ word.include?(\"}\")\n    next if word.include?(\";\")\n    next if word.include?(\"\
    :\")", "    sentence = sentence.downcase\n    words = sentence.split(\" \")\n\
    \    primes = []\n    prime_words = []\n    prime_word = \"\"\n    prime_word_count\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime", "  sentence\
    \ = sentence.split(\" \").map { |word| word.downcase }\n  prime_numbers = sentence.map\
    \ { |word| word.size }.uniq.map { |size| PrimeNumbers.new(size) }\n  prime_numbers.each\
    \ do |prime_number|\n    sentence.reject { |word| prime_number.include?(word.size)\
    \ }\n  end\n  sentence.join(' ')\nend", "  sentence = sentence.split(\" \").map\
    \ {|x| x.downcase}\n  prime_numbers = (0..100).to_a\n  prime_numbers.each do |n|\n\
    \    prime_numbers.each do |m|\n      prime_numbers.each do |k|\n        prime_numbers.each\
    \ do |l|\n          prime_numbers.each do |m|\n            prime_numbers.each\
    \ do |n|\n              prime_numbers.each do |m|\n                prime_numbers.each\
    \ do |n|\n                  prime_numbers.each do |m|\n                    prime_numbers.each\
    \ do |n|\n                      prime_numbers.each do |m|\n                  \
    \      prime_numbers.each do |n|\n                          prime_numbers.each\
    \ do |m|\n                            prime_numbers.each do |n|\n            \
    \                  prime_numbers.each do |m|\n                               \
    \ prime_numbers.each do |n|\n                                  prime_numbers.each\
    \ do |m|\n                                    prime_numbers.each do |n|\n    \
    \                                  prime_numbers.each do |m|\n               \
    \                         prime_numbers.each do |n|\n                        \
    \                  prime_numbers.each do |m|\n                               \
    \             prime_numbers.each do |n|\n                                    \
    \          prime_numbers.each do |m|\n                                       \
    \         prime_numbers.each do |n|\n                                        \
    \          prime_numbers.each do |m|\n                                       \
    \             prime_numbers.each do |n|\n                                    \
    \                  prime_numbers.each do |m|\n                               \
    \                         prime_numbers.each do |n|\n                        \
    \                                  prime_numbers.each do |m|\n               \
    \                                             prime_numbers.each do |n|\n    \
    \                                                          prime_numbers.each\
    \ do |m|\n                                                                prime_numbers.each\
    \ do |n|\n                                                                  prime_numbers.each\
    \ do |m|\n                                                                   \
    \ prime_numbers.each do |n|\n                                                \
    \                    prime_numbers.each do |m|\n                             \
    \                                       prime_numbers.each do |n|\n          \
    \                                                          prime_numbers.each\
    \ do |m|\n                                                                   \
    \ prime_numbers.each do |n|\n                                                \
    \                    prime_numbers.each do |m|\n                             \
    \                                       prime_numbers.each do |n|\n          \
    \                                                          prime_numbers.each\
    \ do |m|\n                                                                   \
    \ prime_numbers.each do |n|\n                                                \
    \                    prime_numbers.each do |m|\n                             \
    \                                       prime_numbers.each do |n|\n          \
    \                                                          prime_numbers.each\
    \ do |m|\n                                                                   \
    \ prime_numbers.each do |n|\n                                                \
    \                    prime_numbers.each do |m|\n                             \
    \                                       prime_numbers.each do |n|\n          \
    \                                                          prime_numbers.each\
    \ do |m|\n                                                                   \
    \ prime_numbers.each do |n|\n                                                \
    \                    prime_numbers.each do |m|\n                             \
    \                                       prime_numbers.each ", "    sentence =\
    \ sentence.split(\" \").map(&:downcase)\n    prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \    prime_numbers.each do |prime|\n        sentence = sentence.map { |word| word\
    \ if prime_numbers.include?(word.length) }\n    end\n    sentence.join(' ')\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer! I appreciate\
    \ it! I tried to implement it but I'm getting a syntax error on the line `sentence\
    \ = sentence.map { |word| word if prime_numbers.include?(word.length) }` saying\
    \ `unexpected keyword_end, expecting end-of-input`\n<|/ c |>\n<| c |>\nI forgot\
    \ to end the block with `end`. Try it now.\n<|/ c |>\n<| c |>\nI added the end\
    \ but I'm still getting a syntax error on the line `sentence = sentence.map {\
    \ |word| word if prime_numbers.include?(word.length) }` saying `unexpected keyword_end,\
    \ expecting end-of-input`\n<|/ c |>\n<| c |>\nI added the end but I'm still getting\
    \ a syntax error on the line `sentence = sentence.map { |word| word if prime_numbers.include?(word.length)\
    \ }` saying `unexpected keyword_end, expecting end-of-input`\n<|/ c |>\n<| c |>\n\
    I added the end but I'm still getting a syntax error on the line `sentence = sentence.map\
    \ { |word| word if prime_numbers.include?(word.length) }` saying `unexpected keyword_end,\
    \ expecting end-of-input`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  sentence =\
    \ sentence.downcase\n  words = sentence.split(\" \")\n  words.each do |word|\n\
    \    word = word.strip\n    next if word.empty?\n    word = word.downcase\n  \
    \  next if word.empty?\n    word = word.gsub(/[^a-z]/, \"\")\n    next if word.empty?\n\
    \    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\\
    s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next\
    \ if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n\
    \    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\\
    s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next\
    \ if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n\
    \    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\\
    s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next\
    \ if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n\
    \    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\\
    s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next\
    \ if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n\
    \    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\\
    s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next\
    \ if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n\
    \    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\\
    s+/, \"\")\n    next if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next\
    \ if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?\n\
    \    word = word.gsub(/\\s+/, \"\")\n    next if word.empty?", "    words = sentence.split(\"\
    \ \")\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n   \
    \ prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_", "  sentence = sentence.split(\" \").sort\n  result = []\n\
    \  for i in 0...sentence.length\n    if sentence[i].is_prime?\n      result <<\
    \ sentence[i]\n    end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  prime_counter\
    \ = 0\n  prime_numbers = prime_numbers_from(words)\n  prime_numbers.each do |prime|\n\
    \    prime_counter += 1\n    if prime_counter == prime\n      primes << prime\n\
    \    end\n  end\n  primes.each do |prime|\n    result << words[prime]\n  end\n\
    \  return result\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_sentence = \"\"\n  primes = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result = \"\"\
    \n  primes = []\n  prime_counter = 0\n  prime_numbers = 2\n  prime_numbers_counter\
    \ = 0\n  prime_numbers_counter2 = 0\n  prime_numbers_counter3 = 0\n  prime_numbers_counter4\
    \ = 0\n  prime_numbers_counter5 = 0\n  prime_numbers_counter6 = 0\n  prime_numbers_counter7\
    \ = 0\n  prime_numbers_counter8 = 0\n  prime_numbers_counter9 = 0\n  prime_numbers_counter10\
    \ = 0\n  prime_numbers_counter11 = 0\n  prime_numbers_counter12 = 0\n  prime_numbers_counter13\
    \ = 0\n  prime_numbers_counter14 = 0\n  prime_numbers_counter15 = 0\n  prime_numbers_counter16\
    \ = 0\n  prime_numbers_counter17 = 0\n  prime_numbers_counter18 = 0\n  prime_numbers_counter19\
    \ = 0\n  prime_numbers_counter20 = 0\n  prime_numbers_counter21 = 0\n  prime_numbers_counter22\
    \ = 0\n  prime_numbers_counter23 = 0\n  prime_numbers_counter24 = 0\n  prime_numbers_counter25\
    \ = 0\n  prime_numbers_counter26 = 0\n  prime_numbers_counter27 = 0\n  prime_numbers_counter28\
    \ = 0\n  prime_numbers_counter29 = 0\n  prime_numbers_counter30 = 0\n  prime_numbers_counter31\
    \ = 0\n  prime_numbers_counter32 = 0\n  prime_numbers_counter33 = 0\n  prime_numbers_counter34\
    \ = 0\n  prime_numbers_counter35 = 0\n  prime_numbers_counter36 = 0\n  prime_numbers_counter37\
    \ = 0\n  prime_numbers_counter38 = 0\n  prime_numbers_counter39 = 0\n  prime_numbers_counter40\
    \ = 0\n  prime_numbers_counter41 = 0\n  prime_numbers_counter42 = 0\n  prime_numbers_counter43\
    \ = 0\n  prime_numbers_counter44 = 0\n  prime_numbers_counter45 = 0\n  prime_numbers_counter46\
    \ = 0\n  prime_numbers_counter47 = 0\n  prime_numbers_counter48 = 0\n  prime_numbers_counter49\
    \ = 0\n  prime_numbers_counter50 = 0\n  prime_numbers_counter51 = 0\n  prime_numbers_counter52\
    \ = 0\n  prime_numbers_counter53 = 0\n  prime_numbers_", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_word_count = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length =\
    \ 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index = 0\n\
    \  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_length = 0\n  prime_word_index\
    \ = 0\n  prime_word_length = 0\n  prime_word_index = 0\n  prime_word_", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_word\
    \ = \"\"\n  primes = []\n  prime = 0\n  prime_counter = 0\n  prime_words = []\n\
    \  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word =\
    \ \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  ", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  result = \"\"\n  primes\
    \ = []\n  prime_numbers = 2\n  prime_numbers_index = 0\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_numbers_index\n  prime_numbers_index += prime_numbers_index\n  prime_numbers_index\
    \ += prime_", "  sentence = sentence.split(\" \").sort\n  result = []\n  for i\
    \ in 0...sentence.length\n    if sentence[i] % 2 == 0\n      result.push(sentence[i])\n\
    \    end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \"\
    ).map { |word| word.downcase }\n  prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \  prime_numbers.prime_numbers_upto(sentence.length).map { |i| sentence[i] }.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes\
    \ = []\n  prime = 0\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\
    \"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  ", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  primes.push\
    \ 2\n  primes.push 3\n  primes.push 5\n  primes.push 7\n  primes.push 11\n  primes.push\
    \ 13\n  primes.push 17\n  primes.push 19\n  primes.push 23\n  primes.push 29\n\
    \  primes.push 31\n  primes.push 37\n  primes.push 41\n  primes.push 43\n  primes.push\
    \ 47\n  primes.push 53\n  primes.push 59\n  primes.push 61\n  primes.push 67\n\
    \  primes.push 71\n  primes.push 73\n  primes.push 79\n  primes.push 83\n  primes.push\
    \ 89\n  primes.push 97\n  primes.push 101\n  primes.push 103\n  primes.push 107\n\
    \  primes.push 109\n  primes.push 113\n  primes.push 127\n  primes.push 131\n\
    \  primes.push 137\n  primes.push 139\n  primes.push 149\n  primes.push 151\n\
    \  primes.push 157\n  primes.push 163\n  primes.push 167\n  primes.push 173\n\
    \  primes.push 179\n  primes.push 181\n  primes.push 191\n  primes.push 193\n\
    \  primes.push 197\n  primes.push 199\n  primes.push 211\n  primes.push 223\n\
    \  primes.push 227\n  primes.push 229\n  primes.push 233\n  primes.push 239\n\
    \  primes.push 241\n  primes.push 243\n  primes.push 247\n  primes.push 251\n\
    \  primes.push 257\n  primes.push 263\n  primes.push 269\n  primes.push 271\n\
    \  primes.push 277\n  primes.push 281\n  primes.push 283\n  primes.push 293\n\
    \  primes.push 307\n  primes.push 311\n  primes.push 313\n  primes.push 317\n\
    \  primes.push 323\n  primes.push 329\n  primes.push 331\n  primes.push 337\n\
    \  primes.push 347\n  primes.push 349\n  primes.push 353\n  primes.push 359\n\
    \  primes.push 367\n  primes.push 373\n  primes.push ", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  primes = Primes.primes\n  primes.each do\
    \ |prime|\n    prime_sentence = sentence.reject { |word| word == prime }\n   \
    \ prime_sentence = prime_sentence.map { |word| word.downcase }\n    prime_sentence\
    \ = prime_sentence.map { |word| word.length }\n    prime_sentence = prime_sentence.select\
    \ { |word| prime_sentence.include?(word) }\n    prime_sentence = prime_sentence.map\
    \ { |word| word.downcase }\n    prime_sentence = prime_sentence.map { |word| word.length\
    \ }\n    prime_sentence = prime_sentence.select { |word| prime_sentence.include?(word)\
    \ }\n    prime_sentence = prime_sentence.map { |word| word.downcase }\n    prime_sentence\
    \ = prime_sentence.map { |word| word.length }\n    prime_sentence = prime_sentence.select\
    \ { |word| prime_sentence.include?(word) }\n    prime_sentence = prime_sentence.map\
    \ { |word| word.downcase }\n    prime_sentence = prime_sentence.map { |word| word.length\
    \ }\n    prime_sentence = prime_sentence.select { |word| prime_sentence.include?(word)\
    \ }\n    prime_sentence = prime_sentence.map { |word| word.downcase }\n    prime_sentence\
    \ = prime_sentence.map { |word| word.length }\n    prime_sentence = prime_sentence.select\
    \ { |word| prime_sentence.include?(word) }\n    prime_sentence = prime_sentence.map\
    \ { |word| word.downcase }\n    prime_sentence = prime_sentence.map { |word| word.length\
    \ }\n    prime_sentence = prime_sentence.select { |word| prime_sentence.include?(word)\
    \ }\n    prime_sentence = prime_sentence.map { |word| word.downcase }\n    prime_sentence\
    \ = prime_sentence.map { |word| word.length }\n    prime_sentence = prime_sentence.select\
    \ { |word| prime_sentence.include?(word) }\n    prime_sentence = prime_sentence.map\
    \ { |word| word.downcase }\n    prime_sentence = prime_sentence.map { |word| word.length\
    \ }\n    prime_sentence = prime_sentence.select { |word| prime_sentence.include?(",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_found = false\n \
    \ prime_found2 = false\n  prime_found3 = false\n  prime_found4 = false\n  prime_found5\
    \ = false\n  prime_found6 = false\n  prime_found7 = false\n  prime_found8 = false\n\
    \  prime_found9 = false\n  prime_found10 = false\n  prime_found11 = false\n  prime_found12\
    \ = false\n  prime_found13 = false\n  prime_found14 = false\n  prime_found15 =\
    \ false\n  prime_found16 = false\n  prime_found17 = false\n  prime_found18 = false\n\
    \  prime_found19 = false\n  prime_found20 = false\n  prime_found21 = false\n \
    \ prime_found22 = false\n  prime_found23 = false\n  prime_found24 = false\n  prime_found25\
    \ = false\n  prime_found26 = false\n  prime_found27 = false\n  prime_found28 =\
    \ false\n  prime_found29 = false\n  prime_found30 = false\n  prime_found31 = false\n\
    \  prime_found32 = false\n  prime_found33 = false\n  prime_found34 = false\n \
    \ prime_found35 = false\n  prime_found36 = false\n  prime_found37 = false\n  prime_found38\
    \ = false\n  prime_found39 = false\n  prime_found40 = false\n  prime_found41 =\
    \ false\n  prime_found42 = false\n  prime_found43 = false\n  prime_found44 = false\n\
    \  prime_found45 = false\n  prime_found46 = false\n  prime_found47 = false\n \
    \ prime_found48 = false\n  prime_found49 = false\n  prime_found50 = false\n  prime_found51\
    \ = false\n  prime_found52 = false\n  prime_found53 = false\n  prime_found54 =\
    \ false\n  prime_found55 = false\n  prime_found56 = false\n  prime_found57 = false\n\
    \  prime_found58 = false\n  prime_found59 = false\n  prime_found60 = false\n \
    \ prime_found61 = false\n  prime_found62 = false\n  prime_found63 = false\n  prime_found64\
    \ = false\n  prime_found65 = false\n  prime_found66 = false\n  prime_found67 =\
    \ false\n  ", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_counter2 = 1\n\
    \  prime_counter3 = 2\n  prime_counter4 = 3\n  prime_counter5 = 4\n  prime_counter6\
    \ = 5\n  prime_counter7 = 6\n  prime_counter8 = 7\n  prime_counter9 = 8\n  prime_counter10\
    \ = 9\n  prime_counter11 = 10\n  prime_counter12 = 11\n  prime_counter13 = 12\n\
    \  prime_counter14 = 13\n  prime_counter15 = 14\n  prime_counter16 = 15\n  prime_counter17\
    \ = 16\n  prime_counter18 = 17\n  prime_counter19 = 18\n  prime_counter20 = 19\n\
    \  prime_counter21 = 20\n  prime_counter22 = 21\n  prime_counter23 = 22\n  prime_counter24\
    \ = 23\n  prime_counter25 = 24\n  prime_counter26 = 25\n  prime_counter27 = 26\n\
    \  prime_counter28 = 27\n  prime_counter29 = 28\n  prime_counter30 = 29\n  prime_counter31\
    \ = 30\n  prime_counter32 = 31\n  prime_counter33 = 32\n  prime_counter34 = 33\n\
    \  prime_counter35 = 34\n  prime_counter36 = 35\n  prime_counter37 = 36\n  prime_counter38\
    \ = 37\n  prime_counter39 = 38\n  prime_counter40 = 39\n  prime_counter41 = 40\n\
    \  prime_counter42 = 41\n  prime_counter43 = 42\n  prime_counter44 = 43\n  prime_counter45\
    \ = 44\n  prime_counter46 = 45\n  prime_counter47 = 46\n  prime_counter48 = 47\n\
    \  prime_counter49 = 48\n  prime_counter50 = 49\n  prime_counter51 = 50\n  prime_counter52\
    \ = 51\n  prime_counter53 = 52\n  prime_counter54 = 53\n  prime_counter55 = 54\n\
    \  prime_counter56 = 55\n  prime_counter57 = 56\n  prime_counter58 = 57\n  prime_counter59\
    \ = 58\n  prime_counter60 = 59\n  prime_counter61 = 60\n  prime_counter62 = 61\n\
    \  prime_counter63 = 62\n  prime_counter64 = 63\n  ", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \  prime_numbers.prime_numbers\n  prime_numbers.prime_numbers.map { |prime| sentence.select\
    \ { |word| prime % word.length == 0 } }\nend", "  sentence = sentence.split(\"\
    \ \").map(&:downcase)\n  sentence = sentence.select { |word| word =~ /[a-z]/i\
    \ }\n  sentence = sentence.select { |word| word =~ /[aeiou]/i }\n  sentence =\
    \ sentence.select { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select\
    \ { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~\
    \ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~ /[aeiou]/i }\n \
    \ sentence = sentence.select { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select\
    \ { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~\
    \ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~ /[aeiou]/i }\n \
    \ sentence = sentence.select { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select\
    \ { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~\
    \ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~ /[aeiou]/i }\n \
    \ sentence = sentence.select { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select\
    \ { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~\
    \ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~ /[aeiou]/i }\n \
    \ sentence = sentence.select { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select\
    \ { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~\
    \ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~ /[aeiou]/i }\n \
    \ sentence = sentence.select { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select\
    \ { |word| word =~ /[aeiou]/i }\n  sentence = sentence.select { |word| word =~\
    \ /[aeiou]/i }\n", "  sentence = sentence.split(\" \").sort\n  result = []\n \
    \ i = 0\n  while i < sentence.length\n    word = sentence[i]\n    i += 1\n   \
    \ prime = true\n    while prime && i < sentence.length\n      word = sentence[i]\n\
    \      i += 1\n      prime = prime? false : word.prime?\n    end\n    result <<\
    \ word\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \"\
    ).sort\n  result = []\n  i = 0\n  while i < sentence.length\n    if i % 2 == 0\n\
    \      result << sentence[i]\n      i += 1\n    else\n      result << sentence[i]\n\
    \      i += 1\n    end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\"\
    \ \").map(&:downcase)\n  sentence = sentence.select { |word| word.include?(/[a-z]/i)\
    \ }\n  sentence = sentence.select { |word| word.include?(/[0-9]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[aeiou]/i) }\n  sentence = sentence.select { |word|\
    \ word.include?(/[aeiou]/) }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/)\
    \ }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/)\
    \ }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/)\
    \ }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/)\
    \ }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[aeiou]/) }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/)\
    \ }\n  sentence = sentence.select { |word| word.include?(/[aeiou]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[aeiou]/) ", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ == 1 && sentence[i].to_s.upcase != sentence[i].to_s.downcase\n      result.push(sentence[i].to_s)\n\
    \      i += 1\n    i += 1\n  result.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_counter\
    \ = 0\n  prime_counter2 = 0\n  prime_counter3 = 0\n  prime_counter4 = 0\n  prime_counter5\
    \ = 0\n  prime_counter6 = 0\n  prime_counter7 = 0\n  prime_counter8 = 0\n  prime_counter9\
    \ = 0\n  prime_counter10 = 0\n  prime_counter11 = 0\n  prime_counter12 = 0\n \
    \ prime_counter13 = 0\n  prime_counter14 = 0\n  prime_counter15 = 0\n  prime_counter16\
    \ = 0\n  prime_counter17 = 0\n  prime_counter18 = 0\n  prime_counter19 = 0\n \
    \ prime_counter20 = 0\n  prime_counter21 = 0\n  prime_counter22 = 0\n  prime_counter23\
    \ = 0\n  prime_counter24 = 0\n  prime_counter25 = 0\n  prime_counter26 = 0\n \
    \ prime_counter27 = 0\n  prime_counter28 = 0\n  prime_counter29 = 0\n  prime_counter30\
    \ = 0\n  prime_counter31 = 0\n  prime_counter32 = 0\n  prime_counter33 = 0\n \
    \ prime_counter34 = 0\n  prime_counter35 = 0\n  prime_counter36 = 0\n  prime_counter37\
    \ = 0\n  prime_counter38 = 0\n  prime_counter39 = 0\n  prime_counter40 = 0\n \
    \ prime_counter41 = 0\n  prime_counter42 = 0\n  prime_counter43 = 0\n  prime_counter44\
    \ = 0\n  prime_counter45 = 0\n  prime_counter46 = 0\n  prime_counter47 = 0\n \
    \ prime_counter48 = 0\n  prime_counter49 = 0\n  prime_counter50 = 0\n  prime_counter51\
    \ = 0\n  prime_counter52 = 0\n  prime_counter53 = 0\n  prime_counter54 = 0\n \
    \ prime_counter55 = 0\n  prime_counter56 = 0\n  prime_counter57 = 0\n  prime_counter58\
    \ = 0\n  prime_counter59 = 0\n  prime_counter60 = 0\n  prime_counter61 = 0\n \
    \ prime_counter62 = 0\n  prime_counter63 = 0\n  prime_counter64 = 0\n  prime_counter65\
    \ = 0\n  prime_counter66 = 0\n  prime_counter67 = 0\n  prime_counter68 = 0\n \
    \ prime_counter69 = 0\n  prime_counter70 = 0\n  prime_", "    sentence = sentence.downcase\n\
    \    words = sentence.split(\" \")\n    primes = []\n    prime_words = []\n  \
    \  prime_word = \"\"\n    prime_word_count = 0\n    prime_word_index = 0\n   \
    \ prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length = 0\n\
    \    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index = 0\n\
    \    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length =\
    \ 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  primes = Primes.new(sentence.length)\n \
    \ primes.primes.each do |prime|\n    prime_sentence = sentence.dup\n    prime_sentence.reject!\
    \ { |word| word == prime }\n    prime_sentence.reject! { |word| word.empty? }\n\
    \    prime_sentence.reject! { |word| word.start_with?(\" \") }\n    prime_sentence.reject!\
    \ { |word| word.end_with?(\" \") }\n    prime_sentence.reject! { |word| word.start_with?(\"\
    '\") }\n    prime_sentence.reject! { |word| word.end_with?(\"'\") }\n    prime_sentence.reject!\
    \ { |word| word.start_with?(\",\") }\n    prime_sentence.reject! { |word| word.end_with?(\"\
    ,\") }\n    prime_sentence.reject! { |word| word.start_with?(\"?\") }\n    prime_sentence.reject!\
    \ { |word| word.end_with?(\"?\") }\n    prime_sentence.reject! { |word| word.start_with?(\"\
    !\") }\n    prime_sentence.reject! { |word| word.end_with?(\"!\") }\n    prime_sentence.reject!\
    \ { |word| word.start_with?(\";\") }\n    prime_sentence.reject! { |word| word.end_with?(\"\
    ;\") }\n    prime_sentence.reject! { |word| word.start_with?(\":\") }\n    prime_sentence.reject!\
    \ { |word| word.end_with?(\":\") }\n    prime_sentence.reject! { |word| word.start_with?(\"\
    ;\") }\n    prime_sentence.reject! { |word| word.end_with?(\";\") }\n    prime_sentence.reject!\
    \ { |word| word.start_with?(\"(\") }\n    prime_sentence.reject! { |word| word.end_with?(\"\
    )\") }\n    prime_sentence.reject! { |word| word.start_with?(\"[\") }\n    prime_sentence.reject!\
    \ { |word| word.end_with?(\"]\") }\n    prime_sentence.reject! { |word| word.start_with?(\"\
    {\") }\n    prime_sentence.reject! { |word| word.end_with?", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes\
    \ = []\n  prime = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n", "    sentence = sentence.split(\" \").sort\n  \
    \  sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n    sentence = sentence.split(\" \").sort\n\
    \    sentence = sentence.join(\" \")\n", "  sentence = sentence.split(\" \").sort\n\
    \  result = []\n  i = 0\n  while i < sentence.length\n    word = sentence[i]\n\
    \    i += 1\n    if word.length % 2 == 0\n      word = word[1..-1]\n    result\
    \ << word\n  end\n  result.join(\" \")\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nThis doesn't work if the sentence is `\"This is a test\"`\n<|/ c |>\n\
    <| c |>\nI didn't see that requirement in the question. I'll update my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require the\
    \ sentence to be sorted.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require\
    \ the sentence to be sorted.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", " \
    \ sentence = sentence.split(\" \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n\
    \    word = sentence[i]\n    i += 1\n    if word.length % 2 == 0\n      result.push(word)\n\
    \    end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \"\
    ).map(&:downcase)\n  prime_numbers = PrimeNumbers.new(sentence.length)\n  prime_numbers.prime_numbers\n\
    \  prime_numbers.prime_numbers.map { |i| sentence[i].length }\nend", "  sentence\
    \ = sentence.split(\" \").sort\n  result = []\n  for i in 0..(sentence.length-1)\n\
    \    if sentence[i].to_s.length == 1 && sentence[i].to_s.upcase == sentence[i+1].to_s.upcase\n\
    \      result << sentence[i].to_s\n    end\n  end\n  result.join(\" \")\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_sentence = \"\"\n  primes = []\n  prime_words = []\n  prime_sentence\
    \ = \"\"\n  prime_words_in_sentence = []\n  prime_words_in_sentence_count = []\n\
    \  prime_words_in_sentence_length = []\n  prime_words_in_sentence_order = []\n\
    \  prime_words_in_sentence_primes = []\n  prime_words_in_sentence_prime_words\
    \ = []\n  prime_words_in_sentence_prime_sentence = []\n  prime_words_in_sentence_prime_sentence_count\
    \ = []\n  prime_words_in_sentence_prime_sentence_length = []\n  prime_words_in_sentence_prime_sentence_order\
    \ = []\n  prime_words_in_sentence_prime_sentence_primes = []\n  prime_words_in_sentence_prime_sentence_prime_words\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_count\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_length = []\n\
    \  prime_words_in_sentence_prime_sentence_prime_sentence_order = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_primes\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_words =\
    \ []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence =\
    \ []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_count\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_length\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_order\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_primes\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_words\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_sentence\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_sentence_count\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_sentence_length\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_sentence_order\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_sentence_primes\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_sentence_prime_words\
    \ = []\n  prime_words_in_sentence_prime_sentence_prime_sentence_prime_sentence_prime_sentence_prime",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  primes = []\n  prime_words = []\n  prime_word = \"\"\n  prime_word_count\
    \ = 0\n  prime_word_index = 0\n  prime_word_index2 = 0\n  prime_word_index3 =\
    \ 0\n  prime_word_index4 = 0\n  prime_word_index5 = 0\n  prime_word_index6 = 0\n\
    \  prime_word_index7 = 0\n  prime_word_index8 = 0\n  prime_word_index9 = 0\n \
    \ prime_word_index10 = 0\n  prime_word_index11 = 0\n  prime_word_index12 = 0\n\
    \  prime_word_index13 = 0\n  prime_word_index14 = 0\n  prime_word_index15 = 0\n\
    \  prime_word_index16 = 0\n  prime_word_index17 = 0\n  prime_word_index18 = 0\n\
    \  prime_word_index19 = 0\n  prime_word_index20 = 0\n  prime_word_index21 = 0\n\
    \  prime_word_index22 = 0\n  prime_word_index23 = 0\n  prime_word_index24 = 0\n\
    \  prime_word_index25 = 0\n  prime_word_index26 = 0\n  prime_word_index27 = 0\n\
    \  prime_word_index28 = 0\n  prime_word_index29 = 0\n  prime_word_index30 = 0\n\
    \  prime_word_index31 = 0\n  prime_word_index32 = 0\n  prime_word_index33 = 0\n\
    \  prime_word_index34 = 0\n  prime_word_index35 = 0\n  prime_word_index36 = 0\n\
    \  prime_word_index37 = 0\n  prime_word_index38 = 0\n  prime_word_index39 = 0\n\
    \  prime_word_index40 = 0\n  prime_word_index41 = 0\n  prime_word_index42 = 0\n\
    \  prime_word_index43 = 0\n  prime_word_index44 = 0\n  prime_word_index45 = 0\n\
    \  prime_word_index46 = 0\n  prime_word_index47 = 0\n  prime_word_index48 = 0\n\
    \  prime_word_index49 = 0\n  prime_word_index50 = 0\n  prime_word_index51 = 0\n\
    \  prime_word_index52 = 0\n  prime_word_index53 = 0\n  prime_word_index54 = 0\n\
    \  prime_word_index55 = 0\n  prime_word_index56 = 0\n  prime_word_index57 = 0\n\
    \  prime_word_index58 = 0\n  prime_word_index59 = 0\n  prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(' ')\n  words.each do |word|\n    word = word.downcase\n\
    \    if word.chars.all? { |c| c.upcase == c }\n      puts word\n    end\n  end\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI appreciate your efforts, but\
    \ this doesn't meet the requirements. I appreciate your efforts, but this doesn't\
    \ meet the requirements. I appreciate your efforts, but this doesn't meet the\
    \ requirements. I appreciate your efforts, but this doesn't meet the requirements.\
    \ I appreciate your efforts, but this doesn't meet the requirements. I appreciate\
    \ your efforts, but this doesn't meet the requirements. I appreciate your efforts,\
    \ but this doesn't meet the requirements. I appreciate your efforts, but this\
    \ doesn't meet the requirements. I appreciate your efforts, but this doesn't meet\
    \ the requirements. I appreciate your efforts, but this doesn't meet the requirements.\
    \ I appreciate your efforts, but this doesn't meet the requirements. I appreciate\
    \ your efforts, but this doesn't meet the requirements. I appreciate your efforts,\
    \ but this doesn't meet the requirements. I appreciate your efforts, but this\
    \ doesn't meet the requirements. I appreciate your efforts, but this doesn't meet\
    \ the requirements. I appreciate your efforts, but this doesn't meet the requirements.\
    \ I appreciate your efforts, but this doesn't meet the requirements. I appreciate\
    \ your efforts, but this doesn't meet the requirements. I appreciate your efforts,\
    \ but this doesn't meet the requirements. I appreciate your efforts, but this\
    \ doesn't meet the requirements. I appreciate your efforts, but this doesn't meet\
    \ the requirements. I appreciate your efforts, but this doesn't meet the requirements.\
    \ I appreciate your efforts, but this doesn't meet the requirements. I appreciate\
    \ your efforts, but this doesn't meet the requirements. I appreciate your efforts,\
    \ but this doesn't meet the requirements. I appreciate your efforts, but this\
    \ doesn't meet the requirements. I appreciate your efforts, but this doesn't meet\
    \ the requirements. I appreciate your efforts, but this doesn't meet the requirements.\
    \ I appreciate your efforts, but this doesn't meet the requirements. I appreciate\
    \ your effort", "  sentence = sentence.split(\" \").sort\n  result = []\n  primes\
    \ = []\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_numbers = []\n  prime_number\
    \ = 0\n  prime_numbers = []\n  prime_number = 0\n  prime_", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \  prime_numbers.prime_numbers\n  prime_numbers.prime_numbers.map { |i| sentence[i].length\
    \ }\nend", "  sentence = sentence.split(\" \").sort\n  result = \"\"\n  for i\
    \ in (0..(sentence.length-1))\n    if sentence[i].to_s.length == prime_number(sentence[i].to_s.length)\n\
    \      result += sentence[i].to_s\n    end\n  end\n  return result\nend", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  primes\
    \ = []\n  prime_counter = 0\n  prime_numbers = []\n  prime_numbers_counter = 0\n\
    \  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  ", " \
    \ sentence = sentence.split(\" \").map(&:downcase)\n  primes = Primes.new(sentence.length)\n\
    \  primes.each do |prime|\n    prime_words = []\n    sentence.each do |word|\n\
    \      if prime_words.include?(word.length)\n        prime_words << word\n   \
    \   else\n        break\n      end\n    end\n    return prime_words.join(\" \"\
    )\n  end\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  ", "    sentence = sentence.downcase\n    words = sentence.split(\" \"\
    )\n    primes = []\n    prime_words = []\n    prime_word = \"\"\n    prime_word_count\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime", "  sentence\
    \ = sentence.split(\" \").sort\n  result = []\n  for i in (0...(sentence.length))\n\
    \    if sentence[i].to_s.length == prime(i)\n      result << sentence[i]\n   \
    \ end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.downcase\n  words\
    \ = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes = []\n\
    \  prime = 0\n  prime_found = false\n  prime_found2 = false\n  prime_found3 =\
    \ false\n  prime_found4 = false\n  prime_found5 = false\n  prime_found6 = false\n\
    \  prime_found7 = false\n  prime_found8 = false\n  prime_found9 = false\n  prime_found10\
    \ = false\n  prime_found11 = false\n  prime_found12 = false\n  prime_found13 =\
    \ false\n  prime_found14 = false\n  prime_found15 = false\n  prime_found16 = false\n\
    \  prime_found17 = false\n  prime_found18 = false\n  prime_found19 = false\n \
    \ prime_found20 = false\n  prime_found21 = false\n  prime_found22 = false\n  prime_found23\
    \ = false\n  prime_found24 = false\n  prime_found25 = false\n  prime_found26 =\
    \ false\n  prime_found27 = false\n  prime_found28 = false\n  prime_found29 = false\n\
    \  prime_found30 = false\n  prime_found31 = false\n  prime_found32 = false\n \
    \ prime_found33 = false\n  prime_found34 = false\n  prime_found35 = false\n  prime_found36\
    \ = false\n  prime_found37 = false\n  prime_found38 = false\n  prime_found39 =\
    \ false\n  prime_found40 = false\n  prime_found41 = false\n  prime_found42 = false\n\
    \  prime_found43 = false\n  prime_found44 = false\n  prime_found45 = false\n \
    \ prime_found46 = false\n  prime_found47 = false\n  prime_found48 = false\n  prime_found49\
    \ = false\n  prime_found50 = false\n  prime_found51 = false\n  prime_found52 =\
    \ false\n  prime_found53 = false\n  prime_found54 = false\n  prime_found55 = false\n\
    \  prime_found56 = false\n  prime_found57 = false\n  prime_found58 = false\n \
    \ prime_found59 = false\n  prime_found60 = false\n  prime_found61 = false\n  prime_found62\
    \ = false\n  prime_found63 = false\n  prime_found64 = false\n  prime_found65 =\
    \ false\n  prime_found66 = false\n  prime_found67 = false\n  ", "  sentence =\
    \ sentence.downcase\n  words = sentence.split(\" \")\n  words.map!{|word| word.downcase}\n\
    \  words.map!{|word| word.length}\n  words.map!{|word| word.chars.uniq.sort}\n\
    \  words.map!{|word| word.join}\n  words.map!{|word| word.length.prime? ? word\
    \ : nil}\n  words.compact!\n  words.uniq!\n  words.join\nend", "    sentence =\
    \ sentence.split(\" \").sort\n    prime_numbers = []\n    prime_numbers_string\
    \ = \"\"\n    prime_numbers_string += sentence[0]\n    prime_numbers_string +=\
    \ sentence[1]\n    prime_numbers_string += sentence[2]\n    prime_numbers_string\
    \ += sentence[3]\n    prime_numbers_string += sentence[4]\n    prime_numbers_string\
    \ += sentence[5]\n    prime_numbers_string += sentence[6]\n    prime_numbers_string\
    \ += sentence[7]\n    prime_numbers_string += sentence[8]\n    prime_numbers_string\
    \ += sentence[9]\n    prime_numbers_string += sentence[10]\n    prime_numbers_string\
    \ += sentence[11]\n    prime_numbers_string += sentence[12]\n    prime_numbers_string\
    \ += sentence[13]\n    prime_numbers_string += sentence[14]\n    prime_numbers_string\
    \ += sentence[15]\n    prime_numbers_string += sentence[16]\n    prime_numbers_string\
    \ += sentence[17]\n    prime_numbers_string += sentence[18]\n    prime_numbers_string\
    \ += sentence[19]\n    prime_numbers_string += sentence[20]\n    prime_numbers_string\
    \ += sentence[21]\n    prime_numbers_string += sentence[22]\n    prime_numbers_string\
    \ += sentence[23]\n    prime_numbers_string += sentence[24]\n    prime_numbers_string\
    \ += sentence[25]\n    prime_numbers_string += sentence[26]\n    prime_numbers_string\
    \ += sentence[27]\n    prime_numbers_string += sentence[28]\n    prime_numbers_string\
    \ += sentence[29]\n    prime_numbers_string += sentence[30]\n    prime_numbers_string\
    \ += sentence[31]\n    prime_numbers_string += sentence[32]\n    prime_numbers_string\
    \ += sentence[33]\n    prime_numbers_string += sentence[34]\n    prime_numbers_string\
    \ += sentence[35]\n    prime_numbers_string += sentence[36]\n    prime_numbers_string\
    \ += sentence[37]\n    prime_numbers_string += sentence[38]\n    prime_numbers_string\
    \ += sentence[39]\n    prime_numbers_string += sentence[40]\n    prime_numbers_string\
    \ += sentence[41]\n    prime_numbers_string += sentence", "    sentence = sentence.split(\"\
    \ \").sort\n    sentence.length.each do |length|\n        sentence.length.each\
    \ do |length|\n            sentence.length.each do |length|\n                sentence.length.each\
    \ do |length|\n                    sentence.length.each do |length|\n        \
    \                sentence.length.each do |length|\n                          \
    \  sentence.length.each do |length|\n                                sentence.length.each\
    \ do |length|\n                                    sentence.length.each do |length|\n\
    \                                        sentence.length.each do |length|\n  \
    \                                          sentence.length.each do |length|\n\
    \                                                sentence.length.each do |length|\n\
    \                                                    sentence.length.each do |length|\n\
    \                                                        sentence.length.each\
    \ do |length|\n                                                            sentence.length.each\
    \ do |length|\n                                                              \
    \  sentence.length.each do |length|\n                                        \
    \                            sentence.length.each do |length|\n              \
    \                                                          sentence.length.each\
    \ do |length|\n                                                              \
    \              sentence.length.each do |length|\n                            \
    \                                                    sentence.length.each do |length|\n\
    \                                                                            \
    \        sentence.length.each do |length|\n                                  \
    \                                                      sentence.length.each do\
    \ |length|\n                                                                 \
    \                           sentence.length.each do |length|\n               \
    \                                                                            \
    \     sentence.length.each do |length|\n                                     \
    \                                                               sentence.length.each\
    \ do |length|\n                                                              \
    \                                          sentence.length.each do |length|\n\
    \                                                                            \
    \                                sentence.length.each do |length|\n          \
    \                                                                            \
    \                          sentence.length.each do |length|\n                \
    \                                                                            \
    \                        sentence.length.each do |length|\n                  \
    \                                                                            \
    \                          sentence.length.each do |length|\n                \
    \                                                                            \
    \                                sentence.length.each do |length|\n          \
    \                                                                            \
    \                                          sentence.length.each do |length|\n\
    \                                                                            \
    \                                                        sentence.length.each\
    \ do |length|\n                                                              \
    \                                                                          sentence.length.each\
    \ do |length|\n                                                              \
    \                                                                            \
    \  sentence.length.each do |length|\n                                        \
    \                                                                            \
    \                            sentence.length.each do |length|\n              \
    \                                                                            \
    \                                                          sentence.length.each\
    \ do |length|\n                                                              \
    \                                                                            \
    \              sentence.length.each do |length|\n                            \
    \                                                                            \
    \                                                    sentence.length.each do |length|\n\
    \                                                                            \
    \                                                                            \
    \        sentence.length.each do |length|\n                                  \
    \                                                                            \
    \                                                      sentence.length.each do\
    \ |length|\n                                                                 \
    \                                                                            \
    \                           sentence.length.each do |length|\n               \
    \                                                                            \
    \                                                                            \
    \     sentence.length.each do |length|\n                                     \
    \                                                                            \
    \                                                               sentence.length.each\
    \ do |length|\n                                                              \
    \                                                                            \
    \                                          sentence.length.each do |length|\n\
    \                                                                            \
    \                                                                            \
    \                                sentence.length.each do |length|\n          \
    \                                                                            \
    \                                                                            \
    \                          sentence.length.each do |length|\n                \
    \                                                                            \
    \                                                                            \
    \                        sentence.length.each do |length|\n                  \
    \                                                                            \
    \                                                                            \
    \                          sentence.length.each do |length|\n                \
    \                                                                            \
    \                                                                            \
    \                                sentence.length.each do |length|", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat\
    \ words[0...-1].select { |word| is_prime?(word.length) }\n  new_words.concat words[0...-1].select\
    \ { |word| !is_prime?(word.length) }\n  new_words.join(\" \")\nend", "  sentence\
    \ = sentence.split(\" \").map { |word| word.downcase }\n  prime_words = []\n \
    \ prime_words.push(sentence[0])\n  prime_words.each do |word|\n    prime_words.push(word)\
    \ unless prime_words.include?(word*2)\n    prime_words.push(word) unless prime_words.include?(word*3)\n\
    \    prime_words.push(word) unless prime_words.include?(word*5)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*7)\n    prime_words.push(word) unless prime_words.include?(word*11)\n\
    \    prime_words.push(word) unless prime_words.include?(word*13)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*17)\n    prime_words.push(word) unless prime_words.include?(word*19)\n\
    \    prime_words.push(word) unless prime_words.include?(word*23)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*29)\n    prime_words.push(word) unless prime_words.include?(word*31)\n\
    \    prime_words.push(word) unless prime_words.include?(word*37)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*43)\n    prime_words.push(word) unless prime_words.include?(word*49)\n\
    \    prime_words.push(word) unless prime_words.include?(word*57)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*61)\n    prime_words.push(word) unless prime_words.include?(word*67)\n\
    \    prime_words.push(word) unless prime_words.include?(word*73)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*79)\n    prime_words.push(word) unless prime_words.include?(word*85)\n\
    \    prime_words.push(word) unless prime_words.include?(word*89)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*97)\n    prime_words.push(word) unless prime_words.include?(word*101)\n\
    \    prime_words.push(word) unless prime_words.include?(word*103)\n    prime_words.push(word)\
    \ unless prime_words.include?(word*107)\n    prime_words.push(", "  sentence =\
    \ sentence.split(\" \").sort\n  new_sentence = \"\"\n  primes = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  ", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  prime_numbers = sentence.length.prime_numbers\n\
    \  prime_numbers.map { |prime| sentence.select { |word| prime == word.length }\
    \ }.join(\" \")\nend", "  sentence = sentence.split(\" \").map{|word| word.downcase}\n\
    \  prime_numbers = PrimeNumbers.new(sentence.length)\n  prime_numbers.prime_numbers_upto(sentence.length-1)\n\
    \  prime_numbers.each do |prime|\n    sentence.delete_if {|word| prime % word.length\
    \ == 0}\n  end\n  sentence.join(' ')\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  primes = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []\n  prime_words = []\n  prime_words = []\n  prime_words\
    \ = []\n  prime_words = []", "  sentence = sentence.split(\" \").map(&:downcase)\n\
    \  prime_numbers = PrimeNumbers.new(sentence.length)\n  prime_numbers.prime_numbers_upto(sentence.length).each\
    \ do |prime_number|\n    sentence = sentence.map { |word| word[prime_number] }\n\
    \  end\n  sentence.join(' ')\nend", "    sentence = sentence.split(\" \").sort\n\
    \    sentence.length.prime?\n    sentence.join\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    word = word.downcase\n    prime_words = []\n\
    \    prime_words.concat(prime_numbers(word))\n    prime_words.each do |prime_word|\n\
    \      new_words.delete(word)\n    end\n  end\n  new_words.join(\" \")\nend\n\
    </code>\n<|/ a tags=ruby,primes,string |>\n<| c |>\nI like your solution, however\
    \ it fails for \"This is a test\" because \"test\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" because \"swimming\" is not prime. Also it fails\
    \ for \"lets go for swimming\" ", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  primes = []\n  prime_counter = 0\n  prime_words = []\n\
    \  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words =\
    \ []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime",
  "  sentence = sentence.split(\" \").sort\n  sentence.length.each do |length|\n \
    \   sentence.reject { |word| word > length }\n  end\n  sentence.join\nend", " \
    \ sentence = sentence.split(\" \").map { |word| word.downcase }\n  prime_words\
    \ = []\n  prime_words.push(sentence[0])\n  prime_words.push(sentence[1])\n  prime_words.push(sentence[2])\n\
    \  prime_words.each do |word|\n    prime_words.push(word) if prime_words.count(word)\
    \ == 3\n  end\n  prime_words.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_sentence = \"\"\n  primes = []\n  prime_words\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_words.concat(words)\n  new_words.each do |word|\n\
    \    word = word.downcase\n    if word.length % 2 == 0\n      new_words.delete(word)\n\
    \    end\n  end\n  new_words.join(\" \")\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(' ')\n  new_words = []\n  new_word = ''\n  primes =\
    \ []\n  prime = 0\n  prime_counter = 0\n  prime_word = ''\n  prime_counter = 0\n\
    \  prime_word = ''\n  prime_counter = 0\n  prime_word = ''\n  prime_counter =\
    \ 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter = 0\n  prime_counter\
    \ = 0\n  prime_", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  primes = []\n  prime_counter = 0\n  prime_words = []\n\
    \  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words =\
    \ []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime",
  "  sentence = sentence.split(\" \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n\
    \    word = sentence[i]\n    i += 1\n    if word.length % 2 == 0\n      result.push(word)\n\
    \    end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \"\
    ).map(&:downcase)\n  prime_numbers = PrimeNumber.new(sentence.length)\n  prime_numbers.each\
    \ do |prime_number|\n    prime_number_string = \"\"\n    prime_number.times do\
    \ |i|\n      prime_number_string << sentence[i]\n    end\n    prime_number_string.gsub!(/[^a-z]/i,\
    \ \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, \"\")\n    prime_number_string.gsub!(/\\\
    s+/, \"\")\n    prime_number_string.gsub!(/\\s+/, ", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    next if word.empty?\n    next if word.include?(\",\")\n    next if word.include?(\"\
    .\")\n    next if word.include?(\"!\")\n    next if word.include?(\"?\")\n   \
    \ next if word.include?(\";\")\n    next if word.include?(\":\")\n    next if\
    \ word.include?(\"(\")\n    next if word.include?(\")\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"[\")\n    next if word.include?(\"]\")\n   \
    \ next if word.include?(\"{\")\n    next if word.include?(\"}\")\n    next if\
    \ word.include?(\";\")\n    next if word.include?(\":\")\n    next if word.include?(\"\
    (\")\n    next if word.include?(\")\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"[\")\n    next if word.include?(\"]\")\n    next if\
    \ word.include?(\"{\")\n    next if word.include?(\"}\")\n    next if word.include?(\"\
    ;\")\n    next if word.include?(\":\")\n    next if word.include?(\"(\")\n   \
    \ next if word.include?(\")\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"[\")\n    next if word.include?(\"]\")\n    next if word.include?(\"\
    {\")\n    next if word.include?(\"}\")\n    next if word.include?(\";\")\n   \
    \ next if word.include?(\":\")\n    next if word.include?(\"(\")\n    next if\
    \ word.include?(\")\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    [\")\n    next if word.include?(\"]\")\n    next if word.include?(\"{\")\n   \
    \ next if word.include?(\"}\")\n    next if word.include?(\";\")\n    next if\
    \ word.include?(\":\")\n    next if word.include?(\"(\")\n    next if word.include?(\"\
    )\")\n    next if word.include?(\"'\")\n    next if word.include?(\"[\")\n   \
    \ next if word.include?(\"]\")\n    next if word.include?(\"{\")\n    next if\
    \ word.include?(\"}\")\n    next if word.include?(\";\")\n    next if word.include?(\"\
    :\")", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  words.each\
    \ do |word|\n    word = word.downcase\n    next if word.empty?\n    word = word.gsub(/[^a-z]/,\
    \ \"\")\n    next if word.empty?\n    word = word.gsub(/\\s+/, \"\")\n    next\
    \ if word.empty?\n    word = word.split(\"\")\n    next if word.empty?\n    word\
    \ = word.map(&:to_i)\n    next if word.empty?\n    word = word.inject(:&)\n  \
    \  next if word.empty?\n    word = word.to_s\n    next if word.empty?\n    word\
    \ = word.split(\"\")\n    next if word.empty?\n    word = word.map(&:to_i)\n \
    \   next if word.empty?\n    word = word.inject(:&)\n    next if word.empty?\n\
    \    word = word.to_s\n    next if word.empty?\n    word = word.split(\"\")\n\
    \    next if word.empty?\n    word = word.map(&:to_i)\n    next if word.empty?\n\
    \    word = word.inject(:&)\n    next if word.empty?\n    word = word.to_s\n \
    \   next if word.empty?\n    word = word.split(\"\")\n    next if word.empty?\n\
    \    word = word.map(&:to_i)\n    next if word.empty?\n    word = word.inject(:&)\n\
    \    next if word.empty?\n    word = word.to_s\n    next if word.empty?\n    word\
    \ = word.split(\"\")\n    next if word.empty?\n    word = word.map(&:to_i)\n \
    \   next if word.empty?\n    word = word.inject(:&)\n    next if word.empty?\n\
    \    word = word.to_s\n    next if word.empty?\n    word = word.split(\"\")\n\
    \    next if word.empty?\n    word = word.map(&:to_i)\n    next if word.empty?\n\
    \    word = word.inject(:&)\n    next if word.empty?\n    word = word.to_s\n \
    \   next if word.empty?\n    word = word.split(\"\")\n    next if word.empty?\n\
    \    word = word.map(&:to_i)\n    next if word.empty?\n    word = word.inject(:&)\n\
    \    next if word.empty?\n    word = word.to_s\n    next if word.empty?\n    word\
    \ = word.split(\"\")\n    next if word.empty?\n    word = word.map(&:to_i)\n \
    \   next if word.empty?\n    word = word.inject(:&)", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  result = \"\"\n  primes = []\n  prime_counter\
    \ = 0\n  prime_numbers = []\n  prime_numbers_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array\
    \ = []\n  prime_numbers_array_counter = 0\n  prime_numbers_array = []\n  prime_numbers_array_counter\
    \ = 0\n  prime_numbers_array = []\n  prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  result = []\n  primes = []\n  prime_counter\
    \ = 0\n  prime_counter2 = 1\n  prime_counter3 = 2\n  prime_counter4 = 3\n  prime_counter5\
    \ = 4\n  prime_counter6 = 5\n  prime_counter7 = 6\n  prime_counter8 = 7\n  prime_counter9\
    \ = 8\n  prime_counter10 = 9\n  prime_counter11 = 10\n  prime_counter12 = 11\n\
    \  prime_counter13 = 12\n  prime_counter14 = 13\n  prime_counter15 = 14\n  prime_counter16\
    \ = 15\n  prime_counter17 = 16\n  prime_counter18 = 17\n  prime_counter19 = 18\n\
    \  prime_counter20 = 19\n  prime_counter21 = 20\n  prime_counter22 = 21\n  prime_counter23\
    \ = 22\n  prime_counter24 = 23\n  prime_counter25 = 24\n  prime_counter26 = 25\n\
    \  prime_counter27 = 26\n  prime_counter28 = 27\n  prime_counter29 = 28\n  prime_counter30\
    \ = 29\n  prime_counter31 = 30\n  prime_counter32 = 31\n  prime_counter33 = 32\n\
    \  prime_counter34 = 33\n  prime_counter35 = 34\n  prime_counter36 = 35\n  prime_counter37\
    \ = 36\n  prime_counter38 = 37\n  prime_counter39 = 38\n  prime_counter40 = 39\n\
    \  prime_counter41 = 40\n  prime_counter42 = 41\n  prime_counter43 = 42\n  prime_counter44\
    \ = 43\n  prime_counter45 = 44\n  prime_counter46 = 45\n  prime_counter47 = 46\n\
    \  prime_counter48 = 47\n  prime_counter49 = 48\n  prime_counter50 = 49\n  prime_counter51\
    \ = 50\n  prime_counter52 = 51\n  prime_counter53 = 52\n  prime_counter54 = 53\n\
    \  prime_counter55 = 54\n  prime_counter56 = 55\n  prime_counter57 = 56\n  prime_counter58\
    \ = 57\n  prime_counter59 = 58\n  prime_counter60 = 59\n  prime_counter61 = 60\n\
    \  prime_counter62 = 61\n  prime_counter63 = 62\n  prime_counter64 = 63\n  ",
  "  sentence = sentence.split(\" \").map { |word| word.downcase }\n  primes = Primes.new(sentence.length)\n\
    \  primes.primes.each do |prime|\n    prime_words = []\n    sentence.each do |word|\n\
    \      prime_words << word if prime_words.include?(word) && primes.check(prime)\n\
    \    end\n    return prime_words.join(\" \")\n  end\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    next if word.empty?\n    next if word.include?(\",\")\n    next if word.include?(\"\
    .\")\n    next if word.include?(\"!\")\n    next if word.include?(\"?\")\n   \
    \ next if word.include?(\";\")\n    next if word.include?(\":\")\n    next if\
    \ word.include?(\";\")\n    next if word.include?(\"!\")\n    next if word.include?(\"\
    ?\")\n    next if word.include?(\",\")\n    next if word.include?(\".\")\n   \
    \ next if word.include?(\":\")\n    next if word.include?(\";\")\n    next if\
    \ word.include?(\"!\")\n    next if word.include?(\"?\")\n    next if word.include?(\"\
    ,\")\n    next if word.include?(\".\")\n    next if word.include?(\":\")\n   \
    \ next if word.include?(\";\")\n    next if word.include?(\"!\")\n    next if\
    \ word.include?(\"?\")\n    next if word.include?(\",\")\n    next if word.include?(\"\
    .\")\n    next if word.include?(\":\")\n    next if word.include?(\";\")\n   \
    \ next if word.include?(\"!\")\n    next if word.include?(\"?\")\n    next if\
    \ word.include?(\",\")\n    next if word.include?(\".\")\n    next if word.include?(\"\
    :\")\n    next if word.include?(\";\")\n    next if word.include?(\"!\")\n   \
    \ next if word.include?(\"?\")\n    next if word.include?(\",\")\n    next if\
    \ word.include?(\".\")\n    next if word.include?(\":\")\n    next if word.include?(\"\
    ;\")\n    next if word.include?(\"!\")\n    next if word.include?(\"?\")\n   \
    \ next if word.include?(\",\")\n    next if word.include?(\".\")\n    next if\
    \ word.include?(\":\")\n    next if word.include?(\";\")\n    next if word.include?(\"\
    !\")\n    next if word.include?(\"?\")\n    next if word.include?(\",\")\n   \
    \ next if word.include?(\".\")\n    next if word.include?(\":\")\n    next if\
    \ word.include?(\";\")\n    next if word.include?(\"!\")\n    next if word.include?(\"\
    ?\")\n    next if word.", "    sentence = sentence.split(\" \").sort\n    sentence.length.prime?\n\
    \    sentence.join\nend", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  primes = Primes.new(sentence.length)\n  primes.primes.each do |prime|\n\
    \    prime_words = []\n    sentence.each do |word|\n      prime_words << word\
    \ if primes.check(prime, word.length)\n    end\n    return prime_words.join(\"\
    \ \")\n  end\nend", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  prime_numbers = PrimeNumber.new(sentence.length)\n  prime_numbers.prime_numbers\n\
    \  prime_numbers.each do |prime_number|\n    sentence = sentence.map { |word|\
    \ word if prime_number.prime_number_to_string(word) == prime_number.prime_number_to_string(word)\
    \ }\n  end\n  sentence.join(' ')\nend\n</code>\n<|/ a tags=ruby,primes,string\
    \ |>\n<| c |>\nI like your solution, but I do not understand why you use \"each_with_object\"\
    \ instead of \"inject\". I think it would be more efficient to use \"inject\"\
    \ instead of \"each_with_object\". Can you explain why?\n<|/ c |>\n<| c |>\n`inject`\
    \ will return the original array unchanged, whereas `each_with_object` will return\
    \ the original array with the new element appended. `inject` will also return\
    \ the original array if there are no elements to inject.\n<|/ c |>\n<| c |>\n\
    `inject` will also return the original array if there are no elements to inject.\n\
    <|/ c |>\n<| c |>\nI see. Thank you for the explanation!\n<|/ c |>\n<| a tags=ruby,primes,string\
    \ |>\n<code>", "  sentence = sentence.split(\" \").sort\n  result = []\n  for\
    \ i in (0..(sentence.length-1))\n    if sentence[i].to_s.length == prime(i)\n\
    \      result << sentence[i]\n    end\n  end\n  result.join(\" \")\nend", "  sentence\
    \ = sentence.split(\" \").map(&:capitalize).join(\" \")\n  primes = Primes.new(sentence)\n\
    \  primes.to_sentence\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_words.concat(words)\n  new_words.each do |word|\n\
    \    if word.length != 2\n      new_words.delete(word)\n    end\n  end\n  new_words.uniq\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words\
    \ = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_counter = 0\n \
    \ prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_word = \"\"\n  prime_counter = 0\n  prime_word", "  sentence =\
    \ sentence.downcase\n  words = sentence.split(\" \")\n  words.each do |word|\n\
    \    word = word.downcase\n    next if word.empty?\n    next if word.include?(\"\
    ,\")\n    next if word.include?(\".\")\n    next if word.include?(\"!\")\n   \
    \ next if word.include?(\"?\")\n    next if word.include?(\";\")\n    next if\
    \ word.include?(\":\")\n    next if word.include?(\";\")\n    next if word.include?(\"\
    (\")\n    next if word.include?(\")\")\n    next if word.include?(\"[\")\n   \
    \ next if word.include?(\"]\")\n    next if word.include?(\"{\")\n    next if\
    \ word.include?(\"}\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    \\\"\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n\
    \    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next\
    \ if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?", "  sentence = sentence.split(\" \").sort\n  new_sentence\
    \ = \"\"\n  for i in sentence\n    if i.to_s.length % 2 == 0\n      new_sentence\
    \ << i\n    end\n  end\n  new_sentence\nend", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n    if sentence[i].to_s.length\
    \ % 2 == 0\n      result.push(sentence[i])\n    i += 1\n  result.join(\" \")\n\
    end", "    sentence = sentence.split(\" \").sort\n    sentence.length.each do\
    \ |length|\n        sentence.each do |word|\n            if word.length == length\n\
    \                puts word\n            end\n        end\n    end\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\nThanks for your answer. I'm still trying to\
    \ understand your code. Can you please explain what does `sentence = sentence.split(\"\
    \ \").sort` do? And what does `sentence.length.each do |length|` do?\n<|/ c |>\n\
    <| c |>\n`split` splits the string into an array of words. `sort` sorts the array\
    \ in alphabetical order. `length` returns the length of the array.\n<|/ c |>\n\
    <| c |>\nThanks. I understand now. Can you please explain what does `sentence.each\
    \ do |word|` do?\n<|/ c |>\n<| c |>\n`each` iterates over the array and executes\
    \ the given block for each element. `word` is the current element in the array.\n\
    <|/ c |>\n<| c |>\nThanks. I understand now. Can you please explain what does\
    \ `sentence.length.each do |length|` do?\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_words.concat(words)\n  new_words.each do |word|\n    if word.length\
    \ != prime(word.length)\n      new_words.delete(word)\n    end\n  end\n  new_words.join(\"\
    \ \")\nend", "    words = sentence.split(\" \")\n    primes = []\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_word_count = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_string = \"\"\n    prime_word_string_index\
    \ = 0\n    prime_word_string_length = 0\n    prime_word_string_index = 0\n   \
    \ prime_word_string_length = 0\n    prime_word_string_index = 0\n    prime_word_string_length\
    \ = 0\n    prime_word_string_index = 0\n    prime_word_string_length = 0\n   \
    \ prime_word_string_index = 0\n    prime_word_string_length = 0\n    prime_word_string_index\
    \ = 0\n    prime_word_string_length = 0\n    prime_word_string_index = 0\n   \
    \ prime_word_string_length = 0\n    prime_word_string_index = 0\n    prime_word_string_length\
    \ = 0\n    prime_word_string_index = 0\n    prime_word_string_length = 0\n   \
    \ prime_word_string_index = 0\n    prime_word_string_length = 0\n    prime_word_string_index\
    \ = 0\n    prime_word_string_length = 0\n    prime_word_string_index = 0\n   \
    \ prime_word_string_length = 0\n    prime_word_string_index = 0\n    prime_word_string_length\
    \ = 0\n    prime_word_string_index = 0\n    prime_word_string_length = 0\n   \
    \ prime_word_string_index = 0\n    prime_word_string_length = 0\n    prime_word_string_index\
    \ = 0\n    prime_word_string_length = 0\n    prime_word_string_index = 0\n   \
    \ prime_word_string_length = 0\n    prime_word_string_index = 0\n    prime_word_string_length\
    \ = 0\n    prime_word_string_index = 0\n    prime_word_string_length = 0\n   \
    \ prime_word_string_index = 0\n    prime_word_string_length = 0\n    prime_word_string_index\
    \ = 0\n    prime_word_string_length = 0\n    prime_word_string_index = 0\n   \
    \ prime_word_string_length = 0\n    prime_word_string_index = 0\n    prime_word_string_length\
    \ = 0\n    prime_word_string_index = 0\n    prime_word_string_length = 0\n   \
    \ prime_word_string_index = 0\n    prime_word_string_length = 0\n    prime_word_string_index\
    \ = 0\n    prime_word_string_length = 0\n    prime_word_string_index = 0\n   \
    \ prime_word_string_length = 0\n    prime_word_string_index = 0\n    prime_word_string_length\
    \ = 0\n    prime_word_string_index = 0\n    prime_word_string_length = 0\n", " \
    \ sentence = sentence.split(\" \").map { |word| word.downcase }\n  primes = Primes.new(sentence.length)\n\
    \  primes.primes\n  primes.each do |prime|\n    sentence = sentence.map { |word|\
    \ word.split(prime).join(prime) }\n  end\n  sentence.join(' ')\nend", "    sentence\
    \ = sentence.split(\" \").sort\n    primes = []\n    i = 0\n    while i < sentence.length\n\
    \        if sentence[i].to_s.length == prime\n            primes << sentence[i].to_s\n\
    \            i += 1\n        end\n    end\n    sentence.join(\" \")\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `sentence = sentence.split(\" \"\
    ).sort` will sort the array in place, but `sentence.join(\" \")` will still return\
    \ the original string. Also, `sentence.length` will return the length of the original\
    \ string, not the length of the sorted array.\n<|/ c |>\n<| c |>\nI missed the\
    \ join part. Thanks for pointing that out. I'll edit my answer.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    I edited my answer. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  sentence = sentence.split(\" \").map{|x| x.downcase}\n  prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \  prime_numbers.prime_numbers_upto(sentence.length-1)\n  prime_numbers.each do\
    \ |prime|\n    sentence.delete_if {|x| x % prime == 0}\n  end\n  sentence.join('\
    \ ')\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this solution is O(n^2)\
    \ because of the `delete_if` call. Also, the `prime_numbers` array is created\
    \ with every iteration of the loop, so it would be better to create it once before\
    \ the loop.\n<|/ c |>\n<| c |>\nYes, you are right. `delete_if` will take O(n)\
    \ time. `prime_numbers` array is created with every iteration of the loop, so\
    \ it would be better to create it once before the loop.\n<|/ c |>\n<| c |>\nI\
    \ believe this solution is O(n^2) because of the `delete_if` call. Also, the `prime_numbers`\
    \ array is created with every iteration of the loop, so it would be better to\
    \ create it once before the loop.\n<|/ c |>\n<| c |>\nYes, you are right. `delete_if`\
    \ will take O(n) time. `prime_numbers` array is created with every iteration of\
    \ the loop, so it would be better to create it once before the loop.\n<|/ c |>\n\
    <| c |>\nI believe this solution is O(n^2) because of the `delete_if` call. Also,\
    \ the `prime_numbers` array is created with every iteration of the loop, so it\
    \ would be better to create it once before the loop.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_", "  sentence\
    \ = sentence.split(\" \").sort\n  result = []\n  for i in (0...sentence.length)\n\
    \    if sentence[i].to_s.length == prime(i)\n      result << sentence[i]\n   \
    \ end\n  end\n  result.join(\" \")\nend", "    sentence = sentence.split(\" \"\
    ).sort\n    sentence = sentence.map {|x| x.to_i}\n    sentence = sentence.reduce(:+)\n\
    \    sentence = sentence.to_s\n    sentence\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    word = word.downcase\n    if word.length % 2\
    \ == 0\n      new_words.delete(word)\n    end\n  end\n  new_words.join(\" \")\n\
    end", "    sentence = sentence.split(\" \").sort\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = sentence.split(\"\")\n    sentence\
    \ = sentence.join\n    sentence = sentence.split(\"\")\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = sentence.split(\"\")\n    sentence\
    \ = sentence.join\n    sentence = sentence.split(\"\")\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = sentence.split(\"\")\n    sentence\
    \ = sentence.join\n    sentence = sentence.split(\"\")\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = sentence.split(\"\")\n    sentence\
    \ = sentence.join\n    sentence = sentence.split(\"\")\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = sentence.split(\"\")\n    sentence\
    \ = sentence.join\n    sentence = sentence.split(\"\")\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = sentence.split(\"\")\n    sentence\
    \ = sentence.join\n    sentence = sentence.split(\"\")\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = sentence.split(\"\")\n    sentence\
    \ = sentence.join\n    sentence = sentence.split(\"\")\n    sentence = sentence.join\n\
    \    sentence = sentence.split(\"\")\n    sentence = sentence.join\n    sentence\
    \ = sentence.split(\"\")\n    sentence = sentence.join\n    sentence = sentence.split(\"\
    \")\n    sentence = sentence.join\n    sentence = ", "  sentence = sentence.split(\"\
    \ \").map(&:to_i)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n\
    \  sentence = sentence.reduce(&:*)\n  sentence = sentence.reduce(&:*)\n  sentence\
    \ = sentence.reduce(&:*)", "    sentence = sentence.split(\" \").sort\n    sentence.join(\"\
    \ \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  result = \"\"\n  primes = []\n  prime_numbers = prime_numbers(words.length)\n\
    \  prime_numbers.each do |prime|\n    primes << prime\n  end\n  primes.each do\
    \ |prime|\n    prime_words = []\n    words.each do |word|\n      if prime_words.include?(word.length)\n\
    \        prime_words << word\n      end\n    end\n    prime_words.each do |word|\n\
    \      result << word\n    end\n  end\n  result\nend", "  sentence = sentence.split(\"\
    \ \").map(&:capitalize).join(\" \")\n  primes = Primes.new(sentence)\n  primes.primes.sort.map\
    \ { |i| sentence.split(\" \").map(&:capitalize).join(\" \").split(\" \").take(i).join(\"\
    \ \") }.join(\" \")\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  ", "  sentence = sentence.split(\" \").map { |word| word.downcase }\n\
    \  prime_numbers = sentence.map { |word| word.chars.map(&:to_i).inject(:+) }\n\
    \  prime_numbers.select { |prime| prime > 1 }.sort.join\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    if word.length % 2 == 0\n      puts word\n    end\n  end\nend", "  sentence\
    \ = sentence.split(\" \").map(&:downcase)\n  prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \  prime_numbers.prime_numbers_upto(sentence.length).each do |prime|\n    prime_numbers.prime_numbers_upto(prime).each\
    \ do |prime_number|\n      prime_numbers.prime_numbers_upto(prime_number).each\
    \ do |prime_number_2|\n        prime_numbers.prime_numbers_upto(prime_number_2).each\
    \ do |prime_number_3|\n          prime_numbers.prime_numbers_upto(prime_number_3).each\
    \ do |prime_number_4|\n            prime_numbers.prime_numbers_upto(prime_number_4).each\
    \ do |prime_number_5|\n              prime_numbers.prime_numbers_upto(prime_number_5).each\
    \ do |prime_number_6|\n                prime_numbers.prime_numbers_upto(prime_number_6).each\
    \ do |prime_number_7|\n                  prime_numbers.prime_numbers_upto(prime_number_7).each\
    \ do |prime_number_8|\n                    prime_numbers.prime_numbers_upto(prime_number_8).each\
    \ do |prime_number_9|\n                      prime_numbers.prime_numbers_upto(prime_number_9).each\
    \ do |prime_number_10|\n                        prime_numbers.prime_numbers_upto(prime_number_10).each\
    \ do |prime_number_11|\n                          prime_numbers.prime_numbers_upto(prime_number_11).each\
    \ do |prime_number_12|\n                            prime_numbers.prime_numbers_upto(prime_number_12).each\
    \ do |prime_number_13|\n                              prime_numbers.prime_numbers_upto(prime_number_13).each\
    \ do |prime_number_14|\n                                prime_numbers.prime_numbers_upto(prime_number_14).each\
    \ do |prime_number_15|\n                                  prime_numbers.prime_numbers_upto(prime_number_15).each\
    \ do |prime_number_16|\n                                    prime_numbers.prime_numbers_upto(prime_number_16).each\
    \ do |prime_number_17|\n                                      prime_numbers.prime_numbers_upto(prime_number_17).each\
    \ do |prime_number_18|\n                                        prime_numbers.prime_numbers_upto(prime_number_18).each\
    \ do |prime_number_19|\n                                          prime_numbers.prime_numbers_upto(prime_number_19).each\
    \ do |prime_number_20|\n                                            prime_numbers.prime_numbers_upto(prime_number_",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_found = false\n \
    \ prime_found2 = false\n  prime_found3 = false\n  prime_found4 = false\n  prime_found5\
    \ = false\n  prime_found6 = false\n  prime_found7 = false\n  prime_found8 = false\n\
    \  prime_found9 = false\n  prime_found10 = false\n  prime_found11 = false\n  prime_found12\
    \ = false\n  prime_found13 = false\n  prime_found14 = false\n  prime_found15 =\
    \ false\n  prime_found16 = false\n  prime_found17 = false\n  prime_found18 = false\n\
    \  prime_found19 = false\n  prime_found20 = false\n  prime_found21 = false\n \
    \ prime_found22 = false\n  prime_found23 = false\n  prime_found24 = false\n  prime_found25\
    \ = false\n  prime_found26 = false\n  prime_found27 = false\n  prime_found28 =\
    \ false\n  prime_found29 = false\n  prime_found30 = false\n  prime_found31 = false\n\
    \  prime_found32 = false\n  prime_found33 = false\n  prime_found34 = false\n \
    \ prime_found35 = false\n  prime_found36 = false\n  prime_found37 = false\n  prime_found38\
    \ = false\n  prime_found39 = false\n  prime_found40 = false\n  prime_found41 =\
    \ false\n  prime_found42 = false\n  prime_found43 = false\n  prime_found44 = false\n\
    \  prime_found45 = false\n  prime_found46 = false\n  prime_found47 = false\n \
    \ prime_found48 = false\n  prime_found49 = false\n  prime_found50 = false\n  prime_found51\
    \ = false\n  prime_found52 = false\n  prime_found53 = false\n  prime_found54 =\
    \ false\n  prime_found55 = false\n  prime_found56 = false\n  prime_found57 = false\n\
    \  prime_found58 = false\n  prime_found59 = false\n  prime_found60 = false\n \
    \ prime_found61 = false\n  prime_found62 = false\n  prime_found63 = false\n  prime_found64\
    \ = false\n  prime_found65 = false\n  prime_found66 = false\n  prime_found67 =\
    \ false\n  ", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  words.each do |word|\n    word = word.downcase\n    if word.length % 2 ==\
    \ 1\n      puts \"#{word} is not prime number\"\n    else\n      puts \"#{word}\
    \ is prime number\"\n    end\n  end\nend", "  sentence = sentence.split(\" \"\
    ).map { |word| word.downcase }\n  primes = Primes.new(sentence.length)\n  primes.primes\n\
    \  primes.each do |prime|\n    break if primes.include?(prime)\n    sentence =\
    \ sentence.map { |word| word.gsub(prime, \"\") }\n  end\n  sentence.join(' ')\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result\
    \ = []\n  primes = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_counter = 0\n  prime_", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  prime_numbers = Prime::PRIMES.map { |prime|\
    \ prime * prime }\n  prime_numbers.find { |prime| prime <= sentence.length }\n\
    end", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result\
    \ = []\n  primes = []\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_words = []\n  prime_word = \"\"\n", "  sentence\
    \ = sentence.split(\" \").sort\n  result = []\n  i = 0\n  while i < sentence.length\n\
    \    if sentence[i].to_s.length == 1 && sentence[i].to_s[0] == sentence[i]\n \
    \     result.push(sentence[i])\n      i += 1\n    i += 1\n  result.join(\" \"\
    )\nend", "  sentence = sentence.split(\" \").map { |word| word.downcase }\n  primes\
    \ = Primes.new(sentence.length)\n  primes.primes.each do |prime|\n    prime_sentence\
    \ = sentence.reject { |word| prime == word.length }\n    if prime_sentence.empty?\n\
    \      primes.primes.delete(prime)\n    end\n  end\n  sentence.join(\" \")\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_words.concat(words)\n  new_words.each do |word|\n    word = word.downcase\n\
    \    word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\s+/, \"\")\n  \
    \  word = word.gsub(/\\s+$/, \"\")\n    word = word.gsub(/\\s+/, \" \")\n    word\
    \ = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word =\
    \ word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\\
    s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n\
    \    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n  \
    \  word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word\
    \ = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word =\
    \ word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\\
    s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/,\
    \ \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \"\
    \ \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \"\
    )\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n\
    \    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n  \
    \  word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word\
    \ = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word =\
    \ word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\s+/, \" \")\n    word = word.gsub(/\\\
    s+/, \" \")\n    ", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_found\
    \ = false\n  prime_found2 = false\n  prime_found3 = false\n  prime_found4 = false\n\
    \  prime_found5 = false\n  prime_found6 = false\n  prime_found7 = false\n  prime_found8\
    \ = false\n  prime_found9 = false\n  prime_found10 = false\n  prime_found11 =\
    \ false\n  prime_found12 = false\n  prime_found13 = false\n  prime_found14 = false\n\
    \  prime_found15 = false\n  prime_found16 = false\n  prime_found17 = false\n \
    \ prime_found18 = false\n  prime_found19 = false\n  prime_found20 = false\n  prime_found21\
    \ = false\n  prime_found22 = false\n  prime_found23 = false\n  prime_found24 =\
    \ false\n  prime_found25 = false\n  prime_found26 = false\n  prime_found27 = false\n\
    \  prime_found28 = false\n  prime_found29 = false\n  prime_found30 = false\n \
    \ prime_found31 = false\n  prime_found32 = false\n  prime_found33 = false\n  prime_found34\
    \ = false\n  prime_found35 = false\n  prime_found36 = false\n  prime_found37 =\
    \ false\n  prime_found38 = false\n  prime_found39 = false\n  prime_found40 = false\n\
    \  prime_found41 = false\n  prime_found42 = false\n  prime_found43 = false\n \
    \ prime_found44 = false\n  prime_found45 = false\n  prime_found46 = false\n  prime_found47\
    \ = false\n  prime_found48 = false\n  prime_found49 = false\n  prime_found50 =\
    \ false\n  prime_found51 = false\n  prime_found52 = false\n  prime_found53 = false\n\
    \  prime_found54 = false\n  prime_found55 = false\n  prime_found56 = false\n \
    \ prime_found57 = false\n  prime_found58 = false\n  prime_found59 = false\n  prime_found60\
    \ = false\n  prime_found61 = false\n  prime_found62 = false\n  prime_found63 =\
    \ false\n  prime_found64 = false\n  prime_found65 = false\n  prime_found66 = false\n\
    \  prime_found67 = false\n  ", "  sentence = sentence.split(\" \").sort\n  result\
    \ = []\n  i = 0\n  while i < sentence.length\n    if i % 2 == 0\n      result.append(sentence[i])\n\
    \      i += 1\n    i += 1\n  result = result.join(\" \")\n  return result\nend",
  "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_word = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word\
    \ = \"\"\n  prime_counter = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter\
    \ = 0\n  prime_words = []\n  prime_word = \"\"\n  prime_counter = 0\n  ", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  words.each do |word|\n\
    \    word = word.strip\n    if word.chars.all? { |c| c.upcase >= 'A' && c.upcase\
    \ <= 'Z' }\n      prime_word(word)\n    end\n  end\nend", "    sentence = sentence.split(\"\
    \ \").sort\n    sentence.length.each do |length|\n        sentence.reject {|word|\
    \ word > length}.join\n    end\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c\
    \ |>\nThe OP wants to return the words in the original order, not the order of\
    \ the words in the new string.\n<|/ c |>\n<| c |>\nYes, I missed that. Thanks\
    \ for pointing that out. I've updated the answer.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I wonder why you use `sort` instead of `sort!`?\n<|/ c |>\n<|\
    \ c |>\n`sort` returns a new array, so `sentence = sentence.split(\" \").sort`\
    \ would not work. `sort!` modifies the original array, so `sentence = sentence.split(\"\
    \ \").sort!` would work. `sort!` also modifies the original array in place, so\
    \ `sentence = sentence.split(\" \").sort!.reverse` would also work.\n<|/ c |>\n\
    <| c |>\nI see. Thanks for explaining.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ sentence = sentence.downcase\n  words = sentence.split(\" \")\n  result = \"\
    \"\n  primes = []\n  primes.push 2\n  primes.push 3\n  primes.push 5\n  primes.push\
    \ 7\n  primes.push 11\n  primes.push 13\n  primes.push 17\n  primes.push 19\n\
    \  primes.push 23\n  primes.push 29\n  primes.push 31\n  primes.push 37\n  primes.push\
    \ 41\n  primes.push 43\n  primes.push 47\n  primes.push 53\n  primes.push 59\n\
    \  primes.push 61\n  primes.push 67\n  primes.push 71\n  primes.push 73\n  primes.push\
    \ 79\n  primes.push 83\n  primes.push 89\n  primes.push 97\n  primes.push 101\n\
    \  primes.push 103\n  primes.push 107\n  primes.push 109\n  primes.push 113\n\
    \  primes.push 127\n  primes.push 131\n  primes.push 137\n  primes.push 139\n\
    \  primes.push 149\n  primes.push 151\n  primes.push 157\n  primes.push 163\n\
    \  primes.push 167\n  primes.push 173\n  primes.push 179\n  primes.push 181\n\
    \  primes.push 191\n  primes.push 193\n  primes.push 197\n  primes.push 199\n\
    \  primes.push 211\n  primes.push 223\n  primes.push 227\n  primes.push 229\n\
    \  primes.push 233\n  primes.push 239\n  primes.push 241\n  primes.push 243\n\
    \  primes.push 247\n  primes.push 251\n  primes.push 257\n  primes.push 263\n\
    \  primes.push 269\n  primes.push 271\n  primes.push 277\n  primes.push 281\n\
    \  primes.push 283\n  primes.push 293\n  primes.push 307\n  primes.push 311\n\
    \  primes.push 313\n  primes.push 317\n  primes.push 331\n  primes.push 337\n\
    \  primes.push 347\n  primes.push 349\n  primes.push 353\n  primes.push 359\n\
    \  primes.push 367\n  primes.push 373\n  primes.push 379\n  primes.push 383\n\
    \  primes.push ", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  result = \"\"\n  primes = []\n  prime_counter = 0\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    word = word.downcase\n    if word.length % 2\
    \ == 0\n      new_words.push(word)\n    end\n  end\n  new_words.join(\" \")\n\
    end", "    words = sentence.split(\" \")\n    primes = []\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_word_count = 0\n    prime_word_index = 0\n \
    \   prime_word_index2 = 0\n    prime_word_index3 = 0\n    prime_word_index4 =\
    \ 0\n    prime_word_index5 = 0\n    prime_word_index6 = 0\n    prime_word_index7\
    \ = 0\n    prime_word_index8 = 0\n    prime_word_index9 = 0\n    prime_word_index10\
    \ = 0\n    prime_word_index11 = 0\n    prime_word_index12 = 0\n    prime_word_index13\
    \ = 0\n    prime_word_index14 = 0\n    prime_word_index15 = 0\n    prime_word_index16\
    \ = 0\n    prime_word_index17 = 0\n    prime_word_index18 = 0\n    prime_word_index19\
    \ = 0\n    prime_word_index20 = 0\n    prime_word_index21 = 0\n    prime_word_index22\
    \ = 0\n    prime_word_index23 = 0\n    prime_word_index24 = 0\n    prime_word_index25\
    \ = 0\n    prime_word_index26 = 0\n    prime_word_index27 = 0\n    prime_word_index28\
    \ = 0\n    prime_word_index29 = 0\n    prime_word_index30 = 0\n    prime_word_index31\
    \ = 0\n    prime_word_index32 = 0\n    prime_word_index33 = 0\n    prime_word_index34\
    \ = 0\n    prime_word_index35 = 0\n    prime_word_index36 = 0\n    prime_word_index37\
    \ = 0\n    prime_word_index38 = 0\n    prime_word_index39 = 0\n    prime_word_index40\
    \ = 0\n    prime_word_index41 = 0\n    prime_word_index42 = 0\n    prime_word_index43\
    \ = 0\n    prime_word_index44 = 0\n    prime_word_index45 = 0\n    prime_word_index46\
    \ = 0\n    prime_word_index47 = 0\n    prime_word_index48 = 0\n    prime_word_index49\
    \ = 0\n    prime_word_index50 = 0\n    prime_word_index51 = 0\n    prime_word_index52\
    \ = 0\n    prime_word_index53 = 0\n    prime_word_index54 = 0\n    prime_word_index55\
    \ = 0\n    prime_word_index56 = 0\n    prime_word_index57 = 0\n    prime_word_index58\
    \ = 0\n    prime_word_index59 = 0\n    prime_word_index60 = 0\n    prime_word_index61",
  "    words = sentence.split(\" \")\n    primes = []\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_word_count = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_words.concat(words)\n\
    \  new_words.each do |word|\n    word = word.downcase\n    if word.length % 2\
    \ == 0\n      new_words.delete(word)\n    end\n  end\n  new_words.join(\" \")\n\
    end", "    words = sentence.split(\" \")\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word\
    \ = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words = []\n\
    \    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n    prime_words\
    \ = []\n    prime_word = \"\"\n    prime_words = []\n    prime_word = \"\"\n \
    \   prime_words = []\n    prime_word = \"\"\n    prime_", "  sentence = sentence.split(\"\
    \ \").sort\n  new_sentence = \"\"\n  prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \  prime_numbers.each do |prime|\n    new_sentence << sentence[prime]\n  end\n\
    \  new_sentence\nend", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  prime_numbers = (0..100).to_a\n  prime_numbers.each do |i|\n    prime_numbers.each\
    \ do |j|\n      prime_numbers.each do |k|\n        prime_numbers.each do |l|\n\
    \          prime_numbers.each do |m|\n            prime_numbers.each do |n|\n\
    \              prime_numbers.each do |o|\n                prime_numbers.each do\
    \ |p|\n                  prime_numbers.each do |q|\n                    prime_numbers.each\
    \ do |r|\n                      prime_numbers.each do |s|\n                  \
    \      prime_numbers.each do |t|\n                          prime_numbers.each\
    \ do |u|\n                            prime_numbers.each do |v|\n            \
    \                  prime_numbers.each do |w|\n                               \
    \ prime_numbers.each do |x|\n                                  prime_numbers.each\
    \ do |y|\n                                    prime_numbers.each do |z|\n    \
    \                                  prime_numbers.each do |aa|\n              \
    \                          prime_numbers.each do |ab|\n                      \
    \                    prime_numbers.each do |ac|\n                            \
    \                prime_numbers.each do |ad|\n                                \
    \              prime_numbers.each do |ae|\n                                  \
    \              prime_numbers.each do |af|\n                                  \
    \                prime_numbers.each do |ag|\n                                \
    \                    prime_numbers.each do |ah|\n                            \
    \                          prime_numbers.each do |ai|\n                      \
    \                                  prime_numbers.each do |aj|\n              \
    \                                            prime_numbers.each do |ak|\n    \
    \                                                        prime_numbers.each do\
    \ |al|\n                                                              prime_numbers.each\
    \ do |am|\n                                                                prime_numbers.each\
    \ do |an|\n                                                                  prime_numbers.each\
    \ do |ao|\n                                                                  \
    \  prime_numbers.each do |ap|\n                                              \
    \                        prime_numbers.each do |aq|\n                        \
    \                                                prime_numbers.each do |ar|\n\
    \                                                                          prime_numbers.each\
    \ do |as|\n                                                                  \
    \          prime_numbers.each do |at|\n                                      \
    \                                        prime_numbers.each do |au|\n        \
    \                                                                        prime_numbers.each\
    \ do |av|\n                                                                  \
    \                prime_numbers.each do |aw|\n                                \
    \                                                    prime_numbers.each do |ax|\n\
    \                                                                            \
    \          prime_numbers.each do |ay|\n                                      \
    \                                                  prime_numbers.each do |az|\n\
    \                                                                            \
    \              prime_numbers.each do |ba|\n                                  \
    \                                                          prime_numbers.each\
    \ do |bb|\n                                                                  \
    \                            prime_numbers.each do |bc|\n                    \
    \                                                                            prime_numbers.each\
    \ do |bd|\n                                                                  \
    \                                prime_numbers.each do |be|\n                \
    \                                                                            \
    \        prime_numbers.each do |bf|\n                                        \
    \                                                              prime_numbers.each\
    \ do |bg|\n                                                                  \
    \                                      prime_numbers.each do |bh", "    sentence\
    \ = sentence.downcase\n    words = sentence.split(\" \")\n    prime_words = []\n\
    \    prime_words.push(words[0])\n    prime_words.push(words[1])\n    prime_words.push(words[2])\n\
    \    prime_words.push(words[3])\n    prime_words.push(words[4])\n    prime_words.push(words[5])\n\
    \    prime_words.push(words[6])\n    prime_words.push(words[7])\n    prime_words.push(words[8])\n\
    \    prime_words.push(words[9])\n    prime_words.push(words[10])\n    prime_words.push(words[11])\n\
    \    prime_words.push(words[12])\n    prime_words.push(words[13])\n    prime_words.push(words[14])\n\
    \    prime_words.push(words[15])\n    prime_words.push(words[16])\n    prime_words.push(words[17])\n\
    \    prime_words.push(words[18])\n    prime_words.push(words[19])\n    prime_words.push(words[20])\n\
    \    prime_words.push(words[21])\n    prime_words.push(words[22])\n    prime_words.push(words[23])\n\
    \    prime_words.push(words[24])\n    prime_words.push(words[25])\n    prime_words.push(words[26])\n\
    \    prime_words.push(words[27])\n    prime_words.push(words[28])\n    prime_words.push(words[29])\n\
    \    prime_words.push(words[30])\n    prime_words.push(words[31])\n    prime_words.push(words[32])\n\
    \    prime_words.push(words[33])\n    prime_words.push(words[34])\n    prime_words.push(words[35])\n\
    \    prime_words.push(words[36])\n    prime_words.push(words[37])\n    prime_words.push(words[38])\n\
    \    prime_words.push(words[39])\n    prime_words.push(words[40])\n    prime_words.push(words[41])\n\
    \    prime_words.push(words[42])\n    prime_words.push(words[43])\n    prime_words.push(words[44])\n\
    \    prime_words.push(words[45])\n    prime_words.push(words[46])\n    prime_words.push(words[47])\n\
    \    prime_words.push(words[48])\n    prime_words.push(words[49])\n    prime_words.push(words[",
  "  sentence = sentence.split(\" \").sort\n  result = []\n  for i in (0..(sentence.length-1))\n\
    \    if sentence[i].to_s.length == prime(i)\n      result << sentence[i]\n   \
    \ end\n  end\n  result.join(\" \")\nend", "  sentence = sentence.split(\" \").map\
    \ { |word| word.downcase }\n  prime_numbers = PrimeNumbers.new(sentence.length)\n\
    \  prime_numbers.prime_numbers\n  prime_numbers.prime_numbers.map { |prime| sentence.select\
    \ { |word| prime % word.length == 0 } }.join(\" \")\nend", "  sentence = sentence.split(\"\
    \ \").map { |word| word.downcase }\n  prime_numbers = sentence.map { |word| word.to_i.prime?\
    \ }\n  prime_numbers.sort.map { |prime| sentence.select { |word| prime == word.to_i\
    \ } }.join(\" \")\nend", "  sentence = sentence.split(\" \").sort\n  sentence.length.prime?\n\
    \  sentence.join\nend", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  prime_numbers = PrimeNumbers.new(sentence.length)\n  prime_numbers.prime_numbers_upto(sentence.length).map\
    \ { |i| sentence[i] }.join\nend", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  result = []\n  primes = []\n  prime_counter = 0\n  prime_counter2 = 1\n\
    \  prime_counter3 = 2\n  prime_counter4 = 3\n  prime_counter5 = 4\n  prime_counter6\
    \ = 5\n  prime_counter7 = 6\n  prime_counter8 = 7\n  prime_counter9 = 8\n  prime_counter10\
    \ = 9\n  prime_counter11 = 10\n  prime_counter12 = 11\n  prime_counter13 = 12\n\
    \  prime_counter14 = 13\n  prime_counter15 = 14\n  prime_counter16 = 15\n  prime_counter17\
    \ = 16\n  prime_counter18 = 17\n  prime_counter19 = 18\n  prime_counter20 = 19\n\
    \  prime_counter21 = 20\n  prime_counter22 = 21\n  prime_counter23 = 22\n  prime_counter24\
    \ = 23\n  prime_counter25 = 24\n  prime_counter26 = 25\n  prime_counter27 = 26\n\
    \  prime_counter28 = 27\n  prime_counter29 = 28\n  prime_counter30 = 29\n  prime_counter31\
    \ = 30\n  prime_counter32 = 31\n  prime_counter33 = 32\n  prime_counter34 = 33\n\
    \  prime_counter35 = 34\n  prime_counter36 = 35\n  prime_counter37 = 36\n  prime_counter38\
    \ = 37\n  prime_counter39 = 38\n  prime_counter40 = 39\n  prime_counter41 = 40\n\
    \  prime_counter42 = 41\n  prime_counter43 = 42\n  prime_counter44 = 43\n  prime_counter45\
    \ = 44\n  prime_counter46 = 45\n  prime_counter47 = 46\n  prime_counter48 = 47\n\
    \  prime_counter49 = 48\n  prime_counter50 = 49\n  prime_counter51 = 50\n  prime_counter52\
    \ = 51\n  prime_counter53 = 52\n  prime_counter54 = 53\n  prime_counter55 = 54\n\
    \  prime_counter56 = 55\n  prime_counter57 = 56\n  prime_counter58 = 57\n  prime_counter59\
    \ = 58\n  prime_counter60 = 59\n  prime_counter61 = 60\n  prime_counter62 = 61\n\
    \  prime_counter63 = 62\n  prime_counter64 = 63\n  ", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_word = \"\"\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  prime", "    sentence = sentence.downcase\n    words = sentence.split(\"\
    \ \")\n    primes = []\n    prime_words = []\n    prime_word = \"\"\n    prime_word_count\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime_word_index\
    \ = 0\n    prime_word_length = 0\n    prime_word_index = 0\n    prime_word_length\
    \ = 0\n    prime_word_index = 0\n    prime_word_length = 0\n    prime", "  sentence\
    \ = sentence.downcase\n  words = sentence.split(\" \")\n  new_words = []\n  new_word\
    \ = \"\"\n  primes = []\n  prime = 0\n  prime_found = false\n  prime_found2 =\
    \ false\n  prime_found3 = false\n  prime_found4 = false\n  prime_found5 = false\n\
    \  prime_found6 = false\n  prime_found7 = false\n  prime_found8 = false\n  prime_found9\
    \ = false\n  prime_found10 = false\n  prime_found11 = false\n  prime_found12 =\
    \ false\n  prime_found13 = false\n  prime_found14 = false\n  prime_found15 = false\n\
    \  prime_found16 = false\n  prime_found17 = false\n  prime_found18 = false\n \
    \ prime_found19 = false\n  prime_found20 = false\n  prime_found21 = false\n  prime_found22\
    \ = false\n  prime_found23 = false\n  prime_found24 = false\n  prime_found25 =\
    \ false\n  prime_found26 = false\n  prime_found27 = false\n  prime_found28 = false\n\
    \  prime_found29 = false\n  prime_found30 = false\n  prime_found31 = false\n \
    \ prime_found32 = false\n  prime_found33 = false\n  prime_found34 = false\n  prime_found35\
    \ = false\n  prime_found36 = false\n  prime_found37 = false\n  prime_found38 =\
    \ false\n  prime_found39 = false\n  prime_found40 = false\n  prime_found41 = false\n\
    \  prime_found42 = false\n  prime_found43 = false\n  prime_found44 = false\n \
    \ prime_found45 = false\n  prime_found46 = false\n  prime_found47 = false\n  prime_found48\
    \ = false\n  prime_found49 = false\n  prime_found50 = false\n  prime_found51 =\
    \ false\n  prime_found52 = false\n  prime_found53 = false\n  prime_found54 = false\n\
    \  prime_found55 = false\n  prime_found56 = false\n  prime_found57 = false\n \
    \ prime_found58 = false\n  prime_found59 = false\n  prime_found60 = false\n  prime_found61\
    \ = false\n  prime_found62 = false\n  prime_found63 = false\n  prime_found64 =\
    \ false\n  prime_found65 = false\n  prime_found66 = false\n  prime_found67 = false\n\
    \  ", "    words = sentence.split(\" \")\n    prime_words = []\n    prime_words.push(words[0])\n\
    \    prime_words.each do |word|\n        prime_words.push(words[words.index(word)\
    \ + 1])\n    end\n    prime_words.each do |word|\n        if word.length != prime_words.length\n\
    \            return word\n        end\n    end\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  new_words = []\n  new_sentence = \"\"\n  primes\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime_counter = 0\n  prime_words = []\n  prime_counter = 0\n  prime_words\
    \ = []\n  prime", "  sentence = sentence.split(\" \").map { |word| word.downcase\
    \ }\n  prime_numbers = PrimeNumber.new(sentence.length)\n  prime_numbers.prime_numbers_upto(sentence.length).each\
    \ do |prime_number|\n    sentence = sentence.map { |word| word.gsub(/[^#{prime_number}]+/,\
    \ \"\") }\n    sentence.join.split(\" \").each do |word|\n      prime_numbers.prime_numbers_upto(sentence.length).each\
    \ do |prime_number|\n        next if prime_number == word.length\n        next\
    \ if prime_number == word.length - 1\n        next if prime_number == word.length\
    \ + 1\n        next if prime_number == word.length + 2\n        next if prime_number\
    \ == word.length + 3\n        next if prime_number == word.length + 4\n      \
    \  next if prime_number == word.length + 5\n        next if prime_number == word.length\
    \ + 6\n        next if prime_number == word.length + 7\n        next if prime_number\
    \ == word.length + 8\n        next if prime_number == word.length + 9\n      \
    \  next if prime_number == word.length + 10\n        next if prime_number == word.length\
    \ + 11\n        next if prime_number == word.length + 12\n        next if prime_number\
    \ == word.length + 13\n        next if prime_number == word.length + 14\n    \
    \    next if prime_number == word.length + 15\n        next if prime_number ==\
    \ word.length + 16\n        next if prime_number == word.length + 17\n       \
    \ next if prime_number == word.length + 18\n        next if prime_number == word.length\
    \ + 19\n        next if prime_number == word.length + 20\n        next if prime_number\
    \ == word.length + 21\n        next if prime_number == word.length + 22\n    \
    \    next if prime_number == word.length + 23\n        next if prime_number ==\
    \ word.length + 24\n        next if prime_number == word.length + 25\n       \
    \ next if prime_number == word.length + 26\n        next if prime_number == word.length\
    \ + 27\n        next if prime_number == word.length + 28\n        next if prime_number\
    \ == word.length + 29\n        next if prime_number == word.length + 30\n    \
    \    next if prime_number == word.length + 31\n        next if prime_number ==\
    \ word.length + 32\n        ", "  sentence = sentence.split(\" \").map(&:downcase)\n\
    \  primes = Primes.new(sentence.length)\n  primes.each do |prime|\n    break if\
    \ primes.include?(prime)\n    break if primes.include?(prime + 1)\n    break if\
    \ primes.include?(prime + 2)\n    break if primes.include?(prime + 3)\n    break\
    \ if primes.include?(prime + 4)\n    break if primes.include?(prime + 5)\n   \
    \ break if primes.include?(prime + 6)\n    break if primes.include?(prime + 7)\n\
    \    break if primes.include?(prime + 8)\n    break if primes.include?(prime +\
    \ 9)\n    break if primes.include?(prime * 2)\n    break if primes.include?(prime\
    \ * 3)\n    break if primes.include?(prime * 5)\n    break if primes.include?(prime\
    \ * 7)\n    break if primes.include?(prime * 11)\n    break if primes.include?(prime\
    \ * 13)\n    break if primes.include?(prime * 17)\n    break if primes.include?(prime\
    \ * 19)\n    break if primes.include?(prime * 23)\n    break if primes.include?(prime\
    \ * 29)\n    break if primes.include?(prime * 31)\n    break if primes.include?(prime\
    \ * 37)\n    break if primes.include?(prime * 43)\n    break if primes.include?(prime\
    \ * 51)\n    break if primes.include?(prime * 59)\n    break if primes.include?(prime\
    \ * 67)\n    break if primes.include?(prime * 73)\n    break if primes.include?(prime\
    \ * 79)\n    break if primes.include?(prime * 89)\n    break if primes.include?(prime\
    \ * 97)\n    break if primes.include?(prime * 103)\n    break if primes.include?(prime\
    \ * 109)\n    break if primes.include?(prime * 113)\n    break if primes.include?(prime\
    \ * 127)\n    break if primes.include?(prime * 131)\n    break if primes.include?(prime\
    \ * 137)\n    break if primes.include?(prime * 139)\n    break if primes.include?(prime\
    \ * 149)\n    break if primes.", "  sentence = sentence.split(\" \").map(&:downcase)\n\
    \  sentence = sentence.select { |word| word.include?(/[a-z]/) }\n  sentence =\
    \ sentence.select { |word| word.include?(/[0-9]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[A-Z]/) }\n  sentence = sentence.select { |word| word.include?(/[^a-z]/)\
    \ }\n  sentence = sentence.select { |word| word.include?(/[^0-9]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[^A-Z]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[^a-z\\d]/) }\n  sentence = sentence.select { |word|\
    \ word.include?(/[^0-9A-Za-z]/) }\n  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\\
    d]/) }\n  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n\
    \  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[^A-Za-z\\d]/) }\n  sentence = sentence.select { |word|\
    \ word.include?(/[^A-Za-z\\d]/) }\n  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\\
    d]/) }\n  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n\
    \  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n  sentence\
    \ = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n  sentence = sentence.select\
    \ { |word| word.include?(/[^A-Za-z\\d]/) }\n  sentence = sentence.select { |word|\
    \ word.include?(/[^A-Za-z\\d]/) }\n  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\\
    d]/) }\n  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n\
    \  sentence = sentence.select { |word| word.include?(/[^A-Za-z\\d]/) }\n  sentence\
    \ = sentence.select { |word", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_sentence = \"\"\n  primes = []\n  prime_words = []\n  prime_words_in_sentence\
    \ = []\n  prime_words_in_sentence_length = []\n  prime_words_in_sentence_order\
    \ = []\n  prime_words_in_sentence_order_index = []\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_length.clear\n  prime_words_in_sentence_order.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime_words_in_sentence_order_index.clear\n  prime_words_in_sentence_order_index.clear\n\
    \  prime", "  sentence = sentence.downcase\n  words = sentence.split(\" \")\n\
    \  new_words = []\n  new_words.concat(words)\n  new_words.each do |word|\n   \
    \ word = word.downcase\n    word = word.gsub(/[^a-z]/, \"\")\n    word = word.gsub(/\\\
    s+/, \"\")\n    word = word.split(\"\")\n    word.each do |letter|\n      if word.count(letter)\
    \ != 1\n        new_words.delete(word)\n        break\n      end\n    end\n  end\n\
    \  new_words.join(\" \")\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI\
    \ like the idea of using gsub to remove non-letters. I didn't think of that. Thanks!\n\
    <|/ c |>\n<| c |>\nThis code doesn't work if there are multiple words in the sentence\
    \ that have the same number of letters. For example, `words_in_sentence(\"The\
    \ quick brown fox jumps over the lazy dog\")` returns `\"fox jumps over\"` instead\
    \ of `\"fox jumps over lazy\"`.\n<|/ c |>\n<| c |>\nI fixed the problem you mentioned,\
    \ but I agree with you that your solution is more elegant than mine.\n<|/ c |>\n\
    <| c |>\nI like your solution as well. Thanks for sharing!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  sentence = sentence.downcase\n  words = sentence.split(\" \"\
    )\n  words.each do |word|\n    word = word.downcase\n    next if word.empty?\n\
    \    next if word.include?(\",\")\n    next if word.include?(\".\")\n    next\
    \ if word.include?(\"!\")\n    next if word.include?(\"?\")\n    next if word.include?(\"\
    ;\")\n    next if word.include?(\":\")\n    next if word.include?(\";\")\n   \
    \ next if word.include?(\"(\")\n    next if word.include?(\")\")\n    next if\
    \ word.include?(\"[\")\n    next if word.include?(\"]\")\n    next if word.include?(\"\
    {\")\n    next if word.include?(\"}\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"\\\"\")\n    next if word.include?(\"'\")\n    next\
    \ if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if word.include?(\"\
    '\")\n    next if word.include?(\"'\")\n    next if word.include?(\"'\")\n   \
    \ next if word.include?(\"'\")\n    next if word.include?(\"'\")\n    next if\
    \ word.include?(\"'\")\n    next if word.include?", "  sentence = sentence.split(\"\
    \ \").sort\n  new_sentence = \"\"\n  i = 0\n  while i < sentence.length\n    if\
    \ sentence[i] != sentence[i + 1]\n      new_sentence += sentence[i]\n      i +=\
    \ 1\n    else\n      i += 1\n    end\n  end\n  new_sentence\nend", "    sentence\
    \ = sentence.downcase\n    words = sentence.split(\" \")\n    primes = []\n  \
    \  prime_words = []\n    prime_word = \"\"\n    prime_word_count = 0\n    prime_word_index\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime_word_index_count = 0\n    prime_word_index_count\
    \ = 0\n    prime_word_index_count = 0\n    prime", "  sentence = sentence.split(\"\
    \ \").sort\n  result = []\n  for i in 0...sentence.length\n    if sentence[i].to_i.prime?\n\
    \      result << sentence[i]\n    end\n  end\n  result.join(\" \")\nend", "  sentence\
    \ = sentence.split(\" \").sort\n  result = \"\"\n  primes = []\n  prime_counter\
    \ = 0\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter\
    \ = prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter =\
    \ prime_counter + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter\
    \ + 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter +\
    \ 1\n  prime_counter = prime_counter + 1\n  prime_counter = prime_counter + 1\n\
    \  prime_counter = prime_counter + 1\n", "    sentence = sentence.split(\" \"\
    ).sort\n    sentence.length.prime?\n    sentence.join\nend", "  sentence = sentence.split(\"\
    \ \").map(&:to_i)\n  sentence = sentence.select { |x| x % 2 == 0 }\n  sentence\
    \ = sentence.select { |x| x % 3 == 0 }\n  sentence.join\nend", "  sentence = sentence.downcase\n\
    \  words = sentence.split(\" \")\n  words.each do |word|\n    word = word.downcase\n\
    \    next if word.empty?\n    next if word.include?(\",\")\n    next if word.include?(\"\
    .\")\n    next if word.include?(\"!\")\n    next if word.include?(\"?\")\n   \
    \ next if word.include?(\";\")\n    next if word.include?(\":\")\n    next if\
    \ word.include?(\";\")\n    next if word.include?(\"!\")\n    next if word.include?(\"\
    ?\")\n    next if word.include?(\",\")\n    next if word.include?(\".\")\n   \
    \ next if word.include?(\":\")\n    next if word.include?(\";\")\n    next if\
    \ word.include?(\"!\")\n    next if word.include?(\"?\")\n    next if word.include?(\"\
    ,\")\n    next if word.include?(\".\")\n    next if word.include?(\":\")\n   \
    \ next if word.include?(\";\")\n    next if word.include?(\"!\")\n    next if\
    \ word.include?(\"?\")\n    next if word.include?(\",\")\n    next if word.include?(\"\
    .\")\n    next if word.include?(\":\")\n    next if word.include?(\";\")\n   \
    \ next if word.include?(\"!\")\n    next if word.include?(\"?\")\n    next if\
    \ word.include?(\",\")\n    next if word.include?(\".\")\n    next if word.include?(\"\
    :\")\n    next if word.include?(\";\")\n    next if word.include?(\"!\")\n   \
    \ next if word.include?(\"?\")\n    next if word.include?(\",\")\n    next if\
    \ word.include?(\".\")\n    next if word.include?(\":\")\n    next if word.include?(\"\
    ;\")\n    next if word.include?(\"!\")\n    next if word.include?(\"?\")\n   \
    \ next if word.include?(\",\")\n    next if word.include?(\".\")\n    next if\
    \ word.include?(\":\")\n    next if word.include?(\";\")\n    next if word.include?(\"\
    !\")\n    next if word.include?(\"?\")\n    next if word.include?(\",\")\n   \
    \ next if word.include?(\".\")\n    next if word.include?(\":\")\n    next if\
    \ word.include?(\";\")\n    next if word.include?(\"!\")\n    next if word.include?(\"\
    ?\")\n    next if word.", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_words.concat(words)\n  new_words.each do |word|\n\
    \    word = word.downcase\n    prime_words = []\n    prime_words.concat(prime_numbers(word))\n\
    \    prime_words.each do |prime_word|\n      prime_word = prime_word.downcase\n\
    \      prime_words.concat(prime_numbers(prime_word))\n    end\n  end\nend", " \
    \ sentence = sentence.downcase\n  words = sentence.split(\" \")\n  new_words =\
    \ []\n  primes = []\n  prime_numbers = []\n  prime_number = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0\n  prime_number_count = 0\n  prime_number_count\
    \ = 0\n  prime_number_count = 0", "  sentence = sentence.downcase\n  words = sentence.split(\"\
    \ \")\n  new_words = []\n  new_word = \"\"\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime\
    \ = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n\
    \  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes\
    \ = []\n  prime = 0\n  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n\
    \  primes = []\n  prime = 0\n  primes = []\n  prime = 0\n  prime", "  sentence\
    \ = sentence.split(\" \").map { |word| word.downcase }\n  prime_numbers = PrimeNumbers.new(sentence)\n\
    \  prime_numbers.prime_numbers_array\n  prime_numbers.prime_numbers_array.map\
    \ { |prime| sentence.count(prime) }\nend", "  sentence = sentence.split(\" \"\
    ).map { |word| word.downcase }\n  sentence = sentence.reject { |word| word.empty?\
    \ }\n  sentence = sentence.reject { |word| word == \"the\" }\n  sentence = sentence.reject\
    \ { |word| word == \"a\" }\n  sentence = sentence.reject { |word| word == \"for\"\
    \ }\n  sentence = sentence.reject { |word| word == \"a\" }\n  sentence = sentence.reject\
    \ { |word| word == \"for\" }\n  sentence = sentence.reject { |word| word == \"\
    a\" }\n  sentence = sentence.reject { |word| word == \"for\" }\n  sentence = sentence.reject\
    \ { |word| word == \"a\" }\n  sentence = sentence.reject { |word| word == \"for\"\
    \ }\n  sentence = sentence.reject { |word| word == \"a\" }\n  sentence = sentence.reject\
    \ { |word| word == \"for\" }\n  sentence = sentence.reject { |word| word == \"\
    a\" }\n  sentence = sentence.reject { |word| word == \"for\" }\n  sentence = sentence.reject\
    \ { |word| word == \"a\" }\n  sentence = sentence.reject { |word| word == \"for\"\
    \ }\n  sentence = sentence.reject { |word| word == \"a\" }\n  sentence = sentence.reject\
    \ { |word| word == \"for\" }\n  sentence = sentence.reject { |word| word == \"\
    a\" }\n  sentence = sentence.reject { |word| word == \"for\" }\n  sentence = sentence.reject\
    \ { |word| word == \"a\" }\n  sentence = sentence.reject { |word| word == \"for\"\
    \ }\n  sentence = sentence.reject { |word| word == \"a\" }\n  sentence = sentence.reject\
    \ { |word| word == \"for\" }\n  sentence = sentence.reject { |word| word == \"\
    a\" }\n  sentence = sentence.reject { |word| word == \"for\" }\n  sentence = sentence.reject\
    \ { |word| word == \"a\" }\n  sentence = sentence.reject { |word| word == \"for\"\
    \ }\n  sentence = sentence.reject { |word| word == \"a\" }\n  sentence = sentence.reject\
    \ { |word| word == \"for\" }\n  sentence = sentence.reject { |word| word == \"\
    a\" }"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
