name: HumanEval_159_eat
language: rb
prompt: "# You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
  # you should return an array of [ total number of eaten carrots after your meals,\n\
  # the number of carrots left after your meals ]\n# if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
  # >>> eat.call(5, 6, 10)\n# [11, 4]\n# >>> eat.call(4, 8, 9)\n# [12, 1]\n# >>> eat.call(1,\
  \ 10, 10)\n# [11, 0]\n# >>> eat.call(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number\
  \ : integer\n# the number of carrots that you have eaten.\n# @need : integer\n#\
  \ the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
  \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
  # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number,\
  \ need, remaining)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n\
  \    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n\
  \    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1,\
  \ 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9,\
  \ 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
  \  end\nend\n"
completions: ["  carrots = number\n  while carrots > 0\n    if carrots > need\n  \
    \    carrots -= need\n      remaining += need\n    else\n      carrots -= remaining\n\
    \      remaining += remaining\n  end\n  return [carrots, remaining]\nend", " \
    \ puts \"Your carrots are #{number}\"\n  puts \"You need #{need} carrots to complete\
    \ your meal\"\n  puts \"You have #{remaining} carrots in stock\"\n  puts \"You\
    \ need #{need} carrots to complete your meal\"\n  puts \"You have #{remaining}\
    \ carrots in stock\"\n  puts \"You need #{need} carrots to complete your meal\"\
    \n  puts \"You have #{remaining} carrots in stock\"\n  puts \"You need #{need}\
    \ carrots to complete your meal\"\n  puts \"You have #{remaining} carrots in stock\"\
    \n  puts \"You need #{need} carrots to complete your meal\"\n  puts \"You have\
    \ #{remaining} carrots in stock\"\n  puts \"You need #{need} carrots to complete\
    \ your meal\"\n  puts \"You have #{remaining} carrots in stock\"\n  puts \"You\
    \ need #{need} carrots to complete your meal\"\n  puts \"You have #{remaining}\
    \ carrots in stock\"\n  puts \"You need #{need} carrots to complete your meal\"\
    \n  puts \"You have #{remaining} carrots in stock\"\n  puts \"You need #{need}\
    \ carrots to complete your meal\"\n  puts \"You have #{remaining} carrots in stock\"\
    \n  puts \"You need #{need} carrots to complete your meal\"\n  puts \"You have\
    \ #{remaining} carrots in stock\"\n  puts \"You need #{need} carrots to complete\
    \ your meal\"\n  puts \"You have #{remaining} carrots in stock\"\n  puts \"You\
    \ need #{need} carrots to complete your meal\"\n  puts \"You have #{remaining}\
    \ carrots in stock\"\n  puts \"You need #{need} carrots to complete your meal\"\
    \n  puts \"You have #{remaining} carrots in stock\"\n  puts \"You need #{need}\
    \ carrots to complete your meal\"\n  puts \"You have #{remaining} carrots in stock\"\
    \n  puts \"You need #{need} carrots to complete your meal\"\n  puts \"You have\
    \ #{remaining} carrots in stock\"\n  puts \"You need #{need} carrots to complete\
    \ your meal\"\n  puts \"You have #{remaining} carrots in stock\"\n  puts \"You\
    \ need #{need} carrots to complete your meal\"\n  puts \"You have ", "  result\
    \ = []\n  carrots = number\n  while carrots > 0\n    if carrots > need\n     \
    \ carrots = carrots - need\n      result.push(carrots)\n    else\n      carrots\
    \ = carrots - remaining\n      result.push(carrots)\n    end\n  end\n  result\n\
    end", "  puts \"You have #{number} carrots left.\"\n  puts \"You need #{number}\
    \ carrots to eat #{need} carrots.\"\n  puts \"You have #{remaining} carrots left.\"\
    \n  puts \"You need #{remaining} carrots to eat #{need} carrots.\"\n  puts \"\
    You have #{remaining} carrots left.\"\nend", "  puts \"You have #{number} carrots\
    \ left\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number}\
    \ carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You\
    \ need #{number} carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\
    \n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number} carrots\
    \ to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number}\
    \ carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You\
    \ need #{number} carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\
    \n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number} carrots\
    \ to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number}\
    \ carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You\
    \ need #{number} carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\
    \n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number} carrots\
    \ to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number}\
    \ carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You\
    \ need #{number} carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\
    \n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number} carrots\
    \ to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number}\
    \ carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You\
    \ need #{number} carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\
    \n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number} carrots\
    \ to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You need #{number}\
    \ carrots to eat\"\n  puts \"You need #{number} carrots to eat\"\n  puts \"You\
    \ need #{", "  return [number, need-remaining]\nend", "  puts \"You have eaten\
    \ #{number} carrots.\"\n  puts \"You still need to eat #{need} carrots to complete\
    \ the day's meals.\"\n  puts \"You have #{remaining} carrots left.\"\nend", " \
    \ puts \"You have eaten #{number} carrots.\"\n  puts \"You need #{number} more\
    \ carrots to complete your meals.\"\n  puts \"You still have #{remaining} carrots\
    \ in stock.\"\nend", "  carrots = number\n  while carrots > 0\n    if carrots\
    \ >= need\n      carrots -= need\n      remaining += need\n    else\n      carrots\
    \ = remaining\n      remaining += carrots\n  end\n  [ carrots, remaining ]\nend",
  "  puts \"You have #{number} carrots left.\"\n  puts \"You need #{number} carrots\
    \ to eat.\"\n  puts \"You have #{remaining} carrots left.\"\n  if number < need\
    \ then\n    puts \"You need more carrots to eat!\"\n  else\n    puts \"You eat\
    \ #{need} carrots.\"\n  end\nend", "  puts \"You have eaten #{number} carrots,\
    \ you need #{need} carrots to complete your meals.\"\n  puts \"You have #{remaining}\
    \ carrots left.\"\nend", "  puts \"You have #{number} carrots left.\"\n  puts\
    \ \"You need #{number} carrots to finish your meals.\"\n  puts \"You have #{remaining}\
    \ carrots left.\"\nend", "  puts \"You have #{number} carrots left\"\n  puts \"\
    You need #{need} carrots to eat\"\n  puts \"You have #{remaining} carrots left\"\
    \nend", "  return [number, need-remaining]\nend", "  carrots = number\n  carrots_left\
    \ = need\n  while carrots_left > 0\n    carrots_left -= 1\n    carrots += 1\n\
    \  end\n  carrots -= remaining\n  return [carrots, carrots_left]\nend", "  result\
    \ = []\n  carrots = number\n  while carrots > 0\n    if carrots >= need\n    \
    \  carrots -= need\n      result << need\n    else\n      carrots -= remaining\n\
    \      result << remaining\n    end\n  end\n  result\nend", "  carrots = number\n\
    \  while carrots > 0\n    carrots = carrots - 1\n    if carrots >= need\n    \
    \  carrots = carrots - need\n      break\n    end\n  end\n  carrots = carrots\
    \ + remaining\n  return [carrots, carrots]\nend", "  puts \"You have #{number}\
    \ carrots left.\"\n  puts \"You need #{number} carrots to complete your meals.\"\
    \n  puts \"You have #{remaining} carrots left.\"\n  puts \"You need #{need} carrots\
    \ to complete your meals.\"\nend", "  return [number, remaining - number]\nend",
  "  carrots = number\n  while carrots > 0\n    carrots -= need\n  end\n  carrots\
    \ = remaining\n  while carrots > 0\n    carrots -= need\n  end\n  return [carrots,\
    \ carrots]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
