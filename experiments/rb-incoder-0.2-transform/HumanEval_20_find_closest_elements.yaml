name: HumanEval_20_find_closest_elements
language: rb
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # [2.0, 2.2]\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
  # [2.0, 2.0]\ndef find_closest_elements(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
  \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
  \ 3.1, 4.1, 5.1]))\n  end\nend\n"
completions: ["  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |number2,\
    \ index2|\n      distance = number - number2\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = index2\n     \
    \ end\n    end\n    smallest_index\n  end\nend", "  numbers.each_with_index do\
    \ |number, index|\n    smallest_index = index\n    smallest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number2 -\
    \ number\n      next if distance == 0\n      next if distance < 0\n      next\
    \ if smallest_distance == nil || distance < smallest_distance\n      smallest_distance\
    \ = distance\n      smallest_index = index2\n    end\n    break if smallest_index\
    \ == index\n    numbers[smallest_index], numbers[index]\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number2 -\
    \ number\n      next if distance == 0\n      next if distance < 0\n      next\
    \ if distance > smallest_distance\n      smallest_distance = distance\n      smallest_index\
    \ = index2\n    end\n    break if smallest_index == index\n    numbers[smallest_index],\
    \ numbers[index] = numbers[index], numbers[smallest_index]\n  end\n  numbers\n\
    end", "  numbers.each_with_index do |number, index|\n    smallest_index = index\n\
    \    smallest_distance = Float::INFINITY\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      distance = number - other_number\n      if distance < smallest_distance\n\
    \        smallest_distance = distance\n        smallest_index = other_index\n\
    \      end\n    end\n    numbers[smallest_index], numbers[index] = numbers[index],\
    \ numbers[smallest_index]\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number - number2\n\
    \      next if distance == 0\n      next if distance < 0\n      next if smallest_distance\
    \ == nil\n      next if smallest_distance > distance\n      smallest_distance\
    \ = distance\n      smallest_index = index2\n    end\n    smallest_index << smallest_index\n\
    \  end\n  smallest_index\nend", "  numbers.each_with_index do |number, index|\n\
    \    closest_index = index\n    closest_distance = number\n    numbers.each_with_index\
    \ do |other_number, other_index|\n      distance = other_index - index\n     \
    \ if distance < 0\n        closest_index = other_index\n        closest_distance\
    \ = other_number\n      elsif distance == 0\n        closest_index = other_index\n\
    \        closest_distance = number\n      elsif distance > 0 && other_index !=\
    \ index\n        closest_index = other_index\n        closest_distance = other_number\n\
    \      end\n    end\n    break if closest_index == index\n    break if closest_index\
    \ == 0 && closest_distance == number\n    break if closest_index != 0 && closest_distance\
    \ == number\n    break if closest_index != 0 && closest_distance < number\n  \
    \  break if closest_index != 0 && closest_distance > number\n    break if closest_index\
    \ == 0 && closest_distance > number\n    break if closest_index != 0 && closest_distance\
    \ > number\n    break if closest_index != 0 && closest_distance < number\n   \
    \ break if closest_index == 0 && closest_distance < number\n    break if closest_index\
    \ == 0 && closest_distance == number\n    break if closest_index != 0 && closest_distance\
    \ == number\n    break if closest_index != 0 && closest_distance < number\n  \
    \  break if closest_index != 0 && closest_distance > number\n    break if closest_index\
    \ != 0 && closest_distance < number\n    break if closest_index != 0 && closest_distance\
    \ > number\n    break if closest_index == 0 && closest_distance < number\n   \
    \ break if closest_index != 0 && closest_distance < number\n    break if closest_index\
    \ != 0 && closest_distance > number\n    break if closest_index != 0 && closest_distance\
    \ > number\n    break if closest_index == 0 && closest_distance > number\n   \
    \ break if closest_index != 0 && closest_distance > number\n    break if closest_index\
    \ != 0 && closest_distance < number\n    break if closest_index == 0 && closest_distance\
    \ < number\n    break if closest_index != 0 && closest_distance < number\n   \
    \ break if closest_index != 0 && closest_distance > number\n    break if closest_index\
    \ != 0 && closest_distance > number\n    break if closest_index == 0 && closest_distance\
    \ > number\n    break if closest_index != 0 && closest_distance > number\n   \
    \ break if closest_index != 0 && closest_distance < number\n    break if closest_index\
    \ == 0 && closest_distance < number\n    break if closest_index != 0 && closest_distance\
    \ < number\n    break if closest_index != 0 && closest_distance > number\n   \
    \ break if closest_index != 0 && closest_distance > number\n    break if closest_index\
    \ == 0 && closest_distance > number\n    break", "  numbers.each_with_index do\
    \ |number, index|\n    smallest_difference = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |other_number, other_index|\n      difference\
    \ = other_number - number\n      if difference < smallest_difference\n       \
    \ smallest_difference = difference\n        smallest_index = other_index\n   \
    \   end\n    end\n    yield number, smallest_index\n  end\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>", "  numbers.each_with_index do |number,\
    \ index|\n    smallest_index = index\n    smallest_distance = number\n    numbers.each_with_index\
    \ do |other_number, other_index|\n      distance = number - other_number\n   \
    \   next if distance == 0\n      next if distance < 0\n      next if smallest_index\
    \ == other_index\n      next if smallest_distance > distance\n      smallest_distance\
    \ = distance\n      smallest_index = other_index\n    end\n    smallest_index\
    \ << smallest_distance\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n\
    <| c |>\nThis doesn't work. Try it with `find_closest_elements.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `find_closest_elements.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])`\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `find_closest_elements.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `find_closest_elements.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])`\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers.each_with_index\
    \ do |n, i|\n    closest_index = i\n    closest_distance = Float::INFINITY\n \
    \   numbers.each_with_index do |n2, j|\n      distance = n.abs - n2.abs\n    \
    \  if distance < closest_distance\n        closest_distance = distance\n     \
    \   closest_index = j\n      end\n    end\n    numbers[closest_index] = n\n  \
    \  numbers[closest_index + 1] = n\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |number, index|\n    closest_index = index\n    closest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      distance = number2 -\
    \ number\n      break if distance < 0\n      break if distance > closest_distance\n\
    \      closest_distance = distance\n      closest_index = index2\n    end\n  \
    \  break if closest_distance == 0\n    numbers[closest_index] = number\n  end\n\
    \  numbers\nend", "  numbers.each_with_index do |number, index|\n    smallest_difference\
    \ = number\n    second_smallest_difference = number\n    \n    numbers.each_with_index\
    \ do |other_number, other_index|\n      difference = other_number - number\n \
    \     \n      if difference < smallest_difference\n        smallest_difference\
    \ = difference\n        second_smallest_difference = other_number\n      end\n\
    \    end\n    \n    if smallest_difference < second_smallest_difference\n    \
    \  smallest_difference, second_smallest_difference = second_smallest_difference,\
    \ smallest_difference\n    end\n    \n    smallest_difference, second_smallest_difference\n\
    \  end\nend", "  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    closest_index = index\n    closest_distance = number\n    numbers.each_with_index\
    \ do |number2, index2|\n      next if index2 == 0\n      distance = number2 -\
    \ number\n      break if distance < closest_distance\n      closest_distance =\
    \ distance\n      closest_index = index2\n    end\n    break if closest_distance\
    \ == number\n    numbers[closest_index] = number\n  end\n  numbers\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ that are equally close. Try `find_closest_elements.call([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0])`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ I added a comment to the question to clarify that this is an issue that needs\
    \ to be addressed.\n<|/ c |>\n<| c |>\nYes, I see that now. Sorry about that.\
    \ I missed that detail.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ equally close numbers. I tested it before posting it.\n<|/ c |>\n<| c |>\nI\
    \ added a version that works with equally close numbers. I tested it before posting\
    \ it.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  numbers.each_with_index\
    \ do |number, index|\n    closest_index = index\n    closest_distance = number\n\
    \    numbers.each_with_index do |number2, index2|\n      next if index == index2\n\
    \      distance = number2 - number\n      break if distance < closest_distance\n\
    \      closest_distance = distance\n      closest_index = index2\n    end\n  \
    \  break if closest_distance == number\n    numbers[closest_index] = number\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    second_smallest_distance = number\n    \n    numbers.each_with_index\
    \ do |number_2, index_2|\n      distance = calculate_distance(number, number_2)\n\
    \      \n      if distance < smallest_distance\n        smallest_distance = distance\n\
    \        second_smallest_distance = number_2\n      end\n    end\n    \n    break\
    \ if smallest_distance == number\n    \n    numbers[index] = second_smallest_distance\n\
    \  end\n  \n  numbers\nend", "  numbers.each_with_index do |number, index|\n \
    \   smallest_difference = number\n    second_smallest_difference = number\n  \
    \  smallest_index = index\n    second_smallest_index = index\n    numbers.each_with_index\
    \ do |other_number, other_index|\n      difference = other_number - number\n \
    \     if difference < smallest_difference\n        smallest_difference = difference\n\
    \        second_smallest_difference = other_number\n        smallest_index = other_index\n\
    \        second_smallest_index = other_index\n      end\n    end\n    if smallest_difference\
    \ == 0.0\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_difference == 0.0\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if smallest_difference\
    \ < second_smallest_difference\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_index > second_smallest_index\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if smallest_difference\
    \ == 0.0\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_difference == 0.0\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if smallest_difference\
    \ < second_smallest_difference\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_index > second_smallest_index\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if smallest_difference\
    \ == 0.0\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_difference == 0.0\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if smallest_difference\
    \ < second_smallest_difference\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_index > second_smallest_index\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if smallest_difference\
    \ == 0.0\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_difference == 0.0\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if smallest_difference\
    \ < second_smallest_difference\n      smallest_difference = number\n      second_smallest_difference\
    \ = number\n    end\n    if smallest_index > second_smallest_index\n      smallest_difference\
    \ = number\n      second_smallest_difference = number\n    end\n    if ", "  numbers.each_with_index\
    \ do |number, index|\n    smallest_distance = number\n    smallest_index = index\n\
    \    numbers.each_with_index do |other_number, other_index|\n      distance =\
    \ number - other_number\n      next if distance == 0\n      next if distance <\
    \ 0\n      next if distance > smallest_distance\n      smallest_distance = distance\n\
    \      smallest_index = other_index\n    end\n    break if smallest_index != index\n\
    \    numbers[smallest_index], numbers[index] = numbers[index], numbers[smallest_index]\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n    smallest_distance\
    \ = number\n    smallest_index = index\n    numbers.each_with_index do |other_number,\
    \ other_index|\n      distance = abs(number - other_number)\n      if distance\
    \ < smallest_distance\n        smallest_distance = distance\n        smallest_index\
    \ = other_index\n      end\n    end\n    smallest_index << smallest_distance\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much! I appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem. I'm glad I could help.\n<|/ c |>\n<| a tags=ruby,arrays,ruby-on-rails\
    \ |>\n<code>", "  numbers.each_with_index do |number, index|\n    next unless\
    \ number > numbers[index - 1]\n    next unless number < numbers[index + 1]\n \
    \   numbers[index], numbers[index + 1] = numbers[index + 1], numbers[index]\n\
    \  end\n  numbers\nend", "  numbers.each_with_index do |number, index|\n    smallest_index\
    \ = index\n    smallest_distance = number\n    numbers.each_with_index do |number_to_compare,\
    \ index_to_compare|\n      distance = abs(number_to_compare - number)\n      if\
    \ distance < smallest_distance\n        smallest_distance = distance\n       \
    \ smallest_index = index_to_compare\n      end\n    end\n    smallest_index\n\
    \  end\nend", "  numbers.each_with_index do |n, i|\n    j = i+1\n    break if\
    \ j == numbers.size || numbers[j] - n < numbers[i] - n\n    numbers[i], numbers[j]\
    \ = numbers[j], numbers[i]\n  end\n  numbers\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
