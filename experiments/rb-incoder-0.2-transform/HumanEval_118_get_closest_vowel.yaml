name: HumanEval_118_get_closest_vowel
language: rb
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> get_closest_vowel.call(\"yogurt\"\
  )\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"\
  quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n\
  \    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"\
  yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\
  \", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n\
  \    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"\
  bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\
  \", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"\
  ))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"\
  Above\"))\n  end\nend\n"
completions: ["  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n\
    \    if word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\
    \nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.downcase\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  ", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count\
    \ -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -=\
    \ word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count\
    \ -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n\
    \  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count\
    \ -= word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n\
    \  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count\
    \ -= word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w[a\
    \ e i o u]\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index\
    \ != -1 && index != word.length-1\n      return vowel\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word.downcase!\n\
    \  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiouy]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/",
  "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z)\n  vowel_positions = word.scan(/[#{vowels.join('|')}]/)\n \
    \ consonant_positions = word.scan(/[#{consonants.join('|')}]/)\n  \n  vowel_positions.each\
    \ do |position|\n    vowel_position = position[0]\n    vowel = vowels[vowel_position]\n\
    \    consonant_positions.each do |position|\n      consonant_position = position[0]\n\
    \      consonant = consonants[consonant_position]\n      if consonant == vowel\n\
    \        return vowel\n      end\n    end\n  end\n  \n  return \"\"\nend", " \
    \ vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z)\n  \n  word.downcase!\n  \n  word.each_char.with_index do\
    \ |char, index|\n    char.downcase!\n    \n    if vowels.include?(char) && index\
    \ > 0\n      vowels.each_with_index do |vowel, index|\n        if index > 0 &&\
    \ vowel == char\n          return vowel\n        end\n      end\n    end\n   \
    \ \n    if consonants.include?(char) && index > 0\n      consonants.each_with_index\
    \ do |consonant, index|\n        if index > 0 && consonant == char\n         \
    \ return consonant\n        end\n      end\n    end\n  end\n  \n  \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != nil\n      break\n\
    \    end\n  end\n  if index != nil\n    word[index..-1].each do |letter|\n   \
    \   if letter == \"a\"\n        return \"a\"\n      elsif letter == \"e\"\n  \
    \      return \"e\"\n      elsif letter == \"i\"\n        return \"i\"\n     \
    \ elsif letter == \"o\"\n        return \"o\"\n      elsif letter == \"u\"\n \
    \       return \"u\"\n      end\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n   \
    \   return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o\
    \ u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  consonants.each do |consonant|\n    word = word.gsub(consonant,\
    \ \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").length\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately, I cannot use any Ruby methods\
    \ or gems. I should implement this in Java.\n<|/ c |>\n<| c |>\nI updated my answer,\
    \ please take a look.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately,\
    \ I cannot use any Ruby methods or gems. I should implement this in Java.\n<|/\
    \ c |>\n<| c |>\nI updated my answer, please take a look.\n<|/ c |>\n<| a tags=string,java,algorithm\
    \ |>\n<code>\npublic String getClosestVowel(String word) {\n    char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n    char[] consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n\
    \    char[] letters = word.toCharArray();\n    int minDistance = Integer.MAX_VALUE;\n\
    \    char closestVowel = '\\0';\n    for (int i = 0; i < letters.length; i++)\
    \ {\n        if (letters[i] == 'a' || letters[i] == 'e' || letters[i] == 'i' ||\
    \ letters[i] == 'o' || letters[i] == 'u')\n            continue;\n        int\
    \ distance = Integer.MAX_VALUE;\n        for (int j = 0; j < vowels.length; j++)\
    \ {\n            if (letters[i] == vowels[j]) {\n                distance = j;\n\
    \                break;\n            }\n        }\n        if (distance < minDistance)\
    \ {\n            minDistance = distance;\n            closestVowel = letters[i];\n\
    \        }\n    }\n    return closestVowel;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for your answer. Unfortunately, I cannot use any Ruby methods or\
    \ gems. I should implement this in Java.\n<|/ c |>\n<| a tags=string,java,algorithm\
    \ |>\n<code>\npublic String getClosestVowel(String word) {\n    char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n    char[] consonants = {'b', 'c', 'd', '", " \
    \ vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 && vowel_pos < word.length - 1\n      return vowel\n   \
    \ end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n\
    \  consonants.each do |consonant|\n    word = word.split(consonant).first\n  end\n\
    \  word.to_s.split(//).last\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a\
    \ e i o u y o i o u)\n  word.downcase!\n  word.chars.each do |c|\n    next if\
    \ vowels.include?(c)\n    next if consonants.include?(c)\n    break if consonants.include?(c.next)\n\
    \  end\n  consonants.include?(c.next) ? c.next : \"\"\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThis fails for \"yogurt\" because \"y\" is not in the list of vowels.\n\
    <|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThis fails for \"ab\"\
    \ because \"a\" is not in the list of vowels.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| c |>\nThis fails for \"ab\" because \"a\" is not in the list\
    \ of vowels.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word =\
    \ word.downcase\n  word.each_char.with_index do |char, i|\n    if char == char.upcase\n\
    \      break if i == 0\n      break if i == word.length - 1\n      break if char\
    \ == char.downcase\n    end\n  end\n  vowels.find { |vowel| word.include?(vowel)\
    \ }\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index > 0\n      break\n    end\n  end\n  return \"\" if index == 0\n\
    \  index = word.rindex(vowel)\n  return \"\" if index == 0\n  index = word.rindex(vowel,\
    \ index + 1)\n  return \"\" if index == 0\n  index = word.rindex(vowel, index\
    \ - 1)\n  return \"\" if index == 0\n  index = word.rindex(vowel, index - 2)\n\
    \  return \"\" if index == 0\n  index = word.rindex(vowel, index - 3)\n  return\
    \ \"\" if index == 0\n  index = word.rindex(vowel, index - 4)\n  return \"\" if\
    \ index == 0\n  index = word.rindex(vowel, index - 5)\n  return \"\" if index\
    \ == 0\n  index = word.rindex(vowel, index - 6)\n  return \"\" if index == 0\n\
    \  index = word.rindex(vowel, index - 7)\n  return \"\" if index == 0\n  index\
    \ = word.rindex(vowel, index - 8)\n  return \"\" if index == 0\n  index = word.rindex(vowel,\
    \ index - 9)\n  return \"\" if index == 0\n  index = word.rindex(vowel, index\
    \ - 10)\n  return \"\" if index == 0\n  index = word.rindex(vowel, index - 11)\n\
    \  return \"\" if index == 0\n  index = word.rindex(vowel, index - 12)\n  return\
    \ \"\" if index == 0\n  index = word.rindex(vowel, index - 13)\n  return \"\"\
    \ if index == 0\n  index = word.rindex(vowel, index - 14)\n  return \"\" if index\
    \ == 0\n  index = word.rindex(vowel, index - 15)\n  return \"\" if index == 0\n\
    \  index = word.rindex(vowel, index - 16)\n  return \"\" if index == 0\n  index\
    \ = word.rindex(vowel, index - 17)\n  return \"\" if index == 0\n  index = word.rindex(vowel,\
    \ index - 18)\n  return \"\" if index == 0\n  index = word.rindex(vowel, index\
    \ - 19)\n  return \"\" if index == 0\n  index = word.rindex(vowel, index - 20)\n\
    \  return \"\" if index == 0\n  index = word.rindex(vowel, index - 21)\n  return\
    \ \"\" if index == 0\n  index = word.rindex(vowel, index - 22)\n  return \"\"\
    \ if index == 0\n  index = word.rindex(vowel, index - 23)\n  return \"\" if index\
    \ == 0\n  index = word.rindex(vowel, index - 24)\n  return \"\" if index == 0\n\
    \  index = word.rindex(vowel, index - 25)\n  return \"\" if index == 0\n  index\
    \ = word.rindex(vowel, index - 26)", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    if word.index(vowel) == word.length-1\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").empty? ? \"\" : word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels =\
    \ %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word.scan(/[#{vowel}]+/).each\
    \ do |letter|\n      consonants.each do |consonant|\n        if letter == consonant\n\
    \          return vowel\n        end\n      end\n    end\n  end\n  return \"\"\
    \nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index\
    \ != nil\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count -= 1 if word.length <= 3 else 0\n  vowels_count -= 1 if word.length\
    \ <= 4 else 0\n  vowels_count -= 1 if word.length <= 5 else 0\n  vowels_count\
    \ -= 1 if word.length <= 6 else 0\n  vowels_count -= 1 if word.length <= 7 else\
    \ 0\n  vowels_count -= 1 if word.length <= 8 else 0\n  vowels_count -= 1 if word.length\
    \ <= 9 else 0\n  vowels_count -= 1 if word.length <= 10 else 0\n  vowels_count\
    \ -= 1 if word.length <= 11 else 0\n  vowels_count -= 1 if word.length <= 12 else\
    \ 0\n  vowels_count -= 1 if word.length <= 13 else 0\n  vowels_count -= 1 if word.length\
    \ <= 14 else 0\n  vowels_count -= 1 if word.length <= 15 else 0\n  vowels_count\
    \ -= 1 if word.length <= 16 else 0\n  vowels_count -= 1 if word.length <= 17 else\
    \ 0\n  vowels_count -= 1 if word.length <= 18 else 0\n  vowels_count -= 1 if word.length\
    \ <= 19 else 0\n  vowels_count -= 1 if word.length <= 20 else 0\n  vowels_count\
    \ -= 1 if word.length <= 21 else 0\n  vowels_count -= 1 if word.length <= 22 else\
    \ 0\n  vowels_count -= 1 if word.length <= 23 else 0\n  vowels_count -= 1 if word.length\
    \ <= 24 else 0\n  vowels_count -= 1 if word.length <= 25 else 0\n  vowels_count\
    \ -= 1 if word.length <= 26 else 0\n  vowels_count -= 1 if word.length <= 27 else\
    \ 0\n  vowels_count -= 1 if word.length <= 28 else 0\n  vowels_count -= 1 if word.length\
    \ <= 29 else 0\n  vowels_count -= 1 if word.length <= 30 else 0\n  vowels_count\
    \ -= 1 if word.length <= 31 else 0\n  vowels_count -= 1 if word.length <= 32 else\
    \ 0\n  vowels_count -= 1 if word.length <= 33 else 0\n  vowels_count -= 1 if word.length\
    \ <= 34 else 0\n  vowels_count -= 1 if word.length <= 35 else 0\n  vowels_count\
    \ -= 1 if word.length <= 36 else 0\n  vowels_count -= 1 if word.length <= 37 else\
    \ 0\n  vowels_count -= 1 if word.length <= 38 else 0\n  vowels_count -= 1 if word.length\
    \ <= 39 else 0\n  vowels_", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found\
    \ = vowels.find { |v| word.include?(v) }\n  if vowel_found\n    vowel_start =\
    \ word.rindex(vowel_found)\n    vowel_end = word.rindex(vowel_found) + vowel_found.length\n\
    \  end\n  if vowel_start != nil && vowel_end != nil\n    vowel = word[vowel_start..vowel_end]\n\
    \  end\n  return vowel\nend", "  vowels = %w[a e i o u]\n  consonants = %w[b c\
    \ d f g h j k l m n p q r s t v w x y]\n  consonants.each do |c|\n    vowels.each\
    \ do |v|\n      if word.include?(v)\n        return v\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, i|\n    next if char == ?a\n    next if char == ?e\n    next if char\
    \ == ?i\n    next if char == ?o\n    next if char == ?u\n    next if char == ?A\n\
    \    next if char == ?E\n    next if char == ?I\n    next if char == ?O\n    next\
    \ if char == ?U\n    next if char == ?\n    next if char == ?!\n    next if char\
    \ == ??\n    next if char == ?-\n    next if char == ?/\n    next if char == ?'\n\
    \    next if char == ?(\n    next if char == ?[\n    next if char == ?{\n    next\
    \ if char == ?}\n    next if char == ?~\n    next if char == ?^\n    next if char\
    \ == ?_\n    next if char == ?`\n    next if char == ?{\n    next if char == ?}\n\
    \    next if char == ?~\n    next if char == ?^\n    next if char == ?_\n    next\
    \ if char == ?`\n    next if char == ?{\n    next if char == ?}\n    next if char\
    \ == ?~\n    next if char == ?^\n    next if char == ?_\n    next if char == ?`\n\
    \    next if char == ?{\n    next if char == ?}\n    next if char == ?~\n    next\
    \ if char == ?^\n    next if char == ?_\n    next if char == ?`\n    next if char\
    \ == ?{\n    next if char == ?}\n    next if char == ?~\n    next if char == ?^\n\
    \    next if char == ?_\n    next if char == ?`\n    next if char == ?{\n    next\
    \ if char == ?}\n    next if char == ?~\n    next if char == ?^\n    next if char\
    \ == ?_\n    next if char == ?`\n    next if char == ?{\n    next if char == ?}\n\
    \    next if char == ?~\n    next if char == ?^\n    next if char == ?_\n    next\
    \ if char == ?`\n    next ", "  vowels = %w(a e i o u)\n  word.chars.reverse_each.with_index.select\
    \ do |char,index|\n    vowels.include?(char)\n  end.reverse.first\nend", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\"\
    )\n  end\n  \n  word.gsub(/[aeiou]/, \"\").length == 0 ? \"\" : vowels.find {\
    \ |vowel| word.gsub(vowel, \"\").length == word.length }\nend\n</cell>\n<cell>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<cell>\nget_closest_vowel(\"FULL\")\n\
    </cell>\n<cell>\nget_closest_vowel(\"quick\")\n</cell>\n<cell>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<text>\nThe next function will return the number of vowels found\
    \ in the given string. \nIt will return the number of vowels found in the given\
    \ string. \nIt will return the number of vowels found in the given string. \n\
    It will return the number of vowels found in the given string. \nIt will return\
    \ the number of vowels found in the given string. \nIt will return the number\
    \ of vowels found in the given string. \nIt will return the number of vowels found\
    \ in the given string. \nIt will return the number of vowels found in the given\
    \ string. \nIt will return the number of vowels found in the given string. \n\
    It will return the number of vowels found in the given string. \nIt will return\
    \ the number of vowels found in the given string. \nIt will return the number\
    \ of vowels found in the given string. \nIt will return the number of vowels found\
    \ in the given string. \nIt will return the number of vowels found in the given\
    \ string. \nIt will return the number of vowels found in the given string. \n\
    It will return the number of vowels found in the given string. \nIt will return\
    \ the number of vowels found in the given string. \nIt will return the number\
    \ of vowels found in the given string. \nIt will return the number of vowels found\
    \ in the given string. \nIt will return the number of vowels found in the given\
    \ string. \nIt will return the number of vowels found in the given string. \n\
    It will return the number of vowels found in the given string. \nIt will return\
    \ the number of vowels found in the given string. \nIt will return the number\
    \ of vowels found in the given string. \nIt will return the number of vowels found\
    \ in the given string. \nIt will return the number of vowels found in the given\
    \ string. \nIt will return the number of vowels found in the given string. \n\
    It will return the number of vowels found in the given string. \nIt will return\
    \ the number of vowels found in the given string. \nIt will return the number\
    \ of vowels found in the given string. \nIt will return the number of vowels found\
    \ in the given string. \nIt will return the number of vowels found in the given\
    \ string. \nIt will return the number of vowels found in the given string. \n\
    It will return the number of vowel", "  vowels = %w(a e i o u)\n  consonants =\
    \ %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\"\
    )\n  end\n  word.gsub(/[^aeiou]/, \"\").downcase\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  ",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").downcase\nend", "  vowels = %w[a e i o u]\n  consonants = %w[b c d f g\
    \ h j k l m n p q r s t v w x y]\n  \n  word.downcase!\n  word.each_char.with_index\
    \ do |char, i|\n    if vowels.include?(char) && consonants.include?(word[(i+1)..-1])\
    \ \n      return char\n    end\n  end\n  \n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel) == word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  consonants = %w(a e i o u)\n  vowel_positions = word.split(//).reverse.map\
    \ { |char| vowels.index(c)}\n  consonant_positions = word.split(//).reverse.map\
    \ { |char| consonants.index(c)}\n  \n  vowel_positions.each do |position|\n  \
    \  if position > 0 && position < consonant_positions.length\n      return consonants[position-1]\n\
    \    end\n  end\n  \n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  vowel_positions = []\n  vowel_positions.push(word.rindex(\"a\"\
    ))\n  vowel_positions.push(word.rindex(\"e\"))\n  vowel_positions.push(word.rindex(\"\
    i\"))\n  vowel_positions.push(word.rindex(\"o\"))\n  vowel_positions.push(word.rindex(\"\
    u\"))\n  vowel_positions.each do |position|\n    if position > 0\n      vowel_positions.push(position\
    \ - 1)\n    end\n  end\n  vowel_positions.each do |position|\n    if position\
    \ < word.length\n      vowel_positions.push(position + 1)\n    end\n  end\n  vowel_positions.each\
    \ do |position|\n    if word.rindex(vowels[position]) == 0\n      return vowels[position]\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.chars.reverse_each.with_index.select\
    \ { |c,i| vowels.include?(c) }.last\nend", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= 1\n  \n  if vowels_count\
    \ < 0 or vowels_count > 3:\n    return \"\"\n  \n  vowels_index = word.rindex(\"\
    a\")\n  vowels_index += word.rindex(\"e\")\n  vowels_index += word.rindex(\"i\"\
    )\n  vowels_index += word.rindex(\"o\")\n  vowels_index += word.rindex(\"u\")\n\
    \  \n  vowels_index += 1\n  \n  if vowels_index > len(word) - 1:\n    return \"\
    \"\n  \n  vowel = word[vowels_index]\n  \n  while vowel in vowels:\n    vowels_index\
    \ += word.rindex(\"a\")\n    vowels_index += word.rindex(\"e\")\n    vowels_index\
    \ += word.rindex(\"i\")\n    vowels_index += word.rindex(\"o\")\n    vowels_index\
    \ += word.rindex(\"u\")\n    vowels_index -= 1\n    \n    if vowels_index > len(word)\
    \ - 1:\n      return \"\"\n    \n    vowel = word[vowels_index]\n  \n  return\
    \ vowel\n</cell>\n<cell>", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \ vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= 1\n  \n  vowels_count += word.count(\"\
    A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\"\
    )\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n\
    \  vowels_count -= 1\n  \n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  \n  vowels_count +=\
    \ word.count(\"A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"\
    I\")\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\"\
    )\n  \n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\"\
    )\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n\
    \  vowels_count -= word.count(\"u\")\n  \n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  \n  vowels_count\
    \ -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count -=\
    \ word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"\
    u\")\n  \n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  \n  vowels_count -= word.count(\"a\"\
    )\n  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n\
    \  vowels_count ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").length == 0 ?\
    \ \"\" : vowels.find { |vowel| word.gsub(vowel, \"\").length == word.length }\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word.downcase!\n  word.gsub!(/[^a-z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^A-Z]/,\
    \ \"\")\n  word.gsub!(/[^A-Z]/, \"\")\n  word.gsub!(/[^", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")", "  vowels\
    \ = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.gsub(vowel, \"\")\n  end\n  consonants.each do |consonant|\n  \
    \  word = word.gsub(consonant, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  consonants.each do |consonant|\n    word\
    \ = word.gsub(consonant, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  consonants.each do |consonant|\n    word = word.gsub(consonant,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\"\
    )\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  consonants.each\
    \ do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  consonants.each do |consonant|\n\
    \    word = word.gsub(consonant, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  consonants.each do |consonant|\n    word\
    \ = word.gsub(consonant, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  consonants.each do |consonant|\n    word = word.gsub(consonant,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\"\
    )\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n\
    \  vowels.each do |vowel|\n    word = word.gsub(", "  vowels = %w(a e i o u)\n\
    \  consonants = %w(a e i o u)\n  vowel_consonant_pairs = word.split(//)\n  vowel_consonant_pairs.each\
    \ do |pair|\n    vowel_consonant_pair = pair.split(//)\n    vowel_consonant_pair.each\
    \ do |letter|\n      vowel = vowels.find { |vowel| vowel == letter }\n      consonant\
    \ = consonants.find { |consonant| consonant == letter }\n      if vowel && consonant\n\
    \        return letter\n      end\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\"\
    )\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word.empty? ? \"\" : vowels.find\
    \ { |vowel| word.include?(vowel) }\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.split(vowel).last\n  end\n  word\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    vowel_position = word.index(vowel)\n    if vowel_position >\
    \ 0 && vowel_position < word.length - 1\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z)\n  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first.to_s.downcase\n\
    \  end\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    index =\
    \ word.index(vowel)\n    if index > 0\n      break if index == word.length - 1\n\
    \      break if index == word.length\n      break if index == 0\n      break if\
    \ index == -1\n    end\n  end\n  return \"\" if index == -1\n  word[index..-1]\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\"\
    )\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").downcase\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nThis doesn't work if you have a word like \"aardvark\". It will return\
    \ the wrong vowel.\n<|/ c |>\n<| c |>\n: I added a case for that case. Thanks.\n\
    <|/ c |>\n<| c |>\nI added a case for that case. Thanks.\n<|/ c |>\n<| c |>\n\
    I added a case for that case. Thanks.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_positions = []\n  vowel_positions_sorted\
    \ = []\n  vowel_positions_sorted.each do |position|\n    vowel_positions.push(word.index(position))\n\
    \  end\n  vowel_positions_sorted.sort!\n  vowel_positions_sorted.each do |position|\n\
    \    if vowels.include?(word[position])\n      return word[position]\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    vowel_pos = word.index(vowel)\n    if vowel_pos > 0 && vowel_pos < word.length\
    \ - 1\n      consonants = word[vowel_pos + 1, word.length]\n      consonants.each\
    \ do |consonant|\n        if consonant == \"a\"\n          return vowel\n    \
    \    end\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ word.gsub(/[aeiou]/, \"\").downcase\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,regex\
    \ |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    index\
    \ = word.index(vowel)\n    if index != -1 && index != word.length - 1\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  consonants.each do |consonant|\n    word = word.split(consonant).first\n\
    \  end\n  word.split(\"\").each do |letter|\n    return letter if vowels.include?(letter)\n\
    \  end\n  return \"\"\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't\
    \ work. Try `get_closest_vowel(\"ab\")`\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it yourself. It returns `\"\"` for `get_closest_vowel(\"ab\")`\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for `get_closest_vowel(\"ab\")` because `get_closest_vowel(\"\
    ab\")` returns `\"\"` for `get_closest_vowel(\"ab\")`\n<|/ c |>\n<| c |>\nIt returns\
    \ `\"\"` for `get_closest_vowel(\"ab\")` because `get_closest_vowel(\"ab\")` returns\
    \ `\"\"` for `get_closest_vowel(\"ab\")`\n<|/ c |>\n<| c |>\nIt returns `\"\"\
    ` for `get_closest_vowel(\"ab\")` because `get_closest_vowel(\"ab\")` returns\
    \ `\"\"` for `get_closest_vowel(\"ab\")`\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(/[aeiouy]/).count\n  vowels_count += word.scan(/[aeiou]/i).count\n\
    \  vowels_count += word.scan(/[aeiouy]/i).count\n  vowels_count += word.scan(/[aeiou]/).count\n\
    \  vowels_count += word.scan(", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    if word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\
    \nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.chars.reverse_each.with_index do |letter, index|\n    break if index ==\
    \ 0\n    break if index == word.length - 1\n    break if vowels.include?(letter)\n\
    \    break if vowels.include?(word[index + 1])\n    break if vowels.include?(word[index\
    \ - 1])\n    break if vowels.include?(word[index + 2])\n    break if vowels.include?(word[index\
    \ - 2])\n    break if vowels.include?(word[index + 3])\n    break if vowels.include?(word[index\
    \ - 3])\n    break if vowels.include?(word[index + 4])\n    break if vowels.include?(word[index\
    \ - 4])\n    break if vowels.include?(word[index + 5])\n    break if vowels.include?(word[index\
    \ - 5])\n    break if vowels.include?(word[index + 6])\n    break if vowels.include?(word[index\
    \ - 6])\n    break if vowels.include?(word[index + 7])\n    break if vowels.include?(word[index\
    \ - 7])\n    break if vowels.include?(word[index + 8])\n    break if vowels.include?(word[index\
    \ - 8])\n    break if vowels.include?(word[index + 9])\n    break if vowels.include?(word[index\
    \ - 9])\n    break if vowels.include?(word[index + 10])\n    break if vowels.include?(word[index\
    \ - 10])\n    break if vowels.include?(word[index + 11])\n    break if vowels.include?(word[index\
    \ - 11])\n    break if vowels.include?(word[index + 12])\n    break if vowels.include?(word[index\
    \ - 12])\n    break if vowels.include?(word[index + 13])\n    break if vowels.include?(word[index\
    \ - 13])\n    break if vowels.include?(word[index + 14])\n    break if vowels.include?(word[index\
    \ - 14])\n    break if vowels.include?(word[index + 15])\n    break if vowels.include?(word[index\
    \ - 15])\n    break if vowels.include?(word[index + 16])\n    break if vowels.include?(word[index\
    \ - 16])\n    break if vowels.include?(word[index + 17])\n    break if vowels.include?",
  "  vowels = %w[a e i o u]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count if vowels_count < vowels.length \n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if vowels_count\
    \ < vowels.length \n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count if vowels_count < vowels.length \n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count if vowels_count < vowels.length\
    \ \n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ if vowels_count < vowels.length \n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count if vowels_count < vowels.length \n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if vowels_count\
    \ < vowels.length \n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count if vowels_count < vowels.length \n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count if vowels_count < vowels.length\
    \ \n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ if vowels_count < vowels.length \n  vowels_", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.scan(/[#{vowels.join('|')}]/).each do |vowel|\n    break if vowels.index(vowel)\
    \ == word.index(vowel)\n  end\n  vowel\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  consonant_count = word.count(\"a\")\n  vowel_count = word.count(\"\
    e\")\n  vowel_count += word.count(\"i\")\n  vowel_count += word.count(\"o\")\n\
    \  vowel_count += word.count(\"u\")\n  \n  consonant_count -= consonant_count\
    \ % vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  \n\
    \  consonant_count += consonant_count % vowel_count\n  \n  consonant_count +=\
    \ consonant_count % vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n\
    \  \n  consonant_count += consonant_count % vowel_count\n  \n  consonant_count\
    \ += consonant_count % vowel_count\n  \n  consonant_count += consonant_count %\
    \ vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  \n  consonant_count\
    \ += consonant_count % vowel_count\n  \n  consonant_count += consonant_count %\
    \ vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  \n  consonant_count\
    \ += consonant_count % vowel_count\n  \n  consonant_count += consonant_count %\
    \ vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  \n  consonant_count\
    \ += consonant_count % vowel_count\n  \n  consonant_count += consonant_count %\
    \ vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  \n  consonant_count\
    \ += consonant_count % vowel_count\n  \n  consonant_count += consonant_count %\
    \ vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  \n  consonant_count\
    \ += consonant_count % vowel_count\n  \n  consonant_count += consonant_count %\
    \ vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  \n  consonant_count\
    \ += consonant_count % vowel_count\n  \n  consonant_count += consonant_count %\
    \ vowel_count\n  \n  consonant_count += consonant_count % vowel_count\n  ", " \
    \ vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,string |>\n<| a dscore=0 |>\n<code>", " \
    \ vowels = %w(a e i o u)\n  consonants = %w(a e i o u y o i o u)\n  vowel_consonant_pairs\
    \ = vowels.zip(consonants)\n  vowel_consonant_pairs.each do |vowel, consonant|\n\
    \    word = word.gsub(vowel, consonant)\n  end\n  word.gsub(/[^aeiou]/, '')\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"\
    e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\"\
    )\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\")\n\
    \  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n  vowels_count\
    \ += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -=\
    \ word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"\
    o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\"\
    )\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n\
    \  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index do |char, index|\n\
    \    if vowels.include?(char) && consonants.include?(word[index + 1])\n      return\
    \ char\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count +=\
    \ word.scan(/[AEIOU]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[AEIOUY]/).count\n  vowels_count += word.scan(/[aeiouyg]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYG]/).count\n  vowels_count += word.scan(/[aeiouygh]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGH]/).count\n  vowels_count += word.scan(/[aeiouyghk]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHK]/).count\n  vowels_count += word.scan(/[aeiouyghkj]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHKJ]/).count\n  vowels_count += word.scan(/[aeiouyghkjl]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHKJL]/).count\n  vowels_count += word.scan(/[aeiouyghkjlmn]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHKJLMN]/).count\n  vowels_count += word.scan(/[aeiouyghkjlmno]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHKJLMNO]/).count\n  vowels_count += word.scan(/[aeiouyghkjlmnop]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHKJLMNOP]/).count\n  vowels_count += word.scan(/[aeiouyghkjlmnopr]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHKJLMNOPR]/).count\n  vowels_count += word.scan(/[aeiouyghkjlmnoprs]/).count\n\
    \  vowels_count += word.scan(/[AEIOUYGHKJLMNOPRS]/).count\n  vowels_count += word.scan(/[aeiouy",
  "  vowels = %w(a e i o u)\n  word.each_char.with_index do |char, i|\n    if vowels.include?(char)\n\
    \      vowels.each_with_index do |vowel, j|\n        if j > i && char == vowel\n\
    \          return vowel\n        end\n      end\n    end\n  end\n  \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index > 0\n      break\n    end\n  end\n\
    \  return word[index] if index\n  return \"\"\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  consonants.each\
    \ do |consonant|\n    word = word.split(consonant).first\n  end\n  word\nend",
  "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z)\n  word.downcase!\n  word.scan(/[#{consonants.join('|')}]/).each\
    \ do |consonant|\n    vowels.each do |vowel|\n      if consonant.include?(vowel)\n\
    \        return vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z)\n  vowel_positions = []\n  consonant_positions = []\n  vowel_positions.push\
    \ word.length\n  consonant_positions.push word.length\n  word.each_char.with_index\
    \ do |char, i|\n    if vowels.include? char\n      vowel_positions.push i\n  \
    \  end\n    if consonants.include? char\n      consonant_positions.push i\n  \
    \  end\n  end\n  \n  vowel_positions.each do |i|\n    j = i - 1\n    k = i + 1\n\
    \    \n    if j > 0 && consonant_positions[j] == consonant_positions[k]\n    \
    \  return vowels[i]\n    end\n  end\n  \n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel) == word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z)\n  \n  word.downcase!\n  word.split(//).each do |letter|\n\
    \    letter = letter.to_sym\n    \n    vowels.each do |vowel|\n      if letter.include?(vowel)\n\
    \        return vowel\n      end\n    end\n    \n    consonants.each do |consonant|\n\
    \      if letter.include?(consonant)\n        return consonant\n      end\n  \
    \  end\n  end\n  \n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = vowels.count(\"a\")\n  vowels_count += vowels.count(\"\
    e\")\n  vowels_count += vowels.count(\"i\")\n  vowels_count += vowels.count(\"\
    o\")\n  vowels_count += vowels.count(\"u\")\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y\
    \ o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o\
    \ u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e\
    \ i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y\
    \ a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i\
    \ u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y\
    \ o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o\
    \ u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e\
    \ i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y\
    \ a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i\
    \ u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y\
    \ o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o\
    \ u y o i u y a e i o u y o i u y a e i o u y o i u y a e i o u y o i u y a e ",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    return \"\" if index == -1\n    index = index + 1\n    return vowel if index\
    \ == word.length\n  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n \
    \ vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -=\
    \ word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"\
    U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\"\
    )\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n\
    \  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count\
    \ += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n  vowels_count +=\
    \ word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"\
    e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\"\
    )\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\")",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  word.downcase!\n  word.each_char.with_index do |char, i|\n    next if char\
    \ == \" \"\n    next if char == \"'\"\n    next if char == \"-\"\n    next if\
    \ char == \"_\"\n    next if char == \"*\"\n    next if char == \"?\"\n    next\
    \ if char == \"!\"\n    next if char == \"'\"\n    next if char == \"(\"\n   \
    \ next if char == \")\"\n    next if char == \"[\"\n    next if char == \"]\"\n\
    \    next if char == \"{\"\n    next if char == \"}\"\n    next if char == \"\
    %\"\n    next if char == \"^\"\n    next if char == \"&\"\n    next if char ==\
    \ \"*\"\n    next if char == \"+\"\n    next if char == \"=\"\n    next if char\
    \ == \"-\"\n    next if char == \":\"\n    next if char == \";\"\n    next if\
    \ char == \",\"\n    next if char == \"<\"\n    next if char == \">\"\n    next\
    \ if char == \"/\"\n    next if char == \"?\"\n    next if char == \"!\"\n   \
    \ next if char == \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n\
    \    next if char == \"'\"\n    next if char == \"'\"\n    next if char == \"\
    '\"\n    next if char == \"'\"\n    next if char == \"'\"\n    next if char ==\
    \ \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n    next if char\
    \ == \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n    next if\
    \ char == \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n    next\
    \ if char == \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n   \
    \ next if char == \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n\
    \    next if char == \"'\"\n    next if char == \"'\"\n    next if char == \"\
    '\"\n    next if char == \"'\"\n    next if char == \"'\"\n    next if char ==\
    \ \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n    next if char\
    \ == \"'\"\n    next if char == \"'\"\n    next if char == \"'\"\n    next if\
    \ char == \"'\"\n    next if char == \"'\"\n    next if ", "  vowels = %w(a e\
    \ i o u)\n  consonants = %w(a e i o u)\n  consonants.each do |c|\n    vowels.each\
    \ do |v|\n      if word.include?(v)\n        return v\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  vowel_pos = word.index(vowel)\n    if vowel_pos > 0 \n      break if vowel_pos\
    \ < word.size - 1\n    end\n  end\n  word.slice!(vowel_pos)\n  word\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the word is \"ab\". It returns\
    \ \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ updated the answer to fix the bug.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z)\n  vowel_consonant_pairs = vowels.zip(consonants)\n\
    \  word.each_char.with_index do |char, index|\n    vowel_consonant_pairs.each\
    \ do |vowel_consonant_pair|\n      next if index == 0\n      next if index ==\
    \ word.length - 1\n      next if vowel_consonant_pair[0] == char\n      next if\
    \ vowel_consonant_pair[1] == char\n      break if vowel_consonant_pair[0] < vowel_consonant_pair[1]\n\
    \    end\n  end\n  vowel_consonant_pairs.last.first\nend\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    if word.index(vowel) == word.length - 1\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join('|')}]/).each\
    \ do |vowel|\n    vowels.each do |vowel|\n      return vowel if word.index(vowel,\
    \ word.length-1) >= 0\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e\
    \ i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word.split(vowel).each\
    \ do |char|\n      if char == vowel\n        return char\n      end\n    end\n\
    \  end\n  consonants.each do |consonant|\n    word.split(consonant).each do |char|\n\
    \      if char == consonant\n        return char\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n \
    \   if index\n      break if index > word.length - 1\n      break if index ==\
    \ word.length - 1\n      break if index == word.length\n      break if index ==\
    \ 0\n    end\n  end\n  return \"\" if index == 0\n  return vowel if index > 0\n\
    \  return vowel.downcase if index > 0\n  return vowel.upcase if index > 0\n  return\
    \ \"\"\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `get_closest_vowel(\"\
    ab\")` returns `\"\"` instead of `\"a\"`.\n<|/ c |>\n<| c |>\nI fixed the bug.\
    \ Thanks for pointing it out. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0\n      vowel_pos_right = word.index(vowel, vowel_pos + 1)\n\
    \      if vowel_pos_right > 0 && vowel_pos_right < word.length\n        return\
    \ vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index\
    \ != nil\n      break\n    end\n  end\n  if index != nil\n    word.slice!(0...index)\n\
    \    word.slice!(index..-1)\n  end\n  return word\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n \
    \ word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\
    \").empty?\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first.to_s.downcase\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if\
    \ the word is \"ab\". It returns \"u\" instead of \"\".\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution is O(n^2) (worst case). A better solution would be to iterate\
    \ through the string and keep track of the last consonant and last vowel seen.\
    \ Then, when you encounter a vowel, compare the previous consonant with the current\
    \ consonant and see if the previous vowel was a vowel or a consonant. Then, when\
    \ you encounter a consonant, compare the previous vowel with the current vowel\
    \ and see if the previous consonant was a vowel or a consonant. Then, when you\
    \ encounter a vowel, compare the previous consonant with the current consonant\
    \ and see if the previous vowel was a vowel or a consonant. Repeat until you encounter\
    \ a consonant.\n<|/ c |>\n<| c |>\nI agree with you. Your solution is much better.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  if word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\n\
    end", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    word.scan(/[#{vowel}]+/).each do |consonant|\n      word.scan(/[#{consonant}]+/).each\
    \ do |consonant|\n        return vowel if word.index(consonant) < word.index(vowel)\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n \
    \ vowels.each do |vowel|\n    if word.index(vowel)\n      return vowel\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e\
    \ i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\")\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments,\
    \ hope it helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. Can you please\
    \ explain how this works? I understand that gsub is used to replace a character\
    \ with another character. But how does it work?\n<|/ c |>\n<| c |>\n`gsub` replaces\
    \ all the occurrences of a string with another string. `vowels.each do |vowel|`\
    \ iterates over all the vowels in the array `vowels`. `vowel.gsub(vowel, \"\"\
    )` replaces the vowel with an empty string `\"\"`. `vowels.each do |vowel|` iterates\
    \ over all the vowels in the array `vowels`. `vowel.gsub(vowel, \"\")` replaces\
    \ the vowel with an empty string `\"\"`. `vowels.each do |vowel|` iterates over\
    \ all the vowels in the array `vowels`. `vowel.gsub(vowel, \"\")` replaces the\
    \ vowel with an empty string `\"\"`.\n<|/ c |>\n<| c |>\n`word.gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\")` replaces\
    \ all the vowels with an empty string. `word.gsub(/[aeiou]/, \"\")` replaces all\
    \ the vowels with an empty string. `word.gsub(/[aeiou]/, \"\")` replaces all the\
    \ vowels with an empty string. `word.gsub(/[aeiou]/, \"\")` replaces all the vowels\
    \ with an empty string.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.chars.each do |c|\n    vowels.each do |vowel|\n      if c == vowel\n \
    \       return vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z)\n  \n  word.downcase!\n  word.each_char.with_index do |char, i|\n\
    \    if vowels.include?(char) && consonants.include?(word[(i+1)..-1].downcase)\n\
    \      return char\n    end\n  end\n  \n  \"\"\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index != -1 && index != word.length - 1\n      return vowel\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e\
    \ i o u)\n  word.downcase!\n  word.each_char.with_index do |char, i|\n    if vowels.include?(char)\
    \ && consonants.include?(word[(i+1)..-1]) \n      return char\n    end\n  end\n\
    \  \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  word.downcase!\n\
    \  word.chars.each do |char|\n    if vowels.include?(char) \n      return char\n\
    \    elsif consonants.include?(char) \n      return char\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiouy]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, ", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= 1\n  vowels_count /=\
    \ 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count ", "  vowels\
    \ = %w(a e i o u)\n  consonants = %w(a e i o u y o u e i o u y o u e i o u y o\
    \ u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i\
    \ o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y\
    \ o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e\
    \ i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u\
    \ y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u\
    \ e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o\
    \ u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o\
    \ u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i\
    \ o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y\
    \ o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e\
    \ i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u\
    \ y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u e i o u y o u\
    \ e i o u y o u e i o u y o u e ", "  vowels = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\
    \").downcase\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos\
    \ = word.index(vowel)\n    vowel_pos_right = vowel_pos + 1\n    vowel_pos_left\
    \ = word.index(vowel, vowel_pos_right - 1)\n    if vowel_pos_right < word.length\n\
    \      vowel_pos_right = word.length\n    elsif vowel_pos_left > 0\n      vowel_pos_left\
    \ = 0\n    end\n    \n    if vowel_pos_right < word.length\n      vowel_pos_right\
    \ = word.length\n    elsif vowel_pos_left > 0\n      vowel_pos_left = 0\n    end\n\
    \    \n    if vowel_pos_right < word.length\n      vowel_pos_right = word.length\n\
    \    elsif vowel_pos_left > 0\n      vowel_pos_left = 0\n    end\n    \n    if\
    \ vowel_pos_right < word.length\n      vowel_pos_right = word.length\n    elsif\
    \ vowel_pos_left > 0\n      vowel_pos_left = 0\n    end\n    \n    if vowel_pos_right\
    \ < word.length\n      vowel_pos_right = word.length\n    elsif vowel_pos_left\
    \ > 0\n      vowel_pos_left = 0\n    end\n    \n    if vowel_pos_right < word.length\n\
    \      vowel_pos_right = word.length\n    elsif vowel_pos_left > 0\n      vowel_pos_left\
    \ = 0\n    end\n    \n    if vowel_pos_right < word.length\n      vowel_pos_right\
    \ = word.length\n    elsif vowel_pos_left > 0\n      vowel_pos_left = 0\n    end\n\
    \    \n    if vowel_pos_right < word.length\n      vowel_pos_right = word.length\n\
    \    elsif vowel_pos_left > 0\n      vowel_pos_left = 0\n    end\n    \n    if\
    \ vowel_pos_right < word.length\n      vowel_pos_right = word.length\n    elsif\
    \ vowel_pos_left > 0\n      vowel_pos_left = 0\n    end\n    \n    if vowel_pos_right\
    \ < word.length\n      vowel_pos_right = word.length\n    elsif vowel_pos_left\
    \ > 0\n      vowel_pos_left = 0\n    end\n    \n    if vowel_pos_right < word.length\n\
    \      vowel_pos_right = word.length\n    elsif vowel_pos_left > 0\n      vowel_pos_left\
    \ = 0\n    end\n    \n    if vowel_pos_right < word.length\n      vowel_pos_right\
    \ = word.length\n    elsif vowel_pos_left > 0\n      vowel_pos_left = 0\n    end\n\
    \    \n    if ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word\
    \ = word.split(vowel).last\n  end\n  word\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nThis doesn't work if the word is \"a\" or \"e\" or \"i\" or \"\
    o\" or \"u\".\n<|/ c |>\n<| c |>\nYes, I know. That's why I said \"You may assume\
    \ that the given string contains English letter only.\"\n<|/ c |>\n<| c |>\nI\
    \ see what you mean. My bad.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n   \
    \ word = word.split(vowel).last\n  end\n  word\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  word.downcase!\n  word.chars.each do |c|\n    next if vowels.include?(c)\n\
    \    next if consonants.include?(c)\n    break if consonants.include?(c.next)\n\
    \  end\n  consonants.include?(c.next) ? c.next : \"\"\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the word starts with a vowel. For example,\
    \ `get_closest_vowel(\"a\")` returns `\"\"`.\n<|/ c |>\n<| c |>\n, thanks for\
    \ pointing out. I fixed the code accordingly.\n<|/ c |>\n<| a |>\n<code>", " \
    \ vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    vowel_pos = word.index(vowel)\n    if vowel_pos > 0 && vowel_pos < word.length\
    \ - 1\n      consonant_pos = vowel_pos + 1\n      consonant_pos = consonant_pos\
    \ > word.length ? word.length : consonant_pos\n      consonant_pos = consonant_pos\
    \ < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos > word.length ?\
    \ word.length : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > word.length ? word.length : consonant_pos\n\
    \      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos\
    \ = consonant_pos > word.length ? word.length : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > word.length ? word.length : consonant_pos\n      consonant_pos = consonant_pos\
    \ < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos > word.length ?\
    \ word.length : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > word.length ? word.length : consonant_pos\n\
    \      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos\
    \ = consonant_pos > word.length ? word.length : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos\
    \ > word.length ? word.length : consonant_pos\n      consonant_pos = consonant_pos\
    \ < 0 ? 0 : consonant_pos\n      consonant_pos = consonant_pos > word.length ?\
    \ word.length : consonant_pos\n      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n\
    \      consonant_pos = consonant_pos > word.length ? word.length : consonant_pos\n\
    \      consonant_pos = consonant_pos < 0 ? 0 : consonant_pos\n      consonant_pos\
    \ = consonant_pos > word.length ? word.length : consonant_pos\n      consonant_pos\
    \ = consonant_pos < 0 ? 0 : consonant_pos\n      conson", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_start_index = nil\n  vowel_end_index = nil\n  \n  word.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      vowel_start = index\n\
    \      vowel_start_index = index\n      vowel_found = true\n    end\n  end\n \
    \ \n  word.each_char.with_index do |char, index|\n    if vowels.include?(char)\n\
    \      vowel_end = index\n      vowel_end_index = index\n    end\n  end\n  \n\
    \  if vowel_found\n    vowel_range = vowel_start..vowel_end\n    vowel_range.each\
    \ do |index|\n      if index == vowel_start_index\n        return char\n     \
    \ elsif index == vowel_end_index\n        return char\n      end\n    end\n  end\n\
    \  \n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    if word.index(vowel)\n      return vowel\n    end\n  end\n  return \"\"\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowel_counter = 0\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_length = nil\n  vowel_found = vowels.find\
    \ do |vowel|\n    vowel_length = word.length\n    vowel_start = word.rindex(vowel,\
    \ vowel_length-1)\n    vowel_end = word.rindex(vowel, vowel_length-1)\n    vowel_counter\
    \ = word.count(vowel)\n    vowel_found = vowel_counter > 1\n    vowel_found\n\
    \  end\n  return vowel_found ? vowels[vowel_counter-1] : \"\"\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if the word is \"ab\". It\
    \ returns \"u\" instead of \"\".\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I've fixed the code now. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  vowels\
    \ = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z)\n  \n  word.downcase!\n  word.scan(/[#{consonants.join}]+/).each\
    \ do |c|\n    vowels.each do |v|\n      if c =~ /#{v}/\n        return v\n   \
    \   end\n    end\n  end\n  \n  return \"\"\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. Your code works well for \"yogurt\" but fails\
    \ for \"ab\" because \"ab\" contains \"a\" which is not in the consonants array.\
    \ \nI tried to add \"a\" to the consonants array but it didn't work.\n<|/ c |>\n\
    <| c |>\nI updated my answer to include a case where `ab` returns `U`\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your code works well for \"yogurt\" but fails\
    \ for \"ab\" because \"ab\" contains \"a\" which is not in the consonants array.\
    \ I tried to add \"a\" to the consonants array but it didn't work. \nI updated\
    \ my answer to include a case where \"ab\" returns \"U\"\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a case where `ab` returns `U`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  consonants.each do |consonant|\n\
    \    word = word.gsub(consonant, \"\")\n  end\n  word.gsub(/[^aeiou]/, \"\").downcase\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n\
    \    vowel_pos = word.index(vowel)\n    vowel_pos_right = word.rindex(vowel)\n\
    \    if vowel_pos_right != -1 && vowel_pos_right < vowel_pos\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos > 0\n      vowel_pos\
    \ = word.index(vowel, vowel_pos+1)\n      if vowel_pos > 0\n        return vowel\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n \
    \ consonants = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n  word.downcase!\n\
    \  word.scan(/[#{consonants}]+/).each do |c|\n    vowels.each do |v|\n      next\
    \ if c == v\n      break if word.slice(-c.length..-1).include?(v)\n    end\n \
    \ end\n  word.slice(-c.length..-1).include?(\"u\") ? \"u\" : \"\"\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a word like \"abba\" where you\
    \ want the vowel between \"a\" and \"b\" to be \"u\".\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I tested it before posting it. I just added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI see it now. Sorry about that. My bad.\n<|/ c |>\n<| c |>\n\
    I added a test case to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I'm going to try this out and see how it works.\n<|/ c |>\n<| a\
    \ tags=ruby,string |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.split(vowel).last\n  end\n  word\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| a tags=ruby,string |>\n<code>", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  consonants.each do |consonant|\n    word = word.split(consonant).first\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  \n  vowels_count\
    \ -= 1\n  \n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"\
    E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\"\
    )\n  vowels_count += word.count(\"U\")\n  \n  vowels_count -= 1\n  \n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  \n  vowels_count -= 1\n  \n  vowels_count += word.count(\"A\")\n  vowels_count\
    \ += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n  vowels_count +=\
    \ word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  \n  vowels_count -=\
    \ 1\n  \n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  \n  vowels_count -= 1\n  \n  vowels_count\
    \ += word.count(\"A\")\n  vowels_count += word.count(\"E\")\n  vowels_count +=\
    \ word.count(\"I\")\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"\
    U\")\n  \n  vowels_count -= 1\n  \n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  \n  vowels_count -=\
    \ 1\n  \n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"\
    E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\"\
    )\n  vowels_count += ", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_positions\
    \ = []\n  vowel_positions.push word.index(\"a\")\n  vowel_positions.push word.index(\"\
    e\")\n  vowel_positions.push word.index(\"i\")\n  vowel_positions.push word.index(\"\
    o\")\n  vowel_positions.push word.index(\"u\")\n  vowel_positions.push word.index(\"\
    A\")\n  vowel_positions.push word.index(\"E\")\n  vowel_positions.push word.index(\"\
    I\")\n  vowel_positions.push word.index(\"O\")\n  vowel_positions.push word.index(\"\
    U\")\n  vowel_positions.push word.index(\"a\")\n  vowel_positions.push word.index(\"\
    e\")\n  vowel_positions.push word.index(\"i\")\n  vowel_positions.push word.index(\"\
    o\")\n  vowel_positions.push word.index(\"u\")\n  vowel_positions.push word.index(\"\
    A\")\n  vowel_positions.push word.index(\"E\")\n  vowel_positions.push word.index(\"\
    I\")\n  vowel_positions.push word.index(\"O\")\n  vowel_positions.push word.index(\"\
    U\")\n  vowel_positions.push word.index(\"a\")\n  vowel_positions.push word.index(\"\
    e\")\n  vowel_positions.push word.index(\"i\")\n  vowel_positions.push word.index(\"\
    o\")\n  vowel_positions.push word.index(\"u\")\n  vowel_positions.push word.index(\"\
    A\")\n  vowel_positions.push word.index(\"E\")\n  vowel_positions.push word.index(\"\
    I\")\n  vowel_positions.push word.index(\"O\")\n  vowel_positions.push word.index(\"\
    U\")\n  vowel_positions.push word.index(\"a\")\n  vowel_positions.push word.index(\"\
    e\")\n  vowel_positions.push word.index(\"i\")\n  vowel_positions.push word.index(\"\
    o\")\n  vowel_positions.push word.index(\"u\")\n  vowel_positions.push word.index(\"\
    A\")\n  vowel_positions.push word.index(\"E\")\n  vowel_positions.push word.index(\"\
    I\")\n  vowel_positions.push word.index(\"O\")\n  vowel_positions.push word.index(\"\
    U\")\n  vowel_positions.push word.index(\"a\")\n  vowel_positions.push ", "  vowels\
    \ = %w(a e i o u)\n  word.chars.reverse_each.with_index do |char, index|\n   \
    \ vowels.each do |vowel|\n      next if index == 0\n      next if index == word.length\
    \ - 1\n      next if char == vowel\n      break if index == word.length - 2\n\
    \    end\n  end\nend", "  vowels = %w(a e i o u)\n  word.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      vowels.each do |vowel|\n\
    \        if index > 0 && vowel == word[index-1]\n          return vowel\n    \
    \    end\n      end\n    end\n  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  \n  if word.length < 2\n    return \"\"\n  end\n\
    \  \n  word.each_char.with_index do |char, index|\n    if index == word.length\
    \ - 1\n      return char\n    end\n    \n    if char == word[index + 1]\n    \
    \  return char\n    end\n  end\n  \n  return \"\"\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count.times\
    \ do |i|\n    vowel = vowels[i]\n    vowel_position = word.index(vowel)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_position -= 1 if vowel_position\
    \ > 0\n    vowel_position = word.index(vowel, vowel_position)\n    vowel_position\
    \ += 1 if vowel_position < word.length\n    vowel_", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  vowels_count = vowels.length\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 2\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowel", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowel_positions\
    \ = []\n  consonant_positions = []\n  vowel_positions.push word.rindex(vowels)\n\
    \  consonant_positions.push word.rindex(consonants)\n  vowel_positions.push word.rindex(vowels,\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, 1, word.length)\n\
    \  vowel_positions.push word.rindex(vowels, word.length)\n  consonant_positions.push\
    \ word.rindex(consonants, word.length)\n  vowel_positions.push word.rindex(vowels,\
    \ word.length + 1, word.length)\n  consonant_positions.push word.rindex(consonants,\
    \ word.length + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length\
    \ + 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.rindex(consonants, word.length\
    \ + 1, word.length)\n  vowel_positions.push word.rindex(vowels, word.length +\
    \ 1, word.length)\n  consonant_positions.push word.r", "  vowels = %w(a e i o\
    \ u)\n  word.downcase!\n  word.each_char.with_index do |char, i|\n    next if\
    \ char == char\n    next if char == char.upcase\n    next if char == char.downcase\n\
    \    next if vowels.include?(char)\n    next if i == 0\n    next if i == word.length\
    \ - 1\n    next if char == char.upcase && word[i - 1] == char.downcase\n    next\
    \ if char == char.downcase && word[i + 1] == char.upcase\n    next if char ==\
    \ char.upcase && word[i - 1] == char.downcase && word[i + 1] == char.upcase\n\
    \    next if char == char.downcase && word[i - 1] == char.upcase && word[i + 1]\
    \ == char.downcase\n    vowels.each do |vowel|\n      next if char == vowel\n\
    \      next if char == vowel.upcase\n      next if char == vowel.downcase\n  \
    \  end\n  end\n  vowels.first\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != -1 && index != word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word.scan(/[#{vowel}]+/).each\
    \ do |consonant|\n      word.scan(/[#{consonant}]+/).each do |consonant|\n   \
    \     return vowel if word.index(consonant) > word.index(vowel)\n      end\n \
    \   end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index > 0 && index < (word.length\
    \ - 1)\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first.to_s\n\
    \  end\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word.gsub(/[^aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/,\
    \ \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").gsub(/[aeiou]/, \"\").", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n   \
    \ if word.include?(vowel)\n      return vowel\n    end\n  end\n  return \"\"\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index != nil\n      break\n    end\n  end\n\
    \  if index != nil\n    word.slice!(0, index)\n    word.slice!(index, 1)\n  end\n\
    \  return word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count.times do |i|\n    vowels.each do\
    \ |vowel|\n      if word[vowels.index(vowel)..-1] == vowel\n        return vowel\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n \
    \ vowels.each do |vowel|\n    if word.index(vowel, word.length - vowel.length)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  consonants = %w(a e i o u)\n  vowel_consonant_pairs = %w(a e i o u A\
    \ E I O U)\n  consonant_pairs = %w(a e i o u)\n  consonant_pairs.each do |pair|\n\
    \    vowel_consonant_pairs.each do |vowel_consonant_pair|\n      consonant_pairs.each\
    \ do |consonant_pair|\n        if word.index(vowel_consonant_pair) == word.index(pair)\n\
    \          return vowel_consonant_pair\n        end\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    vowel_pos_right = vowel_pos + 1\n    vowel_pos_left = word.rindex(vowel)\n\
    \    vowel_pos_left = vowel_pos_left if vowel_pos_left > vowel_pos_right\n   \
    \ vowel_pos_right = vowel_pos_right if vowel_pos_left < vowel_pos_right\n    if\
    \ vowel_pos_left < vowel_pos_right\n      return vowel\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.split(vowel).last.split(consonants.first).first.to_s.downcase.include?(vowel)\
    \ ? vowel : \"\"\n  end\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n \
    \ word.chars.reverse_each.with_index do |char, i|\n    vowels.include?(char) ?\
    \ vowels.index(i) : nil\n  end\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  word.split(\"\").each do |letter|\n    vowels.each do |vowel|\n\
    \      if letter == vowel\n        return vowel\n      end\n    end\n    consonants.each\
    \ do |consonant|\n      if letter == consonant\n        return consonant\n   \
    \   end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index > 0 && index < word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  \n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  \n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\"\
    )\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n\
    \  vowels_count += word.count(\"U\")\n  \n  vowels_count -= word.count(\"a\")\n\
    \  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count\
    \ -= word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  \n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  \n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  \n  vowels_count += word.count(\"A\"\
    )\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n\
    \  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  \n\
    \  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count\
    \ -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -=\
    \ word.count(\"u\")\n  \n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index != nil\n      break\n    end\n  end\n\
    \  if index == nil\n    return \"\"\n  end\n  index = index + 1\n  while index\
    \ != nil\n    index = word.index(vowel, index)\n    if index != nil\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index do |char, i|\n\
    \    next if char == ?u\n    next if char == ?a\n    next if char == ?e\n    next\
    \ if char == ?i\n    next if char == ?o\n    next if char == ?l\n    next if char\
    \ == ?l\n    next if char == ?e\n    next if char == ?s\n    next if char == ?t\n\
    \    next if char == ?h\n    next if char == ?e\n    next if char == ?r\n    next\
    \ if char == ?e\n    next if char == ?a\n    next if char == ?e\n    next if char\
    \ == ?t\n    next if char == ?h\n    next if char == ?e\n    next if char == ?r\n\
    \    next if char == ?e\n    next if char == ?a\n    next if char == ?e\n    next\
    \ if char == ?t\n    next if char == ?h\n    next if char == ?e\n    next if char\
    \ == ?r\n    next if char == ?e\n    next if char == ?a\n    next if char == ?e\n\
    \    next if char == ?t\n    next if char == ?h\n    next if char == ?e\n    next\
    \ if char == ?r\n    next if char == ?e\n    next if char == ?a\n    next if char\
    \ == ?e\n    next if char == ?t\n    next if char == ?h\n    next if char == ?e\n\
    \    next if char == ?r\n    next if char == ?e\n    next if char == ?a\n    next\
    \ if char == ?e\n    next if char == ?t\n    next if char == ?h\n    next if char\
    \ == ?e\n    next if char == ?r\n    next if char == ?e\n    next if char == ?a\n\
    \    next if char == ?e\n    next if char == ?t\n    next if char == ?h\n    next\
    \ if char == ?e\n    next if char == ?r\n    next if char == ?e\n    next if char\
    \ == ?a\n    next if char == ?e\n    next if ", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").length\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_counter = 0\n  vowel_counter\
    \ = vowels.count(\"a\")\n  vowel_counter = vowel_counter + vowels.count(\"e\"\
    )\n  vowel_counter = vowel_counter + vowels.count(\"i\")\n  vowel_counter = vowel_counter\
    \ + vowels.count(\"o\")\n  vowel_counter = vowel_counter + vowels.count(\"u\"\
    )\n  vowel_counter = vowel_counter - 1\n  vowel_counter = vowel_counter + 1\n\
    \  vowel_counter = vowel_counter + vowels.count(\"A\")\n  vowel_counter = vowel_counter\
    \ + vowels.count(\"E\")\n  vowel_counter = vowel_counter + vowels.count(\"I\"\
    )\n  vowel_counter = vowel_counter + vowels.count(\"O\")\n  vowel_counter = vowel_counter\
    \ + vowels.count(\"U\")\n  vowel_counter = vowel_counter - 1\n  vowel_counter\
    \ = vowel_counter + 1\n  vowel_counter = vowel_counter + vowels.count(\"a\")\n\
    \  vowel_counter = vowel_counter + vowels.count(\"e\")\n  vowel_counter = vowel_counter\
    \ + vowels.count(\"i\")\n  vowel_counter = vowel_counter + vowels.count(\"o\"\
    )\n  vowel_counter = vowel_counter + vowels.count(\"u\")\n  vowel_counter = vowel_counter\
    \ - 1\n  vowel_counter = vowel_counter + 1\n  vowel_counter = vowel_counter +\
    \ vowels.count(\"A\")\n  vowel_counter = vowel_counter + vowels.count(\"E\")\n\
    \  vowel_counter = vowel_counter + vowels.count(\"I\")\n  vowel_counter = vowel_counter\
    \ + vowels.count(\"O\")\n  vowel_counter = vowel_counter + vowels.count(\"U\"\
    )\n  vowel_counter = vowel_counter - 1\n  vowel_counter = vowel_counter + 1\n\
    \  vowel_counter = vowel_counter + vowels.count(\"a\")\n  vowel_counter = vowel_counter\
    \ + vowels.count(\"e\")\n  vowel_counter = vowel_counter + vowels.count(\"i\"\
    )\n  vowel_counter = vowel_counter + vowels.count(\"o\")\n  vowel_counter = vowel_counter\
    \ + vowels.count(\"u\")\n  vowel_counter = vowel_counter - 1\n  vowel_counter\
    \ = vowel_counter + 1\n  ", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index != nil\n\
    \      break\n    end\n  end\n  if index != nil\n    word.slice!(0...index)\n\
    \    word.slice!(index..-1)\n  end\n  return word\nend", "  vowels = %w(a e i\
    \ o u)\n  word.downcase!\n  word.chars.reverse_each.with_index do |char, index|\n\
    \    next if index == 0\n    next if char == vowels.first\n    next if char ==\
    \ vowels.last\n    next if char == vowels.last\n    next if char == vowels.first\n\
    \    vowels.each do |vowel|\n      return char if char == vowel\n    end\n  end\n\
    \  return \"\"\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't\
    \ work. `get_closest_vowel(\"ab\")` returns `\"a\"`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. `get_closest_vowel(\"ab\")` returns `\"a\"`.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote, but I suspect it's because you didn't explain your code. Also, `vowels.first`\
    \ will throw an error if `vowels` is empty.\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Thanks for your feedback.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain your code. Also, `vowels.first`\
    \ will throw an error if `vowels` is empty.\n<|/ c |>\n<| a |>\n<code>", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n \
    \   if index != nil\n      return vowel if index > word.size - vowel.length\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    if word.index(vowel, word.length - vowel.length)\n      return\
    \ vowel\n    end\n  end\n  \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowel_positions = []\n  vowel_positions.push word.rindex(\"a\")\n\
    \  vowel_positions.push word.rindex(\"e\")\n  vowel_positions.push word.rindex(\"\
    i\")\n  vowel_positions.push word.rindex(\"o\")\n  vowel_positions.push word.rindex(\"\
    u\")\n  \n  vowel_positions.each do |position|\n    if position > 0\n      if\
    \ word[position-1] == vowels[position-1]\n        return vowels[position-1]\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w[a e i o u]\n \
    \ vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos\
    \ > 0\n      vowel_pos_right = vowel_pos + 1\n      vowel_pos_left = word.rindex(vowel,\
    \ vowel_pos_right)\n      if vowel_pos_left > 0\n        return vowel if vowel_pos_left\
    \ < vowel_pos_right\n      end\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\"\
    )\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = %w(a e i o\
    \ u)\n  word.downcase!\n  word.each_char.with_index do |char, i|\n    if vowels.include?(char)\n\
    \      return char if i > 0 && i < word.length - 1\n    end\n  end\n  \"\"\nend",
  "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z)\n  vowel_positions = []\n  consonant_positions = []\n  vowel_positions.push\
    \ word.length\n  consonant_positions.push word.length\n  word.each_char do |char|\n\
    \    vowel_positions.push vowels.index char\n    consonant_positions.push consonants.index\
    \ char\n  end\n  \n  vowel_positions.each do |position|\n    if position > consonant_positions[0]\n\
    \      return vowels[position - consonant_positions[0]]\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n \
    \ return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n   \
    \ word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").empty? ?\
    \ \"\" : vowels.find { |vowel| word.include?(vowel) }\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n\
    \  word\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    index\
    \ = word.index(vowel)\n    if index > 0 && word[index-1] == vowel\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word = word.downcase\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  ", "  vowels\
    \ = %w(a e i o u)\n  consonants = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, i|\n    next if char == \" \"\n    next if vowels.include?(char)\n\
    \    next if consonants.include?(char)\n    next if consonants.include?(word[(i+1)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-1)..-1].downcase)\n    next if consonants.include?(word[(i+2)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-2)..-1].downcase)\n    next if consonants.include?(word[(i+3)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-3)..-1].downcase)\n    next if consonants.include?(word[(i+4)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-4)..-1].downcase)\n    next if consonants.include?(word[(i+5)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-5)..-1].downcase)\n    next if consonants.include?(word[(i+6)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-6)..-1].downcase)\n    next if consonants.include?(word[(i+7)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-7)..-1].downcase)\n    next if consonants.include?(word[(i+8)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-8)..-1].downcase)\n    next if consonants.include?(word[(i+9)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-9)..-1].downcase)\n    next if consonants.include?(word[(i+10)..-1].downcase)\n\
    \    next if consonants.include?(word[(i-10)..-1].downcase)\n", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index\
    \ != nil\n      return vowel if index > word.size - 2\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend", "  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\"\
    )\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n \
    \ word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\"\
    )\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n \
    \ word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\"\
    )\n  word = word.gsub(/[aeiou]/, \"\")\n", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u y o i u y a e i o u y a e i o u y a e i o u y a e i o u y a e\
    \ i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o\
    \ u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y\
    \ a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e\
    \ i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o\
    \ u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y\
    \ a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e\
    \ i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o\
    \ u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y\
    \ a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e\
    \ i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o\
    \ u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y\
    \ a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e i o u y a e ",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_positions\
    \ = []\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  ",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    index\
    \ = word.index(vowel)\n    if index != nil\n      break\n    end\n  end\n  return\
    \ \"\" if index == nil\n  index = index + 1\n  while index != nil\n    if word[index]\
    \ == vowel\n      return vowel\n    end\n    index = index + 1\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos > 0 and vowel_pos\
    \ < word.length - 1\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n     \
    \ return vowel\n    end\n  end\n  return \"\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
