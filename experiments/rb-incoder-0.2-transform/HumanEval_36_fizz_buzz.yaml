name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n\
  # 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  n.to_s.split(\"\").each do |i|\n    if i.to_i.modulo(11).zero? ||\
    \ i.to_i.modulo(13).zero?\n      puts i.to_i.to_s.size % 3 == 0 ? i.to_i.to_s.size\
    \ : i.to_i.to_s.size + 1\n    end\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    i.to_i.times { |j| return j if i.to_i % 11 == 0 or i.to_i % 13 == 0\
    \ }\n  end\n  0\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution,\
    \ but I wonder why you used `to_i` instead of `to_s`?\n<|/ c |>\n<| c |>\nI used\
    \ `to_i` because I thought it would be more efficient to convert a string to a\
    \ number than to convert a number to an integer.\n<|/ c |>\n<| c |>\nI see. Thanks\
    \ for the explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each do |digit|\n    if digit == \"7\" || digit == \"7\"\n      0\n    elsif\
    \ digit == \"8\" || digit == \"8\"\n      1\n    elsif digit == \"9\" || digit\
    \ == \"9\"\n      2\n    elsif digit == \"11\" || digit == \"11\"\n      3\n \
    \   elsif digit == \"13\" || digit == \"13\"\n      4\n    else\n      5\n   \
    \ end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\n`fizz_buzz.call(79)`\
    \ returns `nil` instead of `3`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I fixed it.\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    elsif i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n    elsif\
    \ i.to_s.include?(\"13\")\n      puts i.to_s.count(\"13\")\n    else\n      puts\
    \ i.to_s.count(\"0\")\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each do |digit|\n    if digit == \"7\" || digit ==\
    \ \"7\"\n      0\n    elsif digit == \"8\" || digit == \"8\"\n      1\n    elsif\
    \ digit == \"9\" || digit == \"9\"\n      2\n    elsif digit == \"11\" || digit\
    \ == \"11\"\n      3\n    elsif digit == \"13\" || digit == \"13\"\n      4\n\
    \    elsif digit == \"14\" || digit == \"14\"\n      5\n    elsif digit == \"\
    15\" || digit == \"15\"\n      6\n    elsif digit == \"16\" || digit == \"16\"\
    \n      7\n    elsif digit == \"17\" || digit == \"17\"\n      8\n    elsif digit\
    \ == \"18\" || digit == \"18\"\n      9\n    elsif digit == \"19\" || digit ==\
    \ \"19\"\n      10\n    elsif digit == \"20\" || digit == \"20\"\n      11\n \
    \   elsif digit == \"21\" || digit == \"21\"\n      12\n    elsif digit == \"\
    22\" || digit == \"22\"\n      13\n    elsif digit == \"23\" || digit == \"23\"\
    \n      14\n    elsif digit == \"24\" || digit == \"24\"\n      15\n    elsif\
    \ digit == \"25\" || digit == \"25\"\n      16\n    elsif digit == \"26\" || digit\
    \ == \"26\"\n      17\n    elsif digit == \"27\" || digit == \"27\"\n      18\n\
    \    elsif digit == \"28\" || digit == \"28\"\n      19\n    elsif digit == \"\
    29\" || digit == \"29\"\n      20\n    elsif digit == \"30\" || digit == \"30\"\
    \n      21\n    elsif digit == \"31\" || digit == \"31\"\n      22\n    elsif\
    \ digit == \"32\" || digit == \"32\"\n      23\n    elsif digit == \"33\" || digit\
    \ == \"33\"\n      24\n    elsif digit == \"34\" || digit == \"34\"\n      25\n\
    \    elsif digit == \"35\" || digit == \"35\"\n      26\n    elsif digit == \"\
    36\" || digit == \"36\"\n      27\n    elsif digit == \"37\" || digit == \"37\"\
    \n      28\n    elsif digit == \"38\" || digit == \"38\"\n      29\n    elsif\
    \ digit == \"39\" || digit == \"39\"\n      30\n    elsif digit == \"40\" || digit ",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n\
    \      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_i % 11 == 0 and i.to_i % 13 == 0\n      puts i.to_i\n    elsif i.to_i\
    \ % 11 == 0\n      puts i.to_i + \"11\"\n    elsif i.to_i % 13 == 0\n      puts\
    \ i.to_i + \"13\"\n    else\n      puts i.to_i\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| c |>\n\
    No problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each do |digit|\n    digit = digit.to_i\n    if digit % 11 == 0 || digit %\
    \ 13 == 0\n      puts digit if digit % 11 == 0 && digit % 13 == 0\n    end\n \
    \ end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nThanks for the answer.\
    \ I'm still trying to wrap my head around how this works. I understand that `fizz_buzz.call(50)`\
    \ returns 0, but how does `fizz_buzz.call(78)` return 2? I understand that `fizz_buzz.call(78)`\
    \ returns `2` because `78 % 11 == 0` and `78 % 13 == 0`, but how does `fizz_buzz.call(79)`\
    \ return 3? I understand that `fizz_buzz.call(79)` returns `3` because `79 % 11\
    \ == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)` return 3? I understand\
    \ that `fizz_buzz.call(79)` returns `3` because `79 % 11 == 0` and `79 % 13 ==\
    \ 0`, but how does `fizz_buzz.call(79)` return 3? I understand that `fizz_buzz.call(79)`\
    \ returns `3` because `79 % 11 == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)`\
    \ return 3? I understand that `fizz_buzz.call(79)` returns `3` because `79 % 11\
    \ == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)` return 3? I understand\
    \ that `fizz_buzz.call(79)` returns `3` because `79 % 11 == 0` and `79 % 13 ==\
    \ 0`, but how does `fizz_buzz.call(79)` return 3? I understand that `fizz_buzz.call(79)`\
    \ returns `3` because `79 % 11 == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)`\
    \ return 3? I understand that `fizz_buzz.call(79)` returns `3` because `79 % 11\
    \ == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)` return 3? I understand\
    \ that `fizz_buzz.call(79)` returns `3` because `79 % 11 == 0` and `79 % 13 ==\
    \ 0`, but how does `fizz_", "  n.to_s.split('').select { |i| i.to_i % 11 == 0\
    \ || i.to_i % 13 == 0 }.count('7')\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum\
    \ + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\" || digit == \"11\"\
    \ || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\")\n      return 0\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\")\n      return 1\n   \
    \ elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\")\n      return 2\n   \
    \ elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n      return 3\n   \
    \ elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return 4\n \
    \   elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    14\")\n      return 5\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"15\")\n      return 6\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"16\")\n      return 7\n\
    \    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    17\")\n      return 8\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"18\")\n      return 9\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"19\")\n      return 10\n\
    \    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    20\")\n      return 11\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"21\")\n      return 12\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"22\")\n      return 13\n\
    \    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    23\")\n      return 14\n    el", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      return 0 if i.to_s.include?(\"7\")\n    elsif i.to_s.include?(\"8\"\
    )\n      return 1 if i.to_s.include?(\"8\")\n    elsif i.to_s.include?(\"9\")\n\
    \      return 2 if i.to_s.include?(\"9\")\n    elsif i.to_s.include?(\"11\")\n\
    \      return 3 if i.to_s.include?(\"11\")\n    elsif i.to_s.include?(\"13\")\n\
    \      return 4 if i.to_s.include?(\"13\")\n    end\n  end\n  return n\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each do |digit|\n    if digit == \"7\" || digit == \"7\"\n      0\n    elsif\
    \ digit == \"8\" || digit == \"8\"\n      1\n    elsif digit == \"9\" || digit\
    \ == \"9\"\n      2\n    elsif digit == \"11\" || digit == \"11\"\n      3\n \
    \   elsif digit == \"13\" || digit == \"13\"\n      4\n    elsif digit == \"14\"\
    \ || digit == \"14\"\n      5\n    elsif digit == \"15\" || digit == \"15\"\n\
    \      6\n    elsif digit == \"16\" || digit == \"16\"\n      7\n    elsif digit\
    \ == \"17\" || digit == \"17\"\n      8\n    elsif digit == \"18\" || digit ==\
    \ \"18\"\n      9\n    elsif digit == \"19\" || digit == \"19\"\n      10\n  \
    \  elsif digit == \"20\" || digit == \"20\"\n      11\n    elsif digit == \"21\"\
    \ || digit == \"21\"\n      12\n    elsif digit == \"22\" || digit == \"22\"\n\
    \      13\n    elsif digit == \"23\" || digit == \"23\"\n      14\n    elsif digit\
    \ == \"24\" || digit == \"24\"\n      15\n    elsif digit == \"25\" || digit ==\
    \ \"25\"\n      16\n    elsif digit == \"26\" || digit == \"26\"\n      17\n \
    \   elsif digit == \"27\" || digit == \"27\"\n      18\n    elsif digit == \"\
    28\" || digit == \"28\"\n      19\n    elsif digit == \"29\" || digit == \"29\"\
    \n      20\n    elsif digit == \"30\" || digit == \"30\"\n      21\n    elsif\
    \ digit == \"31\" || digit == \"31\"\n      22\n    elsif digit == \"32\" || digit\
    \ == \"32\"\n      23\n    elsif digit == \"33\" || digit == \"33\"\n      24\n\
    \    elsif digit == \"34\" || digit == \"34\"\n      25\n    elsif digit == \"\
    35\" || digit == \"35\"\n      26\n    elsif digit == \"36\" || digit == \"36\"\
    \n      27\n    elsif digit == \"37\" || digit == \"37\"\n      28\n    elsif\
    \ digit == \"38\" || digit == \"38\"\n      29\n    elsif digit == \"39\" || digit\
    \ == \"39\"\n      30\n    elsif digit == \"40\" || digit ", "  n.to_s.split('').each_with_index.select\
    \ { |x, i| x.to_i == 7 }.count\nend", "  n.to_s.split(\"\").each_with_index do\
    \ |digit, index|\n    if digit == \"7\" && index % 11 == 0 || digit == \"7\" &&\
    \ index % 13 == 0\n      0\n    elsif digit == \"7\" && index % 11 != 0 || digit\
    \ == \"7\" && index % 13 != 0\n      1\n    elsif digit == \"7\" && index % 11\
    \ == 0 && index % 13 == 0\n      2\n    elsif digit == \"7\" && index % 11 !=\
    \ 0 && index % 13 != 0\n      3\n    elsif digit == \"7\" && index % 11 == 0 &&\
    \ index % 13 != 0\n      4\n    elsif digit == \"7\" && index % 11 != 0 && index\
    \ % 13 == 0\n      5\n    elsif digit == \"7\" && index % 11 != 0 && index % 13\
    \ != 0\n      6\n    elsif digit == \"7\" && index % 11 == 0 && index % 13 ==\
    \ 0\n      7\n    elsif digit == \"7\" && index % 11 != 0 && index % 13 != 0\n\
    \      8\n    elsif digit == \"7\" && index % 11 == 0 && index % 13 != 0\n   \
    \   9\n    elsif digit == \"7\" && index % 11 != 0 && index % 13 == 0\n      10\n\
    \    elsif digit == \"7\" && index % 11 != 0 && index % 13 != 0\n      11\n  \
    \  elsif digit == \"7\" && index % 11 == 0 && index % 13 == 0\n      12\n    elsif\
    \ digit == \"7\" && index % 11 != 0 && index % 13 != 0\n      13\n    else\n \
    \     digit.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, i|\n    digit.to_i.zero? && digit % 11 == 0 ? 0 : (digit.to_i % 13\
    \ == 0 ? 2 : 1)\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i\
    \ % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    i.to_i.even? ? puts \"#{i}\" : puts\
    \ \"#{i} #{i.to_s.split(\"\").count { |j| j == \"7\" }}\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return 0\n \
    \   elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\")\n      return 1\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\"\
    )\n      return 2\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n\
    \      return 3\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n\
    \      return 4\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\
    \ && i.to_s.include?(\"14\")\n      return 5\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"15\")\n      return 6\n    elsif\
    \ i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"16\"\
    )\n      return 7\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\"\
    ) && i.to_s.include?(\"17\")\n      return 8\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"18\")\n      return 9\n    elsif\
    \ i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"19\"\
    )\n      return 10\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\"\
    ) && i.to_s.include?(\"20\")\n      return 11\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"21\")\n      return 12\n   \
    \ elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    22\")\n      return 13\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"23\")\n      return 14\n    el", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return i.to_s.count(\"\
    7\")\n    end\n  end\n  0\nend", "  n.to_s.split(\"\").each do |i|\n    next if\
    \ i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"11\")\n    next if i.to_s.include?(\"13\"\
    )\n    puts i.to_s.to_i\n  end\nend", "  return 0 if n < 10 else 1 if n % 11 ==\
    \ 0 or n % 13 == 0 else 2\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"11\")\n    \
    \  puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"13\")\n      puts i.to_s.count(\"\
    13\")\n    else\n      puts i.to_s.count(\"0\")\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby,fizzbuzz |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11).zero? and i.to_i.modulo(13).zero?\n\
    \      puts i.to_i\n    end\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer! I understand your code, but I wanted to know if there\
    \ is a way to do it without using loops. I edited my question to make it more\
    \ clear.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that doesn't\
    \ use loops.\n<|/ c |>\n<| c |>\nThanks for your answer! I understand your code,\
    \ but I wanted to know if there is a way to do it without using loops. I edited\
    \ my question to make it more clear.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution that doesn't use loops.\n<|/ c |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\"\
    )\n      return 0 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 1 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 2 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 3 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 4 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n   \
    \   return 5 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 6 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 7 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 8 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 9 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n   \
    \   return 10 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 11 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 12 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 13 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 14 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n  \
    \    return 15 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 16 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 17 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 18 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 19 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n  \
    \    return 20 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 21 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 22 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 23 if i.to_s.include?(\"", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.to_i == 7\n    next if i.to_s.to_i == 11 ||\
    \ i.to_s.to_i == 13\n    puts i.to_s.to_i\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| c |>\nThanks so much for the explanation! I really appreciate it!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\").each do |digit|\n   \
    \ if digit == \"7\" || digit == \"7\"\n      0\n    elsif digit == \"8\" || digit\
    \ == \"8\"\n      1\n    elsif digit == \"9\" || digit == \"9\"\n      2\n   \
    \ elsif digit == \"11\" || digit == \"11\"\n      3\n    elsif digit == \"13\"\
    \ || digit == \"13\"\n      4\n    else\n      5\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    elsif i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n    elsif\
    \ i.to_s.include?(\"13\")\n      puts i.to_s.count(\"13\")\n    else\n      puts\
    \ i.to_s.count(\"0\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i == 7 && i.to_s.include?(\"\
    11\") || i.to_s.include?(\"13\")\n      puts i.to_s.count(\"7\")\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"\
    11\") && i.to_s.include?(\"12\") && i.to_s.include?(\"13\")\n      return 0\n\
    \    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"\
    12\")\n      return 1\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"\
    11\")\n      return 2\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"10\")\n      return 3\n  \
    \  elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"\
    12\") && i.to_s.include?(\"13\")\n      return 4\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"12\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"14\")\n      return 5\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"12\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"14\") && i.to_s.include?(\"15\")\n      return 6\n\
    \    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && ", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11) == 0\n      puts i.to_i.to_s.rjust(3,\"\
    0\")\n    elsif i.to_i.modulo(13) == 0\n      puts i.to_i.to_s.rjust(4,\"0\")\n\
    \    else\n      puts i.to_i.to_s\n    end\n  end\nend", "  n.to_s.split('').select\
    \ { |i| i.to_i % 11 == 0 || i.to_i % 13 == 0 }.count('7')\nend", "  n.to_s.split(\"\
    \").each do |digit|\n    next if digit == \"7\"\n    next if digit == \"9\"\n\
    \    next if digit == \"11\"\n    next if digit == \"13\"\n    puts digit if n\
    \ % 10 == digit\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i\
    \ % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n\
    \    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n\
    \    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next\
    \ if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"\
    6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n\
    \    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next\
    \ if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"\
    3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n\
    \    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next\
    \ if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n\
    \      puts i.to_i\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n\
    <| c |>\nThanks so much for the help! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nNo problem! I added a more concise version of the fizzbuzz method in the\
    \ answer. Hope it helps!\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\"\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split('').select\
    \ { |i| i.to_i % 11 == 0 || i.to_i % 13 == 0 }.count('7')\nend", "  n.to_s.split(\"\
    \").each do |i|\n    i.to_i.even? ? puts \"#{i}\" : puts \"#{i},\"\n  end\nend",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"\
    7\")\n    elsif i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n   \
    \ elsif i.to_s.include?(\"13\")\n      puts i.to_s.count(\"13\")\n    else\n \
    \     puts i.to_s.count(\"0\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThanks so much! I appreciate your help.\n<|/ c |>\n<| c |>\nYou're\
    \ welcome. I'm glad you found it helpful.\n<|/ c |>\n<| a |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 and i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i.even?\
    \ && i.to_i.odd? && (i % 11 == 0 || i % 13 == 0)\n      puts i.to_s\n    end\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm\
    \ still a beginner at Ruby, so I appreciate your help. I understand that my code\
    \ was very inefficient and that there are much better ways to do it, but I wanted\
    \ to understand why my code wasn't working. Thanks again.\n<|/ c |>\n<| c |>\n\
    I added a more efficient solution that doesn't require any loops.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe reason your code doesn't work is because you're trying to\
    \ call a method on an integer instead of a string. \n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.even? && i.to_i.odd? && (i.to_i % 11 == 0 || i.to_i\
    \ % 13 == 0)\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    if i.to_i % 11 == 0 or i.to_i % 13 == 0\n      puts i.to_i\n   \
    \ end\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this answer helped you, please\
    \ consider marking it as accepted (click the check mark next to the answer).\n\
    <|/ c |>\n<| c |>\nI did but I don't have enough reputation yet to upvote it :(\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    i.to_i.even? ? puts \"#{i.to_i}\" : puts \"#{i.to_i}z\"\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do it without using an if statement?\n<|/\
    \ c |>\n<| c |>\nI added a solution without an if statement.\n<|/ c |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i\
    \ % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\"\
    )\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"11\")\n \
    \   next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum\
    \ + 1 if digit == 7\n  end\nend", "  n.to_s.split(\"\").each do |digit|\n    if\
    \ digit == \"7\" || digit == \"7\"\n      return 0\n    elsif digit == \"3\" ||\
    \ digit == \"3\"\n      return 1\n    elsif digit == \"5\" || digit == \"5\"\n\
    \      return 2\n    elsif digit == \"9\" || digit == \"9\"\n      return 3\n\
    \    elsif digit == \"11\" || digit == \"11\"\n      return 4\n    elsif digit\
    \ == \"13\" || digit == \"13\"\n      return 5\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11) == 0 || i.to_i.modulo(13) == 0\n   \
    \   puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n   \
    \ if i.to_i.modulo(11).zero? || i.to_i.modulo(13).zero?\n      puts i.to_i.modulo(11).zero?\
    \ ? \"0\" : \"1\"\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n \
    \   if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i.to_s == 7\n      return\
    \ i.to_i\n    end\n  end\n  return 0\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_i % 11 == 0 or i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\n\
    end\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_i.modulo(11).zero? || i.to_i.modulo(13).zero?\n\
    \    puts i.to_i.modulo(11).zero? ? \"0\" : i.to_i.modulo(13).zero? ? \"3\" :\
    \ \"5\"\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.include?(\"\
    7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n\
    \    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next\
    \ if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"\
    4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n\
    \    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next\
    \ if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"\
    1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n\
    \    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next\
    \ if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n\
    \    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?", "  n.to_s.split(\"\").each do |i|\n    if\
    \ i.to_s.include?(\"7\") && i.to_s.include?(\"9\") && i.to_s.include?(\"11\")\
    \ && i.to_s.include?(\"13\")\n      return 0\n    elsif i.to_s.include?(\"7\"\
    ) && i.to_s.include?(\"9\") && i.to_s.include?(\"11\")\n      return 1\n    elsif\
    \ i.to_s.include?(\"7\") && i.to_s.include?(\"9\") && i.to_s.include?(\"13\")\n\
    \      return 2\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n\
    \      return 3\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"11\")\n\
    \      return 4\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"13\")\n\
    \      return 5\n    elsif i.to_s.include?(\"7\")\n      return 6\n    elsif i.to_s.include?(\"\
    9\")\n      return 7\n    elsif i.to_s.include?(\"11\")\n      return 8\n    elsif\
    \ i.to_s.include?(\"13\")\n      return 9\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i % 11 == 0 && i % 13 == 0\n      puts i\n    elsif i\
    \ % 11 == 0\n      puts \"#{i}th\"\n    elsif i % 13 == 0\n      puts \"#{i.to_s.rjust(2,\
    \ '0')}th\"\n    else\n      puts i\n    end\n  end\nend", "  n.to_s.split(\"\"\
    ).each_with_index.inject(0) do |sum, digit|\n    sum + case digit\n      when\
    \ \"7\" then 1\n      when \"8\" then 2\n      when \"9\" then 3\n      when \"\
    0\" then 4\n      else 5\n    end\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    next if i.to_s.to_i == 7\n    next if i.to_s.to_i == 11\n    next if\
    \ i.to_s.to_i == 13\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\")\n    elsif\
    \ i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"\
    13\")\n      puts i.to_s.count(\"13\")\n    else\n      puts i.to_s\n    end\n\
    \  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i == 7 && i.to_s.include?(\"\
    11\") || i.to_s.include?(\"13\")\n      puts i.to_s.count(\"7\")\n      break\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 ==\
    \ 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nI like your\
    \ solution, but I wonder if there's a way to do it without using an if statement?\n\
    <|/ c |>\n<| c |>\nI added a solution without an if statement\n<|/ c |>\n<| c\
    \ |>\nI like your solution, but I wonder if there's a way to do it without using\
    \ an if statement?\n<|/ c |>\n<| c |>\nI added a solution without an if statement\n\
    <|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  return 0 if n < 10 && n % 11\
    \ == 0 || n < 10 && n % 13 == 0 else 1 if n < 10 && n % 11 != 0 || n < 10 && n\
    \ % 13 != 0 else 2\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11\
    \ == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
