name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n\
  # 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  n.to_s.split(\"\").each do |i|\n    if i.to_i.modulo(11).zero? ||\
    \ i.to_i.modulo(13).zero?\n      puts i.to_i.to_s.size % 3 == 0 ? i.to_i.to_s.size\
    \ : i.to_i.to_s.size + 1\n    end\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    i.to_i.times { |j| return j if i.to_i % 11 == 0 or i.to_i % 13 == 0\
    \ }\n  end\n  0\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution,\
    \ but I wonder why you used `to_i` instead of `to_s`?\n<|/ c |>\n<| c |>\nI used\
    \ `to_i` because I thought it would be more efficient to convert a string to a\
    \ number than to convert a number to an integer.\n<|/ c |>\n<| c |>\nI see. Thanks\
    \ for the explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each do |digit|\n    if digit == \"7\" || digit == \"7\"\n      0\n    elsif\
    \ digit == \"8\" || digit == \"8\"\n      1\n    elsif digit == \"9\" || digit\
    \ == \"9\"\n      2\n    elsif digit == \"11\" || digit == \"11\"\n      3\n \
    \   elsif digit == \"13\" || digit == \"13\"\n      4\n    else\n      5\n   \
    \ end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\n`fizz_buzz.call(79)`\
    \ returns `nil` instead of `3`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I fixed it.\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    elsif i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n    elsif\
    \ i.to_s.include?(\"13\")\n      puts i.to_s.count(\"13\")\n    else\n      puts\
    \ i.to_s.count(\"0\")\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each do |digit|\n    if digit == \"7\" || digit ==\
    \ \"7\"\n      0\n    elsif digit == \"8\" || digit == \"8\"\n      1\n    elsif\
    \ digit == \"9\" || digit == \"9\"\n      2\n    elsif digit == \"11\" || digit\
    \ == \"11\"\n      3\n    elsif digit == \"13\" || digit == \"13\"\n      4\n\
    \    elsif digit == \"14\" || digit == \"14\"\n      5\n    elsif digit == \"\
    15\" || digit == \"15\"\n      6\n    elsif digit == \"16\" || digit == \"16\"\
    \n      7\n    elsif digit == \"17\" || digit == \"17\"\n      8\n    elsif digit\
    \ == \"18\" || digit == \"18\"\n      9\n    elsif digit == \"19\" || digit ==\
    \ \"19\"\n      10\n    elsif digit == \"20\" || digit == \"20\"\n      11\n \
    \   elsif digit == \"21\" || digit == \"21\"\n      12\n    elsif digit == \"\
    22\" || digit == \"22\"\n      13\n    elsif digit == \"23\" || digit == \"23\"\
    \n      14\n    elsif digit == \"24\" || digit == \"24\"\n      15\n    elsif\
    \ digit == \"25\" || digit == \"25\"\n      16\n    elsif digit == \"26\" || digit\
    \ == \"26\"\n      17\n    elsif digit == \"27\" || digit == \"27\"\n      18\n\
    \    elsif digit == \"28\" || digit == \"28\"\n      19\n    elsif digit == \"\
    29\" || digit == \"29\"\n      20\n    elsif digit == \"30\" || digit == \"30\"\
    \n      21\n    elsif digit == \"31\" || digit == \"31\"\n      22\n    elsif\
    \ digit == \"32\" || digit == \"32\"\n      23\n    elsif digit == \"33\" || digit\
    \ == \"33\"\n      24\n    elsif digit == \"34\" || digit == \"34\"\n      25\n\
    \    elsif digit == \"35\" || digit == \"35\"\n      26\n    elsif digit == \"\
    36\" || digit == \"36\"\n      27\n    elsif digit == \"37\" || digit == \"37\"\
    \n      28\n    elsif digit == \"38\" || digit == \"38\"\n      29\n    elsif\
    \ digit == \"39\" || digit == \"39\"\n      30\n    elsif digit == \"40\" || digit ",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n\
    \      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_i % 11 == 0 and i.to_i % 13 == 0\n      puts i.to_i\n    elsif i.to_i\
    \ % 11 == 0\n      puts i.to_i + \"11\"\n    elsif i.to_i % 13 == 0\n      puts\
    \ i.to_i + \"13\"\n    else\n      puts i.to_i\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| c |>\n\
    No problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each do |digit|\n    digit = digit.to_i\n    if digit % 11 == 0 || digit %\
    \ 13 == 0\n      puts digit if digit % 11 == 0 && digit % 13 == 0\n    end\n \
    \ end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nThanks for the answer.\
    \ I'm still trying to wrap my head around how this works. I understand that `fizz_buzz.call(50)`\
    \ returns 0, but how does `fizz_buzz.call(78)` return 2? I understand that `fizz_buzz.call(78)`\
    \ returns `2` because `78 % 11 == 0` and `78 % 13 == 0`, but how does `fizz_buzz.call(79)`\
    \ return 3? I understand that `fizz_buzz.call(79)` returns `3` because `79 % 11\
    \ == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)` return 3? I understand\
    \ that `fizz_buzz.call(79)` returns `3` because `79 % 11 == 0` and `79 % 13 ==\
    \ 0`, but how does `fizz_buzz.call(79)` return 3? I understand that `fizz_buzz.call(79)`\
    \ returns `3` because `79 % 11 == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)`\
    \ return 3? I understand that `fizz_buzz.call(79)` returns `3` because `79 % 11\
    \ == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)` return 3? I understand\
    \ that `fizz_buzz.call(79)` returns `3` because `79 % 11 == 0` and `79 % 13 ==\
    \ 0`, but how does `fizz_buzz.call(79)` return 3? I understand that `fizz_buzz.call(79)`\
    \ returns `3` because `79 % 11 == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)`\
    \ return 3? I understand that `fizz_buzz.call(79)` returns `3` because `79 % 11\
    \ == 0` and `79 % 13 == 0`, but how does `fizz_buzz.call(79)` return 3? I understand\
    \ that `fizz_buzz.call(79)` returns `3` because `79 % 11 == 0` and `79 % 13 ==\
    \ 0`, but how does `fizz_", "  n.to_s.split('').select { |i| i.to_i % 11 == 0\
    \ || i.to_i % 13 == 0 }.count('7')\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum\
    \ + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\" || digit == \"11\"\
    \ || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\")\n      return 0\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\")\n      return 1\n   \
    \ elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\")\n      return 2\n   \
    \ elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n      return 3\n   \
    \ elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return 4\n \
    \   elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    14\")\n      return 5\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"15\")\n      return 6\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"16\")\n      return 7\n\
    \    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    17\")\n      return 8\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"18\")\n      return 9\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"19\")\n      return 10\n\
    \    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    20\")\n      return 11\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"21\")\n      return 12\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"22\")\n      return 13\n\
    \    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    23\")\n      return 14\n    el", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      return 0 if i.to_s.include?(\"7\")\n    elsif i.to_s.include?(\"8\"\
    )\n      return 1 if i.to_s.include?(\"8\")\n    elsif i.to_s.include?(\"9\")\n\
    \      return 2 if i.to_s.include?(\"9\")\n    elsif i.to_s.include?(\"11\")\n\
    \      return 3 if i.to_s.include?(\"11\")\n    elsif i.to_s.include?(\"13\")\n\
    \      return 4 if i.to_s.include?(\"13\")\n    end\n  end\n  return n\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each do |digit|\n    if digit == \"7\" || digit == \"7\"\n      0\n    elsif\
    \ digit == \"8\" || digit == \"8\"\n      1\n    elsif digit == \"9\" || digit\
    \ == \"9\"\n      2\n    elsif digit == \"11\" || digit == \"11\"\n      3\n \
    \   elsif digit == \"13\" || digit == \"13\"\n      4\n    elsif digit == \"14\"\
    \ || digit == \"14\"\n      5\n    elsif digit == \"15\" || digit == \"15\"\n\
    \      6\n    elsif digit == \"16\" || digit == \"16\"\n      7\n    elsif digit\
    \ == \"17\" || digit == \"17\"\n      8\n    elsif digit == \"18\" || digit ==\
    \ \"18\"\n      9\n    elsif digit == \"19\" || digit == \"19\"\n      10\n  \
    \  elsif digit == \"20\" || digit == \"20\"\n      11\n    elsif digit == \"21\"\
    \ || digit == \"21\"\n      12\n    elsif digit == \"22\" || digit == \"22\"\n\
    \      13\n    elsif digit == \"23\" || digit == \"23\"\n      14\n    elsif digit\
    \ == \"24\" || digit == \"24\"\n      15\n    elsif digit == \"25\" || digit ==\
    \ \"25\"\n      16\n    elsif digit == \"26\" || digit == \"26\"\n      17\n \
    \   elsif digit == \"27\" || digit == \"27\"\n      18\n    elsif digit == \"\
    28\" || digit == \"28\"\n      19\n    elsif digit == \"29\" || digit == \"29\"\
    \n      20\n    elsif digit == \"30\" || digit == \"30\"\n      21\n    elsif\
    \ digit == \"31\" || digit == \"31\"\n      22\n    elsif digit == \"32\" || digit\
    \ == \"32\"\n      23\n    elsif digit == \"33\" || digit == \"33\"\n      24\n\
    \    elsif digit == \"34\" || digit == \"34\"\n      25\n    elsif digit == \"\
    35\" || digit == \"35\"\n      26\n    elsif digit == \"36\" || digit == \"36\"\
    \n      27\n    elsif digit == \"37\" || digit == \"37\"\n      28\n    elsif\
    \ digit == \"38\" || digit == \"38\"\n      29\n    elsif digit == \"39\" || digit\
    \ == \"39\"\n      30\n    elsif digit == \"40\" || digit ", "  n.to_s.split('').each_with_index.select\
    \ { |x, i| x.to_i == 7 }.count\nend", "  n.to_s.split(\"\").each_with_index do\
    \ |digit, index|\n    if digit == \"7\" && index % 11 == 0 || digit == \"7\" &&\
    \ index % 13 == 0\n      0\n    elsif digit == \"7\" && index % 11 != 0 || digit\
    \ == \"7\" && index % 13 != 0\n      1\n    elsif digit == \"7\" && index % 11\
    \ == 0 && index % 13 == 0\n      2\n    elsif digit == \"7\" && index % 11 !=\
    \ 0 && index % 13 != 0\n      3\n    elsif digit == \"7\" && index % 11 == 0 &&\
    \ index % 13 != 0\n      4\n    elsif digit == \"7\" && index % 11 != 0 && index\
    \ % 13 == 0\n      5\n    elsif digit == \"7\" && index % 11 != 0 && index % 13\
    \ != 0\n      6\n    elsif digit == \"7\" && index % 11 == 0 && index % 13 ==\
    \ 0\n      7\n    elsif digit == \"7\" && index % 11 != 0 && index % 13 != 0\n\
    \      8\n    elsif digit == \"7\" && index % 11 == 0 && index % 13 != 0\n   \
    \   9\n    elsif digit == \"7\" && index % 11 != 0 && index % 13 == 0\n      10\n\
    \    elsif digit == \"7\" && index % 11 != 0 && index % 13 != 0\n      11\n  \
    \  elsif digit == \"7\" && index % 11 == 0 && index % 13 == 0\n      12\n    elsif\
    \ digit == \"7\" && index % 11 != 0 && index % 13 != 0\n      13\n    else\n \
    \     digit.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index\
    \ do |digit, i|\n    digit.to_i.zero? && digit % 11 == 0 ? 0 : (digit.to_i % 13\
    \ == 0 ? 2 : 1)\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i\
    \ % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    i.to_i.even? ? puts \"#{i}\" : puts\
    \ \"#{i} #{i.to_s.split(\"\").count { |j| j == \"7\" }}\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return 0\n \
    \   elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\")\n      return 1\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\"\
    )\n      return 2\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n\
    \      return 3\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n\
    \      return 4\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\
    \ && i.to_s.include?(\"14\")\n      return 5\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"15\")\n      return 6\n    elsif\
    \ i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"16\"\
    )\n      return 7\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\"\
    ) && i.to_s.include?(\"17\")\n      return 8\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"18\")\n      return 9\n    elsif\
    \ i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"19\"\
    )\n      return 10\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\"\
    ) && i.to_s.include?(\"20\")\n      return 11\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"21\")\n      return 12\n   \
    \ elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    22\")\n      return 13\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"23\")\n      return 14\n    el", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return i.to_s.count(\"\
    7\")\n    end\n  end\n  0\nend", "  n.to_s.split(\"\").each do |i|\n    next if\
    \ i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"11\")\n    next if i.to_s.include?(\"13\"\
    )\n    puts i.to_s.to_i\n  end\nend", "  return 0 if n < 10 else 1 if n % 11 ==\
    \ 0 or n % 13 == 0 else 2\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"11\")\n    \
    \  puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"13\")\n      puts i.to_s.count(\"\
    13\")\n    else\n      puts i.to_s.count(\"0\")\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby,fizzbuzz |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11).zero? and i.to_i.modulo(13).zero?\n\
    \      puts i.to_i\n    end\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer! I understand your code, but I wanted to know if there\
    \ is a way to do it without using loops. I edited my question to make it more\
    \ clear.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that doesn't\
    \ use loops.\n<|/ c |>\n<| c |>\nThanks for your answer! I understand your code,\
    \ but I wanted to know if there is a way to do it without using loops. I edited\
    \ my question to make it more clear.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution that doesn't use loops.\n<|/ c |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\"\
    )\n      return 0 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 1 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 2 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 3 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 4 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n   \
    \   return 5 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 6 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 7 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 8 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 9 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n   \
    \   return 10 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 11 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 12 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 13 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 14 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n  \
    \    return 15 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 16 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 17 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 18 if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    7\")\n      return 19 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n  \
    \    return 20 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return\
    \ 21 if i.to_s.include?(\"7\") && i.to_s.include?(\"7\")\n      return 22 if i.to_s.include?(\"\
    7\") && i.to_s.include?(\"7\")\n      return 23 if i.to_s.include?(\"", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.to_i == 7\n    next if i.to_s.to_i == 11 ||\
    \ i.to_s.to_i == 13\n    puts i.to_s.to_i\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| c |>\nThanks so much for the explanation! I really appreciate it!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\").each do |digit|\n   \
    \ if digit == \"7\" || digit == \"7\"\n      0\n    elsif digit == \"8\" || digit\
    \ == \"8\"\n      1\n    elsif digit == \"9\" || digit == \"9\"\n      2\n   \
    \ elsif digit == \"11\" || digit == \"11\"\n      3\n    elsif digit == \"13\"\
    \ || digit == \"13\"\n      4\n    else\n      5\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    elsif i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n    elsif\
    \ i.to_s.include?(\"13\")\n      puts i.to_s.count(\"13\")\n    else\n      puts\
    \ i.to_s.count(\"0\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i == 7 && i.to_s.include?(\"\
    11\") || i.to_s.include?(\"13\")\n      puts i.to_s.count(\"7\")\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"\
    11\") && i.to_s.include?(\"12\") && i.to_s.include?(\"13\")\n      return 0\n\
    \    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"\
    12\")\n      return 1\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"\
    11\")\n      return 2\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"10\")\n      return 3\n  \
    \  elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"\
    12\") && i.to_s.include?(\"13\")\n      return 4\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"12\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"14\")\n      return 5\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"\
    10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"12\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"14\") && i.to_s.include?(\"15\")\n      return 6\n\
    \    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"10\") && ", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11) == 0\n      puts i.to_i.to_s.rjust(3,\"\
    0\")\n    elsif i.to_i.modulo(13) == 0\n      puts i.to_i.to_s.rjust(4,\"0\")\n\
    \    else\n      puts i.to_i.to_s\n    end\n  end\nend", "  n.to_s.split('').select\
    \ { |i| i.to_i % 11 == 0 || i.to_i % 13 == 0 }.count('7')\nend", "  n.to_s.split(\"\
    \").each do |digit|\n    next if digit == \"7\"\n    next if digit == \"9\"\n\
    \    next if digit == \"11\"\n    next if digit == \"13\"\n    puts digit if n\
    \ % 10 == digit\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i\
    \ % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n\
    \    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n\
    \    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next\
    \ if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"\
    6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n\
    \    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next\
    \ if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"\
    3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n\
    \    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next\
    \ if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n\
    \      puts i.to_i\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n\
    <| c |>\nThanks so much for the help! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nNo problem! I added a more concise version of the fizzbuzz method in the\
    \ answer. Hope it helps!\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\"\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split('').select\
    \ { |i| i.to_i % 11 == 0 || i.to_i % 13 == 0 }.count('7')\nend", "  n.to_s.split(\"\
    \").each do |i|\n    i.to_i.even? ? puts \"#{i}\" : puts \"#{i},\"\n  end\nend",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"\
    7\")\n    elsif i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n   \
    \ elsif i.to_s.include?(\"13\")\n      puts i.to_s.count(\"13\")\n    else\n \
    \     puts i.to_s.count(\"0\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThanks so much! I appreciate your help.\n<|/ c |>\n<| c |>\nYou're\
    \ welcome. I'm glad you found it helpful.\n<|/ c |>\n<| a |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 and i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i.even?\
    \ && i.to_i.odd? && (i % 11 == 0 || i % 13 == 0)\n      puts i.to_s\n    end\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm\
    \ still a beginner at Ruby, so I appreciate your help. I understand that my code\
    \ was very inefficient and that there are much better ways to do it, but I wanted\
    \ to understand why my code wasn't working. Thanks again.\n<|/ c |>\n<| c |>\n\
    I added a more efficient solution that doesn't require any loops.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe reason your code doesn't work is because you're trying to\
    \ call a method on an integer instead of a string. \n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.even? && i.to_i.odd? && (i.to_i % 11 == 0 || i.to_i\
    \ % 13 == 0)\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    if i.to_i % 11 == 0 or i.to_i % 13 == 0\n      puts i.to_i\n   \
    \ end\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this answer helped you, please\
    \ consider marking it as accepted (click the check mark next to the answer).\n\
    <|/ c |>\n<| c |>\nI did but I don't have enough reputation yet to upvote it :(\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    i.to_i.even? ? puts \"#{i.to_i}\" : puts \"#{i.to_i}z\"\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do it without using an if statement?\n<|/\
    \ c |>\n<| c |>\nI added a solution without an if statement.\n<|/ c |>\n<| a tags=ruby,fizzbuzz\
    \ |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i\
    \ % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\"\
    )\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"11\")\n \
    \   next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum\
    \ + 1 if digit == 7\n  end\nend", "  n.to_s.split(\"\").each do |digit|\n    if\
    \ digit == \"7\" || digit == \"7\"\n      return 0\n    elsif digit == \"3\" ||\
    \ digit == \"3\"\n      return 1\n    elsif digit == \"5\" || digit == \"5\"\n\
    \      return 2\n    elsif digit == \"9\" || digit == \"9\"\n      return 3\n\
    \    elsif digit == \"11\" || digit == \"11\"\n      return 4\n    elsif digit\
    \ == \"13\" || digit == \"13\"\n      return 5\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11) == 0 || i.to_i.modulo(13) == 0\n   \
    \   puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n   \
    \ if i.to_i.modulo(11).zero? || i.to_i.modulo(13).zero?\n      puts i.to_i.modulo(11).zero?\
    \ ? \"0\" : \"1\"\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n \
    \   if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i.to_s == 7\n      return\
    \ i.to_i\n    end\n  end\n  return 0\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_i % 11 == 0 or i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\n\
    end\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_i.modulo(11).zero? || i.to_i.modulo(13).zero?\n\
    \    puts i.to_i.modulo(11).zero? ? \"0\" : i.to_i.modulo(13).zero? ? \"3\" :\
    \ \"5\"\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.include?(\"\
    7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n\
    \    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next\
    \ if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"\
    4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n\
    \    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next\
    \ if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"\
    1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n\
    \    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next\
    \ if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n\
    \    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?", "  n.to_s.split(\"\").each do |i|\n    if\
    \ i.to_s.include?(\"7\") && i.to_s.include?(\"9\") && i.to_s.include?(\"11\")\
    \ && i.to_s.include?(\"13\")\n      return 0\n    elsif i.to_s.include?(\"7\"\
    ) && i.to_s.include?(\"9\") && i.to_s.include?(\"11\")\n      return 1\n    elsif\
    \ i.to_s.include?(\"7\") && i.to_s.include?(\"9\") && i.to_s.include?(\"13\")\n\
    \      return 2\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n\
    \      return 3\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"11\")\n\
    \      return 4\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"13\")\n\
    \      return 5\n    elsif i.to_s.include?(\"7\")\n      return 6\n    elsif i.to_s.include?(\"\
    9\")\n      return 7\n    elsif i.to_s.include?(\"11\")\n      return 8\n    elsif\
    \ i.to_s.include?(\"13\")\n      return 9\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i % 11 == 0 && i % 13 == 0\n      puts i\n    elsif i\
    \ % 11 == 0\n      puts \"#{i}th\"\n    elsif i % 13 == 0\n      puts \"#{i.to_s.rjust(2,\
    \ '0')}th\"\n    else\n      puts i\n    end\n  end\nend", "  n.to_s.split(\"\"\
    ).each_with_index.inject(0) do |sum, digit|\n    sum + case digit\n      when\
    \ \"7\" then 1\n      when \"8\" then 2\n      when \"9\" then 3\n      when \"\
    0\" then 4\n      else 5\n    end\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    next if i.to_s.to_i == 7\n    next if i.to_s.to_i == 11\n    next if\
    \ i.to_s.to_i == 13\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\")\n    elsif\
    \ i.to_s.include?(\"11\")\n      puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"\
    13\")\n      puts i.to_s.count(\"13\")\n    else\n      puts i.to_s\n    end\n\
    \  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i == 7 && i.to_s.include?(\"\
    11\") || i.to_s.include?(\"13\")\n      puts i.to_s.count(\"7\")\n      break\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 ==\
    \ 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nI like your\
    \ solution, but I wonder if there's a way to do it without using an if statement?\n\
    <|/ c |>\n<| c |>\nI added a solution without an if statement\n<|/ c |>\n<| c\
    \ |>\nI like your solution, but I wonder if there's a way to do it without using\
    \ an if statement?\n<|/ c |>\n<| c |>\nI added a solution without an if statement\n\
    <|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  return 0 if n < 10 && n % 11\
    \ == 0 || n < 10 && n % 13 == 0 else 1 if n < 10 && n % 11 != 0 || n < 10 && n\
    \ % 13 != 0 else 2\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11\
    \ == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    i.to_i.times { |j| return j if i % 11 == 0 || i % 13 == 0\
    \ }\n  end\n  0\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without using an explicit loop. Something\
    \ like `n.to_s.split(\"\").inject(0) {|sum, i| sum + i.to_i.times {|j| return\
    \ j if i % 11 == 0 || i % 13 == 0 } }`\n<|/ c |>\n<| c |>\nYes, that would work,\
    \ but I find it less readable. I'd probably write it out in full.\n<|/ c |>\n\
    <| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if\
    \ i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") &&\
    \ i.to_s.include?(\"10\") && i.to_s.include?(\"11\") && i.to_s.include?(\"13\"\
    )\n      puts i.to_s.to_i\n      break\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend", "  n.to_s.split('').select { |i| i.to_i == 7 }.count\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum\
    \ + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\" || digit == \"11\"\
    \ || digit == \"13\"\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\n\
    I like your solution, but I wonder why you use `each_with_index` instead of `inject`?\n\
    <|/ c |>\n<| c |>\nI used `each_with_index` because I wanted to keep track of\
    \ which digit was being processed and which was being ignored. `inject` would\
    \ have worked just as well and be more idiomatic.\n<|/ c |>\n<| c |>\nI see. Thanks\
    \ for the explanation!\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\nHere's a solution\
    \ using recursion:\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_i\
    \ % 11 == 0 and i.to_i % 13 == 0\n      puts i.to_i\n    elsif i.to_i % 11 ==\
    \ 0\n      puts i.to_i + \"11\"\n    elsif i.to_i % 13 == 0\n      puts i.to_i\
    \ + \"13\"\n    else\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"11\")\n    next if i.to_s.include?(\"13\"\
    )\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == 7\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to implement\
    \ the algorithm without using recursion.\n<|/ c |>\n<| c |>\nThe question was\
    \ about how to implement the algorithm without using recursion. Recursion is just\
    \ one way of implementing it.\n<|/ c |>\n<| c |>\nThe question was about how to\
    \ implement the algorithm without using recursion. Recursion is just one way of\
    \ implementing it.\n<|/ c |>\n<| c |>\nThe question was about how to implement\
    \ the algorithm without using recursion. Recursion is just one way of implementing\
    \ it.\n<|/ c |>\n<| c |>\nThe question was about how to implement the algorithm\
    \ without using recursion. Recursion is just one way of implementing it.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      puts i\n    end\n  end\n\
    end", "  n.to_s.split('').map { |i| i.to_i }.select { |i| i % 11 == 0 || i % 13\
    \ == 0 }.count\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 ==\
    \ 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend\n</code>\n<|/\
    \ a tags=ruby,fizzbuzz |>\n<| c |>\nThanks for your answer! I understand that\
    \ it's more efficient to iterate over the string than to split it into an array\
    \ and iterate over that. I'm still new to Ruby, so I'm still trying to wrap my\
    \ head around how it works. I appreciate your help!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Ruby is a great language to learn and get to grips with. Once you get used to\
    \ it, you'll find it very easy to understand and use. Good luck!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i % 11 == 0 && i % 13 == 0\n      puts i\n    elsif i\
    \ % 11 == 0\n      puts \"#{i}th\"\n    elsif i % 13 == 0\n      puts \"#{i.to_s.rjust(2,\
    \ '0')}th\"\n    else\n      puts \"#{i.to_s.rjust(3, '0')}th\"\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum\
    \ + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\" || digit == \"11\"\
    \ || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"11\")\n    next if i.to_s.include?(\"13\"\
    )\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\"\
    )\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.include?(\"\
    7\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"11\")\n\
    \    next if i.to_s.include?(\"13\")\n    puts i.to_s.include?(\"7\") ? 0 : 1\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `fizz_buzz.call(50)`\
    \ returns `0`, not `2`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the\
    \ code you provided. What version of Ruby are you using?\n<|/ c |>\n<| c |>\n\
    Ruby 1.9.3p448 (2013-06-27 revision 41675) [x86_64-darwin12.3.0]\n<|/ c |>\n<|\
    \ c |>\nI tested it again and it works. I used the code you provided. What version\
    \ of Ruby are you using?\n<|/ c |>\n<| c |>\nRuby 1.9.3p448 (2013-06-27 revision\
    \ 41675) [x86_64-darwin12.3.0]\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each_with_index do |digit, i|\n    next if digit == \"7\"\n    next if i %\
    \ 11 == 0 || i % 13 == 0\n    puts \"#{digit}#{i}\"\n  end\nend\n</code>\n<|/\
    \ a tags=ruby |>\n<| c |>\nI like your solution, although I find it a bit too\
    \ complicated for my taste. I'm going to accept the other answer as it's more\
    \ concise.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to show you\
    \ how you could do it without having to use recursion.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n\
    \    sum + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\"\n  end\nend",
  "  n.to_s.split(\"\").each do |digit|\n    if digit == \"7\"\n      0\n    elsif\
    \ digit == \"8\"\n      1\n    elsif digit == \"9\"\n      2\n    elsif digit\
    \ == \"11\"\n      3\n    elsif digit == \"13\"\n      4\n    elsif digit == \"\
    14\"\n      5\n    elsif digit == \"15\"\n      6\n    elsif digit == \"16\"\n\
    \      7\n    elsif digit == \"17\"\n      8\n    elsif digit == \"18\"\n    \
    \  9\n    elsif digit == \"19\"\n      10\n    elsif digit == \"20\"\n      11\n\
    \    elsif digit == \"21\"\n      12\n    elsif digit == \"22\"\n      13\n  \
    \  elsif digit == \"23\"\n      14\n    elsif digit == \"24\"\n      15\n    elsif\
    \ digit == \"25\"\n      16\n    elsif digit == \"26\"\n      17\n    elsif digit\
    \ == \"27\"\n      18\n    elsif digit == \"28\"\n      19\n    elsif digit ==\
    \ \"29\"\n      20\n    elsif digit == \"30\"\n      21\n    elsif digit == \"\
    31\"\n      22\n    elsif digit == \"32\"\n      23\n    elsif digit == \"33\"\
    \n      24\n    elsif digit == \"34\"\n      25\n    elsif digit == \"35\"\n \
    \     26\n    elsif digit == \"36\"\n      27\n    elsif digit == \"37\"\n   \
    \   28\n    elsif digit == \"38\"\n      29\n    elsif digit == \"39\"\n     \
    \ 30\n    elsif digit == \"40\"\n      31\n    elsif digit == \"41\"\n      32\n\
    \    elsif digit == \"42\"\n      33\n    elsif digit == \"43\"\n      34\n  \
    \  elsif digit == \"44\"\n      35\n    elsif digit == \"45\"\n      36\n    elsif\
    \ digit == \"46\"\n      37\n    elsif digit == \"47\"\n      38\n    elsif digit\
    \ == \"48\"\n      39\n    elsif digit == \"49\"\n      40\n    elsif digit ==\
    \ \"50\"\n      41\n    ", "  n.to_s.split(\"\").each do |i|\n    if i.to_i %\
    \ 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split('').select\
    \ { |i| i.to_i % 11 == 0 || i.to_i % 13 == 0 }.count('7')\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      puts i\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i.to_s == 7\n      puts i.to_i.to_s\n\
    \    elsif i.to_i.to_s == 11 || i.to_i.to_s == 13\n      puts i.to_i.to_s\n  \
    \  end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    i.to_s.split(\"\"\
    ).each do |j|\n      if j == \"7\" || j == \"7\"\n        puts \"#{j}\"\n    \
    \  end\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.include?(\"\
    7\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"11\")\n\
    \    next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n  end\nend", "  return\
    \ 0 if n < 10 && n % 11 == 0 || n < 10 && n % 13 == 0 else 1 if n < 10 && n %\
    \ 11 != 0 || n < 10 && n % 13 != 0 else 2\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    if i.to_i.modulo(11).zero? && i.to_i.modulo(13).zero?\n      puts i.to_i.to_s\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i % 11 == 0 &&\
    \ i % 13 == 0\n      puts i\n    elsif i % 11 == 0\n      puts \"#{i}th\"\n  \
    \  elsif i % 13 == 0\n      puts \"#{i.to_s.rjust(3)}th\"\n    else\n      puts\
    \ i\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Can\
    \ you please explain how this works?\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if\
    \ digit == 7\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i ==\
    \ 7 && i.to_s.include?(\"11\") || i.to_s.include?(\"13\")\n      puts i.to_s.count(\"\
    7\")\n      break\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it! But I still don't understand why my code doesn't work. Could\
    \ you please explain it to me?\n<|/ c |>\n<| c |>\nThe code in your question doesn't\
    \ work because you aren't calling the method correctly. `fizz_buzz.call(50)` will\
    \ call the method with the argument `50`, but your method expects an argument\
    \ of `n`. You also aren't calling the method correctly. `fizz_buzz(50)` will call\
    \ the method with the argument `50`, but your method expects an argument of `n`.\
    \ You also aren't calling the method correctly. `fizz_buzz(50)` will call the\
    \ method with the argument `50`, but your method expects an argument of `n`. You\
    \ also aren't calling the method correctly. `fizz_buzz(50)` will call the method\
    \ with the argument `50`, but your method expects an argument of `n`. You also\
    \ aren't calling the method correctly. `fizz_buzz(50)` will call the method with\
    \ the argument `50`, but your method expects an argument of `n`.\n<|/ c |>\n<|\
    \ c |>\nI see. But how do I call the method correctly? I thought I did it correctly\
    \ in my code. Could you please explain it to me?\n<|/ c |>\n<| c |>\nYou aren't\
    \ calling the method correctly. `fizz_buzz(50)` will call the method with the\
    \ argument `50`, but your method expects an argument of `n`. You also aren't calling\
    \ the method correctly. `fizz_buzz(50)` will call the method with the argument\
    \ `50`, but your method expects an argument of `n`. You also aren't calling the\
    \ method correctly. `fizz_buzz(50)` will call the method with the argument `50`,\
    \ but your method expects an argument of `n`. You also aren't calling the method\
    \ correctly. `fizz_buzz(50)` will call the method with the argument `50`, but\
    \ your method expects an argument of `n`.\n<|/ c |>\n<| c |>\nI see. But how do\
    \ I call the method correctly? I thought I did it correctly in my code. Could\
    \ you please explain it to me?\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>\n",
  "  n.to_s.split(\"\").each do |digit|\n    if digit == \"7\" || digit == \"7\"\n\
    \      puts digit\n    elsif digit == \"7\" && n % 11 == 0\n      puts \"#{digit}11\"\
    \n    elsif digit == \"7\" && n % 13 == 0\n      puts \"#{digit}13\"\n    elsif\
    \ digit == \"7\" && n % n % 11 == 0\n      puts \"#{digit}#{digit}11\"\n    elsif\
    \ digit == \"7\" && n % n % 13 == 0\n      puts \"#{digit}#{digit}13\"\n    elsif\
    \ digit == \"7\" && n % n % n % 11 == 0\n      puts \"#{digit}#{digit}#{digit}11\"\
    \n    elsif digit == \"7\" && n % n % n % 13 == 0\n      puts \"#{digit}#{digit}#{digit}13\"\
    \n    elsif digit == \"7\" && n % n % n % n % 11 == 0\n      puts \"#{digit}#{digit}#{digit}#{digit}11\"\
    \n    elsif digit == \"7\" && n % n % n % n % 13 == 0\n      puts \"#{digit}#{digit}#{digit}#{digit}13\"\
    \n    else\n      puts digit\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. `fizz_buzz.call(78)` returns `7811` instead of `7813`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the output to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the output to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the output to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the output to the answer.\n\
    <|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each do |i|\n\
    \    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next\
    \ if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"\
    1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n\
    \    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next\
    \ if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n\
    \    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n\
    \    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next\
    \ if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"\
    6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n\
    \    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?", '  return 0
    if n < 10 else 1 if n < 100 else 2 if n < 1000 else 3 if n < 10000 else 4 if n
    < 100000 else 5 if n < 1000000 else 6 if n < 10000000 else 7 if n < 100000000
    else 8 if n < 1000000000 else 9 if n < 10000000000 else 10 if n < 100000000000
    else 11 if n < 1000000000000 else 12 if n < 10000000000000 else 13 if n < 10000000000000
    else 14 if n < 10000000000000 else 15 if n < 10000000000000 else 16 if n < 10000000000000
    else 17 if n < 10000000000000 else 18 if n < 10000000000000 else 19 if n < 10000000000000
    else 20 if n < 10000000000000 else 21 if n < 10000000000000 else 22 if n < 10000000000000
    else 23 if n < 10000000000000 else 24 if n < 10000000000000 else 25 if n < 10000000000000
    else 26 if n < 10000000000000 else 27 if n < 10000000000000 else 28 if n < 10000000000000
    else 29 if n < 10000000000000 else 30 if n < 10000000000000 else 31 if n < 10000000000000
    else 32 if n < 10000000000000 else 33 if n < 10000000000000 else 34 if n < 10000000000000
    else 35 if n < 10000000000000 else 36 if n < 10000000000000 else 37 if n < 10000000000000
    else 38 if n < 10000000000000 else 39 if n < 10000000000000 else 40 if n < 10000000000000
    else 41 if n < 10000000000000 else 42 if n < 10000000000000 else 43 if n < 10000000000000
    else 44 if n < 10000000000000 else 45 if n < 10000000000000 else 46 if n < 10000000000000
    else 47 if n < 10000000000000 else 48 if n < 10000000000000 else 49 if n < 10000000000000
    else 50 if n < 10000000000000 else 51 if n < 10000000000000 else 52 if n < 10000000000000
    else 53 if n < 10000000000000 else 54 if n < 10000000000000 else 55 if n < 10000000000000
    else 56 if n < 10000000000000 else 57 if n < 10000000000000 else 58 if n < 10000000000000
    else 59 if n < 10000000000000 else 61 if n < 10000000000000 else 62 if n < 10000000000000
    else 63 if n < 10000000000000 else 64 if n < 10000000000000 else 65 if n < 10000000000000
    else 66 if n < 10000000000000 else 67 if n < 10000000000000 else 68 if n < 10000000000000
    else 69 if n < 10000000000000 else 70 if n < 10000000000000 else 71 if n < 10000000000000
    else 72 if n < 10000000000000 else 73 if n < 10000000000000 else 74 if n < 10000000000000
    else 75 if n < 10000000000', "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |digit|\n    if digit == \"7\" || digit == \"7\"\n      0\n    elsif\
    \ digit == \"8\" || digit == \"8\"\n      1\n    elsif digit == \"9\" || digit\
    \ == \"9\"\n      2\n    elsif digit == \"11\" || digit == \"11\"\n      3\n \
    \   elsif digit == \"13\" || digit == \"13\"\n      4\n    elsif digit == \"14\"\
    \ || digit == \"14\"\n      5\n    elsif digit == \"15\" || digit == \"15\"\n\
    \      6\n    elsif digit == \"16\" || digit == \"16\"\n      7\n    elsif digit\
    \ == \"17\" || digit == \"17\"\n      8\n    elsif digit == \"18\" || digit ==\
    \ \"18\"\n      9\n    elsif digit == \"19\" || digit == \"19\"\n      10\n  \
    \  elsif digit == \"20\" || digit == \"20\"\n      11\n    elsif digit == \"21\"\
    \ || digit == \"21\"\n      12\n    elsif digit == \"22\" || digit == \"22\"\n\
    \      13\n    elsif digit == \"23\" || digit == \"23\"\n      14\n    elsif digit\
    \ == \"24\" || digit == \"24\"\n      15\n    elsif digit == \"25\" || digit ==\
    \ \"25\"\n      16\n    elsif digit == \"26\" || digit == \"26\"\n      17\n \
    \   elsif digit == \"27\" || digit == \"27\"\n      18\n    elsif digit == \"\
    28\" || digit == \"28\"\n      19\n    elsif digit == \"29\" || digit == \"29\"\
    \n      20\n    elsif digit == \"30\" || digit == \"30\"\n      21\n    elsif\
    \ digit == \"31\" || digit == \"31\"\n      22\n    elsif digit == \"32\" || digit\
    \ == \"32\"\n      23\n    elsif digit == \"33\" || digit == \"33\"\n      24\n\
    \    elsif digit == \"34\" || digit == \"34\"\n      25\n    elsif digit == \"\
    35\" || digit == \"35\"\n      26\n    elsif digit == \"36\" || digit == \"36\"\
    \n      27\n    elsif digit == \"37\" || digit == \"37\"\n      28\n    elsif\
    \ digit == \"38\" || digit == \"38\"\n      29\n    elsif digit == \"39\" || digit\
    \ == \"39\"\n      30\n    elsif digit == \"40\" || digit ", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"11\")\n\
    \    next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n\
    \    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n\
    \    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next\
    \ if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"\
    6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n\
    \    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next\
    \ if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"\
    3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n\
    \    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next\
    \ if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?",
  "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if\
    \ digit == \"7\" || digit == \"8\" || digit == \"9\" || digit == \"11\" || digit\
    \ == \"13\"\n  end\nend", "  n.to_s.split(\"\").each do |digit|\n    if digit\
    \ == \"7\" || digit == \"7\"\n      puts 0\n    elsif digit == \"8\" || digit\
    \ == \"8\"\n      puts 1\n    elsif digit == \"9\" || digit == \"9\"\n      puts\
    \ 2\n    elsif digit == \"11\" || digit == \"11\"\n      puts 3\n    elsif digit\
    \ == \"13\" || digit == \"13\"\n      puts 4\n    elsif digit == \"14\" || digit\
    \ == \"14\"\n      puts 5\n    elsif digit == \"15\" || digit == \"15\"\n    \
    \  puts 6\n    elsif digit == \"16\" || digit == \"16\"\n      puts 7\n    elsif\
    \ digit == \"17\" || digit == \"17\"\n      puts 8\n    elsif digit == \"18\"\
    \ || digit == \"18\"\n      puts 9\n    elsif digit == \"19\" || digit == \"19\"\
    \n      puts 10\n    elsif digit == \"20\" || digit == \"20\"\n      puts 11\n\
    \    elsif digit == \"21\" || digit == \"21\"\n      puts 12\n    elsif digit\
    \ == \"22\" || digit == \"22\"\n      puts 13\n    elsif digit == \"23\" || digit\
    \ == \"23\"\n      puts 14\n    elsif digit == \"24\" || digit == \"24\"\n   \
    \   puts 15\n    elsif digit == \"25\" || digit == \"25\"\n      puts 16\n   \
    \ elsif digit == \"26\" || digit == \"26\"\n      puts 17\n    elsif digit ==\
    \ \"27\" || digit == \"27\"\n      puts 18\n    elsif digit == \"28\" || digit\
    \ == \"28\"\n      puts 19\n    elsif digit == \"29\" || digit == \"29\"\n   \
    \   puts 20\n    elsif digit == \"30\" || digit == \"30\"\n      puts 21\n   \
    \ elsif digit == \"31\" || digit == \"31\"\n      puts 22\n    elsif digit ==\
    \ \"32\" || digit == \"32\"\n      puts 23\n    elsif digit == \"33\" || digit\
    \ == \"33\"\n      puts 24\n    elsif digit == \"34\" || digit == \"34\"\n   \
    \   puts 25\n    elsif digit == \"35\" || digit == \"35\"\n      puts 26\n   \
    \ elsif digit == \"36\" || digit == \"36\"\n      puts 27\n    ", "  n.to_s.split('').each_with_index.inject(0)\
    \ do |sum, digit|\n    if digit == '7'\n      sum + 1\n    elsif digit == '11'\
    \ || digit == '13'\n      sum + 0\n    else\n      sum\n    end\n  end\nend",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n      puts \"\
    #{i.to_s.count(\"7\")}\"\n    end\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\")\n    end\n\
    \  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i\
    \ % 13 == 0\n      puts i.to_i\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| c |>\nI like your solution, but I believe that `fizz_buzz.call(78)` should\
    \ return `3` instead of `2`.\n<|/ c |>\n<| c |>\nThanks for catching that. I fixed\
    \ it.\n<|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each\
    \ do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\")\n    end\n\
    \  end\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe it\
    \ can be simplified a bit. `n.to_s.split(\"\").each do |i| if i.to_s.include?(\"\
    7\") puts i.to_s.count(\"7\") end` can be replaced with `n.to_s.split(\"\").each\
    \ do |i| puts i.to_s.count(\"7\") if i.to_s.include?(\"7\") end`\n<|/ c |>\n<|\
    \ c |>\nYes, I agree. Thanks for pointing that out. I've edited my answer to reflect\
    \ your suggestion.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm new to Ruby\
    \ and I didn't know about `count`. I'm going to try this out and see how it works.\n\
    <|/ c |>\n<| c |>\nI added a more concise version of the code I ended up using.\n\
    <|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each do |digit|\n\
    \    if digit == \"7\"\n      0\n    elsif digit == \"8\"\n      1\n    elsif\
    \ digit == \"9\"\n      2\n    elsif digit == \"11\"\n      3\n    elsif digit\
    \ == \"13\"\n      4\n    elsif digit == \"14\"\n      5\n    elsif digit == \"\
    15\"\n      6\n    elsif digit == \"16\"\n      7\n    elsif digit == \"17\"\n\
    \      8\n    elsif digit == \"18\"\n      9\n    elsif digit == \"19\"\n    \
    \  10\n    elsif digit == \"20\"\n      11\n    elsif digit == \"21\"\n      12\n\
    \    elsif digit == \"22\"\n      13\n    elsif digit == \"23\"\n      14\n  \
    \  elsif digit == \"24\"\n      15\n    elsif digit == \"25\"\n      16\n    elsif\
    \ digit == \"26\"\n      17\n    elsif digit == \"27\"\n      18\n    elsif digit\
    \ == \"28\"\n      19\n    elsif digit == \"29\"\n      20\n    elsif digit ==\
    \ \"30\"\n      21\n    elsif digit == \"31\"\n      22\n    elsif digit == \"\
    32\"\n      23\n    elsif digit == \"33\"\n      24\n    elsif digit == \"34\"\
    \n      25\n    elsif digit == \"35\"\n      26\n    elsif digit == \"36\"\n \
    \     27\n    elsif digit == \"37\"\n      28\n    elsif digit == \"38\"\n   \
    \   29\n    elsif digit == \"39\"\n      30\n    elsif digit == \"40\"\n     \
    \ 31\n    elsif digit == \"41\"\n      32\n    elsif digit == \"42\"\n      33\n\
    \    elsif digit == \"43\"\n      34\n    elsif digit == \"44\"\n      35\n  \
    \  elsif digit == \"45\"\n      36\n    elsif digit == \"46\"\n      37\n    elsif\
    \ digit == \"47\"\n      38\n    elsif digit == \"48\"\n      39\n    elsif digit\
    \ == \"49\"\n      40\n    elsif digit == \"50\"\n      41\n    ", "  n.to_s.split(\"\
    \").each_with_index do |digit, index|\n    if digit == \"7\" && index > 0 && index\
    \ % 11 == 0\n      puts index\n    elsif digit == \"7\" && index > 0 && index\
    \ % 13 == 0\n      puts index\n    elsif digit == \"7\" && index > 0 && index\
    \ % 11 != 0 && index % 13 != 0\n      puts index\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11).zero? and i.to_i.modulo(13).zero?\n\
    \      puts i.to_i\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. I don't understand why you use modulo instead of just\
    \ checking if the number is divisible by 11 or 13. Could you explain why you use\
    \ modulo?\n<|/ c |>\n<| c |>\nBecause the number `11` is divisible by `11` but\
    \ `13` is not.\n<|/ c |>\n<| c |>\nOh I see. So you just check if the number is\
    \ divisible by 11 or 13 and then you check if it is divisible by 11 or 13 and\
    \ so on. Thanks for your help!\n<|/ c |>\n<| c |>\nYes, that's right. `11` is\
    \ divisible by `11` but `13` is not.\n<|/ c |>\n<| c |>\nOh I see. So you just\
    \ check if the number is divisible by 11 or 13 and then you check if it is divisible\
    \ by 11 or 13 and so on. Thanks for your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  n.to_s.split(\"\").each do |digit|\n    if digit == \"7\" || digit == \"7\"\n\
    \      0\n    elsif digit == \"8\" || digit == \"8\"\n      1\n    elsif digit\
    \ == \"9\" || digit == \"9\"\n      2\n    elsif digit == \"11\" || digit == \"\
    11\"\n      3\n    elsif digit == \"13\" || digit == \"13\"\n      4\n    else\n\
    \      5\n    end\n  end\nend", "  n.to_s.split(\"\").each do |digit|\n    if\
    \ digit == \"7\" || digit == \"7\"\n      return 0\n    elsif digit == \"8\" ||\
    \ digit == \"8\"\n      return 1\n    elsif digit == \"9\" || digit == \"9\"\n\
    \      return 2\n    elsif digit == \"11\" || digit == \"11\"\n      return 3\n\
    \    elsif digit == \"13\" || digit == \"13\"\n      return 4\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n    sum\
    \ + 1 if digit == 7\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i.modulo(11).zero?\
    \ && i.to_i.modulo(13).zero?\n      puts i.to_i.to_s\n    end\n  end\nend", " \
    \ return 0 if n < 10 && n % 11 == 0 || n < 13 && n % 13 == 0 else fizz_buzz(n\
    \ - 10)\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\"\
    )\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"11\")\n      puts\
    \ i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"13\")\n      puts i.to_s.count(\"\
    13\")\n    elsif i.to_s.include?(\"1\")\n      puts i.to_s.count(\"1\")\n    elsif\
    \ i.to_s.include?(\"3\")\n      puts i.to_s.count(\"3\")\n    elsif i.to_s.include?(\"\
    5\")\n      puts i.to_s.count(\"5\")\n    elsif i.to_s.include?(\"7\")\n     \
    \ puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"9\")\n      puts i.to_s.count(\"\
    9\")\n    elsif i.to_s.include?(\"0\")\n      puts i.to_s.count(\"0\")\n    else\n\
    \      puts i.to_s.count(\"0\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to count the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. Your code counts the number of times the digit 7 appears in all integers\
    \ less than n.\n<|/ c |>\n<| c |>\nI thought the OP wanted to count the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. My code counts the number of times the digit 7 appears in all integers\
    \ less than n.\n<|/ c |>\n<| c |>\nI thought the OP wanted to count the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. My code counts the number of times the digit 7 appears in all integers\
    \ less than n.\n<|/ c |>\n<| c |>\nI thought the OP wanted to count the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. My code counts the number of times the digit 7 appears in all integers\
    \ less than n.\n<|/ c |>\n<| c |>\nI thought the OP wanted to count the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. My code counts the number of times the digit 7 appears in all integers\
    \ less than n.\n<|/ c ", "  n.to_s.split('').select { |i| i % 11 == 0 || i % 13\
    \ == 0 }.count('7')\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + case digit\n      when\
    \ \"7\" then 1\n      when \"8\" then 2\n      when \"9\" then 3\n      when \"\
    0\" then 4\n      when \"1\" then 5\n      when \"2\" then 6\n      when \"3\"\
    \ then 7\n      when \"4\" then 8\n      when \"5\" then 9\n      when \"6\" then\
    \ 10\n      when \"7\" then 11\n      when \"8\" then 12\n      when \"9\" then\
    \ 13\n      else 0\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return 0\n \
    \   elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\")\n      return 1\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\"\
    )\n      return 2\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n\
    \      return 3\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n\
    \      return 4\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\
    \ && i.to_s.include?(\"14\")\n      return 5\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"15\")\n      return 6\n    elsif\
    \ i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"16\"\
    )\n      return 7\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\"\
    ) && i.to_s.include?(\"17\")\n      return 8\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"18\")\n      return 9\n    elsif\
    \ i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"19\"\
    )\n      return 10\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\"\
    ) && i.to_s.include?(\"20\")\n      return 11\n    elsif i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\") && i.to_s.include?(\"21\")\n      return 12\n   \
    \ elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\") && i.to_s.include?(\"\
    22\")\n      return 13\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"23\")\n      return 14\n    el", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    if digit == \"7\"\n      sum\
    \ + 1 if sum % 11 == 0 or sum % 13 == 0\n    else\n      sum\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13\
    \ == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\")\n    end\n\
    \  end\nend", "  return n.to_s.chars.map(&:to_i).select { |n| n % 11 == 0 || n\
    \ % 13 == 0 }.size\nend", "  return n.to_s.chars.map { |c| c == '7' ? 0 : (c.to_i%11\
    \ == 0 || c.to_i%13 == 0 ? 1 : 0) }.max\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_s.include?(\"7\")\n      return 0 if i.to_s.include?(\"11\")\n  \
    \    return 1 if i.to_s.include?(\"13\")\n    end\n  end\n  return 0\nend", " \
    \ n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n\
    \      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"11\")\n    next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your\
    \ code is very clear and easy to understand. I am not very familiar with Ruby\
    \ so I appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11).zero? or i.to_i.modulo(13).zero?\n \
    \     puts i.to_i.to_s if i.to_i.modulo(11).zero?\n      puts i.to_i.to_s if i.to_i.modulo(13).zero?\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |digit|\n    if digit ==\
    \ \"7\"\n      0\n    elsif digit == \"9\"\n      1\n    elsif digit == \"11\"\
    \n      2\n    elsif digit == \"13\"\n      3\n    else\n      0\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n     \
    \ puts i.to_s.count(\"7\")\n      break\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i.modulo(11).zero? or i.to_i.modulo(13).zero?\n \
    \     puts i.to_i.to_s if i.to_i.modulo(11).zero?\n      puts i.to_i.to_s if i.to_i.modulo(13).zero?\n\
    \    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much! This\
    \ was very helpful.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  n.to_s.split('').each_with_index.inject(0)\
    \ do |sum, digit|\n    if digit == '7'\n      sum + 1 if sum % 11 == 0 or sum\
    \ % 13 == 0\n    else\n      sum\n    end\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\"\
    )\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n  \
    \  next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n\
    \    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next\
    \ if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"\
    6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n\
    \    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next\
    \ if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"\
    3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n\
    \    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next\
    \ if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"\
    7\")\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i %\
    \ 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    i.to_s.split(\"\"\
    ).each do |j|\n      if j == \"7\" || j == \"7\"\n        puts 0\n      elsif\
    \ j == \"11\" || j == \"13\"\n        puts 1\n      else\n        puts 2\n   \
    \   end\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so\
    \ much! This was really helpful!\n<|/ c |>\n<| c |>\nYou're welcome. I'm glad\
    \ it helped. Feel free to accept the answer if it solved your problem.\n<|/ c\
    \ |>\n<| c |>\nI did but it said I had to wait 2 minutes before I could accept\
    \ it.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for letting me know. :)\n<|/ c |>\n\
    <| a tags=ruby |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0) do\
    \ |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit == \"\
    9\"\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"\
    7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.to_i\
    \ == 7\n    next if i.to_s.to_i == 11 || i.to_s.to_i == 13\n    puts i.to_s.to_i\n\
    \  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i % 11 == 0 || i % 13\
    \ == 0\n      puts i.to_s\n    end\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |i|\n    if i.to_i % 11 == 0 and i.to_i % 13 == 0\n      puts i.to_i\n    end\n\
    \  end\nend", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.include?(\"\
    7\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"11\")\n\
    \    next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_i.even?\n    next if i.to_i.odd?\n    next if\
    \ i.to_i.zero?\n    next if i.to_i.zero? && i.to_i.zero?\n    next if i.to_i.zero?\
    \ && i.to_i.zero? && i.to_i.zero?\n    next if i.to_i.zero? && i.to_i.zero? &&\
    \ i.to_i.zero? && i.to_i.zero?\n    next if i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\
    \ && i.to_i.zero? && i.to_i.zero?\n    next if i.to_i.zero? && i.to_i.zero? &&\
    \ i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\n    next if i.to_i.zero?\
    \ && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\
    \ && i.to_i.zero?\n    next if i.to_i.zero? && i.to_i.zero? && i.to_i.zero? &&\
    \ i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\n\
    \    next if i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\
    \ && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\n    next if\
    \ i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\
    \ && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\n\
    \    next if i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\
    \ && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\
    \ && i.to_i.zero?\n    next if i.to_i.zero? && i.to_i.zero? && i.to_i.zero? &&\
    \ i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero? && i.to_i.zero?\
    \ && i.to_", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\
    \ && i.to_s.include?(\"8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"11\"\
    ) && i.to_s.include?(\"13\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"\
    7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"9\")\n      puts i.to_s.count(\"\
    7\")\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"8\")\n      puts i.to_s.count(\"\
    7\")\n    elsif i.to_s.include?(\"7\") && i.to_s.include?(\"9\")\n      puts i.to_s.count(\"\
    7\")\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      puts\
    \ i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\") && i.to_s.include?(\"14\")\n      puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"13\")\n      puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"\
    11\") && i.to_s.include?(\"14\")\n      puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"\
    13\") && i.to_s.include?(\"14\")\n      puts i.to_s.count(\"13\")\n    elsif i.to_s.include?(\"\
    13\")\n      puts i.to_s.count(\"13\")\n    end\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for the answer! I appreciate it!\n<|/ c |>\n<| c |>\nI added\
    \ a more efficient solution that doesn't require a loop. Let me know if that helps.\n\
    <|/ c |>\n<| c |>\nThanks for the answer! I appreciate it!\n<|/ c |>\n<| a |>\n\
    <code>", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n   \
    \ sum + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\" || digit == \"\
    11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == 7\n  end\nend", "  n.to_s.split(\"\"\
    ).each do |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n\
    \    end\n  end\nend", "  n.to_s.split(\"\").each do |digit|\n    if digit ==\
    \ \"7\" || digit == \"7\"\n      0\n    elsif digit == \"8\" || digit == \"8\"\
    \n      1\n    elsif digit == \"9\" || digit == \"9\"\n      2\n    elsif digit\
    \ == \"10\" || digit == \"10\"\n      3\n    elsif digit == \"11\" || digit ==\
    \ \"11\"\n      4\n    elsif digit == \"12\" || digit == \"12\"\n      5\n   \
    \ elsif digit == \"13\" || digit == \"13\"\n      6\n    elsif digit == \"14\"\
    \ || digit == \"14\"\n      7\n    elsif digit == \"15\" || digit == \"15\"\n\
    \      8\n    elsif digit == \"16\" || digit == \"16\"\n      9\n    elsif digit\
    \ == \"17\" || digit == \"17\"\n      10\n    elsif digit == \"18\" || digit ==\
    \ \"18\"\n      11\n    elsif digit == \"19\" || digit == \"19\"\n      12\n \
    \   elsif digit == \"20\" || digit == \"20\"\n      13\n    elsif digit == \"\
    21\" || digit == \"21\"\n      14\n    elsif digit == \"22\" || digit == \"22\"\
    \n      15\n    elsif digit == \"23\" || digit == \"23\"\n      16\n    elsif\
    \ digit == \"24\" || digit == \"24\"\n      17\n    elsif digit == \"25\" || digit\
    \ == \"25\"\n      18\n    elsif digit == \"26\" || digit == \"26\"\n      19\n\
    \    elsif digit == \"27\" || digit == \"27\"\n      20\n    elsif digit == \"\
    28\" || digit == \"28\"\n      21\n    elsif digit == \"29\" || digit == \"29\"\
    \n      22\n    elsif digit == \"30\" || digit == \"30\"\n      23\n    elsif\
    \ digit == \"31\" || digit == \"31\"\n      24\n    elsif digit == \"32\" || digit\
    \ == \"32\"\n      25\n    elsif digit == \"33\" || digit == \"33\"\n      26\n\
    \    elsif digit == \"34\" || digit == \"34\"\n      27\n    elsif digit == \"\
    35\" || digit == \"35\"\n      28\n    elsif digit == \"36\" || digit == \"36\"\
    \n      29\n    elsif digit == \"37\" || digit == \"37\"\n      30\n    elsif\
    \ digit == \"38\" || digit == \"", "  n.to_s.split(\"\").each do |i|\n    if i.to_i.to_s\
    \ == 7\n      puts i.to_i.to_s\n    elsif i.to_i.to_s == 11 || i.to_i.to_s ==\
    \ 13\n      puts i.to_i.to_s\n    else\n      puts i.to_i.to_s\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |digit|\n    if digit == \"7\" || digit ==\
    \ \"7\"\n      0\n    elsif digit == \"8\" || digit == \"8\"\n      1\n    elsif\
    \ digit == \"9\" || digit == \"9\"\n      2\n    elsif digit == \"11\" || digit\
    \ == \"11\"\n      3\n    elsif digit == \"13\" || digit == \"13\"\n      4\n\
    \    elsif digit == \"14\" || digit == \"14\"\n      5\n    elsif digit == \"\
    15\" || digit == \"15\"\n      6\n    elsif digit == \"16\" || digit == \"16\"\
    \n      7\n    elsif digit == \"17\" || digit == \"17\"\n      8\n    elsif digit\
    \ == \"18\" || digit == \"18\"\n      9\n    elsif digit == \"19\" || digit ==\
    \ \"19\"\n      10\n    elsif digit == \"20\" || digit == \"20\"\n      11\n \
    \   elsif digit == \"21\" || digit == \"21\"\n      12\n    elsif digit == \"\
    22\" || digit == \"22\"\n      13\n    elsif digit == \"23\" || digit == \"23\"\
    \n      14\n    elsif digit == \"24\" || digit == \"24\"\n      15\n    elsif\
    \ digit == \"25\" || digit == \"25\"\n      16\n    elsif digit == \"26\" || digit\
    \ == \"26\"\n      17\n    elsif digit == \"27\" || digit == \"27\"\n      18\n\
    \    elsif digit == \"28\" || digit == \"28\"\n      19\n    elsif digit == \"\
    29\" || digit == \"29\"\n      20\n    elsif digit == \"30\" || digit == \"30\"\
    \n      21\n    elsif digit == \"31\" || digit == \"31\"\n      22\n    elsif\
    \ digit == \"32\" || digit == \"32\"\n      23\n    elsif digit == \"33\" || digit\
    \ == \"33\"\n      24\n    elsif digit == \"34\" || digit == \"34\"\n      25\n\
    \    elsif digit == \"35\" || digit == \"35\"\n      26\n    elsif digit == \"\
    36\" || digit == \"36\"\n      27\n    elsif digit == \"37\" || digit == \"37\"\
    \n      28\n    elsif digit == \"38\" || digit == \"38\"\n      29\n    elsif\
    \ digit == \"39\" || digit == \"39\"\n      30\n    elsif digit == \"40\" || digit ",
  "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"\
    8\") && i.to_s.include?(\"9\") && i.to_s.include?(\"11\") && i.to_s.include?(\"\
    13\")\n      return i.to_s.count(\"7\")\n    end\n  end\n  return 0\nend", " \
    \ n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"\
    7\")\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nI like\
    \ this solution, but I wonder if there's a way to do it without using an explicit\
    \ loop?\n<|/ c |>\n<| c |>\nI added a solution without an explicit loop\n<|/ c\
    \ |>\n<| c |>\nThanks for the edit. I'm still learning Ruby, so I appreciate the\
    \ help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.to_s.split(\"\").each do |digit|\n\
    \    if digit == \"7\" || digit == \"7\"\n      0\n    elsif digit == \"8\" ||\
    \ digit == \"8\"\n      1\n    elsif digit == \"9\" || digit == \"9\"\n      2\n\
    \    elsif digit == \"11\" || digit == \"11\"\n      3\n    elsif digit == \"\
    13\" || digit == \"13\"\n      4\n    else\n      5\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nI like how you used `each` instead of `map`\n<|/\
    \ c |>\n<| c |>\nThanks so much for this! I really appreciate it. I was able to\
    \ get it working with your help. I appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n  \
    \    puts \"#{i.to_s.count(\"7\")}\"\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"11\")\n    next if i.to_s.include?(\"13\"\
    )\n    puts i.to_s.to_i\n  end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "  return 0 if n < 10 && n % 11 == 0 || n < 10 && n % 13 == 0 else fizz_buzz(n -\
    \ 10)\nend", "  n.to_s.split(\"\").each do |digit|\n    if digit == \"7\" || digit\
    \ == \"7\"\n      0\n    elsif digit == \"8\" || digit == \"8\"\n      1\n   \
    \ elsif digit == \"9\" || digit == \"9\"\n      2\n    elsif digit == \"11\" ||\
    \ digit == \"11\"\n      3\n    elsif digit == \"13\" || digit == \"13\"\n   \
    \   4\n    else\n      5\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |digit|\n    if digit == \"7\"\n      0\n    elsif digit == \"8\"\n\
    \      1\n    elsif digit == \"9\"\n      2\n    elsif digit == \"11\"\n     \
    \ 3\n    elsif digit == \"13\"\n      4\n    elsif digit == \"14\"\n      5\n\
    \    elsif digit == \"15\"\n      6\n    elsif digit == \"16\"\n      7\n    elsif\
    \ digit == \"17\"\n      8\n    elsif digit == \"18\"\n      9\n    elsif digit\
    \ == \"19\"\n      10\n    elsif digit == \"20\"\n      11\n    elsif digit ==\
    \ \"21\"\n      12\n    elsif digit == \"22\"\n      13\n    elsif digit == \"\
    23\"\n      14\n    elsif digit == \"24\"\n      15\n    elsif digit == \"25\"\
    \n      16\n    elsif digit == \"26\"\n      17\n    elsif digit == \"27\"\n \
    \     18\n    elsif digit == \"28\"\n      19\n    elsif digit == \"29\"\n   \
    \   20\n    elsif digit == \"30\"\n      21\n    elsif digit == \"31\"\n     \
    \ 22\n    elsif digit == \"32\"\n      23\n    elsif digit == \"33\"\n      24\n\
    \    elsif digit == \"34\"\n      25\n    elsif digit == \"35\"\n      26\n  \
    \  elsif digit == \"36\"\n      27\n    elsif digit == \"37\"\n      28\n    elsif\
    \ digit == \"38\"\n      29\n    elsif digit == \"39\"\n      30\n    elsif digit\
    \ == \"40\"\n      31\n    elsif digit == \"41\"\n      32\n    elsif digit ==\
    \ \"42\"\n      33\n    elsif digit == \"43\"\n      34\n    elsif digit == \"\
    44\"\n      35\n    elsif digit == \"45\"\n      36\n    elsif digit == \"46\"\
    \n      37\n    elsif digit == \"47\"\n      38\n    elsif digit == \"48\"\n \
    \     39\n    elsif digit == \"49\"\n      40\n    elsif digit == \"50\"\n   \
    \   41\n    ", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i\
    \ % 13 == 0\n      puts i.to_i\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| c |>\nThanks so much! I appreciate your help and explanation. I'm new\
    \ to Ruby, so I appreciate your time.\n<|/ c |>\n<| c |>\nNo problem. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go along. Ruby is\
    \ a great language to learn and get your feet wet with as you go ", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\"\n  end\nend", "  n.to_s.split(\"\").each do\
    \ |digit|\n    if digit == \"7\" || digit == \"8\" || digit == \"9\"\n      puts\
    \ digit\n    elsif digit == \"11\" || digit == \"13\"\n      puts digit\n    else\n\
    \      puts digit\n    end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n \
    \   if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\")\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i == 7 && i.to_s.split(\"\
    \").count(i) % 11 == 0 || i.to_i == 7 && i.to_s.split(\"\").count(i) % 13 == 0\n\
    \      return i.to_s.split(\"\").count(i).to_s\n    end\n  end\n  return \"Not\
    \ a FizzBuzz number\"\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very similar to mine. My code was a little\
    \ bit more concise and I thought that there might be a better solution. Your solution\
    \ is very elegant.\n<|/ c |>\n<| a |>\n<code>", "  n.to_s.split(\"\").each do\
    \ |i|\n    if i.to_i % 11 == 0 || i.to_i % 13 == 0\n      puts i.to_i\n    end\n\
    \  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 || i.to_i\
    \ % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |digit|\n    if digit == \"7\" || digit == \"7\"\n      0\n    elsif digit\
    \ == \"8\" || digit == \"8\"\n      1\n    elsif digit == \"9\" || digit == \"\
    9\"\n      2\n    elsif digit == \"11\" || digit == \"11\"\n      3\n    elsif\
    \ digit == \"13\" || digit == \"13\"\n      4\n    else\n      5\n    end\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_s.include?(\"7\")\n     \
    \ return 0 if i.to_s.include?(\"0\")\n      return 2 if i.to_s.include?(\"1\"\
    )\n      return 3 if i.to_s.include?(\"2\")\n      return 4 if i.to_s.include?(\"\
    3\")\n      return 5 if i.to_s.include?(\"4\")\n      return 6 if i.to_s.include?(\"\
    5\")\n      return 7 if i.to_s.include?(\"6\")\n      return 8 if i.to_s.include?(\"\
    7\")\n      return 9 if i.to_s.include?(\"8\")\n      return 10 if i.to_s.include?(\"\
    9\")\n      return 11 if i.to_s.include?(\"0\")\n      return 13 if i.to_s.include?(\"\
    1\")\n      return 14 if i.to_s.include?(\"2\")\n      return 15 if i.to_s.include?(\"\
    3\")\n      return 16 if i.to_s.include?(\"4\")\n      return 17 if i.to_s.include?(\"\
    5\")\n      return 18 if i.to_s.include?(\"6\")\n      return 19 if i.to_s.include?(\"\
    7\")\n      return 20 if i.to_s.include?(\"8\")\n      return 21 if i.to_s.include?(\"\
    9\")\n      return 22 if i.to_s.include?(\"0\")\n      return 23 if i.to_s.include?(\"\
    1\")\n      return 24 if i.to_s.include?(\"2\")\n      return 25 if i.to_s.include?(\"\
    3\")\n      return 26 if i.to_s.include?(\"4\")\n      return 27 if i.to_s.include?(\"\
    5\")\n      return 28 if i.to_s.include?(\"6\")\n      return 29 if i.to_s.include?(\"\
    7\")\n      return 30 if i.to_s.include?(\"8\")\n      return 31 if i.to_s.include?(\"\
    9\")\n      return 32 if i.to_s.include?(\"0\")\n      return 33 if i.to_s.include?(\"\
    1\")\n      return 34 if i.to_s.include?(\"2\")\n      return 35 if i.to_s.include?(\"\
    3\")\n      return 36 if i.to_s.include?(\"4\")\n      return 37 if i.to_s.include?(\"\
    5\")\n      return 38 if i.to_s.include?(\"6\")\n      return 39 if i.to_s.include?(\"\
    7\")\n      return 40 if i.to_s.include?(\"8\")\n      return 41 if i.to_s.include?(\"\
    9\")\n      return 42 if i.to_s.include?(\"0\")\n      return 43 if i.to_s.include?(\"\
    1\")\n      return 44 if i.to_s.include?(\"2\")\n", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_i == 7 && i.to_s.include?(\"11\") || i.to_s.include?(\"\
    13\")\n      puts i.to_s\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz.call(100)`.\n<|/ c |>\n\
    <| c |>\nI see what you mean. Thanks for pointing that out. I've updated my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to\
    \ use any loops or conditionals. I only have to use loops and conditionals.\n\
    <|/ c |>\n<| c |>\nI updated my answer with another solution that doesn't use\
    \ any loops or conditionals.\n<|/ c |>\n<| c |>\nThanks for your answer. I am\
    \ not allowed to use any loops or conditionals. I only have to use loops and conditionals.\n\
    <|/ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each do |digit|\n\
    \    if digit == \"7\"\n      0\n    elsif digit == \"8\"\n      1\n    elsif\
    \ digit == \"9\"\n      2\n    elsif digit == \"11\"\n      3\n    elsif digit\
    \ == \"13\"\n      4\n    else\n      5\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz.call(50)`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `fizz_buzz.call(50)`. `fizz_buzz.call(50)`\
    \ returns `0` because `50` does not contain `7` or `8`.\n<|/ c |>\n<| c |>\nIt\
    \ returns `0` because `50` does not contain `7` or `8`. It returns `5` because\
    \ `50` does not contain `9`.\n<|/ c |>\n<| c |>\nIt returns `5` because `50` does\
    \ not contain `9`. `50` contains `7` and `8`, so `fizz_buzz.call(50)` returns\
    \ `5`.\n<|/ c |>\n<| c |>\nIt returns `5` because `50` does not contain `9`. `50`\
    \ contains `7` and `8`, so `fizz_buzz.call(50)` returns `5`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    i.to_i.times { |j| return\
    \ j if j % 11 == 0 || j % 13 == 0 }\n  end\n  0\nend", "  n.to_s.split(\"\").each\
    \ do |i|\n    if i % 11 == 0 || i % 13 == 0\n      puts i\n    end\n  end\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I didn't know about\
    \ `to_i` method. Could you please explain why you used `to_s.split(\"\")`? I thought\
    \ that `to_i` method converts string to integer and `split` method splits string\
    \ into array of characters. But why do we need to split string into array of characters?\n\
    <|/ c |>\n<| c |>\n`to_i` converts a string to a number. `split` splits a string\
    \ into an array of characters. `to_s.split(\"\")` splits the string into an array\
    \ of strings of length 1, each of which contains a single character of the original\
    \ string. `to_i` converts each string to a number, and `split` converts each character\
    \ to a string.\n<|/ c |>\n<| c |>\nThanks for explanation! I got it now.\n<|/\
    \ c |>\n<| a tags=ruby,fizzbuzz |>\n<code>", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == 7 && sum % 11 == 0 || digit == 7 &&\
    \ sum % 13 == 0\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i % 11\
    \ == 0 && i % 13 == 0\n      puts i\n    elsif i % 11 == 0\n      puts \"#{i}th\"\
    \n    elsif i % 13 == 0\n      puts \"#{i.to_s.rjust(3)}th\"\n    else\n     \
    \ puts i\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,fizzbuzz |>\n<| c |>\n\
    I like your solution, but I believe it can be simplified a bit. `n.to_s.split(\"\
    \").each do |i| puts i % 11 == 0 ? i : i.to_s.rjust(3)+\"th\" end`\n<|/ c |>\n\
    <| c |>\nI like your solution, but I believe it can be simplified a bit. `n.to_s.split(\"\
    \").each do |i| puts i % 11 == 0 ? i : i.to_s.rjust(3)+\"th\" end`\n<|/ c |>\n\
    <| c |>\nI like your solution, but I believe it can be simplified a bit. `n.to_s.split(\"\
    \").each do |i| puts i % 11 == 0 ? i : i.to_s.rjust(3)+\"th\" end`\n<|/ c |>\n\
    <| c |>\nI like your solution, but I believe it can be simplified a bit. `n.to_s.split(\"\
    \").each do |i| puts i % 11 == 0 ? i : i.to_s.rjust(3)+\"th\" end`\n<|/ c |>\n\
    <| c |>\nI like your solution, but I believe it can be simplified a bit. `n.to_s.split(\"\
    \").each do |i| puts i % 11 == 0 ? i : i.to_s.rjust(3)+\"th\" end`\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  n.to_s.split(\"\").each do |i|\n    if i.to_i %\
    \ 11 == 0 or i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  return\
    \ n.to_s.split(//).select { |x| x.to_s.include?('7') }.count('7')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
