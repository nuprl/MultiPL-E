name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef\
  \ sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,sorting,string |>\n<| a dscore=2 |>\n<code>",
  "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=5 tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend\n\
    </code>\n<|/ a dscore=5 tags=ruby,sorting,arrays |>\n<| c |>\nI like how you used\
    \ the splat operator to make the code more concise. Thanks!\n<|/ c |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to make it work with a hash\
    \ as well? I mean the hash can have numbers as keys and strings as values.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me in Ruby 2.4.  It gives me an \"undefined\
    \ method `split' for nil:NilClass\" error.  I changed it to `numbers.split(\"\
    \ \").sort.join(\" \")` and it works.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me in Ruby 2.4.  It gives me an \"undefined method `split' for nil:NilClass\"\
    \ error.  I changed it to `numbers.split(\" \").sort.join(\" \")` and it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me in Ruby 2.4.  It gives me an \"undefined\
    \ method `split' for nil:NilClass\" error.  I changed it to `numbers.split(\"\
    \ \").sort.join(\" \")` and it works.\n<|/ c |>\n<| a dscore=5 |>\n<code>", " \
    \ numbers = numbers.split(\" \").map { |n| n.to_i }\n  numbers.sort!\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a dscore=0\
    \ |>\n<code>", "  numbers.split(\" \").sort!\n  numbers.join(\" \")\nend", " \
    \ numbers = numbers.to_s\n  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split\n  numbers.sort!\n  numbers.join\n\
    end\n</code>\n<|/ a dscore=5 tags=ruby,ruby-on-rails |>\n<| c |>\nI like how you\
    \ used the splat operator to convert the string into an array. Very cool.\n<|/\
    \ c |>\n<| c |>\nI like this solution, but I feel like it could be improved. For\
    \ example, `sort_numbers(\"one two three\")` returns `\"one two three\"`, which\
    \ is not what we want. `sort_numbers(\"one two three four\")` returns `\"one two\
    \ three four\"`, which is what we want. `sort_numbers(\"one two three four five\"\
    )` returns `\"one two three four five\"`, which is what we want. `sort_numbers(\"\
    one two three four five six\")` returns `\"one two three four five six\"`, which\
    \ is what we want. `sort_numbers(\"one two three four five six seven\")` returns\
    \ `\"one two three four five six seven\"`, which is what we want. `sort_numbers(\"\
    one two three four five six seven eight\")` returns `\"one two three four five\
    \ six seven eight\"`, which is what we want. `sort_numbers(\"one two three four\
    \ five six seven eight nine\")` returns `\"one two three four five six seven eight\
    \ nine\"`, which is what we want. `sort_numbers(\"one two three four five six\
    \ seven eight nine ten\")` returns `\"one two three four five six seven eight\
    \ nine ten\"`, which is what we want. `sort_numbers(\"one two three four five\
    \ six seven eight nine ten eleven\")` returns `\"one two three four five six seven\
    \ eight nine ten eleven\"`, which is what we want. `sort_numbers(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")` returns `\"one two three\
    \ four five six seven eight nine ten eleven twelve\"`, which is what we want.\
    \ `sort_numbers(\"one two three four five six seven eight nine ten eleven twelve\
    \ thirteen\")` returns `\"one two three four five six seven eight nine ten eleven\
    \ twelve thirteen\"`, which is "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
