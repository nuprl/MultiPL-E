name: HumanEval_139_special_factorial
language: rb
prompt: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial.call(4)\n\
  # 288\n# The function will receive an integer as input and should return the special\n\
  # factorial of this integer.\ndef special_factorial(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_special_factorial\n\
  \    candidate = method(:special_factorial)\n    assert_equal(288, candidate.call(4))\n\
  \    assert_equal(34560, candidate.call(5))\n    assert_equal(125411328000, candidate.call(7))\n\
  \    assert_equal(1, candidate.call(1))\n  end\nend\n"
completions: ["  factorial = 1\n  while n > 0\n    factorial = factorial * n\n   \
    \ n -= 1\n  end\n  return factorial\nend", "  factorial = 1\n  while n > 0\n \
    \   factorial *= n\n    n -= 1\n  end\n  factorial\nend", "  factorial = 1\n \
    \ while n > 0\n    factorial *= n\n    n -= 1\n  end\n  factorial\nend", "  factorial\
    \ = 1\n  while n > 0\n    factorial *= n\n    n -= 1\n  end\n  factorial\nend",
  "  factorial = 1\n  while n > 0\n    factorial *= n\n    n -= 1\n  end\n  factorial\n\
    end", "  factorial = 1\n  while n > 0\n    factorial = factorial * n\n    n =\
    \ n - 1\n  end\n  factorial\nend", "  factorial = 1\n  while n > 0\n    factorial\
    \ *= n\n    n -= 1\n  end\n  factorial\nend", "  factorial = 1\n  while n > 0\n\
    \    factorial *= n\n    n -= 1\n  end\n  factorial\nend", "  factorial = 1\n\
    \  while n > 0\n    factorial *= n\n    n -= 1\n  end\n  factorial\nend", "  factorial\
    \ = 1\n  while n > 0\n    factorial *= n\n    n -= 1\n  end\n  factorial\nend",
  "  factorial = 1\n  while n > 0\n    factorial *= n\n    n -= 1\n  end\n  factorial\n\
    end", "  factorial = 1\n  while n > 0\n    factorial *= n\n    n -= 1\n  end\n\
    \  factorial\nend", "  if n < 0\n    puts \"The factorial of negative numbers\
    \ is undefined.\"\n  elsif n == 0\n    1\n  else\n    factorial(n) * special_factorial(n\
    \ - 1)\n  end\nend", "  factorial = 1\n  for i in 1..n\n    factorial *= i\n \
    \ end\n  factorial\nend", "  factorial = 1\n  while n > 0\n    factorial *= n\n\
    \    n -= 1\n  end\n  factorial\nend", "  factorial = 1\n  while n > 0\n    factorial\
    \ *= n\n    n -= 1\n  end\n  factorial\nend", "  factorial = 1\n  while n > 0\n\
    \    factorial *= n\n    n -= 1\n  end\n  factorial\nend", "  factorial = 1\n\
    \  while n > 0\n    factorial = factorial * n\n    n = n - 1\n  end\n  factorial\n\
    end", "  factorial = 1\n  while n > 0\n    factorial *= n\n    n -= 1\n  end\n\
    \  factorial\nend", "  factorial = 1\n  while n > 0\n    factorial *= n\n    n\
    \ -= 1\n  end\n  factorial\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
