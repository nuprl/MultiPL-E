name: HumanEval_21_rescale_to_unit
language: rb
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
  \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
  \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
  \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
  end\n"
completions: ["  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n\
    \ / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map! {|n| n / units.reduce(:+)}\nend", "  numbers.map {\
    \ |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.each_with_index do |number, index|\n   \
    \ if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    elsif number\
    \ > numbers[index - 1]\n      numbers[index - 1] = 1\n    end\n  end\n  numbers\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
