name: HumanEval_21_rescale_to_unit
language: rb
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
  \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
  \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
  \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
  end\n"
completions: ["  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n\
    \ / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map! {|n| n / units.reduce(:+)}\nend", "  numbers.map {\
    \ |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.each_with_index do |number, index|\n   \
    \ if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    elsif number\
    \ > numbers[index - 1]\n      numbers[index - 1] = 1\n    end\n  end\n  numbers\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / units.min\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / units.reduce(:*) }\nend", "  numbers.map { |n| n / numbers.min }\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each_with_index do |n, i|\n\
    \    if n < numbers.min\n      numbers[i] = 0\n    elsif n > numbers.max\n   \
    \   numbers[i] = 1\n    end\n  end\n  numbers\nend", "  numbers.map { |n| n /\
    \ numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers.max\n  end\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks for\
    \ your answer. I'm getting `undefined method 'each_with_index' for #<Array:0x007fd9f30c64e8>`\
    \ error when I try to use `each_with_index` method. I'm using ruby 2.1.5 with\
    \ rails 4.\n<|/ c |>\n<| c |>\nI updated my answer to use `each_with_index` instead\
    \ of `each`\n<|/ c |>\n<| c |>\nThanks for your answer. I'm getting `undefined\
    \ method 'each_with_index' for #<Array:0x007fd9f30c64e8>` error when I try to\
    \ use `each_with_index` method. I'm using ruby 2.1.5 with rails 4.\n<|/ c |>\n\
    <| c |>\nI updated my answer to use `each_with_index` instead of `each`\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I'm getting `undefined method 'each_with_index'\
    \ for #<Array:0x007fd9f30c64e8>` error when I try to use `each_with_index` method.\
    \ I'm using ruby 2.1.5 with rails 4.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map {\
    \ |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / numbers.min }\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / units.reduce(:+)\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map! { |n| n / numbers.max }\n  numbers.min!\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.each_with_index do |n, i|\n    if\
    \ i == 0\n      n\n    else\n      n / numbers[i - 1]\n    end\n  end\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index +\
    \ 1]\n      numbers[index + 1] = 1\n    end\n  end\nend", "  numbers.map { |n|\
    \ n / units.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map! do |number|\n    number / units.reduce(:*)\n  end\nend", "  numbers.map!\
    \ do |number|\n    number / units.reduce(:*)\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI like your solution, but I feel like it could be made more elegant\
    \ by using a `select` statement to filter out any numbers that are less than or\
    \ equal to zero. Also, `numbers.map!` could be replaced with `numbers.map`.\n\
    <|/ c |>\n<| c |>\nI agree with you on `select` statement. `map!` could be replaced\
    \ with `map` but that would not change the result. `map!` would mutate the original\
    \ array and `map` would return a new array without mutating the original array.\n\
    <|/ c |>\n<| c |>\nAh, I see what you mean. Yes, `map!` mutates the original array.\
    \ That's why I used `map` instead of `map!`. Thanks for the clarification.\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers[numbers.size - 1]\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers.min\n      numbers.min = 0\n    end\n    if n\
    \ > numbers.max\n      numbers.max = 1.0\n    end\n  end\n  numbers\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map!\
    \ do |number|\n    number / units.reduce(:+)\n  end\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map { |n| n / numbers.max }\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nThe solution by is great, but I thought I'd\
    \ add my own solution, since I needed it for my own project. \n<code>", "  numbers.map!\
    \ { |n| n / numbers.max }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| a dscore=2 |>\n<code>", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to call `min` and `max` on the array. Maybe `minmax` could do\
    \ it, but I haven't seen it yet.\n<|/ c |>\n<| c |>\nI like it, but I wonder if\
    \ there is a way to do this without having to call min and max on the array. Maybe\
    \ minmax could do it, but I haven't seen it yet.\n<|/ c |>\n<| c |>\nI like it,\
    \ but I wonder if there is a way to do this without having to call min and max\
    \ on the array. Maybe minmax could do it, but I haven't seen it yet.\n<|/ c |>\n\
    <| c |>\nI like it, but I wonder if there is a way to do this without having to\
    \ call min and max on the array. Maybe minmax could do it, but I haven't seen\
    \ it yet.\n<|/ c |>\n<| c |>\nI like it, but I wonder if there is a way to do\
    \ this without having to call min and max on the array. Maybe minmax could do\
    \ it, but I haven't seen it yet.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>",
  "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
