name: HumanEval_21_rescale_to_unit
language: rb
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
  \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
  \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
  \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
  \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
  end\n"
completions: ["  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n\
    \ / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map! {|n| n / units.reduce(:+)}\nend", "  numbers.map {\
    \ |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.each_with_index do |number, index|\n   \
    \ if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    elsif number\
    \ > numbers[index - 1]\n      numbers[index - 1] = 1\n    end\n  end\n  numbers\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / units.min\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / units.reduce(:*) }\nend", "  numbers.map { |n| n / numbers.min }\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.each_with_index do |n, i|\n\
    \    if n < numbers.min\n      numbers[i] = 0\n    elsif n > numbers.max\n   \
    \   numbers[i] = 1\n    end\n  end\n  numbers\nend", "  numbers.map { |n| n /\
    \ numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers.max\n  end\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks for\
    \ your answer. I'm getting `undefined method 'each_with_index' for #<Array:0x007fd9f30c64e8>`\
    \ error when I try to use `each_with_index` method. I'm using ruby 2.1.5 with\
    \ rails 4.\n<|/ c |>\n<| c |>\nI updated my answer to use `each_with_index` instead\
    \ of `each`\n<|/ c |>\n<| c |>\nThanks for your answer. I'm getting `undefined\
    \ method 'each_with_index' for #<Array:0x007fd9f30c64e8>` error when I try to\
    \ use `each_with_index` method. I'm using ruby 2.1.5 with rails 4.\n<|/ c |>\n\
    <| c |>\nI updated my answer to use `each_with_index` instead of `each`\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I'm getting `undefined method 'each_with_index'\
    \ for #<Array:0x007fd9f30c64e8>` error when I try to use `each_with_index` method.\
    \ I'm using ruby 2.1.5 with rails 4.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map {\
    \ |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / numbers.min }\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / units.reduce(:+)\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map! { |n| n / numbers.max }\n  numbers.min!\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.each_with_index do |n, i|\n    if\
    \ i == 0\n      n\n    else\n      n / numbers[i - 1]\n    end\n  end\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index +\
    \ 1]\n      numbers[index + 1] = 1\n    end\n  end\nend", "  numbers.map { |n|\
    \ n / units.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map! do |number|\n    number / units.reduce(:*)\n  end\nend", "  numbers.map!\
    \ do |number|\n    number / units.reduce(:*)\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI like your solution, but I feel like it could be made more elegant\
    \ by using a `select` statement to filter out any numbers that are less than or\
    \ equal to zero. Also, `numbers.map!` could be replaced with `numbers.map`.\n\
    <|/ c |>\n<| c |>\nI agree with you on `select` statement. `map!` could be replaced\
    \ with `map` but that would not change the result. `map!` would mutate the original\
    \ array and `map` would return a new array without mutating the original array.\n\
    <|/ c |>\n<| c |>\nAh, I see what you mean. Yes, `map!` mutates the original array.\
    \ That's why I used `map` instead of `map!`. Thanks for the clarification.\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers[numbers.size - 1]\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers.min\n      numbers.min = 0\n    end\n    if n\
    \ > numbers.max\n      numbers.max = 1.0\n    end\n  end\n  numbers\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map!\
    \ do |number|\n    number / units.reduce(:+)\n  end\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map { |n| n / numbers.max }\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nThe solution by is great, but I thought I'd\
    \ add my own solution, since I needed it for my own project. \n<code>", "  numbers.map!\
    \ { |n| n / numbers.max }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| a dscore=2 |>\n<code>", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.min!=0\n\
    \  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to call `min` and `max` on the array. Maybe `minmax` could do\
    \ it, but I haven't seen it yet.\n<|/ c |>\n<| c |>\nI like it, but I wonder if\
    \ there is a way to do this without having to call min and max on the array. Maybe\
    \ minmax could do it, but I haven't seen it yet.\n<|/ c |>\n<| c |>\nI like it,\
    \ but I wonder if there is a way to do this without having to call min and max\
    \ on the array. Maybe minmax could do it, but I haven't seen it yet.\n<|/ c |>\n\
    <| c |>\nI like it, but I wonder if there is a way to do this without having to\
    \ call min and max on the array. Maybe minmax could do it, but I haven't seen\
    \ it yet.\n<|/ c |>\n<| c |>\nI like it, but I wonder if there is a way to do\
    \ this without having to call min and max on the array. Maybe minmax could do\
    \ it, but I haven't seen it yet.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>",
  "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map! { |n| n / numbers.max }\n  numbers.min!\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    \  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    numbers[index] = number / numbers[numbers.size - 1]\n  end\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map! {|n| n / units.reduce(:+)}\n\
    end", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map! do |number|\n\
    \    number / numbers.max\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `numbers.max` will always return `nil` since `numbers` is an array.\n\
    <|/ c |>\n<| c |>\nI didn't say it wouldn't, I said it wouldn't. `numbers.max`\
    \ will always return `nil` because `numbers` is an array. `numbers.max` will always\
    \ return `nil` because `numbers` is an array. `numbers.max` will always return\
    \ `nil` because `numbers` is an array. `numbers.max` will always return `nil`\
    \ because `numbers` is an array. `numbers.max` will always return `nil` because\
    \ `numbers` is an array. `numbers.max` will always return `nil` because `numbers`\
    \ is an array. `numbers.max` will always return `nil` because `numbers` is an\
    \ array. `numbers.max` will always return `nil` because `numbers` is an array.\
    \ `numbers.max` will always return `nil` because `numbers` is an array. `numbers.max`\
    \ will always return `nil` because `numbers` is an array. `numbers.max` will always\
    \ return `nil` because `numbers` is an array. `numbers.max` will always return\
    \ `nil` because `numbers` is an array. `numbers.max` will always return `nil`\
    \ because `numbers` is an array. `numbers.max` will always return `nil` because\
    \ `numbers` is an array. `numbers.max` will always return `nil` because `numbers`\
    \ is an array. `numbers.max` will always return `nil` because `numbers` is an\
    \ array. `numbers.max` will always return `nil` because `numbers` is an array.\
    \ `numbers.max` will always return `nil` because `numbers` is an array. `numbers.max`\
    \ will always return `nil` because `numbers` is an array. `numbers.max` will always\
    \ return `nil` because `numbers` is an array. `numbers.max` will always return\
    \ `nil` because `numbers` is an array. `numbers.max` will always return `nil`\
    \ because `numbers` is an array. `numbers.max` will always return `nil` because\
    \ `numbers` is an array. `numbers.max` will always return `nil` because `numbers`\
    \ is an array. `numbers.max` will always return `nil` because `numbers` is an\
    \ array. `numbers.max` will always ", "  numbers.map { |n| n / numbers.min }\n\
    end", "  numbers.each_with_index do |number, index|\n    numbers[index] = number\
    \ / numbers.max\n  end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if you have a list of negative numbers. For example, `[-0.5, -0.4, -0.3,\
    \ -0.2, -0.1]` returns `[-0.5, -0.4, -0.3, -0.2, -0.1]`.\n<|/ c |>\n<| c |>\n\
    I added a version that works with negative numbers. I hope it helps.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for `[-0.5, -0.4, -0.3, -0.2, -0.1]` returns `[-0.5,\
    \ -0.4, -0.3, -0.2, -0.1]`.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ negative numbers. I hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n<code>", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   end\n    if number > numbers[index + 1]\n      numbers[index + 1] = 1\n  \
    \  end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nThe simplest way is to use\
    \ Enumerable#each_cons:\n<code>", "  numbers.each_with_index do |number, index|\n\
    \    numbers[index] = number / numbers[numbers.size-1]\n  end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `numbers` should be an\
    \ array of numbers, not an array of arrays of numbers. `numbers.size` will always\
    \ be `1`.\n<|/ c |>\n<| c |>\nAh, I see what you mean. I've edited my answer to\
    \ reflect that.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  numbers.map { |n| n /\
    \ numbers.max }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index +\
    \ 1]\n      numbers[index + 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers[index].abs\n  end\n\
    end", "  numbers.map { |n| n / numbers.max }\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to do this without\
    \ having to call `max` twice. Perhaps some sort of `Enumerable#each_with_max`\
    \ method?\n<|/ c |>\n<| c |>\nI added a version that doesn't call `max` twice,\
    \ but I still think it's more readable than `each_with_max`.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do this without having\
    \ to call `max` twice. Perhaps some sort of `Enumerable#each_with_max` method?\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't call `max` twice, but I still\
    \ think it's more readable than `each_with_max`.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I wonder if there is a way to do this without having to call `max`\
    \ twice. Perhaps some sort of `Enumerable#each_with_max` method?\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI like your solution, but I wonder if there is a way to do this\
    \ without having to call max twice. Perhaps some sort of Enumerable#each_with_max\
    \ method?", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.each_with_index do |number, index|\n    if number < numbers[index - 1]\n\
    \      numbers[index - 1] = 0\n    end\n    if number > numbers[index + 1]\n \
    \     numbers[index + 1] = 1\n    end\n  end\nend", "  numbers.each_with_index\
    \ do |number, index|\n    numbers[index] = number / numbers[numbers.size - 1]\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your\
    \ answer. I've tried your solution and it works great, but I still have one problem.\
    \ I've added a screenshot of my results to my question. As you can see, my results\
    \ are still not correct. Can you please take a look at my screenshot?\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated my answer with a new solution that\
    \ should work better for you.\n<|/ c |>\n<| c |>\nThanks again, your new solution\
    \ works great. I've marked your answer as accepted and upvoted your answer. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map {\
    \ |n| n / numbers.min }\nend", "  numbers.map! do |number|\n    number / units.reduce(:+)\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like this solution,\
    \ but I wonder if there's a way to do it without having to call `to_f` on every\
    \ number in the array. Maybe there's a way to do it with Enumerable#inject?\n\
    <|/ c |>\n<| c |>\nI added an answer that uses `inject` instead of `map!`\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.map { |n| n / numbers.reduce(:+)\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.each_with_index do |number, index|\n   \
    \ if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n    if\
    \ number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    end", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max\
    \ }\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n \
    \   if number > numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\n\
    end", "  numbers.map { |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.each_with_index do |n,\
    \ i|\n    numbers[i] = ((n - numbers.min) / (numbers.max - numbers.min)) * (numbers.max\
    \ - numbers.min) + numbers.min\n  end\n  numbers\nend", "  numbers.map { |n| n\
    \ / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.each_with_index do |number, index|\n    if number < numbers[index - 1]\n\
    \      numbers[index - 1] = 0\n    end\n    if number > numbers[index + 1]\n \
    \     numbers[index + 1] = 1\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer! I actually want to do this in Ruby on Rails\
    \ so I added the tag to my question. Do you know how I can do this in Ruby on\
    \ Rails?\n<|/ c |>\n<| c |>\nI added a Rails solution to my answer.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I actually want to do this in Ruby on Rails so\
    \ I added the tag to my question. Do you know how I can do this in Ruby on Rails?\n\
    <|/ c |>\n<| c |>\nI added a Rails solution to my answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! I actually want to do this in Ruby on Rails so I added\
    \ the tag to my question. Do you know how I can do this in Ruby on Rails?\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.each_with_index do\
    \ |number, index|\n    if number < numbers[index - 1]\n      numbers[index - 1]\
    \ = 0\n    elsif number > numbers[index - 1]\n      numbers[index - 1] = 1\n \
    \   end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|n| n/numbers.max}\nend", "  numbers.min!=0\n  numbers.max!=1\n\
    \  numbers.map!{|x| x/numbers.max}\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map! { |n| n / numbers.max }\n  numbers.min!\n\
    \  numbers\nend", "  numbers.map { |n| n / units.reduce(:+) }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    elsif number > numbers[index - 1]\n      numbers[index - 1] =\
    \ 1\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't\
    \ work if the array is `[1,2,3,4,5]`\n<|/ c |>\n<| c |>\nIt does work. `[1,2,3,4,5]`\
    \ becomes `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ you give it `[1,2,3,4,5]`\n<|/ c |>\n<| c |>\nIt does work. `[1,2,3,4,5]` becomes\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nIt doesn't work if you give\
    \ it `[1,2,3,4,5]`\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  numbers.each_with_index\
    \ do |n, i|\n    if n < numbers[i-1]\n      numbers[i] = numbers[i-1] / n\n  \
    \  end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.reduce(:+) }\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ numbers.each_with_index do |number, index|\n    numbers[index] = number / numbers[index].abs\n\
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the numbers\
    \ are negative.\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ numbers.\n<|/ c |>\n<| c |>\nThis doesn't work if the numbers are negative.\n\
    <|/ c |>\n<| c |>\nI added a version that works with negative numbers.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if the numbers are negative.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.reduce(:+) }\nend", "  numbers.map { |n| n / units.reduce(:+)\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map! do |number|\n\
    \    number / units.reduce(:*)\n  end\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   end\n    if number > numbers[index + 1]\n      numbers[index + 1] = 1\n  \
    \  end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / units.reduce(:+) }\nend", "  numbers.each_with_index do\
    \ |number, index|\n    if number > 1.0\n      numbers[index] = number - 1.0\n\
    \    end\n  end\nend", "  numbers.each_with_index do |number, index|\n    if number\
    \ < numbers[index - 1]\n      numbers[index - 1] = 0\n    end\n    if number >\
    \ numbers[index + 1]\n      numbers[index + 1] = 1\n    end\n  end\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n|\
    \ n / numbers.max }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map\
    \ { |n| n / numbers.reduce(:+) }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   elsif number > numbers[index - 1]\n      numbers[index - 1] = 1\n    end\n\
    \  end\nend", "  numbers.map { |n| n / numbers.max }\nend", "  numbers.map { |n|\
    \ n / numbers.min }\nend", "  numbers.each_with_index do |number, index|\n   \
    \ numbers[index] = number / numbers[numbers.size-1]\n  end\nend", "  numbers.map\
    \ { |n| n / numbers.max }\nend", "  numbers.each_with_index do |number, index|\n\
    \    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n      numbers[index]\
    \ = number\n    end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index\
    \ do |number, index|\n    if number < numbers[index - 1]\n      numbers[index\
    \ - 1] = 0\n    end\n    if number > numbers[index + 1]\n      numbers[index +\
    \ 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min\
    \ }\nend", "  numbers.each_with_index do |number, index|\n    if number < numbers[index\
    \ - 1]\n      numbers[index - 1] = 0\n    end\n    if number > numbers[index +\
    \ 1]\n      numbers[index + 1] = 1\n    end\n  end\n  numbers\nend", "  numbers.map\
    \ { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.max }\nend",
  "  numbers.min!=0\n  numbers.max!=1\n  numbers.map!{|x| x/numbers.max}\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.reduce(:+)\
    \ }\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to avoid the looping through the array twice. Maybe some kind\
    \ of memoization?\n<|/ c |>\n<| c |>\n: I added a memoization solution to my answer.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid\
    \ the looping through the array twice. Maybe some kind of memoization?\n<|/ c\
    \ |>\n<| c |>\n: I added a memoization solution to my answer.\n<|/ c |>\n<| c\
    \ |>\nI like your solution, but I wonder if there is a way to avoid the looping\
    \ through the array twice. Maybe some kind of memoization?\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  numbers.map { |n| n / numbers.min }\nend", "  numbers.map {\
    \ |n| n / numbers.min }\nend", "  numbers.map { |n| n / numbers.min }\nend", " \
    \ numbers.map { |n| n / numbers.min }\nend", "  numbers.each_with_index do |number,\
    \ index|\n    if number < numbers[index - 1]\n      numbers[index - 1] = 0\n \
    \   end\n    if number > numbers[index + 1]\n      numbers[index + 1] = 1\n  \
    \  end\n  end\n  numbers\nend", "  numbers.map { |n| n / numbers.min }\nend",
  "  numbers.each_with_index do |number, index|\n    if number > 1.0\n      numbers[index]\
    \ = number / 1.0\n    end\n  end\n  numbers\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
