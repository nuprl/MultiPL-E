name: HumanEval_2_truncate_number
language: rb
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number.call(3.5)\n# 0.5\ndef truncate_number(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_truncate_number\n\
  \    candidate = method(:truncate_number)\n    assert_equal(0.5, candidate.call(3.5))\n\
  \    assert_equal(0.25, candidate.call(1.25))\n    assert_equal(0.0, candidate.call(123.0))\n\
  \  end\nend\n"
completions: ["  number = number.to_f\n  decimals = number % 1\n  number -= decimals\n\
    \  truncate_number = number\nend", "  number = number.to_f\n  decimals = number\
    \ % 1\n  number = number - decimals\n  number = number / 1\n  return number\n\
    end", "  number, decimals = number.to_s.split('.')\n  decimals.delete('0')\n \
    \ return number.to_f / BigDecimal.new(10 ** decimals.to_i)\nend", "  number =\
    \ number.to_f\n  decimals = number % 1\n  number -= decimals\n  number = number.floor\n\
    \  number /= 1\n  return number\nend", "  number, decimals = number.divmod(1)\n\
    \  decimals\nend", "  return number.to_s.split(\".\")[0].to_f\nend", "  return\
    \ number.truncate if number.respond_to?(:truncate)\n  number.to_s.split('.')[0].to_i\n\
    end", "  number = number.to_f\n  decimal = number % 1\n  number = number - decimal\n\
    \  number = number.floor\n  number = number / 1\n  number = number.to_i\n  return\
    \ number + decimal\nend", "  return number.to_s.split(\".\")[0].to_f\nend", " \
    \ decimals = number.to_s.split('.')[1]\n  number = number.to_s.split('.')[0]\n\
    \  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n \
    \ number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n\
    \  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n \
    \ number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n\
    \  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n \
    \ number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n\
    \  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n \
    \ number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n\
    \  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n \
    \ number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n\
    \  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n \
    \ number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n\
    \  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n \
    \ number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n\
    \  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n \
    \ number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n\
    \  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n \
    \ number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n  number.to_f\n  number.to_i\n",
  "  number, decimals = number.divmod(1)\n  decimals\nend", "  number = number.to_f\n\
    \  decimals = number % 1\n  number = number - decimals\n  truncate_number = number\n\
    end", "  number = number.to_f\n  decimals = number % 1\n  number = number - decimals\n\
    \  number = number / 1\n  return number\nend", "  number = number.to_f\n  decimals\
    \ = number % 1\n  number = number - decimals\n  number = number.round\n  number\
    \ = number.to_i\n  number = number / 10\n  number = number.to_f\n  number = number\
    \ % 1\n  return number\nend", "  decimal = number.to_s.split('.')[1]\n  integer\
    \ = number.to_s.split('.')[0].to_i\n  \n  if integer > number\n    decimal\n \
    \ else\n    number\n  end\nend", "  number = number.to_f\n  decimals = number\
    \ % 1\n  number = number - decimals\n  truncate_number = number\nend", "  number\
    \ = number.to_f\n  decimals = number % 1\n  number -= decimals\n  number /= 1\n\
    \  number\nend", "  number, decimals = number.divmod(1)\n  decimals\nend", " \
    \ number = number.to_f\n  decimals = number % 1\n  number = number - decimals\n\
    \  number = number / 1\n  return number\nend", "  number = number.to_f\n  decimals\
    \ = number % 1\n  number -= decimals\n  number /= 1\n  number\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
