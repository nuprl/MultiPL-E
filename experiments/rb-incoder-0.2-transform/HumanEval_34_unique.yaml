name: HumanEval_34_unique
language: rb
prompt: "# Return sorted unique elements in a list\n# >>> unique.call([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\ndef unique(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique\n\
  \    candidate = method(:unique)\n    assert_equal([0, 2, 3, 5, 9, 123], candidate.call([5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123]))\n  end\nend\n"
completions: ["  l.uniq!\n  l\nend", "  l.sort!\n  l.reverse!\n  l.reject!{|i| l.index(i)\
    \ == l.lastIndex(i)}\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend",
  "  l.uniq!\n  l\nend", "  l.sort!\n  l.reverse!\n  l[1..-1].uniq!\nend", "  l.uniq!\n\
    \  l\nend", "  l.uniq!\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", " \
    \ l.uniq!\n  l\nend", "  l.uniq!\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\n\
    end", "  l.uniq!\nend", "  l.uniq!\n  l\nend", "  l.sort\n  l.reverse.uniq\nend",
  "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n\
    \  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.sort!\n  l.reverse!\n\
    \  l[1..-1].uniq!\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n\
    \  l\nend", "  l.sort\n  l.reverse.uniq\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n\
    \  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\nend", "  l.uniq!\n  l\nend", " \
    \ l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\nend", "  l.uniq!\n  l\n\
    end", "  l.uniq!\n  l\nend", "  l.sort!\n  l.reverse!\n  l.reject! {|e| l.include?(e)}\n\
    \  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend",
  "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n\
    \  l\nend", "  l.uniq!\n  l\nend", "  l.sort\n  l.reverse.uniq\nend", "  l.uniq!\n\
    \  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend",
  "  l.sort!\n  l.reverse!\n  l[1..-1].uniq!\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n\
    \  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend",
  "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.sort!\n  l.reverse!\n  l.reject!\
    \ {|x| l.include?(x)}\n  l\nend", "  l.uniq!\n  l\nend", "  l.sort!\n  l.reverse!\n\
    \  l.reject!{|i| l.include?(i)}\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n\
    \  l\nend", "  l.sort\n  l.reject { |e| l.count(e) == 1 }\nend", "  l.uniq!\n\
    \  l\nend", "  l.uniq!\n  l\nend", "  l.sort\n  l.reverse\n  l.pop\n  l.uniq\n\
    end", "  l.sort!\n  l.reverse!\n  l.reject!(&:zero?)\n  l\nend", "  l.uniq!\n\
    end", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", "  l.uniq!\n  l\nend", " \
    \ l.uniq!\n  l\nend", "  l.uniq!\n  l\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
