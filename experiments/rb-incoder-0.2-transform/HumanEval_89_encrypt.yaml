name: HumanEval_89_encrypt
language: rb
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"\
  et\")\n# \"ix\"\ndef encrypt(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n\
  \    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"\
  ))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"\
  kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n\
  \    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"\
  lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  , candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"\
  e\", candidate.call(\"a\"))\n  end\nend\n"
completions: ["  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == char.upcase\n\
    \    next if char == char.downcase\n    next if char == char.capitalize\n    next\
    \ if char == char.swapcase\n    char.upcase!\n  end\n  s\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == chars.last\n \
    \   chars.rotate(index).first\n  end.join\nend", "  s.gsub(/./) do |c|\n    alphabet\
    \ = c.to_s.split('')\n    alphabet.rotate(2).map{|c| c.to_s}.join\n  end\nend",
  "  s.chars.each_with_index do |char, i|\n    next if char == \" \"\n    char.upcase!\n\
    \    char.rotate!\n    char.downcase!\n    char.rotate!\n    char.upcase!\n  \
    \  char.rotate!\n  end\n  s\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = %w[a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z]\n  s.chars.map { |c| alphabet.index(c.upcase)\
    \ }.inject(:*)\nend", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n\
    \    s[i-1] = c.chr + s[i-1]\n  end\n  s\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 2]\n\
    \  end.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr\
    \ * 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == 'Z'\n    next if c.downcase == 'Z'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase ", " \
    \ s.chars.each do |c|\n    next if c.downcase == 'z'\n    next if c.downcase ==\
    \ 'a'\n    next if c.downcase == 'e'\n    next if c.downcase == 'i'\n    next\
    \ if c.downcase == 'o'\n    next if c.downcase == 'u'\n    next if c.downcase\
    \ == 'y'\n    next if c.downcase == 'k'\n    next if c.downcase == 'j'\n    next\
    \ if c.downcase == 'l'\n    next if c.downcase == 'f'\n    next if c.downcase\
    \ == 'c'\n    next if c.downcase == 'q'\n    next if c.downcase == 'p'\n    next\
    \ if c.downcase == 'm'\n    next if c.downcase == 'n'\n    next if c.downcase\
    \ == 'h'\n    next if c.downcase == 'r'\n    next if c.downcase == 's'\n    next\
    \ if c.downcase == 't'\n    next if c.downcase == 'x'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'x'\n    next if c.downcase == 'y'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.down", " \
    \ s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr + c.chr }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work for all inputs.\
    \ For example, `encrypt(\"hi\")` returns `\"lm\"`, but `encrypt(\"asdfghjkl\"\
    )` returns `\"ewhjklnop\"`.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for my\
    \ test cases. However, I decided to go with another solution that I posted below.\n\
    <|/ c |>\n<| a dscore=1 |>\nI decided to go with another solution that I posted\
    \ below. \n<code>", "  s.chars.each_with_index do |char, index|\n    next if index\
    \ == 0\n    char.upcase!\n    char.rotate!\n    char.downcase!\n  end\n  s\nend",
  "  s.chars.each_with_index do |char, index|\n    next if index == 0\n    next if\
    \ char == chars.last\n    chars.rotate(index).first\n  end.join\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if char == \" \"\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)",
  "  s.chars.each_with_index do |char, index|\n    next if char == \" \"\n    next\
    \ if index == s.length\n    next if char == \"z\"\n    next if char == \"a\"\n\
    \    next if char == \"b\"\n    next if char == \"c\"\n    next if char == \"\
    d\"\n    next if char == \"e\"\n    next if char == \"f\"\n    next if char ==\
    \ \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n    next if char\
    \ == \"j\"\n    next if char == \"k\"\n    next if char == \"l\"\n    next if\
    \ char == \"m\"\n    next if char == \"n\"\n    next if char == \"o\"\n    next\
    \ if char == \"p\"\n    next if char == \"q\"\n    next if char == \"r\"\n   \
    \ next if char == \"s\"\n    next if char == \"t\"\n    next if char == \"u\"\n\
    \    next if char == \"v\"\n    next if char == \"w\"\n    next if char == \"\
    x\"\n    next if char == \"y\"\n    next if char == \"z\"\n    next if char ==\
    \ \"a\"\n    next if char == \"b\"\n    next if char == \"c\"\n    next if char\
    \ == \"d\"\n    next if char == \"e\"\n    next if char == \"f\"\n    next if\
    \ char == \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n    next\
    \ if char == \"j\"\n    next if char == \"k\"\n    next if char == \"l\"\n   \
    \ next if char == \"m\"\n    next if char == \"n\"\n    next if char == \"o\"\n\
    \    next if char == \"p\"\n    next if char == \"q\"\n    next if char == \"\
    r\"\n    next if char == \"s\"\n    next if char == \"t\"\n    next if char ==\
    \ \"u\"\n    next if char == \"v\"\n    next if char == \"w\"\n    next if char\
    \ == \"x\"\n    next if char == \"y\"\n    next if char == \"z\"\n    next if\
    \ char == \"a\"\n    next if char == \"b\"\n    next if char == \"c\"\n    next\
    \ if char == \"d\"\n    next if char == \"e\"\n    next if char == \"f\"\n   \
    \ next if char == \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n\
    \    next if char == \"j\"\n    next if char == \"k\"\n    ", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == s.length\n    next if c.upcase == c.downcase\n \
    \   next if c.upcase == \"A\" && c.downcase == \"Z\"\n    next if c.upcase ==\
    \ \"a\" && c.downcase == \"z\"\n    next if c.upcase == \"0\" && c.downcase ==\
    \ \"9\"\n    next if c.upcase == \"1\" && c.downcase == \"2\"\n    next if c.upcase\
    \ == \"3\" && c.downcase == \"4\"\n    next if c.upcase == \"5\" && c.downcase\
    \ == \"6\"\n    next if c.upcase == \"7\" && c.downcase == \"8\"\n    next if\
    \ c.upcase == \"9\" && c.downcase == \"0\"\n    next if c.upcase == \"A\" && c.downcase\
    \ == \"Z\"\n    next if c.upcase == \"a\" && c.downcase == \"z\"\n    next if\
    \ c.upcase == \"0\" && c.downcase == \"9\"\n    next if c.upcase == \"1\" && c.downcase\
    \ == \"2\"\n    next if c.upcase == \"3\" && c.downcase == \"4\"\n    next if\
    \ c.upcase == \"5\" && c.downcase == \"6\"\n    next if c.upcase == \"7\" && c.downcase\
    \ == \"8\"\n    next if c.upcase == \"9\" && c.downcase == \"0\"\n    next if\
    \ c.upcase == \"A\" && c.downcase == \"Z\"\n    next if c.upcase == \"a\" && c.downcase\
    \ == \"z\"\n    next if c.upcase == \"0\" && c.downcase == \"9\"\n    next if\
    \ c.upcase == \"1\" && c.downcase == \"2\"\n    next if c.upcase == \"3\" && c.downcase\
    \ == \"4\"\n    next if c.upcase == \"5\" && c.downcase == \"6\"\n    next if\
    \ c.upcase == \"7\" && c.downcase == \"8\"\n    next if c.upcase == \"9\" && c.downcase\
    \ == \"0\"\n    next if c.upcase == \"A\" && c.downcase == \"Z\"\n    next if\
    \ c.upcase == \"a\" && c.downcase == \"z\"\n    next if c.upcase == \"0\" && c.downcase\
    \ == \"9\"\n    next if c.upcase == \"1\" && c.downcase == \"2\"\n    next if\
    \ c.upcase == \"3\" && c.downcase == \"4\"\n    next if c.upcase == \"5\" && c.downcase\
    \ == \"6\"\n    next if c.upcase == \"7\" && ", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |c, i|\n  \
    \  next if i == 0\n    next if c.upcase == c.downcase\n    next if c.upcase ==\
    \ \"A\"\n    next if c.upcase == \"Z\"\n    next if c.upcase == \"a\"\n    next\
    \ if c.upcase == \"z\"\n    next if c.upcase == \"0\"\n    next if c.upcase ==\
    \ \"9\"\n    next if c.upcase == \".\"\n    next if c.upcase == \",\"\n    next\
    \ if c.upcase == \"!\"\n    next if c.upcase == \"?\"\n    next if c.upcase ==\
    \ \"-\"\n    next if c.upcase == \"_\"\n    next if c.upcase == \"/\"\n    next\
    \ if c.upcase == \"-\"\n    next if c.upcase == \"=\"\n    next if c.upcase ==\
    \ \"+\"\n    next if c.upcase == \"%\"\n    next if c.upcase == \"*\"\n    next\
    \ if c.upcase == \"&\"\n    next if c.upcase == \"(\"\n    next if c.upcase ==\
    \ \")\"\n    next if c.upcase == \"[\"\n    next if c.upcase == \"]\"\n    next\
    \ if c.upcase == \"{\"\n    next if c.upcase == \"}\"\n    next if c.upcase ==\
    \ \"|\"\n    next if c.upcase == \"~\"\n    next if c.upcase == \"^\"\n    next\
    \ if c.upcase == \"`\"\n    next if c.upcase == \"'\"\n    next if c.upcase ==\
    \ \"<\"\n    next if c.upcase == \"=\"\n    next if c.upcase == \">\"\n    next\
    \ if c.upcase == \"?\"\n    next if c.upcase == \"@\"\n    next if c.upcase ==\
    \ \"[\"\n    next if c.upcase == \"]\"\n    next if c.upcase == \"}\"\n    next\
    \ if c.upcase == \"\\\\\"\n    next if c.upcase == \"|\"\n    next if c.upcase\
    \ == \"~\"\n    next if c.upcase == \"^\"\n    next if c.upcase == \"`\"\n   \
    \ next if c.upcase == \"'\"\n    next if c.upcase == \"<\"\n    next if c.upcase\
    \ == \"=\"\n    next if c.upcase == \">\"\n    next if c.upcase == \"?\"\n   \
    \ next if c.upcase == \"@\"\n    next if c.upcase == \"[\"\n    next if c.upcase\
    \ == \"]\"\n    ", "  alphabet = %w[a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z]\n  s.chars.map { |c| alphabet.index(c.downcase) }.inject(:<<)\nend",
  "  s.chars.each do |c|\n    next if c.nil?\n    next if c.length == 0\n    next\
    \ if c.length == 1\n    next if c.length == 2\n    next if c.length == 3\n   \
    \ next if c.length == 4\n    next if c.length == 5\n    next if c.length == 6\n\
    \    next if c.length == 7\n    next if c.length == 8\n    next if c.length ==\
    \ 9\n    next if c.length == 10\n    next if c.length == 11\n    next if c.length\
    \ == 12\n    next if c.length == 13\n    next if c.length == 14\n    next if c.length\
    \ == 15\n    next if c.length == 16\n    next if c.length == 17\n    next if c.length\
    \ == 18\n    next if c.length == 19\n    next if c.length == 20\n    next if c.length\
    \ == 21\n    next if c.length == 22\n    next if c.length == 23\n    next if c.length\
    \ == 24\n    next if c.length == 25\n    next if c.length == 26\n    next if c.length\
    \ == 27\n    next if c.length == 28\n    next if c.length == 29\n    next if c.length\
    \ == 30\n    next if c.length == 31\n    next if c.length == 32\n    next if c.length\
    \ == 33\n    next if c.length == 34\n    next if c.length == 35\n    next if c.length\
    \ == 36\n    next if c.length == 37\n    next if c.length == 38\n    next if c.length\
    \ == 39\n    next if c.length == 40\n    next if c.length == 41\n    next if c.length\
    \ == 42\n    next if c.length == 43\n    next if c.length == 44\n    next if c.length\
    \ == 45\n    next if c.length == 46\n    next if c.length == 47\n    next if c.length\
    \ == 48\n    next if c.length == 49\n    next if c.length == 50\n    next if c.length\
    \ == 51\n    next if c.length == 52\n    next if c.length == 53\n    next if c.length\
    \ == 54\n    next if c.length == 55\n    next if c.length == 56\n    next if c.length\
    \ == 57\n    next if c.length == 58\n    next if c.length == 59\n    next if c.length\
    \ == 60\n    next if c.length == 61\n    next if c.length == 62\n    next if c.length\
    \ == 63\n    next ", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 2]\n\
    \  end.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet =\
    \ alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet",
  "  s.chars.each_with_index do |char, i|\n    next if i == 0\n    char.upcase!\n\
    \    char.rotate!\n    char.downcase!\n  end\n  s\nend", "  alphabet = string.ascii_lowercase\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0.", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\n\
    end", "  s.chars.each_with_index do |char, index|\n    next if index == 0\n  \
    \  next if char == \"z\"\n    next if char == \"Z\"\n    next if char == \"z\"\
    \n    next if char == \"Z\"\n    char.upcase!\n    char.rotate!\n  end\n  s\n\
    end", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[0])+2]\n\
    \  alphabet", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord % 26 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.each_with_index do |c, i|\n\
    \    next if i == 0\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.down", "  s.chars.map { |c| c.ord %\
    \ 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ }.sort.map { |c| c.chr + c.chr }.join\nend", "  s.chars.each_with_index do |char,\
    \ index|\n    char = char.upcase\n    char.succ! if index == 0\n    char.succ!\
    \ if index == s.length - 1\n    char.succ! if index == s.length / 2\n    char.succ!\
    \ if index == s.length / 4\n    char.succ! if index == s.length / 8\n    char.succ!\
    \ if index == s.length / 16\n    char.succ! if index == s.length / 32\n    char.succ!\
    \ if index == s.length / 64\n    char.succ! if index == s.length / 128\n    char.succ!\
    \ if index == s.length / 256\n    char.succ! if index == s.length / 512\n    char.succ!\
    \ if index == s.length / 1024\n    char.succ! if index == s.length / 2048\n  \
    \  char.succ! if index == s.length / 4096\n    char.succ! if index == s.length\
    \ / 8192\n    char.succ! if index == s.length / 16384\n    char.succ! if index\
    \ == s.length / 32768\n    char.succ! if index == s.length / 65536\n    char.succ!\
    \ if index == s.length / 131072\n    char.succ! if index == s.length / 262144\n\
    \    char.succ! if index == s.length / 524288\n    char.succ! if index == s.length\
    \ / 1048576\n    char.succ! if index == s.length / 2097152\n    char.succ! if\
    \ index == s.length / 4194304\n    char.succ! if index == s.length / 8388608\n\
    \    char.succ! if index == s.length / 16777216\n    char.succ! if index == s.length\
    \ / 33554432\n    char.succ! if index == s.length / 67108864\n    char.succ! if\
    \ index == s.length / 134217728\n    char.succ! if index == s.length / 268435456\n\
    \    char.succ! if index == s.length / 536870912\n    char.succ! if index == s.length\
    \ / 1073741824\n    char.succ! if index == s.length / -2147483648\n    char.succ!\
    \ if index == s.length / -2147483648\n    char.succ! if index == s.length / -2147483648\n\
    \    char.succ! if index == s.length / -2147483648\n    char.succ! if index ==\
    \ s.length / -2147483648", "  s.chars.each_with_index do |char, i|\n    next if\
    \ char == \" \"\n    next if char == \"\\n\"\n    next if char == \"\\t\"\n  \
    \  next if char == \"\\r\"\n    next if char == \"\\v\"\n    next if char == \"\
    \\b\"\n    next if char == \"\\a\"\n    next if char == \"\\e\"\n    next if char\
    \ == \"\\f\"\n    next if char == \"\\o\"\n    next if char == \"\\v\"\n    next\
    \ if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char == \"\\o\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\e\"\n    next if char ==\
    \ \"\\f\"\n    next if char == \"\\o\"\n    next if char == \"\\v\"\n    next\
    \ if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char == \"\\o\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\e\"\n    next if char ==\
    \ \"\\f\"\n    next if char == \"\\o\"\n    next if char == \"\\v\"\n    next\
    \ if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char == \"\\o\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\e\"\n    next if char ==\
    \ \"\\f\"\n    next if char == \"\\o\"\n    next if char == \"\\v\"\n    next\
    \ if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char == \"\\o\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\e\"\n    next if char ==\
    \ \"\\f\"\n    next if char == \"\\o\"\n    next if char == \"\\v\"\n    next\
    \ if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char == \"\\o\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\e\"\n    next if char ==\
    \ \"\\f\"\n    next if char == \"\\o\"\n    next if char == \"\\v\"\n    next\
    \ if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char == \"\\o\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\e\"\n    next if char ==\
    \ \"\\f\"\n    next if char == \"\\o", "  s.chars.each_with_index do |char, index|\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.downcase if index > 0\n\
    \    char = char.upcase if index > 0\n    char = char.", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next if c.upcase == 'Z'\n\
    \    next if c.downcase == 'Z'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.upcase == '0'\n    next if c.downcase == '0'\n    next if c.upcase == '1'\n\
    \    next if c.downcase == '1'\n    next if c.upcase == '2'\n    next if c.downcase\
    \ == '2'\n    next if c.upcase == '3'\n    next if c.downcase == '3'\n    next\
    \ if c.upcase == '4'\n    next if c.downcase == '4'\n    next if c.upcase == '5'\n\
    \    next if c.downcase == '5'\n    next if c.upcase == '6'\n    next if c.downcase\
    \ == '6'\n    next if c.upcase == '7'\n    next if c.downcase == '7'\n    next\
    \ if c.upcase == '8'\n    next if c.downcase == '8'\n    next if c.upcase == '9'\n\
    \    next if c.downcase == '9'\n    next if c.upcase == '*'\n    next if c.downcase\
    \ == '*'\n    next if c.upcase == '+'\n    next if c.downcase == '+'\n    next\
    \ if c.upcase == '$'\n    next if c.downcase == '$'\n    next if c.upcase == '%'\n\
    \    next if c.downcase == '%'\n    next if c.upcase == '&'\n    next if c.downcase\
    \ == '&'\n    next if c.upcase == '#'\n    next if c.downcase == '#'\n    next\
    \ if c.upcase == '$'\n    next if c.downcase == '$'\n    next if c.upcase == '%'\n\
    \    next if c.downcase == '%'\n    next if c.upcase == '&'\n    next if c.downcase\
    \ == '&'\n    next if c.upcase == '#'\n    next if c.downcase == '#'\n    next\
    \ if c.upcase == '$'\n    next if c.downcase == '$'\n    next if c.upcase ", " \
    \ s.chars.each_with_index do |char, i|\n    next if i == 0\n    next if char ==\
    \ chars.last\n    chars.rotate(2).first << char\n  end\nend", "  s.chars.map {\
    \ |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.each_with_index do |char,\
    \ index|\n    next if index == 0\n    next if char == chars.first\n    next if\
    \ char == chars.last\n    chars.rotate(index).first\n  end\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if i == 0\n    next if char == chars.last\n    chars.rotate(-i).first\n\
    \  end\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == \"Z\"\n    next if c.downcase == \"Z\"\n    next if c.upcase\
    \ == \"A\"\n    next if c.downcase == \"A\"\n    next if c.upcase == \"a\"\n \
    \   next if c.downcase == \"a\"\n    next if c.upcase == \"b\"\n    next if c.downcase\
    \ == \"b\"\n    next if c.upcase == \"c\"\n    next if c.downcase == \"c\"\n \
    \   next if c.upcase == \"d\"\n    next if c.downcase == \"d\"\n    next if c.upcase\
    \ == \"e\"\n    next if c.downcase == \"e\"\n    next if c.upcase == \"f\"\n \
    \   next if c.downcase == \"f\"\n    next if c.upcase == \"g\"\n    next if c.downcase\
    \ == \"g\"\n    next if c.upcase == \"h\"\n    next if c.downcase == \"h\"\n \
    \   next if c.upcase == \"i\"\n    next if c.downcase == \"i\"\n    next if c.upcase\
    \ == \"j\"\n    next if c.downcase == \"j\"\n    next if c.upcase == \"k\"\n \
    \   next if c.downcase == \"k\"\n    next if c.upcase == \"l\"\n    next if c.downcase\
    \ == \"l\"\n    next if c.upcase == \"m\"\n    next if c.downcase == \"m\"\n \
    \   next if c.upcase == \"n\"\n    next if c.downcase == \"n\"\n    next if c.upcase\
    \ == \"o\"\n    next if c.downcase == \"o\"\n    next if c.upcase == \"p\"\n \
    \   next if c.downcase == \"p\"\n    next if c.upcase == \"q\"\n    next if c.downcase\
    \ == \"q\"\n    next if c.upcase == \"r\"\n    next if c.downcase == \"r\"\n \
    \   next if c.upcase == \"s\"\n    next if c.downcase == \"s\"\n    next if c.upcase\
    \ == \"t\"\n    next if c.downcase == \"t\"\n    next if c.upcase == \"u\"\n \
    \   next if c.downcase == \"u\"\n    next if c.upcase == \"v\"\n    next if c.downcase\
    \ == \"v\"\n    next if c.upcase == \"w\"\n    next if c.downcase == \"w\"\n \
    \   next ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == chars.first\n\
    \    next if char == chars.last\n    chars.rotate(index).first\n  end\nend", " \
    \ s.chars.map do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet\
    \ = alphabet[1..-1]\n  s.split(\"\").map { |c| alphabet.index(c) }.join\nend",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ }.sort.map { |c| c.chr + c.chr }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ }.sort.map { |c| c.chr }.join\nend\n</code>\n<|/ a tags=ruby,encryption,string\
    \ |>\n<| c |>\nI like your solution, but I believe that `s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.chr }.join` can be simplified to `s.chars.map { |c|\
    \ c.ord % 26 }.join`.\n<|/ c |>\n<| c |>\n: Yes, I agree. I was trying to keep\
    \ it close to OP's original code.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I believe that `s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join`\
    \ can be simplified to `s.chars.map { |c| c.ord % 26 }.join`.\n<|/ c |>\n<| c\
    \ |>\n: I agree. I was trying to keep it close to OP's original code. I'll update\
    \ my answer to reflect this.\n<|/ c |>\n<| a tags=ruby,encryption,string |>\n\
    <code>", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.downcase == c.upcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase\
    \ == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n\
    \    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase\
    \ == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n\
    \    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase\
    \ == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n\
    \    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase\
    \ == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n\
    \    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase\
    \ == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n\
    \    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase\
    \ == c.upcase\n    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n\
    \    next if c.downcase == c.upcase\n    next if c.downcase == c.upcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.downcase == c.up", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == chars.last\n \
    \   chars.rotate(index).first\n  end\nend", "  s.chars.each_with_index do |c,\
    \ i|\n    next if i == 0\n    next if c != s.chars[i-1]\n    next if c != s.chars[i+1]\n\
    \    next if c != s.chars[i+2]\n    next if c != s.chars[i+3]\n    next if c !=\
    \ s.chars[i+4]\n    next if c != s.chars[i+5]\n    next if c != s.chars[i+6]\n\
    \    next if c != s.chars[i+7]\n    next if c != s.chars[i+8]\n    next if c !=\
    \ s.chars[i+9]\n    next if c != s.chars[i+10]\n    next if c != s.chars[i+11]\n\
    \    next if c != s.chars[i+12]\n    next if c != s.chars[i+13]\n    next if c\
    \ != s.chars[i+14]\n    next if c != s.chars[i+15]\n    next if c != s.chars[i+16]\n\
    \    next if c != s.chars[i+17]\n    next if c != s.chars[i+18]\n    next if c\
    \ != s.chars[i+19]\n    next if c != s.chars[i+20]\n    next if c != s.chars[i+21]\n\
    \    next if c != s.chars[i+22]\n    next if c != s.chars[i+23]\n    next if c\
    \ != s.chars[i+24]\n    next if c != s.chars[i+25]\n    next if c != s.chars[i+26]\n\
    \    next if c != s.chars[i+27]\n    next if c != s.chars[i+28]\n    next if c\
    \ != s.chars[i+29]\n    next if c != s.chars[i+30]\n    next if c != s.chars[i+31]\n\
    \    next if c != s.chars[i+32]\n    next if c != s.chars[i+33]\n    next if c\
    \ != s.chars[i+34]\n    next if c != s.chars[i+35]\n    next if c != s.chars[i+36]\n\
    \    next if c != s.chars[i+37]\n    next if c != s.chars[i+38]\n    next if c\
    \ != s.chars[i+39]\n    next if c != s.chars[i+40]\n    next if c != s.chars[i+41]\n\
    \    next ", "  s.each_char do |c|\n    alphabet = ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 2]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2] = c\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 1] = alphabet\n  end\n  s.downcase!\n  s.gsub(/[^a-z]/i, '')\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  new_alphabet = alphabet[alphabet.index(alphabet)-alphab", "  alphabet = %w{a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z}\n  s.chars.map { |c| alphabet.index(c.upcase)\
    \ }.inject(:*)\nend", "  s.chars.each_with_index do |char, i|\n    char.upcase\
    \ if i % 2 == 0\n  end\nend", "  s.chars.each_with_index do |c, i|\n    next if\
    \ i == 0\n    next if c.upcase == c.downcase\n    next if c.upcase == \"Z\"\n\
    \    next if c.downcase == \"Z\"\n    next if c.upcase == \"A\"\n    next if c.downcase\
    \ == \"A\"\n    next if c.upcase == \"a\"\n    next if c.downcase == \"a\"\n \
    \   next if c.upcase == \"b\"\n    next if c.downcase == \"b\"\n    next if c.upcase\
    \ == \"c\"\n    next if c.downcase == \"c\"\n    next if c.upcase == \"d\"\n \
    \   next if c.downcase == \"d\"\n    next if c.upcase == \"e\"\n    next if c.downcase\
    \ == \"e\"\n    next if c.upcase == \"f\"\n    next if c.downcase == \"f\"\n \
    \   next if c.upcase == \"g\"\n    next if c.downcase == \"g\"\n    next if c.upcase\
    \ == \"h\"\n    next if c.downcase == \"h\"\n    next if c.upcase == \"i\"\n \
    \   next if c.downcase == \"i\"\n    next if c.upcase == \"j\"\n    next if c.downcase\
    \ == \"j\"\n    next if c.upcase == \"k\"\n    next if c.downcase == \"k\"\n \
    \   next if c.upcase == \"l\"\n    next if c.downcase == \"l\"\n    next if c.upcase\
    \ == \"m\"\n    next if c.downcase == \"m\"\n    next if c.upcase == \"n\"\n \
    \   next if c.downcase == \"n\"\n    next if c.upcase == \"o\"\n    next if c.downcase\
    \ == \"o\"\n    next if c.upcase == \"p\"\n    next if c.downcase == \"p\"\n \
    \   next if c.upcase == \"q\"\n    next if c.downcase == \"q\"\n    next if c.upcase\
    \ == \"r\"\n    next if c.downcase == \"r\"\n    next if c.upcase == \"s\"\n \
    \   next if c.downcase == \"s\"\n    next if c.upcase == \"t\"\n    next if c.downcase\
    \ == \"t\"\n    next if c.upcase == \"u\"\n    next if c.downcase == \"u\"\n \
    \   next if c.upcase == \"v\"\n    next if c.downcase == \"v\"\n    next if c.upcase\
    \ == \"w\"\n    next if c.downcase == \"w\"\n    next ", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |c, i|\n    next\
    \ if i == 0\n    next if c != s.chars[i-1]\n    next if c != s.chars[i-2]\n  \
    \  next if c != s.chars[i-3]\n    next if c != s.chars[i-4]\n    next if c !=\
    \ s.chars[i-5]\n    next if c != s.chars[i-6]\n    next if c != s.chars[i-7]\n\
    \    next if c != s.chars[i-8]\n    next if c != s.chars[i-9]\n    next if c !=\
    \ s.chars[i-10]\n    next if c != s.chars[i-11]\n    next if c != s.chars[i-12]\n\
    \    next if c != s.chars[i-13]\n    next if c != s.chars[i-14]\n    next if c\
    \ != s.chars[i-15]\n    next if c != s.chars[i-16]\n    next if c != s.chars[i-17]\n\
    \    next if c != s.chars[i-18]\n    next if c != s.chars[i-19]\n    next if c\
    \ != s.chars[i-20]\n    next if c != s.chars[i-21]\n    next if c != s.chars[i-22]\n\
    \    next if c != s.chars[i-23]\n    next if c != s.chars[i-24]\n    next if c\
    \ != s.chars[i-25]\n    next if c != s.chars[i-26]\n    next if c != s.chars[i-27]\n\
    \    next if c != s.chars[i-28]\n    next if c != s.chars[i-29]\n    next if c\
    \ != s.chars[i-30]\n    next if c != s.chars[i-31]\n    next if c != s.chars[i-32]\n\
    \    next if c != s.chars[i-33]\n    next if c != s.chars[i-34]\n    next if c\
    \ != s.chars[i-35]\n    next if c != s.chars[i-36]\n    next if c != s.chars[i-37]\n\
    \    next if c != s.chars[i-38]\n    next if c != s.chars[i-39]\n    next if c\
    \ != s.chars[i-40]\n    next if c != s.chars[i-41]\n    next if c != s.chars[i-42]\n\
    \    next if c != s.chars[i-43]\n    next if c != ", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.each_with_index do |char,\
    \ i|\n    next if char == \" \"\n    char.upcase! if i % 2 == 0\n    char.downcase!\
    \ if i % 2 == 1\n  end\n  s\nend", "  s.chars.each_with_index do |char, i|\n \
    \   next if char.upcase == char\n    next if i == 0\n    next if i == s.length\
    \ - 1\n    next if i == s.length - 2\n    next if i == s.length - 3\n    next\
    \ if i == s.length - 4\n    next if i == s.length - 5\n    next if i == s.length\
    \ - 6\n    next if i == s.length - 7\n    next if i == s.length - 8\n    next\
    \ if i == s.length - 9\n    next if i == s.length - 10\n    next if i == s.length\
    \ - 11\n    next if i == s.length - 12\n    next if i == s.length - 13\n    next\
    \ if i == s.length - 14\n    next if i == s.length - 15\n    next if i == s.length\
    \ - 16\n    next if i == s.length - 17\n    next if i == s.length - 18\n    next\
    \ if i == s.length - 19\n    next if i == s.length - 20\n    next if i == s.length\
    \ - 21\n    next if i == s.length - 22\n    next if i == s.length - 23\n    next\
    \ if i == s.length - 24\n    next if i == s.length - 25\n    next if i == s.length\
    \ - 26\n    next if i == s.length - 27\n    next if i == s.length - 28\n    next\
    \ if i == s.length - 29\n    next if i == s.length - 30\n    next if i == s.length\
    \ - 31\n    next if i == s.length - 32\n    next if i == s.length - 33\n    next\
    \ if i == s.length - 34\n    next if i == s.length - 35\n    next if i == s.length\
    \ - 36\n    next if i == s.length - 37\n    next if i == s.length - 38\n    next\
    \ if i == s.length - 39\n    next if i == s.length - 40\n    next if i == s.length\
    \ - 41\n    next if i == s.length - 42\n    next if i == s.length - 43\n    next\
    \ if i == s.length - 44\n    next if i == s.length - 45\n    next if i == s.length\
    \ - 46\n    next if i == s.length - 47\n    next if i == s.length - 48\n    next\
    \ if i == s.length - 49\n    next if i == s.length - 50\n    next if i == s.length\
    \ - 51\n    next if i == s.length - 52\n    next if i == s.length - 53\n    next\
    \ if i == s.length - 54\n    next if i == s.length - 55\n    next if i == s.length\
    \ - 56\n    next if i == s.length - 57\n    next if i == s.length - 58\n    next\
    \ if i == s.length - 59\n    next if i == s.length - 60\n    next if i == ", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c == s.chars.last\n    next if c\
    \ == s.chars.first\n    next if c == s.chars[i - 1]\n    next if c == s.chars[i\
    \ + 1]\n    next if c == s.chars[i + 2]\n    next if c == s.chars[i + 3]\n   \
    \ next if c == s.chars[i + 4]\n    next if c == s.chars[i + 5]\n    next if c\
    \ == s.chars[i + 6]\n    next if c == s.chars[i + 7]\n    next if c == s.chars[i\
    \ + 8]\n    next if c == s.chars[i + 9]\n    next if c == s.chars[i + 10]\n  \
    \  next if c == s.chars[i + 11]\n    next if c == s.chars[i + 12]\n    next if\
    \ c == s.chars[i + 13]\n    next if c == s.chars[i + 14]\n    next if c == s.chars[i\
    \ + 15]\n    next if c == s.chars[i + 16]\n    next if c == s.chars[i + 17]\n\
    \    next if c == s.chars[i + 18]\n    next if c == s.chars[i + 19]\n    next\
    \ if c == s.chars[i + 20]\n    next if c == s.chars[i + 21]\n    next if c ==\
    \ s.chars[i + 22]\n    next if c == s.chars[i + 23]\n    next if c == s.chars[i\
    \ + 24]\n    next if c == s.chars[i + 25]\n    next if c == s.chars[i + 26]\n\
    \    next if c == s.chars[i + 27]\n    next if c == s.chars[i + 28]\n    next\
    \ if c == s.chars[i + 29]\n    next if c == s.chars[i + 30]\n    next if c ==\
    \ s.chars[i + 31]\n    next if c == s.chars[i + 32]\n    next if c == s.chars[i\
    \ + 33]\n    next if c == s.chars[i + 34]\n    next if c == s.chars[i + 35]\n\
    \    next if c == s.chars[i + 36]\n    next if c == s.chars[i + 37]\n    next\
    \ if c == s.chars[i + 38]\n    next if c == s.chars[i + 39]\n    next if c ==\
    \ s.chars[i + 40]\n    next if c == s.chars[i + 41]\n    next if c == s.chars[i\
    \ + 42]\n    next if c == s.chars[i + 43]\n    next if c == ", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |char, index|\n\
    \    next if index == 0\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \  end\n  s\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  result = ''\n\
    \  for i in s\n    result += alphabet[(alphabet.index(i) + 2) % 26]\n  return\
    \ result\n</cell>\n<cell>", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.each_with_index do |char, index|\n    next if index == 0\n    next if\
    \ char == chars.first\n    next if char == chars.last\n    next if char == chars.first\n\
    \    next if char == chars.last\n    next if char == chars.first\n    next if\
    \ char == chars.last\n    next if char == chars.first\n    next if char == chars.last\n\
    \    next if char == chars.first\n    next if char == chars.last\n    next if\
    \ char == chars.first\n    next if char == chars.last\n    next if char == chars.first\n\
    \    next if char == chars.last\n    next if char == chars.first\n    next if\
    \ char == chars.last\n    next if char == chars.first\n    next if char == chars.last\n\
    \    next if char == chars.first\n    next if char == chars.last\n    next if\
    \ char == chars.first\n    next if char == chars.last\n    next if char == chars.first\n\
    \    next if char == chars.last\n    next if char == chars.first\n    next if\
    \ char == chars.last\n    next if char == chars.first\n    next if char == chars.last\n\
    \    next if char == chars.first\n    next if char == chars.last\n    next if\
    \ char == chars.first\n    next if char == chars.last\n    next if char == chars.first\n\
    \    next if char == chars.last\n    next if char == chars.first\n    next if\
    \ char == chars.last\n    next if char == chars.first\n    next if char == chars.last\n\
    \    next if char == chars.first\n    next if char == chars.last\n    next if\
    \ char == chars.first\n    next if char == chars.last\n    next if char == chars.first\n\
    \    next if char == chars.last\n    next if char == chars.first\n    next if\
    \ char == chars.last\n    next if char == chars.first\n    next if char == chars.last\n\
    \    next if char == chars.first\n    next if char == chars.last\n    next if\
    \ char == chars.first\n    next if char == chars.last\n    next if char == chars.first\n\
    \    next if char == chars.last\n    next if char == chars.", "  alphabet = %w(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z)\n  s.chars.map { |c| alphabet.index\
    \ c }.inject(:*)\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet) + 2] + alphabet[alphabet.index(alphabet)\
    \ - 2]\n  encrypted_string = \"\"\n  for i in s\n    encrypted_string += rotated_alphabet[alphabet.index(i)]\n\
    \  return encrypted_string\n</cell>\n<cell>", "  s.chars.map { |c| c.ord % 26\
    \ }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.map do |c|\n   \
    \ alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c != s.chars[i-1]\n    next if c\
    \ != s.chars[i-2]\n    next if c != s.chars[i-3]\n    next if c != s.chars[i-4]\n\
    \    next if c != s.chars[i-5]\n    next if c != s.chars[i-6]\n    next if c !=\
    \ s.chars[i-7]\n    next if c != s.chars[i-8]\n    next if c != s.chars[i-9]\n\
    \    next if c != s.chars[i-10]\n    next if c != s.chars[i-11]\n    next if c\
    \ != s.chars[i-12]\n    next if c != s.chars[i-13]\n    next if c != s.chars[i-14]\n\
    \    next if c != s.chars[i-15]\n    next if c != s.chars[i-16]\n    next if c\
    \ != s.chars[i-17]\n    next if c != s.chars[i-18]\n    next if c != s.chars[i-19]\n\
    \    next if c != s.chars[i-20]\n    next if c != s.chars[i-21]\n    next if c\
    \ != s.chars[i-22]\n    next if c != s.chars[i-23]\n    next if c != s.chars[i-24]\n\
    \    next if c != s.chars[i-25]\n    next if c != s.chars[i-26]\n    next if c\
    \ != s.chars[i-27]\n    next if c != s.chars[i-28]\n    next if c != s.chars[i-29]\n\
    \    next if c != s.chars[i-30]\n    next if c != s.chars[i-31]\n    next if c\
    \ != s.chars[i-32]\n    next if c != s.chars[i-33]\n    next if c != s.chars[i-34]\n\
    \    next if c != s.chars[i-35]\n    next if c != s.chars[i-36]\n    next if c\
    \ != s.chars[i-37]\n    next if c != s.chars[i-38]\n    next if c != s.chars[i-39]\n\
    \    next if c != s.chars[i-40]\n    next if c != s.chars[i-41]\n    next if c\
    \ != s.chars[i-42]\n    next if c != s.chars[i-43]\n    next if c != ", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each do |c|\n    next if c.nil?\n\
    \    next if c.upcase == c\n    next if c.downcase == c\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > 26\n    next if c.length < 2\n    next if c.length > 26\n    next if c.length\
    \ < 2\n    next if c.length > 26\n    next if c.length < 2\n    next if c.length\
    \ > ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.each_char do |c|\n\
    \    alphabet = ROTATE_ALPHABET[ROTATE_ALPHABET.size - 1]\n    ROTATE_ALPHABET.rotate!\n\
    \    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2] = alphabet\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 1] = alphabet\n  end\n  s.downcase!\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i,\
    \ '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map do |c|\n    alphabet.index(c) + 2\n  end.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) +\
    \ 1]\n  end.join\nend", "  s.each_char do |c|\n    alphabet = ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 1]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 1] = ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 2]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2] = c\n  end\n  s.downcase!\n\
    \  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/[a-z]/) { |s| alphabet[alphabet.index(s)]\
    \ }\n  s.downcase!\n  s.gsub!(/[^a-z]/, '')\n  s.gsub!(/", "  s.chars.map { |c|\
    \ c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.to_s.ord % 26 }.join\nend", "  s.chars.map do |c|\n\
    \    c + (c.ord - c.ord % 26).chr\n  end.join\nend", "  s.chars.map do |c|\n \
    \   c + (c.ord - c.ord % 26).to_s\n  end.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == chars.last\n \
    \   chars.rotate(index).first\n  end.join\nend", "  s.chars.each_with_index do\
    \ |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next if\
    \ c.upcase == \"A\"\n    next if c.downcase == \"Z\"\n    next if c.upcase ==\
    \ \"a\"\n    next if c.downcase == \"z\"\n    next if c.upcase == \"0\"\n    next\
    \ if c.downcase == \"9\"\n    next if c.upcase == \"!\"\n    next if c.downcase\
    \ == \".\"\n    next if c.upcase == \"-\"\n    next if c.downcase == \"_\"\n \
    \   next if c.upcase == \"=\"\n    next if c.downcase == \"+\"\n    next if c.upcase\
    \ == \"@\"\n    next if c.downcase == \"$\"\n    next if c.upcase == \"*\"\n \
    \   next if c.downcase == \"%\"\n    next if c.upcase == \"&\"\n    next if c.downcase\
    \ == \"'\"\n    next if c.upcase == \"(\"\n    next if c.downcase == \")\"\n \
    \   next if c.upcase == \"[\"\n    next if c.downcase == \"]\"\n    next if c.upcase\
    \ == \"{\"\n    next if c.downcase == \"}\"\n    next if c.upcase == \"[\"\n \
    \   next if c.downcase == \"]\"\n    next if c.upcase == \"{\"\n    next if c.downcase\
    \ == \"}\"\n    next if c.upcase == \"[\"\n    next if c.downcase == \"]\"\n \
    \   next if c.upcase == \"{\"\n    next if c.downcase == \"}\"\n    next if c.upcase\
    \ == \"[\"\n    next if c.downcase == \"]\"\n    next if c.upcase == \"{\"\n \
    \   next if c.downcase == \"}\"\n    next if c.upcase == \"[\"\n    next if c.downcase\
    \ == \"]\"\n    next if c.upcase == \"{\"\n    next if c.downcase == \"}\"\n \
    \   next if c.upcase == \"[\"\n    next if c.downcase == \"]\"\n    next if c.upcase\
    \ == \"{\"\n    next if c.downcase == \"}\"\n    next if c.upcase == \"[\"\n \
    \   next if c.downcase == \"]\"\n    next if c.upcase == \"{\"\n    next if c.downcase\
    \ == \"}\"\n    next if c.upcase == \"[\"\n    next if c.downcase == \"]\"\n \
    \   next if c.upcase == \"{\"\n    next if c.downcase == \"", "  s.chars.map {\
    \ |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map do |c|\n    alphabet = ROTATE_ALPHABET[c.to_sym]\n\
    \    alphabet[alphabet.index(c.to_sym) + 1]\n  end.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.to_s.ord }.join\nend", "  alphabet = %w{a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z}\n  s.chars.map { |c| alphabet.index c }.zip(alphabet).map\
    \ { |a,b| a.succ }.map { |a| alphabet.index a }.zip(alphabet).map { |a,b| b.succ\
    \ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b|\
    \ b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map\
    \ { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ\
    \ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b|\
    \ a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map\
    \ { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ\
    \ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b|\
    \ b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map\
    \ { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ\
    \ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b|\
    \ a.succ }.map { |a,b| b.succ }.map { |a,b| a.succ }.map { |a,b| b.succ }.map\
    \ { |a,b| a.succ }.map { |a,b| b.succ }.map { |a,b| a.suc", "  alphabet = %w[a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z]\n  s.chars.map { |c| alphabet.index(c.upcase)\
    \ }.inject(:<<)\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) +\
    \ 1]\n  end.join\nend", "  s.chars.each_with_index do |char, index|\n    next\
    \ if index == 0\n    next if char == chars.last\n    chars.rotate(index).first\n\
    \  end\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  s.split(\"\").map { |c| alphabet.index(c) }.inject(:*)\nend", "  s.gsub!(/./)\
    \ do |c|\n    alphabet[alphabet.index(c) + 2].upcase\n  end\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  s.chars.map do\
    \ |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.map {\
    \ |c| c.ord % 26 + 2 }.join\nend", "  alphabet = s.downcase.chars.to_a\n  alphabet.rotate(2).map!(&:first)\n\
    \  alphabet.rotate(2).map!(&:last)\n  alphabet.map!(&:join)\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if char == \" \"\n    char.upcase!\n    char.rotate(2).downcase!\n\
    \    char.insert(0, \"a\")\n    char.insert(0, \"b\")\n    char.insert(0, \"c\"\
    )\n    char.insert(0, \"d\")\n    char.insert(0, \"e\")\n    char.insert(0, \"\
    f\")\n    char.insert(0, \"g\")\n    char.insert(0, \"h\")\n    char.insert(0,\
    \ \"i\")\n    char.insert(0, \"j\")\n    char.insert(0, \"k\")\n    char.insert(0,\
    \ \"l\")\n    char.insert(0, \"m\")\n    char.insert(0, \"n\")\n    char.insert(0,\
    \ \"o\")\n    char.insert(0, \"p\")\n    char.insert(0, \"q\")\n    char.insert(0,\
    \ \"r\")\n    char.insert(0, \"s\")\n    char.insert(0, \"t\")\n    char.insert(0,\
    \ \"u\")\n    char.insert(0, \"v\")\n    char.insert(0, \"w\")\n    char.insert(0,\
    \ \"x\")\n    char.insert(0, \"y\")\n    char.insert(0, \"z\")\n    char.insert(0,\
    \ \"A\")\n    char.insert(0, \"B\")\n    char.insert(0, \"C\")\n    char.insert(0,\
    \ \"D\")\n    char.insert(0, \"E\")\n    char.insert(0, \"F\")\n    char.insert(0,\
    \ \"G\")\n    char.insert(0, \"H\")\n    char.insert(0, \"I\")\n    char.insert(0,\
    \ \"J\")\n    char.insert(0, \"K\")\n    char.insert(0, \"L\")\n    char.insert(0,\
    \ \"M\")\n    char.insert(0, \"N\")\n    char.insert(0, \"O\")\n    char.insert(0,\
    \ \"P\")\n    char.insert(0, \"Q\")\n    char.insert(0, \"R\")\n    char.insert(0,\
    \ \"S\")\n    char.insert(0, \"T\")\n    char.insert(0, \"U\")\n    char.insert(0,\
    \ \"V\")\n    char.insert(0, \"W\")\n    char.insert(0, \"X\")\n    char.insert(0,\
    \ \"Y\")\n    char.insert(0, \"Z\")\n  end\n  s.chars.join\nend", "  alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  s.chars.map { |c| alphabet.index(c) }.rotate(2).join\n\
    end\n</code>\n<|/ a tags=ruby,encryption,string |>\n<| c |>\nI like your solution,\
    \ but I feel like it would be more efficient to just use [String#rotate](http://ruby-doc.org/core-2.4.0/String.html#method-i-rotate)\
    \ on the alphabet string. `alphabet = \"abcdefghijklmnopqrstuvwxyz\"; alphabet.rotate(2).join`\n\
    <|/ c |>\n<| c |>\nI agree that `rotate` is more efficient, but I wanted to show\
    \ how to do it without `rotate`.\n<|/ c |>\n<| c |>\nI agree that `rotate` is\
    \ more efficient, but I wanted to show how to do it without `rotate`.\n<|/ c |>\n\
    <| c |>\nI agree that `rotate` is more efficient, but I wanted to show how to\
    \ do it without `rotate`.\n<|/ c |>\n<| c |>\nI agree that `rotate` is more efficient,\
    \ but I wanted to show how to do it without `rotate`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.map do |c|\n\
    \    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:]\
    \ + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:] + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:]\
    \ + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:] + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:]\
    \ + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:] + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:]\
    \ + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:] + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:]\
    \ + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:] + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:]\
    \ + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:] + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:]\
    \ + alphabet[:alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.to_s.ord }.join\nend", "  s.chars.each_with_index do |char, index|\n\
    \    next if index == 0\n    next if char == chars.last\n    chars.rotate(index).push(char)\n\
    \  end\n  s.chars.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.each do |c|\n    next if c.upcase == c\n    next if c.downcase == c\n\
    \    next if c.length < 2\n    next if c.length == 2\n    next if c.length ==\
    \ 3\n    next if c.length == 4\n    next if c.length == 5\n    next if c.length\
    \ == 6\n    next if c.length == 7\n    next if c.length == 8\n    next if c.length\
    \ == 9\n    next if c.length == 10\n    next if c.length == 11\n    next if c.length\
    \ == 12\n    next if c.length == 13\n    next if c.length == 14\n    next if c.length\
    \ == 15\n    next if c.length == 16\n    next if c.length == 17\n    next if c.length\
    \ == 18\n    next if c.length == 19\n    next if c.length == 20\n    next if c.length\
    \ == 21\n    next if c.length == 22\n    next if c.length == 23\n    next if c.length\
    \ == 24\n    next if c.length == 25\n    next if c.length == 26\n    next if c.length\
    \ == 27\n    next if c.length == 28\n    next if c.length == 29\n    next if c.length\
    \ == 30\n    next if c.length == 31\n    next if c.length == 32\n    next if c.length\
    \ == 33\n    next if c.length == 34\n    next if c.length == 35\n    next if c.length\
    \ == 36\n    next if c.length == 37\n    next if c.length == 38\n    next if c.length\
    \ == 39\n    next if c.length == 40\n    next if c.length == 41\n    next if c.length\
    \ == 42\n    next if c.length == 43\n    next if c.length == 44\n    next if c.length\
    \ == 45\n    next if c.length == 46\n    next if c.length == 47\n    next if c.length\
    \ == 48\n    next if c.length == 49\n    next if c.length == 50\n    next if c.length\
    \ == 51\n    next if c.length == 52\n    next if c.length == 53\n    next if c.length\
    \ == 54\n    next if c.length == 55\n    next if c.length == 56\n    next if c.length\
    \ == 57\n    next if c.length == 58\n    next if c.length == 59\n    next if c.length\
    \ == 60\n    next if c.length == 61\n    next if c.length == 62\n    next if c.length",
  "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr + c.chr }.join\n\
    end", "  alphabet = %w[a b c d e f g h i j k l m n o p q r s t u v w x y z]\n\
    \  s.chars.map { |c| alphabet.index(c.upcase) }.inject(:*)\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.chr + c.chr }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe it would\
    \ be better to use a `map` instead of a `collect` since `collect` will create\
    \ a new array and `map` will operate on the existing array. Also, `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. `map` will create\
    \ a new array and `collect` will operate on the existing array. ", "  s.each_char\
    \ do |c|\n    alphabet = ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 2] = c\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 1] = alphabet\n  end\n\
    \  s.downcase!\n  s.gsub(ROTATE_ALPHABET).join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.each_with_index do |char,\
    \ index|\n    next if char == \" \"\n    char.upcase!\n    char.rotate!\n    char.downcase!\n\
    \  end\n  s.chars.join\nend", "  s.chars.each_with_index do |c, i|\n    next if\
    \ i == 0\n    next if c.downcase == c.upcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.down", "  s.chars.each_with_index do |char, i|\n  \
    \  next if i == 0\n    next if char == chars.last\n    chars.rotate(-i).first\n\
    \  end\nend", "  s.chars.each_with_index do |char, index|\n    next if index ==\
    \ 0\n    next if char == chars.last\n    chars.rotate(index).first\n  end\nend",
  "  s.chars.map do |c|\n    c >= 'a' && c <= 'z' ? c + 2 : c + 2\n  end.join\nend",
  "  s.chars.each do |c|\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == 'A'\n    next if c.upcase == 'B'\n    next if c.upcase == 'C'\n    next if\
    \ c.upcase == 'D'\n    next if c.upcase == 'E'\n    next if c.upcase == 'F'\n\
    \    next if c.upcase == 'G'\n    next if c.upcase == 'H'\n    next if c.upcase\
    \ == 'I'\n    next if c.upcase == 'J'\n    next if c.upcase == 'K'\n    next if\
    \ c.upcase == 'L'\n    next if c.upcase == 'M'\n    next if c.upcase == 'N'\n\
    \    next if c.upcase == 'O'\n    next if c.upcase == 'P'\n    next if c.upcase\
    \ == 'Q'\n    next if c.upcase == 'R'\n    next if c.upcase == 'S'\n    next if\
    \ c.upcase == 'T'\n    next if c.upcase == 'U'\n    next if c.upcase == 'V'\n\
    \    next if c.upcase == 'W'\n    next if c.upcase == 'X'\n    next if c.upcase\
    \ == 'Y'\n    next if c.upcase == 'Z'\n    next if c.upcase == 'a'\n    next if\
    \ c.upcase == 'b'\n    next if c.upcase == 'c'\n    next if c.upcase == 'd'\n\
    \    next if c.upcase == 'e'\n    next if c.upcase == 'f'\n    next if c.upcase\
    \ == 'g'\n    next if c.upcase == 'h'\n    next if c.upcase == 'i'\n    next if\
    \ c.upcase == 'j'\n    next if c.upcase == 'k'\n    next if c.upcase == 'l'\n\
    \    next if c.upcase == 'm'\n    next if c.upcase == 'n'\n    next if c.upcase\
    \ == 'o'\n    next if c.upcase == 'p'\n    next if c.upcase == 'q'\n    next if\
    \ c.upcase == 'r'\n    next if c.upcase == 's'\n    next if c.upcase == 't'\n\
    \    next if c.upcase == 'u'\n    next if c.upcase == 'v'\n    next if c.upcase\
    \ == 'w'\n    next if c.upcase == 'x'\n    next if c.up", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+2 : alphabet.index(alphabet)-4]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-4 : alphabet.index(alphabet)+4]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+4 : alphabet.index(alphabet)-6]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-6 : alphabet.index(alphabet)-8]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-8 : alphabet.index(alphabet)-10]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-10 : alphabet.index(alphabet)-12]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-12 : alphabet.index(alphabet)-14]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-14 : alphabet.index(alphabet)-16]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-16 : alphabet.index(alphabet)-18]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-18 : alphabet.index(alphabet)-20]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-20 : alphabet.index(alphabet)-22]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-22 : alphabet.index(alphabet)-24]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-24 : alphabet.index(alphabet)-26]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-26 : alphabet.index(alphabet)-28]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-28 : alphabet.index(alphabet)-30]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-30 : alphabet.index(alphabet)-32]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-32 : alphabet.index(alphabet)-34]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-34 : alphabet.index(alphabet)-36]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-36 : alphabet.index(alphabet)-38]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-38 : alphabet.index(alphabet)-40]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-40 : alphabet.index(alphabet)-42]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-42 : alphabet.index(alphabet)-44]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-44 : alphabet.index(alphabet)-46]",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet =\
    \ alphabet[alphabet.index(\"a\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"b\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"c\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"d\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"e\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"f\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"g\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"h\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"i\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"j\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"k\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"l\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"m\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"n\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"o\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"p\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"q\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"r\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"s\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"t\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"u\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"v\")..alphabet.index(\"z\")].upcase\n  alphabet =\
    \ alphabet[alphabet.index(\"w\")..alphabet.index(\"z", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + ", "  s.chars.each_with_index do |char, index|\n    next if index ==\
    \ 0\n    char.upcase! if char == char.downcase\n    char.downcase! if char ==\
    \ char.upcase\n    char.upcase! if char == char.downcase\n    char.downcase! if\
    \ char == char.upcase\n  end\n  s.chars.join\nend", "  alphabet = %w(a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z)\n  s.chars.map { |c| alphabet.index(c.upcase)\
    \ }.inject(:*)\nend", "  s.chars.each_with_index do |char, index|\n    next if\
    \ index == 0\n    next if char == \"z\"\n    next if char == \"y\"\n    next if\
    \ char == \"x\"\n    next if char == \"w\"\n    next if char == \"v\"\n    next\
    \ if char == \"u\"\n    next if char == \"t\"\n    next if char == \"s\"\n   \
    \ next if char == \"r\"\n    next if char == \"q\"\n    next if char == \"p\"\n\
    \    next if char == \"o\"\n    next if char == \"n\"\n    next if char == \"\
    m\"\n    next if char == \"l\"\n    next if char == \"k\"\n    next if char ==\
    \ \"j\"\n    next if char == \"i\"\n    next if char == \"h\"\n    next if char\
    \ == \"g\"\n    next if char == \"f\"\n    next if char == \"e\"\n    next if\
    \ char == \"d\"\n    next if char == \"c\"\n    next if char == \"b\"\n    next\
    \ if char == \"a\"\n    next if char == \"z\"\n    next if char == \"y\"\n   \
    \ next if char == \"x\"\n    next if char == \"w\"\n    next if char == \"v\"\n\
    \    next if char == \"u\"\n    next if char == \"t\"\n    next if char == \"\
    s\"\n    next if char == \"r\"\n    next if char == \"q\"\n    next if char ==\
    \ \"p\"\n    next if char == \"o\"\n    next if char == \"n\"\n    next if char\
    \ == \"m\"\n    next if char == \"l\"\n    next if char == \"k\"\n    next if\
    \ char == \"j\"\n    next if char == \"i\"\n    next if char == \"h\"\n    next\
    \ if char == \"g\"\n    next if char == \"f\"\n    next if char == \"e\"\n   \
    \ next if char == \"d\"\n    next if char == \"c\"\n    next if char == \"b\"\n\
    \    next if char == \"a\"\n    next if char == \"z\"\n    next if char == \"\
    y\"\n    next if char == \"x\"\n    next if char == \"w\"\n    next if char ==\
    \ \"v\"\n    next if char == \"u\"\n    next if char == \"t\"\n    next if char\
    \ == \"s\"\n    next if char == \"r\"\n    next if char == \"q\"\n    next if\
    \ char == \"p\"\n    next if char == \"o\"\n    next if char == \"n\"", "  s.chars.each_with_index\
    \ do |char, index|\n    char = char.upcase\n    char.chars.each_with_index do\
    \ |char2, index2|\n      char2 = char2.upcase\n      char2.chars.each_with_index\
    \ do |char3, index3|\n        char3 = char3.upcase\n        char3.chars.each_with_index\
    \ do |char4, index4|\n          char4 = char4.upcase\n          char4.chars.each_with_index\
    \ do |char5, index5|\n            char5 = char5.upcase\n            char5.chars.each_with_index\
    \ do |char6, index6|\n              char6 = char6.upcase\n              char6.chars.each_with_index\
    \ do |char7, index7|\n                char7 = char7.upcase\n                char7.chars.each_with_index\
    \ do |char8, index8|\n                  char8 = char8.upcase\n               \
    \   char8.chars.each_with_index do |char9, index9|\n                    char9\
    \ = char9.upcase\n                    char9.chars.each_with_index do |char10,\
    \ index10|\n                      char10 = char10.upcase\n                   \
    \   char10.chars.each_with_index do |char11, index11|\n                      \
    \  char11 = char11.upcase\n                        char11.chars.each_with_index\
    \ do |char12, index12|\n                          char12 = char12.upcase\n   \
    \                       char12.chars.each_with_index do |char13, index13|\n  \
    \                          char13 = char13.upcase\n                          \
    \  char13.chars.each_with_index do |char14, index14|\n                       \
    \       char14 = char14.upcase\n                              char14.chars.each_with_index\
    \ do |char15, index15|\n                                char15 = char15.upcase\n\
    \                                char15.chars.each_with_index do |char16, index16|\n\
    \                                  char16 = char16.upcase\n                  \
    \                char16.chars.each_with_index do |char17, index17|\n         \
    \                           char17 = char17.upcase\n                         \
    \           char17.chars.each_with_index do |char18, index18|\n              \
    \                        char18 = char18.upcase\n                            \
    \          char18.chars.each_with_index do |char19, index19|\n               \
    \                         char19 = char19.upcase\n                           \
    \             char19.chars.each_with_index do |char20, index20|\n            \
    \                              char20 = char20.upcase\n                      \
    \                    char20.chars.each_with_index do |char21, index21|\n     \
    \                                       char21 = char21.upcase\n             \
    \                               char21.", "  s.chars.map { |c| c.ord % 26 + 2\
    \ }.join\nend", "  s.chars.each_with_index do |char, index|\n    next if char\
    \ == \" \"\n    char.upcase!\n    char.rotate!\n    char.downcase!\n    char.rotate!\n\
    \    char.upcase!\n  end\n  s\nend", "  s.chars.each_with_index do |c,i|\n   \
    \ next if i == 0\n    next if c.upcase == c.downcase\n    next if c.upcase ==\
    \ c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.down", "  s.chars.each_with_index do\
    \ |char, index|\n    next if index == 0\n    next if char == char.upcase\n   \
    \ next if char == char.downcase\n    char.upcase!\n  end\n  s\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if char == \" \"\n    char.upcase! if i % 2 == 0\n  \
    \  char.downcase! if i % 2 == 1\n  end\n  s\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  s.split(\"\").map do |c|\n    alphabet.index(c) ? alphabet.index(c) + 2 :\
    \ alphabet.index(c) + 2\n  end.join\nend", "  s.chars.each do |c|\n    next if\
    \ c.nil?\n    next if c.length == 1\n    next if c.length == 2\n    next if c.length\
    \ == 3\n    next if c.length == 4\n    next if c.length == 5\n    next if c.length\
    \ == 6\n    next if c.length == 7\n    next if c.length == 8\n    next if c.length\
    \ == 9\n    next if c.length == 10\n    next if c.length == 11\n    next if c.length\
    \ == 12\n    next if c.length == 13\n    next if c.length == 14\n    next if c.length\
    \ == 15\n    next if c.length == 16\n    next if c.length == 17\n    next if c.length\
    \ == 18\n    next if c.length == 19\n    next if c.length == 20\n    next if c.length\
    \ == 21\n    next if c.length == 22\n    next if c.length == 23\n    next if c.length\
    \ == 24\n    next if c.length == 25\n    next if c.length == 26\n    next if c.length\
    \ == 27\n    next if c.length == 28\n    next if c.length == 29\n    next if c.length\
    \ == 30\n    next if c.length == 31\n    next if c.length == 32\n    next if c.length\
    \ == 33\n    next if c.length == 34\n    next if c.length == 35\n    next if c.length\
    \ == 36\n    next if c.length == 37\n    next if c.length == 38\n    next if c.length\
    \ == 39\n    next if c.length == 40\n    next if c.length == 41\n    next if c.length\
    \ == 42\n    next if c.length == 43\n    next if c.length == 44\n    next if c.length\
    \ == 45\n    next if c.length == 46\n    next if c.length == 47\n    next if c.length\
    \ == 48\n    next if c.length == 49\n    next if c.length == 50\n    next if c.length\
    \ == 51\n    next if c.length == 52\n    next if c.length == 53\n    next if c.length\
    \ == 54\n    next if c.length == 55\n    next if c.length == 56\n    next if c.length\
    \ == 57\n    next if c.length == 58\n    next if c.length == 59\n    next if c.length\
    \ == 60\n    next if c.length == 61\n    next if c.length == 62\n    next if c.length\
    \ == 63\n    next if c.length == 64\n    ", "  s.chars.each_with_index do |c,\
    \ i|\n    next if i == s.length\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == \"Z\"\n    next if c.downcase == \"Z\"\n    next if c.upcase\
    \ == \"A\"\n    next if c.downcase == \"A\"\n    next if c.upcase == \"0\"\n \
    \   next if c.downcase == \"0\"\n    next if c.upcase == \"1\"\n    next if c.downcase\
    \ == \"1\"\n    next if c.upcase == \"2\"\n    next if c.downcase == \"2\"\n \
    \   next if c.upcase == \"3\"\n    next if c.downcase == \"3\"\n    next if c.upcase\
    \ == \"4\"\n    next if c.downcase == \"4\"\n    next if c.upcase == \"5\"\n \
    \   next if c.downcase == \"5\"\n    next if c.upcase == \"6\"\n    next if c.downcase\
    \ == \"6\"\n    next if c.upcase == \"7\"\n    next if c.downcase == \"7\"\n \
    \   next if c.upcase == \"8\"\n    next if c.downcase == \"8\"\n    next if c.upcase\
    \ == \"9\"\n    next if c.downcase == \"9\"\n    next if c.upcase == \"a\"\n \
    \   next if c.downcase == \"a\"\n    next if c.upcase == \"b\"\n    next if c.downcase\
    \ == \"b\"\n    next if c.upcase == \"c\"\n    next if c.downcase == \"c\"\n \
    \   next if c.upcase == \"d\"\n    next if c.downcase == \"d\"\n    next if c.upcase\
    \ == \"e\"\n    next if c.downcase == \"e\"\n    next if c.upcase == \"f\"\n \
    \   next if c.downcase == \"f\"\n    next if c.upcase == \"g\"\n    next if c.downcase\
    \ == \"g\"\n    next if c.upcase == \"h\"\n    next if c.downcase == \"h\"\n \
    \   next if c.upcase == \"i\"\n    next if c.downcase == \"i\"\n    next if c.upcase\
    \ == \"j\"\n    next if c.downcase == \"j\"\n    next if c.upcase == \"k\"\n \
    \   next if c.downcase == \"k\"\n    next if c.upcase == \"l\"\n    next if c.downcase\
    \ == \"l\"\n    next if c.upcase == \"m\"\n    next if c.downcase == \"m\"\n \
    \   next if c.upcase ", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n  alphabet\
    \ = alphabet[alphabet.index(", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c|\
    \ c.chr + c.chr }.join\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>",
  "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == \"z\"\n    next\
    \ if char == \"Z\"\n    next if char == \"y\"\n    next if char == \"Y\"\n   \
    \ next if char == \"x\"\n    next if char == \"X\"\n    next if char == \"w\"\n\
    \    next if char == \"W\"\n    next if char == \"v\"\n    next if char == \"\
    V\"\n    next if char == \"u\"\n    next if char == \"U\"\n    next if char ==\
    \ \"t\"\n    next if char == \"T\"\n    next if char == \"s\"\n    next if char\
    \ == \"S\"\n    next if char == \"r\"\n    next if char == \"R\"\n    next if\
    \ char == \"q\"\n    next if char == \"Q\"\n    next if char == \"p\"\n    next\
    \ if char == \"P\"\n    next if char == \"o\"\n    next if char == \"O\"\n   \
    \ next if char == \"n\"\n    next if char == \"N\"\n    next if char == \"m\"\n\
    \    next if char == \"M\"\n    next if char == \"l\"\n    next if char == \"\
    L\"\n    next if char == \"k\"\n    next if char == \"K\"\n    next if char ==\
    \ \"j\"\n    next if char == \"J\"\n    next if char == \"h\"\n    next if char\
    \ == \"H\"\n    next if char == \"g\"\n    next if char == \"G\"\n    next if\
    \ char == \"f\"\n    next if char == \"F\"\n    next if char == \"e\"\n    next\
    \ if char == \"E\"\n    next if char == \"d\"\n    next if char == \"D\"\n   \
    \ next if char == \"c\"\n    next if char == \"C\"\n    next if char == \"b\"\n\
    \    next if char == \"B\"\n    next if char == \"a\"\n    next if char == \"\
    A\"\n    next if char == \"z\"\n    next if char == \"Z\"\n    next if char ==\
    \ \"y\"\n    next if char == \"Y\"\n    next if char == \"x\"\n    next if char\
    \ == \"X\"\n    next if char == \"w\"\n    next if char == \"W\"\n    next if\
    \ char == \"v\"\n    next if char == \"V\"\n    next if char == \"u\"\n    next\
    \ if char == \"U\"\n    next if char == \"t\"\n    next ", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet.length/2]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)-alphabet.length/2:alphabet.index(alphabet)+alphabet",
  "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  result = ''\n  s.each_char do |c|\n\
    \    index = alphabet.index(c)\n    result << alphabet[(index+2)%26]\n  end\n\
    \  result\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\n\
    end\n</code>\n<|/ a tags=ruby,encryption,string |>\n<| c |>\nI like your solution.\
    \ Although I believe it can be improved a little bit by removing `map` call and\
    \ using `join` instead. `s.chars.sort.join` will do the same thing. Also `s.chars.sort.map\
    \ { |c| c.ord % 26 }.join` can be replaced with `s.chars.sort.join.tr('A-Z', 'a-z')`\n\
    <|/ c |>\n<| c |>\n: Yes, I agree that `map` can be replaced with `join`. However,\
    \ I wanted to keep the code as close to the OP's code as possible. Also, `tr`\
    \ will replace all occurrences of `A-Z` with `a-z`, not just those that appear\
    \ twice consecutively.\n<|/ c |>\n<| c |>\nYes, I agree that `tr` will replace\
    \ all occurrences of `A-Z` with `a-z`, not just those that appear twice consecutively.\
    \ But I believe that `s.chars.sort.join.tr('A-Z', 'a-z')` will replace all occurrences\
    \ of `A-Z` with `a-z` only if it appears twice consecutively. If I understand\
    \ correctly, `tr` will replace all occurrences of `A-Z` with `a-z` only if it\
    \ appears twice consecutively, but it will not replace all occurrences of `A-Z`\
    \ with `a-z` if it appears more than twice consecutively. So `tr` will replace\
    \ all occurrences of `A-Z` with `a-z` only if it appears twice consecutively,\
    \ but it will not replace all occurrences of `A-Z` with `a-z` if it appears more\
    \ than twice consecutively.\n<|/ c |>\n<| c |>\n: Yes, you are correct. `tr` will\
    \ replace all occurrences of `A-Z` with `a-z` only if it appears twice consecutively.\
    \ If I understand correctly, `tr` will replace all occurrences of `A-Z` with `a-z`\
    \ only if it appears twice consecutively, but it will not replace all occurrences\
    \ of `A-Z` with `a-z` if it appears more than twice consecutively. So `tr` will\
    \ replace all occurrences of `A-Z` with `a-z` only if it appears twice consecutively,\
    \ but it will not replace all occurrences of `A-Z` with `a-z` if it appears more\
    \ than tw", "  alphabet = %w(a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z)\n  s.chars.map { |c| alphabet.index(c.upcase) + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend",
  "  s.chars.each_with_index do |char, i|\n    next if char == \" \"\n    next if\
    \ char == \"\\n\"\n    next if char == \"\\t\"\n    next if char == \"\\r\"\n\
    \    next if char == \"\\v\"\n    next if char == \"\\b\"\n    next if char ==\
    \ \"\\a\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\e\"\
    \n    next if char == \"\\f\"\n    next if char == \"\\o\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\e\"\
    \n    next if char == \"\\f\"\n    next if char == \"\\o\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\e\"\
    \n    next if char == \"\\f\"\n    next if char == \"\\o\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\e\"\
    \n    next if char == \"\\f\"\n    next if char == \"\\o\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\e\"\
    \n    next if char == \"\\f\"\n    next if char == \"\\o\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\e\"\
    \n    next if char == \"\\f\"\n    next if char == \"\\o\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\o", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == 'A'\n    next if\
    \ c.downcase == 'A'\n    next if c.upcase == 'Z'\n    next if c.downcase == 'Z'\n\
    \    next if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.upcase == '0'\n    next\
    \ if c.downcase == '0'\n    next if c.upcase == '1'\n    next if c.downcase ==\
    \ '1'\n    next if c.upcase == '2'\n    next if c.downcase == '2'\n    next if\
    \ c.upcase == '3'\n    next if c.downcase == '3'\n    next if c.upcase == '4'\n\
    \    next if c.downcase == '4'\n    next if c.upcase == '5'\n    next if c.downcase\
    \ == '5'\n    next if c.upcase == '6'\n    next if c.downcase == '6'\n    next\
    \ if c.upcase == '7'\n    next if c.downcase == '7'\n    next if c.upcase == '8'\n\
    \    next if c.downcase == '8'\n    next if c.upcase == '9'\n    next if c.downcase\
    \ == '9'\n    next if c.upcase == '*'\n    next if c.downcase == '*'\n    next\
    \ if c.upcase == '+'\n    next if c.downcase == '+'\n    next if c.upcase == '$'\n\
    \    next if c.downcase == '$'\n    next if c.upcase == '%'\n    next if c.downcase\
    \ == '%'\n    next if c.upcase == '&'\n    next if c.downcase == '&'\n    next\
    \ if c.upcase == '#'\n    next if c.downcase == '#'\n    next if c.upcase == '$'\n\
    \    next if c.downcase == '$'\n    next if c.upcase == '%'\n    next if c.downcase\
    \ == '%'\n    next if c.upcase == '&'\n    next if c.downcase == '&'\n    next\
    \ if c.upcase == '#'\n    next if c.downcase == '#'\n    next if c.upcase == '$'\n\
    \    next if c.downcase == '$'\n    next if c.upcase "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
