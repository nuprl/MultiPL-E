name: HumanEval_89_encrypt
language: rb
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"\
  et\")\n# \"ix\"\ndef encrypt(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n\
  \    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"\
  ))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"\
  kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n\
  \    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"\
  lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  , candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"\
  e\", candidate.call(\"a\"))\n  end\nend\n"
completions: ["  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == char.upcase\n\
    \    next if char == char.downcase\n    next if char == char.capitalize\n    next\
    \ if char == char.swapcase\n    char.upcase!\n  end\n  s\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 }.rotate(2).join\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == chars.last\n \
    \   chars.rotate(index).first\n  end.join\nend", "  s.gsub(/./) do |c|\n    alphabet\
    \ = c.to_s.split('')\n    alphabet.rotate(2).map{|c| c.to_s}.join\n  end\nend",
  "  s.chars.each_with_index do |char, i|\n    next if char == \" \"\n    char.upcase!\n\
    \    char.rotate!\n    char.downcase!\n    char.rotate!\n    char.upcase!\n  \
    \  char.rotate!\n  end\n  s\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = %w[a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z]\n  s.chars.map { |c| alphabet.index(c.upcase)\
    \ }.inject(:*)\nend", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n\
    \    s[i-1] = c.chr + s[i-1]\n  end\n  s\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 2]\n\
    \  end.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr\
    \ * 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == 'Z'\n    next if c.downcase == 'Z'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase ", " \
    \ s.chars.each do |c|\n    next if c.downcase == 'z'\n    next if c.downcase ==\
    \ 'a'\n    next if c.downcase == 'e'\n    next if c.downcase == 'i'\n    next\
    \ if c.downcase == 'o'\n    next if c.downcase == 'u'\n    next if c.downcase\
    \ == 'y'\n    next if c.downcase == 'k'\n    next if c.downcase == 'j'\n    next\
    \ if c.downcase == 'l'\n    next if c.downcase == 'f'\n    next if c.downcase\
    \ == 'c'\n    next if c.downcase == 'q'\n    next if c.downcase == 'p'\n    next\
    \ if c.downcase == 'm'\n    next if c.downcase == 'n'\n    next if c.downcase\
    \ == 'h'\n    next if c.downcase == 'r'\n    next if c.downcase == 's'\n    next\
    \ if c.downcase == 't'\n    next if c.downcase == 'x'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'x'\n    next if c.downcase == 'y'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'z'\n    next if c.down", " \
    \ s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr + c.chr }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work for all inputs.\
    \ For example, `encrypt(\"hi\")` returns `\"lm\"`, but `encrypt(\"asdfghjkl\"\
    )` returns `\"ewhjklnop\"`.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for my\
    \ test cases. However, I decided to go with another solution that I posted below.\n\
    <|/ c |>\n<| a dscore=1 |>\nI decided to go with another solution that I posted\
    \ below. \n<code>", "  s.chars.each_with_index do |char, index|\n    next if index\
    \ == 0\n    char.upcase!\n    char.rotate!\n    char.downcase!\n  end\n  s\nend",
  "  s.chars.each_with_index do |char, index|\n    next if index == 0\n    next if\
    \ char == chars.last\n    chars.rotate(index).first\n  end.join\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if char == \" \"\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)\n\
    \    char.downcase!\n    char.upcase!\n    char.rotate(2)\n    char.downcase!\n\
    \    char.upcase!\n    char.rotate(2)\n    char.downcase!\n    char.upcase!\n\
    \    char.rotate(2)\n    char.downcase!\n    char.upcase!\n    char.rotate(2)",
  "  s.chars.each_with_index do |char, index|\n    next if char == \" \"\n    next\
    \ if index == s.length\n    next if char == \"z\"\n    next if char == \"a\"\n\
    \    next if char == \"b\"\n    next if char == \"c\"\n    next if char == \"\
    d\"\n    next if char == \"e\"\n    next if char == \"f\"\n    next if char ==\
    \ \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n    next if char\
    \ == \"j\"\n    next if char == \"k\"\n    next if char == \"l\"\n    next if\
    \ char == \"m\"\n    next if char == \"n\"\n    next if char == \"o\"\n    next\
    \ if char == \"p\"\n    next if char == \"q\"\n    next if char == \"r\"\n   \
    \ next if char == \"s\"\n    next if char == \"t\"\n    next if char == \"u\"\n\
    \    next if char == \"v\"\n    next if char == \"w\"\n    next if char == \"\
    x\"\n    next if char == \"y\"\n    next if char == \"z\"\n    next if char ==\
    \ \"a\"\n    next if char == \"b\"\n    next if char == \"c\"\n    next if char\
    \ == \"d\"\n    next if char == \"e\"\n    next if char == \"f\"\n    next if\
    \ char == \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n    next\
    \ if char == \"j\"\n    next if char == \"k\"\n    next if char == \"l\"\n   \
    \ next if char == \"m\"\n    next if char == \"n\"\n    next if char == \"o\"\n\
    \    next if char == \"p\"\n    next if char == \"q\"\n    next if char == \"\
    r\"\n    next if char == \"s\"\n    next if char == \"t\"\n    next if char ==\
    \ \"u\"\n    next if char == \"v\"\n    next if char == \"w\"\n    next if char\
    \ == \"x\"\n    next if char == \"y\"\n    next if char == \"z\"\n    next if\
    \ char == \"a\"\n    next if char == \"b\"\n    next if char == \"c\"\n    next\
    \ if char == \"d\"\n    next if char == \"e\"\n    next if char == \"f\"\n   \
    \ next if char == \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n\
    \    next if char == \"j\"\n    next if char == \"k\"\n    ", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == s.length\n    next if c.upcase == c.downcase\n \
    \   next if c.upcase == \"A\" && c.downcase == \"Z\"\n    next if c.upcase ==\
    \ \"a\" && c.downcase == \"z\"\n    next if c.upcase == \"0\" && c.downcase ==\
    \ \"9\"\n    next if c.upcase == \"1\" && c.downcase == \"2\"\n    next if c.upcase\
    \ == \"3\" && c.downcase == \"4\"\n    next if c.upcase == \"5\" && c.downcase\
    \ == \"6\"\n    next if c.upcase == \"7\" && c.downcase == \"8\"\n    next if\
    \ c.upcase == \"9\" && c.downcase == \"0\"\n    next if c.upcase == \"A\" && c.downcase\
    \ == \"Z\"\n    next if c.upcase == \"a\" && c.downcase == \"z\"\n    next if\
    \ c.upcase == \"0\" && c.downcase == \"9\"\n    next if c.upcase == \"1\" && c.downcase\
    \ == \"2\"\n    next if c.upcase == \"3\" && c.downcase == \"4\"\n    next if\
    \ c.upcase == \"5\" && c.downcase == \"6\"\n    next if c.upcase == \"7\" && c.downcase\
    \ == \"8\"\n    next if c.upcase == \"9\" && c.downcase == \"0\"\n    next if\
    \ c.upcase == \"A\" && c.downcase == \"Z\"\n    next if c.upcase == \"a\" && c.downcase\
    \ == \"z\"\n    next if c.upcase == \"0\" && c.downcase == \"9\"\n    next if\
    \ c.upcase == \"1\" && c.downcase == \"2\"\n    next if c.upcase == \"3\" && c.downcase\
    \ == \"4\"\n    next if c.upcase == \"5\" && c.downcase == \"6\"\n    next if\
    \ c.upcase == \"7\" && c.downcase == \"8\"\n    next if c.upcase == \"9\" && c.downcase\
    \ == \"0\"\n    next if c.upcase == \"A\" && c.downcase == \"Z\"\n    next if\
    \ c.upcase == \"a\" && c.downcase == \"z\"\n    next if c.upcase == \"0\" && c.downcase\
    \ == \"9\"\n    next if c.upcase == \"1\" && c.downcase == \"2\"\n    next if\
    \ c.upcase == \"3\" && c.downcase == \"4\"\n    next if c.upcase == \"5\" && c.downcase\
    \ == \"6\"\n    next if c.upcase == \"7\" && ", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |c, i|\n  \
    \  next if i == 0\n    next if c.upcase == c.downcase\n    next if c.upcase ==\
    \ \"A\"\n    next if c.upcase == \"Z\"\n    next if c.upcase == \"a\"\n    next\
    \ if c.upcase == \"z\"\n    next if c.upcase == \"0\"\n    next if c.upcase ==\
    \ \"9\"\n    next if c.upcase == \".\"\n    next if c.upcase == \",\"\n    next\
    \ if c.upcase == \"!\"\n    next if c.upcase == \"?\"\n    next if c.upcase ==\
    \ \"-\"\n    next if c.upcase == \"_\"\n    next if c.upcase == \"/\"\n    next\
    \ if c.upcase == \"-\"\n    next if c.upcase == \"=\"\n    next if c.upcase ==\
    \ \"+\"\n    next if c.upcase == \"%\"\n    next if c.upcase == \"*\"\n    next\
    \ if c.upcase == \"&\"\n    next if c.upcase == \"(\"\n    next if c.upcase ==\
    \ \")\"\n    next if c.upcase == \"[\"\n    next if c.upcase == \"]\"\n    next\
    \ if c.upcase == \"{\"\n    next if c.upcase == \"}\"\n    next if c.upcase ==\
    \ \"|\"\n    next if c.upcase == \"~\"\n    next if c.upcase == \"^\"\n    next\
    \ if c.upcase == \"`\"\n    next if c.upcase == \"'\"\n    next if c.upcase ==\
    \ \"<\"\n    next if c.upcase == \"=\"\n    next if c.upcase == \">\"\n    next\
    \ if c.upcase == \"?\"\n    next if c.upcase == \"@\"\n    next if c.upcase ==\
    \ \"[\"\n    next if c.upcase == \"]\"\n    next if c.upcase == \"}\"\n    next\
    \ if c.upcase == \"\\\\\"\n    next if c.upcase == \"|\"\n    next if c.upcase\
    \ == \"~\"\n    next if c.upcase == \"^\"\n    next if c.upcase == \"`\"\n   \
    \ next if c.upcase == \"'\"\n    next if c.upcase == \"<\"\n    next if c.upcase\
    \ == \"=\"\n    next if c.upcase == \">\"\n    next if c.upcase == \"?\"\n   \
    \ next if c.upcase == \"@\"\n    next if c.upcase == \"[\"\n    next if c.upcase\
    \ == \"]\"\n    ", "  alphabet = %w[a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z]\n  s.chars.map { |c| alphabet.index(c.downcase) }.inject(:<<)\nend",
  "  s.chars.each do |c|\n    next if c.nil?\n    next if c.length == 0\n    next\
    \ if c.length == 1\n    next if c.length == 2\n    next if c.length == 3\n   \
    \ next if c.length == 4\n    next if c.length == 5\n    next if c.length == 6\n\
    \    next if c.length == 7\n    next if c.length == 8\n    next if c.length ==\
    \ 9\n    next if c.length == 10\n    next if c.length == 11\n    next if c.length\
    \ == 12\n    next if c.length == 13\n    next if c.length == 14\n    next if c.length\
    \ == 15\n    next if c.length == 16\n    next if c.length == 17\n    next if c.length\
    \ == 18\n    next if c.length == 19\n    next if c.length == 20\n    next if c.length\
    \ == 21\n    next if c.length == 22\n    next if c.length == 23\n    next if c.length\
    \ == 24\n    next if c.length == 25\n    next if c.length == 26\n    next if c.length\
    \ == 27\n    next if c.length == 28\n    next if c.length == 29\n    next if c.length\
    \ == 30\n    next if c.length == 31\n    next if c.length == 32\n    next if c.length\
    \ == 33\n    next if c.length == 34\n    next if c.length == 35\n    next if c.length\
    \ == 36\n    next if c.length == 37\n    next if c.length == 38\n    next if c.length\
    \ == 39\n    next if c.length == 40\n    next if c.length == 41\n    next if c.length\
    \ == 42\n    next if c.length == 43\n    next if c.length == 44\n    next if c.length\
    \ == 45\n    next if c.length == 46\n    next if c.length == 47\n    next if c.length\
    \ == 48\n    next if c.length == 49\n    next if c.length == 50\n    next if c.length\
    \ == 51\n    next if c.length == 52\n    next if c.length == 53\n    next if c.length\
    \ == 54\n    next if c.length == 55\n    next if c.length == 56\n    next if c.length\
    \ == 57\n    next if c.length == 58\n    next if c.length == 59\n    next if c.length\
    \ == 60\n    next if c.length == 61\n    next if c.length == 62\n    next if c.length\
    \ == 63\n    next ", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 2]\n\
    \  end.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet =\
    \ alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-2 : alphabet.index(alphabet)+2]\n  alphabet",
  "  s.chars.each_with_index do |char, i|\n    next if i == 0\n    char.upcase!\n\
    \    char.rotate!\n    char.downcase!\n  end\n  s\nend", "  alphabet = string.ascii_lowercase\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1]\
    \ + alphabet[0..-2] + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2]\
    \ + alphabet[2..-1]\n  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n\
    \  alphabet = alphabet[1..-1] + alphabet[0..-2] + alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1] + alphabet[0.", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
