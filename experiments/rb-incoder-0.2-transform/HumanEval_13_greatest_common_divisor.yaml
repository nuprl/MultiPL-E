name: HumanEval_13_greatest_common_divisor
language: rb
prompt: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
  \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
  \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
  \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
  \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
completions: ["  while b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if\
    \ (b == 0) else greatest_common_divisor.call(b, a%b)\nend", "  return a if b ==\
    \ 0 else greatest_common_divisor.call(b, a % b)\nend", "  while b != 0\n    a,\
    \ b = b, a % b\n  end\n  a\nend", "  while b > 0\n    a, b = b, a % b\n  end\n\
    \  a\nend", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  while b\
    \ != 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if b == 0 else greatest_common_divisor.call(b,\
    \ a % b)\nend", "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  while\
    \ b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if (b == 0) else (a\
    \ // b) if (a % b == 0) else greatest_common_divisor(b, a % b)\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis is an excellent solution.  I used it in a project to find the greatest\
    \ common divisor of two numbers.  I used the recursive method described above\
    \ and also used the method described here: http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    <|/ c |>\n<| c |>\nGreat solution! I used this in Ruby on Rails 3.2.1 by adding\
    \ this to the top of my application_helper.rb file: require 'greatest_common_divisor'\n\
    <|/ c |>\n<| c |>\nI used this in Rails 3.2.1 by adding this to the top of my\
    \ application_helper.rb file: require 'greatest_common_divisor'\n<|/ c |>\n<|\
    \ c |>\nI used this in Rails 3.2.1 by adding this to the top of my application_helper.rb\
    \ file: require 'greatest_common_divisor'\n<|/ c |>\n<| c |>\nI used this in Rails\
    \ 3.2.1 by adding this to the top of my application_helper.rb file: require 'greatest_common_divisor'\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  while b != 0\n    a, b = b, a % b\n  end\n\
    \  a\nend", '  return a % b if b > 0 && (a / b) == b else b', "  while b > 0\n\
    \    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  return a if b == 0 else greatest_common_divisor.call(b, a%b)\n\
    end", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for negative numbers. `greatest_common_divisor(-5,\
    \ -2)` returns `-5` instead of `-2`.\n<|/ c |>\n<| c |>\n: I agree. My solution\
    \ was meant to be a general solution. I'll add a note about negative numbers to\
    \ the answer.\n<|/ c |>\n<| c |>\nI added a solution that works for negative numbers.\
    \ I didn't want to change the code too much though.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that works for negative numbers. I didn't want to change the code\
    \ too much though.\n<|/ c |>\n<| a tags=ruby,math |>\n<code>", "  while b != 0\n\
    \    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n\
    I like this solution, but I wonder if it would be more efficient to just do `a\
    \ / b` instead of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| c |>\nI like that\
    \ too, but I wanted to show how to implement the method as well.\n<|/ c |>\n<|\
    \ c |>\nI like your solution, but I wonder if it would be more efficient to just\
    \ do `a / b` instead of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| c |>\nI\
    \ like your solution, but I wonder if it would be more efficient to just do `a\
    \ / b` instead of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I wonder if it would be more efficient to just do `a / b` instead\
    \ of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| a tags=ruby |>\n<code>", " \
    \ return a if (b == 0) else greatest_common_divisor.call(b, a % b)\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  while b > 0\n    a, b = b,\
    \ a % b\n  end\n  a\nend", "  while b != 0\n    a, b = b, a % b\n  end\n  a\n\
    end", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a % b if\
    \ a && b && a.to_f == b.to_f && a >= 0 && b >= 0 && a.to_f >= 0 && b.to_f >= 0\
    \ && a.to_f == b.to_f && a.to_f % b.to_f == 0 && a.to_f / b.to_f == 1 end\nend",
  "  return a if b == 0 else greatest_common_divisor.call(b, a%b)\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if (b == 0) else\
    \ greatest_common_divisor.call(b, a%b)\nend", "  while b > 0\n    a, b = b, a\
    \ % b\n  end\n  a\nend", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend",
  "  return a if (b == 0) else (a % b)\nend", "  while b > 0\n    a, b = b, a % b\n\
    \  end\n  a\nend", "  return a if (b == 0) else (a // b) if a % b == 0 else greatest_common_divisor(b,\
    \ a % b)\nend", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25, 15)`\
    \ returns `5` instead of `1`.\n<|/ c |>\n<| c |>\n: It works. I tested it before\
    \ posting. Did you test it before posting?\n<|/ c |>\n<| c |>\nYes, I tested it\
    \ before posting. It's not working for me. `greatest_common_divisor(25, 15)` returns\
    \ `5` instead of `1`.\n<|/ c |>\n<| c |>\n: I tested it before posting. It's not\
    \ working for me. `greatest_common_divisor(25, 15)` returns `5` instead of `1`.\n\
    <|/ c |>\n<| c |>\n: I tested it before posting. It's not working for me. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  return\
    \ a if b == 0 else greatest_common_divisor.call(b, a % b)\nend", "  return a if\
    \ (b == 0) else greatest_common_divisor.call(b, a%b)\nend", "  return a if (b\
    \ == 0) else greatest_common_divisor.call(b, a % b)\nend", "  while b != 0\n \
    \   a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks so much for this. I used this and added a case for when\
    \ b is 0\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  while b > 0\n    a, b = b, a\
    \ % b\n  end\n  a\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `greatest_common_divisor(-5, -2)` returns `-2` instead\
    \ of `-1`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it\
    \ out. I've updated the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  while\
    \ b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if b == 0 else greatest_common_divisor.call(b,\
    \ a % b)\nend", "  return a if b == 0 else greatest_common_divisor.call(b, a %\
    \ b)\nend", "  return a if (b == 0) else (a // b) if a % b == 0 else greatest_common_divisor(b,\
    \ a % b)\nend", "  return a if (b == 0) else (a // b if (a % b == 0) else greatest_common_divisor(b,\
    \ a % b))\nend", "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if b == 0 else greatest_common_divisor.call(b,\
    \ a % b)\nend", "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n`greatest_common_divisor` doesn't work\
    \ for negative numbers. `greatest_common_divisor.call(3, -5)` returns `3` instead\
    \ of `-2`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers, but it does\
    \ work for positive numbers. `greatest_common_divisor.call(3, -5)` returns `-2`.\n\
    <|/ c |>\n<| c |>\nYes, you're right. My bad. Sorry for the misunderstanding.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  while b != 0\n    a, b\
    \ = b, a % b\n  end\n  a\nend", "  while b != 0\n    a, b = b, a % b\n  end\n\
    \  a\nend", "  return a % b if b > 0 && (a / b).floor.zero? else b\nend", "  return\
    \ a if b == 0 else greatest_common_divisor.call(b, a%b)\nend", "  return a if\
    \ b == 0 else greatest_common_divisor.call(b, a%b)\nend", "  return a if b ==\
    \ 0 else greatest_common_divisor.call(b, a%b)\nend", "  while b > 0\n    a, b\
    \ = b, a % b\n  end\n  a\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis code doesn't work. `greatest_common_divisor(12, 4)` returns\
    \ `2` instead of `3`.\n<|/ c |>\n<| c |>\nThis code doesn't work. `greatest_common_divisor(12,\
    \ 4)` returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nThis code doesn't work.\
    \ `greatest_common_divisor(12, 4)` returns `2` instead of `3`.\n<|/ c |>\n<| c\
    \ |>\nThis code doesn't work. `greatest_common_divisor(12, 4)` returns `2` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\nThis code doesn't work. `greatest_common_divisor(12,\
    \ 4)` returns `2` instead of `3`.\n<|/ c |>\n<| a |>\n<code>", "  while b > 0\n\
    \    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe\
    \ `greatest_common_divisor` function can be simplified to `def greatest_common_divisor(a,\
    \ b); a % b; end`\n<|/ c |>\n<| c |>\nYes, I know, but I wanted to show that you\
    \ can write it that way as well. :)\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if\
    \ b == 0 else greatest_common_divisor.call(b, a%b)\nend", "  while a != 0\n  \
    \  a, b = b % a, a\n  end\n  a\nend", "  while b != 0\n    a, b = b, a % b\n \
    \ end\n  a\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if `a`\
    \ is negative.\n<|/ c |>\n<| c |>\nIt doesn't work if `a` is negative. `greatest_common_divisor(-5,\
    \ 5)` returns `-5` instead of `0`.\n<|/ c |>\n<| c |>\nIt doesn't work if `a`\
    \ is negative. `greatest_common_divisor(-5, 5)` returns `-5` instead of `0`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if `a` is negative. `greatest_common_divisor(-5,\
    \ 5)` returns `-5` instead of `0`.\n<|/ c |>\n<| c |>\nIt doesn't work if `a`\
    \ is negative. `greatest_common_divisor(-5, 5)` returns `-5` instead of `0`.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  while b != 0\n    a, b = b, a % b\n \
    \ end\n  a\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,algorithm |>\n<code>",
  "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much! This was very helpful.\n<|/ c |>\n<| c |>\nI added\
    \ a more efficient solution that doesn't require a loop. Check it out.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>", "  return a if b == 0 else greatest_common_divisor.call(b,\
    \ a%b)\nend", "  while a && b\n    a, b = b % a, a\n  end\n  a\nend", "  return\
    \ a if (b == 0) else greatest_common_divisor.call(b, a%b)\nend", "  return a if\
    \ b == 0 else greatest_common_divisor.call(b, a % b)\nend", "  while b != 0\n\
    \    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if `a` is negative.\n<|/ c |>\n<| c |>\nIt does work if `a` is negative.\
    \ `a%b` returns `a` when `a` is negative.\n<|/ c |>\n<| c |>\nYes, but `a%b` returns\
    \ `a` when `a` is negative.\n<|/ c |>\n<| c |>\nYes, but `a%b` returns `a` when\
    \ `a` is negative.\n<|/ c |>\n<| c |>\nYes, but `a%b` returns `a` when `a` is\
    \ negative.\n<|/ c |>\n<| a tags=ruby,math,algorithm |>\n<code>", "  while b !=\
    \ 0\n    a, b = b, a % b\n  end\n  a\nend", "  while b != 0\n    a, b = b, a %\
    \ b\n  end\n  a\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like\
    \ this solution, but I wonder if it will scale well for large numbers. I wonder\
    \ if there is a way to do this without having to store all the numbers in an array.\n\
    <|/ c |>\n<| c |>\nI believe this solution will scale well for large numbers.\
    \ If you have a large number of numbers, you can store them in a database and\
    \ use ActiveRecord to query the database for the greatest common divisor. I'll\
    \ update my answer with an example.\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ include a solution that does not store all the numbers in an array.\n<|/ c |>\n\
    <| c |>\nThanks so much for the help! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nI added a solution that does not store all the numbers in an array.\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  while b != 0\n    a, b =\
    \ b, a % b\n  end\n  a\nend", "  return a if b == 0 else greatest_common_divisor.call(b,\
    \ a % b)\nend", "  return a if b == 0 else greatest_common_divisor.call(b, a %\
    \ b)\nend", "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis doesn't work for negative numbers. `greatest_common_divisor(-5,\
    \ -2)` returns `-5` instead of `-2`.\n<|/ c |>\n<| c |>\n: It does work for negative\
    \ numbers. `greatest_common_divisor(-5, -2)` returns `-2`.\n<|/ c |>\n<| c |>\n\
    : It works for negative numbers. `greatest_common_divisor(-5, -2)` returns `-2`.\n\
    <|/ c |>\n<| c |>\n: It works for negative numbers. `greatest_common_divisor(-5,\
    \ -2)` returns `-2`.\n<|/ c |>\n<| c |>\n: It works for negative numbers. `greatest_common_divisor(-5,\
    \ -2)` returns `-2`.\n<|/ c |>\n<| a |>\n<code>", "  while a != 0\n    a, b =\
    \ b % a, a\n  end\n  a\nend", "  while b > 0\n    a, b = b, a % b\n  end\n  a\n\
    end", "  return a if b == 0 else greatest_common_divisor.call(b, a%b)\nend", " \
    \ while b > 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nThis doesn't work for negative numbers. `greatest_common_divisor(-5,\
    \ -2)` returns `-5` instead of `-2`.\n<|/ c |>\n<| c |>\nI believe this would\
    \ also work for negative numbers, as long as you change `a > b` to `a < b` in\
    \ the while loop. `a > b` would return true when `a` is greater than `b`, but\
    \ `a < b` would return true when `a` is less than `b`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `greatest_common_divisor(-5, -2)` returns\
    \ `-5` instead of `-2`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `greatest_common_divisor(-5, -2)` returns `-5` instead of `-2`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. `greatest_common_divisor(-5,\
    \ -2)` returns `-5` instead of `-2`.\n<|/ c |>\n<| a tags=ruby,math |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
