name: HumanEval_13_greatest_common_divisor
language: rb
prompt: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3,\
  \ 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
  \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
  \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
  \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
completions: ["  while b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if\
    \ (b == 0) else greatest_common_divisor.call(b, a%b)\nend", "  return a if b ==\
    \ 0 else greatest_common_divisor.call(b, a % b)\nend", "  while b != 0\n    a,\
    \ b = b, a % b\n  end\n  a\nend", "  while b > 0\n    a, b = b, a % b\n  end\n\
    \  a\nend", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  while b\
    \ != 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if b == 0 else greatest_common_divisor.call(b,\
    \ a % b)\nend", "  while b != 0\n    a, b = b, a % b\n  end\n  a\nend", "  while\
    \ b > 0\n    a, b = b, a % b\n  end\n  a\nend", "  return a if (b == 0) else (a\
    \ // b) if (a % b == 0) else greatest_common_divisor(b, a % b)\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis is an excellent solution.  I used it in a project to find the greatest\
    \ common divisor of two numbers.  I used the recursive method described above\
    \ and also used the method described here: http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    <|/ c |>\n<| c |>\nGreat solution! I used this in Ruby on Rails 3.2.1 by adding\
    \ this to the top of my application_helper.rb file: require 'greatest_common_divisor'\n\
    <|/ c |>\n<| c |>\nI used this in Rails 3.2.1 by adding this to the top of my\
    \ application_helper.rb file: require 'greatest_common_divisor'\n<|/ c |>\n<|\
    \ c |>\nI used this in Rails 3.2.1 by adding this to the top of my application_helper.rb\
    \ file: require 'greatest_common_divisor'\n<|/ c |>\n<| c |>\nI used this in Rails\
    \ 3.2.1 by adding this to the top of my application_helper.rb file: require 'greatest_common_divisor'\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  while b != 0\n    a, b = b, a % b\n  end\n\
    \  a\nend", '  return a % b if b > 0 && (a / b) == b else b', "  while b > 0\n\
    \    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  return a if b == 0 else greatest_common_divisor.call(b, a%b)\n\
    end", "  while b > 0\n    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for negative numbers. `greatest_common_divisor(-5,\
    \ -2)` returns `-5` instead of `-2`.\n<|/ c |>\n<| c |>\n: I agree. My solution\
    \ was meant to be a general solution. I'll add a note about negative numbers to\
    \ the answer.\n<|/ c |>\n<| c |>\nI added a solution that works for negative numbers.\
    \ I didn't want to change the code too much though.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that works for negative numbers. I didn't want to change the code\
    \ too much though.\n<|/ c |>\n<| a tags=ruby,math |>\n<code>", "  while b != 0\n\
    \    a, b = b, a % b\n  end\n  a\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\n\
    I like this solution, but I wonder if it would be more efficient to just do `a\
    \ / b` instead of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| c |>\nI like that\
    \ too, but I wanted to show how to implement the method as well.\n<|/ c |>\n<|\
    \ c |>\nI like your solution, but I wonder if it would be more efficient to just\
    \ do `a / b` instead of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| c |>\nI\
    \ like your solution, but I wonder if it would be more efficient to just do `a\
    \ / b` instead of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I wonder if it would be more efficient to just do `a / b` instead\
    \ of `greatest_common_divisor(a, b)`\n<|/ c |>\n<| a tags=ruby |>\n<code>", " \
    \ return a if (b == 0) else greatest_common_divisor.call(b, a % b)\nend", "  while\
    \ b != 0\n    a, b = b, a % b\n  end\n  a\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
