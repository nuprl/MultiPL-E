name: HumanEval_1_separate_paren_groups
language: rb
prompt: "# Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n# separate those group into separate strings and\
  \ return the list of those.\n# Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n# Ignore any spaces in the\
  \ input string.\n# >>> separate_paren_groups.call(\"( ) (( )) (( )( ))\")\n# [\"\
  ()\", \"(())\", \"(()())\"]\ndef separate_paren_groups(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_separate_paren_groups\n\
  \    candidate = method(:separate_paren_groups)\n    assert_equal([\"(()())\", \"\
  ((()))\", \"()\", \"((())()())\"], candidate.call(\"(()()) ((())) () ((())()())\"\
  ))\n    assert_equal([\"()\", \"(())\", \"((()))\", \"(((())))\"], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([\"(()(())((())))\"], candidate.call(\"\
  (()(())((())))\"))\n    assert_equal([\"()\", \"(())\", \"(()())\"], candidate.call(\"\
  ( ) (( )) (( )( ))\"))\n  end\nend\n"
completions: ["  paren_string.split(//).map do |group|\n    group.split(//).map do\
    \ |char|\n      char.strip\n    end\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\)]*)\\)\\s*|([^\\\
    (]*)/).map do |group|\n    group.empty? ? nil : group\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^\\(\\)]+/).map {\
    \ |x| x.gsub(/[\\(\\)]/, '') }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?).map\
    \ { |s| s.gsub(/\\(|\\)|\\{|\\}/, \"\") }\nend", "  paren_string.scan(/[^()]+/)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\)\\s*|(?<=\\()[^()]*(?=\\))/)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\nend",
  "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).flatten\nend", "  paren_string.scan(/[^\\\
    (\\)]+/).map { |s| s.gsub(/\\(/, '').gsub(/\\)/, '') }\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/[^()]+/)\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |group| group.gsub(/\\s+/,\
    \ \"\") }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\"\
    ) }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map do |group|\n\
    \    group.gsub(/\\s+/, \"\").gsub(/\\s+\\)/, \"\").gsub(/\\s+\\)/, \"\").gsub(/\\\
    s+\\)/, \"\")\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\)\\s*|(?<=\\()[^()]*(?=\\))/)\n\
    end", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\\
    s*\\(\\s*\\)\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/[\\(\\)]/).map { |x| x.gsub(/\\s+/, \"\") }\nend",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).map do |group|\n    group.empty?\
    \ ? nil : group\n  end\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend",
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/\\s*\\((?!\\))\\\
    s*\\)\\s*|\\s*\\((?!\\))\\s*|\\s*\\((?!\\))\\s*\\)/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map { |x| x.gsub(\"(\", \"\").gsub(\")\", \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map { |group| group.gsub(/\\s+/, \"\") }\n\
    end", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |match| match.captures.first\
    \ }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend",
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\"\
    ) }\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*/).map { |s| s.gsub(/\\s+/, \"\") }\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |match| match[1].split(\"\
    \ \") }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend",
  "  paren_string.scan(/[\\(\\)]/).map { |x| x.gsub(/[\\(\\)]/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/).map { |x| x[0] ? x.gsub(/\\s+/, \"\") : x\
    \ }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/)\n\
    end", "  paren_string.scan(/[^\\(\\)]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |group| group.gsub(/\\s+/,\
    \ \"\") }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend", " \
    \ paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |match| match.captures.first\
    \ }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |s| s.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |m|\
    \ m.captures.flatten.map { |x| x.gsub(/\\s+/, \"\") } }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\((?!\\))/).map { |x| x.gsub(/\\\
    s*\\((?!\\))\\s*/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map do |group|\n    group.gsub(/\\\
    s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|',
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map do |group|\n    group.gsub(/\\\
    s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).map { |group| group.flatten.compact.map { |e| e.to_s } }\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map do |group|\n    group.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |inner_group|\n      inner_group.gsub(/\\s*\\(([^()]*)\\\
    )\\s*/, \"\")\n    end\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).map { |m| m.last.empty?\
    \ ? m.first : m.last }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map { |match| match.captures.first }\nend", "  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\\
    (\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan(/[\\(\\)]/)\n  paren_string.scan",
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[\\\
    (\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", "  paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*|([^()]+)/).map do |group|\n    group.flatten.compact\n  end\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/[()]/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\\
    )]+)\\)\\s*|([^\\(]+)/).map { |x| x[0].empty? ? x[1].strip : x[1].strip }\nend",
  "  paren_string.scan(/[()]/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map { |group| group.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|(\\(([^()]*)\\))/)\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\\
    )/, \")\")\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/,\
    \ \"\") }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend",
  "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\s*\\(\\s*\\)\\s*\\)/)\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\',
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |match| match[1].split(\"\
    \ \") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |match|\
    \ match.captures.flatten.map { |x| x.gsub(/\\s+/, \"\") } }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^\\\
    (\\)]+/)\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/,\
    \ \"\") }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\\
    )\\s*/)\nend", "  paren_string.scan(/[^\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]/,\
    \ '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |match| match.captures.flatten.map\
    \ { |e| e.gsub(/\\s+/, \"\") } }\nend", "  paren_string.scan(/[^()]+/)\nend",
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).map { |x| x.first }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|(?R))*\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[()]/)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|(\\([^()]*\\))/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map { |group|\
    \ group.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\\
    ))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s+\\)/, \"\"\
    ).gsub(/\\s+\\)/, \"\").gsub(/\\s+\\)/, \"\")\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).map { |m| m.last.empty? ? m.first : m.last }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/\\s*\\(([^\\(\\\
    )]+)\\)\\s*/).map { |group| group.gsub(/\\s+/, \"\") }\nend", "  paren_string.split(//).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s+/, \"\").gsub(/\\s+/, \"\"\
    ).gsub(/\\s+/, \"\").gsub(/\\s+/, \"\")\n  end\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^(]*)/).flatten.compact\nend", "  paren_string.scan(/\\\
    s*\\((?!\\))\\s*\\)\\s*|\\s*\\((?!\\))\\s*|\\s*\\((?!\\))\\s*\\)/).map { |match|\
    \ match.to_s.gsub(/\\s*\\((?!\\))\\s*\\)\\s*|\\s*\\((?!\\))\\s*|\\s*\\((?!\\))\\\
    s*\\)/, '') }\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\\
    )]+/, '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\"\
    ) }\nend", "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\s+/, \"\") }\nend",
  "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, \"\") }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map do |group|\n \
    \   group.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |match| match.captures.first\
    \ }\nend", "  paren_string.scan(/[()]/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/)\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |group|\
    \ group.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n        paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n          paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n          \
    \    paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                  paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n                      paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n                        paren_string.scan(/[\\(\\)]+/).map do\
    \ |paren_string|\n                          paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/).map do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                             \
    \ paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n                     \
    \                           paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n\
    \                                                  paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[\\\
    (\\)]+/).map do |paren_string|\n                                             \
    \         paren_string.scan(/[\\(\\)]+/).map do |paren_string|\n             \
    \                                           paren_string.scan(/[\\(\\)]+/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[\\", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*|([^\\\
    (]+)/).flatten\nend", "  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\\
    (\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n  paren_string.scan(/[\\(\\)]+/)\n\
    \  paren_string.scan", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |match|\
    \ match[1].split(\" \") }\nend", "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/[^\\(\\)]+/).map { |x| x.gsub(/\\s+/,\
    \ \"\") }\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/,\
    \ \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\\
    s*/).map { |match| match[1].split(\" \") }\nend", "  paren_string.scan(/\\s*\\\
    (([^()]*|\\([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\\
    (/, \"(\").gsub(/\\)/, \")\")\n  end\nend", "  paren_string.split(/\\(|\\)|\\\
    {|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/)\n\
    end", '  paren_string.scan(/\s*\(([^()]*)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()]+)\)\s*|\s*\(([^()',
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map { |group| group.gsub(/\\s+/, \"\") }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |x| x.gsub(\"(\", \"\").gsub(\"\
    )\", \"\") }\nend", "  paren_string.scan(/[\\(\\)]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).map { |x| x.first }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/).map { |m| m[0] ? m[0] : m[1] }\nend", "  paren_string.scan(/[()]/)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|(\\([^()]*\\))/).map { |match|\
    \ match[0].strip }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map\
    \ do |match|\n    match.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\"\
    )\n  end\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\\
    ([^()]*\\))*\\)\\s*/).map { |group| group.gsub(/\\s+/, \"\") }\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/)\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.gsub(/[\\(\\)]/, '') }\nend", "  paren_string.split(/\\(|\\\
    )|\\{|\\}/).reject(&:empty?)\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)',
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\"\
    ) }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^(]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |x| x.gsub(\"( )\"\
    , \"()\") }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\"\
    ) }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).map do |group|\n    group.empty? ? nil : group\n\
    \  end\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend",
  "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\\
    s*|([^()]+)/).map do |group|\n    if group.first == \"(\"\n      group.last\n\
    \    else\n      group.first\n    end\n  end\nend", "  paren_string.scan(/\\s*\\\
    (([^()]*)\\)\\s*|([^()]+)/).map { |group| group.flatten.compact.join }\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/[()]/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\\
    ))*\\)\\s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|\\s*\\(([^()]*\\([^()]*\\))*\\)\\s*/).flatten\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|(?R))*\\)\\s*/)\nend", "  paren_string.scan(/[^()]+/).map { |s| s.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\)\\s*/).map { |m| m.captures\
    \ }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend",
  "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).flatten\nend", " \
    \ paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.scan(/[\\(\\)]+/).map\
    \ { |x| x.gsub(/[\\(\\)]+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten.compact\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*|([^()]+)/).map { |m| m[1] ? m[1].split(\" \") : m[0].split(\" \") }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
