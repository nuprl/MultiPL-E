name: HumanEval_155_even_odd_count
language: rb
prompt: "# Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n\
  # [1, 2]\ndef even_odd_count(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
  \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
  \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
  \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
  \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
  \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
completions: ["  even, odd = 1, 0\n  while num > 0\n    even, odd = even * 10 + num\
    \ % 10, odd * 10 + num % 10\n    num /= 10\n  end\n  [even, odd]\nend", "  even\
    \ = 0\n  odd = 0\n  while num > 0\n    digit = num % 10\n    num = num / 10\n\
    \    if digit % 2 == 0\n      even = even + 1\n    else\n      odd = odd + 1 \n\
    \  end\n  return [even, odd]\nend", "  even, odd = 0, 0\n  while num > 0\n   \
    \ even, odd = even+1, odd+1 if num % 2 == 0 else odd\n    num = num / 10\n  end\n\
    \  [even, odd]\nend", "  even, odd = 0, 0\n  while num > 0\n    digit = num %\
    \ 10\n    num = num / 10\n    if digit % 2 == 0\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n  end\n  [even, odd]\nend", "  even = 0\n  odd = 0\n  while\
    \ num > 0\n    even = even + 1 if num % 2 == 0 end\n    odd = odd + 1 if num %\
    \ 2 != 0 end\n    num = num / 2\n  end\n  return [even, odd]\nend", "  odd = 1\n\
    \  even = 1\n  while num > 0\n    odd = odd + 1\n    num = num / 10\n  end\n \
    \ while num > 0\n    even = even + 1\n    num = num / 10\n  end\n  return [even,\
    \ odd]\nend", "  even_count = 0\n  odd_count = 0\n  while num > 0\n    if num\
    \ % 2 == 0\n      even_count += 1\n      num -= 2\n    else\n      odd_count +=\
    \ 1\n      num -= 1\n  end\n  return [even_count, odd_count]\nend", "  even =\
    \ 0\n  odd = 0\n  while num > 0\n    digit = num % 10\n    num = num / 10\n  \
    \  if digit % 2 == 0\n      even = even + 1\n    else\n      odd = odd + 1 \n\
    \  end\n  return [even, odd]\nend", "  even = num.divmod(2).first\n  odd = num.modulo(2)\n\
    \  [even, odd]\nend", "  even = 0\n  odd = 0\n  while num > 0\n    even = even\
    \ + 1 if num % 2 == 0 end\n    odd = odd + 1 if num % 2 != 0 end\n    num = num\
    \ / 2\n  end\n  return [even, odd]\nend", "  even = 0\n  odd = 0\n  while num\
    \ > 0\n    if num % 2 == 0\n      even += 1\n    else\n      odd += 1\n    num\
    \ /= 10\n  end\n  return [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n\
    \  while num > 0\n    digit = num % 10\n    num = num / 10\n    if digit % 2 ==\
    \ 0\n      even_count += 1\n    else\n      odd_count += 1\n  end\n  return [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  while num > 0\n    even = even +\
    \ 1 if num % 2 == 0 end\n    odd = odd + 1 if num % 2 != 0 end\n    num = num\
    \ / 10\n  end\n  return [even, odd]\nend", "  even = num / 2\n  odd = num - even\n\
    \  return [even, odd]\nend", "  even = 0\n  odd = 0\n  while num > 0\n    digit\
    \ = num % 10\n    num = num / 10\n    if digit % 2 == 0\n      even = even + 1\n\
    \    else\n      odd = odd + 1 \n  end\n  return [even, odd]\nend", "  even =\
    \ 0\n  odd = 0\n  while num > 0\n    even = even + 1 if num % 2 == 0 end\n   \
    \ odd = odd + 1 if num % 2 != 0 end\n    num = num / 2\n  end\n  return [even,\
    \ odd]\nend", "  even = num.divmod(2).first\n  odd = num.modulo(2)\n  [even, odd]\n\
    end", "  even = 0\n  odd = 0\n  while num > 0\n    even = even + 1 if num % 2\
    \ == 0 end\n    odd = odd + 1 if num % 2 != 0 end\n    num = num / 2\n  end\n\
    \  return [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  while num >\
    \ 0\n    if num % 2 == 0\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    num = num / 2\n  end\n  return [even_count, odd_count]\nend", "  even\
    \ = 0\n  odd = 0\n  while num > 0\n    if num % 2 == 0\n      even += 1\n    else\n\
    \      odd += 1\n    num /= 10\n  end\n  [even, odd]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
