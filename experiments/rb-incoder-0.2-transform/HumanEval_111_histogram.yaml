name: HumanEval_111_histogram
language: rb
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" =>\
  \ 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"\
  a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n\
  # {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1 unless result[:default].nil?\n\
    \  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] +=\
    \ 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |histogram,\
    \ letter| histogram[letter] += 1 }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, x|\
    \ h[x] += 1 }\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1\n  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1 \n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:letter]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,x|\
    \ h[x] += 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n  \
    \  result[letter] = result[letter].to_i + 1 if result[letter]\n  end\n  result\n\
    end", "  test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(\" \"\
    ).each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1 if result[letter].nil?\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  letters = test.split\n\
    \  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n  end\n\
    \  letters.max_by { |k, v| v }\nend", "  result = {}\n  test.split(\" \").each\
    \ do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1 if test[letter]\n  end\n  result\nend", "  result = Hash.new(0)\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] += 1\n  end\n  result\nend", "  test.split(\"\
    \ \").inject({}) do |histogram, letter|\n    histogram[letter] ||= 0\n    histogram[letter]\
    \ += 1\n    histogram\n  end\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  letters = test.split(\" \")\n  letters.each do\
    \ |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.sort_by!{|k,\
    \ v| v}\n  letters.reverse!\n  letters.group_by!{|k, v| k}\n  letters.inject({})\
    \ do |memo, (key, value)|\n    memo[key.downcase] = value.size\n    memo\n  end\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1 unless result[letter] == 0\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = test.split(' ').count(letter)\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  test.split(\" \").inject({}) do |histogram, letter|\n\
    \    histogram[letter] ||= 0\n    histogram[letter] += 1\n    histogram\n  end\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[:letter] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[:letter]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1 if test[letter]\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] = result[:letter] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h,x|\
    \ h[x] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split.each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,\
    \ x| h[x] += 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    letter = letter.downcase\n    if result.has_key?(letter)\n      result[letter]\
    \ += 1\n    else\n      result[letter] = 1\n    end\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:letter]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[letter].to_i + 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[letter].to_i + 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[letter].to_i + 1 if result[letter]\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = result[letter].to_i + 1 if result[letter]\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ result[letter].to_i + 1 if result[letter]\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ test.split(' ').inject(Hash.new(0)) { |h,x| h[x] += 1 }\nend", "  result = {}\n\
    \  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x|\
    \ h[x] += 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n  \
    \  result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1 if result[letter].nil?\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] = result[:letter] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,\
    \ x| h[x] += 1 }\nend", "  test.split(\" \").inject({}) do |histogram, letter|\n\
    \    histogram[letter] ||= 0\n    histogram[letter] += 1\n    histogram\n  end\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1 \n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  result = Hash.new(0)\n\
    \  test.split(\" \").each do |letter|\n    result[letter] += 1 if letter in result\n\
    \  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1 if result[letter]\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] ||=\
    \ 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = test.split(\" \").count(letter)\n\
    \  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1 if result[letter].nil?\n    result[letter]\
    \ = result[letter].to_i + 1 if result[letter] >= result[letter].to_i\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h,x|\
    \ h[x] += 1; h }\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1\n  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[letter].to_i + 1 if result[letter]\n\
    \  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1 if result[letter]\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1 \n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ test.split(\" \").inject(Hash.new(0)) do |histogram, letter|\n    histogram[letter]\
    \ += 1\n    histogram\n  end\nend", "  result = Hash.new(0)\n  test.split(\" \"\
    ).each do |letter|\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1 if result[letter].nil?\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[letter].to_i + 1 if result[letter]\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[letter].to_i + 1 if result[letter]\n  end\n  result\nend", "  result\
    \ = {}\n  test.split.each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(\" \"\
    ).each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n \
    \   result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[:letter] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  letters = test.split\n  letters.inject(Hash.new(0)) { |h,\
    \ letter| h[letter] += 1 }\n  letters.max_by { |k, v| v }\nend", "  result = {}\n\
    \  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[:letter]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = test.split(\" \").count(letter)\n  end\n  result\nend", "  result = {}\n \
    \ test.split(\" \").each do |letter|\n    result[letter] = result[:letter] ||\
    \ 0\n    result[letter] += 1\n  end\n  result\nend", "  letters = test.split(\"\
    \ \")\n  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n\
    \  end\n  letters.max_by { |k, v| v }\nend", "  letters = test.split(\" \")\n\
    \  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n  end\n\
    \  letters.sort_by!{|k, v| v}\n  letters.group_by{|k, v| k}.map{|k, v| [k, v.count]}\n\
    end", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,x|\
    \ h[x] += 1 }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n  \
    \  result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[:letter]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = Hash.new(0)\n\
    \  test.split(' ').each do |letter|\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n\
    \    if result[letter].nil?\n      result[letter] = 1\n    else\n      result[letter]\
    \ += 1\n    end\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] = result[:letter] || 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1 \n  end\n\
    \  result\nend", "  letters = test.split\n  histo = {}\n  letters.each do |letter|\n\
    \    histo[letter] ||= 0\n    histo[letter] += 1\n  end\n  histo\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = test.split(\" \").count(letter)\n\
    \  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1 if result.has_key?(letter)\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1 if result[letter]\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1 unless result[letter] == 0\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[letter].to_i + 1 if result[letter]\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  letters = test.split(\" \")\n  frequencies =\
    \ Hash.new(0)\n  letters.each do |letter|\n    frequencies[letter] += 1\n  end\n\
    \  frequencies.sort_by {|k, v| v}.inject({}) do |result, pair|\n    result[pair[0]]\
    \ = pair[1]\n    result\n  end\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    result[letter] = test.split.count(letter)\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h,x| h[x] += 1 }\nend", "  result = Hash.new(0)\n\
    \  test.split(\" \").each do |letter|\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ test.split(' ').inject(Hash.new(0)) { |h,x| h[x] += 1; h }\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = test.split('\
    \ ').count(letter)\n  end\n  result\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = test.split(\" \").count(letter)\n  end\n  result\nend", "  result = {}\n \
    \ test.split(\" \").each do |letter|\n    result[letter] = test.split(\" \").count(letter)\n\
    \  end\n  result\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1 if result[letter] > 0\n  end\n  result\nend", "  result\
    \ = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter] += 1\
    \ if result.has_key?(letter)\n  end\n  result\nend", "  test.split(\" \").inject({})\
    \ do |histogram, letter|\n    histogram[letter] ||= 0\n    histogram[letter] +=\
    \ 1\n    histogram\n  end\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = Hash.new(0)\n  test.split(' ').each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split.each\
    \ do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, x|\
    \ h[x] += 1; h }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:letter]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split.each do |letter|\n    result[letter] = test.split.count(letter)\n\
    \  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  letters = test.split(\" \")\n  letters.each\
    \ do |letter|\n    letters[letter] = letters[letter].to_i\n  end\n  letters.sort_by\
    \ { |k, v| v }.reverse.group_by(&:first).map { |k, v| [k, v.size] }\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  letters = test.split(\" \"\
    ).map { |letter| letter[0].to_sym }\n  letters.inject(Hash.new(0)) { |memo, letter|\
    \ memo[letter] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,x|\
    \ h[x] += 1; h }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1; h }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
