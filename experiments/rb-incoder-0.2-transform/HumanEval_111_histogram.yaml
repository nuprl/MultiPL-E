name: HumanEval_111_histogram
language: rb
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" =>\
  \ 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"\
  a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n\
  # {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1 unless result[:default].nil?\n\
    \  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x| h[x] +=\
    \ 1 }\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ = result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |histogram,\
    \ letter| histogram[letter] += 1 }\nend", "  result = {}\n  test.split(' ').each\
    \ do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] =\
    \ result[:letter] || 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, x|\
    \ h[x] += 1 }\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1\n  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
