name: HumanEval_54_same_chars
language: rb
prompt: "# Check if two words have the same characters.\n# >>> same_chars.call(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# true\n# >>> same_chars.call(\"abcd\", \"\
  dddddddabc\")\n# true\n# >>> same_chars.call(\"dddddddabc\", \"abcd\")\n# true\n\
  # >>> same_chars.call(\"eabcd\", \"dddddddabc\")\n# false\n# >>> same_chars.call(\"\
  abcd\", \"dddddddabce\")\n# false\n# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
  )\n# false\ndef same_chars(s0, s1)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_same_chars\n\
  \    candidate = method(:same_chars)\n    assert_equal(true, candidate.call(\"eabcdzzzz\"\
  , \"dddzzzzzzzddeddabc\"))\n    assert_equal(true, candidate.call(\"abcd\", \"dddddddabc\"\
  ))\n    assert_equal(true, candidate.call(\"dddddddabc\", \"abcd\"))\n    assert_equal(false,\
  \ candidate.call(\"eabcd\", \"dddddddabc\"))\n    assert_equal(false, candidate.call(\"\
  abcd\", \"dddddddabcf\"))\n    assert_equal(false, candidate.call(\"eabcdzzzz\"\
  , \"dddzzzzzzzddddabc\"))\n    assert_equal(false, candidate.call(\"aabb\", \"aaccc\"\
  ))\n  end\nend\n"
completions: ["  return s0.size == s1.size && s0.chars.zip(s1.chars).all? { |a,b|\
    \ a == b }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length\
    \ and s0.chars.zip(s1.chars).all? { |a,b| a == b }\nend", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  return s0.chars == s1.chars\nend", "  return s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend",
  "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a.char == b.char\n  end\nend", "  return s0.chars == s1.chars\n\
    end", "  return s0.chars == s1.chars && s0.size == s1.size\nend", "  s0, s1 =\
    \ s0.downcase, s1.downcase\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  s0, s1 = s0.to_a, s1.to_a\n  s0.each_char.zip(s1.each_char).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return\
    \ s0.length == s1.length and s0.chars.zip(s1.chars).all? do |a,b|\n    a.char\
    \ == b.char\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort,\
    \ s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort,\
    \ s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort,\
    \ s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort,\
    \ s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort,\
    \ s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s", "  return\
    \ s0.chars == s1.chars and s0.chars == s0.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join,\
    \ s1.join\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_", "  s0 = s0.to_s\n \
    \ s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all? { |c0, c1| c0 == c1 }\n\
    end", "  return s0.chars == s1.chars && s0.chars.length == s1.chars.length\nend",
  "  s0, s1 = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend", "  return\
    \ s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars,\
    \ s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return\
    \ s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars,\
    \ s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_", "  return s0.chars == s1.chars\nend",
  "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  s0 = s0.chars.to_a\n  s1 = s1.chars.to_a\n\
    \  s0.zip(s1).all? { |a,b| a == b }\nend", "  return s0.chars == s1.chars\nend",
  "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\nend", "  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_",
  "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.size\
    \ == s1.size && s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n \
    \ end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.size\
    \ == s1.size && s0.chars.zip(s1.chars).all? do |a,b|\n    a == b\n  end\nend",
  "  s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a.char == b.char\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  return s0.length == s1.length and s0.chars.zip(s1.chars).all? do |a,b|\n  \
    \  a.char == b.char\n  end\nend", "  s0, s1 = s0.downcase, s1.downcase\n  return\
    \ s0.chars == s1.chars\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.size\
    \ == s1.size && s0.chars.zip(s1.chars).all? do |a, b|\n    a.char == b.char\n\
    \  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length and\
    \ s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n  end\nend", " \
    \ s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  return s0.zip(s1).all?\
    \ { |a,b| a == b }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length ==\
    \ s1.length and s0.chars.zip(s1.chars).all? do |a, b|\n    a.char == b.char\n\
    \  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  return\
    \ s0.zip(s1).all? { |a,b| a == b }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0.each_char\
    \ do |c|\n    return false if s1.include?(c)\n  end\n  true\nend", "  s0 = s0.to_s\n\
    \  s1 = s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a.char == b.char\n  end\nend", "  return s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.chars == s1.chars\nend", "  s0,\
    \ s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  return s0.chars == s1.chars && s0.size\
    \ == s1.size\nend", "  return s0.chars == s1.chars\nend", "  s0 = s0.downcase\n\
    \  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", "  return s0.chars ==\
    \ s1.chars\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
