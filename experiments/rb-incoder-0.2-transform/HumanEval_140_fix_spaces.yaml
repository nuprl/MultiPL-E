name: HumanEval_140_fix_spaces
language: rb
prompt: "# Given a string text, replace all spaces in it with underscores, \n# and\
  \ if a string has more than 2 consecutive spaces, \n# then replace all consecutive\
  \ spaces with - \n# >>> fix_spaces.call(\" Example\")\n# \"Example\"\n# >>> fix_spaces.call(\"\
  \ Example 1\")\n# \"Example_1\"\n# >>> fix_spaces.call(\" Example 2\")\n# \"_Example_2\"\
  \n# >>> fix_spaces.call(\" Example 3\")\n# \"_Example-3\"\ndef fix_spaces(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n\
  \    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"\
  Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif\
  \ \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow\
  \ Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa\
  \   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2\
  \ 2 mple\"))\n  end\nend\n"
completions: ["  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nI like this solution,\
    \ but I ended up using [this answer](http://stackoverflow.com/a/1812373/477037)\
    \ instead. Thanks!\n<|/ c |>\n<| a dscore=2 |>\nI ended up using this:\n<code>",
  "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if the string contains multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. `\" Example 1 \"` becomes `\"Example-1\"`.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. `\" Example 1 \"` becomes\
    \ `\"Example-1\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. `\" Example\
    \ 1 \"` becomes `\"Example-1\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\
    \ `\" Example 1 \"` becomes `\"Example-1\"`.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a dscore=1 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your\
    \ solution, but I prefer `gsub!` over `gsub` because I find it easier to read.\
    \ `gsub!` modifies the string in place and returns the modified string.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I just wanted to show that `gsub` returns modified\
    \ string and `gsub!` modifies the string in place.\n<|/ c |>\n<| c |>\nI like\
    \ this solution, but I find it hard to read. `gsub!` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if there\
    \ are multiple spaces next to each other. For example, `\" Example\"` becomes\
    \ `\"Example\"`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to account for multiple spaces next to each other.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for `\" Example\"` -> `\"Example\"`\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to account for multiple spaces next to each\
    \ other.\n<|/ c |>\n<| c |>\nThis doesn't work for `\" Example\"` -> `\"Example\"\
    `\n<|/ c |>\n<| a dscore=4 |>\nI came up with a solution that doesn't require\
    \ any additional gems and is pretty readable:\n<code>", "  text.gsub!(/\\s+/,\
    \ \" \").gsub(/( {2,})/, '-\\1')\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c\
    \ |>\nThis doesn't seem to work if there are multiple spaces between words. For\
    \ example, if I input \"Example 1    Example 2\" it returns \"Example_1    Example\
    \ 2\"\n<|/ c |>\n<| c |>\n: I tested it and it works. I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks, this works great!\
    \ I added a little bit of code to handle multiple spaces consecutively.\n<|/ c\
    \ |>\n<| a dscore=4 |>\n<code>", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like this solution, but\
    \ I wonder if it will work with `fix_spaces(\"  Example\")`\n<|/ c |>\n<| c |>\n\
    Yes, it will. `\\s` matches any whitespace character, including tabs and newlines.\
    \ `\\s{2,}` matches two or more whitespace characters.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder if it will work with `fix_spaces(\"  Example\")`\n\
    <|/ c |>\n<| c |>\nYes, it will. `\\s` matches any whitespace character, including\
    \ tabs and newlines. `\\s{2,}` matches two or more whitespace characters.\n<|/\
    \ c |>\n<| c |>\nI like your solution, but I wonder if it will work with `fix_spaces(\"\
    \  Example\")`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  text.gsub!(/\\s+/, \"\
    _\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't seem to work. `fix_spaces(\"  Example\")` returns\
    \ `\"  Example\"`.\n<|/ c |>\n<| c |>\n: It works fine for me. Are you sure you\
    \ copied it correctly?\n<|/ c |>\n<| c |>\n: I tested it again and it works fine.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works fine. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n\
    : I tested it again and it works fine. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/( {2,})/,\
    \ \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c\
    \ |>\nI like this solution, but I feel like it could be improved. For example,\
    \ what if there are multiple spaces between words?\n<|/ c |>\n<| c |>\nI agree,\
    \ there could be multiple spaces between words. I added a regex that would handle\
    \ that case.\n<|/ c |>\n<| c |>\nI added a regex that would handle multiple spaces\
    \ between words. I tested it and it works.\n<|/ c |>\n<| c |>\nI added a regex\
    \ that would handle multiple spaces between words. I tested it and it works.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a dscore=1 |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| a tags=ruby-on-rails,ruby |>\n<code>", " \
    \ text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThe OP said \"consecutive spaces\" but your regex doesn't match\
    \ consecutive spaces. Try `fix_spaces(\"  Example\")`.\n<|/ c |>\n<| c |>\n: I\
    \ missed that requirement. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\\
    s{2,}/, \"-\")\nend", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much for this! I\
    \ used this in conjunction with [this answer](https://stackoverflow.com/a/47702510/1269037)\
    \ to get my desired result.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a gem for this:\
    \ \n<code>\ngem 'slugify'\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for\
    \ this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for\
    \ this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote\
    \ a gem for this: \n<code>\ngem 'slugify'\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ dscore=1 |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for this: \n<code>\n\
    gem 'slugify'\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a gem for\
    \ this: \n<code>\ngem 'slugify'\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ a |>\nI wrote a gem for this: \n<code>\ngem 'slugify", "  text.gsub(/\\s+/,\
    \ \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| c |>\nThis is an excellent solution. Thanks for sharing.\n<|/ c |>\n\
    <| c |>\nI like this solution, because it doesn't require any additional gems.\n\
    <|/ c |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ gems.\n<|/ c |>\n<| c |>\nI like this solution, because it doesn't require any\
    \ additional gems.\n<|/ c |>\n<| a dscore=5 |>\nI like to use this one:\n<code>",
  "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if there are multiple consecutive spaces.\n<|/\
    \ c |>\n<| c |>\nIt does work, try it yourself. It replaces multiple consecutive\
    \ spaces with a single dash.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\
    \ It replaces multiple consecutive spaces with a single dash.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. Try it yourself. It replaces multiple consecutive spaces with\
    \ a single dash.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself. It replaces\
    \ multiple consecutive spaces with a single dash.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't require any\
    \ additional gems.\n<|/ c |>\n<| c |>\nI like this solution as well, because it\
    \ doesn't require any additional gems.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, because it doesn't require any additional gems.\n<|/ c |>\n<| c |>\n\
    I like this solution as well, because it doesn't require any additional gems.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, because it doesn't require any\
    \ additional gems.\n<|/ c |>\n<| a dscore=5 |>\nI like using gsub! for this:\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for me. `fix_spaces(\"\
    \  Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\n: It works for me in\
    \ Ruby 1.9.3p194. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n:\
    \ I added a version that doesn't require the use of `gsub!`.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't require the use of `gsub!`.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't require the use of `gsub!`.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do this without having to call `gsub!` twice.  I wonder\
    \ if there is a way to do this with one `gsub` call.\n<|/ c |>\n<| c |>\nI wonder\
    \ if there is a way to do this with one `gsub` call. Yes, there is. See my answer.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/,\
    \ \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like your\
    \ answer, but I think it would be better to use the `gsub` method on `text` instead\
    \ of `text` on `text`.\n<|/ c |>\n<| c |>\nThanks, I fixed the typo.\n<|/ c |>\n\
    <| c |>\nI like your answer, but I think it would be better to use the `gsub`\
    \ method on `text` instead of `text` on `text`.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for me. `fix_spaces(\"\
    \  Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\n: It works for me in\
    \ Ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0]. Maybe you\
    \ have a different Ruby version?\n<|/ c |>\n<| c |>\n: I tested this in Ruby 1.8.7\
    \ (2010-01-10 patchlevel 249) [i686-darwin10.4.0] and it worked fine. Maybe you\
    \ have a different Ruby version?\n<|/ c |>\n<| c |>\n: I tested this in Ruby 1.9.3p194\
    \ (2012-04-20 revision 35410) [x86_64-darwin10.8.0] and it worked fine. Maybe\
    \ you have a different Ruby version?\n<|/ c |>\n<| c |>\n: I tested this in Ruby\
    \ 1.8.7 (2010-01-10 patchlevel 249) [i686-darwin10.4.0] and it worked fine. Maybe\
    \ you have a different Ruby version?\n<|/ c |>\n<| a tags=ruby,regex |>\nI needed\
    \ a solution that would allow me to replace multiple spaces with a single space\
    \ and also allow me to replace multiple spaces with a single dash. \nI came up\
    \ with this solution:\n<code>", "  text.gsub(\" \",\"_\").gsub(/\\s{2,}/,\"-\"\
    )\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,regex |>\n<code>", " \
    \ text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if you have multiple spaces between words. For\
    \ example, \"This   is   a   test\" becomes \"This_is_a_test\".\n<|/ c |>\n<|\
    \ c |>\n: Yes, that's why I said \"consecutive spaces\".  It doesn't matter how\
    \ many spaces there are between words.  It only matters if there are multiple\
    \ spaces between words.  If there are only two spaces between words, then it won't\
    \ matter how many spaces there are between words.  If there are three spaces between\
    \ words, then it won't matter how many spaces there are between words.  If there\
    \ are four spaces between words, then it won't matter how many spaces there are\
    \ between words.  If there are five spaces between words, then it won't matter\
    \ how many spaces there are between words.  If there are six spaces between words,\
    \ then it won't matter how many spaces there are between words.  If there are\
    \ seven spaces between words, then it won't matter how many spaces there are between\
    \ words.  If there are eight spaces between words, then it won't matter how many\
    \ spaces there are between words.  If there are nine spaces between words, then\
    \ it won't matter how many spaces there are between words.\n<|/ c |>\n<| c |>\n\
    : I added a solution that will handle multiple spaces between words.  It will\
    \ also handle multiple spaces between words and multiple spaces between letters.\
    \  It will also handle multiple spaces between letters and multiple spaces between\
    \ words and multiple spaces between letters.  It will also handle multiple spaces\
    \ between letters and multiple spaces between words and multiple spaces between\
    \ letters.  It will also handle multiple spaces between letters and multiple spaces\
    \ between words and multiple spaces between letters.  It will also handle multiple\
    \ spaces between letters and multiple spaces between words and multiple spaces\
    \ between letters.  It will also handle multiple spaces between letters and multiple\
    \ spaces between words and multiple spaces between letters.  It will also handle\
    \ multiple spaces between letters and multiple spaces between words and multiple\
    \ spaces between letters.  It will also handle multiple spaces between letters\
    \ and multiple spaces between words and multiple spaces between letters.  It will\
    \ also handle multiple spaces between letters and multiple spaces between words\
    \ and multiple spaces between letters.  It will also handle multiple spaces between\
    \ letters and multiple spaces between words and multiple spaces between letters.\
    \  It will also handle multiple spaces between letters and multiple spaces between\
    \ words and multiple spaces between letters.  It will also handle multiple spaces\
    \ between letters and multiple spaces between words and multiple spaces between\
    \ letters.  It will also handle multiple spaces between letters and multiple spaces\
    \ between words and multiple ", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `fix_spaces(\"\
    \  Example\")` returns `\"  Example\"`\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it out yourself. `gsub` replaces all occurrences of `\\s+` with `_`.\n<|/ c\
    \ |>\n<| c |>\n: It does work. Try it out yourself. `gsub` replaces all occurrences\
    \ of `\\s+` with `_`.\n<|/ c |>\n<| c |>\n: It does work. Try it out yourself.\
    \ `gsub` replaces all occurrences of `\\s+` with `_`.\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it out yourself. `gsub` replaces all occurrences of `\\s+` with\
    \ `_`.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \" \"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like your answer, but I think it would be better to use a regex\
    \ to replace multiple spaces with a single space. `text.gsub(/\\s+/, \" \")`\n\
    <|/ c |>\n<| c |>\nI agree, that would be better. I'll update my answer.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/,\
    \ \"-\")\nend\n</code>\n<|/ a |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\\
    s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for\
    \ `\" Example 1 \"` which should be `\"Example-1\"`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ I noticed that after I posted my answer. I've updated my answer to fix this\
    \ problem.\n<|/ c |>\n<| c |>\n: I updated my answer to fix the problem you mentioned.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \" \") \n  text.gsub!(/\\\
    s{2,}/, \"-\") \n  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work for \"Example 3\" because of the space between \"Example\" and \"3\".\n\
    <|/ c |>\n<| c |>\nThis doesn't work for \"Example 3\" because of the space between\
    \ \"Example\" and \"3\".\n<|/ c |>\n<| c |>\nThis doesn't work for \"Example 3\"\
    \ because of the space between \"Example\" and \"3\".\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for \"Example 3\" because of the space between \"Example\" and\
    \ \"3\".\n<|/ c |>\n<| c |>\nThis doesn't work for \"Example 3\" because of the\
    \ space between \"Example\" and \"3\".\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there's a way to do this without having to define a new method for each type\
    \ of string. I'm thinking something along the lines of `def fix_spaces(text)`\
    \ `text.gsub!(/\\s+/, \"_\")` `text.gsub!(/\\s{2,}/, \"-\")` `end`\n<|/ c |>\n\
    <| c |>\n: Yes, you can do that. I'll add that to my answer.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't require a new method for each type of string.\n\
    <|/ c |>\n<| a tags=ruby,string,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like your answer, but I think it would be better to use a regex to replace all\
    \ spaces with underscores and then replace all consecutive spaces with dashes.\n\
    <|/ c |>\n<| c |>\n: I agree, that would be better. I've edited my answer to include\
    \ your suggestion.\n<|/ c |>\n<| c |>\nThanks for the suggestion. I've edited\
    \ my answer to include your suggestion.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't seem to work if there are multiple spaces between\
    \ words. For example, it doesn't replace `Example 1` with `Example_1`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the regex to account for multiple spaces between words.\
    \ I also added a link to a regex tester that shows it working.\n<|/ c |>\n<| c\
    \ |>\nThanks, this works great. Just a note for anyone else who comes across this\
    \ post: I needed to add `require 'cgi'` at the top of my file to make it work.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,regex |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/( {2,})/, \"-\")\n  text\nend", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/( {2,})/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to do this without\
    \ having to call a method on the string object.  It seems like there should be\
    \ a way to do this without having to call a method on the string object.\n<|/\
    \ c |>\n<| c |>\nI agree with you. I'm looking for a way to do this without having\
    \ to call a method on the string object.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `fix_spaces(\"  Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\n\
    : It works for me. `fix_spaces(\"  Example\")` returns `\"Example\"`.\n<|/ c |>\n\
    <| c |>\n: I added a fix for that case.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub(/\\\
    s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't work for me. `fix_spaces` returns `nil` on `\"Example\
    \ 3\"`.\n<|/ c |>\n<| c |>\nIt works for me on Ruby 2.1.0 and Rails 4.0.2. What\
    \ version are you using?\n<|/ c |>\n<| c |>\nI'm using Ruby 2.1.2 and Rails 4.0.2.\
    \ Maybe it's because I'm on Windows?\n<|/ c |>\n<| c |>\nYes, it looks like the\
    \ regex is failing because of the underscore. Try `fix_spaces.call(\"Example 3\"\
    )` and see what happens.\n<|/ c |>\n<| c |>\nAh, I see. Yes, that would make sense.\
    \ Thanks!\n<|/ c |>\n<| a dscore=5 |>\nI like to use this approach:\n<code>",
  "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a dscore=0 |>\nI wrote a gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a dscore=0 |>\nI wrote a\
    \ gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a |>\nI wrote a gem that\
    \ does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ dscore=0 |>\n<| a |>\nI wrote a gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 dscore=0 |>\n<| a dscore=0 |>\n\
    I wrote a gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\nI wrote a gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote a gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a dscore=0 |>\nI wrote a\
    \ gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a dscore=0 |>\nI wrote a\
    \ gem that does this for you:\nhttps://github.com/jamesgolick/sanitize-html\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a dscore=0 |>\nI wrote a\
    \ gem that does this for you:", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a |>\n<| a |>\n<code>", "  text.gsub(/\\s+/,\
    \ \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a dscore=1 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution\
    \ the best. Easy to read and understand.\n<|/ c |>\n<| c |>\nI like this solution\
    \ the best. Easy to read and understand.\n<|/ c |>\n<| c |>\nI like this solution\
    \ the best. Easy to read and understand.\n<|/ c |>\n<| c |>\nI like this solution\
    \ the best. Easy to read and understand.\n<|/ c |>\n<| c |>\nI like this solution\
    \ the best. Easy to read and understand.\n<|/ c |>\n<| a dscore=5 tags=ruby,regex\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \" \") \n  text.gsub!(/( ){2,}/, \"-\")\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for `\" Example\"\
    ` which should be `\"Example\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for `\"\
    \ Example\"` which should be `\"Example\"`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for `\" Example\"` which should be `\"Example\"`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for `\" Example\"` which should be `\"Example\"`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for `\" Example\"` which should be `\"Example\"`.\n<|/ c |>\n\
    <| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend", "  text.gsub(\" \", \"_\").gsub(/( {2,})/, \"-\"\
    ).strip\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I\
    \ believe it would be better to use a regex to match consecutive spaces instead\
    \ of splitting on spaces. `text.gsub(/( {2,})/, \"-\")`\n<|/ c |>\n<| c |>\nI\
    \ agree with you, that would be better. I'll update my answer.\n<|/ c |>\n<| c\
    \ |>\nI like this solution, however it fails when the string contains multiple\
    \ spaces. For example, `\" Example\"` becomes `\"Example\"` instead of `\"Example_\"\
    `\n<|/ c |>\n<| c |>\nThis solution doesn't work for strings with multiple consecutive\
    \ spaces. `\" Example\"` becomes `\"Example\"` instead of `\"Example_\"`\n<|/\
    \ c |>\n<| c |>\nThis solution doesn't work for strings with multiple consecutive\
    \ spaces. `\" Example\"` becomes `\"Example\"` instead of `\"Example_\"`\n<|/\
    \ c |>\n<| a tags=ruby,string,regex |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n\
    \  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. I am not very familiar with ruby, so I\
    \ wanted to ask you if you can explain what does this line do? `text.gsub!(/\\\
    s{2,}/, \"-\")`\n<|/ c |>\n<| c |>\n`\\s` matches a single whitespace character.\
    \ `{2,}` means \"match two or more of the preceding expression\". So `\\s{2,}`\
    \ means \"match two or more whitespace characters\". `gsub!` replaces all matches\
    \ with whatever you pass in. So `gsub!(/\\s{2,}/, \"-\")` replaces all whitespace\
    \ characters with `-`.\n<|/ c |>\n<| c |>\nThanks again! I understand it now!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/,\
    \ \"-\")\nend", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, but I prefer to use `gsub!`\
    \ instead of `gsub` because I find it more readable. `gsub!` will modify the string\
    \ in place and return the modified string, whereas `gsub` will return the modified\
    \ string but will leave the original string untouched.\n<|/ c |>\n<| c |>\nI prefer\
    \ this solution as well, because it doesn't require any additional gems. I find\
    \ it more readable than `gsub!` because it doesn't require the extra parenthesis.\n\
    <|/ c |>\n<| c |>\nI prefer this solution as well, because it doesn't require\
    \ any additional gems. I find it more readable than `gsub!` because it doesn't\
    \ require the extra parenthesis.\n<|/ c |>\n<| c |>\nI prefer this solution as\
    \ well, because it doesn't require any additional gems. I find it more readable\
    \ than `gsub!` because it doesn't require the extra parenthesis.\n<|/ c |>\n<|\
    \ c |>\nI prefer this solution as well, because it doesn't require any additional\
    \ gems. I find it more readable than `gsub!` because it doesn't require the extra\
    \ parenthesis.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI like using gsub!\
    \ for this:\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"\
    -\")\n  text\nend\n</code>\n<|/ a |>\n<| a |>\n<code>", "  text.gsub(/\\s+/, \"\
    \ \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    \  text\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if\
    \ there are multiple spaces between words. For example, `\" Example\"` becomes\
    \ `\"Example\"`, but `\" Example  \"` becomes `\"Example\"`.\n<|/ c |>\n<| c |>\n\
    I added a fix for that\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ gems. However, I do have a question: why are you using `gsub!` instead of `gsub`?\n\
    <|/ c |>\n<| c |>\n: Because `gsub!` modifies the string in place, so the original\
    \ string is unchanged. `gsub` returns a new string with the substitutions made,\
    \ so the original string is unchanged. See [this question](http://stackoverflow.com/questions/1757065/difference-between-gsub-and-gsub!)\
    \ for more info.\n<|/ c |>\n<| c |>\nThis solution doesn't work for me in Rails\
    \ 3.2.13. `gsub` doesn't modify the string in place, but returns a new string.\
    \ `gsub!` modifies the string in place, so the original string is unchanged. See\
    \ [this question](http://stackoverflow.com/questions/1757065/difference-between-gsub-and-gsub!)\
    \ for more info.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated\
    \ the answer to reflect that.\n<|/ c |>\n<| c |>\nThis solution doesn't work for\
    \ me in Rails 3.2.13. `gsub` doesn't modify the string in place, but returns a\
    \ new string. `gsub!` modifies the string in place, so the original string is\
    \ unchanged. See [this question](http://stackoverflow.com/questions/1757065/difference-between-gsub-and-gsub!)\
    \ for more info.\n<|/ c |>\n<| a dscore=5 |>\nI like using gsub! for simple substitutions\
    \ because it's more readable:\n<code>\n\"Example 1\".gsub!(/\\s+/, \"_\")\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,string |>\n<| c |>\nI like this solution, because\
    \ it doesn't require any additional gems. However, I do have a question: why are\
    \ you using `gsub!` instead of `gsub`?\n<|/ c |>\n<| c |>\nBecause `gsub!` modifies\
    \ the string in place, so the original string is unchanged. `gsub` returns a new\
    \ string with the substitutions made, so the original string is unchanged. See\
    \ [this question](http://stackoverflow.com/questions/1757065/difference-between-gsub-and-gsub!)\
    \ for more info.\n<|/ c |>\n<| c |>\nThis solution doesn't work for ", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n\
    \  text.gsub!(/( {2,})/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't work for me. `fix_spaces(\"  Example\")` returns `\"\
    Example\"`\n<|/ c |>\n<| c |>\nIt works for me. Are you sure you copied it correctly?\
    \ I tested it on ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0]\n\
    <|/ c |>\n<| c |>\nYeah, I copied it correctly. I'm running ruby 1.9.3p194 (2012-04-20\
    \ revision 35410) [x86_64-darwin10.8.0]\n<|/ c |>\n<| c |>\nOk, I figured it out.\
    \ My text was being read in as `\\n` instead of `\\r\\n`. Thanks for your help!\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `fix_spaces(\"  Example\")` returns\
    \ `\"Example\"`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  text.gsub!(/\\s+/, \"\
    _\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub!(/\\s+/, \"_\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend", "  text.gsub(/\\s+/, \"_\").gsub(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n\
    <| c |>\nThanks so much for this. I used this and modified it a little to fit\
    \ my needs. I added a little more explanation to the answer below to help others\
    \ who find this question.\n<|/ c |>\n<| a dscore=4 |>\nI used the answer from\
    \ and modified it a little to fit my needs. I added a little more explanation\
    \ to the answer below to help others who find this question.\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/( {2,})/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, because it doesn't require a regex. Thanks!\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple consecutive spaces.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub(/\\s+/, \" \").gsub(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for\
    \ me in Rails 3.2.13. `text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")` returns\
    \ `nil`.\n<|/ c |>\n<| c |>\nThis doesn't work for me in Rails 4.0.2. `text.gsub(/\\\
    s+/, \" \").gsub(/\\s{2,}/, \"-\")` returns `nil`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me in Rails 4.0.2. `text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\"\
    )` returns `nil`.\n<|/ c |>\n<| c |>\nThis doesn't work for me in Rails 4.0.2.\
    \ `text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")` returns `nil`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me in Rails 4.0.2. `text.gsub(/\\s+/, \" \").gsub(/\\\
    s{2,}/, \"-\")` returns `nil`.\n<|/ c |>\n<| a tags=ruby-on-rails,ruby |>\n<code>",
  "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to make it\
    \ work for `nil` values as well? I mean, what if the string is `nil`? I mean,\
    \ what if the string is `nil`? I mean, what if the string is `nil`? I mean, what\
    \ if the string is `nil`? I mean, what if the string is `nil`? I mean, what if\
    \ the string is `nil`? I mean, what if the string is `nil`? I mean, what if the\
    \ string is `nil`? I mean, what if the string is `nil`? I mean, what if the string\
    \ is `nil`? I mean, what if the string is `nil`? I mean, what if the string is\
    \ `nil`? I mean, what if the string is `nil`? I mean, what if the string is `nil`?\
    \ I mean, what if the string is `nil`? I mean, what if the string is `nil`? I\
    \ mean, what if the string is `nil`? I mean, what if the string is `nil`? I mean,\
    \ what if the string is `nil`? I mean, what if the string is `nil`? I mean, what\
    \ if the string is `nil`? I mean, what if the string is `nil`? I mean, what if\
    \ the string is `nil`? I mean, what if the string is `nil`? I mean, what if the\
    \ string is `nil`? I mean, what if the string is `nil`? I mean, what if the string\
    \ is `nil`? I mean, what if the string is `nil`? I mean, what if the string is\
    \ `nil`? I mean, what if the string is `nil`? I mean, what if the string is `nil`?\
    \ I mean, what if the string is `nil`? I mean, what if the string is `nil`? I\
    \ mean, what if the string is `nil`? I mean, what if the string is `nil`? I mean,\
    \ what if the string is `nil`? I mean, what if the string is `nil`? I mean, what\
    \ if the string is `nil`? I mean, what if the string is `nil`? I mean, what if\
    \ the string is `nil`? I mean, what if the string is `nil`? I mean, what if the\
    \ string is `nil`? I mean, what if the string is `nil`? I mean, what if the string\
    \ is `nil`? I mean, what if the string is `nil`? I mean, what if the string is\
    \ `nil`? I mean, what if the string is `nil`? I mean, what if the string is `nil`?\
    \ I mean, what if the string is `nil`? I mean, what if the string is `nil`? I\
    \ mean, what if the string is `", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/,\
    \ \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like this\
    \ solution, but I prefer `gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")` because\
    \ it's more readable.\n<|/ c |>\n<| c |>\nI agree, that's why I added the second\
    \ solution, which is more readable.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like this solution, but I believe it would be better\
    \ to replace `\\s` with `[[:space:]]` so that it matches tabs as well.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for me in Rails 3.2.13. `text.gsub(/\\s+/, \"\
    _\").gsub(/\\s{2,}/, \"-\")` returns `text` unchanged.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me in Rails 3.2.13. `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/,\
    \ \"-\")` returns `text` unchanged.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me in Rails 3.2.13. `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")` returns\
    \ `text` unchanged.\n<|/ c |>\n<| c |>\nThis doesn't work for me in Rails 3.2.13.\
    \ `text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")` returns `text` unchanged.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails,regex |>\nI like using gsub with a block:\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if\
    \ it would be possible to make it more robust to handle non-ascii characters?\n\
    <|/ c |>\n<| c |>\nThis solution doesn't handle non-ascii characters. I believe\
    \ it would be possible to make it handle non-ascii characters, but it would be\
    \ a lot more complicated.\n<|/ c |>\n<| c |>\nI believe it would be possible to\
    \ make it handle non-ascii characters, but it would be a lot more complicated.\
    \ - I agree. I'm looking for a solution that will handle non-ascii characters,\
    \ too.\n<|/ c |>\n<| c |>\nI believe it would be possible to make it handle non-ascii\
    \ characters, but it would be a lot more complicated. - I agree. I'm looking for\
    \ a solution that will handle non-ascii characters, too.\n<|/ c |>\n<| c |>\n\
    This solution doesn't handle non-ascii characters. I believe it would be possible\
    \ to make it handle non-ascii characters, but it would be a lot more complicated.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis\
    \ doesn't seem to work. `fix_spaces(\"  Example\")` returns `\"  Example\"`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. `\"  Example\"\
    ` becomes `\"-Example\"`.\n<|/ c |>\n<| c |>\nAh, I see what you're saying. My\
    \ apologies. I misunderstood your answer. Sorry about that.\n<|/ c |>\n<| c |>\n\
    No problem. Thanks for your help.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nI like your use of gsub to replace consecutive spaces with dashes.\
    \ I didn't know about that method.\n<|/ c |>\n<| a dscore=2 |>\nI like using gsub\
    \ to replace consecutive spaces with dashes. I didn't know about that method.\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional gems.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Simple, clean, and works.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Simple, clean, and works.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Simple, clean, and works.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Simple, clean, and works.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    I like to use this gem for such tasks:\n<code>\nrequire 'rubygems'\nrequire 'nokogiri'",
  "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub(/\\s+/, \" \"\
    ).gsub(/\\s{2,}/, \"-\")\nend", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for me.\
    \ `fix_spaces(\"  Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\n: It\
    \ works for me in Ruby 1.9.3. I get `\"Example\"` when I run `fix_spaces(\"  Example\"\
    )`\n<|/ c |>\n<| c |>\n: It works for me in Ruby 1.8.7. Are you sure you're using\
    \ Ruby 1.8.7?\n<|/ c |>\n<| c |>\n: I see that you're using Ruby 1.8.7. Are you\
    \ sure you're using Ruby 1.8.7? The code I posted works in Ruby 1.8.7.\n<|/ c\
    \ |>\n<| c |>\n: I see that you're using Ruby 1.8.7. Are you sure you're using\
    \ Ruby 1.8.7? The code I posted works in Ruby 1.8.7.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks\
    \ so much for this! I used this with some slight modifications to get it to work\
    \ for me. `def fix_spaces(text)\n  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\"\
    )\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text.gsub!("]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
