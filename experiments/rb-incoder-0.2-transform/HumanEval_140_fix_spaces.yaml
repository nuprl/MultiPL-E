name: HumanEval_140_fix_spaces
language: rb
prompt: "# Given a string text, replace all spaces in it with underscores, \n# and\
  \ if a string has more than 2 consecutive spaces, \n# then replace all consecutive\
  \ spaces with - \n# >>> fix_spaces.call(\" Example\")\n# \"Example\"\n# >>> fix_spaces.call(\"\
  \ Example 1\")\n# \"Example_1\"\n# >>> fix_spaces.call(\" Example 2\")\n# \"_Example_2\"\
  \n# >>> fix_spaces.call(\" Example 3\")\n# \"_Example-3\"\ndef fix_spaces(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fix_spaces\n\
  \    candidate = method(:fix_spaces)\n    assert_equal(\"Example\", candidate.call(\"\
  Example\"))\n    assert_equal(\"Mudasir_Hanif_\", candidate.call(\"Mudasir Hanif\
  \ \"))\n    assert_equal(\"Yellow_Yellow__Dirty__Fellow\", candidate.call(\"Yellow\
  \ Yellow  Dirty  Fellow\"))\n    assert_equal(\"Exa-mple\", candidate.call(\"Exa\
  \   mple\"))\n    assert_equal(\"-Exa_1_2_2_mple\", candidate.call(\"   Exa 1 2\
  \ 2 mple\"))\n  end\nend\n"
completions: ["  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nI like this solution,\
    \ but I ended up using [this answer](http://stackoverflow.com/a/1812373/477037)\
    \ instead. Thanks!\n<|/ c |>\n<| a dscore=2 |>\nI ended up using this:\n<code>",
  "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if the string contains multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. `\" Example 1 \"` becomes `\"Example-1\"`.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. `\" Example 1 \"` becomes\
    \ `\"Example-1\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. `\" Example\
    \ 1 \"` becomes `\"Example-1\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\
    \ `\" Example 1 \"` becomes `\"Example-1\"`.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a dscore=1 |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\\
    s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your\
    \ solution, but I prefer `gsub!` over `gsub` because I find it easier to read.\
    \ `gsub!` modifies the string in place and returns the modified string.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I just wanted to show that `gsub` returns modified\
    \ string and `gsub!` modifies the string in place.\n<|/ c |>\n<| c |>\nI like\
    \ this solution, but I find it hard to read. `gsub!` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub` modifies the string in place and returns the modified\
    \ string. `gsub` modifies the string in place and returns the modified string.\
    \ `gsub` modifies the string in place and returns the modified string. `gsub`\
    \ modifies the string in place and returns the modified string. `gsub` modifies\
    \ the string in place and returns the modified string. `gsub` modifies the string\
    \ in place and returns the modified string. `gsub` modifies the string in place\
    \ and returns the modified string. `gsub` modifies the string in place and returns\
    \ the modified string. `gsub", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work if there\
    \ are multiple spaces next to each other. For example, `\" Example\"` becomes\
    \ `\"Example\"`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to account for multiple spaces next to each other.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for `\" Example\"` -> `\"Example\"`\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to account for multiple spaces next to each\
    \ other.\n<|/ c |>\n<| c |>\nThis doesn't work for `\" Example\"` -> `\"Example\"\
    `\n<|/ c |>\n<| a dscore=4 |>\nI came up with a solution that doesn't require\
    \ any additional gems and is pretty readable:\n<code>", "  text.gsub!(/\\s+/,\
    \ \" \").gsub(/( {2,})/, '-\\1')\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c\
    \ |>\nThis doesn't seem to work if there are multiple spaces between words. For\
    \ example, if I input \"Example 1    Example 2\" it returns \"Example_1    Example\
    \ 2\"\n<|/ c |>\n<| c |>\n: I tested it and it works. I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a tags=ruby,regex |>\n\
    <code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks, this works great!\
    \ I added a little bit of code to handle multiple spaces consecutively.\n<|/ c\
    \ |>\n<| a dscore=4 |>\n<code>", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like this solution, but\
    \ I wonder if it will work with `fix_spaces(\"  Example\")`\n<|/ c |>\n<| c |>\n\
    Yes, it will. `\\s` matches any whitespace character, including tabs and newlines.\
    \ `\\s{2,}` matches two or more whitespace characters.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder if it will work with `fix_spaces(\"  Example\")`\n\
    <|/ c |>\n<| c |>\nYes, it will. `\\s` matches any whitespace character, including\
    \ tabs and newlines. `\\s{2,}` matches two or more whitespace characters.\n<|/\
    \ c |>\n<| c |>\nI like your solution, but I wonder if it will work with `fix_spaces(\"\
    \  Example\")`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  text.gsub!(/\\s+/, \"\
    _\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't seem to work. `fix_spaces(\"  Example\")` returns\
    \ `\"  Example\"`.\n<|/ c |>\n<| c |>\n: It works fine for me. Are you sure you\
    \ copied it correctly?\n<|/ c |>\n<| c |>\n: I tested it again and it works fine.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works fine. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n\
    : I tested it again and it works fine. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/( {2,})/,\
    \ \"-\")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c\
    \ |>\nI like this solution, but I feel like it could be improved. For example,\
    \ what if there are multiple spaces between words?\n<|/ c |>\n<| c |>\nI agree,\
    \ there could be multiple spaces between words. I added a regex that would handle\
    \ that case.\n<|/ c |>\n<| c |>\nI added a regex that would handle multiple spaces\
    \ between words. I tested it and it works.\n<|/ c |>\n<| c |>\nI added a regex\
    \ that would handle multiple spaces between words. I tested it and it works.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  text.gsub!(/\\\
    s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| a dscore=1 |>\n<code>", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"\
    -\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| c |>\nThis doesn't work for me on Rails\
    \ 3.2.13. `gsub` doesn't seem to replace spaces with underscores unless I use\
    \ `gsub(/\\s+/, \"_\")`\n<|/ c |>\n<| a tags=ruby-on-rails,ruby |>\n<code>", " \
    \ text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThe OP said \"consecutive spaces\" but your regex doesn't match\
    \ consecutive spaces. Try `fix_spaces(\"  Example\")`.\n<|/ c |>\n<| c |>\n: I\
    \ missed that requirement. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub!(/\\s+/, \" \").gsub(/\\\
    s{2,}/, \"-\")\nend", "  text.gsub(/\\s+/, \"_\").gsub(/\\s{2,}/, \"-\")\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much for this! I\
    \ used this in conjunction with [this answer](https://stackoverflow.com/a/47702510/1269037)\
    \ to get my desired result.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a gem for this:\
    \ \n<code>\ngem 'slugify'\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for\
    \ this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for this: \n<code>\ngem 'slugify'\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for\
    \ this: \n<code>\ngem 'slugify'\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote\
    \ a gem for this: \n<code>\ngem 'slugify'\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ dscore=1 |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem for this: \n<code>\n\
    gem 'slugify'\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a gem for\
    \ this: \n<code>\ngem 'slugify'\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ a |>\nI wrote a gem for this: \n<code>\ngem 'slugify", "  text.gsub(/\\s+/,\
    \ \"_\").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| c |>\nThis is an excellent solution. Thanks for sharing.\n<|/ c |>\n\
    <| c |>\nI like this solution, because it doesn't require any additional gems.\n\
    <|/ c |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ gems.\n<|/ c |>\n<| c |>\nI like this solution, because it doesn't require any\
    \ additional gems.\n<|/ c |>\n<| a dscore=5 |>\nI like to use this one:\n<code>",
  "  text.gsub!(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if there are multiple consecutive spaces.\n<|/\
    \ c |>\n<| c |>\nIt does work, try it yourself. It replaces multiple consecutive\
    \ spaces with a single dash.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\
    \ It replaces multiple consecutive spaces with a single dash.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. Try it yourself. It replaces multiple consecutive spaces with\
    \ a single dash.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself. It replaces\
    \ multiple consecutive spaces with a single dash.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>", "  text.gsub(/\\s+/, \" \").gsub(/\\s{2,}/, \"-\")\nend\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't require any\
    \ additional gems.\n<|/ c |>\n<| c |>\nI like this solution as well, because it\
    \ doesn't require any additional gems.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, because it doesn't require any additional gems.\n<|/ c |>\n<| c |>\n\
    I like this solution as well, because it doesn't require any additional gems.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, because it doesn't require any\
    \ additional gems.\n<|/ c |>\n<| a dscore=5 |>\nI like using gsub! for this:\n\
    <code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n  text\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for me. `fix_spaces(\"\
    \  Example\")` returns `\"Example\"`.\n<|/ c |>\n<| c |>\n: It works for me in\
    \ Ruby 1.9.3p194. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n:\
    \ I added a version that doesn't require the use of `gsub!`.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't require the use of `gsub!`.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't require the use of `gsub!`.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "  text.gsub!(/\\s+/, \"_\")\n  text.gsub!(/\\s{2,}/, \"-\")\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do this without having to call `gsub!` twice.  I wonder\
    \ if there is a way to do this with one `gsub` call.\n<|/ c |>\n<| c |>\nI wonder\
    \ if there is a way to do this with one `gsub` call. Yes, there is. See my answer.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
