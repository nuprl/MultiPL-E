name: HumanEval_14_all_prefixes
language: rb
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
  \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"],\
  \ candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
  WWW\"))\n  end\nend\n"
completions: ["  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes\
    \ << char if char.start_with?(prefixes[0])\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  i = 0\n\
    \  while i < string.length\n    prefixes << string[i..-1]\n    i += 1\n  end\n\
    \  prefixes\nend", "  string.split(\"\").map do |char|\n    char.downcase\n  end.reject\
    \ do |prefix|\n    string.index(prefix) == 0\n  end\nend", "  prefixes = []\n\
    \  i = 0\n  while i < string.length\n    prefix = string[0..i]\n    prefixes <<\
    \ prefix\n    i += 1\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char != char.downcase\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.each_char do |c|\n    prefixes\
    \ << c unless prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |c|\n    prefixes << c unless prefixes.include?(c)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |c|\n\
    \    prefixes << c unless prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char == prefixes.last\n\
    \    prefixes << char if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  i = 0\n\
    \  while i < string.length\n    prefix = string[i..-1]\n    prefixes << prefix\n\
    \    i += 1\n  end\n  prefixes\nend", "  prefixes = []\n  string.each_char do\
    \ |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |c|\n\
    \    prefixes << c if prefixes.empty? || prefixes[-1] != c\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  prefix = \"\"\n  string.split(\"\").each do |c|\n    prefix << c\n \
    \   prefixes << prefix if prefix.size >= string.length\n    prefix = prefix[0..-1]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  i = 0\n  while i < string.length\n    prefixes << string[i..-1]\n\
    \    i += 1\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each\
    \ do |char|\n    prefixes << char if char.start_with?(prefixes.last)\n  end\n\
    \  prefixes\nend", "  string.split(//).map { |s| s.size }.sort.reverse.map { |s|\
    \ s[0...s] }\nend", "  string.split(\"\").map { |s| s.split(\"\").map { |s| s.size\
    \ }.max }.min\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n \
    \   prefixes << char if prefixes.empty? || prefixes.last != char\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |c|\n    prefixes << c if prefixes.empty? || prefixes[-1] != c\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\n\
    end", "  string.split(\"\").map { |c| [c, c] }.\n    reduce(:+)\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |c|\n    prefixes << c unless prefixes.include?(c)\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.each_char do |char|\n    prefixes << char if\
    \ prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |c|\n    prefixes << c unless prefixes.include?(c)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.each_char.with_index do |char, index|\n    prefixes << char if\
    \ index == 0\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each\
    \ do |char|\n    prefixes << char if prefixes.empty? || char == prefixes.last\n\
    \  end\n  prefixes\nend", "  string.split(\"\").map { |s| s.split(\"\").map(&:first)\
    \ }.flatten.uniq\nend", "  prefixes = []\n  string.each_char do |char|\n    prefixes\
    \ << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend",
  "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if char != \"\
    \"\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |c|\n\
    \    prefixes << c unless prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if char.start_with?(prefixes.last)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char.start_with?(prefixes[0])\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  i = 0\n\
    \  while i < string.length\n    prefixes << string[0..i]\n    i += 1\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n   \
    \ prefixes << char if char.start_with?(prefixes.last)\n  end\n  prefixes\nend",
  "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char == prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if char != \"\"\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char.start_with?(prefixes.last)\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes.last != char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if char != \"\"\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |c|\n    prefixes << c unless prefixes.include?(c)\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  string.split(\"\
    \").map { |s| s.size }.sort.reverse.map { |i| string[0, i] }\nend", "  prefixes\
    \ = []\n  string.each_char do |c|\n    prefixes << c unless prefixes.include?(c)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |c|\n\
    \    prefixes << c if prefixes.empty? || prefixes.last != c\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char != \"\"\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || prefixes[-1] !=\
    \ char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do\
    \ |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char.start_with?(prefixes.last)\n\
    \    prefixes << char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |c|\n    prefixes << c if prefixes.empty? || prefixes[-1] != c\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  prefix = \"\"\n  string.split(\"\"\
    ).each do |c|\n    if c == prefix\n      prefixes << prefix\n      prefix = \"\
    \"\n    else\n      prefix << c\n    end\n  end\n  prefixes << prefix\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.each_char do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if char != char.downcase\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char.start_with?(prefixes.last)\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if char != char.upcase\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if char.start_with?(prefixes[0])\n  end\n  prefixes\nend",
  "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  string.split(//).map {\
    \ |s| s.size }.sort.reverse.map { |s| s[0...s] }\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.each_char do |char|\n   \
    \ prefixes << char if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || prefixes.last != char\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char == prefixes.last\n    prefixes << char if prefixes.empty? || char ==\
    \ prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\"\
    ).each do |char|\n    prefixes << char if prefixes.empty? || char == prefixes.last\n\
    \    prefixes << char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |c|\n    prefixes << c if prefixes.empty? || prefixes[-1] != c\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |c|\n\
    \    prefixes << c if prefixes.empty? || prefixes[-1] != c\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.each_char.with_index do |char,\
    \ index|\n    prefixes << char if index == 0\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char == prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char == prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |c|\n    prefixes << c unless prefixes.include?(c)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |c|\n    prefixes << c unless\
    \ prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes = []\n  i = 0\n \
    \ while i < string.length\n    prefixes << string[0..i]\n    i += 1\n  end\n \
    \ prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes\
    \ << char if char.start_with?(prefixes.last)\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if char.start_with?(prefixes.last)\n\
    \  end\n  prefixes\nend", "  string.split(\"\").map { |s| s.size }.sort.reverse.map\
    \ { |s| s[0...s] }\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char != char.upcase\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || prefixes[-1] !=\
    \ char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do\
    \ |char|\n    prefixes << char if char != char.downcase\n  end\n  prefixes\nend",
  "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char != \"\"\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |c|\n    prefixes << c unless\
    \ prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes = []\n  string.each_char\
    \ do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  i = 0\n  while i < string.length\n    prefixes << string[i..-1]\n  \
    \  i += 1\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each\
    \ do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if char != \"\"\n  end\n  prefixes\nend", "  prefixes =\
    \ []\n  string.split(\"\").each do |char|\n    prefixes << char if char.start_with?(prefixes.last)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.each_char.with_index do |char, i|\n    prefixes\
    \ << char if i > 0 && char != string[i-1]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if char != \"\"\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || prefixes[-1] !=\
    \ char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do\
    \ |c|\n    prefixes << c unless prefixes.include?(c)\n  end\n  prefixes\nend",
  "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  i = 0\n\
    \  while i < string.length\n    prefix = string[i..i+1]\n    prefixes << prefix\
    \ unless prefixes.include? prefix\n    i += 1\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if char != \"\
    \"\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.each_char do |c|\n    prefixes << c if prefixes.empty?\
    \ || prefixes[-1] != c\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if char.start_with?(prefixes.last)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\n\
    end", "  string.split(\"\").map do |char|\n    char.downcase\n  end.sort.map do\
    \ |char|\n    char.prepend(\"a\")\n  end.map do |char|\n    char.prepend(\"ab\"\
    )\n  end.map do |char|\n    char.prepend(\"abc\")\n  end.map do |char|\n    char.prepend(\"\
    abcd\")\n  end.map do |char|\n    char.prepend(\"abcde\")\n  end.map do |char|\n\
    \    char.prepend(\"abcdef\")\n  end.map do |char|\n    char.prepend(\"abcdefg\"\
    )\n  end.map do |char|\n    char.prepend(\"abcdefgh\")\n  end.map do |char|\n\
    \    char.prepend(\"abcdefghi\")\n  end.map do |char|\n    char.prepend(\"abcdefghij\"\
    )\n  end.map do |char|\n    char.prepend(\"abcdefghijk\")\n  end.map do |char|\n\
    \    char.prepend(\"abcdefghijkl\")\n  end.map do |char|\n    char.prepend(\"\
    abcdefghijklm\")\n  end.map do |char|\n    char.prepend(\"abcdefghijklmn\")\n\
    \  end.map do |char|\n    char.prepend(\"abcdefghijklmno\")\n  end.map do |char|\n\
    \    char.prepend(\"abcdefghijklmnop\")\n  end.map do |char|\n    char.prepend(\"\
    abcdefghijklmnopq\")\n  end.map do |char|\n    char.prepend(\"abcdefghijklmnopqr\"\
    )\n  end.map do |char|\n    char.prepend(\"abcdefghijklmnopqrst\")\n  end.map\
    \ do |char|\n    char.prepend(\"abcdefghijklmnopqrstu\")\n  end.map do |char|\n\
    \    char.prepend(\"abcdefghijklmnopqrstuv\")\n  end.map do |char|\n    char.prepend(\"\
    abcdefghijklmnopqrstuvw\")\n  end.map do |char|\n    char.prepend(\"abcdefghijklmnopqrstuvwx\"\
    )\n  end.map do |char|\n    char.prepend(\"abcdefghijklmnopqrstuvwxy\")\n  end.map\
    \ do |char|\n    char.prepend(\"abcdefghijklmnopqrstuvwxyz\")\n  end.map do |char|\n\
    \    char.prepend(\"abcdefgh", "  prefixes = []\n  string.split(\"\").each do\
    \ |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  i = 0\n  while i < string.length\n\
    \    prefix = string[i..-1]\n    if prefixes.include? prefix\n      i += 1\n \
    \   else\n      prefixes << prefix\n      i += 1\n    end\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char == prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char == prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char == prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.each_char do |c|\n    prefixes\
    \ << c unless prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  string.split(\"\").map { |c| [c, c] }.\n    sort.\n\
    \    map { |c| c.first }.\n    map { |c| c.last }\nend", "  prefixes = []\n  string.each_char\
    \ do |c|\n    prefixes << c if prefixes.empty? || prefixes[-1] != c\n  end\n \
    \ prefixes\nend", "  prefixes = []\n  prefix = \"\"\n  string.split(\"\").each\
    \ do |char|\n    if char == prefix\n      prefixes << prefix\n      prefix = \"\
    \"\n    else\n      prefix << char\n    end\n  end\n  prefixes << prefix\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char != \"\"\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char.start_with?(prefixes.last)\n\
    \    prefixes << char if prefixes.empty? || char.end_with?(prefixes.last)\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  string.each_char do |char|\n    prefixes\
    \ << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend",
  "  prefixes = []\n  prefix = \"\"\n  string.split(\"\").each do |c|\n    prefix\
    \ = prefix + c\n    prefixes << prefix if string.start_with?(prefix)\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  prefix = \"\"\n  string.split(\"\").each\
    \ do |char|\n    if char == prefix\n      prefixes << prefix\n    else\n     \
    \ prefix = char\n      prefixes << prefix\n    end\n  end\n  prefixes\nend", " \
    \ prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if\
    \ prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  string.split(\"\
    \").map { |s| s.split(\"\").map(&:first) }.flatten.uniq\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char == prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if char != \"\"\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.each_char do |c|\n    prefixes << c if prefixes.empty?\
    \ || prefixes[-1] != c\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |c|\n    prefixes << c unless\
    \ prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes = []\n  string.each_char\
    \ do |char|\n    prefixes << char if prefixes.empty? || prefixes[-1] != char\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char == prefixes.last\n    prefixes << char if prefixes.empty? || char ==\
    \ prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\"\
    ).each do |char|\n    prefixes << char if prefixes.empty? || prefixes[-1] != char\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |c|\n    prefixes << c unless\
    \ prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes = []\n  prefix =\
    \ \"\"\n  string.each_char do |c|\n    prefix = prefix + c\n    prefixes << prefix\
    \ if string.index(prefix) == 0 \n  end\n  prefixes\nend", "  prefixes = []\n \
    \ string.split(\"\").each do |char|\n    prefixes << char if char != \"\"\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n   \
    \ prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char.start_with?(prefixes.last)\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  i = 0\n  while i < string.length\n\
    \    prefixes << string[i..-1]\n    i += 1\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.split(\"\").each do |char|\n    prefixes << char if char.start_with?(prefixes.last)\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char.start_with?(prefixes.last)\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || char != prefixes.last\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  string.split(\"\").map do |char|\n    char.downcase\n\
    \  end.sort.map do |char|\n    char.prepend(\"\")\n  end.map do |char|\n    char.prepend(\"\
    \")\n  end\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes\
    \ << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\nend",
  "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes[-1] != char\n  end\n  prefixes\nend", "  string.split(\"\").map\
    \ { |char| char.downcase }.sort.map { |char| char.upcase }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
