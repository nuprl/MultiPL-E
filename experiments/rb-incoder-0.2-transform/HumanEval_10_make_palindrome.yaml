name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  string = string.dup\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string\n\
    end", "  string.reverse\n  string.slice!(0, string.rindex(string))\n  string\n\
    end", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n", "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string", "  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/(.)(.*)/) { $1.reverse + $2 }\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| a dscore=0 |>\n<code>", "  string.length.times do\
    \ |i|\n    string << string[-i-1]\n  end\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.to_s\n  length = string.length\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string.reverse(longest).slice(0,length)\n  longest\nend",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'b')\n  string.gsub!(/[a-z]/i, 'c')\n  string.gsub!(/[a-z]/i,\
    \ 'd')\n  string.gsub!(/[a-z]/i, 'e')\n  string.gsub!(/[a-z]/i, 'f')\n  string.gsub!(/[a-z]/i,\
    \ 'g')\n  string.gsub!(/[a-z]/i, 'h')\n  string.gsub!(/[a-z]/i, 'i')\n  string.gsub!(/[a-z]/i,\
    \ 'j')\n  string.gsub!(/[a-z]/i, 'k')\n  string.gsub!(/[a-z]/i, 'l')\n  string.gsub!(/[a-z]/i,\
    \ 'm')\n  string.gsub!(/[a-z]/i, 'n')\n  string.gsub!(/[a-z]/i, 'o')\n  string.gsub!(/[a-z]/i,\
    \ 'p')\n  string.gsub!(/[a-z]/i, 'q')\n  string.gsub!(/[a-z]/i, 'r')\n  string.gsub!(/[a-z]/i,\
    \ 's')\n  string.gsub!(/[a-z]/i, 't')\n  string.gsub!(/[a-z]/i, 'u')\n  string.gsub!(/[a-z]/i,\
    \ 'v')\n  string.gsub!(/[a-z]/i, 'w')\n  string.gsub!(/[a-z]/i, 'x')\n  string.gsub!(/[a-z]/i,\
    \ 'y')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'b')\n  string.gsub!(/[a-z]/i, 'c')\n  string.gsub!(/[a-z]/i, 'd')\n  string.gsub!(/[a-z]/i,\
    \ 'e')\n  string.gsub!(/[a-z]/i, 'f')\n  string.gsub!(/[a-z]/i, 'g')\n  string.gsub!(/[a-z]/i,\
    \ 'h')\n  string.gsub!(/[a-z]/i, 'i')\n  string.gsub!(/[a-z]/i, 'j')\n  string.gsub!(/[a-z]/i,\
    \ 'k')\n  string.gsub!(/[a-z]/i, 'l')\n  string.gsub!(/[a-z]/i, 'm')\n  string.gsub!(",
  "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse_reverse\
    \ = \"\"\n  i = 0\n  while i < string.length\n    max_length = max_length if max_length\
    \ > string.length \n    max_length_postfix = string[max_length..-1] if string[max_length..-1]\
    \ == string[max_length..-1].reverse\n    max_length_prefix_postfix = string[0...max_length]\
    \ if string[0...max_length] == string[0...max_length].reverse\n    max_length_prefix_postfix_reverse\
    \ = string[0...max_length].reverse\n    max_length_prefix_postfix_reverse_reverse\
    \ = string[0...max_length].reverse.reverse\n    i += 1\n  end\n  return max_length_prefix_postfix_reverse_reverse\
    \ + max_length_prefix_postfix + max_length_postfix\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  string.reverse\n  string.insert(0,string[string.length-1])\n\
    \  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.length.times do |i|\n\
    \    string.slice!(0, i)\n    string.slice!(0, i)\n  end\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.reverse!\n  string << string.reverse\n\
    \  string\nend", "  string.reverse\n  string.gsub(/(?<=^|\\s)\\z/, \"\").reverse\n\
    end", "  string.reverse\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.to_s\n  longest = find_longest_palindrome(string, true)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  string.length.times do |i|\n    string.slice!(0,\
    \ i)\n    string.slice!(0, i)\n  end\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.reverse!\n  string.reverse!\n  string\nend", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string.gsub(/(?<=^|\\\
    s)(\\w)(\\w*)(?=$|\\s)/) do |match|\n    match[0].upcase + match[1].downcase +\
    \ match[2].downcase\n  end\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])",
  "  max_length = find_max_length(string)\n  prefix = string[0...max_length]\n  suffix\
    \ = string[max_length..-1]\n  reversed_suffix = suffix.reverse\n  reversed_prefix\
    \ = prefix.reverse\n  reversed_string = reversed_prefix + reversed_suffix\n  return\
    \ reversed_string\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest.last))\n  longest\nend", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  ", "  string = string.to_s\n  longest =\
    \ find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(longest.length,string.length))\n  longest\nend",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + reverse(string[0 .. longest])\n  longest\nend", "  max_length\
    \ = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!", "  string = string.dup\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.downcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { ", "  string = string.to_s\n  longest = string.chars.reverse.find { |c| string[0\
    \ .. -c] == string[-c .. 0] }\n  string << string[0 .. longest]\nend", "  string\
    \ = string.to_s\n  max_length = string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < ", "  string = string.dup\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest)\n\
    \  longest\nend", "  string.length.times do |i|\n    string.slice!(i)\n    break\
    \ if string == string.reverse\n  end\n  string\nend", "  string = string.dup\n\
    \  string.gsub!(/([a-z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { ", " \
    \ string.reverse\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string\nend\n</code>\n<|/ a tags=ruby,string |>\n<|\
    \ c |>\nThis doesn't work if the string starts with a palindrome. For example,\
    \ `make_palindrome(\"abba\")` returns `\"abba\"`, but it should be `\"abbba\"\
    `.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to account\
    \ for that.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there is\
    \ a way to make it more efficient. For example, `make_palindrome(\"abba\")` takes\
    \ about 1.5 seconds on my machine, whereas `make_palindrome(\"abbba\")` takes\
    \ about 0.2 seconds. I wonder if there is a way to make it more efficient.\n<|/\
    \ c |>\n<| c |>\n: I added a more efficient solution that uses `String#rindex`.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.to_s\n  longest = find_longest_palindrome(string, 0)\n  longest.prepend(string.slice(longest.last,\
    \ string.length))\n  longest\nend", "  string = string.to_s\n  max_length = string.length\n\
    \  max_length = max_length if max_length > 0 \n  max_length = max_length if max_length\
    \ > 0 \n  max_length = max_length if max_length > 0 \n  max_length = max_length\
    \ if max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if ", "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length\
    \ = 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string.gsub(/(?<=\\A|\\z)/) { |s| s.reverse }\nend", "  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!",
  "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_postfix_reverse = \"\
    \"\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index2\
    \ = 0\n  max_length_postfix_reverse_index3 = 0\n  max_length_postfix_reverse_index4\
    \ = 0\n  max_length_postfix_reverse_index5 = 0\n  max_length_postfix_reverse_index6\
    \ = 0\n  max_length_postfix_reverse_index7 = 0\n  max_length_postfix_reverse_index8\
    \ = 0\n  max_length_postfix_reverse_index9 = 0\n  max_length_postfix_reverse_index10\
    \ = 0\n  max_length_postfix_reverse_index11 = 0\n  max_length_postfix_reverse_index12\
    \ = 0\n  max_length_postfix_reverse_index13 = 0\n  max_length_postfix_reverse_index14\
    \ = 0\n  max_length_postfix_reverse_index15 = 0\n  max_length_postfix_reverse_index16\
    \ = 0\n  max_length_postfix_reverse_index17 = 0\n  max_length_postfix_reverse_index18\
    \ = 0\n  max_length_postfix_reverse_index19 = 0\n  max_length_postfix_reverse_index20\
    \ = 0\n  max_length_postfix_reverse_index21 = 0\n  max_length_postfix_reverse_index22\
    \ = 0\n  max_length_postfix_reverse_index23 = 0\n  max_length_postfix_reverse_index24\
    \ = 0\n  max_length_postfix_reverse_index25 = 0\n  max_length_postfix_reverse_index26\
    \ = 0\n  max_length_postfix_reverse_index27 = 0\n  max_length_postfix_reverse_index28\
    \ = 0\n  max_length_postfix_reverse_index29 = 0\n  max_length_postfix_reverse_index30\
    \ = 0\n  max_length_postfix_reverse_index31 = 0\n  max_length_postfix_reverse_index32\
    \ = 0\n  max_length_postfix_reverse_index33 = 0\n  max_length_postfix_reverse_index34\
    \ = 0\n  max_length_postfix_reverse_index35 = 0\n  max_length_postfix_reverse_index36\
    \ = 0\n  max_length_postfix_reverse_index37 = 0\n  max_length_postfix_reverse_index38\
    \ = 0\n  max_length_postfix_reverse_index39 = 0\n  max_length_postfix_reverse_index40\
    \ = 0\n  max_length_postfix_reverse_index41 = 0\n  max_length_postfix_reverse_index42\
    \ = 0\n  max_length_postfix_reverse_index43 = 0\n  max_length_postfix_reverse_index44\
    \ = 0\n  max_length_postfix_reverse_index45 = 0\n  max_length_postfix_reverse_index46\
    \ = 0\n  max_length_postfix_reverse_index47 = 0\n  max_length_postfix_reverse_index48\
    \ = 0\n  max_length_postfix_reverse_index49 = 0\n  max_length_", "  string = string.to_s\n\
    \  max_length = string.length\n  max_length -= 1 if string.length % 2 == 0 # Remove\
    \ even length string\n  max_length -= 1 if string.length < 2 # Remove single character\
    \ string\n  max_length -= 1 if string.length < 3 # Remove single character string\n\
    \  max_length -= 1 if string.length < 4 # Remove single character string\n  max_length\
    \ -= 1 if string.length < 5 # Remove single character string\n  max_length -=\
    \ 1 if string.length < 6 # Remove single character string\n  max_length -= 1 if\
    \ string.length < 7 # Remove single character string\n  max_length -= 1 if string.length\
    \ < 8 # Remove single character string\n  max_length -= 1 if string.length < 9\
    \ # Remove single character string\n  max_length -= 1 if string.length < 10 #\
    \ Remove single character string\n  max_length -= 1 if string.length < 11 # Remove\
    \ single character string\n  max_length -= 1 if string.length < 12 # Remove single\
    \ character string\n  max_length -= 1 if string.length < 13 # Remove single character\
    \ string\n  max_length -= 1 if string.length < 14 # Remove single character string\n\
    \  max_length -= 1 if string.length < 15 # Remove single character string\n  max_length\
    \ -= 1 if string.length < 16 # Remove single character string\n  max_length -=\
    \ 1 if string.length < 17 # Remove single character string\n  max_length -= 1\
    \ if string.length < 18 # Remove single character string\n  max_length -= 1 if\
    \ string.length < 19 # Remove single character string\n  max_length -= 1 if string.length\
    \ < 20 # Remove single character string\n  max_length -= 1 if string.length <\
    \ 21 # Remove single character string\n  max_length -= 1 if string.length < 22\
    \ # Remove single character string\n  max_length -= 1 if string.length < 23 #\
    \ Remove single character string\n  max_length -= 1 if string.length < 24 # Remove\
    \ single character string\n  max_length -= 1 if string.length < 25 # Remove single\
    \ character string\n  max_length -= 1 if string.length < 26 # Remove single character\
    \ string\n  max_length -= 1 if string.length < 27 # Remove single character string\n\
    \  max_length -= 1 if string.length < 28 # Remove single character string\n  max_length\
    \ -= 1 if string.length < 29 # Remove single character string\n  max_length -=\
    \ 1 if string.length < 30 # Remove single character string\n  max_length -= 1\
    \ if string.length < 31 # Remove single character string\n  max_length -= 1 if\
    \ string.length < 32 # Remove single character string\n  max_length -= 1 if string.length\
    \ < 33 # Remove single character string\n  max_length -= 1 if string.length <\
    \ 34 # Remove single character string\n  max_length -= 1 if string.length < 35\
    \ # Remove single character string\n  max_length -= 1 if string.length < 36 # ",
  "  string.length.times do |i|\n    string.slice!(i)\n    break if string == string.reverse\n\
    \  end\n  string\nend", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.rindex))\n  longest.prepend(string.slice(longest.rindex))\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n \
    \ string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, '", "  string.reverse\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string\nend", "  longest = find_longest_postfix(string)\n\
    \  prefix = string.slice(0,longest)\n  suffix = string.slice(longest)\n  reversed_prefix\
    \ = prefix.reverse\n  reversed_suffix = suffix.reverse\n  result = prefix + reversed_prefix\
    \ + reversed_suffix\n  result\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])",
  "  string.gsub(/(?<=^|\\s)(\\w+)(?=\\s|$)/) { |palindrome| palindrome.downcase }\n\
    \  string.gsub(/(?<=^|\\s)(\\w+)(?=\\s|$)/) { |palindrome| palindrome.downcase\
    \ }.reverse\n  string.gsub(/(?<=^|\\s)(\\w+)(?=\\s|$)/) { |palindrome| palindrome.downcase\
    \ }\nend", "  string = string.dup\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n\
    \  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { ", "  string.gsub(/[^a-z]/i) { |s| s[0...s.length] }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| ", "  string = string.to_s\n  longest = find_longest_postfix_palindrome(string)\n\
    \  longest = longest + reverse(string[0 .. longest])\n  longest\nend", "  string\
    \ = string.dup\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string.length.times do |i|\n    string.slice!(0,\
    \ i)\n    string.slice!(-i, i)\n    break if string == string.reverse\n  end\n\
    \  string\nend\n</code>\n<|/ a tags=ruby,string,palindrome |>\n<| a tags=ruby,string,palindrome\
    \ |>\n<code>", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/", "  string.length.times do |i|\n    string.slice!(i)\n\
    \    break if string.length == i\n    string.slice!(i)\n  end\n  string.reverse!\n\
    \  string + string.reverse\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,palindrome\
    \ |>\n<code>", "  string.gsub(/(?<=[a-z])(?=[a-z])/) { |s| s[0...-1] + s[1..-1]\
    \ }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
