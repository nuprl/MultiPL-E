name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  string = string.dup\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string\n\
    end", "  string.reverse\n  string.slice!(0, string.rindex(string))\n  string\n\
    end", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n", "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string", "  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/(.)(.*)/) { $1.reverse + $2 }\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| a dscore=0 |>\n<code>", "  string.length.times do\
    \ |i|\n    string << string[-i-1]\n  end\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.to_s\n  length = string.length\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string.reverse(longest).slice(0,length)\n  longest\nend",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'b')\n  string.gsub!(/[a-z]/i, 'c')\n  string.gsub!(/[a-z]/i,\
    \ 'd')\n  string.gsub!(/[a-z]/i, 'e')\n  string.gsub!(/[a-z]/i, 'f')\n  string.gsub!(/[a-z]/i,\
    \ 'g')\n  string.gsub!(/[a-z]/i, 'h')\n  string.gsub!(/[a-z]/i, 'i')\n  string.gsub!(/[a-z]/i,\
    \ 'j')\n  string.gsub!(/[a-z]/i, 'k')\n  string.gsub!(/[a-z]/i, 'l')\n  string.gsub!(/[a-z]/i,\
    \ 'm')\n  string.gsub!(/[a-z]/i, 'n')\n  string.gsub!(/[a-z]/i, 'o')\n  string.gsub!(/[a-z]/i,\
    \ 'p')\n  string.gsub!(/[a-z]/i, 'q')\n  string.gsub!(/[a-z]/i, 'r')\n  string.gsub!(/[a-z]/i,\
    \ 's')\n  string.gsub!(/[a-z]/i, 't')\n  string.gsub!(/[a-z]/i, 'u')\n  string.gsub!(/[a-z]/i,\
    \ 'v')\n  string.gsub!(/[a-z]/i, 'w')\n  string.gsub!(/[a-z]/i, 'x')\n  string.gsub!(/[a-z]/i,\
    \ 'y')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'b')\n  string.gsub!(/[a-z]/i, 'c')\n  string.gsub!(/[a-z]/i, 'd')\n  string.gsub!(/[a-z]/i,\
    \ 'e')\n  string.gsub!(/[a-z]/i, 'f')\n  string.gsub!(/[a-z]/i, 'g')\n  string.gsub!(/[a-z]/i,\
    \ 'h')\n  string.gsub!(/[a-z]/i, 'i')\n  string.gsub!(/[a-z]/i, 'j')\n  string.gsub!(/[a-z]/i,\
    \ 'k')\n  string.gsub!(/[a-z]/i, 'l')\n  string.gsub!(/[a-z]/i, 'm')\n  string.gsub!(",
  "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse_reverse\
    \ = \"\"\n  i = 0\n  while i < string.length\n    max_length = max_length if max_length\
    \ > string.length \n    max_length_postfix = string[max_length..-1] if string[max_length..-1]\
    \ == string[max_length..-1].reverse\n    max_length_prefix_postfix = string[0...max_length]\
    \ if string[0...max_length] == string[0...max_length].reverse\n    max_length_prefix_postfix_reverse\
    \ = string[0...max_length].reverse\n    max_length_prefix_postfix_reverse_reverse\
    \ = string[0...max_length].reverse.reverse\n    i += 1\n  end\n  return max_length_prefix_postfix_reverse_reverse\
    \ + max_length_prefix_postfix + max_length_postfix\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  string.reverse\n  string.insert(0,string[string.length-1])\n\
    \  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.length.times do |i|\n\
    \    string.slice!(0, i)\n    string.slice!(0, i)\n  end\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.reverse!\n  string << string.reverse\n\
    \  string\nend", "  string.reverse\n  string.gsub(/(?<=^|\\s)\\z/, \"\").reverse\n\
    end", "  string.reverse\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
