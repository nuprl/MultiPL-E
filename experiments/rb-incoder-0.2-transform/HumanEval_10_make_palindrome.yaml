name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  string = string.dup\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string\n\
    end", "  string.reverse\n  string.slice!(0, string.rindex(string))\n  string\n\
    end", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n", "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(string.length)\n  string.slice!(0, string.length)\n  string.slice!(string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(string", "  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/(.)(.*)/) { $1.reverse + $2 }\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| a dscore=0 |>\n<code>", "  string.length.times do\
    \ |i|\n    string << string[-i-1]\n  end\n  string.downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.to_s\n  length = string.length\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string.reverse(longest).slice(0,length)\n  longest\nend",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'b')\n  string.gsub!(/[a-z]/i, 'c')\n  string.gsub!(/[a-z]/i,\
    \ 'd')\n  string.gsub!(/[a-z]/i, 'e')\n  string.gsub!(/[a-z]/i, 'f')\n  string.gsub!(/[a-z]/i,\
    \ 'g')\n  string.gsub!(/[a-z]/i, 'h')\n  string.gsub!(/[a-z]/i, 'i')\n  string.gsub!(/[a-z]/i,\
    \ 'j')\n  string.gsub!(/[a-z]/i, 'k')\n  string.gsub!(/[a-z]/i, 'l')\n  string.gsub!(/[a-z]/i,\
    \ 'm')\n  string.gsub!(/[a-z]/i, 'n')\n  string.gsub!(/[a-z]/i, 'o')\n  string.gsub!(/[a-z]/i,\
    \ 'p')\n  string.gsub!(/[a-z]/i, 'q')\n  string.gsub!(/[a-z]/i, 'r')\n  string.gsub!(/[a-z]/i,\
    \ 's')\n  string.gsub!(/[a-z]/i, 't')\n  string.gsub!(/[a-z]/i, 'u')\n  string.gsub!(/[a-z]/i,\
    \ 'v')\n  string.gsub!(/[a-z]/i, 'w')\n  string.gsub!(/[a-z]/i, 'x')\n  string.gsub!(/[a-z]/i,\
    \ 'y')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'b')\n  string.gsub!(/[a-z]/i, 'c')\n  string.gsub!(/[a-z]/i, 'd')\n  string.gsub!(/[a-z]/i,\
    \ 'e')\n  string.gsub!(/[a-z]/i, 'f')\n  string.gsub!(/[a-z]/i, 'g')\n  string.gsub!(/[a-z]/i,\
    \ 'h')\n  string.gsub!(/[a-z]/i, 'i')\n  string.gsub!(/[a-z]/i, 'j')\n  string.gsub!(/[a-z]/i,\
    \ 'k')\n  string.gsub!(/[a-z]/i, 'l')\n  string.gsub!(/[a-z]/i, 'm')\n  string.gsub!(",
  "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse_reverse\
    \ = \"\"\n  i = 0\n  while i < string.length\n    max_length = max_length if max_length\
    \ > string.length \n    max_length_postfix = string[max_length..-1] if string[max_length..-1]\
    \ == string[max_length..-1].reverse\n    max_length_prefix_postfix = string[0...max_length]\
    \ if string[0...max_length] == string[0...max_length].reverse\n    max_length_prefix_postfix_reverse\
    \ = string[0...max_length].reverse\n    max_length_prefix_postfix_reverse_reverse\
    \ = string[0...max_length].reverse.reverse\n    i += 1\n  end\n  return max_length_prefix_postfix_reverse_reverse\
    \ + max_length_prefix_postfix + max_length_postfix\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  string.reverse\n  string.insert(0,string[string.length-1])\n\
    \  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.length.times do |i|\n\
    \    string.slice!(0, i)\n    string.slice!(0, i)\n  end\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.reverse!\n  string << string.reverse\n\
    \  string\nend", "  string.reverse\n  string.gsub(/(?<=^|\\s)\\z/, \"\").reverse\n\
    end", "  string.reverse\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.to_s\n  longest = find_longest_palindrome(string, true)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  string.length.times do |i|\n    string.slice!(0,\
    \ i)\n    string.slice!(0, i)\n  end\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.reverse!\n  string.reverse!\n  string\nend", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string.gsub(/(?<=^|\\\
    s)(\\w)(\\w*)(?=$|\\s)/) do |match|\n    match[0].upcase + match[1].downcase +\
    \ match[2].downcase\n  end\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])",
  "  max_length = find_max_length(string)\n  prefix = string[0...max_length]\n  suffix\
    \ = string[max_length..-1]\n  reversed_suffix = suffix.reverse\n  reversed_prefix\
    \ = prefix.reverse\n  reversed_string = reversed_prefix + reversed_suffix\n  return\
    \ reversed_string\nend", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest.last))\n  longest\nend", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  ", "  string = string.to_s\n  longest =\
    \ find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(longest.length,string.length))\n  longest\nend",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + reverse(string[0 .. longest])\n  longest\nend", "  max_length\
    \ = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!", "  string = string.dup\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.downcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { ", "  string = string.to_s\n  longest = string.chars.reverse.find { |c| string[0\
    \ .. -c] == string[-c .. 0] }\n  string << string[0 .. longest]\nend", "  string\
    \ = string.to_s\n  max_length = string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < string.length else string.length\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < string.length else string.length\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < string.length else string.length\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < string.length else string.length\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < ", "  string = string.dup\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice", "  longest = find_longest_palindrome(string)\n  longest += string.reverse(longest)\n\
    \  longest\nend", "  string.length.times do |i|\n    string.slice!(i)\n    break\
    \ if string == string.reverse\n  end\n  string\nend", "  string = string.dup\n\
    \  string.gsub!(/([a-z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { ", " \
    \ string.reverse\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string\nend\n</code>\n<|/ a tags=ruby,string |>\n<|\
    \ c |>\nThis doesn't work if the string starts with a palindrome. For example,\
    \ `make_palindrome(\"abba\")` returns `\"abba\"`, but it should be `\"abbba\"\
    `.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to account\
    \ for that.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there is\
    \ a way to make it more efficient. For example, `make_palindrome(\"abba\")` takes\
    \ about 1.5 seconds on my machine, whereas `make_palindrome(\"abbba\")` takes\
    \ about 0.2 seconds. I wonder if there is a way to make it more efficient.\n<|/\
    \ c |>\n<| c |>\n: I added a more efficient solution that uses `String#rindex`.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.to_s\n  longest = find_longest_palindrome(string, 0)\n  longest.prepend(string.slice(longest.last,\
    \ string.length))\n  longest\nend", "  string = string.to_s\n  max_length = string.length\n\
    \  max_length = max_length if max_length > 0 \n  max_length = max_length if max_length\
    \ > 0 \n  max_length = max_length if max_length > 0 \n  max_length = max_length\
    \ if max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if max_length > 0 \n  max_length = max_length if max_length > 0\
    \ \n  max_length = max_length if max_length > 0 \n  max_length = max_length if\
    \ max_length > 0 \n  max_length = max_length if max_length > 0 \n  max_length\
    \ = max_length if ", "  max_length = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length\
    \ = 0\n  max_length_prefix_postfix_length = 0\n  max_length_prefix_postfix_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string.gsub(/(?<=\\A|\\z)/) { |s| s.reverse }\nend", "  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!",
  "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_postfix_reverse = \"\
    \"\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index2\
    \ = 0\n  max_length_postfix_reverse_index3 = 0\n  max_length_postfix_reverse_index4\
    \ = 0\n  max_length_postfix_reverse_index5 = 0\n  max_length_postfix_reverse_index6\
    \ = 0\n  max_length_postfix_reverse_index7 = 0\n  max_length_postfix_reverse_index8\
    \ = 0\n  max_length_postfix_reverse_index9 = 0\n  max_length_postfix_reverse_index10\
    \ = 0\n  max_length_postfix_reverse_index11 = 0\n  max_length_postfix_reverse_index12\
    \ = 0\n  max_length_postfix_reverse_index13 = 0\n  max_length_postfix_reverse_index14\
    \ = 0\n  max_length_postfix_reverse_index15 = 0\n  max_length_postfix_reverse_index16\
    \ = 0\n  max_length_postfix_reverse_index17 = 0\n  max_length_postfix_reverse_index18\
    \ = 0\n  max_length_postfix_reverse_index19 = 0\n  max_length_postfix_reverse_index20\
    \ = 0\n  max_length_postfix_reverse_index21 = 0\n  max_length_postfix_reverse_index22\
    \ = 0\n  max_length_postfix_reverse_index23 = 0\n  max_length_postfix_reverse_index24\
    \ = 0\n  max_length_postfix_reverse_index25 = 0\n  max_length_postfix_reverse_index26\
    \ = 0\n  max_length_postfix_reverse_index27 = 0\n  max_length_postfix_reverse_index28\
    \ = 0\n  max_length_postfix_reverse_index29 = 0\n  max_length_postfix_reverse_index30\
    \ = 0\n  max_length_postfix_reverse_index31 = 0\n  max_length_postfix_reverse_index32\
    \ = 0\n  max_length_postfix_reverse_index33 = 0\n  max_length_postfix_reverse_index34\
    \ = 0\n  max_length_postfix_reverse_index35 = 0\n  max_length_postfix_reverse_index36\
    \ = 0\n  max_length_postfix_reverse_index37 = 0\n  max_length_postfix_reverse_index38\
    \ = 0\n  max_length_postfix_reverse_index39 = 0\n  max_length_postfix_reverse_index40\
    \ = 0\n  max_length_postfix_reverse_index41 = 0\n  max_length_postfix_reverse_index42\
    \ = 0\n  max_length_postfix_reverse_index43 = 0\n  max_length_postfix_reverse_index44\
    \ = 0\n  max_length_postfix_reverse_index45 = 0\n  max_length_postfix_reverse_index46\
    \ = 0\n  max_length_postfix_reverse_index47 = 0\n  max_length_postfix_reverse_index48\
    \ = 0\n  max_length_postfix_reverse_index49 = 0\n  max_length_", "  string = string.to_s\n\
    \  max_length = string.length\n  max_length -= 1 if string.length % 2 == 0 # Remove\
    \ even length string\n  max_length -= 1 if string.length < 2 # Remove single character\
    \ string\n  max_length -= 1 if string.length < 3 # Remove single character string\n\
    \  max_length -= 1 if string.length < 4 # Remove single character string\n  max_length\
    \ -= 1 if string.length < 5 # Remove single character string\n  max_length -=\
    \ 1 if string.length < 6 # Remove single character string\n  max_length -= 1 if\
    \ string.length < 7 # Remove single character string\n  max_length -= 1 if string.length\
    \ < 8 # Remove single character string\n  max_length -= 1 if string.length < 9\
    \ # Remove single character string\n  max_length -= 1 if string.length < 10 #\
    \ Remove single character string\n  max_length -= 1 if string.length < 11 # Remove\
    \ single character string\n  max_length -= 1 if string.length < 12 # Remove single\
    \ character string\n  max_length -= 1 if string.length < 13 # Remove single character\
    \ string\n  max_length -= 1 if string.length < 14 # Remove single character string\n\
    \  max_length -= 1 if string.length < 15 # Remove single character string\n  max_length\
    \ -= 1 if string.length < 16 # Remove single character string\n  max_length -=\
    \ 1 if string.length < 17 # Remove single character string\n  max_length -= 1\
    \ if string.length < 18 # Remove single character string\n  max_length -= 1 if\
    \ string.length < 19 # Remove single character string\n  max_length -= 1 if string.length\
    \ < 20 # Remove single character string\n  max_length -= 1 if string.length <\
    \ 21 # Remove single character string\n  max_length -= 1 if string.length < 22\
    \ # Remove single character string\n  max_length -= 1 if string.length < 23 #\
    \ Remove single character string\n  max_length -= 1 if string.length < 24 # Remove\
    \ single character string\n  max_length -= 1 if string.length < 25 # Remove single\
    \ character string\n  max_length -= 1 if string.length < 26 # Remove single character\
    \ string\n  max_length -= 1 if string.length < 27 # Remove single character string\n\
    \  max_length -= 1 if string.length < 28 # Remove single character string\n  max_length\
    \ -= 1 if string.length < 29 # Remove single character string\n  max_length -=\
    \ 1 if string.length < 30 # Remove single character string\n  max_length -= 1\
    \ if string.length < 31 # Remove single character string\n  max_length -= 1 if\
    \ string.length < 32 # Remove single character string\n  max_length -= 1 if string.length\
    \ < 33 # Remove single character string\n  max_length -= 1 if string.length <\
    \ 34 # Remove single character string\n  max_length -= 1 if string.length < 35\
    \ # Remove single character string\n  max_length -= 1 if string.length < 36 # ",
  "  string.length.times do |i|\n    string.slice!(i)\n    break if string == string.reverse\n\
    \  end\n  string\nend", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.rindex))\n  longest.prepend(string.slice(longest.rindex))\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n \
    \ string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, '", "  string.reverse\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string\nend", "  longest = find_longest_postfix(string)\n\
    \  prefix = string.slice(0,longest)\n  suffix = string.slice(longest)\n  reversed_prefix\
    \ = prefix.reverse\n  reversed_suffix = suffix.reverse\n  result = prefix + reversed_prefix\
    \ + reversed_suffix\n  result\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])",
  "  string.gsub(/(?<=^|\\s)(\\w+)(?=\\s|$)/) { |palindrome| palindrome.downcase }\n\
    \  string.gsub(/(?<=^|\\s)(\\w+)(?=\\s|$)/) { |palindrome| palindrome.downcase\
    \ }.reverse\n  string.gsub(/(?<=^|\\s)(\\w+)(?=\\s|$)/) { |palindrome| palindrome.downcase\
    \ }\nend", "  string = string.dup\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n\
    \  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { ", "  string.gsub(/[^a-z]/i) { |s| s[0...s.length] }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse\
    \ }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length].reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| ", "  string = string.to_s\n  longest = find_longest_postfix_palindrome(string)\n\
    \  longest = longest + reverse(string[0 .. longest])\n  longest\nend", "  string\
    \ = string.dup\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string.length.times do |i|\n    string.slice!(0,\
    \ i)\n    string.slice!(-i, i)\n    break if string == string.reverse\n  end\n\
    \  string\nend\n</code>\n<|/ a tags=ruby,string,palindrome |>\n<| a tags=ruby,string,palindrome\
    \ |>\n<code>", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/", "  string.length.times do |i|\n    string.slice!(i)\n\
    \    break if string.length == i\n    string.slice!(i)\n  end\n  string.reverse!\n\
    \  string + string.reverse\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,palindrome\
    \ |>\n<code>", "  string.gsub(/(?<=[a-z])(?=[a-z])/) { |s| s[0...-1] + s[1..-1]\
    \ }\nend", "  string = string.to_s\n  max_length = string.length\n  max_length\
    \ -= 1 if string.length % 2 == 1 \n  max_length -= 1 if string.length % 3 == 1\n\
    \  max_length -= 1 if string.length % 5 == 1\n  max_length -= 1 if string.length\
    \ % 7 == 1\n  max_length -= 1 if string.length % 9 == 1\n  max_length -= 1 if\
    \ string.length % 11 == 1\n  max_length -= 1 if string.length % 13 == 1\n  max_length\
    \ -= 1 if string.length % 15 == 1\n  max_length -= 1 if string.length % 17 ==\
    \ 1\n  max_length -= 1 if string.length % 19 == 1\n  max_length -= 1 if string.length\
    \ % 21 == 1\n  max_length -= 1 if string.length % 23 == 1\n  max_length -= 1 if\
    \ string.length % 25 == 1\n  max_length -= 1 if string.length % 27 == 1\n  max_length\
    \ -= 1 if string.length % 29 == 1\n  max_length -= 1 if string.length % 31 ==\
    \ 1\n  max_length -= 1 if string.length % 33 == 1\n  max_length -= 1 if string.length\
    \ % 35 == 1\n  max_length -= 1 if string.length % 37 == 1\n  max_length -= 1 if\
    \ string.length % 39 == 1\n  max_length -= 1 if string.length % 41 == 1\n  max_length\
    \ -= 1 if string.length % 43 == 1\n  max_length -= 1 if string.length % 45 ==\
    \ 1\n  max_length -= 1 if string.length % 47 == 1\n  max_length -= 1 if string.length\
    \ % 49 == 1\n  max_length -= 1 if string.length % 51 == 1\n  max_length -= 1 if\
    \ string.length % 53 == 1\n  max_length -= 1 if string.length % 55 == 1\n  max_length\
    \ -= 1 if string.length % 57 == 1\n  max_length -= 1 if string.length % 59 ==\
    \ 1\n  max_length -= 1 if string.length % 61 == 1\n  max_length -= 1 if string.length\
    \ % 63 == 1\n  max_length -= 1 if string.length % 65 == 1\n  max_length -= 1 if\
    \ string.length % 67 == 1\n  max_length -= 1 if string.length % 69 == 1\n  max_length\
    \ -= 1 if string.length % 71 == 1\n  max_length -= 1 if string.length % 73 ==\
    \ 1\n  max_length -= 1 if string.length % 75 == 1\n  max_length -= 1 if string.length\
    \ % 77 == 1\n  max_length -= 1 if string.length % 79 == 1\n  max_length -= 1 if\
    \ string.length % 81 == 1\n  max_length -= 1 if string.length % 83 == 1\n  max_length\
    \ -= 1 if string.length % 85 == 1\n  max_length -= 1 if string.length % 87 ==\
    \ 1\n  max_length -= 1 if string.length % 89 == 1\n  max_length -= 1 if string.length\
    \ % 91 == 1\n  max_length -= 1 if string.length % 93 == 1\n  max_length -= 1 if\
    \ string.length % 95 == 1\n  max_length -= 1 if string.length % 97 == 1\n  max_length\
    \ -= 1 if string.length", "  string.length.times do |i|\n    string.slice!(0..i-1)\n\
    \    string.slice!(0..i)\n  end\n  string.reverse!\n  string + string[0..(string.length-1)]\n\
    end", "  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/(.)\\1*/) { $1.reverse\
    \ }\nend", "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(0,\
    \ i)\n  end\n  string.reverse!\n  string + string.reverse\nend", "  string = string.dup\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice", "  string.length.times do\
    \ |i|\n    string.slice!(0, i)\n    break if string.chars.reverse.join == string\n\
    \  end\n  string\nend", "  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/(.)\\\
    1*/) { $1.reverse }\nend", "  string = string.dup\n  string.gsub!(/([a-z])/) {\
    \ $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.", "  string.length.times do\
    \ |i|\n    string.slice!(0, i)\n    break if string.length == i\n    string.slice!(0,\
    \ i)\n    break if string.length == i\n  end\n  string.reverse!\n  string + string.reverse\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  string.reverse\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string\n\
    end", "  string = string.to_s\n  length = string.length\n  max_length = length\n\
    \  max_length_postfix = length\n  max_length_postfix_reverse = length\n  max_length_prefix_reverse\
    \ = length\n  max_length_prefix_postfix = length\n  max_length_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_reverse = length\n  max_length_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_postfix_reverse = length\n  max_length_prefix_prefix_prefix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_postfix = length\n  max_length_prefix_prefix_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_reverse = length\n  max_length_prefix_prefix_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_postfix_reverse = length\n\
    \  max_length_prefix_prefix_prefix_prefix_prefix_reverse = length\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix_reverse =\
    \ length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_reverse = length\n\
    \  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_reverse\
    \ = length\n  max_length_prefix_prefix_prefix_prefix_", "  longest = find_longest_palindrome(string)\n\
    \  reversed = string.reverse\n  result = string + reversed.call(longest.slice!(0,\
    \ longest.length))\n  result\nend", "  string.reverse\n  string.sub!(/(?<=^|\\\
    s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\\
    W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\\
    W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\\
    W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\\
    W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\\
    W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\\
    W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\\
    W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n  string.sub!(/(?<=\\W)/, \"\")\n\
    \  string.sub!(/(?<=\\W)/, \"\")\n", "  string = string.dup\n  string.gsub!(/([a-z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/[^a-z]/)\
    \ { |s| s[0...s.length/2] }\n  string.gsub!(/[^A-Z]/) { |s| s[0...s.length/2].reverse}\n\
    \  string.gsub!(/([a-z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/[^A-Z]/) { |s| s[0...s.length/2].reverse}\n  string.gsub!(/[^a-z]/)\
    \ { |s| s[0...s.length/2]}\n  string.gsub!(/([a-z])/) { $1.downcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/[^A-Z]/) { |s| s[0...s.length/2].reverse}\n \
    \ string.gsub!(/[^a-z]/) { |s| s[0...s.length/2]}\n  string.gsub!(/([a-z])/) {\
    \ $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase }\n  string.gsub!(/[^A-Z]/)\
    \ { |s| s[0...s.length/2].reverse}\n  string.gsub!(/[^a-z]/) { |s| s[0...s.length/2]}\n\
    \  string.gsub!(/([a-z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase\
    \ }\n  string.gsub!(/[^A-Z]/) { |s| s[0...s.length/2].reverse}\n  string.gsub!(/[^a-z]/)\
    \ { |s| s[0...s.length/2]}\n  string.gsub!(/([a-z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/[^A-Z]/) { |s| s[0...s.length/2].reverse}\n\
    \  string.gsub!(/[^a-z]/) { |s| s[0...s.length/2]}\n  string.gsub!(/([a-z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase }\n  string.gsub!(/[^A-Z]/)\
    \ { |s| s[0...s.length/2].reverse}\n  string.g", "  string.length.times do |i|\n\
    \    string.slice!(0, i)\n    break if string.slice!(0, i) == string.reverse\n\
    \  end\n  string\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ Your code works, but it takes too long to run. My code takes about 1 second\
    \ to run and yours takes about 3 seconds. I wonder if there is a way to make it\
    \ run faster. Thanks again.\n<|/ c |>\n<| c |>\nI added a faster version. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works, but it\
    \ takes too long to run. My code takes about 1 second to run and yours takes about\
    \ 3 seconds. I wonder if there is a way to make it run faster. Thanks again.\n\
    <|/ c |>\n<| c |>\nI added a faster version. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Your code works, but it takes too long to run. My code\
    \ takes about 1 second to run and yours takes about 3 seconds. I wonder if there\
    \ is a way to make it run faster. Thanks again.\n<|/ c |>\n<| a tags=ruby,palindrome,string\
    \ |>\n<code>", "  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice", "  string = string.dup\n  longest = find_longest_postfix_palindrome(string)\n\
    \  longest.downcase!\n  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(longest.length,string.length))\n\
    \  longest\nend", "  string.length.times do |i|\n    string = string.gsub(/./,\
    \ \"\").reverse\n  end\n  string += string[0..(string.length-1)]\n  string\nend",
  "  string = string.to_s\n  longest = find_longest_postfix_palindrome(string)\n \
    \ longest.prepend(string.slice(0,longest.rindex))\n  longest.prepend(string.slice(longest.rindex+1))\n\
    \  longest\nend", "  string.length.times do |i|\n    string = string.gsub(/./,\
    \ \"\").reverse\n    break if string == string.gsub(/./, \"\")\n  end\n  string\
    \ + string.gsub(/./, \"\")\nend", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(string.slice(0,longest.length)))\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/",
  "  string = string.to_s\n  length = string.length\n  max_palindrome = \"\"\n  max_palindrome_length\
    \ = 0\n  max_palindrome_postfix_length = 0\n  max_palindrome_postfix = \"\"\n\
    \  max_palindrome_postfix_length = 0\n  max_palindrome_prefix_length = 0\n  max_palindrome_prefix\
    \ = \"\"\n  max_palindrome_prefix_length = 0\n  max_palindrome_prefix_postfix\
    \ = \"\"\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_palindrome_prefix_postfix_length = 0\n  max_palindrome_prefix_postfix_length\
    \ = 0\n  max_", "  string = string.dup\n  string.gsub!(/([a-z])([a-z])/, '\\1\\\
    2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  max_length = 0\n  max_length_postfix\
    \ = \"\"\n  max_length_prefix_postfix = \"\"\n  max_length_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"", "  string.reverse!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.to_s\n  longest = find_longest_palindrome(string, :left)\n  longest\
    \ = longest + string.reverse(longest)\n  longest\nend", "  string = string.dup\n\
    \  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z",
  "  string = string.to_s\n  longest = string.chars.reverse.find(string).to_i\n  string.insert(longest,\
    \ string[longest..-1].reverse)\n  string\nend", "  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])", "  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1]\
    \ }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1]\
    \ }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1]\
    \ }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1]\
    \ }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1]\
    \ }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1]\
    \ }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1]\
    \ }\n  string.gsub(/(?<=\\A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?<=\\\
    A|\\z)|\\z/) { |s| s[0...-1] }\n  string.gsub(/(?", "  string.length.times do\
    \ |i|\n    string.slice!(0...i)\n    break if string == string.reverse\n  end\n\
    \  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.to_s\n\
    \  length = string.length\n  max_length = length\n  max_length_postfix = length\n\
    \  max_length_postfix_reverse = length\n  max_length_prefix_reverse = length\n\
    \  max_length_prefix_postfix = length\n  max_length_prefix_postfix_reverse = length\n\
    \  max_length_prefix_reverse = length\n  max_length_postfix_reverse = length\n\
    \  max_length_prefix_postfix_reverse = length\n  max_length_prefix_reverse = length\n\
    \  max_length_postfix = length\n  max_length_prefix_postfix = length\n  max_length_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_reverse = length\n  max_length_postfix_reverse\
    \ = length\n  max_length_prefix_postfix_reverse = length\n  max_length_prefix_reverse\
    \ = length\n  max_length_postfix = length\n  max_length_prefix_postfix = length\n\
    \  max_length_prefix_postfix_reverse = length\n  max_length_prefix_reverse = length\n\
    \  max_length_postfix_reverse = length\n  max_length_prefix_postfix_reverse =\
    \ length\n  max_length_prefix_reverse = length\n  max_length_postfix = length\n\
    \  max_length_prefix_postfix = length\n  max_length_prefix_postfix_reverse = length\n\
    \  max_length_prefix_reverse = length\n  max_length_postfix_reverse = length\n\
    \  max_length_prefix_postfix_reverse = length\n  max_length_prefix_reverse = length\n\
    \  max_length_postfix = length\n  max_length_prefix_postfix = length\n  max_length_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_reverse = length\n  max_length_postfix_reverse\
    \ = length\n  max_length_prefix_postfix_reverse = length\n  max_length_prefix_reverse\
    \ = length\n  max_length_postfix = length\n  max_length_prefix_postfix = length\n\
    \  max_length_prefix_postfix_reverse = length\n  max_length_prefix_reverse = length\n\
    \  max_length_postfix_reverse = length\n  max_length_prefix_postfix_reverse =\
    \ length\n  max_length_prefix_reverse = length\n  max_length_postfix = length\n\
    \  max_length_prefix_postfix = length\n  max_length_prefix_postfix_reverse = length\n\
    \  max_length_prefix_reverse = length\n  max_length_postfix_reverse = length\n\
    \  max_length_prefix_postfix_reverse = length\n  max_length_prefix_reverse = length\n\
    \  max_length_postfix = length\n  max_length_prefix_postfix = length\n  max_length_prefix_postfix_reverse\
    \ = length\n  max_length_prefix_reverse = length\n  max_length_postfix_reverse\
    \ = length\n  ", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub!(/[^a-z]/i, '')\n  string.", "  string.reverse\n\
    \  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string\nend", "  string.length.times do |i|\n    string.slice!(i)\n \
    \   break if string.chars.to_s.reverse.eql?(string)\n  end\n  string\nend", " \
    \ string = string.dup\n  string.gsub!(/(?<=^|\\s)/, \"\")\n  string.gsub!(/(?<=\\\
    s)/, \"\")\n  string.gsub!(/(?<=\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W)/, \"\
    \")\n  string.gsub!(/(?<=\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W)/,\
    \ \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\\
    W\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W)/, \"\")\n\
    \  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\\
    W\\W\\W\\W\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W\\\
    W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W)/, \"\"\
    )\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\\
    W\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\\
    W\\W\\W\\W\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W\\\
    W\\W\\W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W\\W\\W\\W\\\
    W\\W\\W\\W)/, \"\")\n  string.gsub!(/(?<=\\W\\W\\W\\W\\W\\W\\W\\W\\W", "  max_length\
    \ = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix = \"\"\n  max_length_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.length.times do |i|\n\
    \    string.slice!(0, i)\n    string.slice!(0, i)\n  end\n  string.reverse!\n\
    \  string + string.reverse\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '", "  string.length.times do |i|\n  \
    \  string.slice!(0, i)\n    string.slice!(-i, i)\n    break if string == string.reverse\n\
    \  end\n  string\nend", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.reverse!\n  longest\n\
    end", "  string.gsub(/(?<=\\A|\\z)\\B/, \"\").reverse.sub(/(?<=\\A|\\z)\\B/, \"\
    \") + string\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to make it more efficient. I'm thinking about\
    \ making a hash of all the possible palindromes up to a certain length, and then\
    \ just checking if the input string is a palindrome by checking if the hash has\
    \ a key for the input string. Would that be more efficient?\n<|/ c |>\n<| c |>\n\
    : Yes, that would be more efficient. I'll add that to my answer.\n<|/ c |>\n<|\
    \ c |>\n: I added a solution that is more efficient than my original one.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that is more efficient than my original\
    \ one.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ '", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.gsub(/./) { |c|\
    \ return c if c == c.reverse }\n  string.gsub(/(?<=\\A|\\z)|\\z|(?<=\\z|\\A)/)\
    \ { |c| return c }\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])/, '\\", "  string = string.dup\n  longest\
    \ = find_longest_postfix_palindrome(string)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!(0,\
    \ longest)\n  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string.slice!",
  "  string = string.to_s\n  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest.prepend(string.slice(longest.rindex))\n  longest\nend", "  string =\
    \ string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n \
    \ string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n \
    \ string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub",
  "  string.length.times do |i|\n    string.slice!(0..i-1)\n    string.slice!(0..i-1)\n\
    \  end\n  string.reverse!\n  string\nend", "  string = string.to_s\n  max_length\
    \ = string.length\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = ", "  string\
    \ = string.dup\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice", "  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string = string.to_s\n  longest = find_longest_palindrome(string)\n  longest\
    \ = longest + string.reverse(longest)\n  longest\nend", "  string = string.to_s\n\
    \  max_length = string.size\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < 10 else 10\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < 10 else 10\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < 10 else 10\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < 10 else 10\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < 10 else 10\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < 10 else 10\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < 10 else 10\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length < 10 else 10\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length < 10 else\
    \ 10\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length < ", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n \
    \ string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string.reverse!\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string\nend", "  string = string.to_s\n  max_length\
    \ = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length =\
    \ 0\n  max_length_prefix_postfix_length_length_length_length_length_length = 0\n\
    \  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_", "  string =\
    \ string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n \
    \ string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, '", "  string = string.dup\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice", "  string = string.dup\n\
    \  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/", "  string = string.to_s\n  max_length\
    \ = 0\n  max_length_postfix = nil\n  max_length_postfix_reverse = nil\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0", "  string = string.to_s\n  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0, longest.length))\n\
    \  longest\nend", "  string = string.dup\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice", "  string.gsub(/[^a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }", "  string = string.to_s\n  longest = string.rpartition(string.chars.to_a.reverse.first)\n\
    \  longest = longest.last\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.join\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a.reverse.join(longest)\n\
    \  longest = longest.chars.to_a.reverse.join(longest)\n  longest = longest.chars.to_a",
  "  max_length = find_max_length(string)\n  reversed_string = reverse(string)\n \
    \ reversed_string = reversed_string[0..max_length]\n  reversed_string += string[max_length..-1]\n\
    \  return reversed_string\nend", "  string = string.dup\n  string.gsub!(/([a-z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.downcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.downcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { $1.upcase }\n  string.gsub!(/([A-Z])/)\
    \ { $1.upcase }\n  string.gsub!(/([A-Z])/) { ", "  string = string.dup\n  string.gsub!(/[^a-z]+/,\
    \ \"\")\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  ", "  string\
    \ = string.to_s\n  length = string.length\n  longest = string.chars.reverse.find\
    \ { |c| string[length - c.to_i] == c }\n  longest = longest ? length - longest\
    \ : length\n  string.chars.reverse.insert(longest, string[longest..-1]).join\n\
    end", "  string = string.dup\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/", "  string = string.to_s\n  length\
    \ = string.length\n  max_postfix_length = length\n  max_postfix_index = 0\n  max_postfix_value\
    \ = nil\n  max_postfix_value = string[0, max_postfix_length]\n  max_postfix_index\
    \ = max_postfix_length\n  max_postfix_index = 0\n  max_postfix_value = nil\n \
    \ max_postfix_value = string[0, max_postfix_length]\n  max_postfix_index = max_postfix_length\n\
    \  max_postfix_index = 0\n  max_postfix_value = nil\n  max_postfix_value = string[0,\
    \ max_postfix_length]\n  max_postfix_index = max_postfix_length\n  max_postfix_index\
    \ = 0\n  max_postfix_value = nil\n  max_postfix_value = string[0, max_postfix_length]\n\
    \  max_postfix_index = max_postfix_length\n  max_postfix_index = 0\n  max_postfix_value\
    \ = nil\n  max_postfix_value = string[0, max_postfix_length]\n  max_postfix_index\
    \ = max_postfix_length\n  max_postfix_index = 0\n  max_postfix_value = nil\n \
    \ max_postfix_value = string[0, max_postfix_length]\n  max_postfix_index = max_postfix_length\n\
    \  max_postfix_index = 0\n  max_postfix_value = nil\n  max_postfix_value = string[0,\
    \ max_postfix_length]\n  max_postfix_index = max_postfix_length\n  max_postfix_index\
    \ = 0\n  max_postfix_value = nil\n  max_postfix_value = string[0, max_postfix_length]\n\
    \  max_postfix_index = max_postfix_length\n  max_postfix_index = 0\n  max_postfix_value\
    \ = nil\n  max_postfix_value = string[0, max_postfix_length]\n  max_postfix_index\
    \ = max_postfix_length\n  max_postfix_index = 0\n  max_postfix_value = nil\n \
    \ max_postfix_value = string[0, max_postfix_length]\n  max_postfix_index = max_postfix_length\n\
    \  max_postfix_index = 0\n  max_postfix_value = nil\n  max_postfix_value = string[0,\
    \ max_postfix_length]\n  max_postfix_index = max_postfix_length\n  max_postfix_index\
    \ = 0\n  max_postfix_value = nil\n  max_postfix_value = string[0, max_postfix_length]\n\
    \  max_postfix_index = max_postfix_length\n  max_postfix_index = 0\n  max_postfix_value\
    \ = nil\n  max_postfix_value = string[0, max_postfix_length]\n  max_postfix_index\
    \ = max_postfix_length\n  max_postfix_index = 0\n  max_postfix_value = nil", " \
    \ string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.", "  longest = find_longest_palindrome(string)\n  result = string\
    \ + reverse(string[longest..-1], longest)\n  result\nend", "  string = string.dup\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.g", "  string = string.to_s\n  max_length = string.length\n \
    \ max_length -= 1 if string.length % 2 == 0 # if odd, then add one to make it\
    \ even\n  max_length -= 1 if string.length < 2 # if too short, add one to make\
    \ it longer\n  max_length -= 1 if string.length < 3 # if too short, add one to\
    \ make it longer\n  max_length -= 1 if string.length < 4 # if too short, add one\
    \ to make it longer\n  max_length -= 1 if string.length < 5 # if too short, add\
    \ one to make it longer\n  max_length -= 1 if string.length < 6 # if too short,\
    \ add one to make it longer\n  max_length -= 1 if string.length < 7 # if too short,\
    \ add one to make it longer\n  max_length -= 1 if string.length < 8 # if too short,\
    \ add one to make it longer\n  max_length -= 1 if string.length < 9 # if too short,\
    \ add one to make it longer\n  max_length -= 1 if string.length < 10 # if too\
    \ short, add one to make it longer\n  max_length -= 1 if string.length < 11 #\
    \ if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 12 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 13 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 14 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 15 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 16 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 17 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 18 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 19 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 20 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 21 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 22 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 23 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 24 # if too short, add one to make it longer\n  max_length -= 1 if string.length\
    \ < 25 # if too short, add one to make it longer\n", "  string.gsub(/([a-z])([A-Z])/,\
    \ '\\1\\2').gsub(/([A-Z])([a-z])/, '\\1\\2').gsub(/([a-z])([A-Z])/, '\\1\\2')\n\
    end", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.length.times do\
    \ |i|\n    string.slice!(0, i)\n    string.slice!(0, i)\n  end\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.reverse!\n  string\n\
    end", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(longest.last).last)\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\\
    1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([a-z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([", "  string = string.to_s\n  max_length\
    \ = string.length\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < 10 else 10\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < 10 else 10\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < 10 else 10\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < 10 else 10\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < 10 else 10\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < 10 else 10\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < 10 else 10\n  max_length = max_length if max_length > 0 else 1\n  max_length\
    \ = max_length if max_length < 10 else 10\n  max_length = max_length if max_length\
    \ > 0 else 1\n  max_length = max_length if max_length < 10 else 10\n  max_length\
    \ = max_length if max_length > 0 else 1\n  max_length = max_length if max_length\
    \ < ", "  string.reverse\n  string.insert(0,string[string.length/2,string.length/2,string.length])\n\
    \  string\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\\
    1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])/,\
    \ '\\1')\n  string.gsub!(/([a-z])/, '\\1')\n  string.gsub!(/([A-Z])([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([a-z])/,\
    \ '\\1 \\2 \\3')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3')\n\
    \  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([a-z])/, '\\1 \\2 \\3 \\4')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2 \\3 \\4')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([a-z])/,\
    \ '\\1 \\2 \\3 \\4 \\5')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2 \\3 \\4 \\5')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([a-z])/,\
    \ '\\1 \\2 \\3 \\4 \\5 \\6')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2 \\3 \\4 \\5 \\6')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([a-z])/,\
    \ '\\1 \\2 \\3 \\4 \\5 \\6 \\7')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])",
  "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[a-z]/i,\
    \ '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').gsub(/[^a-z]/i,\
    \ '')\n  string.gsub!(", "  string = string.to_s\n  max_length = string.length\n\
    \  max_length -= 1 if string.length % 2 == 1 \n  max_length -= 1 if string.length\
    \ % 3 == 1 \n  max_length -= 1 if string.length % 5 == 1 \n  max_length -= 1 if\
    \ string.length % 7 == 1 \n  max_length -= 1 if string.length % 11 == 1 \n  max_length\
    \ -= 1 if string.length % 13 == 1 \n  max_length -= 1 if string.length % 17 ==\
    \ 1 \n  max_length -= 1 if string.length % 19 == 1 \n  max_length -= 1 if string.length\
    \ % 23 == 1 \n  max_length -= 1 if string.length % 29 == 1 \n  max_length -= 1\
    \ if string.length % 37 == 1 \n  max_length -= 1 if string.length % 41 == 1 \n\
    \  max_length -= 1 if string.length % 43 == 1 \n  max_length -= 1 if string.length\
    \ % 47 == 1 \n  max_length -= 1 if string.length % 53 == 1 \n  max_length -= 1\
    \ if string.length % 59 == 1 \n  max_length -= 1 if string.length % 61 == 1 \n\
    \  max_length -= 1 if string.length % 67 == 1 \n  max_length -= 1 if string.length\
    \ % 71 == 1 \n  max_length -= 1 if string.length % 73 == 1 \n  max_length -= 1\
    \ if string.length % 79 == 1 \n  max_length -= 1 if string.length % 83 == 1 \n\
    \  max_length -= 1 if string.length % 89 == 1 \n  max_length -= 1 if string.length\
    \ % 97 == 1 \n  max_length -= 1 if string.length % 101 == 1 \n  max_length -=\
    \ 1 if string.length % 103 == 1 \n  max_length -= 1 if string.length % 107 ==\
    \ 1 \n  max_length -= 1 if string.length % 109 == 1 \n  max_length -= 1 if string.length\
    \ % 113 == 1 \n  max_length -= 1 if string.length % 127 == 1 \n  max_length -=\
    \ 1 if string.length % 131 == 1 \n  max_length -= 1 if string.length % 137 ==\
    \ 1 \n  max_length -= 1 if string.length % 139 == 1 \n  max_length -= 1 if string.length\
    \ % 143 == 1 \n  max_length -= 1 if string.length % 147 == 1 \n  max_length -=\
    \ 1 if string.length % 151 == 1 \n  max_length -= 1 if string.length % 157 ==\
    \ 1 \n  max_length -= 1 if string.length % 159 == 1 \n  max_length -= 1 if string.length\
    \ % 163 == 1 \n  max_length -= 1 if string.length % 167 == 1 \n  max_length -=\
    \ 1 if string.length % 171 == 1 \n  max_length -= 1 if string.length % 177 ==\
    \ 1 \n  max_length -= 1 if string.length % 181 == 1 \n  max_length -= 1 if string.length\
    \ % 185 == 1 \n  max_length -= 1 if string.length % 189 == 1 \n  max_length -=\
    \ 1 if string.length % 193 == 1 \n  max_length -= 1 if string.length % 197 ==\
    \ 1 \n  max_length -= 1 if string.length % 201 == 1 \n  max_length -= 1 if string.length\
    \ % 205 == 1 \n  ", "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest.last))\n  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n", "  string.reverse\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!", "  string.length.times do |i|\n   \
    \ string = string.gsub(/./, \"\").reverse\n    break if string == string.gsub(/./,\
    \ \"\")\n  end\n  string + string.gsub(/./, \"\")\nend", "  max_length = 0\n \
    \ max_length_postfix = \"\"\n  max_length_prefix_reverse = \"\"\n  max_length_prefix_reverse_index\
    \ = 0\n  max_length_prefix_reverse_index2 = 0\n  max_length_prefix_reverse_index3\
    \ = 0\n  max_length_prefix_reverse_index4 = 0\n  max_length_prefix_reverse_index5\
    \ = 0\n  max_length_prefix_reverse_index6 = 0\n  max_length_prefix_reverse_index7\
    \ = 0\n  max_length_prefix_reverse_index8 = 0\n  max_length_prefix_reverse_index9\
    \ = 0\n  max_length_prefix_reverse_index10 = 0\n  max_length_prefix_reverse_index11\
    \ = 0\n  max_length_prefix_reverse_index12 = 0\n  max_length_prefix_reverse_index13\
    \ = 0\n  max_length_prefix_reverse_index14 = 0\n  max_length_prefix_reverse_index15\
    \ = 0\n  max_length_prefix_reverse_index16 = 0\n  max_length_prefix_reverse_index17\
    \ = 0\n  max_length_prefix_reverse_index18 = 0\n  max_length_prefix_reverse_index19\
    \ = 0\n  max_length_prefix_reverse_index20 = 0\n  max_length_prefix_reverse_index21\
    \ = 0\n  max_length_prefix_reverse_index22 = 0\n  max_length_prefix_reverse_index23\
    \ = 0\n  max_length_prefix_reverse_index24 = 0\n  max_length_prefix_reverse_index25\
    \ = 0\n  max_length_prefix_reverse_index26 = 0\n  max_length_prefix_reverse_index27\
    \ = 0\n  max_length_prefix_reverse_index28 = 0\n  max_length_prefix_reverse_index29\
    \ = 0\n  max_length_prefix_reverse_index30 = 0\n  max_length_prefix_reverse_index31\
    \ = 0\n  max_length_prefix_reverse_index32 = 0\n  max_length_prefix_reverse_index33\
    \ = 0\n  max_length_prefix_reverse_index34 = 0\n  max_length_prefix_reverse_index35\
    \ = 0\n  max_length_prefix_reverse_index36 = 0\n  max_length_prefix_reverse_index37\
    \ = 0\n  max_length_prefix_reverse_index38 = 0\n  max_length_prefix_reverse_index39\
    \ = 0\n  max_length_prefix_reverse_index40 = 0\n  max_length_prefix_reverse_index41\
    \ = 0\n  max_length_prefix_reverse_index42 = 0\n  max_length_prefix_reverse_index43\
    \ = 0\n  max_length_prefix_reverse_index44 = 0\n  max_length_prefix_reverse_index45\
    \ = 0\n  max_length_prefix_reverse_index46 = 0\n  max_length_prefix_reverse_index47\
    \ = 0\n  max_length_prefix_reverse_index48 = 0\n  max_length_prefix_reverse_index49\
    \ = 0\n  max_length_prefix_reverse_index50 = 0\n  max_length_prefix_reverse_index51\
    \ = 0\n  max_length_prefix_reverse_index52 = 0\n  max_length_prefix_reverse_index53\
    \ = 0\n  max_length_prefix_reverse_index54 = 0\n  max_length_prefix_reverse_index55\
    \ = 0", "  string.length.times do |i|\n    string.slice!(0..i-1)\n    string.slice!(0..i)\n\
    \    break if string == string.reverse\n  end\n  string\nend", "  string = string.dup\n\
    \  string.slice!(0, string.rindex(string.reverse))\n  string.slice!(0, string.rindex(string.reverse))\n\
    \  string\nend", "  string = string.to_s\n  length = string.length\n  max_length\
    \ = length\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n \
    \ max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length.to_i", "  string = string.dup\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'z')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/", "  string = string.to_s\n\
    \  max_length = string.size\n  max_length = max_length if max_length > 0 else\
    \ 1\n  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n  max_length = max_length\
    \ if max_length > 0 else 1\n  max_length = max_length if max_length > 0 else 1\n\
    \  max_length = max_length if max_length > 0 else 1\n", "  string = string.dup\n\
    \  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z",
  "  string = string.to_s\n  longest = find_longest_palindrome(string, 0)\n  longest\
    \ = longest + string[longest.length..-1]\n  longest\nend", "  string = string.dup\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string", "  string.length.times do |i|\n \
    \   string[-i..-1].upcase + string[-i..-1].downcase + string[-i..-1]\n  end\n\
    end", "  string = string.to_s\n  max_length = string.length\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = ", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  ", "  string = string.to_s\n  max_length\
    \ = 0\n  max_length_postfix_length = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_length_length = 0\n  max_length_prefix_postfix_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length = 0\n  max_length_prefix_postfix_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length =\
    \ 0\n  max_length_prefix_postfix_length_length_length_length_length_length = 0\n\
    \  max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n  max_length_prefix_postfix_length_length_length_length_length_length_",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n", "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice", "  string.gsub(/([a-z])([A-Z])/,\
    \ '\\1\\2').gsub(/([A-Z])([a-z])/, '\\1\\2').gsub(/([a-z])([A-Z])/, '\\1\\2')\n\
    end", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
