name: HumanEval_53_add
language: rb
prompt: "# Add two numbers x and y\n# >>> add.call(2, 3)\n# 5\n# >>> add.call(5, 7)\n\
  # 12\ndef add(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
  \    candidate = method(:add)\n    assert_equal(1, candidate.call(0, 1))\n    assert_equal(1,\
  \ candidate.call(1, 0))\n    assert_equal(5, candidate.call(2, 3))\n    assert_equal(12,\
  \ candidate.call(5, 7))\n    assert_equal(12, candidate.call(7, 5))\n  end\nend\n"
completions: ["  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x\
    \ + y\nend", "  return x + y\nend", "  return x + y\nend", "  x + y\nend", " \
    \ return x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  return\
    \ x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\nend",
  "  x + y\nend", "  return x + y\nend", "  x + y\nend", "  x + y\nend", "  x + y\n\
    end", "  x + y\nend", "  x + y\nend", "  return x + y\nend", "  return x + y\n\
    end", "  x + y\nend", "  return x + y\nend", "  x + y\nend", "  x + y\nend", " \
    \ return x + y\nend", "  x + y\nend", "  x + y\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
