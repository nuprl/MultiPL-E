name: HumanEval_102_choose_num
language: rb
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# >>> choose_num.call(12,\
  \ 15)\n# 14\n# >>> choose_num.call(13, 12)\n# -1\ndef choose_num(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n\
  \    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n\
  \    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33,\
  \ 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28,\
  \ candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1,\
  \ candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\n\
  end\n"
completions: ["  x = x.to_i\n  y = y.to_i\n  if x > y\n    x, y = y, x\n  while x\
    \ <= y\n    x += 1\n    if x % 2 == 0\n      return x\n  end\n  return -1\nend",
  "  x = x.to_i\n  y = y.to_i\n  \n  while x <= y\n    if x % 2 == 0\n      return\
    \ x\n    x += 1\n  end\n  \n  -1\nend", "  x = x.to_i\n  y = y.to_i\n  \n  if\
    \ x > y\n    x, y = y, x\n  end\n  \n  while x <= y\n    if x % 2 == 0\n     \
    \ return x\n    end\n    x += 1\n  end\n  \n  return -1\nend", "  if x > y\n \
    \   x, y = y, x\n  \n  while x <= y\n    x += 1\n    \n    if x % 2 == 0\n   \
    \   return x\n    \n  return -1\nend", "  x = x.to_i\n  y = y.to_i\n  \n  if x\
    \ > y\n    x, y = y, x\n  end\n  \n  while x <= y\n    if x % 2 == 0\n      return\
    \ x\n    end\n    \n    x += 1\n  end\n  \n  return -1\nend", "  x = x.to_i\n\
    \  y = y.to_i\n  \n  if x > y\n    x, y = y, x\n  end\n  \n  while x <= y\n  \
    \  x += 1\n    if x % 2 == 0\n      return x\n    end\n  end\n  \n  return -1\n\
    end\n</cell>\n<cell>\nchoose_num.call(12, 15)\n</cell>\n<text>\nThe function choose_num\
    \ takes two positive numbers x and y and returns the biggest even integer number\
    \ that is in the range [x, y] inclusive. If there's no such number, then the function\
    \ should return -1.", "  x = x.to_i\n  y = y.to_i\n  return x if x > y || x ==\
    \ y || x == y - 1 || (y == x - 1 && x % 2 == 0) || y == x + 1 || (y == x - 1 &&\
    \ x % 2 == 1) ? x : -1\nend", "  x = x.to_i\n  y = y.to_i\n  \n  if x > y\n  \
    \  x, y = y, x\n  end\n  \n  while x <= y\n    x += 1\n    if x % 2 == 0\n   \
    \   return x\n    end\n  end\n  \n  return -1\nend", "  x = x.to_i\n  y = y.to_i\n\
    \  if x > y\n    x, y = y, x\n  while x <= y\n    x += 1\n    if x % 2 == 0\n\
    \      return x\n  end\n  return -1\nend", "  x = x.to_i\n  y = y.to_i\n  if x\
    \ > y\n    x, y = y, x\n  while x <= y\n    x += 1\n    if x % 2 == 0\n      return\
    \ x\n  end\n  return -1\nend", "  x = x.to_i\n  y = y.to_i\n  \n  if x > y\n \
    \   x, y = y, x\n  end\n  \n  while x <= y\n    if x % 2 == 0\n      return x\n\
    \    end\n    \n    x += 1\n  end\n  \n  return -1\nend", "  even = x % 2 == 0\n\
    \  even = even ? x : y\n  even = even ? even : -1\nend", "  x = x.to_i\n  y =\
    \ y.to_i\n  if x > y\n    x, y = y, x\n  while x <= y\n    x += 1\n    return\
    \ x if x % 2 == 0 then x else -1\n  end\n  -1\nend\n</code>\n<|/ a tags=ruby |>\n\
    <| c |>\nThis doesn't work if you call it with `choose_num.call(12, 15)`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  x = x.to_i\n  y = y.to_i\n  return x if x > y || x == y || x == 0 || y == 0 ||\
    \ y == -1 ? -1 : x + y % 2\nend", "  x = x.to_i\n  y = y.to_i\n  \n  while x <=\
    \ y\n    \n    biggest = x if x % 2 == 0 else x + 1\n    \n    if biggest > y\n\
    \      return -1\n    \n    x += 1\n  end\n  \n  x\nend\n</cell>\n<cell>\nchoose_num.call(12,\
    \ 15)\n</cell>\n<cell>\nchoose_num.call(13, 12)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 13)\n</cell>\n<cell>\nchoose_num.call(13, 14)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 15)\n</cell>\n<cell>\nchoose_num.call(13, 16)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 17)\n</cell>\n<cell>\nchoose_num.call(13, 18)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 19)\n</cell>\n<cell>\nchoose_num.call(13, 20)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 21)\n</cell>\n<cell>\nchoose_num.call(13, 22)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 23)\n</cell>\n<cell>\nchoose_num.call(13, 24)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 25)\n</cell>\n<cell>\nchoose_num.call(13, 26)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 27)\n</cell>\n<cell>\nchoose_num.call(13, 28)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 29)\n</cell>\n<cell>\nchoose_num.call(13, 30)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 31)\n</cell>\n<cell>\nchoose_num.call(13, 32)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 33)\n</cell>\n<cell>\nchoose_num.call(13, 34)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 35)\n</cell>\n<cell>\nchoose_num.call(13, 36)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 37)\n</cell>\n<cell>\nchoose_num.call(13, 38)\n</cell>\n<cell>\nchoose_num.call(13,\
    \ 39)\n</cell>", "  x = x.to_i\n  y = y.to_i\n  if x > y\n    x, y = y, x\n  while\
    \ x <= y\n    x += 1\n    if x % 2 == 0\n      return x\n  end\n  return -1\n\
    end", "  if x > y\n    x, y = y, x\n  \n  while x <= y\n    x += 1\n    \n   \
    \ if x % 2 == 0\n      return x\n    end\n  end\n  \n  return -1\nend", "  x =\
    \ x.to_i\n  y = y.to_i\n  \n  if x > y\n    x, y = y, x\n  end\n  \n  while x\
    \ <= y\n    if x % 2 == 0\n      return x\n    end\n    x += 1\n  end\n  \n  return\
    \ -1\nend", "  x = x.to_i\n  y = y.to_i\n  if x > y\n    x, y = y, x\n  while\
    \ x <= y\n    x += 1\n    if x % 2 == 0\n      return x\n  end\n  return -1\n\
    end", "  x = x.to_i\n  y = y.to_i\n  \n  if x > y\n    x, y = y, x\n  end\n  \n\
    \  while x <= y\n    if x % 2 == 0\n      return x\n    end\n    \n    x += 1\n\
    \  end\n  \n  return -1\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
