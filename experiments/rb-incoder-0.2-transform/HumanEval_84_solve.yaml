name: HumanEval_84_solve
language: rb
prompt: "# Given a positive integer N, return the total sum of its digits in binary.\n\
  # Example\n# >>> solve.call(1000)\n# \"1\"\n# >>> solve.call(150)\n# \"110\"\n#\
  \ >>> solve.call(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0\
  \ \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\ndef solve(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n\
  \    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n\
  \    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n\
  \  end\nend\n"
completions: ["  result = ''\n  while n > 0\n    digit = n % 10\n    result += \"\
    #{digit}\"\n    n /= 10\n  end\n  result\nend", "  n.to_s(2).reverse.gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(", "  s = ''\n  while n > 0\n    s <<\
    \ (n % 2)\n    n /= 2\n  end\n  s\nend", "  result = ''\n  while n > 0\n    result\
    \ += (n % 2) + '0'\n    n /= 2\n  end\n  result\nend", "  binary = n.to_s(2)\n\
    \  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_i(2) }\n  binary.reverse!\n\
    \  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../)\
    \ { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n\
    \  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n\
    \  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../)\
    \ { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n\
    \  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n\
    \  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../)\
    \ { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n\
    \  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n\
    \  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../)\
    \ { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n\
    \  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n\
    \  binary.gsub!(/../) { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../)\
    \ { |s| s.to_s(2) }\n  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n\
    \  binary.reverse!\n  binary.gsub!(/../) { |s| s.to_s(2) }\n", "  n.to_s.reverse.scan(/../).map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).reverse.gsub(/../) { |x| x.to_i(2) }.reverse\nend", "  binary\
    \ = n.to_s(2)\n  binary.reverse!\n  binary.gsub!(/0/, '1')\n  binary.gsub!(/1/,\
    \ '0')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.", "  s = n.to_s(2)\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n\
    \  s.reverse!\n  s.reverse!\n  s.reverse!\n  s.reverse!\n", "  n.to_s(2).reverse.gsub(/../)\
    \ { |s| s.to_i(2) }.reverse\nend", "  s = \"\"\n  while n > 0\n    s << n % 2\n\
    \    n /= 2\n  end\n  s\nend", "  s = ''\n  while n > 0\n    s, n = s.to_s + n.to_s(2),\
    \ n / 2\n  end\n  s\nend", "  n.to_s.reverse.split(//).map { |i| i.to_i(2) }.inject(:+)\n\
    end", "  sum = 0\n  while n > 0\n    sum += n % 2\n    n /= 2\n  end\n  sum.to_s(2)\n\
    end", "  n.to_s(2).reverse.gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(",
  "  result = ''\n  while n > 0\n    digit = n % 10\n    result << digit\n    n /=\
    \ 10\n  end\n  result\nend", "  n.to_s(2).reverse.gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(", "  n.to_s(2).reverse.gsub(/../) { |s| s.to_i(2) }.reverse\n\
    end", "  s = ''\n  while n > 0\n    s = s.to_s + n.to_s(2)\n    n -= 1\n  end\n\
    \  s\nend", "  n.to_s(2).reverse.gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/,\
    \ '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\\
    1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\2').gsub(/(.)(.)/, '\\1\\\
    2').gsub("]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
