name: HumanEval_148_bf
language: rb
prompt: "# There are eight planets in our solar system: the closerst to the Sun \n\
  # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus,\
  \ Neptune.\n# Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n# The function should return a tuple containing all planets whose orbits\
  \ are \n# located between the orbit of planet1 and the orbit of planet2, sorted\
  \ by \n# the proximity to the sun. \n# The function should return an empty tuple\
  \ if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf.call(\"\
  Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf.call(\"Earth\", \"\
  Mercury\")\n# \"Venus\"\n# >>> bf.call(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\ndef bf(planet1, planet2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bf\n\
  \    candidate = method(:bf)\n    assert_equal([\"Saturn\", \"Uranus\"], candidate.call(\"\
  Jupiter\", \"Neptune\"))\n    assert_equal([\"Venus\"], candidate.call(\"Earth\"\
  , \"Mercury\"))\n    assert_equal([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
  \ \"Saturn\"], candidate.call(\"Mercury\", \"Uranus\"))\n    assert_equal([\"Earth\"\
  , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], candidate.call(\"Neptune\", \"\
  Venus\"))\n    assert_equal([], candidate.call(\"Earth\", \"Earth\"))\n    assert_equal([],\
  \ candidate.call(\"Mars\", \"Earth\"))\n    assert_equal([], candidate.call(\"Jupiter\"\
  , \"Makemake\"))\n  end\nend\n"
completions: ["  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 =\
    \ planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"].include?(planet1)\n\
    \  planet2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"].include?(planet2)\n  if planet1 && planet2\n    orbit1\
    \ = orbit(planet1)\n    orbit2 = orbit(planet2)\n    orbit1.zip(orbit2).sort_by\
    \ { |orbit1, orbit2| orbit1.distance_to(orbit2) }\n  elsif planet1\n    orbit1\
    \ = orbit(planet1)\n    orbit1.sort_by { |orbit1| orbit1.distance_to(sun) }\n\
    \  elsif planet2\n    orbit2 = orbit(planet2)\n    orbit2.sort_by { |orbit2| orbit2.distance_to(sun)\
    \ }\n  else\n    []\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nThanks so much for this! I really appreciate it. I was able to get it\
    \ to work. One thing I noticed is that when I run it I get this error `NoMethodError:\
    \ undefined method 'distance_to' for #<Orbit:0x0000000514a1d8>`. I looked up this\
    \ error and apparently it's because I didn't have `distance_to` defined in my\
    \ `orbit` class. I added that in and now it works. Thanks again!\n<|/ c |>\n<|\
    \ c |>\nAh yes, I forgot to add that method. Thanks for pointing that out. I've\
    \ updated my answer with the new method.\n<|/ c |>\n<| c |>\nI added the distance_to\
    \ method and now it works. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^a-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Z]/, \"\")\n  planet1 = planet1.gsub(/[^0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  if planet1 == nil\n    return []\n\
    \  if planet2 == nil\n    return []\n  sun = Planet.find_by_name(\"sun\")\n  sun_planets\
    \ = Planet.find_all_by_name(\"sun\").map(&:name)\n  sun_planets.each do |sun_planet|\n\
    \    sun_planet = sun_planet.to_sym\n    sun_planet = Planet.find_by_name(sun_planet)\n\
    \    if sun_planet == nil\n      return []\n    end\n  end\n  planet1_orbit =\
    \ planet1.orbit\n  planet2_orbit = planet2.orbit\n  planet1_orbit.each do |planet1_orbit|\n\
    \    planet1_orbit = planet1_orbit.to_sym\n    planet1_orbit = Planet.find_by_name(planet1_orbit)\n\
    \    if planet1_orbit == nil\n      return []\n    end\n  end\n  planet2_orbit.each\
    \ do |planet2_orbit|\n    planet2_orbit = planet2_orbit.to_sym\n    planet2_orbit\
    \ = Planet.find_by_name(planet2_orbit)\n    if planet2_orbit == nil\n      return\
    \ []\n    end\n  end\n  sun_planets.each do |sun_planet|\n    sun_planet = sun_planet.to_sym\n\
    \    sun_planet = Planet.find_by_name(sun_planet)\n    if sun_planet == nil\n\
    \      return []\n    end\n  end\n  sun_planets.each do |sun_planet|\n    sun_planet\
    \ = sun_planet.to_sym\n    sun_planet = Planet.find_by_name(sun_planet)\n    if\
    \ sun_planet == nil\n      return []\n    end\n  end\n  sun_planets.each do |sun_planet|\n\
    \    sun_planet = sun_planet.to_sym\n    sun_planet = Planet.find_by_name(sun_planet)\n\
    \    if sun_planet == nil\n      return []\n    end\n  end\n  sun_planets.each\
    \ do |", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planets =\
    \ planet1 + planet2\n  planets.each do |planet|\n    planet = planet.upcase\n\
    \    planet = planet.gsub(\" \", \"_\")\n    planet = planet.gsub(/[^A-Z]/, \"\
    \")\n    planet = planet.gsub(/[^a-z]/, \"\")\n    planet = planet.gsub(/[^0-9]/,\
    \ \"\")\n    planet = planet.gsub(/[^A-Za-z]/, \"\")\n    planet = planet.gsub(/[^0-9A-Za-z]/,\
    \ \"\")\n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_]/,\
    \ \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  planet1_orbit = planet1.orbit(planet2)\n\
    \  planet2_orbit = planet2.orbit(planet1)\n  \n  planet1_orbit.each do |planet|\n\
    \    planet2_orbit.each do |planet|\n      if planet == planet1\n        planet1_orbit.delete(planet)\n\
    \      elsif planet == planet2\n        planet2_orbit.delete(planet)\n      end\n\
    \    end\n  end\n  \n  planet1_orbit.sort_by{|planet| planet.distance_to_sun(planet2)}\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nI appreciate\
    \ your efforts, but I already solved it myself. I posted my solution. Thanks anyway!\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but I already solved it myself.\
    \ I posted my solution. Thanks anyway!\n<|/ c |>\n<| c |>\nI appreciate your efforts,\
    \ but I already solved it myself. I posted my solution. Thanks anyway!\n<|/ c\
    \ |>\n<| a dscore=0 |>\nI solved it myself. I posted my solution. Thanks anyway!\n\
    <code>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1\
    \ == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n  planet2\
    \ = Planet.find_by_name(planet2)\n  sun = Planet.find_by_name(\"sun\")\n  orbit1\
    \ = planet1.orbit(sun)\n  orbit2 = planet2.orbit(sun)\n  orbits = orbit1.orbits\
    \ + orbit2.orbits\n  orbits.sort!\n  orbits.reverse!\n  orbits.each do |orbit|\n\
    \    if orbit.distance < sun.length\n      return [orbit.name]\n    end\n  end\n\
    \  return []\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help! I\
    \ really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! I hope it helps you!\n\
    <|/ c |>\n<| c |>\nI added some comments to help you understand how it works.\
    \ I hope it helps!\n<|/ c |>\n<| c |>\nThanks so much! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nNo problem! I hope it helps you!\n<|/ c |>\n<| a |>\n<code>",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n\
    \    return []\n  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n\
    \  orbit1.each do |planet|\n    orbit2.each do |planet2|\n      next if planet1\
    \ == planet2\n      next if planet == planet2\n      next if planet == planet1\n\
    \      next if planet == planet\n      next if planet == planet1.capitalize\n\
    \      next if planet == planet2.capitalize\n      next if planet == planet1.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize\n      next if planet ==\
    \ planet1.capitalize.capitalize.capitalize\n      next if planet == planet2.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.gsub(/[\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\W]/, \"\")\n  planet1\
    \ = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\W_]/, \"\")\n \
    \ planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\W_]/, \"\
    \")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\W_]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1.length != 3 or planet2.length != 3\n\
    \    return []\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/, ",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  planets = Array.new\n\
    \  \n  if planet1 == planet2\n    planets << planet1\n  else\n    planets << planet1\n\
    \    planets << planet2\n  end\n  \n  planets.each do |planet|\n    planet = planet.upcase\n\
    \    \n    if planet == \"SUN\"\n      planets.delete_at(planets.index(planet))\n\
    \    else\n      planets.delete_at(planets.index(planet))\n      planets.delete_at(planets.index(planet))\n\
    \    end\n  end\n  \n  planets.sort!\n  \n  planets.each do |planet|\n    planet\
    \ = planet.upcase\n    \n    if planet == \"SUN\"\n      planets.delete_at(planets.index(planet))\n\
    \    else\n      planets.delete_at(planets.index(planet))\n      planets.delete_at(planets.index(planet))\n\
    \    end\n  end\n  \n  planets.sort!\n  \n  return planets\nend", "  planet1 =\
    \ planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n  \
    \  return []\n  \n  planet1_orbits = planet1_orbits(planet1)\n  planet2_orbits\
    \ = planet2_orbits(planet2)\n  \n  orbits = planet1_orbits + planet2_orbits\n\
    \  \n  orbits.sort! { |a, b| a.distance <=> b.distance }\n  \n  orbits.map { |orbit|\
    \ orbit.name }\nend", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:space:]]/, \"\")\n  planet2 = planet2.gsub(/[[:space:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/, \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/, \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/, \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:space:]]/, \"\")\n  planet2 = planet2.gsub(/[[:space:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/, \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/, \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/, \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do\
    \ |planet|\n    orbit2.each do |planet|\n      if planet == planet1\n        next\
    \ if planet == planet2\n      elsif planet == planet2\n        next if planet\
    \ == planet1\n      end\n      \n      distance = distance_to(planet, planet1)\n\
    \      \n      if distance < 1\n        next if distance < 0\n      end\n    \
    \  \n      distance = distance_to(planet, planet2)\n      \n      if distance\
    \ < 1\n        next if distance < 0\n      end\n      \n      distance\n    end\n\
    \  end\n  \n  orbit1.sort\nend", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1 == planet2\n    return []\n  planet1_orbits = planet1_orbits[planet1]\n\
    \  planet2_orbits = planet2_orbits[planet2]\n  orbits = planet1_orbits + planet2_orbits\n\
    \  orbits.sort!\n  orbits.reverse!\n  orbits.each do |orbit|\n    if orbit.distance\
    \ < sun_distance\n      return [orbit.name]\n    end\n  end\n  return []\nend\n\
    </code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI appreciate your help and your time.\
    \ I tried your solution and it works great. Thank you for taking the time to help\
    \ me!\n<|/ c |>\n<| c |>\nYou're welcome! If this answer solved your problem,\
    \ please consider marking it as accepted by clicking the check mark next to it.\n\
    <|/ c |>\n<| a dscore=0 |>\nI wrote a solution that is similar to your original\
    \ solution, but I used the distance formula to find the distance between the planets.\
    \ I used the distance formula to find the distance between the planets because\
    \ I wanted to avoid having to calculate the distance between the planets twice.\
    \ \n<code>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit = planet2.orbit(planet1)\n\
    \  planet1_sun = planet1.orbit(\"Sun\")\n  planet2_sun = planet2.orbit(\"Sun\"\
    )\n  planet1_sun_distance = planet1_sun.distance_to(planet2_sun)\n  planet2_sun_distance\
    \ = planet2_sun.distance_to(planet1_sun)\n  planet1_orbits_distance = planet1_orbit.distance_to(planet2_orbit)\n\
    \  planet2_orbits_distance = planet2_orbit.distance_to(planet1_orbit)\n  \n  if\
    \ planet1_sun_distance < planet2_sun_distance\n    planet1_orbits_distance\n \
    \ elsif planet2_sun_distance < planet1_sun_distance\n    planet2_orbits_distance\n\
    \  else\n    planet1_orbits_distance\n  end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI appreciate your efforts, but I cannot use any gems or libraries. I\
    \ must write my own code.\n<|/ c |>\n<| c |>\nI added my own code. Thank you for\
    \ your help.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote this code, but\
    \ I do not know if it is the best way to solve the problem. \n<code>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n \
    \ orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  \n  if\
    \ orbit1.nil? || orbit2.nil?\n    return []\n  end\n  \n  distance = orbit1.distance\
    \ - orbit2.distance\n  \n  if distance < 0\n    distance = distance * -1\n  end\n\
    \  \n  distance.abs\nend\n</cell>\n<cell>", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  if planet1.empty? or planet2.empty?\n    return []\n \
    \ else\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1\
    \ = Planet.find_by_name(planet1)\n    planet2 = Planet.find_by_name(planet2)\n\
    \    if planet1.nil? or planet2.nil?\n      return []\n    else\n      planet1_orbit\
    \ = planet1.orbit\n      planet2_orbit = planet2.orbit\n      planet1_radius =\
    \ planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n\
    \  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  \n  orbit1 = orbits[planet1]\n  orbit2 = orbits[planet2]\n\
    \  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs\n  \n  orbit1[:] <- (orbit1[:]\
    \ - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - sun[:]).abs \n  \n  orbit1[:] <- (", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.gsub(/[\\s\\W]/, \"\")\n  planet2 =\
    \ planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n\
    \  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\s\\\
    W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  plan", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  orbit1 = orbit(planet1)\n  orbit2 =\
    \ orbit(planet2)\n  sun = planets.at(\"Sun\")\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(",
  "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planet1 = planet1.downcase\n\
    \    planet2 = planet2.downcase\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = ", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  planets = Array.new\n  \n  planets.push planet1\n  planets.push\
    \ planet2\n  \n  planets.each do |planet|\n    \n    planet1 = planet.upcase\n\
    \    planet2 = planet.upcase\n    \n    planet1 = planet1.to_sym\n    planet2\
    \ = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  planet1_orbit\
    \ = planet1.orbit(planet2)\n  planet2_orbit = planet2.orbit(planet1)\n  \n  planet1_orbit.each\
    \ do |planet|\n    planet2_orbit.each do |planet2|\n      \n      if planet ==\
    \ planet2\n        puts planet\n      end\n    end\n  end\nend\n</code>\n<|/ q\
    \ dscore=0 |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your\
    \ question?\n<|/ c |>\n<| c |>\nPlease read \"[ask]\" including the linked pages,\
    \ and \"[mcve]\".\n<|/ c |>\n<| c |>\nPlease read \"[ask]\" including the linked\
    \ pages, and \"[mcve]\".\n<|/ c |>\n<| c |>\nPlease read \"[ask]\" including the\
    \ linked pages, and \"[mcve]\".\n<|/ c |>\n<| a dscore=1 |>\nI believe this is\
    \ what you are looking for:\n<code>", "    planet1 = planet1.upcase\n    planet2\
    \ = planet2.upcase\n    planet1 = planet1.downcase\n    planet2 = planet2.downcase\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    if\
    \ planet1 == planet2\n        return ()\n    \n    planet1 = Planet.find_by_name(planet1)\n\
    \    planet2 = Planet.find_by_name(planet2)\n    \n    if planet1 == nil\n   \
    \     return ()\n    \n    if planet2 == nil\n        return ()\n    \n    sun\
    \ = Planet.find_by_name(\"Sun\")\n    \n    orbit1 = sun.orbit(planet1)\n    orbit2\
    \ = sun.orbit(planet2)\n    \n    orbit1.each do |planet|\n        orbit2.each\
    \ do |planet2|\n            distance = planet.distance_to(planet2)\n         \
    \   if distance < 1\n                return [planet, planet2]\n            end\n\
    \        end\n    end\n    \n    return ()\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = ", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do\
    \ |planet|\n    orbit2.each do |planet|\n      if planet == planet1\n        next\
    \ if planet == planet2\n        \n        distance = distance_between(planet,\
    \ planet2)\n        \n        if distance < 1\n          return [planet]\n   \
    \     end\n      end\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.g", " \
    \ planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do\
    \ |planet|\n    orbit2.each do |planet|\n      if planet == planet1\n        next\
    \ if planet == planet2\n      elsif planet == planet2\n        next if planet\
    \ == planet1\n      end\n      \n      distance = distance_to(planet, planet1)\n\
    \      \n      if distance < 0\n        distance = distance * -1\n      end\n\
    \      \n      if distance < 0\n        distance = -distance\n      end\n    \
    \  \n      if distance < 0\n        distance = -distance\n      end\n      \n\
    \      if distance < 0\n        distance = -distance\n      end\n      \n    \
    \  if distance < 0\n        distance = -distance\n      end\n      \n      if\
    \ distance < 0\n        distance = -distance\n      end\n      \n      if distance\
    \ < 0\n        distance = -distance\n      end\n      \n      if distance < 0\n\
    \        distance = -distance\n      end\n      \n      if distance < 0\n    \
    \    distance = -distance\n      end\n      \n      if distance < 0\n        distance\
    \ = -distance\n      end\n      \n      if distance < 0\n        distance = -distance\n\
    \      end\n      \n      if distance < 0\n        distance = -distance\n    \
    \  end\n      \n      if distance < 0\n        distance = -distance\n      end\n\
    \      \n      if distance < 0\n        distance = -distance\n      end\n    \
    \  \n      if distance < 0\n        distance = -distance\n      end\n      \n\
    \      if distance < 0\n        distance = -distance\n      end\n      \n    \
    \  if distance < 0\n        distance = -distance\n      end\n      \n      if\
    \ distance < 0\n        distance = -distance\n      end\n      \n      if distance\
    \ < 0\n        distance = -distance\n      end\n      \n      if distance < 0\n\
    \        distance = -distance\n      end\n      \n      if distance < 0\n    \
    \    distance = -distance\n      end\n      \n      if distance < 0\n        distance\
    \ = -distance\n      end\n      \n      if distance < 0\n        distance = -distance\n\
    \      end\n      \n      if distance < 0\n        distance = -distance\n    \
    \  end\n      ", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = Planet.find_by_name(planet1)\n    planet2 = Planet.find_by_name(planet2)\n\
    \    \n    orbit1 = planet1.orbit(planet2)\n    orbit2 = planet2.orbit(planet1)\n\
    \    \n    orbit1.each do |orbit|\n        orbit2 = orbit.orbit(planet2)\n   \
    \     orbit2.each do |orbit|\n            orbit.each do |orbit|\n            \
    \    puts orbit.name\n            end\n        end\n    end\n    \n    orbit1.each\
    \ do |orbit|\n        orbit2 = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n\
    \            orbit.each do |orbit|\n                puts orbit.name\n        \
    \    end\n        end\n    end\n    \n    orbit1.each do |orbit|\n        orbit2\
    \ = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n            orbit.each\
    \ do |orbit|\n                puts orbit.name\n            end\n        end\n\
    \    end\n    \n    orbit1.each do |orbit|\n        orbit2 = orbit.orbit(planet2)\n\
    \        orbit2.each do |orbit|\n            orbit.each do |orbit|\n         \
    \       puts orbit.name\n            end\n        end\n    end\n    \n    orbit1.each\
    \ do |orbit|\n        orbit2 = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n\
    \            orbit.each do |orbit|\n                puts orbit.name\n        \
    \    end\n        end\n    end\n    \n    orbit1.each do |orbit|\n        orbit2\
    \ = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n            orbit.each\
    \ do |orbit|\n                puts orbit.name\n            end\n        end\n\
    \    end\n    \n    orbit1.each do |orbit|\n        orbit2 = orbit.orbit(planet2)\n\
    \        orbit2.each do |orbit|\n            orbit.each do |orbit|\n         \
    \       puts orbit.name\n            end\n        end\n    end\n    \n    orbit1.each\
    \ do |orbit|\n        orbit2 = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n\
    \            orbit.each do |orbit|\n                puts orbit.name\n        \
    \    end\n        end\n    end\n    \n    orbit1.each do |orbit|\n        orbit2\
    \ = orbit.orbit", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:digit:]]/, \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  if planet1 == planet2\n\
    \    return ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n \
    \ \n  planet1_orbit = planet1_orbits[planet1]\n  planet2_orbit = planet2_orbits[planet2]\n\
    \  \n  orbits = planet1_orbit + planet2_orbit\n  \n  orbits.sort!\n  \n  orbits.each\
    \ do |orbit|\n    \n    if planet1_orbit == orbit\n      \n      if planet2_orbit\
    \ == orbit\n        \n        if planet1_orbit == planet2_orbit\n          \n\
    \          return [planet1, planet2]\n        end\n      end\n    end\n  end\n\
    \  \n  return []\nend\n</cell>\n<cell>", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n \
    \ planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if\
    \ planet1.length != 3 || planet2.length != 3\n    return []\n  \n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  \n  orbit1.each do |planet|\n    orbit2.each do |planet|\n      \n      if\
    \ planet == planet1\n        \n        if planet == planet2\n          return\
    \ [planet]\n        end\n        \n        distance = orbit1.distance(planet)\n\
    \        \n        if distance < orbit2.distance(planet)\n          return [planet]\n\
    \        end\n      \n      elsif planet == planet2\n        \n        if planet\
    \ == planet1\n          return [planet]\n        end\n        \n        distance\
    \ = orbit2.distance(planet)\n        \n        if distance < orbit1.distance(planet)\n\
    \          return [planet]\n        end\n      end\n    end\n  end\n  \n  return\
    \ []\nend\n</cell>\n<cell>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  if planet1.length != 3 || planet2.length != 3\n    return []\n  planet1\
    \ = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\"\
    )\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, ",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  sun_distance = sun.distance_to(planet1)\n\
    \  sun_distance = sun_distance.round(2)\n  sun_distance = sun_distance.to_s\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance\
    \ = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n\
    \  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance\
    \ = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n\
    \  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance\
    \ = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n\
    \  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n\
    \  sun", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    \n \
    \   if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1_orbit = planet1.orbit(planet2)\n\
    \    planet2_orbit = planet2.orbit(planet1)\n    \n    planet1_distance = planet1_orbit.distance_to(planet2)\n\
    \    planet2_distance = planet2_orbit.distance_to(planet1)\n    \n    planet1_orbit.distance_to(planet2)\n\
    \    planet2_orbit.distance_to(planet1)\n    \n    if planet1_distance < planet2_distance\n\
    \        return planet1_orbit.sort_by(&:distance_to(planet2))\n    else\n    \
    \    return planet2_orbit.sort_by(&:distance_to(planet1))\n    end\nend\n</cell>\n\
    <cell>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\"\
    )\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  if planet1.length != planet2.length\n\
    \    return []\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.g",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    planets = []\n  elsif planet1.include? \"mercury\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"venus\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"earth\"\n    planets = [planet1]\n  elsif planet1.include? \"mars\"\n    planets\
    \ = [planet1]\n  elsif planet1.include? \"jupiter\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"saturn\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"uranus\"\n    planets = [planet1]\n  elsif planet1.include? \"neptune\"\n\
    \    planets = [planet1]\n  elsif planet1.include? \"pluto\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"mars\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"jupiter\"\n    planets = [planet1]\n  elsif planet1.include? \"saturn\"\n\
    \    planets = [planet1]\n  elsif planet1.include? \"uranus\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"neptune\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"pluto\"\n    planets = [planet1]\n  elsif planet1.include? \"mars\"\n    planets\
    \ = [planet1]\n  elsif planet1.include? \"jupiter\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"saturn\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"uranus\"\n    planets = [planet1]\n  elsif planet1.include? \"neptune\"\n\
    \    planets = [planet1]\n  elsif planet1.include? \"pluto\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"mars\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"j", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2\
    \ = sun.orbit(planet2)\n  \n  planets = []\n  \n  while orbit1 != nil and orbit2\
    \ != nil\n    if orbit1.distance < orbit2.distance\n      planets << orbit1.planet\n\
    \      orbit1 = sun.orbit(planet1)\n    else\n      planets << orbit2.planet\n\
    \      orbit2 = sun.orbit(planet2)\n    end\n  end\n  \n  planets << orbit1.planet\n\
    \  planets << orbit2.planet\n  \n  planets.sort!\n  \n  return planets\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for your answer! I tried to run your code but\
    \ I'm getting this error `undefined method 'orbit' for Sun:Class (NoMethodError)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to include the full code I tested with.\
    \ Let me know if that works for you.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I tried to run your code but I'm getting this error `undefined method 'orbit'\
    \ for Sun:Class (NoMethodError)`\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ the full code I tested with. Let me know if that works for you.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I tried to run your code but I'm getting this\
    \ error `undefined method 'orbit' for Sun:Class (NoMethodError)`\n<|/ c |>\n<|\
    \ a dscore=0 |>\nI wrote a ruby gem called orbital which does exactly what you\
    \ are looking for. \n<code>\nrequire 'orbital'", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  sun = Planet.find_by_name(\"sun\"\
    )\n  orbit1 = planet1.orbit(sun)\n  orbit2 = planet2.orbit(sun)\n  orbits = orbit1.orbit\
    \ + orbit2.orbit\n  orbits = orbits.sort_by { |orbit| orbit.distance }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance <= 1.5 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.8 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.2 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.1 }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance <= 0.05 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.01 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.005 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.001 }\n \
    \ orbits = orbits.select { |orbit| orbit.distance <= 0.0005 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.0001 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.00005 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.00001 }\n\
    \  orbits = orbits.select { |orbit| orbit.distance <= 0.000005 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.000001 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.0000005 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.0000001\
    \ }\n  orbits = orbits.select { |orbit| orbit.distance <= 0.00000005 }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance >= 0.00000001 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance <= 0.000000005 }\n  orbits = orbits.select { |orbit|\
    \ orbit.distance >= 0.000000001 }\n  orbits = orbits.", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n \
    \ planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\s+/,\
    \ \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.g", " \
    \ planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/, \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/, \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/, \"\")\n  planet1 = planet1.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/, \"\")\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/, \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/, \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/, ", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = Planet[planet1]\n  planet2 = Planet[planet2]\n\
    \  sun = Planet[\"Sun\"]\n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  orbits = orbit1.orbit + orbit2.orbit\n  orbits = orbits.sort_by { |orbit| orbit.distance\
    \ }\n  orbits.reverse!\n  orbits.select { |orbit| orbit.distance <= 1 }.map {\
    \ |orbit| orbit.name }\nend\n</code>\n<|/ a |>\n<| c |>\nThanks so much for your\
    \ help. I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit\
    \ = planet2.orbit(planet1)\n  \n  planet1_orbit.each do |planet|\n    planet2_orbit.each\
    \ do |planet|\n      if planet == planet1 || planet == planet2\n        puts planet\n\
    \      end\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nI appreciate your efforts, but this isn't what I was looking for. I'm\
    \ looking for a way to do this without having to use any gems. I already know\
    \ how to do this using gems, but I'm looking for a way to do it without them.\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a solution that does not use\
    \ any gems.\n<|/ c |>\n<| c |>\nThank you so much! This was exactly what I was\
    \ looking for!\n<|/ c |>\n<| a |>\n<code>", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n\
    \  orbits = orbit1.orbit + orbit2.orbit\n  sun = orbits.first\n  planets = orbits.select\
    \ { |orbit| orbit == sun }\n  planets = planets.sort_by { |orbit| orbit - sun\
    \ }\n  planets = planets.map { |orbit| orbit.name }\n  planets.empty? ? [] : planets\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer.\
    \ I'm going to try this out and let you know how it goes.\n<|/ c |>\n<| c |>\n\
    I got it to work. Thanks for your help. I appreciate it.\n<|/ c |>\n<| c |>\n\
    I added the code I used to solve the problem to the original question. Thanks\
    \ again for your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    planet1 = planet1.downcase\n\
    \    planet2 = planet2.downcase\n    \n    planet1_orbit = planet1.to_sym\n  \
    \  planet2_orbit = planet2.to_sym\n    \n    planet1_orbits = planet1.to_s.downcase.split(\"\
    _\")\n    planet2_orbits = planet2.to_s.downcase.split(\"_\")\n    \n    planet1_orbits.each\
    \ do |planet1_orbit|\n        planet1_orbit = planet1_orbit.downcase\n       \
    \ \n        planet2_orbits.each do |planet2_orbit|\n            planet2_orbit\
    \ = planet2_orbit.downcase\n            \n            if planet1_orbit == planet2_orbit\n\
    \                puts \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\
    \n            elsif planet1_orbit == planet2_orbit.upcase\n                puts\
    \ \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\n            elsif\
    \ planet1_orbit == planet2_orbit.downcase\n                puts \"#{planet1_orbit}\
    \ and #{planet2_orbit} are the same planet\"\n            elsif planet1_orbit\
    \ == planet2_orbit.upcase.downcase\n                puts \"#{planet1_orbit} and\
    \ #{planet2_orbit} are the same planet\"\n            elsif planet1_orbit == planet2_orbit.downcase.upcase\n\
    \                puts \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\
    \n            elsif planet1_orbit == planet2_orbit.upcase.downcase.upcase\n  \
    \              puts \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\
    \n            else\n                puts \"#{planet1_orbit} and #{planet2_orbit}\
    \ are different planets\"\n            end\n        end\n    end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI appreciate your help but this doesn't\
    \ seem to work. I'm getting an error that says \"undefined method `downcase' for\
    \ nil:NilClass\" when I run your code. I'm also getting an error that says \"\
    undefined method `to_sym' for nil:NilClass\" when I run your code. I'm also getting\
    \ an error that says \"undefined method `to_s' for nil:N", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  orbit1 = planet1.orbit(planet2)\n\
    \  orbit2 = planet2.orbit(planet1)\n  orbit1.each do |planet|\n    orbit2.each\
    \ do |planet|\n      if planet == planet1\n        orbit1.delete(planet)\n   \
    \     orbit2.delete(planet)\n      elsif planet == planet2\n        orbit1.delete(planet)\n\
    \        orbit2.delete(planet)\n      end\n    end\n  end\n  orbit1.sort!\n  orbit2.sort!\n\
    \  return orbit1 + orbit2\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nThanks for your answer! I tried to run your code, but I got this error\
    \ `undefined method 'downcase' for nil:NilClass`. Any idea why?\n<|/ c |>\n<|\
    \ c |>\nI fixed the error, but now I got this error `undefined method 'orbit'\
    \ for nil:NilClass`. Any idea why?\n<|/ c |>\n<| c |>\nI fixed the error, but\
    \ now I got this error `undefined method 'orbit' for nil:NilClass`. Any idea why?\n\
    <|/ c |>\n<| c |>\nI fixed the error, but now I got this error `undefined method\
    \ 'orbit' for nil:NilClass`. Any idea why?\n<|/ c |>\n<| c |>\nI fixed the error,\
    \ but now I got this error `undefined method 'orbit' for nil:NilClass`. Any idea\
    \ why?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  \n  if planet1 == nil\n    return\
    \ []\n  \n  if planet2 == nil\n    return []\n  \n  sun = Planet.find_by_name(\"\
    Sun\")\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n  \n\
    \  orbits = orbit1.orbits + orbit2.orbits\n  \n  orbits = orbits.sort_by { |orbit|\
    \ orbit.distance }\n  \n  orbits = orbits.select { |orbit| orbit.distance < sun.distance\
    \ }\n  \n  return orbits.map { |orbit| orbit.name }\nend", "    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    if planet1 == planet2\n        return ()\n    planet1 =\
    \ planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n   \
    \ planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  orbit1.each\
    \ do |orbit|\n    orbit2 = orbit.orbit(planet2)\n    orbit2.each do |orbit|\n\
    \      orbit.each do |orbit|\n        if orbit.distance < sun_distance\n     \
    \     puts orbit.name\n        end\n      end\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I appreciate it! I did try\
    \ your solution and it didn't work. My code was very similar to the one you posted.\
    \ I tried it again and I got this error message: undefined method `orbit' for\
    \ #<String:0x0000000532c888>\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a working solution. Hope it helps!\n<|/ c |>\n<| c |>\nThanks so much! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this answer solved your problem,\
    \ please mark it as accepted so others can see it more easily.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nI figured it out! I used the code from my original post and modified\
    \ it a bit. I had to change the method bf to bf_planets. I then had to change\
    \ my method call in the main file to bf_planets(planet1, planet2). \nHere is the\
    \ code I ended up with:\n<code>", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planets = [:Mercury,\
    \ :Venus, :Earth, :Mars, :Jupiter, :Saturn, :Uranus, :Neptune]\n  \n  if planet1\
    \ == planet2\n    planets << planet1\n    planets << planet2\n  elsif planet1\
    \ == :Mercury\n    planets << planet2\n    planets << planet1\n  elsif planet1\
    \ == :Venus\n    planets << planet2\n    planets << planet1\n  elsif planet1 ==\
    \ :Earth\n    planets << planet2\n    planets << planet1\n  elsif planet1 == :Mars\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Jupiter\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Saturn\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Uranus\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Neptune\n\
    \    planets << planet2\n    planets << planet1\n  end\n  \n  planets.sort.map\
    \ { |planet| planet.to_sym }\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer! I added some more info to the question, could you please take\
    \ a look?\n<|/ c |>\n<| c |>\nI added some more info to the question, could you\
    \ please take a look?\n<|/ c |>\n<| c |>\nI added some more info to the question,\
    \ could you please take a look?\n<|/ c |>\n<| c |>\nI added some more info to\
    \ the question, could you please take a look?\n<|/ c |>\n<| c |>\nI added some\
    \ more info to the question, could you please take a look?\n<|/ c |>\n<| a tags=rub",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == :mercury\n    planet1 = :earth\n  elsif planet1 == :venus\n\
    \    planet1 = :mars\n  elsif planet1 == :earth\n    planet1 = :jupiter\n  elsif\
    \ planet1 == :mars\n    planet1 = :saturn\n  elsif planet1 == :jupiter\n    planet1\
    \ = :uranus\n  elsif planet1 == :saturn\n    planet1 = :neptune\n  elsif planet1\
    \ == :uranus\n    planet1 = :neptune\n  elsif planet1 == :neptune\n    planet1\
    \ = :uranus\n  elsif planet1 == :pluto\n    planet1 = :pluto\n  end\n  \n  if\
    \ planet2 == :mercury\n    planet2 = :earth\n  elsif planet2 == :venus\n    planet2\
    \ = :mars\n  elsif planet2 == :earth\n    planet2 = :jupiter\n  elsif planet2\
    \ == :mars\n    planet2 = :saturn\n  elsif planet2 == :jupiter\n    planet2 =\
    \ :uranus\n  elsif planet2 == :saturn\n    planet2 = :neptune\n  elsif planet2\
    \ == :uranus\n    planet2 = :neptune\n  elsif planet2 == :neptune\n    planet2\
    \ = :uranus\n  elsif planet2 == :pluto\n    planet2 = :pluto\n  end\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == :mercury\n\
    \    planet1 = :earth\n  elsif planet1 == :venus\n    planet1 = :mars\n  elsif\
    \ planet1 == :earth\n    planet1 = :jupiter\n  elsif planet1 == :mars\n    planet1\
    \ = ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1\
    \ == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n  planet2\
    \ = Planet.find_by_name(planet2)\n  if planet1.nil? or planet2.nil?\n    return\
    \ []\n  end\n  sun = Planet.find_by_name(\"sun\")\n  planet1.orbit(sun)\n  planet2.orbit(sun)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1_orbit = planet1_orbit(planet1)\n\
    \  planet2_orbit = planet2_orbit(planet2)\n  \n  orbits = planet1_orbit + planet2_orbit\n\
    \  \n  orbits.sort!\n  \n  orbits.each do |orbit|\n    if planet1_orbit == orbit\n\
    \      return [planet2]\n    elsif planet2_orbit == orbit\n      return [planet1]\n\
    \    end\n  end\n  \n  return []\nend", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1\
    \ == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1\
    \ == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = ", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n \
    \ orbit1 = planet1.orbit\n  orbit2 = planet2.orbit\n  sun = Planet.find_by_name(\"\
    Sun\")\n  orbits = orbit1.orbit + orbit2.orbit\n  orbits.sort!\n  orbits.reverse!\n\
    \  orbits.each do |orbit|\n    if orbit.distance < sun.distance\n      return\
    \ [planet1, planet2]\n    end\n  end\n  return []\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks for your answer! I tried to run your code but I get this error\
    \ `NameError: undefined local variable or method 'orbit' for #<Planet:0x000000051c7a80>`\n\
    <|/ c |>\n<| c |>\nI fixed the error but now I get this error `NoMethodError:\
    \ undefined method 'distance' for #<Orbit:0x000000051c7a80>`\n<|/ c |>\n<| c |>\n\
    I fixed the error but now I get this error `NoMethodError: undefined method 'distance'\
    \ for #<Orbit:0x000000051c7a80>`\n<|/ c |>\n<| c |>\nI fixed the error but now\
    \ I get this error `NoMethodError: undefined method 'distance' for #<Orbit:0x000000051c7a80>`\n\
    <|/ c |>\n<| c |>\nI fixed the error but now I get this error `NoMethodError:\
    \ undefined method 'distance' for #<Orbit:0x000000051c7a80>`\n<|/ c |>\n<| a dscore=0\
    \ |>\nI fixed the error but now I get this error NoMethodError: undefined method\
    \ 'distance' for #<Orbit:0x000000051c7a80>", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  ", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  plan", "    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    if planet1 == planet2\n        return ()\n    \n \
    \   planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s", "  planet1 = planet1.upcase\n \
    \ planet2 = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n \
    \ planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit = planet2.orbit(planet1)\n\
    \  \n  planet1_orbit.each do |planet|\n    planet2_orbit.each do |planet|\n  \
    \    if planet == planet1\n        planet1_orbit.delete(planet)\n      elsif planet\
    \ == planet2\n        planet2_orbit.delete(planet)\n      end\n    end\n  end\n\
    \  \n  return planet1_orbit.sort_by {|planet| planet.distance_to_sun(planet2)}\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I tried to run\
    \ your code, but I got this error `undefined method 'orbit' for #<String:0x00007f9f59b00538>`\
    \ when I ran `bf.call(\"Jupiter\", \"Neptune\")`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to add `.upcase` when calling `planet1` and `planet2`\n\
    <|/ c |>\n<| c |>\nI edited my answer, I forgot to add `.upcase` when calling\
    \ `planet1` and `planet2`\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to\
    \ add `.upcase` when calling `planet1` and `planet2`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to add `.upcase` when calling `planet1` and `planet2`\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  planet1 = planet1.upcase\n  planet2 =\
    \ planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n\
    \  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  \n  if planet1.eql?(planet2)\n    return []\n  \n  sun = Sun.new\n\
    \  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n  \n  orbit1.each\
    \ do |planet|\n    orbit2 = sun.orbit(planet)\n    \n    orbit2.each do |planet|\n\
    \      distance = sun.distance(planet)\n      \n      if distance < distance\n\
    \        distance\n      end\n    end\n  end\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    puts \"#{planet1}\
    \ and #{planet2} are the same planet\"\n    return []\n  end\n  \n  if planet1\
    \ == :sun\n    puts \"#{planet1} is the sun\"\n    return []\n  end\n  \n  if\
    \ planet2 == :sun\n    puts \"#{planet2} is the sun\"\n    return []\n  end\n\
    \  \n  if planet1 == planet2\n    puts \"#{planet1} and #{planet2} are the same\
    \ planet\"\n    return []\n  end\n  \n  planet1 = planet1.to_sym\n  planet2 =\
    \ planet2.to_sym\n  \n  if planet1 == :mercury\n    puts \"#{planet1} is the Mercury\"\
    \n    return []\n  end\n  \n  if planet2 == :mercury\n    puts \"#{planet2} is\
    \ the Mercury\"\n    return []\n  end\n  \n  if planet1 == :venus\n    puts \"\
    #{planet1} is the Venus\"\n    return []\n  end\n  \n  if planet2 == :venus\n\
    \    puts \"#{planet2} is the Venus\"\n    return []\n  end\n  \n  if planet1\
    \ == :earth\n    puts \"#{planet1} is the Earth\"\n    return []\n  end\n  \n\
    \  if planet2 == :earth\n    puts \"#{planet2} is the Earth\"\n    return []\n\
    \  end\n  \n  if planet1 == :mars\n    puts \"#{planet1} is the Mars\"\n    return\
    \ []\n  end\n  \n  if planet2 == :mars\n    puts \"#{planet2} is the Mars\"\n\
    \    return []\n  end\n  \n  if planet1 == :jupiter\n    puts \"#{planet1} is\
    \ the Jupiter\"\n    return []\n  end\n  \n  if planet2 == :jupiter\n    puts\
    \ \"#{planet2} is the Jupiter\"\n    return []\n  end\n  \n  if planet1 == :saturn\n\
    \    puts \"#{planet1} is the Saturn\"\n    return []\n  end\n  \n  if planet2\
    \ == :saturn\n    puts \"#{planet2} is the Saturn\"\n    return []\n  end\n  \n\
    \  if planet1 == :uranus", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  \n  if planet1 == planet2\n    puts \"The planets are the same\"\n    return\
    \ []\n  elsif planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2\
    \ = planet2.gsub!(/[^A-Za-z]/, \"\")\n  \n  if planet1.nil? || planet2.nil?\n\
    \    puts \"The planets are not correct\"\n    return []\n  end\n  \n  planet1\
    \ = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub!(/[^A-Za-z]/, \"\
    \")\n  \n  if planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2\
    \ = planet2.gsub!(/[^A-Za-z]/, \"\")\n  \n  if planet1.nil? || planet2.nil?\n\
    \    puts \"The planets are not correct\"\n    return []\n  end\n  \n  planet1\
    \ = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub!(/[^A-Za-z]/, \"\
    \")\n  \n  if planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2\
    \ = planet2.gsub!(/[^A-Za-z]/, \"\")\n  \n  if planet1.nil? || planet2.nil?\n\
    \    puts \"The planets are not correct\"\n    return []\n  end\n  \n  planet1\
    \ = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub!(/[^A-Za-z]/, \"\
    \")\n  \n  if planet1.nil? ", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 =\
    \ planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n  \
    \  return []\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if\
    \ planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1 == planet2\n    return\
    \ []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1\
    \ == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  \n", "    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    []\n  elsif planet1.nil? || planet2.nil?\n    []\n\
    \  elsif planet1 == :mercury\n    planet2 = :venus\n    planet1 = :earth\n   \
    \ planet2 = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n    planet1\
    \ = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n    planet2 = :mars\n\
    \    planet1 = :jupiter\n    planet2 = :saturn\n    planet1 = :uranus\n    planet2\
    \ = :neptune\n    planet1 = :earth\n    planet2 = :mars\n    planet1 = :jupiter\n\
    \    planet2 = :saturn\n    planet1 = :uranus\n    planet2 = :neptune\n    planet1\
    \ = :earth\n    planet2 = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n\
    \    planet1 = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n    planet2\
    \ = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n    planet1 = :uranus\n\
    \    planet2 = :neptune\n    planet1 = :earth\n    planet2 = :mars\n    planet1\
    \ = :jupiter\n    planet2 = :saturn\n    planet1 = :uranus\n    planet2 = :neptune\n\
    \    planet1 = :earth\n    planet2 = :mars\n    planet1 = :jupiter\n    planet2\
    \ = :saturn\n    planet1 = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n\
    \    planet2 = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n    planet1\
    \ = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n    planet2 = :mars",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2\
    \ = sun.orbit(planet2)\n  \n  orbits = orbit1.orbit + orbit2.orbit\n  \n  orbits.sort!\n\
    \  \n  orbits.each do |orbit|\n    if orbit.distance < sun.distance\n      return\
    \ [orbit.planet]\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  \n  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  planet1 = planet1.capitalize\n  planet2 =\
    \ planet2.capitalize\n  \n  if planet1 == planet2\n    return []\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  if planet1.include? \"sun\"\n    sun = planet1.index(\"\
    sun\")\n    sun = planet1.slice!(sun, 3)\n    sun = planet1.slice!(sun, 2)\n \
    \   sun = planet1.slice!(sun, 1)\n    sun = planet1.slice!(sun, 4)\n    sun =\
    \ planet1.slice!(sun, 6)\n    sun = planet1.slice!(sun, 7)\n    sun = planet1.slice!(sun,\
    \ 8)\n    sun = planet1.slice!(sun, 9)\n    sun = planet1.slice!(sun, 10)\n  \
    \  sun = planet1.slice!(sun, 11)\n    sun = planet1.slice!(sun, 12)\n    sun =\
    \ planet1.slice!(sun, 13)\n    sun = planet1.slice!(sun, 14)\n    sun = planet1.slice!(sun,\
    \ 15)\n    sun = planet1.slice!(sun, 16)\n    sun = planet1.slice!(sun, 17)\n\
    \    sun = planet1.slice!(sun, 18)\n    sun = planet1.slice!(sun, 19)\n    sun\
    \ = planet1.slice!(sun, 20)\n    sun = planet1.slice!(sun, 21)\n    sun = planet1.slice!(sun,\
    \ 22)\n    sun = planet1.slice!(sun, 23)\n    sun = planet1.slice!(sun, 24)\n\
    \    sun = planet1.slice!(sun, 25)\n    sun = planet1.slice!(sun, 26)\n    sun\
    \ = planet1.slice!(sun, 27)\n    sun = planet1.slice!(sun, 28)\n    sun = planet1.slice!(sun,\
    \ 29)\n    sun = planet1.slice!(sun, 30)\n    sun = planet1.slice!(sun, 31)\n\
    \    sun = planet1.slice!(sun, 32)\n    sun", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  planets = planet1.upcase + planet2.upcase\n  \n  orbits\
    \ = planets.split(\" \").map { |planet| planet.upcase }\n  \n  orbits.each do\
    \ |orbit|\n    planets.each do |planet|\n      if orbit == planet\n        puts\
    \ \"#{orbit} #{planet}\"\n      end\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. I am not able to understand your code.\
    \ Can you please explain it a little bit?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I am\
    \ not able to understand your code. Can you please explain it a little bit?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not able to understand your code. Can you\
    \ please explain it a little bit?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n \
    \ planet1 = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n\
    \  \n  orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  \n\
    \  orbit1.times do |time|\n    orbit2.times do |time|\n      distance = time -\
    \ orbit1.time\n      if distance < 0\n        distance = -distance\n      end\n\
    \      if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n\
    \  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/,\
    \ \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  sun = Planet.new(\"Sun\")\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  \n  orbit1.each do |planet|\n    orbit2.each do |planet|\n      if planet ==\
    \ planet1\n        orbit1.delete(planet)\n        orbit2.delete(planet)\n    \
    \  elsif planet == planet2\n        orbit1.delete(planet)\n        orbit2.delete(planet)\n\
    \      end\n    end\n  end\n  \n  return orbit1.zip(orbit2).sort_by { |planet1,\
    \ planet2| planet1.distance_to(sun) }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for the answer! I ran your code, and it seems to work fine,\
    \ except for the fact that when I run `bf.call(\"Jupiter\", \"Neptune\")` it returns\
    \ `[\"Saturn\", \"Uranus\"]` instead of `[\"Saturn\", \"Uranus\", \"Neptune\"\
    ]`. Any idea why that is?\n<|/ c |>\n<| c |>\nI fixed the bug. Sorry for the mistake.\n\
    <|/ c |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nHere's a solution that uses recursion:\n<code>", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1_orbit = planet1.orbit(planet2)\n\
    \  planet2_orbit = planet2.orbit(planet1)\n  planet1_sun = planet1.orbit(\"Sun\"\
    )\n  planet2_sun = planet2.orbit(\"Sun\")\n  planet1_sun_distance = planet1_sun.distance_to(planet2_sun)\n\
    \  planet2_sun_distance = planet2_sun.distance_to(planet1_sun)\n  planet1_planet2_distance\
    \ = planet1_orbit.distance_to(planet2_orbit)\n  planet2_planet1_distance = planet2_orbit.distance_to(planet1_orbit)\n\
    \  \n  if planet1_sun_distance < planet2_sun_distance\n    planet1_orbit.sort!\n\
    \    planet2_orbit.sort!\n  elsif planet1_sun_distance > planet2_sun_distance\n\
    \    planet1_orbit.sort!\n    planet2_orbit.sort!.reverse\n  elsif planet1_planet2_distance\
    \ < planet2_planet1_distance\n    planet1_orbit.sort!\n    planet2_orbit.sort!.reverse\n\
    \  elsif planet1_planet2_distance > planet2_planet1_distance\n    planet1_orbit.sort!.reverse\n\
    \    planet2_orbit.sort!\n  end\n  \n  planet1_orbit.zip(planet2_orbit).sort\n\
    end", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1.length\
    \ != 3 or planet2.length != 3\n    return []\n  \n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2\
    \ = planet2.gsub(/[^A-Z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^a-z]/, \"\"\
    )\n  planet2 = planet2.gsub(/[^a-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n \
    \ planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  orbit1 = Orbit.from_name(planet1)\n\
    \  orbit2 = Orbit.from_name(planet2)\n  sun = Orbit.from_name(\"sun\")\n  orbits\
    \ = Orbit.orbits(orbit1, orbit2)\n  orbits.each do |orbit|\n    if orbit.to_name.downcase\
    \ == sun.to_name.downcase\n      return [orbit.to_name]\n    end\n  end\n  return\
    \ []\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your help, but this\
    \ doesn't seem to work. I'm getting this error when I run it: ```NameError: undefined\
    \ local variable or method `planet1' for main:Object\n    from (irb):1\n    from\
    \ /Users/james/.rvm/rubies/ruby-2.5.3/bin/irb:11:in `<main>'\n```\n<|/ c |>\n\
    <| c |>\nI edited the answer to include a working solution. Let me know if it\
    \ works for you.\n<|/ c |>\n<| c |>\nI appreciate your help, but this doesn't\
    \ seem to work. I'm getting this error when I run it: ```NameError: undefined\
    \ local variable or method `planet1' for main:Object\n    from (irb):1\n    from\
    \ /Users/james/.rvm/rubies/ruby-2.5.3/bin/irb:11:in `<main>'\n```\n<|/ c |>\n\
    <| c |>\nI edited the answer to include a working solution. Let me know if it\
    \ works for you.\n<|/ c |>\n<| c |>\nI appreciate your help, but this doesn't\
    \ seem to work. I'm getting this error when I run it: ```NameError: undefined\
    \ local variable or method `planet1' for main:Object\n    from (irb):1\n    from\
    \ /Users/james/.rvm/rubies/ruby-2.5.3/bin/irb:11:in `<main>'\n```\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails |>\nI figured it out! Thanks to everyone who helped\
    \ me out!\n<code>", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = ", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n\
    \  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  \n  if planet1 == :mercury\n    planet1 = :earth\n  elsif\
    \ planet2 == :mercury\n    planet2 = :earth\n  elsif planet1 == :earth\n    planet1\
    \ = :mars\n  elsif planet2 == :earth\n    planet2 = :mars\n  elsif planet1 ==\
    \ :mars\n    planet1 = :jupiter\n  elsif planet2 == :mars\n    planet2 = :jupiter\n\
    \  elsif planet1 == :jupiter\n    planet1 = :saturn\n  elsif planet2 == :jupiter\n\
    \    planet2 = :saturn\n  elsif planet1 == :saturn\n    planet1 = :uranus\n  elsif\
    \ planet2 == :saturn\n    planet2 = :uranus\n  elsif planet1 == :uranus\n    planet1\
    \ = :neptune\n  elsif planet2 == :uranus\n    planet2 = :neptune\n  elsif planet1\
    \ == :neptune\n    planet1 = :mercury\n  elsif planet2 == :neptune\n    planet2\
    \ = :mercury\n  else\n    return []\n  end\n  \n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_sym\n  plan", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  if planet1 == planet2\n\
    \    planet1 = planet1.gsub(/\\s+/, \"\")\n    planet2 = planet2.gsub(/\\s+/,\
    \ \"\")\n    if planet1 == planet2\n      planet1 = planet1.gsub(/\\s+/, \"\"\
    )\n      planet2 = planet2.gsub(/\\s+/, \"\")\n      if planet1 == planet2\n \
    \       planet1 = planet1.gsub(/\\s+/, \"\")\n        planet2 = planet2.gsub(/\\\
    s+/, \"\")\n        if planet1 == planet2\n          planet1 = planet1.gsub(/\\\
    s+/, \"\")\n          planet2 = planet2.gsub(/\\s+/, \"\")\n          if planet1\
    \ == planet2\n            planet1 = planet1.gsub(/\\s+/, \"\")\n            planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n            if planet1 == planet2\n          \
    \    planet1 = planet1.gsub(/\\s+/, \"\")\n              planet2 = planet2.gsub(/\\\
    s+/, \"\")\n              if planet1 == planet2\n                planet1 = planet1.gsub(/\\\
    s+/, \"\")\n                planet2 = planet2.gsub(/\\s+/, \"\")\n           \
    \     if planet1 == planet2\n                  planet1 = planet1.gsub(/\\s+/,\
    \ \"\")\n                  planet2 = planet2.gsub(/\\s+/, \"\")\n            \
    \      if planet1 == planet2\n                    planet1 = planet1.gsub(/\\s+/,\
    \ \"\")\n                    planet2 = planet2.gsub(/\\s+/, \"\")\n          \
    \          if planet1 == planet2\n                      planet1 = planet1.gsub(/\\\
    s+/, \"\")\n                      planet2 = planet2.gsub(/\\s+/, \"\")\n     \
    \                 if planet1 == planet2\n                        planet1 = planet1.gsub(/\\\
    s+/, \"\")\n                        planet2 = planet2.gsub(/\\s+/, \"\")\n   \
    \                     if planet1 == planet2", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  plan", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  planet1 = planet1.to_", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  if planet1 == planet2\n    return []\n  planet1_orbit = planet1.orbit(planet2)\n\
    \  planet2_orbit = planet2.orbit(planet1)\n  planet1_sun = planet1.orbit(\"Sun\"\
    )\n  planet2_sun = planet2.orbit(\"Sun\")\n  planet1_sun_distance = planet1_sun.distance_to(planet2_sun)\n\
    \  planet2_sun_distance = planet2_sun.distance_to(planet1_sun)\n  planet1_orbit.each\
    \ do |planet|\n    planet1_orbit_distance = planet.distance_to(planet1_sun)\n\
    \    planet2_orbit_distance = planet.distance_to(planet2_sun)\n    if planet1_orbit_distance\
    \ < planet2_orbit_distance\n      return [planet]\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a little bit more. For example, `planet1_orbit.each do\
    \ |planet|` can be replaced with `planet1_orbit.select { |planet| planet.distance_to(planet1_sun)\
    \ < planet.distance_to(planet2_sun) }`\n<|/ c |>\n<| c |>\nI agree, that is a\
    \ much better solution. Thanks!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n\
    \  \n  if planet1 == nil or planet2 == nil\n    return []\n  \n  sun = Planet.find_by_name(\"\
    Sun\")\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n  \n\
    \  orbit1.each do |orbit|\n    distance = orbit.distance_to(sun)\n    \n    if\
    \ distance < 1\n      return [orbit.name]\n    end\n  end\n  \n  orbit2.each do\
    \ |orbit|\n    distance = orbit.distance_to(sun)\n    \n    if distance < 1\n\
    \      return [orbit.name]\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  \n  orbit1.each\
    \ do |planet|\n    orbit2.each do |planet|\n      \n      if planet == planet1\n\
    \        return planet\n      elsif planet == planet2\n        return planet\n\
    \      end\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  plan", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if\
    \ planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1.eql?(planet2)\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1.eql?(planet2)\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  \n  if planet1.eql?(planet2)\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1.eql?(planet2)\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1.eql?(planet2)\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = ",
  "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    if planet1 == planet2\n\
    \        planet1 = planet1.capitalize\n        planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n \
    \ planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\s+/,\
    \ \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.g", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  \n  if planet1 == planet2\n    return []\n  \n  sun\
    \ = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  \n  orbit1.each do |o|\n    next if o.name == planet1\n    \n    distance =\
    \ o.distance(sun)\n    \n    if distance < 0\n      distance = distance * -1\n\
    \    end\n    \n    if distance < orbit2.distance(o)\n      orbit2.delete(o)\n\
    \    end\n  end\n  \n  orbit2.each do |o|\n    next if o.name == planet2\n   \
    \ \n    distance = o.distance(sun)\n    \n    if distance < 0\n      distance\
    \ = distance * -1\n    end\n    \n    if distance < orbit1.distance(o)\n     \
    \ orbit1.delete(o)\n    end\n  end\n  \n  orbit1.sort!\n  orbit2.sort!\n  \n \
    \ orbit1.zip(orbit2) do |o1, o2|\n    if o1.distance < 0\n      o1.distance *=\
    \ -1\n    end\n    \n    if o2.distance < 0\n      o2.distance *= -1\n    end\n\
    \  end\n  \n  orbit1.zip(orbit2) do |o1, o2|\n    if o1.distance < 0\n      o1.distance\
    \ *= -1\n    end\n    \n    if o2.distance < 0\n      o2.distance *= -1\n    end\n\
    \  end\n  \n  return orbit1\nend\n</cell>\n<cell>", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  if planet1.nil? || planet2.nil?\n\
    \    return []\n  end\n  planet1 = planet1.orbit\n  planet2 = planet2.orbit\n\
    \  sun = Planet.find_by_name(\"Sun\")\n  sun_orbit = sun.orbit\n  sun_orbit_distance\
    \ = sun_orbit.distance_to(planet1)\n  planet1_orbit = planet1.orbit\n  planet1_orbit_distance\
    \ = planet1_orbit.distance_to(planet2)\n  planet2_orbit = planet2.orbit\n  planet2_orbit_distance\
    \ = planet2_orbit.distance_to(planet1)\n  if planet1_orbit_distance < sun_orbit_distance\
    \ && planet2_orbit_distance < sun_orbit_distance\n    return []\n  end\n  if planet1_orbit_distance\
    \ > sun_orbit_distance && planet2_orbit_distance > sun_orbit_distance\n    return\
    \ []\n  end\n  if planet1_orbit_distance < sun_orbit_distance && planet2_orbit_distance\
    \ < sun_orbit_distance\n    return []\n  end\n  if planet1_orbit_distance > sun_orbit_distance\
    \ && planet2_orbit_distance > sun_orbit_distance\n    return []\n  end\n  if planet1_orbit_distance\
    \ < sun_orbit_distance && planet2_orbit_distance < sun_orbit_distance\n    return\
    \ []\n  end\n  if planet1_orbit_distance > sun_orbit_distance && planet2_orbit_distance\
    \ > sun_orbit_distance\n    return []\n  end\n  if planet1_orbit_distance < sun_orbit_distance\
    \ && planet2_orbit_distance < sun_orbit_distance\n    return []\n  end\n  if planet1_orbit_distance\
    \ > sun_orbit_distance && planet2_orbit_distance > sun_orbit_distance\n    return\
    \ []\n  end\n  if planet1_orbit_distance < sun_orbit_distance && planet2_orbit_distance\
    \ < sun_orbit_distance\n    return []\n  end\n  if planet1_orbit_distance > sun_orbit_distance\
    \ && planet2_orbit_distance > sun_orbit_distance\n    return []\n  end\n  if planet1_orbit_",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  \n  orbit1.each do |planet|\n    orbit2.each do |planet|\n      if planet ==\
    \ planet1\n        planet = planet2\n      end\n      \n      if planet == planet2\n\
    \        planet = planet1\n      end\n      \n      if planet == sun\n       \
    \ planet = nil\n      end\n      \n      if planet != nil\n        distance =\
    \ sun.distance_to(planet)\n        \n        if distance < 1\n          distance\
    \ = 1\n        end\n        \n        distance\n      end\n    end\n  end\nend\n\
    </cell>\n<cell>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  if planet1 == :sun\n    return []\n  \n  if planet2 == :sun\n\
    \    return []\n  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n\
    \  orbit1.each do |planet|\n    if planet == planet2\n      return [planet]\n\
    \    end\n  end\n  \n  orbit2.each do |planet|\n    if planet == planet1\n   \
    \   return [planet]\n    end\n  end\n  \n  return []\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI appreciate your efforts, but this doesn't seem to work. `orbit(:earth)`\
    \ returns `[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]`, which is not what OP wants. Also, `orbit(:earth).each\
    \ { |planet| return [planet] }` returns `[\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]`, which is not what\
    \ OP wants. Also, `orbit(:earth).each { |planet| return [planet] }` returns `[\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]`, which is not what OP wants. Also, `orbit(:earth).each { |planet|\
    \ return [planet] }` returns `[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]`, which is not what OP wants.\
    \ Also, `orbit(:earth).each { |planet| return [planet] }` returns `[\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]`, which is not what OP wants. Also, `orbit(:earth).each { |planet| return [planet]\
    \ }` returns `[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]`, ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = Planet.find_by_name(planet1)\n  planet2\
    \ = Planet.find_by_name(planet2)\n  \n  if planet1.nil?\n    return []\n  elsif\
    \ planet2.nil?\n    return []\n  end\n  \n  sun = Planet.find_by_name('sun')\n\
    \  \n  orbit1 = planet1.orbit(sun)\n  orbit2 = planet2.orbit(sun)\n  \n  orbit1.each\
    \ do |orbit|\n    orbit2 = orbit2.reject { |o| o.id == orbit.id }\n    \n    if\
    \ orbit2.empty?\n      return [orbit]\n    end\n  end\n  \n  orbit2.each do |orbit|\n\
    \    orbit1 = orbit1.reject { |o| o.id == orbit.id }\n    \n    if orbit1.empty?\n\
    \      return [orbit]\n    end\n  end\n  \n  orbit1.sort_by! { |o| o.distance\
    \ }\n  orbit2.sort_by! { |o| o.distance }\n  \n  orbit1.reverse!\n  orbit2.reverse!\n\
    \  \n  orbit1.each do |orbit|\n    orbit2 = orbit2.reject { |o| o.id == orbit.id\
    \ }\n    \n    if orbit2.empty?\n      return [orbit]\n    end\n  end\n  \n  orbit2.each\
    \ do |orbit|\n    orbit1 = orbit1.reject { |o| o.id == orbit.id }\n    \n    if\
    \ orbit1.empty?\n      return [orbit]\n    end\n  end\n  \n  orbit1.sort_by! {\
    \ |o| o.distance }\n  orbit2.sort_by! { |o| o.distance }\n  \n  orbit1.reverse!\n\
    \  orbit2.reverse!\n  \n  orbit1.each do |orbit|\n    orbit2 = orbit2.reject {\
    \ |o| o.id == orbit.id }\n    \n    if orbit2.empty?\n      return [orbit]\n \
    \   end\n  end\n  \n  orbit2.each do |orbit|\n    orbit1 = orbit1.reject { |o|\
    \ o.id == orbit.id }\n    \n    if orbit1.empty?\n      return [orbit]\n    end\n\
    \  end\n  \n  orbit1.sort_by", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  sun = Sun.new\n  \n  orbit1\
    \ = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n  \n  orbit1.each do |planet|\n\
    \    orbit2.each do |planet|\n      if planet == planet1\n        next if planet\
    \ == planet2\n      elsif planet == planet2\n        next if planet == planet1\n\
    \      else\n        distance = sun.distance(planet, planet1)\n        next if\
    \ distance < 0\n        next if distance > sun.distance\n        \n        distance\
    \ = sun.distance(planet, planet2)\n        next if distance < 0\n        next\
    \ if distance > sun.distance\n        \n        distance = sun.distance(planet1,\
    \ planet)\n        next if distance < 0\n        next if distance > sun.distance\n\
    \        \n        distance = sun.distance(planet2, planet)\n        next if distance\
    \ < 0\n        next if distance > sun.distance\n        \n        distance = sun.distance(planet,\
    \ planet1)\n        next if distance < 0\n        next if distance > sun.distance\n\
    \        \n        distance = sun.distance(planet, planet2)\n        next if distance\
    \ < 0\n        next if distance > sun.distance\n        \n        distance = sun.distance(planet1,\
    \ planet)\n        next if distance < 0\n        next if distance > sun.distance\n\
    \        \n        distance = sun.distance(planet2, planet)\n        next if distance\
    \ < 0\n        next if distance > sun.distance\n        \n        distance = sun.distance(planet,\
    \ planet1)\n        next if distance < 0\n        next if distance > sun.distance\n\
    \        \n        distance = sun.distance(planet, planet2)\n        next if distance\
    \ < 0\n        next if distance > sun.distance\n        \n        distance = sun.distance(planet1,\
    \ planet)\n        next if distance < 0\n        next if distance > sun.distance\n\
    \        \n        distance = sun.distance(planet2, planet)\n        next if distance\
    \ < 0\n        next if distance > sun.distance\n        \n        distance = sun.distance(planet,\
    \ planet1)\n        next if distance < 0\n        next if distance > sun.distance\n\
    \        \n        distance = sun.distance(planet, planet2)\n        next if distance\
    \ < 0\n        next if distance ", "  planet1 = planet1.downcase\n  planet2 =\
    \ planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  if planet1 == planet2\n    return []\n  \n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  \n  if planet1.nil?\n    return []\n\
    \  \n  if planet2.nil?\n    return []\n  \n  sun = Planet.find_by_name(\"Sun\"\
    )\n  \n  if sun.nil?\n    return []\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2\
    \ = sun.orbit(planet2)\n  \n  if orbit1.nil?\n    return []\n  \n  if orbit2.nil?\n\
    \    return []\n  \n  orbits = orbit1.orbit + orbit2.orbit\n  \n  orbits = orbits.sort_by{|orbit|\
    \ orbit.distance_to_sun}\n  \n  orbits = orbits.select{|orbit| orbit.distance_to_sun\
    \ < 10}\n  \n  return orbits.map{|orbit| orbit.name}\nend", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2\
    \ = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n\
    \  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/,\
    \ \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\\
    W_]+/, \"\")", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n \
    \ \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  \n  orbit1 = Orbit.new(planet1)\n  orbit2 = Orbit.new(planet2)\n\
    \  \n  orbits = orbit1.orbits + orbit2.orbits\n  \n  sun = Orbit.new(\"Sun\")\n\
    \  \n  orbits.each do |orbit|\n    if orbit.distance_to(sun) < 0\n      orbits.delete(orbit)\n\
    \    end\n  end\n  \n  orbits.sort_by! {|orbit| orbit.distance_to(sun)}\n  \n\
    \  return orbits.map {|orbit| orbit.planet}\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer! I tried to implement your solution, but\
    \ I got this error `undefined method 'orbits' for #<Orbit:0x000000051b7a20>`\n\
    <|/ c |>\n<| c |>\nI added the Orbit class to the answer. Does it look like that?\n\
    <|/ c |>\n<| c |>\nI added the Orbit class to the answer. Does it look like that?\n\
    <|/ c |>\n<| c |>\nI added the Orbit class to the answer. Does it look like that?\n\
    <|/ c |>\n<| c |>\nI added the Orbit class to the answer. Does it look like that?\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem called orbital which\
    \ does exactly what you want.\n<code>\nrequire 'orbital'", "    \n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    \n    if planet1\
    \ == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    \n    if planet1 == planet2\n        return ()\n \
    \   \n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n   \
    \ \n    if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    if planet1 == planet2\n        return\
    \ ()\n    \n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    \n    if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    if planet1 == planet2\n        return\
    \ ()\n    \n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    \n    if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    if planet1 == planet2\n        return\
    \ ()\n    \n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    \n    if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    if planet1 == planet2\n        return\
    \ ()\n    \n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    \n    if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    if planet1 == planet2\n        return\
    \ ()\n    \n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    \n    if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    if planet1 == planet2\n        return\
    \ ()\n    \n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    \n    if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  if planet1 == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  sun = Planet.find_by_name(\"Sun\"\
    )\n  orbit1 = planet1.orbit(sun)\n  orbit2 = planet2.orbit(sun)\n  orbits = orbit1.to_a\
    \ | orbit2.to_a\n  orbits = orbits.sort_by { |orbit| orbit.distance }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance < sun_radius }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance > sun_radius }\n  orbits = orbits.select { |orbit|\
    \ orbit.distance < planet1_radius }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ > planet1_radius }\n  orbits = orbits.select { |orbit| orbit.distance < planet2_radius\
    \ }\n  orbits = orbits.select { |orbit| orbit.distance > planet2_radius }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance < planet1_radius + planet2_radius }\n\
    \  orbits = orbits.select { |orbit| orbit.distance > planet1_radius + planet2_radius\
    \ }\n  orbits = orbits.select { |orbit| orbit.distance < planet1_radius + planet2_radius\
    \ + sun_radius }\n  orbits = orbits.select { |orbit| orbit.distance > planet1_radius\
    \ + planet2_radius + sun_radius }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ < planet1_radius + planet2_radius + sun_radius + planet1_radius + planet2_radius\
    \ }\n  orbits = orbits.select { |orbit| orbit.distance > planet1_radius + planet2_radius\
    \ + sun_radius + planet1_radius + planet2_radius }\n  orbits = orbits.select {\
    \ |orbit| orbit.distance < planet1_radius + planet2_radius + sun_radius + planet1_radius\
    \ + planet2_radius + sun_radius }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ > planet1_radius + planet2_radius + sun_radius + planet1_radius + planet2_radius\
    \ + sun_radius }\n  orbit", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  if planet1 == :mercury\n    if planet2 == :venus\n      return [\"Venus\"]\n\
    \    elsif planet2 == :earth\n      return [\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"]\n    elsif planet2 == :mars\n      return\
    \ [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    elsif planet2\
    \ == :jupiter\n      return [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    elsif planet2 == :saturn\n      return [\"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    elsif planet2 == :uranus\n      return [\"Uranus\", \"Neptune\"]\n    elsif\
    \ planet2 == :neptune\n      return [\"Neptune\"]\n    elsif planet2 == :pluto\n\
    \      return []\n    end\n  elsif planet1 == :venus\n    if planet2 == :mercury\n\
    \      return [\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n    elsif planet2 == :earth\n      return [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    elsif planet2 == :mars\n\
    \      return [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n \
    \   elsif planet2 == :jupiter\n      return [\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n    elsif planet2 == :saturn\n      return [\"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n    elsif planet2 == :uranus\n      return [\"Uranus\", \"Neptune\"\
    ]\n    elsif planet2 == :neptune\n      return [\"Neptune\"]\n    elsif planet2\
    \ == :pluto\n      return []\n    end\n  el", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n \
    \ planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\s+/,\
    \ \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.g", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n\
    \  orbit1.each do |planet|\n    orbit2.each do |planet|\n      if planet == planet1\n\
    \        next if planet == planet2\n      elsif planet == planet2\n        next\
    \ if planet == planet1\n      end\n      \n      distance = distance(planet, planet1)\n\
    \      \n      if distance < distance\n        distance\n      end\n    end\n\
    \  end\nend", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if\
    \ planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  orbit1 = Orbit.find_by_name(planet1)\n  orbit2 = Orbit.find_by_name(planet2)\n\
    \  orbits = orbit1.orbits + orbit2.orbits\n  sun = Orbit.find_by_name(\"sun\"\
    ).orbit\n  orbits = orbits.select { |orbit| orbit != sun }\n  orbits = orbits.sort_by\
    \ { |orbit| orbit - sun }\n  return orbits.map { |orbit| orbit.name }\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks so much for\
    \ the help. I really appreciate it. I tried running your code, but I got this\
    \ error `undefined method 'orbits' for #<Orbit::ActiveRecord_Relation:0x007fa9cff0ccf8>`\
    \ Any idea what that means?\n<|/ c |>\n<| c |>\nI edited my answer to fix the\
    \ undefined method error. Sorry about that. Can you try it again?\n<|/ c |>\n\
    <| c |>\nThanks so much for the help. I really appreciate it. I tried running\
    \ your code, but I got this error `undefined method 'orbits' for #<Orbit::ActiveRecord_Relation:0x007fa9cff0ccf8>`\
    \ Any idea what that means?\n<|/ c |>\n<| c |>\nI edited my answer to fix the\
    \ undefined method error. Sorry about that. Can you try it again?\n<|/ c |>\n\
    <| c |>\nThanks so much for the help. I really appreciate it. I tried running\
    \ your code, but I got this error `undefined method 'orbits' for #<Orbit::ActiveRecord_Relation:0x007fa9cff0ccf8>`\
    \ Any idea what that means?\n<|/ c |>\n<| a dscore=0 |>\nI believe that your problem\
    \ is that you aren't actually getting a collection of Orbits. You are getting\
    \ a collection of ActiveRecord::Relation objects. Try this:\n<code>", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Z]/, \"\")\n  planet1 = planet1.gsub(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^a-z]/, \"\")\n  planet1 = planet1.gsub(/[^0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet2 = plan", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    plan", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  orbit1 = orbit(planet1)\n \
    \ orbit2 = orbit(planet2)\n  \n  orbit1.each do |planet|\n    orbit2.each do |planet|\n\
    \      if planet == planet1\n        next if planet == planet2\n        \n   \
    \     distance = distance_to(planet, planet2)\n        \n        if distance <\
    \ 1\n          [planet, planet2]\n        end\n      end\n    end\n  end\n  \n\
    \  []\nend", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n\
    \  orbit1.each do |planet|\n    if planet == planet2\n      return [planet]\n\
    \    end\n  end\n  \n  orbit2.each do |planet|\n    if planet == planet1\n   \
    \   return [planet]\n    end\n  end\n  \n  return []\nend", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  if planet1 == planet2\n    planets = []\n  elsif\
    \ planet1 == \"SUN\"\n    planets = [planet2]\n  elsif planet2 == \"SUN\"\n  \
    \  planets = [planet1]\n  else\n    planets = []\n    planets << planet1 unless\
    \ planet1.upcase == planet2.upcase\n    planets << planet2 unless planet1.upcase\
    \ == planet2.upcase\n    planets << planet1 unless planet1.upcase == planet2.upcase\n\
    \    planets << planet2 unless planet1.upcase == planet2.upcase\n    planets <<\
    \ planet1 unless planet1.upcase == planet2.upcase\n    planets << planet2 unless\
    \ planet1.upcase == planet2.upcase\n    planets << planet1 unless planet1.upcase\
    \ == planet2.upcase\n    planets << planet2 unless planet1.upcase == planet2.upcase\n\
    \    planets << planet1 unless planet1.upcase == planet2.upcase\n    planets <<\
    \ planet2 unless planet1.upcase == planet2.upcase\n    planets << planet1 unless\
    \ planet1.upcase == planet2.upcase\n    planets << planet2 unless planet1.upcase\
    \ == planet2.upcase\n    planets << planet1 unless planet1.upcase == planet2.upcase\n\
    \    planets << planet2 unless planet1.upcase == planet2.upcase\n    planets <<\
    \ planet1 unless planet1.upcase == planet2.upcase\n    planets << planet2 unless\
    \ planet1.upcase == planet2.upcase\n    planets << planet1 unless planet1.upcase\
    \ == planet2.upcase\n    planets << planet2 unless planet1.upcase == planet2.upcase\n\
    \    planets << planet1 unless planet1.upcase == planet2.upcase\n    planets <<\
    \ planet2 unless planet1.upcase == planet2.upcase\n    planets << planet1 unless\
    \ planet1.up", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n\
    \  \n  if planet1.nil? or planet2.nil?\n    return []\n  end\n  \n  sun = Planet.find_by_name(\"\
    Sun\")\n  \n  planet1_orbit = planet1.orbit(sun)\n  planet2_orbit = planet2.orbit(sun)\n\
    \  \n  planet1_orbit.each do |planet|\n    planet1_orbit_distance = planet.distance_to(sun)\n\
    \    planet2_orbit.each do |planet2|\n      planet2_orbit_distance = planet2.distance_to(sun)\n\
    \      \n      if planet1_orbit_distance < planet2_orbit_distance\n        planet1_orbit_distance\
    \ = planet2_orbit_distance\n      end\n      \n      if planet1_orbit_distance\
    \ < planet2_orbit_distance\n        planet1_orbit_distance = planet2_orbit_distance\n\
    \      end\n      \n      if planet1_orbit_distance < planet2_orbit_distance\n\
    \        planet1_orbit_distance = planet2_orbit_distance\n      end\n      \n\
    \      if planet1_orbit_distance < planet2_orbit_distance\n        planet1_orbit_distance\
    \ = planet2_orbit_distance\n      end\n      \n      if planet1_orbit_distance\
    \ < planet2_orbit_distance\n        planet1_orbit_distance = planet2_orbit_distance\n\
    \      end\n      \n      if planet1_orbit_distance < planet2_orbit_distance\n\
    \        planet1_orbit_distance = planet2_orbit_distance\n      end\n      \n\
    \      if planet1_orbit_distance < planet2_orbit_distance\n        planet1_orbit_distance\
    \ = planet2_orbit_distance\n      end\n      \n      if planet1_orbit_distance\
    \ < planet2_orbit_distance\n        planet1_orbit_distance = planet2_orbit_distance\n\
    \      end\n      \n      if planet1_orbit_distance < planet2_orbit_distance\n\
    \        planet1_orbit_distance = planet2_orbit_distance\n      end\n      \n\
    \      if planet", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2\
    \ = sun.orbit(planet2)\n  \n  orbit1.each do |planet|\n    orbit2.each do |planet|\n\
    \      \n      if planet == planet1\n        \n        if planet == planet2\n\
    \          return [planet]\n        end\n        \n        distance = sun.distance(planet)\n\
    \        \n        if distance < 1\n          return [planet]\n        end\n \
    \       \n      elsif planet == planet2\n        \n        if planet == planet1\n\
    \          return [planet]\n        end\n        \n        distance = sun.distance(planet)\n\
    \        \n        if distance < 1\n          return [planet]\n        end\n \
    \     end\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    return []\n  planet1 = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n\
    \  sun = Planet.find_by_name(\"sun\")\n  orbit1 = planet1.orbit(sun)\n  orbit2\
    \ = planet2.orbit(sun)\n  orbits = orbit1.orbits + orbit2.orbits\n  orbits = orbits.sort_by\
    \ { |orbit| orbit.distance }\n  orbits.reverse!\n  orbits.each { |orbit| puts\
    \ orbit.name }\nend", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  if planet1 == \"SUN\"\n   \
    \ return []\n  \n  if planet2 == \"SUN\"\n    return []\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  if planet1 == \"MERCURY\"\n    return [\"Venus\"]\n  \n\
    \  if planet2 == \"MERCURY\"\n    return [\"Venus\"]\n  \n  if planet1 == \"VENUS\"\
    \n    return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n  \n\
    \  if planet2 == \"VENUS\"\n    return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"]\n  \n  if planet1 == \"EARTH\"\n    return [\"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"]\n  \n  if planet2 == \"EARTH\"\n    return [\"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]\n  \n  if planet1 == \"MARS\"\n    return\
    \ [\"Jupiter\", \"Saturn\", \"Uranus\"]\n  \n  if planet2 == \"MARS\"\n    return\
    \ [\"Jupiter\", \"Saturn\", \"Uranus\"]\n  \n  if planet1 == \"JUPITER\"\n   \
    \ return [\"Saturn\", \"Uranus\"]\n  \n  if planet2 == \"JUPITER\"\n    return\
    \ [\"Saturn\", \"Uranus\"]\n  \n  if planet1 == \"SATURN\"\n    return [\"Uranus\"\
    ]\n  \n  if planet2 == \"SATURN\"\n    return [\"Uranus\"]\n  \n  if planet1 ==\
    \ \"URANUS\"\n    return [\"Neptune\"]\n  \n  if planet2 == \"URANUS\"\n    return\
    \ [\"Neptune\"]\n  \n  if planet1 == \"NEPTUNE\"\n    return []\n  \n  if planet2\
    \ == \"NEPTUNE\"\n    return []\n  \n  if planet1 == \"EARTH\"\n    return [\"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n  \n  if planet2 == \"EARTH\"\n\
    \    return [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n  \n  if planet1\
    \ == \"MARS\"\n    return [\"Jupiter\", \"Saturn\", \"Uranus\"]\n  \n  if ", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit\
    \ = planet2.orbit(planet1)\n  \n  if planet1_orbit == nil\n    return []\n  \n\
    \  if planet2_orbit == nil\n    return []\n  \n  sun_orbit = planet1_orbit.orbit(planet2)\n\
    \  \n  if sun_orbit == nil\n    return []\n  \n  sun_orbit_distance = sun_orbit.distance\n\
    \  \n  planet1_orbit.each do |planet|\n    planet1_orbit_distance = planet.orbit(planet2).distance\n\
    \    \n    if planet1_orbit_distance < sun_orbit_distance\n      sun_orbit_distance\
    \ = planet1_orbit_distance\n    end\n  end\n  \n  planet1_orbit.each do |planet|\n\
    \    planet1_orbit_distance = planet.orbit(planet2).distance\n    \n    if planet1_orbit_distance\
    \ < sun_orbit_distance\n      sun_orbit_distance = planet1_orbit_distance\n  \
    \  end\n  end\n  \n  sun_orbit_distance = sun_orbit.distance\n  \n  planet1_orbit.each\
    \ do |planet|\n    planet1_orbit_distance = planet.orbit(planet2).distance\n \
    \   \n    if planet1_orbit_distance < sun_orbit_distance\n      sun_orbit_distance\
    \ = planet1_orbit_distance\n    end\n  end\n  \n  sun_orbit_distance = sun_orbit.distance\n\
    \  \n  planet1_orbit.each do |planet|\n    planet1_orbit_distance = planet.orbit(planet2).distance\n\
    \    \n    if planet1_orbit_distance < sun_orbit_distance\n      sun_orbit_distance\
    \ = planet1_orbit_distance\n    end\n  end\n  \n  sun_orbit_distance = sun_orbit.distance\n\
    \  \n  planet1_orbit.each do |planet|\n    planet1_orbit_distance = planet.orbit(planet2).distance\n\
    \    \n    if planet1_orbit_distance < sun_orbit_distance\n      sun_orbit_distance\
    \ = planet1_orbit_distance\n    end\n  end\n  \n  sun_orbit_distance = sun_orbit.distance\n\
    \  \n  planet1_orbit.each do |planet|\n    planet1_or", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  if planet1 == planet2\n    return []\n  \n  planet1_orbit\
    \ = planet1.orbit(planet2)\n  planet2_orbit = planet2.orbit(planet1)\n  \n  planet1_sun\
    \ = planet1.orbit(\"Sun\")\n  planet2_sun = planet2.orbit(\"Sun\")\n  \n  planet1_orbit.each\
    \ do |planet|\n    if planet == planet1_sun\n      return [planet]\n    end\n\
    \  end\n  \n  planet2_orbit.each do |planet|\n    if planet == planet2_sun\n \
    \     return [planet]\n    end\n  end\n  \n  return []\nend", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n\
    \  planet2 = planet2.gsub(/[^A-Z]/, \"\")\n  \n  if planet1 == planet2\n    return\
    \ []\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  \n  ", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \    \n    planet1 = planet1.downcase\n    planet2 = planet2.downcase\n    \n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    \n  \
    \  planet1 = planet1.gsub(\"_\", \" \")\n    planet2 = planet2.gsub(\"_\", \"\
    \ \")\n    \n    planet1 = planet1.gsub(\",\", \" \")\n    planet2 = planet2.gsub(\"\
    ,\", \" \")\n    \n    planet1 = planet1.gsub(\"'\", \" \")\n    planet2 = planet2.gsub(\"\
    '\", \" \")\n    \n    planet1 = planet1.gsub(\"\\\"\", \" \")\n    planet2 =\
    \ planet2.gsub(\"\\\"\", \" \")\n    \n    planet1 = planet1.gsub(\"\\\"\", \"\
    \ \")\n    planet2 = planet2.gsub(\"\\\"\", \" \")\n    \n    planet1 = planet1.gsub(\"\
    \\\"\", \" \")\n    planet2 = planet2.gsub(\"\\\"\", \" \")\n    \n    planet1\
    \ = planet1.gsub(\"\\\"\", \" \")\n    planet2 = planet2.gsub(\"\\\"\", \" \"\
    )\n    \n    planet1 = planet1.gsub(\"\\\"\", \" \")\n    planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n    \n    planet1 = planet1.gsub(\"\\\"\", \" \")\n    planet2\
    \ = planet2.gsub(\"\\\"\", \" \")\n    \n    planet1 = planet1.gsub(\"\\\"\",\
    \ \" \")\n    planet2 = planet2.gsub(\"\\\"\", \" \")\n    \n    planet1 = planet1.gsub(\"\
    \\\"\", \" \")\n    planet2 = planet2.gsub(\"\\\"\", \" \")\n    \n    planet1\
    \ = planet1.gsub(\"\\\"\", \" \")\n    planet2 = planet2.gsub(\"\\\"\", \" \"\
    )\n    \n    planet1 = planet1.gsub(\"\\\"\", \" \")\n    planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n    \n    planet1 = planet1.gsub(\"\\\"\", \" \")\n    planet2\
    \ = planet2.gsub(\"\\\"\", \" \")\n    \n    planet1 = planet1.gsub(\"\\\"\",\
    \ \" \")\n    planet2 = planet2.gsub(\"\\\"\", \" \")\n    \n", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  orbit1 = orbit(planet1)\n\
    \  orbit2 = orbit(planet2)\n  \n  orbit1.each do |planet|\n    if planet == planet2\n\
    \      return [planet]\n    end\n  end\n  \n  orbit2.each do |planet|\n    if\
    \ planet == planet1\n      return [planet]\n    end\n  end\n  \n  []\nend", " \
    \   planet1 = planet1.downcase\n    planet2 = planet2.downcase\n    if planet1\
    \ == planet2\n        return ()\n    \n    planet1_orbit = planet1.to_sym\n  \
    \  planet2_orbit = planet2.to_sym\n    \n    planet1_orbits = planet1_orbit.to_a\n\
    \    planet2_orbits = planet2_orbit.to_a\n    \n    planet1_orbits.each do |planet1_orbit|\n\
    \        planet2_orbits.each do |planet2_orbit|\n            distance = planet1_orbit.to_i\
    \ - planet2_orbit.to_i\n            if distance < 0\n                planet1_orbits.delete(planet1_orbit)\n\
    \                planet2_orbits.delete(planet2_orbit)\n            end\n     \
    \   end\n    end\n    \n    planet1_orbits.sort!\n    planet2_orbits.sort!\n \
    \   \n    return planet1_orbits + planet2_orbits\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any gems. I appreciate\
    \ your effort though.\n<|/ c |>\n<| c |>\nI updated my answer to include a solution\
    \ that doesn't use any gems.\n<|/ c |>\n<| c |>\nThanks again. I am not allowed\
    \ to use any gems. I appreciate your effort though.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that doesn't use any gems.\n<|/ c |>\n<| c |>\n\
    Thanks again. I am not allowed to use any gems. I appreciate your effort though.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<code>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = ", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  sun = Sun.new\n\
    \  sun_planets = sun.planets\n  sun_planets.each do |planet|\n    if planet.name\
    \ == planet1\n      sun_planets.delete(planet)\n    elsif planet.name == planet2\n\
    \      sun_planets.delete(planet)\n    end\n  end\n  sun_planets.each do |planet|\n\
    \    distance = planet.orbit(sun).to_a\n    distance = distance.sort\n    distance\
    \ = distance.first\n    if distance == 0\n      sun_planets.delete(planet)\n \
    \   end\n  end\n  sun_planets.sort!\n  return sun_planets\nend\n</code>\n<|/ a\
    \ tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nThanks for your answer.\
    \ I'm still trying to understand how this works. I understand that you're using\
    \ sun_planets.each to loop through each planet and delete it from the array. How\
    \ does this work? What does it mean to delete a planet from the array? How does\
    \ it know which planet to delete? What does it mean to delete a planet from the\
    \ array? What does it mean to delete a planet from the array? What does it mean\
    \ to delete a planet from the array? What does it mean to delete a planet from\
    \ the array? What does it mean to delete a planet from the array? What does it\
    \ mean to delete a planet from the array? What does it mean to delete a planet\
    \ from the array? What does it mean to delete a planet from the array? What does\
    \ it mean to delete a planet from the array? What does it mean to delete a planet\
    \ from the array? What does it mean to delete a planet from the array? What does\
    \ it mean to delete a planet from the array? What does it mean to delete a planet\
    \ from the array? What does it mean to delete a planet from the array? What does\
    \ it mean to delete a planet from the array? What does it mean to delete a planet\
    \ from the array? What does it mean to delete a planet from the array? ", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1.include? \"mercury\"\
    \ \n    planet1 = \"Mercury\"\n  elsif planet1.include? \"venus\"\n    planet1\
    \ = \"Venus\"\n  elsif planet1.include? \"earth\"\n    planet1 = \"Earth\"\n \
    \ elsif planet1.include? \"mars\"\n    planet1 = \"Mars\"\n  elsif planet1.include?\
    \ \"jupiter\"\n    planet1 = \"Jupiter\"\n  elsif planet1.include? \"saturn\"\n\
    \    planet1 = \"Saturn\"\n  elsif planet1.include? \"uranus\"\n    planet1 =\
    \ \"Uranus\"\n  elsif planet1.include? \"neptune\"\n    planet1 = \"Neptune\"\n\
    \  elsif planet2.include? \"mercury\"\n    planet2 = \"Mercury\"\n  elsif planet2.include?\
    \ \"venus\"\n    planet2 = \"Venus\"\n  elsif planet2.include? \"earth\"\n   \
    \ planet2 = \"Earth\"\n  elsif planet2.include? \"mars\"\n    planet2 = \"Mars\"\
    \n  elsif planet2.include? \"jupiter\"\n    planet2 = \"Jupiter\"\n  elsif planet2.include?\
    \ \"saturn\"\n    planet2 = \"Saturn\"\n  elsif planet2.include? \"uranus\"\n\
    \    planet2 = \"Uranus\"\n  elsif planet2.include? \"neptune\"\n    planet2 =\
    \ \"Neptune\"\n  else\n    return []\n  end\n  \n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  \n  orbit1 = planet1.orbit\n  orbit2\
    \ = planet2.orbit\n  \n  distance = orbit1.distance_to(orbit2)\n  \n  planets\
    \ = []\n  \n  while distance > 0\n    planets << planet1\n    planet1 = planet1.orbit\n\
    \    distance = distance - 1\n  end\n  \n  planets << planet2\n  \n  planets.sort!\n\
    \  \n  return planets\nend\n</code>", "  planet1 = planet1.upcase\n  planet2 =\
    \ planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 =\
    \ planet1.capitalize\n  planet2 = planet2.capitalize\n  \n  planet1 = planet1.gsub(\"\
    Mercury\", \"Mercury\")\n  planet1 = planet1.gsub(\"Venus\", \"Venus\")\n  planet1\
    \ = planet1.gsub(\"Earth\", \"Earth\")\n  planet1 = planet1.gsub(\"Mars\", \"\
    Mars\")\n  planet1 = planet1.gsub(\"Jupiter\", \"Jupiter\")\n  planet1 = planet1.gsub(\"\
    Saturn\", \"Saturn\")\n  planet1 = planet1.gsub(\"Uranus\", \"Uranus\")\n  planet1\
    \ = planet1.gsub(\"Neptune\", \"Neptune\")\n  \n  planet2 = planet2.gsub(\"Mercury\"\
    , \"Mercury\")\n  planet2 = planet2.gsub(\"Venus\", \"Venus\")\n  planet2 = planet2.gsub(\"\
    Earth\", \"Earth\")\n  planet2 = planet2.gsub(\"Mars\", \"Mars\")\n  planet2 =\
    \ planet2.gsub(\"Jupiter\", \"Jupiter\")\n  planet2 = planet2.gsub(\"Saturn\"\
    , \"Saturn\")\n  planet2 = planet2.gsub(\"Uranus\", \"Uranus\")\n  planet2 = planet2.gsub(\"\
    Neptune\", \"Neptune\")\n  \n  planet1 = planet1.gsub(\"Mercury\", \"Mercury\"\
    )\n  planet1 = planet1.gsub(\"Venus\", \"Venus\")\n  planet1 = planet1.gsub(\"\
    Earth\", \"Earth\")\n  planet1 = planet1.gsub(\"Mars\", \"Mars\")\n  planet1 =\
    \ planet1.gsub(\"Jupiter\", \"Jupiter\")\n  planet1 = planet1.gsub(\"Saturn\"\
    , \"Saturn\")\n  planet1 = planet1.gsub(\"Uranus\", \"Uranus\")\n  planet1 = planet1.gsub(\"\
    Neptune\", \"Neptune\")\n  \n  planet2 = planet2.gsub(\"Mercury\", \"Mercury\"\
    )\n  planet2 = planet2.gsub(\"Venus\", \"Ven", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[\\s\\W]/, \"\")\n  planet2\
    \ = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\"\
    )\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  plan", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planets = planet1.to_i + planet2.to_i\n  planets.times\
    \ do |i|\n    planet = planets.to_s[0...i]\n    planet = planet.gsub(/[^A-Z]/,\
    \ \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.gsub(/\\\
    s+/, \"\")\n    planet = planet.gsub(/\\s+/, \"\")\n    planet = planet.", " \
    \   planet1 = planet1.downcase\n    planet2 = planet2.downcase\n    \n    planet1_orbit\
    \ = planet1.orbit(planet2)\n    planet2_orbit = planet2.orbit(planet1)\n    \n\
    \    planet1_sun = planet1.orbit(\"Sun\")\n    planet2_sun = planet2.orbit(\"\
    Sun\")\n    \n    planet1_planet = planet1.orbit(planet2)\n    planet2_planet\
    \ = planet2.orbit(planet1)\n    \n    planet1_planet_sun = planet1.orbit(planet2)\n\
    \    planet2_planet_sun = planet2.orbit(planet1)\n    \n    planet1_planet_planet\
    \ = planet1.orbit(planet2)\n    planet2_planet_planet = planet2.orbit(planet1)\n\
    \    \n    planet1_planet_planet_sun = planet1.orbit(planet2)\n    planet2_planet_planet_sun\
    \ = planet2.orbit(planet1)\n    \n    planet1_planet_planet_planet = planet1.orbit(planet2)\n\
    \    planet2_planet_planet_planet = planet2.orbit(planet1)\n    \n    planet1_planet_planet_planet_sun\
    \ = planet1.orbit(planet2)\n    planet2_planet_planet_planet_sun = planet2.orbit(planet1)\n\
    \    \n    planet1_planet_planet_planet_planet = planet1.orbit(planet2)\n    planet2_planet_planet_planet_planet\
    \ = planet2.orbit(planet1)\n    \n    planet1_planet_planet_planet_planet_sun\
    \ = planet1.orbit(planet2)\n    planet2_planet_planet_planet_planet_sun = planet2.orbit(planet1)\n\
    \    \n    planet1_planet_planet_planet_planet_planet = planet1.orbit(planet2)\n\
    \    planet2_planet_planet_planet_planet_planet = planet2.orbit(planet1)\n   \
    \ \n    planet1_planet_planet_planet_planet_planet_sun = planet1.orbit(planet2)\n\
    \    planet2_planet_planet_planet_planet_planet_sun = planet2.orbit(planet1)\n",
  "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planets = Array.new\n\
    \    planets.push planet1\n    planets.push planet2\n    planets.each do |planet|\n\
    \        planet = planet.upcase\n        planet = planet.to_sym\n        planet\
    \ = planet.to_s\n        planet = planet.to_i\n        planet = planet.to_f\n\
    \        planet = planet.to_a\n        planet = planet.to_h\n        planet =\
    \ planet.to_g\n        planet = planet.to_t\n        planet = planet.to_s\n  \
    \      planet = planet.to_n\n        planet = planet.to_l\n        planet = planet.to_k\n\
    \        planet = planet.to_m\n        planet = planet.to_a\n        planet =\
    \ planet.to_p\n        planet = planet.to_d\n        planet = planet.to_s\n  \
    \      planet = planet.to_u\n        planet = planet.to_r\n        planet = planet.to_e\n\
    \        planet = planet.to_c\n        planet = planet.to_a\n        planet =\
    \ planet.to_r\n        planet = planet.to_t\n        planet = planet.to_n\n  \
    \      planet = planet.to_l\n        planet = planet.to_k\n        planet = planet.to_m\n\
    \        planet = planet.to_a\n        planet = planet.to_p\n        planet =\
    \ planet.to_d\n        planet = planet.to_s\n        planet = planet.to_u\n  \
    \      planet = planet.to_r\n        planet = planet.to_e\n        planet = planet.to_c\n\
    \        planet = planet.to_a\n        planet = planet.to_r\n        planet =\
    \ planet.to_t\n        planet = planet.to_n\n        planet = planet.to_l\n  \
    \      planet = planet.to_k\n        planet = planet.to_m\n        planet = planet.to_a\n\
    \        planet = planet.to_p\n        planet = planet.to_d\n        planet =\
    \ planet.to_s\n        planet = planet.to_u\n        planet = planet.to_r\n  \
    \      planet = planet.to_", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(\"_\", \" \")\n  planet2 = planet2.gsub(\"_\", \" \"\
    )\n  planet1 = planet1.gsub(\",\", \" \")\n  planet2 = planet2.gsub(\",\", \"\
    \ \")\n  planet1 = planet1.gsub(\"'\", \" \")\n  planet2 = planet2.gsub(\"'\"\
    , \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = planet2.gsub(\"\
    \\\"\", \" \")\n  planet1 = planet1.gsub(\"\\\"\", \" \")\n  planet2 = ", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n    return\
    \ []\n  planets = planet1.upcase + planet2.upcase\n  planets.each_char.with_index\
    \ do |planet, index|\n    planets[index] = planet.upcase\n  end\n  planets.each_char.with_index\
    \ do |planet, index|\n    planets[index] = planet.downcase\n  end\n  planets.each_char.with_index\
    \ do |planet, index|\n    planets[index] = planet.capitalize\n  end\n  planets.each_char.with_index\
    \ do |planet, index|\n    planets[index] = planet.gsub(\" \", \"_\")\n  end\n\
    \  planets.each_char.with_index do |planet, index|\n    planets[index] = planet.gsub(\"\
    \ \", \"_\")\n  end\n  planets.each_char.with_index do |planet, index|\n    planets[index]\
    \ = planet.gsub(\" \", \"_\")\n  end\n  planets.each_char.with_index do |planet,\
    \ index|\n    planets[index] = planet.gsub(\" \", \"_\")\n  end\n  planets.each_char.with_index\
    \ do |planet, index|\n    planets[index] = planet.gsub(\" \", \"_\")\n  end\n\
    \  planets.each_char.with_index do |planet, index|\n    planets[index] = planet.gsub(\"\
    \ \", \"_\")\n  end\n  planets.each_char.with_index do |planet, index|\n    planets[index]\
    \ = planet.gsub(\" \", \"_\")\n  end\n  planets.each_char.with_index do |planet,\
    \ index|\n    planets[index] = planet.gsub(\" \", \"_\")\n  end\n  planets.each_char.with_index\
    \ do |planet, index|\n    planets[index] = planet.gsub(\" \", \"_\")\n  end\n\
    \  planets.each_char.with_index do |planet, index|\n    planets[index] = planet.gsub(\"\
    \ \", \"_\")\n  end\n  planets.each_char.with_index do |planet, index|\n    planets[index]\
    \ = planet.gsub(\" \", \"_\")\n  end\n  planets.each_char.with_index do |planet,\
    \ index|\n    planets[index] = planet.gsub(\" ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    []\n  elsif planet1.length\
    \ != 3 || planet2.length != 3\n    []\n  else\n    planet1.each_char.with_index\
    \ do |char, i|\n      planet2.each_char.with_index do |char2, j|\n        if char\
    \ == char2\n          distance = (i - j).abs\n          distance.zero? ? [] :\
    \ [planet1, planet2]\n        end\n      end\n    end\n  end\nend\n</code>\n<|/\
    \ a tags=ruby,arrays |>\n<| c |>\nI like your solution, however I believe that\
    \ your solution will fail for example `bf.call(\"Earth\", \"Mercury\")` because\
    \ `Mercury` doesn't exist in `Earth`.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I edited my answer to fix this issue.\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution that doesn't use any loops.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do |planet|\n\
    \    orbit2.each do |planet2|\n      if planet == planet2\n        return [(planet)]\n\
    \      end\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  orbit1 = planet1.orbit\n  orbit2\
    \ = planet2.orbit\n  sun = Planet.find_by_name(\"Sun\")\n  orbits = orbit1.orbit\
    \ + orbit2.orbit\n  orbits.sort!\n  orbits.reverse!\n  orbits.each do |orbit|\n\
    \    if orbit == sun\n      break\n    end\n    distance = orbit - sun\n    if\
    \ distance < 0\n      distance = -distance\n    end\n    if distance < 0\n   \
    \   distance = -distance\n    end\n    if distance < 0\n      distance = -distance\n\
    \    end\n    if distance < 0\n      distance = -distance\n    end\n    if distance\
    \ < 0\n      distance = -distance\n    end\n    if distance < 0\n      distance\
    \ = -distance\n    end\n    if distance < 0\n      distance = -distance\n    end\n\
    \    if distance < 0\n      distance = -distance\n    end\n    if distance < 0\n\
    \      distance = -distance\n    end\n    if distance < 0\n      distance = -distance\n\
    \    end\n    if distance < 0\n      distance = -distance\n    end\n    if distance\
    \ < 0\n      distance = -distance\n    end\n    if distance < 0\n      distance\
    \ = -distance\n    end\n    if distance < 0\n      distance = -distance\n    end\n\
    \    if distance < 0\n      distance = -distance\n    end\n    if distance < 0\n\
    \      distance = -distance\n    end\n    if distance < 0\n      distance = -distance\n\
    \    end\n    if distance < 0\n      distance = -distance\n    end\n    if distance\
    \ < 0\n      distance = -distance\n    end\n    if distance < 0\n      distance\
    \ = -distance\n    end\n    if distance < 0\n      distance = -distance\n    end\n\
    \    if distance < 0\n      distance = -distance\n    end\n    if distance < 0\n\
    \      distance = -distance\n    end\n    if distance < 0\n      distance = -distance\n\
    \    end\n    if distance < 0\n      distance = -distance\n    end\n    if distance\
    \ < 0\n      distance = -distance\n    end\n    if distance < 0\n      distance\
    \ = -distance\n    end\n    if distance < 0\n      distance = -distance\n    end\n\
    \    if distance < 0\n      distance = -distance\n    end\n    if distance < 0\n\
    \      distance = -distance", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.g", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_f\n\
    \  planet2 = planet2.to_f\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_f\n\
    \  planet2 = planet2.to_f\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_f\n\
    \  planet2 = planet2.to_f\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_f\n\
    \  planet2 = planet2.to_f\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_f\n\
    \  planet2 = planet2.to_f\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_f\n\
    \  planet2 = planet2.to_f\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_f\n\
    \  planet2 = planet2.to_f\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_i\n  planet2 = ", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  \n  if planet1 == planet2\n    return []\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1.eql?(:mercury)\n\
    \    planet1 = :earth\n  elsif planet1.eql?(:venus)\n    planet1 = :mars\n  elsif\
    \ planet1.eql?(:earth)\n    planet1 = :jupiter\n  elsif planet1.eql?(:mars)\n\
    \    planet1 = :saturn\n  elsif planet1.eql?(:jupiter)\n    planet1 = :uranus\n\
    \  elsif planet1.eql?(:saturn)\n    planet1 = :neptune\n  elsif planet1.eql?(:uranus)\n\
    \    planet1 = :neptune\n  elsif planet1.eql?(:neptune)\n    planet1 = :uranus\n\
    \  elsif planet1.eql?(:pluto)\n    planet1 = :pluto\n  elsif planet1.eql?(:aries)\n\
    \    planet1 = :aries\n  elsif planet1.eql?(:taurus)\n    planet1 = :taurus\n\
    \  elsif planet1.eql?(:gemini)\n    planet1 = :gemini\n  elsif planet1.eql?(:cancer)\n\
    \    planet1 = :cancer\n  elsif planet1.eql?(:leo)\n    planet1 = :leo\n  elsif\
    \ planet1.eql?(:virgo)\n    planet1 = :virgo\n  elsif planet1.eql?(:libra)\n \
    \   planet1 = :libra\n  elsif planet1.eql?(:scorpio)\n    planet1 = :scorpio\n\
    \  elsif planet1.eql?(:sagitta)\n    planet1 = :sagitta\n  elsif planet1.eql?(:capricorn)\n\
    \    ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1_orbit = planet1.orbit(planet2)\n\
    \  planet2_orbit = planet2.orbit(planet1)\n  \n  planet1_orbit.each do |planet|\n\
    \    planet1_orbit_distance = planet.distance_to(planet2)\n    planet2_orbit_distance\
    \ = planet2_orbit.distance_to(planet)\n    \n    if planet1_orbit_distance < planet2_orbit_distance\n\
    \      puts planet\n    end\n  end\n  \n  planet1_orbit.empty? ? [] : planet1_orbit.sort_by{|planet|\
    \ planet.distance_to(planet2)}\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer! I appreciate it! I ran the code and it returned an empty array\
    \ for me. I'm going to try and debug it a bit more and see if I can figure it\
    \ out. Thanks again!\n<|/ c |>\n<| c |>\nI added some comments to the code. Let\
    \ me know if that helps.\n<|/ c |>\n<| c |>\nThanks for your help! I appreciate\
    \ it! I ran the code and it returned an empty array for me. I'm going to try and\
    \ debug it a bit more and see if I can figure it out. Thanks again!\n<|/ c |>\n\
    <| c |>\nI added some comments to the code. Let me know if that helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your help! I appreciate it! I ran the code and it returned\
    \ an empty array for me. I'm going to try and debug it a bit more and see if I\
    \ can figure it out. Thanks again!\n<|/ c |>\n<| a dscore=1 |>\nI wrote a little\
    \ script to help you with your problem:\n<code>\nrequire 'astronomer'", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    planet1 = \"Earth\"\n    planet2 = \"Earth\"\n  el1 = planets.assoc(planet1,\
    \ \"Earth\")\n  el2 = planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1,\
    \ \"Earth\")\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"\
    Earth\")\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"Earth\"\
    )\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"Earth\")\n\
    \  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2,\
    \ \"Earth\")\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"\
    Earth\")\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"Earth\"\
    )\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"Earth\")\n\
    \  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1,\
    \ \"Earth\")\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"\
    Earth\")\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"Earth\"\
    )\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"Earth\")\n\
    \  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2,\
    \ \"Earth\")\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"\
    Earth\")\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"Earth\"\
    )\n  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"Earth\")\n\
    \  planets.assoc(planet1, \"Earth\")\n  planets.assoc(planet2, \"Earth\")\n  planets.assoc(planet",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1.nil?\
    \ or planet2.nil?\n    return []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  if planet1.empty? or planet2.empty?\n    return []\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1.nil? or planet2.nil?\n    return []\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  if planet1.empty? or planet2.empty?\n\
    \    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1.nil?\
    \ or planet2.nil?\n    return []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  if planet1.empty? or planet2.empty?\n    return []\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1.nil? or planet2.nil?\n    return []\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  if planet1.empty? or planet2.empty?\n\
    \    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1.nil?\
    \ or planet2.nil?\n    return []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  if planet1.empty? or planet2.empty?\n    return []\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1.nil? or planet2.nil?\n    return []\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  if planet1.empty? or planet2.empty?\n\
    \    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1.nil?\
    \ or planet2.nil?\n    return []\n  planet1 = planet1.to_s\n  planet", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  \n  planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit\
    \ = planet2.orbit(planet1)\n  \n  if planet1_orbit.nil? or planet2_orbit.nil?\n\
    \    return []\n  end\n  \n  planet1_orbit.each do |planet|\n    planet1_orbit_planet\
    \ = planet.orbit(planet2)\n    planet2_orbit_planet = planet.orbit(planet1)\n\
    \    \n    if planet1_orbit_planet.nil? or planet2_orbit_planet.nil?\n      return\
    \ []\n    end\n    \n    planet1_orbit_planet.each do |planet|\n      planet1_orbit_planet_planet\
    \ = planet.orbit(planet2)\n      planet2_orbit_planet_planet = planet.orbit(planet1)\n\
    \      \n      if planet1_orbit_planet_planet.nil? or planet2_orbit_planet_planet.nil?\n\
    \        return []\n      end\n      \n      planet1_orbit_planet_planet.each\
    \ do |planet|\n        planet1_orbit_planet_planet_planet = planet.orbit(planet2)\n\
    \        planet2_orbit_planet_planet_planet = planet.orbit(planet1)\n        \n\
    \        if planet1_orbit_planet_planet_planet.nil? or planet2_orbit_planet_planet_planet.nil?\n\
    \          return []\n        end\n        \n        planet1_orbit_planet_planet_planet.each\
    \ do |planet|\n          planet1_orbit_planet_planet_planet_planet = planet.orbit(planet2)\n\
    \          planet2_orbit_planet_planet_planet_planet = planet.orbit(planet1)\n\
    \          \n          if planet1_orbit_planet_planet_planet_planet.nil? or planet2_orbit_planet_planet_planet_planet.nil?\n\
    \            return []\n          end\n        end\n      end\n    end\n  end\n\
    end\n</cell>\n<cell>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == :mercury\n    planet1 = :earth\n\
    \  elsif planet2 == :mercury\n    planet2 = :earth\n  elsif planet1 == :earth\n\
    \    planet1 = :mars\n  elsif planet2 == :earth\n    planet2 = :mars\n  elsif\
    \ planet1 == :mars\n    planet1 = :jupiter\n  elsif planet2 == :mars\n    planet2\
    \ = :jupiter\n  elsif planet1 == :jupiter\n    planet1 = :saturn\n  elsif planet2\
    \ == :jupiter\n    planet2 = :saturn\n  elsif planet1 == :saturn\n    planet1\
    \ = :uranus\n  elsif planet2 == :saturn\n    planet2 = :uranus\n  elsif planet1\
    \ == :uranus\n    planet1 = :neptune\n  elsif planet2 == :uranus\n    planet2\
    \ = :neptune\n  elsif planet1 == :neptune\n    planet1 = :mercury\n  elsif planet2\
    \ == :neptune\n    planet2 = :mercury\n  else\n    return []\n  end\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  orbit1 = planet1.orbit(planet2)\n\
    \  orbit2 = planet2.orbit(planet1)\n  \n  orbit1.each do |orbit|\n    if orbit.distance\
    \ < orbit2.distance\n      orbit.distance += orbit2.distance\n      orbit.planets\
    \ << planet2\n      orbit2.planets << planet1\n    end\n  end\n  \n  orbit1.sort_by\
    \ { |orbit| orbit.distance }\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ answer! I understand your solution, but I still don't understand why my code\
    \ doesn't work. Could you please explain why my code doesn't work?\n<|/ c |>\n",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  planet1_orbit\
    \ = planet1_orbits[planet1]\n  planet2_orbit = planet2_orbits[planet2]\n  \n \
    \ orbits = planet1_orbit + planet2_orbit\n  \n  orbits.sort!\n  \n  orbits.each\
    \ do |orbit|\n    if orbit == sun\n      break\n    end\n  end\n  \n  orbits\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer.\
    \ I'm still a bit confused though. How would I go about doing this in rails?\n\
    <|/ c |>\n<| c |>\nI added a Rails solution to my answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I'm still a bit confused though. How would I go about\
    \ doing this in rails?\n<|/ c |>\n<| c |>\nI added a Rails solution to my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm still a bit confused though. How\
    \ would I go about doing this in rails?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  sun = Sun.new\n  sun_distance\
    \ = sun.distance_to(planet1)\n  sun_distance = sun_distance.round(2)\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance / 1000\n  sun_distance =\
    \ sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_i\n  sun", "  planet1 = planet1.downcase\n \
    \ planet2 = planet2.downcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  orbit1 = planet1.orbit(planet2)\n\
    \  orbit2 = planet2.orbit(planet1)\n  \n  orbit1.each do |o|\n    orbit2.each\
    \ do |o2|\n      if o.distance < o2.distance\n        return [(planet1, planet2)]\n\
    \      end\n    end\n  end\n  \n  return []\nend", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    return []\n  el1 = planet1.to_s\n  el2 = planet2.to_s\n  if el1 == el2\n\
    \    return []\n  el1 = el1.to_sym\n  el2 = el2.to_sym\n  if el1 == el2\n    return\
    \ []\n  el1 = el1.to_s\n  el2 = el2.to_s\n  if el1 == el2\n    return []\n  el1\
    \ = el1.to_sym\n  el2 = el2.to_sym\n  if el1 == el2\n    return []\n  el1 = el1.to_s\n\
    \  el2 = el2.to_s\n  if el1 == el2\n    return []\n  el1 = el1.to_sym\n  el2 =\
    \ el2.to_sym\n  if el1 == el2\n    return []\n  el1 = el1.to_s\n  el2 = el2.to_s\n\
    \  if el1 == el2\n    return []\n  el1 = el1.to_sym\n  el2 = el2.to_sym\n  if\
    \ el1 == el2\n    return []\n  el1 = el1.to_s\n  el2 = el2.to_s\n  if el1 == el2\n\
    \    return []\n  el1 = el1.to_sym\n  el2 = el2.to_sym\n  if el1 == el2\n    return\
    \ []\n  el1 = el1.to_s\n  el2 = el2.to_s\n  if el1 == el2\n    return []\n  el1\
    \ = el1.to_sym\n  el2 = el2.to_sym\n  if el1 == el2\n    return []\n  el1 = el1.to_s\n\
    \  el2 = el2.to_s\n  if el1 == el2\n    return []\n  el1 = el1.to_sym\n  el2 =\
    \ el2.to_sym\n  if el1 == el2\n    return []\n  el1 = el1.to_s\n  el2 = el2.to_s\n\
    \  if el1 == el2\n    return []\n  el1 = el1.to_sym\n  el2 = el2.to_sym\n  if\
    \ el1 == el2\n    return []\n  el1 = el1.to_s\n  el2 = el2.to_s\n  if el1 == el2\n\
    \    return []\n  el1 = el1.to_sym\n  el2 = el2.to_sym\n", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  if planet1 == planet2\n    puts \"The planets\
    \ are the same\"\n  elsif planet1.empty? || planet2.empty?\n    puts \"The planets\
    \ are empty\"\n  elsif planet1.empty? && planet2.empty?\n    puts \"The planets\
    \ are the same\"\n  elsif planet1.empty? || planet2.empty?\n    puts \"The planets\
    \ are empty\"\n  elsif planet1 == planet2\n    puts \"The planets are the same\"\
    \n  elsif planet1.empty? || planet2.empty?\n    puts \"The planets are empty\"\
    \n  elsif planet1 == planet2\n    puts \"The planets are the same\"\n  elsif planet1.empty?\
    \ || planet2.empty?\n    puts \"The planets are empty\"\n  elsif planet1 == planet2\n\
    \    puts \"The planets are the same\"\n  elsif planet1.empty? || planet2.empty?\n\
    \    puts \"The planets are empty\"\n  elsif planet1 == planet2\n    puts \"The\
    \ planets are the same\"\n  elsif planet1.empty? || planet2.empty?\n    puts \"\
    The planets are empty\"\n  elsif planet1 == planet2\n    puts \"The planets are\
    \ the same\"\n  elsif planet1.empty? || planet2.empty?\n    puts \"The planets\
    \ are empty\"\n  elsif planet1 == planet2\n    puts \"The planets are the same\"\
    \n  elsif planet1.empty? || planet2.empty?\n    puts \"The planets are empty\"\
    \n  elsif planet1 == planet2\n    puts \"The planets are the same\"\n  elsif planet1.empty?\
    \ || planet2.empty?\n    puts \"The planets are empty\"\n  elsif planet1 == planet2\n\
    \    puts \"The planets are the same\"\n  elsif planet1.empty? || planet2.empty?\n\
    \    puts \"The planets are empty\"\n  elsif planet1 == planet2\n    puts \"The\
    \ planets are ", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  if\
    \ planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1.nil? or planet2.nil?\n    return []\n  else\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = Planet.find_by_name(planet1)\n    planet2\
    \ = Planet.find_by_name(planet2)\n    if planet1.nil? or planet2.nil?\n      return\
    \ []\n    else\n      planet1 = planet1.orbit(planet2)\n      planet2 = planet2.orbit(planet1)\n\
    \      planet1 = planet1.sort_by(&:distance_to_sun)\n      planet2 = planet2.sort_by(&:distance_to_sun)\n\
    \      return planet1 + planet2\n    end\n  end\nend\n</code>\n<|/ q tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nPlease read \"[mcve]\". Your code is not minimal, complete, or\
    \ verifiable. For example, there is no `Planet` class in your code. Also, there\
    \ is no `Planet` class in the Rails API. Your code does not run. Also, there is\
    \ no `bf.call` method in your code. Your code does not run. Also, there is no\
    \ `bf.call` method in your code. Your code does not run. Also, there is no `bf.call`\
    \ method in your code. Your code does not run. Also, there is no `bf.call` method\
    \ in your code. Your code does not run. Also, there is no `bf.call` method in\
    \ your code. Your code does not run. Also, there is no `bf.call` method in your\
    \ code. Your code does not run. Also, there is no `bf.call` method in your code.\
    \ Your code does not run. Also, there is no `bf.call` method in your code. Your\
    \ code does not run. Also, there is no `bf.call` method in your code. Your code\
    \ does not run. Also, there is no `bf.call` method in your code. Your code does\
    \ not run. Also, there is no `bf.call` method in your code. Your code does not\
    \ run. Also, there is no `bf.call` method in your code. Your code does not run.\
    \ Also, there is no `bf.call` method in your code. Your code does not run. Also,\
    \ there is no `bf.call` method in your code. Your code does not run. Also, there\
    \ is no `bf.call` method in your code. Your code does not run. ", "  planet1 =\
    \ planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[A-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[A-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = ", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n\
    \  orbit1 = planet1.orbit\n  orbit2 = planet2.orbit\n  sun = Planet.find_by_name(\"\
    Sun\")\n  sun_distance = sun.distance_to(orbit1)\n  sun_distance = sun.distance_to(orbit2)\n\
    \  orbit1_distance = orbit1.distance_to(orbit2)\n  orbit2_distance = orbit2.distance_to(orbit1)\n\
    \  \n  if sun_distance < orbit1_distance\n    orbit1_distance = sun_distance\n\
    \  end\n  if sun_distance < orbit2_distance\n    orbit2_distance = sun_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_distance\n    orbit1_distance = orbit2_distance\n\
    \  end\n  \n  if orbit1_distance < orbit2_", "  planet1 = planet1.downcase\n \
    \ planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2\
    \ = planet2.gsub(/[^A-Z]/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2\
    \ = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/", "    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n    planet1 = planet1.downcase\n    planet2 = planet2.downcase\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.gsub(\"_\", \" \")\n    planet2 = planet2.gsub(\"_\", \" \")\n   \
    \ planet1 = planet1.gsub(\",\", \" \")\n    planet2 = planet2.gsub(\",\", \" \"\
    )\n    planet1 = planet1.gsub(\"'\", \"\")\n    planet2 = planet2.gsub(\"'\",\
    \ \"\")\n    planet1 = planet1.gsub(\"\\\"\", \"\")\n    planet2 = planet2.gsub(\"\
    \\\"\", \"\")\n    planet1 = planet1.gsub(\"\\(\", \"\")\n    planet2 = planet2.gsub(\"\
    \\(\", \"\")\n    planet1 = planet1.gsub(\"\\)\", \"\")\n    planet2 = planet2.gsub(\"\
    \\)\", \"\")\n    planet1 = planet1.gsub(\"\\*\", \"\")\n    planet2 = planet2.gsub(\"\
    \\*\", \"\")\n    planet1 = planet1.gsub(\"\\?\", \"\")\n    planet2 = planet2.gsub(\"\
    \\?\", \"\")\n    planet1 = planet1.gsub(\"\\!\", \"\")\n    planet2 = planet2.gsub(\"\
    \\!\", \"\")\n    planet1 = planet1.gsub(\"\\)\", \"\")\n    planet2 = planet2.gsub(\"\
    \\)\", \"\")\n    planet1 = planet1.gsub(\"\\(\", \"\")\n    planet2 = planet2.gsub(\"\
    \\(\", \"\")\n    planet1 = planet1.gsub(\"\\)\", \"\")\n    planet2 = planet2.gsub(\"\
    \\)\", \"\")\n    planet1 = planet1.gsub(\"\\*\", \"\")\n    planet2 = planet2.gsub(\"\
    \\*\", \"\")\n    planet1 = planet1.gsub(\"\\?\", \"\")\n    planet2 = planet2.gsub(\"\
    \\?\", \"\")\n    planet1 = planet1.gsub(\"\\!\", \"\")\n    planet2 = planet2.gsub(\"\
    \\!\", \"\")\n    planet1 = planet1.gsub(\"\\)\", \"\")\n    planet2 = planet2.gsub(\"\
    \\)\", \"\")\n    planet1 = ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  planets = planet1.upcase + planet2.upcase\n  \n  planets.each do |planet|\n\
    \    planet = planet.downcase\n    \n    planet = planet.gsub(/[^A-Z]/, \"\")\n\
    \    \n    planet = planet.gsub(/[^a-z]/, \"\")\n    \n    planet = planet.gsub(/[^0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z]/, \"\")\n    \n    planet =\
    \ planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet\
    \ = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet\
    \ = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet\
    \ = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet\
    \ = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet\
    \ = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet\
    \ = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n    \n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    \n    planet\
    \ = ", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    plan", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  plan", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  orbit1 = orbit(planet1)\n\
    \  orbit2 = orbit(planet2)\n  \n  orbits = orbit1.orbit + orbit2.orbit\n  \n \
    \ sun = planets.at(\"sun\")\n  \n  orbits.each do |orbit|\n    distance = distance_to(orbit,\
    \ sun)\n    \n    if distance < 1\n      result = [orbit]\n      break\n    end\n\
    \  end\n  \n  result.sort!\n  \n  return result\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you so much for your help! I really appreciate it! I tried\
    \ to run your code, but I got this error: undefined method `orbit' for #<Hash:0x00007f9f54c1eb70>\
    \ Did you mean? orbit_from\n<|/ c |>\n<| c |>\nI fixed the error, but now I got\
    \ this error: undefined method `orbit' for #<Hash:0x00007f9f54c1eb70>\nDid you\
    \ mean?  orbit_from\n<|/ c |>\n<| c |>\nI fixed the error, but now I got this\
    \ error: undefined method `orbit' for #<Hash:0x00007f9f54c1eb70>\nDid you mean?\
    \  orbit_from\n<|/ c |>\n<| c |>\nI fixed the error, but now I got this error:\
    \ undefined method `orbit' for #<Hash:0x00007f9f54c1eb70>\nDid you mean?  orbit_from\n\
    <|/ c |>\n<| c |>\nI fixed the error, but now I got this error: undefined method\
    \ `orbit' for #<Hash:0x00007f9f54c1eb70>\nDid you mean?  orbit_from\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1\
    \ == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ if planet1 == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do |planet|\n\
    \    orbit2.each do |planet|\n      if planet == planet1\n        next if planet\
    \ == planet2\n      elsif planet == planet2\n        next if planet == planet1\n\
    \      end\n      \n      distance = distance_to(planet, planet1)\n      \n  \
    \    if distance < 0\n        distance = distance_to(planet, planet2)\n      end\n\
    \      \n      if distance < 0\n        distance = distance_to(planet2, planet1)\n\
    \      end\n      \n      if distance < 0\n        distance = distance_to(planet1,\
    \ planet2)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet2,\
    \ planet1)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet1,\
    \ planet2)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet2,\
    \ planet1)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet1,\
    \ planet2)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet2,\
    \ planet1)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet1,\
    \ planet2)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet2,\
    \ planet1)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet1,\
    \ planet2)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet2,\
    \ planet1)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet1,\
    \ planet2)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet2,\
    \ planet1)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet1,\
    \ planet2)\n      end\n      \n      if distance < 0\n        distance = distance_to(planet2,\
    \ planet1)\n      end\n      \n      if distance < 0\n        distance = distance_",
  "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    if planet1 == planet2\n        return ()\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = ", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    planets = []\n  elsif\
    \ planet1.include? \"mercury\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"venus\"\n    planets = [planet1]\n  elsif planet1.include? \"earth\"\n   \
    \ planets = [planet1]\n  elsif planet1.include? \"mars\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"jupiter\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"saturn\"\n    planets = [planet1]\n  elsif planet1.include? \"uranus\"\n \
    \   planets = [planet1]\n  elsif planet1.include? \"neptune\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"pluto\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"charon\"\n    planets = [planet1]\n  elsif planet1.include? \"pluto\"\n  \
    \  planets = [planet1]\n  elsif planet1.include? \"charon\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"mercury\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"venus\"\n    planets = [planet1]\n  elsif planet1.include? \"earth\"\n   \
    \ planets = [planet1]\n  elsif planet1.include? \"mars\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"jupiter\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"saturn\"\n    planets = [planet1]\n  elsif planet1.include? \"uranus\"\n \
    \   planets = [planet1]\n  elsif planet1.include? \"neptune\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"pluto\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"charon\"\n    planets = [planet1]\n  elsif planet1.include? \"pluto\"\n",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit\
    \ = planet2.orbit(planet1)\n  \n  orbits = []\n  \n  while planet1_orbit != nil\n\
    \    orbits.push(planet1_orbit)\n    planet1_orbit = planet1_orbit.next\n  end\n\
    \  \n  while planet2_orbit != nil\n    orbits.push(planet2_orbit)\n    planet2_orbit\
    \ = planet2_orbit.next\n  end\n  \n  orbits.sort!\n  \n  orbits.reverse!\n  \n\
    \  orbits.each do |orbit|\n    if planet1_orbit == orbit\n      return [planet1]\n\
    \    elsif planet2_orbit == orbit\n      return [planet2]\n    end\n  end\n  \n\
    \  return []\nend\n</code>\n<|/ q |>\n<| c |>\nWhat is your question?\n<|/ c |>\n\
    <| c |>\nWhat is your question? What have you tried? What is your expected output?\
    \ What is your actual output? Please read http://stackoverflow.com/help/how-to-ask\n\
    <|/ c |>\n<| c |>\nI added the question, sorry about that\n<|/ c |>\n<| c |>\n\
    What is your question? What have you tried? What is your expected output? What\
    \ is your actual output? Please read http://stackoverflow.com/help/how-to-ask\n\
    <|/ c |>\n<| c |>\nI added the question, sorry about that\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nI believe that your problem is that you are not returning anything in the\
    \ case that planet1_orbit == nil and planet2_orbit == nil.\nTry this:\n<code>",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = plan", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  ", "    planet1 = planet1.downcase\n\
    \    planet2 = planet2.downcase\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ planet2\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \  \n  if planet1 == \"mercury\"\n    planet1 = \"Mercury\"\n  elsif planet1 ==\
    \ \"venus\"\n    planet1 = \"Venus\"\n  elsif planet1 == \"earth\"\n    planet1\
    \ = \"Earth\"\n  elsif planet1 == \"mars\"\n    planet1 = \"Mars\"\n  elsif planet1\
    \ == \"jupiter\"\n    planet1 = \"Jupiter\"\n  elsif planet1 == \"saturn\"\n \
    \   planet1 = \"Saturn\"\n  elsif planet1 == \"uranus\"\n    planet1 = \"Uranus\"\
    \n  elsif planet1 == \"neptune\"\n    planet1 = \"Neptune\"\n  elsif planet1 ==\
    \ \"pluto\"\n    planet1 = \"Pluto\"\n  elsif planet1 == \"mars\"\n    planet1\
    \ = \"Mars\"\n  elsif planet1 == \"jupiter\"\n    planet1 = \"Jupiter\"\n  elsif\
    \ planet1 == \"saturn\"\n    planet1 = \"Saturn\"\n  elsif planet1 == \"uranus\"\
    \n    planet1 = \"Uranus\"\n  elsif planet1 == \"neptune\"\n    planet1 = \"Neptune\"\
    \n  elsif planet1 == \"pluto\"\n    planet1 = \"Pluto\"\n  elsif planet1 == \"\
    mars\"\n    planet1 = \"Mars\"\n  elsif planet1 == \"jupiter\"\n    planet1 =\
    \ \"Jupiter\"\n  elsif planet1 == \"saturn\"\n    planet1 = \"Saturn\"\n  elsif\
    \ planet1 == \"uranus\"\n    planet1 = \"Uranus\"\n  elsif planet1 == \"neptune\"\
    \n    planet1 = \"Neptune\"\n  elsif planet1 == \"pluto\"\n    planet1 = \"Pluto\"\
    \n  elsif plan", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  \n  planet1 = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n\
    \  \n  orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  \n\
    \  sun = Planet.find_by_name('Sun')\n  \n  orbit1 = orbit1.sort_by { |o| o.distance\
    \ }\n  orbit2 = orbit2.sort_by { |o| o.distance }\n  \n  orbit1.each do |o|\n\
    \    next if o.name == sun.name\n    \n    distance = o.distance * Math::PI /\
    \ 180\n    \n    if distance < sun_distance\n      sun_distance = distance\n \
    \     sun_planet = o.name\n    end\n  end\n  \n  orbit2.each do |o|\n    next\
    \ if o.name == sun.name\n    \n    distance = o.distance * Math::PI / 180\n  \
    \  \n    if distance < sun_distance\n      sun_distance = distance\n      sun_planet\
    \ = o.name\n    end\n  end\n  \n  return [sun_planet]\nend", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1\
    \ == planet2\n    return []\n  \n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.gsub(\"_\"\
    , \" \")\n  planet2 = planet2.gsub(\"_\", \" \")\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.gsub(\",\", \" \")\n  planet2 = planet2.gsub(\"\
    ,\", \" \")\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.gsub(\"\
    '\", \"\").gsub(\"\\\"\", \"\")\n  planet2 = planet2.gsub(\"'\", \"\").gsub(\"\
    \\\"\", \"\")\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.gsub(\"\
    &\", \" \").gsub(\"\\\"\", \"\")\n  planet2 = planet2.gsub(\"&\", \" \").gsub(\"\
    \\\"\", \"\")\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.gsub(\"\
    !\", \" \").gsub(\"\\\"\", \"\")\n  planet2 = planet2.gsub(\"!\", \" \").gsub(\"\
    \\\"\", \"\")\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.gsub(\"\
    ?\", \" \").gsub(\"\\\"\", \"\")\n  planet2 = planet2.gsub(\"?\", \" \").gsub(\"\
    \\\"\", \"\")\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.gsub(\"\
    (\", \" \").gsub(\"\\\"\", \"\")\n  planet2 = planet2.gsub(\"(\", \" \").gsub(\"\
    \\\"\", \"\")\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.gsub(\"\
    )\", \" \").gsub(\"\\\"\", \"\")\n  planet2 = planet2.gsub(\")\", \" \").gsub(\"\
    \\\"\", ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/, \"\")\n \
    \ planet1 = planet1.gsub(/[^a-z]/, \"\")\n  planet2 = planet2.gsub(/[^a-z]/, \"\
    \")\n  planet1 = planet1.gsub(/[^0-9]/, \"\")\n  planet2 = planet2.gsub(/[^0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z0-9]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z0-9]/, \"\")\n  planet2 = plan", " \
    \   planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    if planet1 == planet2\n        return\
    \ ()\n    \n    planet1 = Planet.find_by_name(planet1)\n    planet2 = Planet.find_by_name(planet2)\n\
    \    \n    orbit1 = planet1.orbit(planet2)\n    orbit2 = planet2.orbit(planet1)\n\
    \    \n    distance = orbit1.distance_to(orbit2)\n    \n    if distance < 0\n\
    \        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance < 0\n        distance = distance * -1\n\
    \    \n    if distance < 0\n        distance = distance * -1\n    \n    if distance\
    \ < 0\n        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance < 0\n        distance = distance * -1\n\
    \    \n    if distance < 0\n        distance = distance * -1\n    \n    if distance\
    \ < 0\n        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance < 0\n        distance = distance * -1\n\
    \    \n    if distance < 0\n        distance = distance * -1\n    \n    if distance\
    \ < 0\n        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance < 0\n        distance = distance * -1\n\
    \    \n    if distance < 0\n        distance = distance * -1\n    \n    if distance\
    \ < 0\n        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance < 0\n        distance = distance * -1\n\
    \    \n    if distance < 0\n        distance = distance * -1\n    \n    if distance\
    \ < 0\n        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance < 0\n        distance = distance * -1\n\
    \    \n    if distance < 0\n        distance = distance * -1\n    \n    if distance\
    \ < 0\n        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance < 0\n        distance = distance * -1\n\
    \    \n    if distance < 0\n        distance = distance * -1\n    \n    if distance\
    \ < 0\n        distance = distance * -1\n    \n    if distance < 0\n        distance\
    \ = distance * -1\n    \n    if distance ", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  \n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  \n  orbit1 = planet1.orbit(planet2)\n\
    \  orbit2 = planet2.orbit(planet1)\n  \n  if orbit1.nil? or orbit2.nil?\n    return\
    \ []\n  end\n  \n  distance1 = orbit1.distance\n  distance2 = orbit2.distance\n\
    \  \n  if distance1 < distance2\n    return []\n  end\n  \n  if distance1 > distance2\n\
    \    return []\n  end\n  \n  planets = []\n  \n  planets << planet1 if distance1\
    \ <= distance2\n  planets << planet2 if distance2 <= distance1\n  \n  planets.sort!\
    \ {|a, b| a.distance <=> b.distance}\n  \n  return planets\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n\
    <| c |>\nNo problem! If this answer helped you, please consider marking it as\
    \ accepted (by clicking the check mark next to it). That way, people who visit\
    \ this page in the future will know that the answer was helpful.\n<|/ c |>\n<|\
    \ c |>\nI did but it says I have to wait 2 minutes before I can accept it :)\n\
    <|/ c |>\n<| c |>\nAh, okay. Thanks for letting me know!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nI wrote a gem called sunspot that does this kind of thing. \nhttps://github.com/sunspot/sunspot\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the suggestion! I looked into it but I\
    \ don't think it does what I need it to do. I'm going to try and explain it better\
    \ in my original post.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote a gem\
    \ called sunspot that does this kind of thing. \nhttps://github.com/sunspot/sunspot\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote a gem called sunspot ", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  \n  planet1_orbit = planet1_orbits[planet1]\n\
    \  planet2_orbit = planet2_orbits[planet2]\n  \n  planet1_orbit.each do |planet|\n\
    \    planet2_orbit.each do |planet|\n      \n      distance = planet1_orbit.distance(planet2_orbit)\n\
    \      \n      if distance < sun_distance\n        \n        if planet1_orbit.include?(planet)\n\
    \          \n          planet1_orbit.delete(planet)\n          \n          planet2_orbit.delete(planet)\n\
    \          \n          break\n        end\n      end\n    end\n  end\n  \n  planet1_orbit.sort!\n\
    \  planet2_orbit.sort!\n  \n  planet1_orbit.zip(planet2_orbit).sort!\n  \n  return\
    \ planet1_orbit, planet2_orbit\nend", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  \n  if planet1.empty? or planet2.empty?\n    return []\n\
    \  elsif planet1 == planet2\n    return []\n  elsif planet1.include?(planet2)\n\
    \    return []\n  elsif planet2.include?(planet1)\n    return []\n  end\n  \n\
    \  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  planet1_orbits\
    \ = planet1.orbits\n  planet2_orbits = planet2.orbits\n  \n  planet1_orbits.each\
    \ do |orbit|\n    planet2_orbits.each do |orbit2|\n      if orbit.distance < orbit2.distance\n\
    \        if orbit.distance < planet1_orbits.first.distance\n          return [orbit]\n\
    \        elsif orbit.distance > planet1_orbits.last.distance\n          return\
    \ [orbit2]\n        end\n      end\n    end\n  end\n  \n  return []\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nI appreciate your efforts,\
    \ but I already have this function in place, and I already have it working with\
    \ my test cases. What I need is a way to get this function to work with the test\
    \ cases. I already have it working with the test cases, but I need a way to get\
    \ it to work with the test cases. I already have it working with the test cases,\
    \ but I need a way to get it to work with the test cases.\n<|/ c |>\n<| c |>\n\
    I added my test cases to the original question. Thanks for your help so far.\n\
    <|/ c |>\n<| c |>\nI added my test cases to the original question. Thanks for\
    \ your help so far.\n<|/ c |>\n<| c |>\nI added my test cases to the original\
    \ question. Thanks for your help so far.\n<|/ c |>\n<| c |>\nI added my test cases\
    \ to the original question. Thanks for your help so far.\n<|/ c |>\n<| a |>\n\
    I believe that your problem is that you are not passing the correct parameters\
    \ to your bf method. \nThe method bf is expecting two strings as parameters, but\
    \ you are passing two symbols. \nTry passing strings to your bf method instead\
    \ of symbols.\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 dscore=0 |>", " \
    \ planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  if planet1.eql?(:mercury) || planet1.eql?(:venus)\n    return []\n  \n  if\
    \ planet1.eql?(:earth) || planet1.eql?(:mars)\n    return []\n  \n  if planet1.eql?(:jupiter)\
    \ || planet1.eql?(:saturn) || planet1.eql?(:uranus) || planet1.eql?(:neptune)\n\
    \    return []\n  \n  if planet1.eql?(:earth)\n    return [\"Venus\"]\n  \n  if\
    \ planet1.eql?(:mars)\n    return [\"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n  \n  if planet1.eql?(:jupiter)\n    return [\"Earth\", \"Mars\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n  \n  if planet1.eql?(:saturn)\n    return\
    \ [\"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"]\n  \n  if planet1.eql?(:uranus)\n\
    \    return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Neptune\"]\n  \n\
    \  if planet1.eql?(:neptune)\n    return [\"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\"]\n  \n  if planet1.eql?(:mercury)\n    return [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  \n  if planet1.eql?(:venus)\n\
    \    return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n  \n  if planet1.eql?(:earth)\n    return [\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n  \n  if planet1.eql?(:mars)\n    return\
    \ [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  \n\
    \  if planet", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n \
    \ planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.g", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  ", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.gsub(\"\
    _\", \" \")\n  planet2 = planet2.gsub(\"_\", \" \")\n  planet1 = planet1.gsub(\"\
    ,\", \" \")\n  planet2 = planet2.gsub(\",\", \" \")\n  planet1 = planet1.gsub(\"\
    '\", \"\")\n  planet2 = planet2.gsub(\"'\", \"\")\n  planet1 = planet1.gsub(\"\
    \\\"\", \"\")\n  planet2 = planet2.gsub(\"\\\"\", \"\")\n  planet1 = planet1.gsub(\"\
    \\(\", \"\")\n  planet2 = planet2.gsub(\"\\(\", \"\")\n  planet1 = planet1.gsub(\"\
    \\)\", \"\")\n  planet2 = planet2.gsub(\"\\)\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet1.gsub(\"\
    \\*\", \"\")\n  planet2 = planet2.gsub(\"\\*\", \"\")\n  planet1 = planet", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n  sun = Sun.new\n\
    \  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n  \n  orbits\
    \ = orbit1.orbit + orbit2.orbit\n  \n  orbits.sort!\n  \n  orbits.each do |orbit|\n\
    \    if orbit.distance < sun.distance\n      return [orbit.planet]\n    end\n\
    \  end\n  \n  return []\nend\n</cell>\n<cell>", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    planets = []\n  elsif\
    \ planet1.include? \"mercury\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1.include?\
    \ \"venus\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1.include? \"earth\"\n \
    \   planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  elsif planet1.include? \"mars\"\n    planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n  elsif planet1.include? \"jupiter\"\n    planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n  elsif planet1.include? \"saturn\"\n    planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif\
    \ planet1.include? \"uranus\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1.include?\
    \ \"neptune\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1.include? \"mars\"\
    \n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1.include? \"jupiter\"\n   \
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  elsif planet1.include? \"saturn\"\n    planets =\
    \ [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  planets = planet1.upcase\
    \ + planet2.upcase\n  \n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  \n  planets = planets.split(\" \").sort\n  \n  planet1 = planet1.upcase\n \
    \ planet2 = planet2.upcase\n  \n  planets = planets.split(\" \").sort\n  \n  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  \n  planets = planets.split(\"\
    \ \").sort\n  \n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n \
    \ planets = planets.split(\" \").sort\n  \n  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  planets = planets.split(\" \").sort\n  \n  planet1 =\
    \ planet1.upcase\n  planet2 = planet2.upcase\n  \n  planets = planets.split(\"\
    \ \").sort\n  \n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n \
    \ planets = planets.split(\" \").sort\n  \n  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  planets = planets.split(\" \").sort\n  \n  planet1 =\
    \ planet1.upcase\n  planet2 = planet2.upcase\n  \n  planets = planets.split(\"\
    \ \").sort\n  \n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n \
    \ planets = planets.split(\" \").sort\n  \n  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  planets = planets.split(\" \").sort\n  \n  planet1 =\
    \ planet1.upcase\n  planet2 = planet2.upcase\n  \n  planets = planets.split(\"\
    \ \").sort\n  \n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n \
    \ planets = planets.split(\" \").sort\n  \n  planet1 = ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  orbit1 = planet1.orbit\n  orbit2\
    \ = planet2.orbit\n  sun = Planet.find_by_name(\"Sun\")\n  orbit = orbit1.orbit\
    \ + orbit2.orbit\n  distance = orbit.distance_to(sun)\n  planets = Planet.all.sort_by(&:distance_to(sun)).take(8)\n\
    \  planets = planets.map { |planet| planet.name }\n  planets = planets.select\
    \ { |planet| planet != planet1 && planet != planet2 }\n  planets = planets.map\
    \ { |planet| [planet, distance] }\n  planets = planets.sort_by { |planet| planet[1]\
    \ }\n  planets = planets.map { |planet| planet[0] }\n  return planets\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks for your answer!\
    \ I added the code to the question so you can see what I have so far.\n<|/ c |>\n\
    <| c |>\nI added the code to the question so you can see what I have so far.\n\
    <|/ c |>\n<| c |>\nI added the code to the question so you can see what I have\
    \ so far.\n<|/ c |>\n<| c |>\nI added the code to the question so you can see\
    \ what I have so far.\n<|/ c |>\n<| c |>\nI added the code to the question so\
    \ you can see what I have so far.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "    planet1 = planet1.downcase\n    planet2 = planet2.downcase\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    if planet1 ==\
    \ planet2\n        return ()\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    ", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  planet1 = planet1.to_s\n  planet2 =\
    \ planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1\
    \ == planet2\n    return []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1 = planet1.to_s\n\
    \  planet2 = planet2.to_s\n  planet1 = ", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  orbit1 = orbit(planet1)\n \
    \ orbit2 = orbit(planet2)\n  \n  orbit1.each do |planet|\n    if planet == planet2\n\
    \      return [planet]\n    end\n  end\n  \n  orbit2.each do |planet|\n    if\
    \ planet == planet1\n      return [planet]\n    end\n  end\n  \n  return []\n\
    end", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 =\
    \ planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  \n  orbit1 = planet1.orbit\n  orbit2\
    \ = planet2.orbit\n  \n  sun = Planet.find_by_name('sun')\n  \n  orbits = Planet.orbit_between(orbit1,\
    \ orbit2)\n  \n  orbits = orbits.sort_by { |orbit| \n    distance = sun.distance_to(orbit)\n\
    \    distance\n  }\n  \n  orbits.reverse!\n  \n  orbits.map { |orbit| orbit.name\
    \ }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much!\
    \ I really appreciate your help. I really appreciate you taking the time to write\
    \ this out. I'm going to try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI got it to work! Thanks so much! I really appreciate you taking the\
    \ time to write this out. I'm going to try this out and let you know how it goes.\n\
    <|/ c |>\n<| c |>\nI got it to work! Thanks so much! I really appreciate you taking\
    \ the time to write this out. I'm going to try this out and let you know how it\
    \ goes.\n<|/ c |>\n<| c |>\nI got it to work! Thanks so much! I really appreciate\
    \ you taking the time to write this out. I'm going to try this out and let you\
    \ know how it goes.\n<|/ c |>\n<| c |>\nI got it to work! Thanks so much! I really\
    \ appreciate you taking the time to write this out. I'm going to try this out\
    \ and let you know how it goes.\n<|/ c |>\n<| a dscore=0 |>\nI wrote a gem called\
    \ sun_distance that does this for you. \n<code>\nrequire 'sun_distance'", "  \
    \  planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planet1 = planet1.downcase\n\
    \    planet2 = planet2.downcase\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = ", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  if planet1.nil? or planet2.nil?\n\
    \    return []\n  end\n  sun = Planet.find_by_name(\"Sun\")\n  orbit1 = sun.orbit(planet1)\n\
    \  orbit2 = sun.orbit(planet2)\n  if orbit1.nil? or orbit2.nil?\n    return []\n\
    \  end\n  orbit1.each do |orbit|\n    if orbit.distance < orbit2.distance\n  \
    \    orbit.each do |planet|\n        if planet != planet1 and planet != planet2\n\
    \          yield planet\n        end\n      end\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much for taking the time\
    \ to write this up. I'm going to try this out and see how it goes. I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nI got it to work. Thanks so much for taking the time\
    \ to write this up. I'm going to try this out and see how it goes. I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nI got it to work. Thanks so much for taking the time\
    \ to write this up. I'm going to try this out and see how it goes. I appreciate\
    \ it.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  if planet1 == \"earth\" or planet2 == \"\
    earth\"\n    planet1 = \"earth\"\n    planet2 = \"earth\"\n  elsif planet1 ==\
    \ \"mercury\" or planet2 == \"mercury\"\n    planet1 = \"mercury\"\n    planet2\
    \ = \"mercury\"\n  elsif planet1 == \"venus\" or planet2 == \"venus\"\n    planet1\
    \ = \"venus\"\n    planet2 = \"venus\"\n  elsif planet1 == \"mars\" or planet2\
    \ == \"mars\"\n    planet1 = \"mars\"\n    planet2 = \"mars\"\n  elsif planet1\
    \ == \"jupiter\" or planet2 == \"jupiter\"\n    planet1 = \"jupiter\"\n    planet2\
    \ = \"jupiter\"\n  elsif planet1 == \"saturn\" or planet2 == \"saturn\"\n    planet1\
    \ = \"saturn\"\n    planet2 = \"saturn\"\n  elsif planet1 == \"uranus\" or planet2\
    \ == \"uranus\"\n    planet1 = \"uranus\"\n    planet2 = \"uranus\"\n  elsif planet1\
    \ == \"neptune\" or planet2 == \"neptune\"\n    planet1 = \"neptune\"\n    planet2\
    \ = \"neptune\"\n  elsif planet1 == \"pluto\" or planet2 == \"pluto\"\n    planet1\
    \ = \"pluto\"\n    planet2 = \"pluto\"\n  elsif planet1 == \"sun\" or planet2\
    \ == \"sun\"\n    planet1 = \"sun\"\n    planet2 = \"sun\"\n  elsif planet1 ==\
    \ \"moon\" or planet2 == \"moon\"\n    planet1 = \"moon\"\n    planet2 = \"moon\"\
    \n  elsif planet1 == \"mercury\" or planet2 == \"venus\"\n    planet1 = \"venus\"\
    \n    planet2 = \"mercury\"\n  elsif planet1 == \"venus\" or planet2 == \"mercury\"\
    \n    planet1 = \"mercury\"\n    planet2 = \"venus\"\n  elsif plan", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do\
    \ |planet|\n    orbit2.each do |planet2|\n      if planet == planet2\n       \
    \ return [(planet1, planet2)]\n      end\n    end\n  end\n  \n  return []\nend",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n \
    \ orbit1 = planet1.orbit\n  orbit2 = planet2.orbit\n  sun = Planet.find_by_name(\"\
    sun\").orbit\n  orbits = orbit1.orbit + orbit2.orbit\n  orbits.each do |orbit|\n\
    \    distance = orbit.distance_to(sun)\n    if distance < sun.length\n      return\
    \ [orbit.name]\n    end\n  end\n  return []\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-3.2\
    \ |>\n<| c |>\nThanks so much for taking the time to write this up. I'm going\
    \ to try it out and see if it works. I appreciate it.\n<|/ c |>\n<| c |>\nI got\
    \ it to work. Thanks so much for taking the time to write this up. I'm going to\
    \ try it out and see if it works. I appreciate it.\n<|/ c |>\n<| c |>\nI got it\
    \ to work. Thanks so much for taking the time to write this up. I'm going to try\
    \ it out and see if it works. I appreciate it.\n<|/ c |>\n<| c |>\nI got it to\
    \ work. Thanks so much for taking the time to write this up. I'm going to try\
    \ it out and see if it works. I appreciate it.\n<|/ c |>\n<| c |>\nI got it to\
    \ work. Thanks so much for taking the time to write this up. I'm going to try\
    \ it out and see if it works. I appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    return []\n  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n\
    \  orbit1.each do |planet|\n    orbit2.each do |planet2|\n      if planet == planet2\n\
    \        return planet\n      end\n    end\n  end\n  \n  return []\nend", "  \
    \  planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = ", "    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n   \
    \ planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == :mercury\n    planet1 = :saturn\n\
    \    planet2 = :uranus\n  elsif planet1 == :venus\n    planet1 = :earth\n    planet2\
    \ = :mercury\n  elsif planet1 == :earth\n    planet1 = :mars\n    planet2 = :jupiter\n\
    \  elsif planet1 == :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n  elsif\
    \ planet1 == :jupiter\n    planet1 = :saturn\n    planet2 = :uranus\n  elsif planet1\
    \ == :saturn\n    planet1 = :uranus\n    planet2 = :neptune\n  elsif planet1 ==\
    \ :uranus\n    planet1 = :neptune\n    planet2 = :mercury\n  elsif planet1 ==\
    \ :neptune\n    planet1 = :mercury\n    planet2 = :venus\n  elsif planet1 == :pluto\n\
    \    planet1 = :pluto\n    planet2 = :pluto\n  elsif planet1 == :mercury\n   \
    \ planet1 = :mercury\n    planet2 = :mercury\n  elsif planet1 == :venus\n    planet1\
    \ = :venus\n    planet2 = :venus\n  elsif planet1 == :earth\n    planet1 = :earth\n\
    \    planet2 = :earth\n  elsif planet1 == :mars\n    planet1 = :mars\n    planet2\
    \ = :mars\n  elsif planet1 == :jupiter\n    planet1 = :jupiter\n    planet2 =\
    \ :jupiter\n  elsif planet1 == :saturn\n    planet1 = :saturn\n    planet2 = :saturn\n\
    \  elsif planet1 == :uranus\n    planet1 = :uranus\n    planet2 = :uranus\n  elsif\
    \ plan", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    plan", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  \n  if planet1.empty? or planet2.empty?\n    return []\n\
    \  end\n  \n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1\
    \ == planet2\n    return []\n  end\n  \n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  \n  planet1_orbits = planet1_orbits[planet1]\n  planet2_orbits\
    \ = planet2_orbits[planet2]\n  \n  orbits = planet1_orbits + planet2_orbits\n\
    \  \n  orbits = orbits.sort_by { |orbit| orbit.distance }\n  \n  orbits = orbits.select\
    \ { |orbit| orbit.distance <= sun_distance }\n  \n  orbits = orbits.map { |orbit|\
    \ orbit.name }\n  \n  orbits\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| c |>\nThanks for your answer! I added the code you suggested but I'm\
    \ getting an error: undefined method `downcase' for nil:NilClass. I added the\
    \ code I added in the original post and also the error I got when I ran the code.\n\
    <|/ c |>\n<| c |>\nI added the code you suggested but I'm getting an error: undefined\
    \ method `downcase' for nil:NilClass. I added the code I added in the original\
    \ post and also the error I got when I ran the code.\n<|/ c |>\n<| c |>\nI added\
    \ the code you suggested but I'm getting an error: undefined method `downcase'\
    \ for nil:NilClass. I added the code I added in the original post and also the\
    \ error I got when I ran the code.\n<|/ c |>\n<| c |>\nI added the code you suggested\
    \ but I'm getting an error: undefined method `downcase' for nil:NilClass. I added\
    \ the code I added in the original post and also the error I got when I ran the\
    \ code.\n<|/ c |>\n<| c |>\nI added the code you suggested but I'm getting an\
    \ error: undefined method `downcase' for nil:NilClass. I added the code I added\
    \ in the original post and also the error I got when I ran the code.\n<|/ c |>\n\
    <| a tags=rub", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.capitalize\n  planet2 = planet2.capitalize\n  if planet1 == planet2\n\
    \    puts \"#{planet1} and #{planet2} are the same planet\"\n    return []\n \
    \ elsif planet1 == \"SUN\"\n    puts \"#{planet1} is the sun\"\n    return []\n\
    \  elsif planet2 == \"SUN\"\n    puts \"#{planet2} is the sun\"\n    return []\n\
    \  elsif planet1 == \"MERCURY\"\n    puts \"#{planet1} is the Mercury\"\n    return\
    \ []\n  elsif planet2 == \"MERCURY\"\n    puts \"#{planet2} is the Mercury\"\n\
    \    return []\n  elsif planet1 == \"VENUS\"\n    puts \"#{planet1} is the Venus\"\
    \n    return []\n  elsif planet2 == \"VENUS\"\n    puts \"#{planet2} is the Venus\"\
    \n    return []\n  elsif planet1 == \"EARTH\"\n    puts \"#{planet1} is the Earth\"\
    \n    return []\n  elsif planet2 == \"EARTH\"\n    puts \"#{planet2} is the Earth\"\
    \n    return []\n  elsif planet1 == \"MARS\"\n    puts \"#{planet1} is the Mars\"\
    \n    return []\n  elsif planet2 == \"MARS\"\n    puts \"#{planet2} is the Mars\"\
    \n    return []\n  elsif planet1 == \"JUPITER\"\n    puts \"#{planet1} is the\
    \ Jupiter\"\n    return []\n  elsif planet2 == \"JUPITER\"\n    puts \"#{planet2}\
    \ is the Jupiter\"\n    return []\n  elsif planet1 == \"SATURN\"\n    puts \"\
    #{planet1} is the Saturn\"\n    return []\n  elsif planet2 == \"SATURN\"\n   \
    \ puts \"#{planet2} is the Saturn\"\n    return []\n  elsif planet1 == \"URANUS\"\
    \n    puts \"#{planet1} is the Uranus\"\n    return []\n  elsif planet2 == \"\
    URANUS\"\n    puts \"#{planet2} is the Uranus\"\n    return []\n  elsif plan",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planets = Array.new\n\
    \  planets.push planet1\n  planets.push planet2\n  planets.each do |planet|\n\
    \    planets = planets.select { |planet2| planet2.upcase == planet.upcase }\n\
    \    planets.each do |planet2|\n      planets = planets.select { |planet1| planet1.upcase\
    \ == planet2.upcase }\n      planets.each do |planet1|\n        distance = planet1.distance\
    \ planet2\n        if distance < planet1.distance planet2\n          planets.push\
    \ planet1\n          planets.push planet2\n        end\n      end\n    end\n \
    \ end\n  planets.sort!\n  planets.reverse!\n  planets.uniq!\n  planets.each do\
    \ |planet|\n    planet.upcase\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I appreciate your efforts, but this isn't a homework assignment. I'm just trying\
    \ to learn Ruby by solving problems. I appreciate your efforts, but this isn't\
    \ a homework assignment. I'm just trying to learn Ruby by solving problems. I\
    \ appreciate your efforts, but this isn't a homework assignment. I'm just trying\
    \ to learn Ruby by solving problems. I appreciate your efforts, but this isn't\
    \ a homework assignment. I'm just trying to learn Ruby by solving problems. I\
    \ appreciate your efforts, but this isn't a homework assignment. I'm just trying\
    \ to learn Ruby by solving problems. I appreciate your efforts, but this isn't\
    \ a homework assignment. I'm just trying to learn Ruby by solving problems. I\
    \ appreciate your efforts, but this isn't a homework assignment. I'm just trying\
    \ to learn Ruby by solving problems. I appreciate your efforts, but this isn't\
    \ a homework assignment. I'm just trying to learn Ruby by solving problems. I\
    \ appreciate your efforts, but this isn't a homework assignment. I'm just trying\
    \ to learn Ruby by solving problems. I appreciate your efforts, but this isn't\
    \ a homework assignment. I'm just trying to learn Ruby by solving problems. I\
    \ appreciate your efforts, but this isn't a homework assignment. I'm just trying\
    \ to "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
