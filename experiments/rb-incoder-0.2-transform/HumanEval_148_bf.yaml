name: HumanEval_148_bf
language: rb
prompt: "# There are eight planets in our solar system: the closerst to the Sun \n\
  # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus,\
  \ Neptune.\n# Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n# The function should return a tuple containing all planets whose orbits\
  \ are \n# located between the orbit of planet1 and the orbit of planet2, sorted\
  \ by \n# the proximity to the sun. \n# The function should return an empty tuple\
  \ if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf.call(\"\
  Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf.call(\"Earth\", \"\
  Mercury\")\n# \"Venus\"\n# >>> bf.call(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\ndef bf(planet1, planet2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bf\n\
  \    candidate = method(:bf)\n    assert_equal([\"Saturn\", \"Uranus\"], candidate.call(\"\
  Jupiter\", \"Neptune\"))\n    assert_equal([\"Venus\"], candidate.call(\"Earth\"\
  , \"Mercury\"))\n    assert_equal([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
  \ \"Saturn\"], candidate.call(\"Mercury\", \"Uranus\"))\n    assert_equal([\"Earth\"\
  , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], candidate.call(\"Neptune\", \"\
  Venus\"))\n    assert_equal([], candidate.call(\"Earth\", \"Earth\"))\n    assert_equal([],\
  \ candidate.call(\"Mars\", \"Earth\"))\n    assert_equal([], candidate.call(\"Jupiter\"\
  , \"Makemake\"))\n  end\nend\n"
completions: ["  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 =\
    \ planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"].include?(planet1)\n\
    \  planet2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"].include?(planet2)\n  if planet1 && planet2\n    orbit1\
    \ = orbit(planet1)\n    orbit2 = orbit(planet2)\n    orbit1.zip(orbit2).sort_by\
    \ { |orbit1, orbit2| orbit1.distance_to(orbit2) }\n  elsif planet1\n    orbit1\
    \ = orbit(planet1)\n    orbit1.sort_by { |orbit1| orbit1.distance_to(sun) }\n\
    \  elsif planet2\n    orbit2 = orbit(planet2)\n    orbit2.sort_by { |orbit2| orbit2.distance_to(sun)\
    \ }\n  else\n    []\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nThanks so much for this! I really appreciate it. I was able to get it\
    \ to work. One thing I noticed is that when I run it I get this error `NoMethodError:\
    \ undefined method 'distance_to' for #<Orbit:0x0000000514a1d8>`. I looked up this\
    \ error and apparently it's because I didn't have `distance_to` defined in my\
    \ `orbit` class. I added that in and now it works. Thanks again!\n<|/ c |>\n<|\
    \ c |>\nAh yes, I forgot to add that method. Thanks for pointing that out. I've\
    \ updated my answer with the new method.\n<|/ c |>\n<| c |>\nI added the distance_to\
    \ method and now it works. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^a-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Z]/, \"\")\n  planet1 = planet1.gsub(/[^0-9]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^0-9]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  if planet1 == nil\n    return []\n\
    \  if planet2 == nil\n    return []\n  sun = Planet.find_by_name(\"sun\")\n  sun_planets\
    \ = Planet.find_all_by_name(\"sun\").map(&:name)\n  sun_planets.each do |sun_planet|\n\
    \    sun_planet = sun_planet.to_sym\n    sun_planet = Planet.find_by_name(sun_planet)\n\
    \    if sun_planet == nil\n      return []\n    end\n  end\n  planet1_orbit =\
    \ planet1.orbit\n  planet2_orbit = planet2.orbit\n  planet1_orbit.each do |planet1_orbit|\n\
    \    planet1_orbit = planet1_orbit.to_sym\n    planet1_orbit = Planet.find_by_name(planet1_orbit)\n\
    \    if planet1_orbit == nil\n      return []\n    end\n  end\n  planet2_orbit.each\
    \ do |planet2_orbit|\n    planet2_orbit = planet2_orbit.to_sym\n    planet2_orbit\
    \ = Planet.find_by_name(planet2_orbit)\n    if planet2_orbit == nil\n      return\
    \ []\n    end\n  end\n  sun_planets.each do |sun_planet|\n    sun_planet = sun_planet.to_sym\n\
    \    sun_planet = Planet.find_by_name(sun_planet)\n    if sun_planet == nil\n\
    \      return []\n    end\n  end\n  sun_planets.each do |sun_planet|\n    sun_planet\
    \ = sun_planet.to_sym\n    sun_planet = Planet.find_by_name(sun_planet)\n    if\
    \ sun_planet == nil\n      return []\n    end\n  end\n  sun_planets.each do |sun_planet|\n\
    \    sun_planet = sun_planet.to_sym\n    sun_planet = Planet.find_by_name(sun_planet)\n\
    \    if sun_planet == nil\n      return []\n    end\n  end\n  sun_planets.each\
    \ do |", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planets =\
    \ planet1 + planet2\n  planets.each do |planet|\n    planet = planet.upcase\n\
    \    planet = planet.gsub(\" \", \"_\")\n    planet = planet.gsub(/[^A-Z]/, \"\
    \")\n    planet = planet.gsub(/[^a-z]/, \"\")\n    planet = planet.gsub(/[^0-9]/,\
    \ \"\")\n    planet = planet.gsub(/[^A-Za-z]/, \"\")\n    planet = planet.gsub(/[^0-9A-Za-z]/,\
    \ \"\")\n    planet = planet.gsub(/[^A-Za-z0-9]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_]/,\
    \ \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\\
    -]/, \"\")\n    planet = planet.gsub(/[^A-Za-z0-9_\\-]/", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  planet1_orbit = planet1.orbit(planet2)\n\
    \  planet2_orbit = planet2.orbit(planet1)\n  \n  planet1_orbit.each do |planet|\n\
    \    planet2_orbit.each do |planet|\n      if planet == planet1\n        planet1_orbit.delete(planet)\n\
    \      elsif planet == planet2\n        planet2_orbit.delete(planet)\n      end\n\
    \    end\n  end\n  \n  planet1_orbit.sort_by{|planet| planet.distance_to_sun(planet2)}\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| c |>\nI appreciate\
    \ your efforts, but I already solved it myself. I posted my solution. Thanks anyway!\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but I already solved it myself.\
    \ I posted my solution. Thanks anyway!\n<|/ c |>\n<| c |>\nI appreciate your efforts,\
    \ but I already solved it myself. I posted my solution. Thanks anyway!\n<|/ c\
    \ |>\n<| a dscore=0 |>\nI solved it myself. I posted my solution. Thanks anyway!\n\
    <code>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1\
    \ == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n  planet2\
    \ = Planet.find_by_name(planet2)\n  sun = Planet.find_by_name(\"sun\")\n  orbit1\
    \ = planet1.orbit(sun)\n  orbit2 = planet2.orbit(sun)\n  orbits = orbit1.orbits\
    \ + orbit2.orbits\n  orbits.sort!\n  orbits.reverse!\n  orbits.each do |orbit|\n\
    \    if orbit.distance < sun.length\n      return [orbit.name]\n    end\n  end\n\
    \  return []\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help! I\
    \ really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! I hope it helps you!\n\
    <|/ c |>\n<| c |>\nI added some comments to help you understand how it works.\
    \ I hope it helps!\n<|/ c |>\n<| c |>\nThanks so much! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nNo problem! I hope it helps you!\n<|/ c |>\n<| a |>\n<code>",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n\
    \    return []\n  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n\
    \  orbit1.each do |planet|\n    orbit2.each do |planet2|\n      next if planet1\
    \ == planet2\n      next if planet == planet2\n      next if planet == planet1\n\
    \      next if planet == planet\n      next if planet == planet1.capitalize\n\
    \      next if planet == planet2.capitalize\n      next if planet == planet1.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize\n      next if planet ==\
    \ planet1.capitalize.capitalize.capitalize\n      next if planet == planet2.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet1.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      next if planet == planet2.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize.capitalize\n\
    \      ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.gsub(/[\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\W]/, \"\")\n  planet1\
    \ = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\W_]/, \"\")\n \
    \ planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\W_]/, \"\
    \")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\W_]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_]/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]/, \"\")\n  planet1 = planet1.gsub(/[\\W_", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1.length != 3 or planet2.length != 3\n\
    \    return []\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1\
    \ = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[aeiou]/, \"\")\n  planet1 = planet1.gsub!(/[^a-z]/,\
    \ \"\")\n  planet2 = planet2.gsub!(/[^a-z]/, \"\")\n  planet1 = planet1.gsub!(/[aeiou]/, ",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  planets = Array.new\n\
    \  \n  if planet1 == planet2\n    planets << planet1\n  else\n    planets << planet1\n\
    \    planets << planet2\n  end\n  \n  planets.each do |planet|\n    planet = planet.upcase\n\
    \    \n    if planet == \"SUN\"\n      planets.delete_at(planets.index(planet))\n\
    \    else\n      planets.delete_at(planets.index(planet))\n      planets.delete_at(planets.index(planet))\n\
    \    end\n  end\n  \n  planets.sort!\n  \n  planets.each do |planet|\n    planet\
    \ = planet.upcase\n    \n    if planet == \"SUN\"\n      planets.delete_at(planets.index(planet))\n\
    \    else\n      planets.delete_at(planets.index(planet))\n      planets.delete_at(planets.index(planet))\n\
    \    end\n  end\n  \n  planets.sort!\n  \n  return planets\nend", "  planet1 =\
    \ planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n  \
    \  return []\n  \n  planet1_orbits = planet1_orbits(planet1)\n  planet2_orbits\
    \ = planet2_orbits(planet2)\n  \n  orbits = planet1_orbits + planet2_orbits\n\
    \  \n  orbits.sort! { |a, b| a.distance <=> b.distance }\n  \n  orbits.map { |orbit|\
    \ orbit.name }\nend", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:space:]]/, \"\")\n  planet2 = planet2.gsub(/[[:space:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/, \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/, \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/, \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:space:]]/, \"\")\n  planet2 = planet2.gsub(/[[:space:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/, \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/, \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/, \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do\
    \ |planet|\n    orbit2.each do |planet|\n      if planet == planet1\n        next\
    \ if planet == planet2\n      elsif planet == planet2\n        next if planet\
    \ == planet1\n      end\n      \n      distance = distance_to(planet, planet1)\n\
    \      \n      if distance < 1\n        next if distance < 0\n      end\n    \
    \  \n      distance = distance_to(planet, planet2)\n      \n      if distance\
    \ < 1\n        next if distance < 0\n      end\n      \n      distance\n    end\n\
    \  end\n  \n  orbit1.sort\nend", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1 == planet2\n    return []\n  planet1_orbits = planet1_orbits[planet1]\n\
    \  planet2_orbits = planet2_orbits[planet2]\n  orbits = planet1_orbits + planet2_orbits\n\
    \  orbits.sort!\n  orbits.reverse!\n  orbits.each do |orbit|\n    if orbit.distance\
    \ < sun_distance\n      return [orbit.name]\n    end\n  end\n  return []\nend\n\
    </code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI appreciate your help and your time.\
    \ I tried your solution and it works great. Thank you for taking the time to help\
    \ me!\n<|/ c |>\n<| c |>\nYou're welcome! If this answer solved your problem,\
    \ please consider marking it as accepted by clicking the check mark next to it.\n\
    <|/ c |>\n<| a dscore=0 |>\nI wrote a solution that is similar to your original\
    \ solution, but I used the distance formula to find the distance between the planets.\
    \ I used the distance formula to find the distance between the planets because\
    \ I wanted to avoid having to calculate the distance between the planets twice.\
    \ \n<code>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return\
    \ []\n  planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit = planet2.orbit(planet1)\n\
    \  planet1_sun = planet1.orbit(\"Sun\")\n  planet2_sun = planet2.orbit(\"Sun\"\
    )\n  planet1_sun_distance = planet1_sun.distance_to(planet2_sun)\n  planet2_sun_distance\
    \ = planet2_sun.distance_to(planet1_sun)\n  planet1_orbits_distance = planet1_orbit.distance_to(planet2_orbit)\n\
    \  planet2_orbits_distance = planet2_orbit.distance_to(planet1_orbit)\n  \n  if\
    \ planet1_sun_distance < planet2_sun_distance\n    planet1_orbits_distance\n \
    \ elsif planet2_sun_distance < planet1_sun_distance\n    planet2_orbits_distance\n\
    \  else\n    planet1_orbits_distance\n  end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI appreciate your efforts, but I cannot use any gems or libraries. I\
    \ must write my own code.\n<|/ c |>\n<| c |>\nI added my own code. Thank you for\
    \ your help.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI wrote this code, but\
    \ I do not know if it is the best way to solve the problem. \n<code>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n \
    \ orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  \n  if\
    \ orbit1.nil? || orbit2.nil?\n    return []\n  end\n  \n  distance = orbit1.distance\
    \ - orbit2.distance\n  \n  if distance < 0\n    distance = distance * -1\n  end\n\
    \  \n  distance.abs\nend\n</cell>\n<cell>", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  if planet1.empty? or planet2.empty?\n    return []\n \
    \ else\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1\
    \ = Planet.find_by_name(planet1)\n    planet2 = Planet.find_by_name(planet2)\n\
    \    if planet1.nil? or planet2.nil?\n      return []\n    else\n      planet1_orbit\
    \ = planet1.orbit\n      planet2_orbit = planet2.orbit\n      planet1_radius =\
    \ planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet1_orbit.radius\n      planet2_radius = planet2_orbit.radius\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_orbit\
    \ = planet1_orbit.orbit\n      planet2_orbit = planet2_orbit.orbit\n      planet1_radius\
    \ = planet", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n\
    \  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  \n  orbit1 = orbits[planet1]\n  orbit2 = orbits[planet2]\n\
    \  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs\n  \n  orbit1[:] <- (orbit1[:]\
    \ - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs \n  \n  orbit1[:]\
    \ <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:] - sun[:]).abs\
    \ \n  \n  orbit1[:] <- (orbit1[:] - orbit2[:]).abs \n  \n  orbit1[:] <- (orbit1[:]\
    \ - sun[:]).abs \n  \n  orbit1[:] <- (", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/\\s+/, \"\")\n  planet2 = planet2.gsub(/\\\
    s+/, \"\")\n  planet1 = planet1.gsub(/", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  planet1 = planet1.gsub(/[\\s\\W]/, \"\")\n  planet2 =\
    \ planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n\
    \  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\s\\\
    W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[\\\
    s\\W]/, \"\")\n  planet2 = planet2.gsub(/[\\s\\W]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  plan", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    return []\n  orbit1 = orbit(planet1)\n  orbit2 =\
    \ orbit(planet2)\n  sun = planets.at(\"Sun\")\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(sun)\n\
    \  sun = sun.to_sym\n  sun = orbit(sun)\n  sun = sun.to_sym\n  sun = orbit(",
  "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    planet1 = planet1.downcase\n\
    \    planet2 = planet2.downcase\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1\
    \ = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.capitalize\n    planet2\
    \ = planet2.capitalize\n    planet1 = ", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  planets = Array.new\n  \n  planets.push planet1\n  planets.push\
    \ planet2\n  \n  planets.each do |planet|\n    \n    planet1 = planet.upcase\n\
    \    planet2 = planet.upcase\n    \n    planet1 = planet1.to_sym\n    planet2\
    \ = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  planet1_orbit\
    \ = planet1.orbit(planet2)\n  planet2_orbit = planet2.orbit(planet1)\n  \n  planet1_orbit.each\
    \ do |planet|\n    planet2_orbit.each do |planet2|\n      \n      if planet ==\
    \ planet2\n        puts planet\n      end\n    end\n  end\nend\n</code>\n<|/ q\
    \ dscore=0 |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nWhat is your\
    \ question?\n<|/ c |>\n<| c |>\nPlease read \"[ask]\" including the linked pages,\
    \ and \"[mcve]\".\n<|/ c |>\n<| c |>\nPlease read \"[ask]\" including the linked\
    \ pages, and \"[mcve]\".\n<|/ c |>\n<| c |>\nPlease read \"[ask]\" including the\
    \ linked pages, and \"[mcve]\".\n<|/ c |>\n<| a dscore=1 |>\nI believe this is\
    \ what you are looking for:\n<code>", "    planet1 = planet1.upcase\n    planet2\
    \ = planet2.upcase\n    planet1 = planet1.downcase\n    planet2 = planet2.downcase\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    if\
    \ planet1 == planet2\n        return ()\n    \n    planet1 = Planet.find_by_name(planet1)\n\
    \    planet2 = Planet.find_by_name(planet2)\n    \n    if planet1 == nil\n   \
    \     return ()\n    \n    if planet2 == nil\n        return ()\n    \n    sun\
    \ = Planet.find_by_name(\"Sun\")\n    \n    orbit1 = sun.orbit(planet1)\n    orbit2\
    \ = sun.orbit(planet2)\n    \n    orbit1.each do |planet|\n        orbit2.each\
    \ do |planet2|\n            distance = planet.distance_to(planet2)\n         \
    \   if distance < 1\n                return [planet, planet2]\n            end\n\
    \        end\n    end\n    \n    return ()\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    planet1 = ", "  planet1\
    \ = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do\
    \ |planet|\n    orbit2.each do |planet|\n      if planet == planet1\n        next\
    \ if planet == planet2\n        \n        distance = distance_between(planet,\
    \ planet2)\n        \n        if distance < 1\n          return [planet]\n   \
    \     end\n      end\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.g", " \
    \ planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n  \n  orbit1.each do\
    \ |planet|\n    orbit2.each do |planet|\n      if planet == planet1\n        next\
    \ if planet == planet2\n      elsif planet == planet2\n        next if planet\
    \ == planet1\n      end\n      \n      distance = distance_to(planet, planet1)\n\
    \      \n      if distance < 0\n        distance = distance * -1\n      end\n\
    \      \n      if distance < 0\n        distance = -distance\n      end\n    \
    \  \n      if distance < 0\n        distance = -distance\n      end\n      \n\
    \      if distance < 0\n        distance = -distance\n      end\n      \n    \
    \  if distance < 0\n        distance = -distance\n      end\n      \n      if\
    \ distance < 0\n        distance = -distance\n      end\n      \n      if distance\
    \ < 0\n        distance = -distance\n      end\n      \n      if distance < 0\n\
    \        distance = -distance\n      end\n      \n      if distance < 0\n    \
    \    distance = -distance\n      end\n      \n      if distance < 0\n        distance\
    \ = -distance\n      end\n      \n      if distance < 0\n        distance = -distance\n\
    \      end\n      \n      if distance < 0\n        distance = -distance\n    \
    \  end\n      \n      if distance < 0\n        distance = -distance\n      end\n\
    \      \n      if distance < 0\n        distance = -distance\n      end\n    \
    \  \n      if distance < 0\n        distance = -distance\n      end\n      \n\
    \      if distance < 0\n        distance = -distance\n      end\n      \n    \
    \  if distance < 0\n        distance = -distance\n      end\n      \n      if\
    \ distance < 0\n        distance = -distance\n      end\n      \n      if distance\
    \ < 0\n        distance = -distance\n      end\n      \n      if distance < 0\n\
    \        distance = -distance\n      end\n      \n      if distance < 0\n    \
    \    distance = -distance\n      end\n      \n      if distance < 0\n        distance\
    \ = -distance\n      end\n      \n      if distance < 0\n        distance = -distance\n\
    \      end\n      \n      if distance < 0\n        distance = -distance\n    \
    \  end\n      ", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = Planet.find_by_name(planet1)\n    planet2 = Planet.find_by_name(planet2)\n\
    \    \n    orbit1 = planet1.orbit(planet2)\n    orbit2 = planet2.orbit(planet1)\n\
    \    \n    orbit1.each do |orbit|\n        orbit2 = orbit.orbit(planet2)\n   \
    \     orbit2.each do |orbit|\n            orbit.each do |orbit|\n            \
    \    puts orbit.name\n            end\n        end\n    end\n    \n    orbit1.each\
    \ do |orbit|\n        orbit2 = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n\
    \            orbit.each do |orbit|\n                puts orbit.name\n        \
    \    end\n        end\n    end\n    \n    orbit1.each do |orbit|\n        orbit2\
    \ = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n            orbit.each\
    \ do |orbit|\n                puts orbit.name\n            end\n        end\n\
    \    end\n    \n    orbit1.each do |orbit|\n        orbit2 = orbit.orbit(planet2)\n\
    \        orbit2.each do |orbit|\n            orbit.each do |orbit|\n         \
    \       puts orbit.name\n            end\n        end\n    end\n    \n    orbit1.each\
    \ do |orbit|\n        orbit2 = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n\
    \            orbit.each do |orbit|\n                puts orbit.name\n        \
    \    end\n        end\n    end\n    \n    orbit1.each do |orbit|\n        orbit2\
    \ = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n            orbit.each\
    \ do |orbit|\n                puts orbit.name\n            end\n        end\n\
    \    end\n    \n    orbit1.each do |orbit|\n        orbit2 = orbit.orbit(planet2)\n\
    \        orbit2.each do |orbit|\n            orbit.each do |orbit|\n         \
    \       puts orbit.name\n            end\n        end\n    end\n    \n    orbit1.each\
    \ do |orbit|\n        orbit2 = orbit.orbit(planet2)\n        orbit2.each do |orbit|\n\
    \            orbit.each do |orbit|\n                puts orbit.name\n        \
    \    end\n        end\n    end\n    \n    orbit1.each do |orbit|\n        orbit2\
    \ = orbit.orbit", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:digit:]]/, \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:punct:]]/, \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.gsub(/[[:upper:]]/, \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/,\
    \ \"\")\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  if planet1 == planet2\n\
    \    return ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n \
    \ \n  planet1_orbit = planet1_orbits[planet1]\n  planet2_orbit = planet2_orbits[planet2]\n\
    \  \n  orbits = planet1_orbit + planet2_orbit\n  \n  orbits.sort!\n  \n  orbits.each\
    \ do |orbit|\n    \n    if planet1_orbit == orbit\n      \n      if planet2_orbit\
    \ == orbit\n        \n        if planet1_orbit == planet2_orbit\n          \n\
    \          return [planet1, planet2]\n        end\n      end\n    end\n  end\n\
    \  \n  return []\nend\n</cell>\n<cell>", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  planet1 = ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n \
    \ planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if\
    \ planet1.length != 3 || planet2.length != 3\n    return []\n  \n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  \n  orbit1.each do |planet|\n    orbit2.each do |planet|\n      \n      if\
    \ planet == planet1\n        \n        if planet == planet2\n          return\
    \ [planet]\n        end\n        \n        distance = orbit1.distance(planet)\n\
    \        \n        if distance < orbit2.distance(planet)\n          return [planet]\n\
    \        end\n      \n      elsif planet == planet2\n        \n        if planet\
    \ == planet1\n          return [planet]\n        end\n        \n        distance\
    \ = orbit2.distance(planet)\n        \n        if distance < orbit1.distance(planet)\n\
    \          return [planet]\n        end\n      end\n    end\n  end\n  \n  return\
    \ []\nend\n</cell>\n<cell>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  if planet1.length != 3 || planet2.length != 3\n    return []\n  planet1\
    \ = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\"\
    )\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, ",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  if planet1 == planet2\n    return []\n  sun = Sun.new\n  sun_distance = sun.distance_to(planet1)\n\
    \  sun_distance = sun_distance.round(2)\n  sun_distance = sun_distance.to_s\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance\
    \ = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n\
    \  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance\
    \ = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n\
    \  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n\
    \  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance\
    \ = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n\
    \  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n  sun_distance\
    \ = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance = sun_distance.to_f\n\
    \  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n  sun_distance\
    \ = sun_distance.to_f\n  sun_distance = sun_distance.to_s\n  sun_distance = sun_distance.to_i\n\
    \  sun", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n    \n \
    \   if planet1 == planet2\n        return ()\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1_orbit = planet1.orbit(planet2)\n\
    \    planet2_orbit = planet2.orbit(planet1)\n    \n    planet1_distance = planet1_orbit.distance_to(planet2)\n\
    \    planet2_distance = planet2_orbit.distance_to(planet1)\n    \n    planet1_orbit.distance_to(planet2)\n\
    \    planet2_orbit.distance_to(planet1)\n    \n    if planet1_distance < planet2_distance\n\
    \        return planet1_orbit.sort_by(&:distance_to(planet2))\n    else\n    \
    \    return planet2_orbit.sort_by(&:distance_to(planet1))\n    end\nend\n</cell>\n\
    <cell>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\"\
    )\n  if planet1 == planet2\n    return []\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  if planet1.length != planet2.length\n\
    \    return []\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n  planet2 = planet2.g",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1 == planet2\n\
    \    planets = []\n  elsif planet1.include? \"mercury\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"venus\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"earth\"\n    planets = [planet1]\n  elsif planet1.include? \"mars\"\n    planets\
    \ = [planet1]\n  elsif planet1.include? \"jupiter\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"saturn\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"uranus\"\n    planets = [planet1]\n  elsif planet1.include? \"neptune\"\n\
    \    planets = [planet1]\n  elsif planet1.include? \"pluto\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"mars\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"jupiter\"\n    planets = [planet1]\n  elsif planet1.include? \"saturn\"\n\
    \    planets = [planet1]\n  elsif planet1.include? \"uranus\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"neptune\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"pluto\"\n    planets = [planet1]\n  elsif planet1.include? \"mars\"\n    planets\
    \ = [planet1]\n  elsif planet1.include? \"jupiter\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"saturn\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"uranus\"\n    planets = [planet1]\n  elsif planet1.include? \"neptune\"\n\
    \    planets = [planet1]\n  elsif planet1.include? \"pluto\"\n    planets = [planet1]\n\
    \  elsif planet1.include? \"mars\"\n    planets = [planet1]\n  elsif planet1.include?\
    \ \"j", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2\
    \ = sun.orbit(planet2)\n  \n  planets = []\n  \n  while orbit1 != nil and orbit2\
    \ != nil\n    if orbit1.distance < orbit2.distance\n      planets << orbit1.planet\n\
    \      orbit1 = sun.orbit(planet1)\n    else\n      planets << orbit2.planet\n\
    \      orbit2 = sun.orbit(planet2)\n    end\n  end\n  \n  planets << orbit1.planet\n\
    \  planets << orbit2.planet\n  \n  planets.sort!\n  \n  return planets\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for your answer! I tried to run your code but\
    \ I'm getting this error `undefined method 'orbit' for Sun:Class (NoMethodError)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to include the full code I tested with.\
    \ Let me know if that works for you.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I tried to run your code but I'm getting this error `undefined method 'orbit'\
    \ for Sun:Class (NoMethodError)`\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ the full code I tested with. Let me know if that works for you.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I tried to run your code but I'm getting this\
    \ error `undefined method 'orbit' for Sun:Class (NoMethodError)`\n<|/ c |>\n<|\
    \ a dscore=0 |>\nI wrote a ruby gem called orbital which does exactly what you\
    \ are looking for. \n<code>\nrequire 'orbital'", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  sun = Planet.find_by_name(\"sun\"\
    )\n  orbit1 = planet1.orbit(sun)\n  orbit2 = planet2.orbit(sun)\n  orbits = orbit1.orbit\
    \ + orbit2.orbit\n  orbits = orbits.sort_by { |orbit| orbit.distance }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance <= 1.5 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.8 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.2 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.1 }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance <= 0.05 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.01 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.005 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.001 }\n \
    \ orbits = orbits.select { |orbit| orbit.distance <= 0.0005 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.0001 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.00005 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.00001 }\n\
    \  orbits = orbits.select { |orbit| orbit.distance <= 0.000005 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance >= 0.000001 }\n  orbits = orbits.select { |orbit| orbit.distance\
    \ <= 0.0000005 }\n  orbits = orbits.select { |orbit| orbit.distance >= 0.0000001\
    \ }\n  orbits = orbits.select { |orbit| orbit.distance <= 0.00000005 }\n  orbits\
    \ = orbits.select { |orbit| orbit.distance >= 0.00000001 }\n  orbits = orbits.select\
    \ { |orbit| orbit.distance <= 0.000000005 }\n  orbits = orbits.select { |orbit|\
    \ orbit.distance >= 0.000000001 }\n  orbits = orbits.", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[^A-Za-z]/, \"\")\n \
    \ planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/\\s+/,\
    \ \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.gsub(/\\\
    s+/, \"\")\n  planet2 = planet2.gsub(/\\s+/, \"\")\n  planet1 = planet1.g", " \
    \ planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1 = planet1.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/, \"\")\n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/, \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/, \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/, \"\")\n  planet1 = planet1.gsub(/[[:punct:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:punct:]]/, \"\")\n  planet1 = planet1.gsub(/[[:space:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:space:]]/, \"\")\n  planet1 = planet1.gsub(/[[:digit:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:digit:]]/, \"\")\n  planet1 = planet1.gsub(/[[:upper:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:upper:]]/, \"\")\n  planet1 = planet1.gsub(/[[:lower:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:lower:]]/, \"\")\n  planet1 = planet1.gsub(/[[:alpha:]]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[[:alpha:]]/, ", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.capitalize\n  planet2 = planet2.capitalize\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = Planet[planet1]\n  planet2 = Planet[planet2]\n\
    \  sun = Planet[\"Sun\"]\n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  orbits = orbit1.orbit + orbit2.orbit\n  orbits = orbits.sort_by { |orbit| orbit.distance\
    \ }\n  orbits.reverse!\n  orbits.select { |orbit| orbit.distance <= 1 }.map {\
    \ |orbit| orbit.name }\nend\n</code>\n<|/ a |>\n<| c |>\nThanks so much for your\
    \ help. I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit\
    \ = planet2.orbit(planet1)\n  \n  planet1_orbit.each do |planet|\n    planet2_orbit.each\
    \ do |planet|\n      if planet == planet1 || planet == planet2\n        puts planet\n\
    \      end\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nI appreciate your efforts, but this isn't what I was looking for. I'm\
    \ looking for a way to do this without having to use any gems. I already know\
    \ how to do this using gems, but I'm looking for a way to do it without them.\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a solution that does not use\
    \ any gems.\n<|/ c |>\n<| c |>\nThank you so much! This was exactly what I was\
    \ looking for!\n<|/ c |>\n<| a |>\n<code>", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n\
    \  orbits = orbit1.orbit + orbit2.orbit\n  sun = orbits.first\n  planets = orbits.select\
    \ { |orbit| orbit == sun }\n  planets = planets.sort_by { |orbit| orbit - sun\
    \ }\n  planets = planets.map { |orbit| orbit.name }\n  planets.empty? ? [] : planets\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer.\
    \ I'm going to try this out and let you know how it goes.\n<|/ c |>\n<| c |>\n\
    I got it to work. Thanks for your help. I appreciate it.\n<|/ c |>\n<| c |>\n\
    I added the code I used to solve the problem to the original question. Thanks\
    \ again for your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    planet1 = planet1.downcase\n\
    \    planet2 = planet2.downcase\n    \n    planet1_orbit = planet1.to_sym\n  \
    \  planet2_orbit = planet2.to_sym\n    \n    planet1_orbits = planet1.to_s.downcase.split(\"\
    _\")\n    planet2_orbits = planet2.to_s.downcase.split(\"_\")\n    \n    planet1_orbits.each\
    \ do |planet1_orbit|\n        planet1_orbit = planet1_orbit.downcase\n       \
    \ \n        planet2_orbits.each do |planet2_orbit|\n            planet2_orbit\
    \ = planet2_orbit.downcase\n            \n            if planet1_orbit == planet2_orbit\n\
    \                puts \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\
    \n            elsif planet1_orbit == planet2_orbit.upcase\n                puts\
    \ \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\n            elsif\
    \ planet1_orbit == planet2_orbit.downcase\n                puts \"#{planet1_orbit}\
    \ and #{planet2_orbit} are the same planet\"\n            elsif planet1_orbit\
    \ == planet2_orbit.upcase.downcase\n                puts \"#{planet1_orbit} and\
    \ #{planet2_orbit} are the same planet\"\n            elsif planet1_orbit == planet2_orbit.downcase.upcase\n\
    \                puts \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\
    \n            elsif planet1_orbit == planet2_orbit.upcase.downcase.upcase\n  \
    \              puts \"#{planet1_orbit} and #{planet2_orbit} are the same planet\"\
    \n            else\n                puts \"#{planet1_orbit} and #{planet2_orbit}\
    \ are different planets\"\n            end\n        end\n    end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI appreciate your help but this doesn't\
    \ seem to work. I'm getting an error that says \"undefined method `downcase' for\
    \ nil:NilClass\" when I run your code. I'm also getting an error that says \"\
    undefined method `to_sym' for nil:NilClass\" when I run your code. I'm also getting\
    \ an error that says \"undefined method `to_s' for nil:N", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  orbit1 = planet1.orbit(planet2)\n\
    \  orbit2 = planet2.orbit(planet1)\n  orbit1.each do |planet|\n    orbit2.each\
    \ do |planet|\n      if planet == planet1\n        orbit1.delete(planet)\n   \
    \     orbit2.delete(planet)\n      elsif planet == planet2\n        orbit1.delete(planet)\n\
    \        orbit2.delete(planet)\n      end\n    end\n  end\n  orbit1.sort!\n  orbit2.sort!\n\
    \  return orbit1 + orbit2\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nThanks for your answer! I tried to run your code, but I got this error\
    \ `undefined method 'downcase' for nil:NilClass`. Any idea why?\n<|/ c |>\n<|\
    \ c |>\nI fixed the error, but now I got this error `undefined method 'orbit'\
    \ for nil:NilClass`. Any idea why?\n<|/ c |>\n<| c |>\nI fixed the error, but\
    \ now I got this error `undefined method 'orbit' for nil:NilClass`. Any idea why?\n\
    <|/ c |>\n<| c |>\nI fixed the error, but now I got this error `undefined method\
    \ 'orbit' for nil:NilClass`. Any idea why?\n<|/ c |>\n<| c |>\nI fixed the error,\
    \ but now I got this error `undefined method 'orbit' for nil:NilClass`. Any idea\
    \ why?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  \n  if planet1 == nil\n    return\
    \ []\n  \n  if planet2 == nil\n    return []\n  \n  sun = Planet.find_by_name(\"\
    Sun\")\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n  \n\
    \  orbits = orbit1.orbits + orbit2.orbits\n  \n  orbits = orbits.sort_by { |orbit|\
    \ orbit.distance }\n  \n  orbits = orbits.select { |orbit| orbit.distance < sun.distance\
    \ }\n  \n  return orbits.map { |orbit| orbit.name }\nend", "    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    if planet1 == planet2\n        return ()\n    planet1 =\
    \ planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n   \
    \ planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  orbit1.each\
    \ do |orbit|\n    orbit2 = orbit.orbit(planet2)\n    orbit2.each do |orbit|\n\
    \      orbit.each do |orbit|\n        if orbit.distance < sun_distance\n     \
    \     puts orbit.name\n        end\n      end\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I appreciate it! I did try\
    \ your solution and it didn't work. My code was very similar to the one you posted.\
    \ I tried it again and I got this error message: undefined method `orbit' for\
    \ #<String:0x0000000532c888>\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a working solution. Hope it helps!\n<|/ c |>\n<| c |>\nThanks so much! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this answer solved your problem,\
    \ please mark it as accepted so others can see it more easily.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nI figured it out! I used the code from my original post and modified\
    \ it a bit. I had to change the method bf to bf_planets. I then had to change\
    \ my method call in the main file to bf_planets(planet1, planet2). \nHere is the\
    \ code I ended up with:\n<code>", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  planets = [:Mercury,\
    \ :Venus, :Earth, :Mars, :Jupiter, :Saturn, :Uranus, :Neptune]\n  \n  if planet1\
    \ == planet2\n    planets << planet1\n    planets << planet2\n  elsif planet1\
    \ == :Mercury\n    planets << planet2\n    planets << planet1\n  elsif planet1\
    \ == :Venus\n    planets << planet2\n    planets << planet1\n  elsif planet1 ==\
    \ :Earth\n    planets << planet2\n    planets << planet1\n  elsif planet1 == :Mars\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Jupiter\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Saturn\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Uranus\n\
    \    planets << planet2\n    planets << planet1\n  elsif planet1 == :Neptune\n\
    \    planets << planet2\n    planets << planet1\n  end\n  \n  planets.sort.map\
    \ { |planet| planet.to_sym }\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer! I added some more info to the question, could you please take\
    \ a look?\n<|/ c |>\n<| c |>\nI added some more info to the question, could you\
    \ please take a look?\n<|/ c |>\n<| c |>\nI added some more info to the question,\
    \ could you please take a look?\n<|/ c |>\n<| c |>\nI added some more info to\
    \ the question, could you please take a look?\n<|/ c |>\n<| c |>\nI added some\
    \ more info to the question, could you please take a look?\n<|/ c |>\n<| a tags=rub",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == :mercury\n    planet1 = :earth\n  elsif planet1 == :venus\n\
    \    planet1 = :mars\n  elsif planet1 == :earth\n    planet1 = :jupiter\n  elsif\
    \ planet1 == :mars\n    planet1 = :saturn\n  elsif planet1 == :jupiter\n    planet1\
    \ = :uranus\n  elsif planet1 == :saturn\n    planet1 = :neptune\n  elsif planet1\
    \ == :uranus\n    planet1 = :neptune\n  elsif planet1 == :neptune\n    planet1\
    \ = :uranus\n  elsif planet1 == :pluto\n    planet1 = :pluto\n  end\n  \n  if\
    \ planet2 == :mercury\n    planet2 = :earth\n  elsif planet2 == :venus\n    planet2\
    \ = :mars\n  elsif planet2 == :earth\n    planet2 = :jupiter\n  elsif planet2\
    \ == :mars\n    planet2 = :saturn\n  elsif planet2 == :jupiter\n    planet2 =\
    \ :uranus\n  elsif planet2 == :saturn\n    planet2 = :neptune\n  elsif planet2\
    \ == :uranus\n    planet2 = :neptune\n  elsif planet2 == :neptune\n    planet2\
    \ = :uranus\n  elsif planet2 == :pluto\n    planet2 = :pluto\n  end\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == :mercury\n\
    \    planet1 = :earth\n  elsif planet1 == :venus\n    planet1 = :mars\n  elsif\
    \ planet1 == :earth\n    planet1 = :jupiter\n  elsif planet1 == :mars\n    planet1\
    \ = ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1\
    \ == planet2\n    return []\n  planet1 = Planet.find_by_name(planet1)\n  planet2\
    \ = Planet.find_by_name(planet2)\n  if planet1.nil? or planet2.nil?\n    return\
    \ []\n  end\n  sun = Planet.find_by_name(\"sun\")\n  planet1.orbit(sun)\n  planet2.orbit(sun)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n  planet1.orbit_to(planet2)\n\
    \  planet1.orbit_to(planet2)\n", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1_orbit = planet1_orbit(planet1)\n\
    \  planet2_orbit = planet2_orbit(planet2)\n  \n  orbits = planet1_orbit + planet2_orbit\n\
    \  \n  orbits.sort!\n  \n  orbits.each do |orbit|\n    if planet1_orbit == orbit\n\
    \      return [planet2]\n    elsif planet2_orbit == orbit\n      return [planet1]\n\
    \    end\n  end\n  \n  return []\nend", "  planet1 = planet1.downcase\n  planet2\
    \ = planet2.downcase\n  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1\
    \ == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1\
    \ == planet2\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  \n  if planet1 == planet2\n    planet1 = planet1.upcase\n    planet2 = ", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  if planet1 == planet2\n    return []\n  planet1\
    \ = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n \
    \ orbit1 = planet1.orbit\n  orbit2 = planet2.orbit\n  sun = Planet.find_by_name(\"\
    Sun\")\n  orbits = orbit1.orbit + orbit2.orbit\n  orbits.sort!\n  orbits.reverse!\n\
    \  orbits.each do |orbit|\n    if orbit.distance < sun.distance\n      return\
    \ [planet1, planet2]\n    end\n  end\n  return []\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks for your answer! I tried to run your code but I get this error\
    \ `NameError: undefined local variable or method 'orbit' for #<Planet:0x000000051c7a80>`\n\
    <|/ c |>\n<| c |>\nI fixed the error but now I get this error `NoMethodError:\
    \ undefined method 'distance' for #<Orbit:0x000000051c7a80>`\n<|/ c |>\n<| c |>\n\
    I fixed the error but now I get this error `NoMethodError: undefined method 'distance'\
    \ for #<Orbit:0x000000051c7a80>`\n<|/ c |>\n<| c |>\nI fixed the error but now\
    \ I get this error `NoMethodError: undefined method 'distance' for #<Orbit:0x000000051c7a80>`\n\
    <|/ c |>\n<| c |>\nI fixed the error but now I get this error `NoMethodError:\
    \ undefined method 'distance' for #<Orbit:0x000000051c7a80>`\n<|/ c |>\n<| a dscore=0\
    \ |>\nI fixed the error but now I get this error NoMethodError: undefined method\
    \ 'distance' for #<Orbit:0x000000051c7a80>", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1 == planet2\n    return []\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_i\n  planet2 = planet2.to_i\n  planet1 = planet1.to_a\n  planet2\
    \ = planet2.to_a\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  ", " \
    \ planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.capitalize\n  planet2 = planet2.capitalize\n\
    \  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  if planet1 == planet2\n\
    \    return []\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  planet1 = planet1.to_sym\n  plan", "    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    if planet1 == planet2\n        return ()\n    \n \
    \   planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 =\
    \ planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    \n    planet1\
    \ = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    \n    planet1 = planet1.to_sym\n    planet2 =\
    \ planet2.to_sym\n    \n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    \n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    \n    planet1\
    \ = planet1.to_s\n    planet2 = planet2.to_s", "  planet1 = planet1.upcase\n \
    \ planet2 = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n \
    \ planet1_orbit = planet1.orbit(planet2)\n  planet2_orbit = planet2.orbit(planet1)\n\
    \  \n  planet1_orbit.each do |planet|\n    planet2_orbit.each do |planet|\n  \
    \    if planet == planet1\n        planet1_orbit.delete(planet)\n      elsif planet\
    \ == planet2\n        planet2_orbit.delete(planet)\n      end\n    end\n  end\n\
    \  \n  return planet1_orbit.sort_by {|planet| planet.distance_to_sun(planet2)}\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I tried to run\
    \ your code, but I got this error `undefined method 'orbit' for #<String:0x00007f9f59b00538>`\
    \ when I ran `bf.call(\"Jupiter\", \"Neptune\")`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to add `.upcase` when calling `planet1` and `planet2`\n\
    <|/ c |>\n<| c |>\nI edited my answer, I forgot to add `.upcase` when calling\
    \ `planet1` and `planet2`\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to\
    \ add `.upcase` when calling `planet1` and `planet2`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to add `.upcase` when calling `planet1` and `planet2`\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  planet1 = planet1.upcase\n  planet2 =\
    \ planet2.upcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n\
    \  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  \n  if planet1.eql?(planet2)\n    return []\n  \n  sun = Sun.new\n\
    \  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n  \n  orbit1.each\
    \ do |planet|\n    orbit2 = sun.orbit(planet)\n    \n    orbit2.each do |planet|\n\
    \      distance = sun.distance(planet)\n      \n      if distance < distance\n\
    \        distance\n      end\n    end\n  end\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  planet1 = planet1.to_sym\n \
    \ planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    puts \"#{planet1}\
    \ and #{planet2} are the same planet\"\n    return []\n  end\n  \n  if planet1\
    \ == :sun\n    puts \"#{planet1} is the sun\"\n    return []\n  end\n  \n  if\
    \ planet2 == :sun\n    puts \"#{planet2} is the sun\"\n    return []\n  end\n\
    \  \n  if planet1 == planet2\n    puts \"#{planet1} and #{planet2} are the same\
    \ planet\"\n    return []\n  end\n  \n  planet1 = planet1.to_sym\n  planet2 =\
    \ planet2.to_sym\n  \n  if planet1 == :mercury\n    puts \"#{planet1} is the Mercury\"\
    \n    return []\n  end\n  \n  if planet2 == :mercury\n    puts \"#{planet2} is\
    \ the Mercury\"\n    return []\n  end\n  \n  if planet1 == :venus\n    puts \"\
    #{planet1} is the Venus\"\n    return []\n  end\n  \n  if planet2 == :venus\n\
    \    puts \"#{planet2} is the Venus\"\n    return []\n  end\n  \n  if planet1\
    \ == :earth\n    puts \"#{planet1} is the Earth\"\n    return []\n  end\n  \n\
    \  if planet2 == :earth\n    puts \"#{planet2} is the Earth\"\n    return []\n\
    \  end\n  \n  if planet1 == :mars\n    puts \"#{planet1} is the Mars\"\n    return\
    \ []\n  end\n  \n  if planet2 == :mars\n    puts \"#{planet2} is the Mars\"\n\
    \    return []\n  end\n  \n  if planet1 == :jupiter\n    puts \"#{planet1} is\
    \ the Jupiter\"\n    return []\n  end\n  \n  if planet2 == :jupiter\n    puts\
    \ \"#{planet2} is the Jupiter\"\n    return []\n  end\n  \n  if planet1 == :saturn\n\
    \    puts \"#{planet1} is the Saturn\"\n    return []\n  end\n  \n  if planet2\
    \ == :saturn\n    puts \"#{planet2} is the Saturn\"\n    return []\n  end\n  \n\
    \  if planet1 == :uranus", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  \n  if planet1 == planet2\n    puts \"The planets are the same\"\n    return\
    \ []\n  elsif planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  if planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2\
    \ = planet2.gsub!(/[^A-Za-z]/, \"\")\n  \n  if planet1.nil? || planet2.nil?\n\
    \    puts \"The planets are not correct\"\n    return []\n  end\n  \n  planet1\
    \ = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub!(/[^A-Za-z]/, \"\
    \")\n  \n  if planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2\
    \ = planet2.gsub!(/[^A-Za-z]/, \"\")\n  \n  if planet1.nil? || planet2.nil?\n\
    \    puts \"The planets are not correct\"\n    return []\n  end\n  \n  planet1\
    \ = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub!(/[^A-Za-z]/, \"\
    \")\n  \n  if planet1.nil? || planet2.nil?\n    puts \"The planets are not correct\"\
    \n    return []\n  end\n  \n  planet1 = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2\
    \ = planet2.gsub!(/[^A-Za-z]/, \"\")\n  \n  if planet1.nil? || planet2.nil?\n\
    \    puts \"The planets are not correct\"\n    return []\n  end\n  \n  planet1\
    \ = planet1.gsub!(/[^A-Za-z]/, \"\")\n  planet2 = planet2.gsub!(/[^A-Za-z]/, \"\
    \")\n  \n  if planet1.nil? ", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  \n  if planet1 == planet2\n    return []\n  \n  planet1 =\
    \ planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n  \
    \  return []\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if\
    \ planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n  planet2\
    \ = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n  planet1\
    \ = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1 == planet2\n    return\
    \ []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1\
    \ == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n\
    \  \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_sym\n\
    \  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n \
    \ \n  if planet1 == planet2\n    return []\n  \n  planet1 = planet1.to_s\n  planet2\
    \ = planet2.to_s\n  \n", "    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n\
    \    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n\
    \    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    planet1 = planet1.to_sym\n\
    \    planet2 = planet2.to_sym\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n\
    \    planet1 = planet1.to_sym\n    planet2 = ", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  planet1 = planet1.to_sym\n  planet2 = planet2.to_sym\n\
    \  if planet1 == planet2\n    []\n  elsif planet1.nil? || planet2.nil?\n    []\n\
    \  elsif planet1 == :mercury\n    planet2 = :venus\n    planet1 = :earth\n   \
    \ planet2 = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n    planet1\
    \ = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n    planet2 = :mars\n\
    \    planet1 = :jupiter\n    planet2 = :saturn\n    planet1 = :uranus\n    planet2\
    \ = :neptune\n    planet1 = :earth\n    planet2 = :mars\n    planet1 = :jupiter\n\
    \    planet2 = :saturn\n    planet1 = :uranus\n    planet2 = :neptune\n    planet1\
    \ = :earth\n    planet2 = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n\
    \    planet1 = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n    planet2\
    \ = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n    planet1 = :uranus\n\
    \    planet2 = :neptune\n    planet1 = :earth\n    planet2 = :mars\n    planet1\
    \ = :jupiter\n    planet2 = :saturn\n    planet1 = :uranus\n    planet2 = :neptune\n\
    \    planet1 = :earth\n    planet2 = :mars\n    planet1 = :jupiter\n    planet2\
    \ = :saturn\n    planet1 = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n\
    \    planet2 = :mars\n    planet1 = :jupiter\n    planet2 = :saturn\n    planet1\
    \ = :uranus\n    planet2 = :neptune\n    planet1 = :earth\n    planet2 = :mars",
  "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  sun = Sun.new\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2\
    \ = sun.orbit(planet2)\n  \n  orbits = orbit1.orbit + orbit2.orbit\n  \n  orbits.sort!\n\
    \  \n  orbits.each do |orbit|\n    if orbit.distance < sun.distance\n      return\
    \ [orbit.planet]\n    end\n  end\n  \n  return []\nend\n</cell>\n<cell>", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  \n  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  \n  planet1 = planet1.capitalize\n  planet2 =\
    \ planet2.capitalize\n  \n  if planet1 == planet2\n    return []\n  \n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  if planet1.include? \"sun\"\n    sun = planet1.index(\"\
    sun\")\n    sun = planet1.slice!(sun, 3)\n    sun = planet1.slice!(sun, 2)\n \
    \   sun = planet1.slice!(sun, 1)\n    sun = planet1.slice!(sun, 4)\n    sun =\
    \ planet1.slice!(sun, 6)\n    sun = planet1.slice!(sun, 7)\n    sun = planet1.slice!(sun,\
    \ 8)\n    sun = planet1.slice!(sun, 9)\n    sun = planet1.slice!(sun, 10)\n  \
    \  sun = planet1.slice!(sun, 11)\n    sun = planet1.slice!(sun, 12)\n    sun =\
    \ planet1.slice!(sun, 13)\n    sun = planet1.slice!(sun, 14)\n    sun = planet1.slice!(sun,\
    \ 15)\n    sun = planet1.slice!(sun, 16)\n    sun = planet1.slice!(sun, 17)\n\
    \    sun = planet1.slice!(sun, 18)\n    sun = planet1.slice!(sun, 19)\n    sun\
    \ = planet1.slice!(sun, 20)\n    sun = planet1.slice!(sun, 21)\n    sun = planet1.slice!(sun,\
    \ 22)\n    sun = planet1.slice!(sun, 23)\n    sun = planet1.slice!(sun, 24)\n\
    \    sun = planet1.slice!(sun, 25)\n    sun = planet1.slice!(sun, 26)\n    sun\
    \ = planet1.slice!(sun, 27)\n    sun = planet1.slice!(sun, 28)\n    sun = planet1.slice!(sun,\
    \ 29)\n    sun = planet1.slice!(sun, 30)\n    sun = planet1.slice!(sun, 31)\n\
    \    sun = planet1.slice!(sun, 32)\n    sun", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  \n  planets = planet1.upcase + planet2.upcase\n  \n  orbits\
    \ = planets.split(\" \").map { |planet| planet.upcase }\n  \n  orbits.each do\
    \ |orbit|\n    planets.each do |planet|\n      if orbit == planet\n        puts\
    \ \"#{orbit} #{planet}\"\n      end\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. I am not able to understand your code.\
    \ Can you please explain it a little bit?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I am\
    \ not able to understand your code. Can you please explain it a little bit?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not able to understand your code. Can you\
    \ please explain it a little bit?\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  \n  if planet1 == planet2\n\
    \    return []\n  \n  planet1 = planet1.to_s\n  planet2 = planet2.to_s\n  \n \
    \ planet1 = Planet.find_by_name(planet1)\n  planet2 = Planet.find_by_name(planet2)\n\
    \  \n  orbit1 = planet1.orbit(planet2)\n  orbit2 = planet2.orbit(planet1)\n  \n\
    \  orbit1.times do |time|\n    orbit2.times do |time|\n      distance = time -\
    \ orbit1.time\n      if distance < 0\n        distance = -distance\n      end\n\
    \      if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance = -distance\n      end\n      if distance < 0\n        distance =\
    \ -distance\n      end\n      if distance < 0\n        distance = -distance\n\
    \      end\n      if distance < 0\n        distance = -distance\n      end\n \
    \     if distance < 0\n        distance = -distance\n      end\n      if distance\
    \ < 0\n        distance = -distance\n      end\n      if distance < 0\n      \
    \  distance", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1\
    \ = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/, \"\")\n\
    \  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\W_]+/,\
    \ \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")\n  planet2 = planet2.gsub(/[\\\
    W_]+/, \"\")\n  planet1 = planet1.gsub(/[\\W_]+/, \"\")", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  if planet1 == planet2\n    return []\n  \n\
    \  sun = Planet.new(\"Sun\")\n  \n  orbit1 = sun.orbit(planet1)\n  orbit2 = sun.orbit(planet2)\n\
    \  \n  orbit1.each do |planet|\n    orbit2.each do |planet|\n      if planet ==\
    \ planet1\n        orbit1.delete(planet)\n        orbit2.delete(planet)\n    \
    \  elsif planet == planet2\n        orbit1.delete(planet)\n        orbit2.delete(planet)\n\
    \      end\n    end\n  end\n  \n  return orbit1.zip(orbit2).sort_by { |planet1,\
    \ planet2| planet1.distance_to(sun) }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for the answer! I ran your code, and it seems to work fine,\
    \ except for the fact that when I run `bf.call(\"Jupiter\", \"Neptune\")` it returns\
    \ `[\"Saturn\", \"Uranus\"]` instead of `[\"Saturn\", \"Uranus\", \"Neptune\"\
    ]`. Any idea why that is?\n<|/ c |>\n<| c |>\nI fixed the bug. Sorry for the mistake.\n\
    <|/ c |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nHere's a solution that uses recursion:\n<code>", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  if planet1 == planet2\n    return []\n  planet1\
    \ = planet1.to_sym\n  planet2 = planet2.to_sym\n  planet1_orbit = planet1.orbit(planet2)\n\
    \  planet2_orbit = planet2.orbit(planet1)\n  planet1_sun = planet1.orbit(\"Sun\"\
    )\n  planet2_sun = planet2.orbit(\"Sun\")\n  planet1_sun_distance = planet1_sun.distance_to(planet2_sun)\n\
    \  planet2_sun_distance = planet2_sun.distance_to(planet1_sun)\n  planet1_planet2_distance\
    \ = planet1_orbit.distance_to(planet2_orbit)\n  planet2_planet1_distance = planet2_orbit.distance_to(planet1_orbit)\n\
    \  \n  if planet1_sun_distance < planet2_sun_distance\n    planet1_orbit.sort!\n\
    \    planet2_orbit.sort!\n  elsif planet1_sun_distance > planet2_sun_distance\n\
    \    planet1_orbit.sort!\n    planet2_orbit.sort!.reverse\n  elsif planet1_planet2_distance\
    \ < planet2_planet1_distance\n    planet1_orbit.sort!\n    planet2_orbit.sort!.reverse\n\
    \  elsif planet1_planet2_distance > planet2_planet1_distance\n    planet1_orbit.sort!.reverse\n\
    \    planet2_orbit.sort!\n  end\n  \n  planet1_orbit.zip(planet2_orbit).sort\n\
    end", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1.length\
    \ != 3 or planet2.length != 3\n    return []\n  \n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  planet1 = planet1.gsub(/[^A-Z]/, \"\")\n  planet2\
    \ = planet2.gsub(/[^A-Z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^a-z]/, \"\"\
    )\n  planet2 = planet2.gsub(/[^a-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet2 = planet2.gsub(/[^A-Za-z]/, \"\")\n  \n  planet1 = planet1.gsub(/[^A-Za-z]/,\
    \ \"\")\n  planet"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
