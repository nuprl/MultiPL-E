name: HumanEval_125_split_words
language: rb
prompt: "# Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n# should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words.call(\"\
  Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"Hello,world!\"\
  )\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"abcdef\")\n# 3\ndef split_words(txt)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_words\n\
  \    candidate = method(:split_words)\n    assert_equal([\"Hello\", \"world!\"],\
  \ candidate.call(\"Hello world!\"))\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"\
  Hello,world!\"))\n    assert_equal([\"Hello\", \"world,!\"], candidate.call(\"Hello\
  \ world,!\"))\n    assert_equal([\"Hello,Hello,world\", \"!\"], candidate.call(\"\
  Hello,Hello,world !\"))\n    assert_equal(3, candidate.call(\"abcdef\"))\n    assert_equal(2,\
  \ candidate.call(\"aaabb\"))\n    assert_equal(1, candidate.call(\"aaaBb\"))\n \
  \   assert_equal(0, candidate.call(\"\"))\n  end\nend\n"
completions: ["  words = txt.split(\" \").map do |word|\n    word.split(\",\").map\
    \ do |letter|\n      letter.downcase\n    end\n  end\n  words.flatten.select {\
    \ |word| word.size > 0 }\nend", "  words = txt.split(\" \").map(&:strip)\n  words.empty?\
    \ ? words : words.map(&:downcase).map(&:split)\nend", "  txt.split(\" \").map\
    \ { |word| word.split(\",\").map { |word| word.downcase } }.reduce(:+)\nend",
  "  words = txt.split(\" \") # Split on whitespace\n  words.delete_if { |word| word.empty?\
    \ } # Remove empty words\n  words.delete_if { |word| word =~ /[^a-z]/ } # Remove\
    \ non-alphabetic words\n  words.delete_if { |word| word =~ /[a-z]/ } # Remove\
    \ alphabetic words\n  words.delete_if { |word| word =~ /[a-z]/i } # Remove lower-case\
    \ words\n  words.delete_if { |word| word =~ /[a-z]/i } # Remove lower-case words\n\
    \  words.delete_if { |word| word =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if\
    \ { |word| word =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word|\
    \ word =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word| word\
    \ =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word| word =~\
    \ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word| word =~ /[a-z]/i\
    \ } # Remove lower-case words\n  words.delete_if { |word| word =~ /[a-z]/i } #\
    \ Remove lower-case words\n  words.delete_if { |word| word =~ /[a-z]/i } # Remove\
    \ lower-case words\n  words.delete_if { |word| word =~ /[a-z]/i } # Remove lower-case\
    \ words\n  words.delete_if { |word| word =~ /[a-z]/i } # Remove lower-case words\n\
    \  words.delete_if { |word| word =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if\
    \ { |word| word =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word|\
    \ word =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word| word\
    \ =~ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word| word =~\
    \ /[a-z]/i } # Remove lower-case words\n  words.delete_if { |word| word =~ /[a-z]/i\
    \ } # Remove lower-case words\n  words.delete_if { |word| word =~ /[a-z]/i } #\
    \ Remove lower-case ", "  txt.split(\" \").map { |word| word.split(\",\").map\
    \ { |word| word.downcase } }.flatten.uniq.map { |word| word.count { |c| c.ord\
    \ % 2 == 1 } } + [txt.count(\",\")]\nend", "  txt.split(\" \").map { |word| word.split(\"\
    ,\").map { |word| word.downcase.split(\"\").count { |char| char.ord % 2 == 1 }\
    \ } }.flatten.uniq.count\nend", "  words = txt.split(\" \") # split on whitespace\n\
    \  words.delete_if { |word| word.empty? } # remove empty words\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas\n  words.delete_if\
    \ { |word| word.include?(\",\") } # remove words with commas", "  words = txt.split(\"\
    \ \") # Split on whitespace\n  words.each do |word|\n    word.gsub!(/,/, \"\"\
    ) # Remove commas if they exist\n    word.gsub!(/[a-z]/, \"\") # Remove lower-case\
    \ letters if they exist\n    word.gsub!(/[A-Z]/, \"\") # Remove upper-case letters\
    \ if they exist\n  end\n  words.count\nend", "  words = txt.split(\" \") # Split\
    \ on whitespace\n  words.delete_if { |word| word.empty? } # Remove empty words\n\
    \  words.delete_if { |word| word.include?(\",\") } # Remove commas if they exist\n\
    \  words.delete_if { |word| word.include?(\"'\") } # Remove apostrophes if they\
    \ exist\n  words.delete_if { |word| word.include?(\"!\") } # Remove exclamation\
    \ points if they exist\n  words.delete_if { |word| word.include?(\"?\") } # Remove\
    \ question marks if they exist\n  words.delete_if { |word| word.include?(\";\"\
    ) } # Remove semicolons if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    '\") } # Remove apostrophes if they exist\n  words.delete_if { |word| word.include?(\"\
    !\") } # Remove exclamation points if they exist\n  words.delete_if { |word| word.include?(\"\
    ?\") } # Remove question marks if they exist\n  words.delete_if { |word| word.include?(\"\
    ;\") } # Remove semicolons if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    '\") } # Remove apostrophes if they exist\n  words.delete_if { |word| word.include?(\"\
    !\") } # Remove exclamation points if they exist\n  words.delete_if { |word| word.include?(\"\
    ?\") } # Remove question marks if they exist\n  words.delete_if { |word| word.include?(\"\
    ;\") } # Remove semicolons if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    '\") } # Remove apostrophes if they exist\n  words.delete_if { |word| word.include?(\"\
    !\") } # Remove exclamation points if they exist\n  words.delete_if { |word| word.include?(\"\
    ?\") } # Remove question marks if they exist\n  words.delete_if { |word| word.include?(\"\
    ;\") } # Remove semicolons if they exist\n  words.delete_if { |word", "  words\
    \ = txt.split(\" \") # split on whitespace\n  words.delete_if { |word| word.empty?\
    \ } # remove empty words\n  words.delete_if { |word| word.include?(\",\") } #\
    \ remove commas if they exist\n  words.delete_if { |word| word.include?(\"'\"\
    ) } # remove apostrophes if they exist\n  words.delete_if { |word| word.include?(\"\
    !\") } # remove exclamation points if they exist\n  words.delete_if { |word| word.include?(\"\
    ?\") } # remove question marks if they exist\n  words.delete_if { |word| word.include?(\"\
    ;\") } # remove semicolons if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    '\") } # remove apostrophes if they exist\n  words.delete_if { |word| word.include?(\"\
    !\") } # remove exclamation points if they exist\n  words.delete_if { |word| word.include?(\"\
    ?\") } # remove question marks if they exist\n  words.delete_if { |word| word.include?(\"\
    ;\") } # remove semicolons if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    '\") } # remove apostrophes if they exist\n  words.delete_if { |word| word.include?(\"\
    !\") } # remove exclamation points if they exist\n  words.delete_if { |word| word.include?(\"\
    ?\") } # remove question marks if they exist\n  words.delete_if { |word| word.include?(\"\
    ;\") } # remove semicolons if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    '\") } # remove apostrophes if they exist\n  words.delete_if { |word| word.include?(\"\
    !\") } # remove exclamation points if they exist\n  words.delete_if { |word| word.include?(\"\
    ?\") } # remove question marks if they exist\n  words.delete_if { |word| word.include?(\"\
    ;\") } # remove semicolons if they exist\n  words.delete_if { |word", "  words\
    \ = txt.split(\" \").map(&:strip)\n  words.count { |word| word.empty? } ? words\
    \ : words.join(', ')\nend", "  words = txt.split(\" \") # Split on whitespace\n\
    \  words.each do |word|\n    word.split(\",\").each do |word|\n      word.downcase!\n\
    \    end\n  end\n  words.count(\"a\") + words.count(\"b\") + words.count(\"c\"\
    ) + words.count(\"d\") + words.count(\"e\") + words.count(\"f\") + words.count(\"\
    g\") + words.count(\"h\") + words.count(\"i\") + words.count(\"j\") + words.count(\"\
    k\") + words.count(\"l\") + words.count(\"m\") + words.count(\"n\") + words.count(\"\
    o\") + words.count(\"p\") + words.count(\"q\") + words.count(\"r\") + words.count(\"\
    s\") + words.count(\"t\") + words.count(\"u\") + words.count(\"v\") + words.count(\"\
    w\") + words.count(\"x\") + words.count(\"y\") + words.count(\"z\")\nend", " \
    \ txt.split(\" \").map { |word| word.split(\",\").map(&:downcase) }.flatten.uniq.count\n\
    end", "  words = txt.split(\" \").map(&:strip)\n  words.count { |w| w.empty? ||\
    \ w.include?(',') } ? words.join(\",\") : words.count\nend", "  txt.split(\" \"\
    ).each do |word|\n    word.split(\",\").each do |word|\n      word.split(\"-\"\
    ).each do |word|\n        word.split(\".\").each do |word|\n          word.split(\"\
    !\").each do |word|\n            word.split(\"?\").each do |word|\n          \
    \    word.split(\":\").each do |word|\n                word.split(\";\").each\
    \ do |word|\n                  word.split(\":\").each do |word|\n            \
    \        word.split(\"-\").each do |word|\n                      word.split(\"\
    .\").each do |word|\n                        word.split(\"!\").each do |word|\n\
    \                          word.split(\"?\").each do |word|\n                \
    \            word.split(\":\").each do |word|\n                              word.split(\"\
    ;\").each do |word|\n                                word.split(\":\").each do\
    \ |word|\n                                  word.split(\"-\").each do |word|\n\
    \                                    word.split(\".\").each do |word|\n      \
    \                                word.split(\"!\").each do |word|\n          \
    \                              word.split(\"?\").each do |word|\n            \
    \                              word.split(\":\").each do |word|\n            \
    \                                word.split(\";\").each do |word|\n          \
    \                                    word.split(\":\").each do |word|\n      \
    \                                          word.split(\"-\").each do |word|\n\
    \                                                  word.split(\".\").each do |word|\n\
    \                                                    word.split(\"!\").each do\
    \ |word|\n                                                      word.split(\"\
    ?\").each do |word|\n                                                        word.split(\"\
    :\").each do |word|\n                                                        \
    \  word.split(\";\").each do |word|\n                                        \
    \                    word.split(\":\").each do |word|\n                      \
    \                                        word.split(\"-\").each do |word|\n  \
    \                                                              word.split(\".\"\
    ).each do |word|\n                                                           \
    \       word.split(\"!\").each do |word|\n                                   \
    \                                 word.split(\"?\").each do |word|\n         \
    \                                                             word.split(\":\"\
    ).each do |word|\n                                                           \
    \             word.split(\";\").each do |word|\n                             \
    \                                             word.split(\":\").each do |word|\n\
    \                                                                            word.split(\"\
    -\").each do |word|\n                                                        \
    \                      word.split(\".\").each do |word|\n                    \
    \                                                            word.split(\"!\"\
    ).each do |word|\n                                                           \
    \                       word.split(\"?\").each do |word|\n                   \
    \                                                                 word.split(\"\
    :\").each do |word|\n                                                        \
    \                              word.split(\";\").each do |word|\n            \
    \                                                                            word.split(\"\
    :\").each do |word|\n                                                        \
    \                                  word.split(\"-\").each do |word|\n        \
    \                                                                            \
    \        word.split(\".\").each do |word|\n                                  \
    \                                                            word.split(\"!\"\
    ).each do |word|\n                                                           \
    \                                     word.split(\"?\").each do |word|\n     \
    \                                                                            \
    \                 word.split(\":\").each do |word|\n                         \
    \                                                                           word.split(\"\
    ;\").", "  words = txt.split(\" \") # Split on whitespace\n  words.delete_if {\
    \ |word| word.empty? } # Remove empty words\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist", "  words = txt.split(\" \").map do |word|\n\
    \    word.split(\",\").map do |word|\n      word.strip\n    end\n  end\n  words.flatten.compact\n\
    end", "  words = txt.split(\" \").map(&:downcase)\n  words.count { |w| w.include?(\"\
    ,\") || w.include?(\",.\") }\nend", "  words = txt.split(\" \").map do |word|\n\
    \    word.split(\",\").map do |word|\n      word.strip\n    end\n  end\n  words.flatten.compact.count\n\
    end", "  txt.split(\" \").each do |word|\n    word.split(\",\").each do |word|\n\
    \      word.downcase!\n    end\n  end\n  txt.split(\" \").count{|word| word.downcase!}\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
