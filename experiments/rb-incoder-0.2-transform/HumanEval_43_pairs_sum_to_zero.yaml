name: HumanEval_43_pairs_sum_to_zero
language: rb
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> pairs_sum_to_zero.call([1,\
  \ 3, -2, 1])\n# false\n# >>> pairs_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>>\
  \ pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])\n# true\n# >>> pairs_sum_to_zero.call([1])\n\
  # false\ndef pairs_sum_to_zero(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
  \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
  \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5,\
  \ 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
  \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
  \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n\
  \    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n"
completions: ["  l.each do |i|\n    l.each do |j|\n      return false if i != j and\
    \ i + j == 0\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,arrays |>\n\
    <| c |>\nI like the idea of using two nested loops. I wonder if there is a more\
    \ efficient way of doing this though.\n<|/ c |>\n<| c |>\nI doubt that there is\
    \ an efficient way to do this. But you can always benchmark it yourself.\n<|/\
    \ c |>\n<| c |>\nI added a benchmark test to the answer. My guess is that this\
    \ solution is faster than the other solutions.\n<|/ c |>\n<| c |>\nI added a benchmark\
    \ test to the answer. My guess is that this solution is faster than the other\
    \ solutions.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  l.sort.each do |i|\n\
    \    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n    return false\
    \ if l[j] != l[i]\n  end\n  return true\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum && el == 0 || sum\n  end\nend", "  l.sort.each do |i|\n\
    \    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n    return false\
    \ if l[j] != l[i]\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<|\
    \ a dscore=2 |>\n<code>", "  l.sort!\n  return l.inject(true) do |acc, x|\n  \
    \  acc && x[0] == x[1]\n  end\nend", "  l.sort!\n  l.inject(true) { |sum, el|\
    \ sum && el == 0 ? false : sum }\nend", "  l.each do |i|\n    l.each do |j|\n\
    \      return false if i == j && i != 0\n    end\n  end\n  true\nend", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n  \
    \  return false if l[j] != l[i]\n  end\n  true\nend", "  l.each_with_index do\
    \ |x, i|\n    l.each_with_index do |y, j|\n      return false if i == j\n    \
    \  return false if i == j + 1 && (x != y || x == 0)\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it fails for `[1,\
    \ 1, 1]` which should return `true` but returns `false`.\n<|/ c |>\n<| c |>\n\
    I added a version that works with `[1, 1, 1]`\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with `[1, 1, 1]`\n<|/ c |>\n<| c |>\nI added a version that works\
    \ with `[1, 1, 1]`\n<|/ c |>\n<| c |>\nI added a version that works with `[1,\
    \ 1, 1]`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  l.each do |i|\n    l.each do\
    \ |j|\n      return false if i != j && i + j == 0\n    end\n  end\n  true\nend",
  "  l.sort.each do |i|\n    l.each do |j|\n      return false if i == j\n    end\n\
    \  end\n  true\nend", "  l.sort.each do |i|\n    l.each do |j|\n      return false\
    \ if i != j && i + j == 0\n    end\n  end\n  true\nend", "  l.sort!\n  l.inject(true)\
    \ { |acc, x| acc && x[0] == x[1] && false }\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum,x| sum && sum + x == 0 }\nend", "  l.each_with_index do |x, i|\n    l.delete_at(i)\n\
    \    return true if l.empty?\n    l.delete_at(i)\n    return false if l.empty?\n\
    \  end\n  true\nend", "  l.each do |i|\n    l.each do |j|\n      return false\
    \ if i != j && i + j == 0\n    end\n  end\n  true\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum, e| sum && e == 0 }\nend", "  l.each_cons(2) do |a, b|\n    return false\
    \ if a.sum != b.sum\n  end\n  true\nend", "  l.sort!\n  l.inject(true) do |sum,\
    \ el|\n    sum && el == 0 || sum\n  end\nend", "  l.each_cons(2) do |a,b|\n  \
    \  return false if a.sum != 0 && b.sum != 0\n  end\n  true\nend\n</code>\n<|/\
    \ a tags=ruby,arrays |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to make it more efficient. For example, `pairs_sum_to_zero([1,2,3,4,5,6,7,8,9])`\
    \ returns `true`, but `pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,0])` returns `false`.\
    \ Is there a way to make it return `true` for `[1,2,3,4,5,6,7,8,9,0]`?\n<|/ c\
    \ |>\n<| c |>\nI added a version that returns `true` for that case.\n<|/ c |>\n\
    <| c |>\nI added a version that returns `true` for that case.\n<|/ c |>\n<| a\
    \ tags=ruby,arrays |>\n<code>", "  l.sort!\n  l.inject(true) { |sum,x| sum &&\
    \ sum + x == 0 }\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum &&\
    \ el == 0 ? false : sum || el == 0 ? true : sum + el == 0\n  end\nend", "  l.sort!\n\
    \  l.inject(true) { |sum, el| sum && el == 0 }\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a, b|\n    return true if a + b == 0\n  end\n  false\nend", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n\
    \      l[j] == l[j+1] ? l[j] -= 1 : l[j] += 1\n      j += 1\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n\
    \  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break\
    \ if l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n \
    \   end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n\
    \      break if l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n    \
    \  j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j ==\
    \ l.size do\n      break if l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j]\
    \ += 1\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1] ? l[j]\
    \ -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j\
    \ = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n\
    \      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l", "  l.sort!\n  l.inject(true) { |acc, x| acc &&\
    \ x[0] == 0 && x[1] == 0 }\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum &&\
    \ sum + x == 0 }\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum and\
    \ (sum - el == 0)\n  end\nend", "  l.sort!\n  l.inject(true) { |sum, el| sum &&\
    \ el == 0 ? false : sum }\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum &&\
    \ sum + x == 0 }\nend", "  l.sort.each do |i|\n    j = i + 1\n    break if j ==\
    \ l.size\n    break if l[j] == 0\n    return false if l[j] != l[i]\n  end\n  return\
    \ true\nend", "  l.each_cons(2) do |a,b|\n    return false if a.sum != 0 && b.sum\
    \ != 0\n  end\n  true\nend\n</cell>\n<cell>", "  l.sort!\n  l.inject(true) { |acc,\
    \ x| acc && x.zero? }\nend", "  l.each_cons(2) do |a, b|\n    return false if\
    \ a.sum != b.sum\n  end\n  true\nend", "  l.sort!\n  return l.inject(true) do\
    \ |sum,x|\n    sum and (sum - x == 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  l.inject(true) { |memo,\
    \ el| memo && el == 0 }\nend", "  l.each_cons(2) do |a,b|\n    return false if\
    \ a.sum != 0 && b.sum != 0\n  end\n  true\nend\n</cell>\n<cell>", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n  \
    \  return false if l[j] != l[i]\n  end\n  true\nend", "  l.sort!\n  return l.inject(true)\
    \ do |acc, x|\n    acc && x[0] == x[1]\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x != 0)\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ { |memo, el| memo && el == 0 }\nend", "  l.sort.each do |i|\n    j = i + 1\n\
    \    loop do\n      return false if j == l.length\n      break if l[j] == 0\n\
    \      j += 1\n    end\n  end\n  true\nend", "  l.sort.each do |i|\n    j = i\
    \ + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 2\n    end\n  end\n  l.", "  l.each_cons(2) do |a,\
    \ b|\n    return false if a.sum != 0 || b.sum != 0\n  end\n  true\nend", "  l.each\
    \ do |i|\n    l.each do |j|\n      return false if i != j && i + j == 0\n    end\n\
    \  end\n  true\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum and (sum\
    \ + el == 0)\n  end\nend", "  l.sort.each do |i|\n    j = i + 1\n    until j ==\
    \ l.size do\n      if l[j] == l[i]\n        return false\n      end\n      j +=\
    \ 1\n    end\n  end\n  return true\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0)\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum,x| sum && sum + x == 0 }\nend", "  l.each_with_index do |x, i|\n    l.delete_at(i)\n\
    \    return true if l.empty?\n    l.each_with_index do |y, j|\n      return false\
    \ if x + y == 0\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis is very inefficient. `delete_at` will move every element after `i`\
    \ down one position. `each_with_index` will move every element after `i` down\
    \ one position. `each_with_index` will move every element after `i` down one position.\
    \ `each_with_index` will move every element after `i` down one position. `each_with_index`\
    \ will move every element after `i` down one position. `each_with_index` will\
    \ move every element after `i` down one position. `each_with_index` will move\
    \ every element after `i` down one position. `each_with_index` will move every\
    \ element after `i` down one position. `each_with_index` will move every element\
    \ after `i` down one position. `each_with_index` will move every element after\
    \ `i` down one position. `each_with_index` will move every element after `i` down\
    \ one position. `each_with_index` will move every element after `i` down one position.\
    \ `each_with_index` will move every element after `i` down one position. `each_with_index`\
    \ will move every element after `i` down one position. `each_with_index` will\
    \ move every element after `i` down one position. `each_with_index` will move\
    \ every element after `i` down one position. `each_with_index` will move every\
    \ element after `i` down one position. `each_with_index` will move every element\
    \ after `i` down one position. `each_with_index` will move every element after\
    \ `i` down one position. `each_with_index` will move every element after `i` down\
    \ one position. `each_with_index` will move every element after `i` down one position.\
    \ `each_with_index` will move every element after `i` down one position. `each_with_index`\
    \ will move every element after `i` down one position. `each_with_index` will\
    \ move every element after `i` down one position. `each_with_index` will move\
    \ every element after `i` down one position. `each_with_index` will move every\
    \ element after `i` down one position. `", "  l.sort!\n  l.inject(true) do |sum,x|\n\
    \    sum && sum + x == 0\n  end\nend", "  l.sort!\n  l.inject(true) { |sum, el|\
    \ sum && el == 0 }\nend", "  l.sort!\n  l.inject(true) { |sum, e| sum && e ==\
    \ 0 }\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum and (sum - x) ==\
    \ 0\n  end\nend", "  l.sort!\n  l.inject(true) { |memo, el| memo && memo[el] ||\
    \ false }\nend", "  l.sort.each do |i|\n    j = i + 1\n    break if j == l.size\n\
    \    break if l[j] == 0\n    return false if l[j] != l[i]\n  end\n  true\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `pairs_sum_to_zero.call([1,3,-2,1])`\
    \ returns `true` but `pairs_sum_to_zero.call([1,3,-2,1,1])` returns `false`.\n\
    <|/ c |>\n<| c |>\n: I tested it on ruby 1.9.3p392 and it works. I added a test\
    \ case to the answer.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ Ruby 1.8.7 as well.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ Ruby 1.8.7 as well.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ Ruby 1.8.7 as well.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n  \
    \  return false if l[j] != l[i]\n  end\n  true\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis solution doesn't work if you have negative numbers in the list\n\
    <|/ c |>\n<| c |>\nIt does work, just tested it out. Try it out with negative\
    \ numbers and see if it works.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try it out with [1,2,-3,-4,-5]\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it out with [1,2,-3,-4,-5]\n<|/ c |>\n<| c |>\nIt does work. Try it out with\
    \ [1,2,-3,-4,-5]\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      next if l[j] == 0\n      l[j]\
    \ == l[j] + l[i] if l[j] != 0\n      l[j] == l[j] - l[i] if l[j] != 0\n      break\n\
    \      j = j + 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until\
    \ j == l.size do\n      next if l[j] == 0\n      l[j] == l[j] - l[i] if l[j] !=\
    \ 0\n      break\n      j = j + 1\n    end\n  end\n  l.sort.each do |i|\n    j\
    \ = i + 1\n    until j == l.size do\n      next if l[j] == 0\n      l[j] == l[j]\
    \ + l[i] if l[j] != 0\n      break\n      j = j + 1\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      next if l[j] == 0\n \
    \     l[j] == l[j] - l[i] if l[j] != 0\n      break\n      j = j + 1\n    end\n\
    \  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      next\
    \ if l[j] == 0\n      l[j] == l[j] + l[i] if l[j] != 0\n      break\n      j =\
    \ j + 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      next if l[j] == 0\n      l[j] == l[j] - l[i] if l[j] != 0\n      break\n\
    \      j = j + 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until\
    \ j == l.size do\n      next if l[j] == 0\n      l[j] == l[j] + l[i] if l[j] !=\
    \ 0\n      break\n      j = j + 1\n    end\n  end\n  l.sort.each do |i|\n    j\
    \ = i + 1\n    until j == l.size do\n      next if l[j] == 0\n      l[j] == l[j]\
    \ - l[i] if l[j] != 0\n      break\n      j = j + 1\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      next if l[j] == 0\n \
    \     l[j] == l[j] + l[i] if l[j] != 0\n      break\n      j = ", "  l.sort!\n\
    \  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.each do |i|\n  \
    \  l.each do |j|\n      return false if i != j && i + j == 0\n    end\n  end\n\
    \  true\nend", "  l.each do |i|\n    l.each do |j|\n      return false if i !=\
    \ j && i + j == 0\n    end\n  end\n  true\nend", "  l.sort.each do |i|\n    j\
    \ = i + 1\n    break if j == l.size\n    break if l[j] == 0\n    return false\
    \ if l[j] != l[i]\n  end\n  true\nend", "  l.each_cons(2) do |a,b|\n    return\
    \ false if a.sum != 0 and b.sum != 0\n  end\n  true\nend\n</code>\n<|/ a |>\n\
    <| c |>\nI like your solution. Very elegant. Thanks.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  l.sort!\n  l.inject(true) { |acc, x| acc && x[0] == 0 && x[1]\
    \ != 0 }\nend", "  l.each_with_index do |e, i|\n    l.delete_at(i)\n    return\
    \ true if l.empty?\n    l.delete_at(i-1)\n    return false if l.empty?\n  end\n\
    \  false\nend", "  l.sort.each do |i|\n    j = i + 1\n    break if j == l.size\n\
    \    break if l[j] == 0\n    return false if l[j] != l[i]\n  end\n  return true\n\
    end", "  l.each do |i|\n    l.each do |j|\n      return false if i == j && i !=\
    \ 0\n    end\n  end\n  true\nend", "  l.each do |i|\n    l.each do |j|\n     \
    \ return false if i != j and i + j == 0\n    end\n  end\n  true\nend", "  l.sort!\n\
    \  return l.inject(true) do |acc, x|\n    acc && x.zero? && acc\n  end\nend",
  "  l.each_cons(2) do |a,b|\n    return false if a.sum != b.sum\n  end\n  true\n\
    end\n</code>\n<|/ a tags=ruby,arrays |>\n<| a tags=ruby,arrays |>\n<code>", " \
    \ l.sort!\n  l.inject(true) { |sum, e| sum && sum + e == 0 }\nend", "  l.sort!\n\
    \  l.inject(true) { |memo, el| memo && el == 0 }\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum,x| sum && sum + x == 0 }\nend", "  l.sort.each do |i|\n    j = i + 1\n\
    \    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j - 1] and\
    \ l[j - 1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j - 1] and l[j - 1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n \
    \ l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j - 1] and l[j - 1] == 0\n      j += 1 if l[j] ==\
    \ 0\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      break if l[j] == 0\n      l[j] == l[j - 1] and l[j - 1] == 0\n   \
    \   j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n\
    \    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j - 1] and\
    \ l[j - 1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j - 1] and l[j - 1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n \
    \ l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j - 1] and l[j - 1] == 0\n      j += 1 if l[j] ==\
    \ 0\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      break if l[j] == 0\n      l[j] == l[j - 1] and l[j - 1] == 0\n   \
    \   j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n\
    \    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j - 1] and\
    \ l[j - 1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == ", "  l.sort.each do |i|\n    l.each do |j|\n \
    \     return false if i == j\n    end\n  end\n  true\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if you have negative numbers in the list.\n<|/ c |>\n\
    <| c |>\nYes, it does. Try it out yourself.\n<|/ c |>\n<| c |>\nI see it now.\
    \ Sorry about that. My bad.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    while j < l.size && l[j] == 0\n      j += 1\n   \
    \ end\n    return false if j - i > 1\n  end\n  true\nend", "  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] and l[j-1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n\
    \      l[j] == l[j-1] and l[j-1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j-1] and l[j-1] == 0\n      j += 1 if l[j] == 0\n\
    \    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n\
    \      break if l[j] == 0\n      l[j] == l[j-1] and l[j-1] == 0\n      j += 1\
    \ if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until\
    \ j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1] and l[j-1] ==\
    \ 0\n      j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n    j =\
    \ i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ and l[j-1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n  l.sort.each do\
    \ |i|\n    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n   \
    \   l[j] == l[j-1] and l[j-1] == 0\n      j += 1 if l[j] == 0\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j-1] and l[j-1] == 0\n      j += 1 if l[j] == 0\n\
    \    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n\
    \      break if l[j] == 0\n      l[j] == l[j-1] and l[j-1] == 0\n      j += 1\
    \ if l[j] == 0\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until\
    \ j == ", "  l.each_cons(2) do |a,b|\n    return false if a.sum != b.sum\n  end\n\
    \  true\nend", "  l.sort!\n  l.inject(true) { |sum, el| sum && el == 0 }\nend",
  "  l.sort!\n  return l.inject(true) { |acc, el| acc && el == 0 }\nend", "  l.sort!\n\
    \  l.inject(true) do |acc, x|\n    acc && x[0] == 0 && x[1] != 0\n  end\nend",
  "  l.each_cons(2) do |a, b|\n    return false if a.sum != b.sum\n  end\n  true\n\
    end", "  l.sort.each do |i|\n    j = i + 1\n    break if j == l.length\n    break\
    \ if l[j] == 0\n    return false if l[j] != l[i]\n  end\n  true\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work if there are multiple zeros\
    \ in the array. For example, `[0, 0, 0]` returns `true`, but `[0, 0, 1]` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: I didn't notice that requirement. I've updated\
    \ my answer to take that into account.\n<|/ c |>\n<| c |>\n: I added a more efficient\
    \ solution that doesn't require sorting.\n<|/ c |>\n<| c |>\n: I added a more\
    \ efficient solution that doesn't require sorting.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  l.each_cons(2) do |a, b|\n    return false if a.sum != b.sum\n\
    \  end\n  true\nend", "  l.each_cons(2) do |a, b|\n    return false if a.sum !=\
    \ b.sum\n  end\n  true\nend", "  l.sort!\n  return l.inject(true) { |memo, pair|\
    \ memo && pair[1] == 0 }\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n  \
    \  sum and (sum - el == 0)\n  end\nend", "  l.sort.each do |i|\n    j = i + 1\n\
    \    while j < l.size && l[j] == 0\n      j += 1\n    end\n    return false if\
    \ j == l.size\n    return false if i != j\n  end\n  true\nend", "  l.sort!\n \
    \ l.inject(true) { |acc, x| acc && x==0 || x==-x }\nend", "  l.each do |i|\n \
    \   l.each do |j|\n      return false if i != j && i + j == 0\n    end\n  end\n\
    \  true\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't work. Try\
    \ it out with [1,2,3,4,5,6,7,8,9,10] as input. It returns false instead of true.\n\
    <|/ c |>\n<| c |>\nIt returns true for me. Try it out with [1,2,3,4,5,6,7,8,9,10]\
    \ as input. It returns false instead of true.\n<|/ c |>\n<| c |>\nYes, it returns\
    \ true for me too. Try it out with [1,2,3,4,5,6,7,8,9,10] as input. It returns\
    \ false instead of true.\n<|/ c |>\n<| c |>\nYes, it returns true for me too.\
    \ Try it out with [1,2,3,4,5,6,7,8,9,10] as input. It returns false instead of\
    \ true.\n<|/ c |>\n<| c |>\nYes, it returns true for me too. Try it out with [1,2,3,4,5,6,7,8,9,10]\
    \ as input. It returns false instead of true.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  l.each_with_index do |x, i|\n    l.delete_at(i)\n    return true if l.empty?\n\
    \    l.each_with_index do |y, j|\n      return false if x + y == 0\n    end\n\
    \  end\n  true\nend", "  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      break if l[j] == 0\n      l[j] += 1\n      j += 1\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] -= 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ += 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] -= 1\n      j +=\
    \ 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      break if l[j] == 0\n      l[j] += 1\n      j += 1\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] -= 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ += 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] -= 1\n      j +=\
    \ 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      break if l[j] == 0\n      l[j] += 1\n      j += 1\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] -= 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ += 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] -= 1\n      j +=\
    \ 1\n    end\n  end\n  l.", "  l.each do |i|\n    l.each do |j|\n      return\
    \ false if i != j && i + j == 0\n    end\n  end\n  true\nend", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.length\n      break if l[j] == 0\n \
    \     l[j] = 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i\
    \ + 1\n    until j == l.length\n      break if l[j] == 0\n      l[j] = 0\n   \
    \   j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j ==\
    \ l.length\n      break if l[j] == 0\n      l[j] = 1\n      j += 1\n    end\n\
    \  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.length\n      break\
    \ if l[j] == 0\n      l[j] = 0\n      j += 1\n    end\n  end\n  l.sort.each do\
    \ |i|\n    j = i + 1\n    until j == l.length\n      break if l[j] == 0\n    \
    \  l[j] = 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n\
    \    until j == l.length\n      break if l[j] == 0\n      l[j] = 0\n      j +=\
    \ 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.length\n\
    \      break if l[j] == 0\n      l[j] = 1\n      j += 1\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.length\n      break if l[j] == 0\n \
    \     l[j] = 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i\
    \ + 1\n    until j == l.length\n      break if l[j] == 0\n      l[j] = 1\n   \
    \   j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j ==\
    \ l.length\n      break if l[j] == 0\n      l[j] = 0\n      j += 1\n    end\n\
    \  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.length\n      break\
    \ if l[j] == 0\n      l[j] = 1\n      j += 1\n    end\n  end\n  l.sort.each do\
    \ |i|\n    j = i + 1\n    until j == l.length\n      break if l[j] == 0\n    \
    \  l[j] = 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n\
    \    until j == l.length\n", "  l.sort.each do |i|\n    j = i + 1\n    until j\
    \ == l.size do\n      break if l[j] == 0\n      l[j] == l[j+1] ? l[j] -= 1 : l[j]\
    \ += 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1] ? l[j]\
    \ -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j\
    \ = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j+1]\
    \ ? l[j] -= 1 : l[j] += 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n\
    \      l[j] == l[j+1] ? l[j] -= 1 : l[j] += 1\n      j += 1\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n\
    \  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break\
    \ if l[j] == 0\n      l[j] == l[j+1] ? l[j] -= 1 : l[j] += 1\n      j += 1\n \
    \   end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n\
    \      break if l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n    \
    \  j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j ==\
    \ l.size do\n      break if l[j] == 0\n      l[j] == l[j+1] ? l[j] -= 1 : l[j]\
    \ += 1\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j", "  l.sort.each do |i|\n    l.each\
    \ do |j|\n      return false if i != j and i + j == 0\n    end\n  end\n  true\n\
    end", "  l.each do |i|\n    l.each do |j|\n      return false if i != j && i +\
    \ j == 0\n    end\n  end\n  true\nend", "  l.sort!\n  return l.inject(true) do\
    \ |acc, el|\n    acc && el == 0 || el + acc == el\n  end\nend", "  l.each_cons(2)\
    \ do |a,b|\n    return true if a.sum != 0 && b.sum != 0\n  end\n  false\nend",
  "  l.sort!\n  l.inject(true) do |sum, el|\n    sum && el == l[-el]\n  end\nend",
  "  l.each_cons(2) do |a, b|\n    return false if a.sum != 0 || b.sum != 0\n  end\n\
    \  true\nend\n</cell>\n<cell>", "  l.sort.each do |i|\n    l.each do |j|\n   \
    \   return false if i == j\n    end\n  end\n  return true\nend", "  l.each_cons(2)\
    \ do |a, b|\n    return false if a.sum != b.sum\n  end\n  true\nend", "  l.sort!\n\
    \  l.inject(true) { |memo, el| memo && el == 0 }\nend", "  l.each do |i|\n   \
    \ l.each do |j|\n      return false if i != j && i + j == 0\n    end\n  end\n\
    \  true\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the list\
    \ contains negative numbers. Try it with `[1,2,-3,4]`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  l.sort.each do |i|\n    l.each do |j|\n      return false if\
    \ i == j\n    end\n  end\n  return true\nend", "  l.each_cons(2) do |a,b|\n  \
    \  return false if a.sum != b.sum\n  end\n  true\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,arrays |>\n<code>", "  l.sort.each do |i|\n    j = i + 1\n\
    \    break if j == l.size\n    break if l[j] == 0\n    return false if l[j] !=\
    \ l[i]\n  end\n  true\nend", "  l.sort!\n  l.inject(true) { |sum, el| sum && el\
    \ == 0 ? false : sum }\nend", "  l.each_cons(2) do |a, b|\n    return false if\
    \ a.sum != b.sum\n  end\n  true\nend", "  l.sort.each do |i|\n    j = i + 1\n\
    \    loop do\n      break if j == l.size\n      break if l[j] == 0\n      l[j]\
    \ == l[j] ? false : true\n      j += 1 \n    end\n  end\n  l.size == 1 ? true\
    \ : false\nend", "  l.sort!\n  return l.inject(true) { |memo, el| memo && el ==\
    \ 0 }\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum and (sum - el\
    \ == 0)\n  end\nend", "  l.each_cons(2) do |a, b|\n    return false if a.sum !=\
    \ b.sum\n  end\n  true\nend", "  l.each_cons(2) do |a, b|\n    return false if\
    \ a.sum != 0 || b.sum != 0\n  end\n  true\nend", "  l.each do |i|\n    l.each\
    \ do |j|\n      return false if i != j and i + j == 0\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "  l.sort.each do |i|\n   \
    \ j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] ==\
    \ l[j+1] and l[j+1] = 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] and l[j-1] = 0\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j+1] and l[j+1] = 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] and l[j-1] = 0\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j+1] and l[j+1] = 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] and l[j-1] = 0\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j+1] and l[j+1] = 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] and l[j-1] = 0\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j+1] and l[j+1] = 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] and l[j-1] = 0\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1", "  l.sort!\n  return l.inject(true) do |acc, x|\n    acc && x.zero?\
    \ && acc\n  end\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x ==\
    \ 0 }\nend", "  l.sort.each do |i|\n    j = i + 1\n    break if j == l.size\n\
    \    return false if l[j] == l[i]\n  end\n  return true\nend", "  l.sort!\n  return\
    \ l.inject(true) do |sum, el|\n    sum && el == 0 && (sum = false)\n  end\nend",
  "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n\
    \  l.inject(true) do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.each_cons(2)\
    \ do |a, b|\n    return false if a.sum != b.sum\n  end\n  true\nend", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    break if j == l.size\n    return false if l[j] -\
    \ l[i] == 0\n  end\n  true\nend", "  l.sort.each do |i|\n    j = i + 1\n    break\
    \ if j == l.size\n    break if l[j] == 0\n    return false if l[j] != l[i]\n \
    \ end\n  return true\nend", "  l.sort.each do |i|\n    l.delete_at(i)\n    break\
    \ if l.empty?\n    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i)\n    break if l.empty?\n    l.delete_at(i)\n    break\
    \ if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n    break if l.empty?\n\
    \    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n\
    \    break if l.empty?\n    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i)\n    break if l.empty?\n    l.delete_at(i)\n    break\
    \ if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n    break if l.empty?\n\
    \    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n\
    \    break if l.empty?\n    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i)\n    break if l.empty?\n    l.delete_at(i)\n    break\
    \ if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n    break if l.empty?\n\
    \    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n\
    \    break if l.empty?\n    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i)\n    break if l.empty?\n    l.delete_at(i)\n    break\
    \ if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n    break if l.empty?\n\
    \    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\n\
    \    break if l.empty?\n    l.delete_at(i)\n    break if l.empty?\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i)\n    break if l.empty?\n    l.delete_at(i)\n    break\
    \ if ", "  l.sort.each do |i|\n    l.each do |j|\n      return false if i != j\
    \ && i + j == 0\n    end\n  end\n  true\nend", "  l.sort.each do |i|\n    j =\
    \ i + 1\n    break if j == l.length\n    break if l[j] == 0\n    return false\
    \ if l[j] == l[i]\n  end\n  return true\nend", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum && el + sum == 0 && sum\n  end\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a,b|\n    return false if a.nil? || b.nil? || a + b == 0\n  end\n  return\
    \ true\nend", "  l.sort.each do |i|\n    j = i + 1\n    break if j == l.length\n\
    \    break if l[j] == 0\n    return false if l[j] != l[i]\n  end\n  true\nend",
  "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n\
    \  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum, el| sum && el == 0 ? false : sum }\nend", "  l.sort.each do |i|\n  \
    \  j = i + 1\n    until j == l.length\n      return false if l[j] == l[i]\n  \
    \    j += 1\n    end\n  end\n  true\nend", "  l.each_cons(2) do |a,b|\n    return\
    \ false if a.sum != b.sum\n  end\n  true\nend", "  l.sort!\n  l.inject(true) do\
    \ |sum, el|\n    sum and (sum - el == 0)\n  end\nend", "  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j+1] ? l[j] -= 1 : l[j] += 1\n      j += 1\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n\
    \      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n\
    \  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n\
    \  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break\
    \ if l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n \
    \   end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n\
    \      break if l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j] += 1\n    \
    \  j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j ==\
    \ l.size do\n      break if l[j] == 0\n      l[j] == l[j-1] ? l[j] -= 1 : l[j]\
    \ += 1\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1] ? l[j]\
    \ -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n    j\
    \ = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j-1]\
    \ ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j-1] ? l[j] -= 1 : l[j] += 1\n      j -= 1\n    end\n  end\n  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n\
    \      l[j] == l", "  l.each_cons(2) do |a,b|\n    return false if a.sum != b.sum\n\
    \  end\n  true\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x ==\
    \ 0 }\nend", "  l.each_cons(2) do |a, b|\n    return false if a.sum != 0 and b.sum\
    \ != 0\n  end\n  true\nend", "  l.each_cons(2) do |a, b|\n    return false if\
    \ a.sum != b.sum\n  end\n  true\nend", "  l.sort.each do |i|\n    l.each do |j|\n\
    \      return false if i != j && i + j == 0\n    end\n  end\n  true\nend", " \
    \ l.sort!\n  return l.inject(true) { |acc, x| acc && x[0] == 0 && x[1] != 0 }\n\
    end", "  l.sort.each do |i|\n    j = i + 1\n    break if j == l.length\n    break\
    \ if l[j] == 0\n    return false if l[j] != l[i]\n  end\n  return true\nend",
  "  l.sort.each do |i|\n    j = i + 1\n    break if j == l.size\n    return false\
    \ if l[j] == l[i]\n  end\n  true\nend", "  l.sort!\n  return l.inject(true) do\
    \ |sum, el|\n    sum and (sum + el == 0)\n  end\nend", "  l.sort.each do |i|\n\
    \    j = i + 1\n    break if j == l.length\n    break if l[j] == 0\n    return\
    \ false if l[j] == l[i]\n  end\n  return true\nend", "  l.sort.each do |i|\n \
    \   j = i + 1\n    while j < l.size && l[j] == 0\n      j += 1\n    end\n    return\
    \ false if j - i > 1\n  end\n  return true\nend", "  l.sort!\n  l.inject(true)\
    \ do |sum,x|\n    sum and (sum + x == 0)\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm\
    \ |>\n<| c |>\nI like your solution, but I wonder if it can be done without sorting.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't sort.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if it can be done without sorting.\n<|/ c |>\n\
    <| c |>\n: I added a solution that doesn't sort.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I wonder if it can be done without sorting.\n<|/ c |>\n<| a tags=ruby,arrays,algorithm\
    \ |>\nHere's a solution that doesn't sort.\n<code>", "  l.sort!\n  return l.inject(true)\
    \ do |sum, el|\n    sum and (sum - el == 0)\n  end\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      return false if i == j\n \
    \     return false if i == j + 1 && (x != y || x != 0)\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis solution does not work if you\
    \ have a list like `[1, 1, 1]`\n<|/ c |>\n<| c |>\n: It does work. Try it out.\
    \ `[1, 1, 1].reduce(:+) == 0` returns `true`.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if you have a list like `[1, 1, 1]`\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it out. `[1, 1, 1].reduce(:+) == 0` returns `true`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it out. `[1, 1, 1].reduce(:+) == 0` returns `true`.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>", "  l.sort.each do |i|\n    l.delete_at(i) if\
    \ l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] == 0\n  end\n\
    \  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each do\
    \ |i|\n    l.delete_at(i) if l[i] == 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] == 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] == 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] == 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] == 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] == 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] == 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] == 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] == 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] == 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] == ", "  l.sort!\n  return l.inject(true)\
    \ do |sum,x|\n    sum && sum + x == 0\n  end\nend", "  l.sort!\n  l.inject(true)\
    \ { |sum, el| sum && el == 0 ? false : sum }\nend", "  l.sort.each do |i|\n  \
    \  l.each do |j|\n      return false if i != j && i + j == 0\n    end\n  end\n\
    \  true\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum && el == 0 ||\
    \ sum\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis solution\
    \ doesn't work for negative numbers. Try `[1,2,-3,4].all?{|x| x<0}`\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing that out. I've updated my answer to include a solution\
    \ that works for negative numbers as well.\n<|/ c |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  l.each_with_index do |x, i|\n    l.delete_at(i)\n    return true if\
    \ l.empty?\n    l.delete_at(i)\n    return false if l.empty?\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  l.each_cons(2)\
    \ do |a, b|\n    return true if a.sum == 0 and b.sum == 0\n  end\n  false\nend\n\
    </code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n`each_cons` doesn't return an enumerator,\
    \ so you can't call `sum` on it.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  l.sort.each do |i|\n    j = i + 1\n    break\
    \ if j == l.size\n    return false if l[j] == l[i]\n    return true if l[j] ==\
    \ 0\n  end\n  true\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && x==0 ||\
    \ sum }\nend", "  l.each_cons(2) do |a,b|\n    return false if a.sum != b.sum\n\
    \  end\n  true\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x ==\
    \ 0 }\nend", "  l.sort!\n  return l.inject(true) do |acc, x|\n    acc && x.zero?\
    \ && acc\n  end\nend", "  l.sort!\n  l.inject(true) do |acc, el|\n    acc && el\
    \ == 0 || el == -el\n  end\nend", "  l.each do |i|\n    l.each do |j|\n      return\
    \ false if i != j && i + j == 0\n    end\n  end\n  true\nend", "  l.sort!\n  return\
    \ l.inject(true) { |memo, el| memo && memo[el] + el == 0 }\nend", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    until j == l.size do\n      if l[i] + l[j] == 0\n\
    \        return true\n      elsif l[i] + l[j] > 0\n        j += 1\n      else\n\
    \        i += 1\n      end\n    end\n  end\n  false\nend", "  l.sort.each do |i|\n\
    \    j = i + 1\n    while j < l.size && l[j] == 0\n      j += 1\n    end\n   \
    \ return false if j == l.size\n    return true if l[j] == 0\n  end\n  true\nend",
  "  l.sort!\n  return l.inject(true) do |result, el|\n    result && el == 0 || el\
    \ + result == 0\n  end\nend", "  l.sort!\n  return l.inject(true) do |result,\
    \ pair|\n    result && pair[0] == pair[1]\n  end\nend", "  l.sort.each do |i|\n\
    \    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n    return false\
    \ if l[j] == l[i]\n  end\n  return true\nend", "  l.each_cons(2) do |a, b|\n \
    \   return false if a.sum != 0 || b.sum != 0\n  end\n  true\nend\n</code>\n<|/\
    \ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work for `[1, 1, 1]`\n<|/ c |>\n\
    <| c |>\nYes, it does. `[1, 1, 1]` has two pairs that sum to zero. `[1, 1, 2]`\
    \ has three pairs that sum to zero. `[1, 1, 3]` has four pairs that sum to zero.\
    \ `[1, 1, 4]` has five pairs that sum to zero. `[1, 1, 5]` has six pairs that\
    \ sum to zero. `[1, 1, 6]` has seven pairs that sum to zero. `[1, 1, 7]` has eight\
    \ pairs that sum to zero. `[1, 1, 8]` has nine pairs that sum to zero.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. My bad.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. My bad.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  l.sort.each do\
    \ |i|\n    j = i + 1\n    break if j == l.length\n    break if l[j] == 0\n   \
    \ return false if l[j] != l[i]\n  end\n  return true\nend", "  l.sort.each do\
    \ |i|\n    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n    return\
    \ false if l[j] == l[i]\n  end\n  return true\nend", "  l.sort!\n  return l.inject(true)\
    \ do |acc, x|\n    acc && x[0] == x[1]\n  end\nend", "  l.sort!\n  return l.inject(true)\
    \ { |memo, el| memo && el == 0 }\nend", "  l.sort.each do |i|\n    j = i + 1\n\
    \    break if j == l.size\n    return false if l[j] == l[i]\n  end\n  true\nend",
  "  l.sort!\n  return l.inject(true) do |result, pair|\n    result && pair[0] ==\
    \ pair[1]\n  end\nend", "  l.sort.each do |i|\n    j = i + 1\n    break if j ==\
    \ l.length\n    break if l[j] == 0\n    return false if l[j] != l[i]\n  end\n\
    \  return true\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder\
    \ if it can be done without sorting the list. Maybe by using a hash table?\n<|/\
    \ c |>\n<| c |>\n: Yes, it can be done without sorting the list. I'll post an\
    \ answer in a minute.\n<|/ c |>\n<| c |>\n: I added an answer that doesn't sort\
    \ the list. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  l.sort.each do |i|\n \
    \   j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j] + l[i] and l[j] == 0 and l[j] == 0\n      j += 1\n    end\n  end\n \
    \ l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j] - l[i] and l[j] == 0 and l[j] == 0\n      j +=\
    \ 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      break if l[j] == 0\n      l[j] == l[j] + l[j] and l[j] == 0 and l[j]\
    \ == 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j] - l[j] and\
    \ l[j] == 0 and l[j] == 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j] + l[j] and l[j] == 0 and l[j] == 0\n      j += 1\n    end\n  end\n \
    \ l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n      break if\
    \ l[j] == 0\n      l[j] == l[j] - l[j] and l[j] == 0 and l[j] == 0\n      j +=\
    \ 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n    until j == l.size\
    \ do\n      break if l[j] == 0\n      l[j] == l[j] + l[j] and l[j] == 0 and l[j]\
    \ == 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n    j = i + 1\n  \
    \  until j == l.size do\n      break if l[j] == 0\n      l[j] == l[j] - l[j] and\
    \ l[j] == 0 and l[j] == 0\n      j += 1\n    end\n  end\n  l.sort.each do |i|\n\
    \    j = i + 1\n    until j == l.size do\n      break if l[j] == 0\n      l[j]\
    \ == l[j] + l[j] and l[j] == 0 and l[j] == 0\n      j += 1\n    end\n  end\n \
    \ l.sort.each do |i|", "  l.sort!\n  l.inject(true) { |sum, el| sum && el == 0\
    \ }\nend", "  l.sort!\n  l.inject(true) { |sum,x| sum && sum + x == 0 }\nend",
  "  l.sort!\n  return l.inject(true) do |result, item|\n    result && item == 0\n\
    \  end\nend", "  l.sort.each do |i|\n    j = i + 1\n    until j == l.size do\n\
    \      if l[j] == l[i]\n        return false\n      elsif l[j] > l[i]\n      \
    \  j += 1\n      else\n        i += 1\n      end\n    end\n  end\n  true\nend",
  "  l.sort!\n  return l.inject(true) { |sum, el| sum && el == 0 || sum }\nend", " \
    \ l.sort.each do |i|\n    j = i + 1\n    break if j == l.size\n    break if l[j]\
    \ == 0\n    return false if l[j] != l[i]\n  end\n  return true\nend", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n  \
    \  return false if l[j] == l[i]\n  end\n  return true\nend", "  l.sort.each do\
    \ |i|\n    j = i + 1\n    until j == l.size do\n      if l[j] == l[i]\n      \
    \  return false\n      end\n      j += 1\n    end\n  end\n  return true\nend",
  "  l.sort.each do |i|\n    j = i + 1\n    while j < l.size && l[j] == 0\n      j\
    \ += 1\n    end\n    return false if j == l.size\n    return true if l[j] == l[i]\n\
    \  end\n  true\nend", "  l.sort!\n  l.inject(true) do |sum,x|\n    sum && sum\
    \ + x == 0\n  end\nend", "  l.sort!\n  l.inject(true) do |sum, el|\n    sum &&\
    \ el == 0 || sum\n  end\nend", "  l.sort!\n  l.inject(true) { |acc, x| acc &&\
    \ x[0] == x[-1] && acc == false }\nend", "  l.each do |i|\n    l.each do |j|\n\
    \      return false if i != j && i + j == 0\n    end\n  end\n  true\nend", " \
    \ l.sort!\n  l.inject(true) { |sum, e| sum && e == l[0] + l[1] }\nend", "  l.sort.each\
    \ do |i|\n    j = i + 1\n    break if j == l.size\n    break if l[j] == 0\n  \
    \  return false if l[j] != l[i]\n  end\n  true\nend", "  l.sort!\n  return l.inject(true)\
    \ do |acc, el|\n    acc && el == 0 || el == -el\n  end\nend", "  l.sort.each do\
    \ |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n\
    \  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each\
    \ do |i|\n    l.delete_at(i) if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i)\
    \ if l[i] != 0\n  end\n  l.sort.each do |i|\n    l.delete_at(i) if l[i] != 0\n\
    \  end\n  l.sort.each do |"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
