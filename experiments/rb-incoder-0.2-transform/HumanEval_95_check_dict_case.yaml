name: HumanEval_95_check_dict_case
language: rb
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
  \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef\
  \ check_dict_case(dict)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
  \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
  p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
  \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
  }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\"\
  \ => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
  fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
  \  end\nend\n"
completions: ["  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  return true\nend", "  return\
    \ false if dict.empty? or dict.size == 0\n  \n  dict.each do |key, value|\n  \
    \  next if value.kind_of?(Hash)\n    next if value.kind_of?(Array)\n    next if\
    \ value.kind_of?(String)\n    next if value.downcase != value\n    next if value.upcase\
    \ != value\n    next if value.to_s.downcase != value.to_s\n    next if value.to_s.upcase\
    \ != value.to_s\n    next if value.to_s.downcase == value.to_s.upcase\n    next\
    \ if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase ", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n    \
    \  value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if you have an array with mixed case keys. `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})` returns `true` instead of `false`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have an array with mixed case keys.\
    \ `check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})` returns `true`\
    \ instead of `false`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have an array\
    \ with mixed case keys. `check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"\
    })` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have an array with mixed case keys. `check_dict_case({\"a\" => \"apple\"\
    , \"b\" => \"banana\"})` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have an array with mixed case keys. `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})` returns `true` instead of `false`.\n\
    <|/ c |>\n<| a dscore=5 |>\nI like to use this method:\n<code>", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String) && key.is_a?(String)\n      true\n\
    \    elsif value.is_a?(String) && key.is_a?(Numeric)\n      true\n    elsif value.is_a?(Numeric)\
    \ && key.is_a?(String)\n      true\n    else\n      false\n    end\n  end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for my examples. But I still have a problem with my real data. I will update\
    \ my question to show you my real data.\n<|/ c |>\n<| c |>\nI updated my question\
    \ to show you my real data. I hope you can help me to solve this problem.\n<|/\
    \ c |>\n<| c |>\nI updated my question to show you my real data. I hope you can\
    \ help me to solve this problem.\n<|/ c |>\n<| c |>\nI updated my question to\
    \ show you my real data. I hope you can help me to solve this problem.\n<|/ c\
    \ |>\n<| c |>\nI updated my question to show you my real data. I hope you can\
    \ help me to solve this problem.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ case dict\n  when Hash\n    dict.all? { |key, value| key.is_a?(String) && value.is_a?(String)\
    \ }\n  when Array\n    dict.all? { |value| value.is_a?(String) }\n  else\n   \
    \ false\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a? String\n      if key.downcase\
    \ == key.upcase\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return\
    \ true\nend", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n\
    \      if key.class == String\n        key.downcase == value.downcase\n      else\n\
    \        false\n      end\n    end\n  end\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  if dict.empty?\n    false\n  else\n    dict.keys.all?\
    \ { |key| key.kind_of?(String) }\n  end\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String) && key.to_s.downcase == key.to_s.upcase\n      true\n\
    \    else\n      false\n    end\n  end\nend", "  dict.each do |key, value|\n \
    \   if value.is_a? String\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend", "  dict.each do |key, value|\n    if value.is_a?\
    \ String\n      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n\
    \  return true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |k, v|\n    if k.is_a? String\n      k.downcase!\n    end\n\
    \    if k.is_a? String\n      k.upcase!\n    end\n  end\n  return true\nend\n\
    </code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work. `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})` returns `true` while it should return\
    \ `false`.\n<|/ c |>\n<| c |>\nI updated my answer. Now it works. Thanks for pointing\
    \ out.\n<|/ c |>\n<| c |>\n`check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"\
    })` returns `false` while it should return `true`.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer. Now it works. Thanks for pointing out.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  case dict\n  when Hash\n    dict.all? { |key, value| key.is_a?(String)\
    \ && value.is_a?(String) }\n  when Array\n    dict.all? { |value| value.is_a?(String)\
    \ }\n  else\n    false\n  end\nend", "  case dict.length\n  when 0\n    false\n\
    \  when 1\n    true\n  else\n    dict.keys.all? { |k| k.is_a?(String) }\n  end\n\
    end", "  dict.each do |k, v|\n    if k.is_a?(String)\n      k.downcase!\n    else\n\
    \      k.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?\
    \ String\n      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n\
    \  true\nend", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n\
    \      if value.is_a?(String)\n        true\n      else\n        false\n     \
    \ end\n    end\n  end\nend", "  return false if dict.nil? || dict.empty?\n  dict.each\
    \ do |key, value|\n    next if value.nil? || value.empty?\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(TrueClass) || value.is_a?(FalseClass)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Proc)\n    next if value.is_a?(IO)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(StringIO)\n    next\
    \ if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::MemoryStream)\n",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  case dict\n \
    \ when Hash\n    dict.each do |key, value|\n      next if value.nil?\n      next\
    \ if value.is_a?(String)\n      next if value.is_a?(Symbol)\n      next if value.is_a?(Numeric)\n\
    \      next if value.is_a?(TrueClass)\n      next if value.is_a?(FalseClass)\n\
    \      next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n   \
    \   next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n      next\
    \ if value.is_a?(String)\n      next if value.is_a?(Symbol)\n      next if value.is_a?(Numeric)\n\
    \      next if value.is_a?(TrueClass)\n      next if value.is_a?(FalseClass)\n\
    \      next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n   \
    \   next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n      next\
    \ if value.is_a?(String)\n      next if value.is_a?(Symbol)\n      next if value.is_a?(Numeric)\n\
    \      next if value.is_a?(TrueClass)\n      next if value.is_a?(FalseClass)\n\
    \      next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n   \
    \   next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n      next\
    \ if value.is_a?(String)\n      next if value.is_a?(Symbol)\n      next if value.is_a?(Numeric)\n\
    \      next if value.is_a?(TrueClass)\n      next if value.is_a?(FalseClass)\n\
    \      next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n   \
    \   next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n      next\
    \ if value.is_a?(String)\n      next if value.is_a?(Symbol)\n      next if value.is_a?(Numeric)\n\
    \      next if value.is_a?(TrueClass)\n      next if value.is_a?(FalseClass)\n\
    \      next if value.is_a?(BigDecimal)\n      next if value.is_a?(Float)\n   \
    \   next ", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |k, v|\n    next if k.nil? || k.empty?\n    next if k.downcase\
    \ != k\n    next if k.upcase != k\n    return false\n  end\n  true\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  return true\nend", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return\
    \ true\nend", "  dict.each do |key, value|\n    if value.is_a? String\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if you have a hash like `{\"a\" => \"apple\"\
    , \"b\" => \"banana\"}`\n<|/ c |>\n<| c |>\nI agree, that's why I added the comment\
    \ \"# Given a dictionary, return True if all keys are strings in lower case or\
    \ all keys are strings in upper case, else return False.\" in the beginning of\
    \ the answer.\n<|/ c |>\n<| c |>\nI agree with you, that's why I added the comment\
    \ \"# Given a dictionary, return True if all keys are strings in lower case or\
    \ all keys are strings in upper case, else return False.\" in the beginning of\
    \ the answer.\n<|/ c |>\n<| c |>\nI agree with you, that's why I added the comment\
    \ \"# Given a dictionary, return True if all keys are strings in lower case or\
    \ all keys are strings in upper case, else return False.\" in the beginning of\
    \ the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  dict.each do |key, value|\n\
    \    if value.is_a? String\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return\
    \ true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n     \
    \ value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String) && key.is_a?(String)\n\
    \      true\n    elsif value.is_a?(String) && key.is_a?(Integer)\n      false\n\
    \    elsif value.is_a?(Integer) && key.is_a?(String)\n      false\n    end\n \
    \ end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |k, v|\n    if k.is_a? String\n      k.downcase!\n    end\n    if k.is_a? String\n\
    \      k.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |k, v|\n    if k.is_a?(String)\n      k.downcase!\n    else\n\
    \      k.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nI like using Ruby's built-in Enumerable#any? for this:\n<code>",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for empty dictionaries.\n<|/ c |>\n<| c |>\nIt doesn't work for empty dictionaries\
    \ because `check_dict_case({})` returns `true` but `check_dict_case({})` returns\
    \ `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false` because `check_dict_case({})` returns `false` because `check_dict_case({})`\
    \ returns `false", "  dict.each do |key, value|\n    next if value.nil?\n    next\
    \ if value.is_a?(Hash)\n    next if value.is_a?(Array)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Numeric)\n    next if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n\
    \    next if value.is_a?(Date)\n    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  return false if dict.empty?\n  dict.each do\
    \ |k, v|\n    next if k.nil? || k.empty?\n    return false if k.downcase != k\n\
    \    return false if k.upcase != k\n  end\n  true\nend", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work if\
    \ you have symbols as keys. For example, `{\"a\" => \"apple\", \"b\" => \"banana\"\
    }` returns `true` but `{\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }` returns `false`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\
    \ I will update my answer to include a test case.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a test case that shows it works.\n<|/ c |>\n<| c |>\nI\
    \ updated my answer to include a test case that shows it works.\n<|/ c |>\n<|\
    \ c |>\nI updated my answer to include a test case that shows it works.\n<|/ c\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  if dict.empty?\n    false\n\
    \  else\n    dict.each do |k, v|\n      if k.is_a?(String)\n        k.downcase\
    \ == v\n      else\n        k.upcase == v\n      end\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work if you have keys\
    \ that are symbols.\n<|/ c |>\n<| c |>\nThis doesn't work if you have keys that\
    \ are symbols.\n<|/ c |>\n<| c |>\nThis doesn't work if you have keys that are\
    \ symbols.\n<|/ c |>\n<| c |>\nThis doesn't work if you have keys that are symbols.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n\
    <code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?\
    \ String\n      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n\
    \  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n    \
    \  value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  return true\nend", "  if dict.empty?\n\
    \    false\n  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n\
    \        true\n      elsif value.is_a?(Integer)\n        true\n      else\n  \
    \      false\n      end\n    end\n  end\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby\
    \ |>\n<code>", "  return false if dict.empty? or dict.keys.all? { |key| key.kind_of?\
    \ String }\n  dict.keys.all? { |key| key.kind_of? String } || dict.keys.all? {\
    \ |key| key.kind_of? String }\nend", "  if dict.empty?\n    false\n  else\n  \
    \  dict.each do |key, value|\n      if value.is_a?(String)\n        value.downcase!\n\
    \      else\n        value.upcase!\n      end\n    end\n    true\n  end\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a dscore=0 |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    next if value.nil?\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(Float)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(StringIO)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::File)\n    next if value.is_a?(IO::Stdout)\n    next\
    \ if value.is_a?(IO::Stderr)\n    next if value.is_a?(IO::NullIO)\n    next if\
    \ value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n\
    \    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n  \
    \  next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next\
    \ if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if\
    \ value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n\
    \    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n  \
    \  next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next\
    \ if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if\
    \ value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n\
    \    next if value.is_a?(IO::NullIO)\n    next ", "  dict.each do |key, value|\n\
    \    next if value.nil?\n    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n\
    \    next if value.is_a?(Fixnum)\n    next if value.is_a?(BigDecimal)\n    next\
    \ if value.is_a?(Float)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n    next if\
    \ value.is_a?(Date)\n    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n\
    \    next if value.is_a?(Struct)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n    next if value.is_a?(Struct)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Struct)\n    next if value.is_a?(IO)\n\
    \    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n    next if\
    \ value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Struct)\n    next if value.is_a?(IO)\n\
    \    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n    next if\
    \ value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Struct)\n    next if value.is_a?(IO)\n\
    \    next if value.", "  case dict.length\n  when 0\n    false\n  when 1\n   \
    \ true\n  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n\
    \        true\n      else\n        false\n      end\n    end\n  end\nend", " \
    \ dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c\
    \ |>\nI like this solution, but I believe it would be better to return false if\
    \ any keys are non-strings. Also, `value.downcase!` will mutate the string in-place,\
    \ so you don't need to return `true` at the end. `return false if !value.is_a?(String)`\
    \ would be better.\n<|/ c |>\n<| c |>\nThanks for the suggestions. I updated my\
    \ answer to include your suggestions.\n<|/ c |>\n<| a dscore=2 |>\n<code>", " \
    \ dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if you have a key that is a symbol. `check_dict_case({\"\
    a\" => \"apple\", \"a\" => \"banana\"})` returns true.\n<|/ c |>\n<| c |>\nI added\
    \ a version that handles symbols as well.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have a key that is a symbol. `check_dict_case({\"a\" => \"apple\", \"\
    a\" => \"banana\"})` returns true.\n<|/ c |>\n<| c |>\nI added a version that\
    \ handles symbols as well.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  dict.each do |k, v|\n    next if k.nil?\n    next if k.downcase == k\n    next\
    \ if k.upcase == k\n    false\n  end\n  true\nend", "  dict.each do |k, v|\n \
    \   next if k.nil? || k.empty?\n    next if k.downcase != k\n    next if k.upcase\
    \ != k\n    false\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    next if value.nil?\n    next if value.is_a?(Hash)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(Time)\n    next if value.is_a?(Date)\n    next if value.is_a?(TrueClass)\n\
    \    next if value.is_a?(FalseClass)\n    next if value.is_a?(Symbol)\n    next\
    \ if value.is_a?(BigDecimal)\n    next if value.is_a?(BigInteger)\n    next if\
    \ value.is_a?(Fixnum)\n    next if value.is_a?(Float)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(BigInteger)\n    next if value.is_a?(Fixnum)\n    next\
    \ if value.is_a?(Float)\n    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(Time)\n    next if value.is_a?(Date)\n    next if value.is_a?(TrueClass)\n\
    \    next if value.is_a?(FalseClass)\n    next if value.is_a?(Symbol)\n    next\
    \ if value.is_a?(BigDecimal)\n    next if value.is_a?(BigInteger)\n    next if\
    \ value.is_a?(Fixnum)\n    next if value.is_a?(Float)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Numeric)\n    next if value.is_a?(Time)\n    next if\
    \ value.is_a?(Date)\n    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n    next\
    \ if value.is_a?(BigInteger)\n    next if value.is_a?(Fixnum)\n    next if value.is_a?(Float)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(Time)\n    next if value.is_a?(Date)\n    next if value.is_a?(TrueClass)\n\
    \    next if value.is_a?", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  return true\nend", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a? String\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  if dict.empty?\n    false\n  else\n    dict.each\
    \ do |key, value|\n      if value.is_a?(String)\n        value.downcase!\n   \
    \   else\n        value.upcase!\n      end\n    end\n    true\n  end\nend", " \
    \ dict.each do |key, value|\n    if value.is_a? String\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  return true\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend", "  if dict.empty?\n    false\n  else\n \
    \   dict.each do |key, value|\n      if value.is_a?(String)\n        true\n  \
    \    else\n        false\n      end\n    end\n  end\nend", "  dict.each do |key,\
    \ value|\n    if value.is_a? String\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String) && key.is_a?(String)\n\
    \      key.downcase!\n      value.downcase!\n    elsif value.is_a?(String) &&\
    \ key.is_a?(Numeric)\n      key.to_s.downcase!\n      value.to_s.downcase!\n \
    \   end\n  end\n  true\nend", "  dict.each do |k, v|\n    if k.is_a?(String)\n\
    \      k.downcase!\n    end\n    if v.is_a?(String)\n      v.downcase!\n    end\n\
    \  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  if dict.nil?\n\
    \    false\n  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n\
    \        true\n      else\n        false\n      end\n    end\n  end\nend", " \
    \ dict.each do |key, value|\n    if value.is_a? String\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThis doesn't work for me in Rails 3.2.13. `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})` returns `false`, but `check_dict_case({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})` returns `true`.\n\
    <|/ c |>\n<| c |>\nI tested it on Rails 3.2.13 and it worked for me. Are you sure\
    \ you copied the code correctly? It should return `false` for `{\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}` because `\"B\" => \"banana\"` overwrites\
    \ `\"A\" => \"banana\"`.\n<|/ c |>\n<| c |>\nYes, I copied it exactly. I'm running\
    \ Rails 3.2.13. Maybe it's an issue with Rails 3.2.13?\n<|/ c |>\n<| c |>\nI tested\
    \ it on Rails 3.2.13 and it worked for me. Are you sure you copied the code correctly?\
    \ It should return `false` for `{\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\"}` because `\"B\" => \"banana\"` overwrites `\"A\" => \"banana\"\
    `.\n<|/ c |>\n<| c |>\nI tested it on Rails 3.2.13 and it worked for me. Are you\
    \ sure you copied the code correctly? It should return `false` for `{\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"}` because `\"B\" => \"banana\"\
    ` overwrites `\"A\" => \"banana\"`.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n    \
    \  value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  return false if dict.empty? or dict.keys.all? { |key| key.class != String }\n\
    \  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String) && key.is_a?(String)\n\
    \      value.downcase!\n      key.downcase!\n    elsif value.is_a?(String) &&\
    \ key.is_a?(Integer)\n      key.to_s.downcase!\n    elsif value.is_a?(Integer)\
    \ && key.is_a?(String)\n      key.to_s.downcase!\n    end\n  end\n  return true\n\
    end", "  return false if dict.empty? or dict.keys.all? {|key| key.class == String\
    \ }\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      key.downcase!\n      key.upcase!\n    elsif value.is_a?(Integer)\n    \
    \  key.to_s.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String) && key.is_a?(String)\n      true\n\
    \    elsif value.is_a?(String) && key.is_a?(Numeric)\n      true\n    elsif value.is_a?(Numeric)\
    \ && key.is_a?(String)\n      true\n    else\n      false\n    end\n  end\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a dscore=0 |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    next if value.is_a?(Hash)\n    next if\
    \ value.is_a?(Array)\n    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n   \
    \ next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n    next if\
    \ value.is_a?(BigInteger)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(Time)\n\
    \    next if value.is_a?(DateTime)\n    next if value.is_a?(IO)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(StringIO)",
  "  return false if dict.empty? or dict.keys.length != 2 \n  \n  case dict.values[0]\n\
    \  when String\n    true\n  when Integer\n    true\n  else\n    false\n  end\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  return true\nend", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  return false if dict.empty? || dict.keys.all?\
    \ { |k| k.is_a?(String) || k.is_a?(Symbol) }\n  true\nend", "  return false if\
    \ dict.empty?\n  dict.each do |key, value|\n    next if value.is_a?(String)\n\
    \    next if key.upcase == key\n    next if key.downcase == key\n    return false\n\
    \  end\n  return true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  return false if dict.empty? or dict.keys.all? { |key| key.kind_of?(String)\
    \ }\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |k, v|\n    if k.is_a? String\n      k.downcase!\n    else\n      k.upcase!\n\
    \    end\n  end\n  true\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n  \
    \    if value.is_a?(String)\n        value.downcase!\n      else\n        value.upcase!\n\
    \      end\n    end\n    true\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if you have symbols as keys. Try it with `{\"\
    a\" => \"apple\", \"b\" => \"banana\", \":c\" => \"carrot\"}`.\n<|/ c |>\n<| c\
    \ |>\nI added a version that works with symbols as keys. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have symbols as keys. Try it with\
    \ `{\"a\" => \"apple\", \"b\" => \"banana\", \":c\" => \"carrot\"}`.\n<|/ c |>\n\
    <| c |>\nI added a version that works with symbols as keys. I tested it and it\
    \ works.\n<|/ c |>\n<| c |>\nThis doesn't work if you have symbols as keys. Try\
    \ it with `{\"a\" => \"apple\", \"b\" => \"banana\", \":c\" => \"carrot\"}`.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  dict.each do |key, value|\n\
    \    if value.is_a? String\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThis doesn't work if the dictionary contains symbols.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. `Symbol#to_s` returns `:symbol`, not `\"symbol\"`.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with symbols.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that works with symbols.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that works with symbols.\n<|/ c |>\n<| a dscore=5 |>\n<code>", " \
    \ dict.each do |key, value|\n    if value.is_a? String\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  return true\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  case dict.length\n  when\
    \ 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |k| k.is_a?(String)\
    \ || k.is_a?(Symbol) }\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?\
    \ String\n      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n\
    \  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n    \
    \  value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return true\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? do |key|\n      key.downcase == key.upcase\n    end\n  end\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using an if statement?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use\
    \ an if statement\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  dict.each\
    \ do |key, value|\n    next if value.nil?\n    next if value.is_a?(String)\n \
    \   next if value.is_a?(Symbol)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Proc)\n    next if value.is_a?(IO)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::File)\n    next if value.is_a?(IO::NullStream)\n\
    \    next if value.is_a?(IO::Pipe)\n    next if value.is_a?(IO::WaitReadable)\n\
    \    next if value.is_a?(IO::WaitWritable)\n    next if value.is_a?(IO::WaitHandle)\n\
    \    next if value.is_a?(IO::WaitReadable)\n    next if value.is_a?(IO::WaitWritable)\n\
    \    next if value.is_a?(IO::WaitHandle)\n    next if value.is_a?(IO::WaitReadable)\n\
    \    next if value.is_a?(IO::WaitWritable)\n    next if value.is_a?(IO::WaitHandle)\n\
    \    next if value.is_a?(IO::WaitReadable)\n    next if value.is_a?(IO::WaitWritable)\n\
    \    next if value.is_a?(IO::WaitHandle)\n    next if value.is_a?(IO::WaitReadable)\n\
    \    next if value.is_a?(IO::WaitWritable)\n    next if value.is_a?(IO::WaitHandle)\n\
    \    next if value.is_a?(IO::WaitReadable)\n    next if value.is_a?(IO::WaitWritable)\n\
    \    next if value.is_a?(IO::WaitHandle)\n    next if value.is_a?(IO::WaitReadable)\n\
    \    next if value.is_a?(IO::WaitWritable)\n    next if value.is_a?(IO::WaitHandle)\n\
    \    next if value.is_a?(IO::WaitReadable)\n    next if value.is_a?(IO::WaitWritable)\n\
    \    next if value.is_a?(IO::WaitHandle", "  dict.each do |key, value|\n    if\
    \ value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?\
    \ String\n      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n\
    \  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a |>\n<code>", " \
    \ dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  case dict\n  when Hash\n    dict.all? { |key, value| key.is_a?(String)\
    \ && value.is_a?(String) }\n  when Array\n    dict.all? { |value| value.is_a?(String)\
    \ }\n  else\n    false\n  end\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like\
    \ this one the best. No need to reinvent the wheel and it also works with nested\
    \ hashes.\n<|/ c |>\n<| c |>\nI like this one the best. No need to reinvent the\
    \ wheel and it also works with nested hashes.\n<|/ c |>\n<| c |>\nI like this\
    \ one the best. No need to reinvent the wheel and it also works with nested hashes.\n\
    <|/ c |>\n<| c |>\nI like this one the best. No need to reinvent the wheel and\
    \ it also works with nested hashes.\n<|/ c |>\n<| c |>\nI like this one the best.\
    \ No need to reinvent the wheel and it also works with nested hashes.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |k, v|\n    if k.is_a?(String) && k.downcase == k\n    \
    \  return true\n    end\n  end\n  return false\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ dict.each do |k, v|\n    if k.is_a?(String)\n      k.downcase!\n    end\n  \
    \  if v.is_a?(String)\n      v.downcase!\n    end\n  end\n  return true\nend",
  "  dict.each do |key, value|\n    if value.is_a? String\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like your solution, but I believe that `check_dict_case` should\
    \ return `false` if the given dictionary is empty. `check_dict_case({})` should\
    \ return `false` but `check_dict_case({\"a\" => \"apple\"})` should return `true`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer to reflect\
    \ this.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  if dict.empty?\n    false\n \
    \ else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend\n\
    </code>\n<|/ a tags=ruby,hash |>\n<| c |>\nThis doesn't work for me. `check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})` returns `true` instead\
    \ of `false`\n<|/ c |>\n<| c |>\nI tested it on ruby 2.4.1 on Windows and it works\
    \ as expected. Maybe you have a typo or something else?\n<|/ c |>\n<| c |>\nI\
    \ tested it on ruby 2.4.1 on MacOS and it works as expected. Maybe you have a\
    \ typo or something else?\n<|/ c |>\n<| c |>\nI tested it on ruby 2.4.1 on Ubuntu\
    \ 16.04 and it works as expected. Maybe you have a typo or something else?\n<|/\
    \ c |>\n<| c |>\nI tested it on ruby 2.4.1 on CentOS 7.0 and it works as expected.\
    \ Maybe you have a typo or something else?\n<|/ c |>\n<| a |>\n<code>", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  if dict.empty?\n    false\n\
    \  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n       \
    \ value.downcase!\n      else\n        value.upcase!\n      end\n    end\n   \
    \ true\n  end\nend", "  if dict.empty?\n    false\n  else\n    dict.keys.all?\
    \ { |key| key.downcase == key.upcase }\n  end\nend", "  case dict\n  when Hash\n\
    \    dict.all? { |key, value| \n      key.downcase == value.downcase or \n   \
    \   key.upcase == value.upcase \n    }\n  else\n    false\n  end\nend", "  return\
    \ false if dict.nil? or dict.empty? or dict.size == 0\n  dict.each do |key, value|\n\
    \    return false if key.nil? or key.empty? or key.size == 0\n    return false\
    \ if key.downcase != key.upcase\n  end\n  return true\nend", "  return false if\
    \ dict.empty? or dict.keys.length != 2 \n  \n  case dict.values.first\n  when\
    \ String\n    true\n  when Integer\n    true\n  else\n    false\n  end\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |k, v|\n    if k.is_a? String\n      k.downcase!\n    else\n      k.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return\
    \ true\nend", "  dict.each do |key, value|\n    if value.is_a? String\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. I'm still a beginner at Ruby, so I appreciate\
    \ your help. I did try your solution and it didn't work. I also tried the other\
    \ solutions posted here, but they didn't work either. I'm wondering if there's\
    \ something wrong with my Ruby installation or something. I'm running Ruby 1.9.3\
    \ on Windows 7. Thanks again.\n<|/ c |>\n<| c |>\nI added a solution that should\
    \ work for you. Let me know if it works.\n<|/ c |>\n<| c |>\nThanks again. I tried\
    \ your solution and it didn't work. I also tried the other solutions posted here,\
    \ but they didn't work either. I'm wondering if there's something wrong with my\
    \ Ruby installation or something. I'm running Ruby 1.9.3 on Windows 7. Thanks\
    \ again.\n<|/ c |>\n<| c |>\nI added a solution that should work for you. Let\
    \ me know if it works.\n<|/ c |>\n<| c |>\nThanks again. I tried your solution\
    \ and it didn't work. I also tried the other solutions posted here, but they didn't\
    \ work either. I'm wondering if there's something wrong with my Ruby installation\
    \ or something. I'm running Ruby 1.9.3 on Windows 7. Thanks again.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  return false if dict.empty? or dict.keys.all?\
    \ { |key| key.class != String }\n  dict.keys.all? { |key| key.downcase == key.upcase\
    \ }\nend", "  case dict\n  when Hash\n    dict.all? { |k,v| k.is_a?(String) &&\
    \ v.is_a?(String) }\n  when Array\n    dict.all? { |v| v.is_a?(String) }\n  else\n\
    \    false\n  end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n    \
    \  value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  if dict.empty?\n    false\n  else\n    dict.each do |k, v|\n      if k.downcase\
    \ != k\n        false\n      else\n        if v.downcase != v\n          false\n\
    \        end\n      end\n    end\n  end\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      key.downcase!\n    else\n      key.upcase!\n    end\n  end\n  return true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  if dict.empty?\n\
    \    false\n  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n\
    \        value.downcase!\n      else\n        value.upcase!\n      end\n    end\n\
    \    true\n  end\nend", "  case dict\n  when Hash\n    dict.all? { |key, value|\
    \ key.downcase == value.downcase }\n  else\n    false\n  end\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a? String\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
