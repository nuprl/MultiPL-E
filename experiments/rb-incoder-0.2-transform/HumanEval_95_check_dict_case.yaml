name: HumanEval_95_check_dict_case
language: rb
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
  \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef\
  \ check_dict_case(dict)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
  \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
  p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
  \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
  }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\"\
  \ => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
  fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
  \  end\nend\n"
completions: ["  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  return true\nend", "  return\
    \ false if dict.empty? or dict.size == 0\n  \n  dict.each do |key, value|\n  \
    \  next if value.kind_of?(Hash)\n    next if value.kind_of?(Array)\n    next if\
    \ value.kind_of?(String)\n    next if value.downcase != value\n    next if value.upcase\
    \ != value\n    next if value.to_s.downcase != value.to_s\n    next if value.to_s.upcase\
    \ != value.to_s\n    next if value.to_s.downcase == value.to_s.upcase\n    next\
    \ if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase == value.to_s.downcase\n\
    \    next if value.to_s.downcase == value.to_s.upcase\n    next if value.to_s.upcase\
    \ == value.to_s.downcase\n    next if value.to_s.downcase == value.to_s.upcase\n\
    \    next if value.to_s.upcase == value.to_s.downcase\n    next if value.to_s.downcase\
    \ == value.to_s.upcase\n    next if value.to_s.upcase ", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n    \
    \  value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if you have an array with mixed case keys. `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})` returns `true` instead of `false`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have an array with mixed case keys.\
    \ `check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})` returns `true`\
    \ instead of `false`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have an array\
    \ with mixed case keys. `check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"\
    })` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have an array with mixed case keys. `check_dict_case({\"a\" => \"apple\"\
    , \"b\" => \"banana\"})` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have an array with mixed case keys. `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})` returns `true` instead of `false`.\n\
    <|/ c |>\n<| a dscore=5 |>\nI like to use this method:\n<code>", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String) && key.is_a?(String)\n      true\n\
    \    elsif value.is_a?(String) && key.is_a?(Numeric)\n      true\n    elsif value.is_a?(Numeric)\
    \ && key.is_a?(String)\n      true\n    else\n      false\n    end\n  end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for my examples. But I still have a problem with my real data. I will update\
    \ my question to show you my real data.\n<|/ c |>\n<| c |>\nI updated my question\
    \ to show you my real data. I hope you can help me to solve this problem.\n<|/\
    \ c |>\n<| c |>\nI updated my question to show you my real data. I hope you can\
    \ help me to solve this problem.\n<|/ c |>\n<| c |>\nI updated my question to\
    \ show you my real data. I hope you can help me to solve this problem.\n<|/ c\
    \ |>\n<| c |>\nI updated my question to show you my real data. I hope you can\
    \ help me to solve this problem.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ case dict\n  when Hash\n    dict.all? { |key, value| key.is_a?(String) && value.is_a?(String)\
    \ }\n  when Array\n    dict.all? { |value| value.is_a?(String) }\n  else\n   \
    \ false\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a? String\n      if key.downcase\
    \ == key.upcase\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return\
    \ true\nend", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n\
    \      if key.class == String\n        key.downcase == value.downcase\n      else\n\
    \        false\n      end\n    end\n  end\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  if dict.empty?\n    false\n  else\n    dict.keys.all?\
    \ { |key| key.kind_of?(String) }\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
