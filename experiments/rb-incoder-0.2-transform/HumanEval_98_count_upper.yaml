name: HumanEval_98_count_upper
language: rb
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper.call(\"aBCdEf\")\n# 1\n# >>> count_upper.call(\"\
  abcdefg\")\n# 0\n# >>> count_upper.call(\"dBBE\")\n# 0\ndef count_upper(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
  \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
  ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
  dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
  U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
  EEEE\"))\n  end\nend\n"
completions: ["  s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n    case[/[AEIOU]/].nil?\
    \ ? 0 : case == \"A\" ? 1 : case == \"E\" ? 2 : case == \"I\" ? 3 : case == \"\
    O\" ? 4 : case == \"U\" ? 5 : 6\n  end\nend", "  s.each_char.with_index do |c,\
    \ i|\n    if i % 2 == 0 && c.upcase == c\n      yield i\n    end\n  end\nend",
  "  s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if char.upcase\
    \ && i % 2 == 0\n  end\nend", "  s.chars.each_with_index.inject(0) { |sum, (ch,\
    \ i)| sum + 1 if i % 2 == 0 && ch.upcase == ch }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index % 2 == 0 && char.upcase == char\n\
    \  end\nend", "  s.gsub(/[aeiou]/) do |match|\n    match.size % 2 == 0 ? match.size\
    \ : match.size - 1\n  end\nend", "  s.gsub(/[AEIOU]/) { |c| c == 'A' ? 1 : 0 }\n\
    end", "  s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n    case[/[aeiou]/i].nil?\
    \ ? case : case.count(\"A\") + case.count(\"E\") + case.count(\"I\") + case.count(\"\
    O\") + case.count(\"U\")\n  end\nend", "  s.gsub(/[AEIOU]/) do |c|\n    case =\
    \ c.upcase\n    case[/[aeiou]/].to_i.even? ? case : 0\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  s.gsub(/[AEIOU]/) { |c| c == 'A' ? 1 : 0 }\nend", "  s.gsub!(/[AEIOU]/)\
    \ do |c|\n    case = c.upcase\n    case[/[aeiou]/i].nil? ? case : case.gsub(/[aeiou]/i,\
    \ '').length\n  end\n  s.count(\"A\"..\"Z\").to_i\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + (char.upcase && (index % 2 == 0))\n  end\n\
    end", "  s.each_char.with_index do |c,i|\n    if i % 2 == 0 && c.upcase == c\n\
    \      yield i\n    end\n  end\nend", "  s.gsub(/[aeiou]/) do |match|\n    match.length\
    \ % 2 == 0 ? match.length / 2 : 0\n  end\nend", "  s.gsub(/[AEIOU]/) {|c| c ==\
    \ 'A' ? 1 : c == 'E' ? 2 : c == 'I' ? 3 : c == 'O' ? 4 : c == 'U' ? 5 : 0}\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    A\"..\"Z\")\nend", "  s.gsub!(/[aeiou]/, '')\n  s.each_char.with_index { |c,i|\
    \ return 0 if i % 2 == 0 && c.upcase == c }\n  s.length\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if char.upcase && index%2 == 0\n  end\n\
    end", "  s.gsub(/[aeiou]/) do |match|\n    match.to_s.size % 2 == 0 ? match.size\
    \ : 0\n  end\nend", "  s.scan(/[aeiou]/)\n  s.count {|x| x.upcase }\nend", " \
    \ s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if char.upcase\
    \ && i % 2 == 0\n  end\nend", "  s.gsub(/[AEIOU]/) do |match|\n    match.to_s.count(\"\
    A\") + match.to_s.count(\"E\") + match.to_s.count(\"I\") + match.to_s.count(\"\
    O\") + match.to_s.count(\"U\")\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if index%2 == 0 && char.upcase == char\n\
    \  end\nend", "  s.gsub(/[aeiou]/) do |match|\n    match.to_i.even? ? 1 : 0\n\
    \  end\nend", "  s.gsub(/[AEIOU]/) do |match|\n    match.size % 2 == 0 ? match.size\
    \ : match.size - 1\n  end\nend", "  s.scan(/[AEIOU]/)\n  s.count(\"A\") + s.count(\"\
    E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"U\")\nend", "  s.gsub(/[AEIOU]/).with_index\
    \ { |s, i| i % 2 == 0 ? s.size : 0 }\nend", "  s.gsub(/[AEIOU]/) do |match|\n\
    \    match.length / 2\n  end\nend", "  s.scan(/[aeiou]/).inject(0) { |sum, char|\
    \ sum + 1 if char.upcase }\nend", "  s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n\
    \    case[/[AEIOU]/].nil? ? case : case.count(\"A\") + case.count(\"E\") + case.count(\"\
    I\") + case.count(\"O\") + case.count(\"U\")\n  end\nend", "  s.gsub(/[AEIOU]/)\
    \ { |c| c.upcase }.length\nend", "  s.gsub(/[aeiou]/i) { |m| m.upcase }.length\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum +\
    \ 1 if index&1 == 0 && char == char.upcase\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + (char.upcase && index % 2 == 0)\n  end\n\
    end", "  s.gsub(/[AEIOU]/) do |match|\n    match.size % 2 == 0 ? match.size :\
    \ match.size - 1\n  end\nend", "  s.scan(/[AEIOU]/)\n  s.count(\"A\") + s.count(\"\
    E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"U\")\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + (char.upcase ? 1 : 0)\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  s.scan(/[AEIOU]/).inject(0) { |sum, char| sum + 1 if char.upcase }\n\
    end", "  s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n    case[/[AEIOU]/].nil?\
    \ ? case : 0\n  end\nend", "  s.chars.each_with_index.inject(0) { |sum, (_, i)|\
    \ sum + i.upcase if i.odd? }\nend", "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"\
    Z\")\nend", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n   \
    \ sum + (index&1 == 0 && char.upcase == 'A')\n  end\nend", "  s.gsub(/[AEIOU]/,\
    \ '').length\nend", "  s.chars.each_with_index.inject(0) { |sum, (ch, i)| sum\
    \ + 1 if i % 2 == 0 && ch.upcase == ch }\nend", "  s.gsub(/[AEIOU]/) do |c|\n\
    \    case = c.upcase\n    case.eql?(\"A\") ? 0 :\n    case.eql?(\"E\") ? 1 :\n\
    \    case.eql?(\"I\") ? 2 :\n    case.eql?(\"O\") ? 3 :\n    case.eql?(\"U\")\
    \ ? 4 : 0\n  end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  s.gsub(/[AEIOU]/)\
    \ do |c|\n    case = c.upcase\n    case[/[aeiou]/i].nil? ? case : 0\n  end\nend",
  "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\")\nend", "  s.gsub(/[aeiou]/) { |c|\
    \ c.upcase }.size\nend", "  s.chars.each_with_index.inject(0) { |sum, (char, i)|\
    \ sum + 1 if i % 2 == 0 && char.upcase == char }\nend", "  s.gsub(/[AEIOU]/) {\
    \ |match| match.size % 2 == 0 ? match.size : match.size - 1 }\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.chars.each_with_index.inject(0)\
    \ {|sum, (_, i)| sum + i.odd? ? 1 : 0}\nend", "  s.each_char.with_index do |c,i|\n\
    \    if i % 2 == 0 && c.upcase == c\n      yield i\n    end\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + case char\n      when 'A'..'Z'\n        1\n \
    \     when 'a'..'z'\n        -1\n      else\n        0\n    end\n  end\nend",
  "  s.gsub(/[AEIOU]/) { |m| m.length % 2 == 0 ? m.upcase : 0 }\nend", "  s.chars.each_with_index.inject(0)\
    \ { |sum, (_, i)| sum + 1 if i.odd? && i.upcase }\nend", "  s.gsub(/[AEIOU]/,\
    \ '').length\nend", "  s.gsub(/[AEIOU]/).inject(0) { |count, c| count + (c ==\
    \ 'E' ? 1 : 0) }\nend", "  s.gsub(/[AEIOU]/) { |c| c.upcase }.length\nend", " \
    \ s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if char.upcase\
    \ && i % 2 == 0\n  end\nend", "  s.gsub(/[AEIOU]/) { |c| c.upcase }.length\nend",
  "  s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n    case[/[aeiou]/i].nil? ? case\
    \ : 0\n  end\nend", "  s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n    case[0,1].zero?\
    \ ? case : case - \"A\".ord\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  s.each_char.with_index do |c,i|\n    if i % 2 == 0 && c.upcase == c\n\
    \      yield i\n    end\n  end\nend", "  s.chars.each_with_index.inject(0) do\
    \ |sum, (char, index)|\n    sum + 1 if char == char.upcase\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + (char.upcase ? i : 0)\n  end\nend", "  s.gsub(/[AEIOU]/)\
    \ { |c| c == 'A' ? 1 : 0 }\nend", "  s.chars.each_with_index.inject(0) { |sum,\
    \ (char, index)| sum + 1 if index % 2 == 0 && char.upcase == char }\nend", " \
    \ s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum + 1 if index%2\
    \ == 0 && char.upcase == char\n  end\nend", "  s.gsub(/[AEIOU]/) do |m|\n    m.to_i.even?\
    \ ? 1 : 0\n  end\nend", "  s.gsub(/[AEIOU]/) {|c| c == 'A' ? 1 : c == 'E' ? 2\
    \ : c == 'I' ? 3 : c == 'O' ? 4 : c == 'U' ? 5 : 0}\nend", "  s.scan(/[AEIOU]/)\n\
    \  s.count(\"A\") + s.count(\"E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"\
    U\")\nend", "  s.chars.each_with_index.inject(0) { |sum, (_, i)| sum + i.odd?\
    \ ? 1 : 0 }\nend", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n\
    \    sum + (char.upcase ? 0 : 1)\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if char.upcase == char\n  end\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if char.upcase && i.even?\n  end\nend", " \
    \ s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if char.upcase\
    \ && i.even?\n  end\nend", "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\")\nend",
  "  s.scan(/[aeiou]/).inject(0) { |sum, char| sum + 1 if char.upcase }\nend", " \
    \ s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n    case.length % 2 == 0 ? case\
    \ : case.succ\n  end.length\nend", "  s.gsub!(/[^AEIOU]/, '')\n  s.scan(/[AEIOU]/).count\n\
    end", "  s.gsub(/[AEIOU]/, '').length\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + (char.upcase ? 1 : 0)\n  end\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count { |c| c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' }\n\
    end", "  s.chars.each_with_index.inject(0) { |sum, (ch, i)| sum + 1 if i % 2 ==\
    \ 0 && ch.upcase == ch }\nend", "  s.chars.each_with_index.inject(0) do |sum,\
    \ (char, i)|\n    sum + 1 if char.upcase && i % 2 == 0\n  end\nend", "  s.gsub(/[AEIOU]/)\
    \ { |c| return 0 if c =~ /[AEIOU]/; 1 }\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + (char.upcase ? i : 0)\n  end\nend", "  s.scan(/[AEIOU]/)\n\
    \  s.count(\"A\") + s.count(\"E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"\
    U\")\nend", "  s.gsub(/[AEIOU]/) { |m| m.size % 2 == 0 ? m.size : m.size % 2 ==\
    \ 1 ? m.size - 1 : 0 }\nend", "  s.gsub(/[AEIOU]/) do |c|\n    cased = c.upcase\n\
    \    cased.length if cased =~ /[AEIOU]/\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum + 1 if char.upcase && index%2 == 0\n  end\n\
    end", "  s.chars.each_with_index.inject(0) { |sum, (_, i)| sum + i.upcase if i.odd?\
    \ }\nend", "  s.scan(/[aeiou]/).inject(0) { |sum, char| sum + 1 if char.upcase\
    \ }\nend", "  s.gsub(/[AEIOU]/, '').length\nend", "  s.gsub(/[AEIOU]/) { |c| c\
    \ == 'A' ? 1 : 0 }\nend", "  s.gsub(/[AEIOU]/) {|c| c == 'A' ? 1 : c == 'E' ?\
    \ 2 : c == 'I' ? 3 : c == 'O' ? 4 : c == 'U' ? 5 : 0}\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum +\
    \ (char.upcase ? 1 : 0)\n  end\nend", "  s.chars.each_with_index.inject(0) do\
    \ |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  s.scan(/[AEIOU]/).inject(0) { |sum, char| sum + 1 if char.upcase }\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if\
    \ i % 2 == 0 && char.upcase == char\n  end\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if char.upcase && i.even?\n  end\nend", " \
    \ s.chars.each_with_index.inject(0) { |sum, (_, i)| sum + i.upcase if i.odd? }\n\
    end", "  s.gsub(/[AEIOU]/) { |c| c == 'A' ? 1 : 0 }\nend", "  s.scan(/[AEIOU]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.gsub(/[AEIOU]/) { |m| m.size\
    \ % 2 == 0 ? m.size : m.size + 1 }\nend", "  s.gsub(/[AEIOU]/) do |c|\n    case\
    \ = c.upcase\n    case[/[aeiou]/].nil? ? case : case.count('e')\n  end\nend",
  "  s.gsub(/[AEIOU]/) { |m| m.size % 2 == 0 ? m.size : m.size + 1 }\nend", "  s.each_char.with_index\
    \ do |c,i|\n    if i % 2 == 0 && c.upcase == c\n      yield i\n    end\n  end\n\
    end", "  s.gsub(/[AEIOU]/) do |m|\n    m.to_i.even? ? 1 : 0\n  end\nend", "  s.gsub(/[AEIOU]/)\
    \ do |match|\n    match.to_s.size % 2 == 0 ? match.to_s.size : 0\n  end\nend",
  "  s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + case char\n\
    \      when 'A'..'Z' then 1\n      when 'a'..'z' then -1\n      else 0\n    end\n\
    \  end\nend", "  s.gsub(/[aeiou]/) do |match|\n    match.to_i.even? ? 1 : 0\n\
    \  end\nend", "  s.gsub(/[AEIOU]/) { |c| c == 'A' ? 1 : 0 }\nend", "  s.gsub(/[AEIOU]/)\
    \ do |match|\n    match.to_s.size % 2 == 0 ? match.to_s.size : match.to_s.size/2\n\
    \  end\nend", "  s.scan(/[aeiou]/).inject(0) { |sum, char| sum + 1 if char.upcase\
    \ }\nend", "  s.scan(/[AEIOU]/)\n  s.count(\"A\") + s.count(\"E\") + s.count(\"\
    I\") + s.count(\"O\") + s.count(\"U\")\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\n\
    end", "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\")\nend", "  s.gsub(/[AEIOU]/)\
    \ do |match|\n    match.to_s.size % 2 == 0 ? match.to_s.size : 0\n  end\nend",
  "  s.gsub(/[AEIOU]/) do |match|\n    match.to_s.size % 2 == 0 ? match.to_s.size\
    \ : 0\n  end\nend", "  s.scan(/[AEIOU]/).inject(0) { |sum, char| sum + 1 if char.upcase\
    \ }\nend", "  s.gsub!(/[^aeiouAEIOU]/, '')\n  s.gsub!(/[aeiou]/, '')\n  s.gsub!(/[AEIOU]/,\
    \ '')\n  s.count(\"A\") + s.count(\"E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"\
    U\")\nend", "  s.gsub(/[aeiou]/) { |c| c == 'A' ? 1 : 0 }\nend", "  s.each_char.with_index.with_object(0)\
    \ do |c, i|\n    next if i.even?\n    next if c == 'A' || c == 'a'\n    next if\
    \ c == 'E' || c == 'e'\n    next if c == 'I' || c == 'i'\n    next if c == 'O'\
    \ || c == 'o'\n    next if c == 'U' || c == 'u'\n    next if c == 'Y' || c ==\
    \ 'y'\n    next if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y'\n    next if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ || c == 'Y'\n    next if c == 'B' || c == 'D' || c == 'F'\n    next if c ==\
    \ 'b' || c == 'd' || c == 'f'\n    next if c == 'B' || c == 'D' || c == 'F'\n\
    \    next if c == 'b' || c == 'd' || c == 'f'\n    next if c == 'B' || c == 'D'\
    \ || c == 'F'\n    next if c == 'b' || c == 'd' || c == 'f'\n    next if c ==\
    \ 'B' || c == 'D' || c == 'F'\n    next if c == 'b' || c == 'd' || c == 'f'\n\
    \    next if c == 'B' || c == 'D' || c == 'F'\n    next if c == 'b' || c == 'd'\
    \ || c == 'f'\n    next if c == 'B' || c == 'D' || c == 'F'\n    next if c ==\
    \ 'b' || c == 'd' || c == 'f'\n    next if c == 'B' || c == 'D' || c == 'F'\n\
    \    next if c == 'b' || c == 'd' || c == 'f'\n    next if c == 'B' || c == 'D'\
    \ || c == 'F'\n    next if c == 'b' || c == 'd' || c == 'f'\n    next if c ==\
    \ 'B' || c == 'D' || c == 'F'\n    next if c == 'b' || c == 'd' || c == 'f'\n\
    \    next if c == 'B' || c == 'D' || c == 'F'\n    next if c == 'b' || c == 'd'\
    \ || c == 'f'\n    next if c == 'B' || c == 'D' || c == 'F'\n    next if c ==\
    \ 'b' || c == 'd' || c == 'f'\n    next if c == 'B' || c == 'D' || c == 'F'\n\
    \    next if c == 'b' || c == '", "  s.gsub(/[AEIOU]/) { |c| return 0 if c =~\
    \ /[AEIOU]/; 1 else 1 }\nend", "  s.chars.each_with_index.inject(0) do |sum, (char,\
    \ i)|\n    sum + 1 if char.upcase && i % 2 == 0\n  end\nend", "  s.gsub(/[AEIOU]/)\
    \ do |match|\n    match.to_i.even? ? 1 : 0\n  end\nend", "  s.gsub(/[AEIOU]/)\
    \ {|c| c == 'A' ? 1 : c == 'E' ? 2 : c == 'I' ? 3 : c == 'O' ? 4 : c == 'U' ?\
    \ 5 : 0}\nend", "  s.gsub!(/[AEIOU]/, '')\n  s.each_char.with_index { |c, i| return\
    \ 0 if i % 2 == 0 && c.upcase == c }\n  s.size\nend", "  s.scan(/[AEIOU]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.scan(/[AEIOU]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.gsub(/[aeiou]/) do |match|\n\
    \    match.to_s.size % 2 == 0 ? match.size : 0\n  end\nend", "  s.gsub(/[AEIOU]/)\
    \ {|c| c == 'A' ? 1 : c == 'E' ? 2 : c == 'I' ? 3 : c == 'O' ? 4 : c == 'U' ?\
    \ 5 : 0}\nend", "  s.gsub(/[aeiou]/i) { |m| m.upcase }\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.gsub!(/[aeiou]/i) { |c| c.upcase\
    \ }\n  s.scan(/./).inject(0) { |s, i| i % 2 == 0 ? s + 1 : s }\nend", "  s.gsub(/[AEIOU]/)\
    \ { |c| return 0 if c.upcase == c }\n  s.count(\"A\") + s.count(\"E\") + s.count(\"\
    I\") + s.count(\"O\") + s.count(\"U\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"\
    A\"..\"Z\")\nend", "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\").even?\nend",
  "  s.gsub(/[AEIOU]/) do |c|\n    case = c.upcase\n    case.eql?(\"A\") ? 0 : (case.eql?(\"\
    E\") ? 1 : 2)\n  end\nend", "  s.scan(/[AEIOU]/)\n  s.count(\"A\") + s.count(\"\
    E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"U\")\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if char.upcase && i.even?\n  end\nend", " \
    \ s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + 1 if char.upcase\
    \ && i % 2 == 0\n  end\nend", "  s.scan(/[AEIOU]/)\n  s.count(\"A\") + s.count(\"\
    E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"U\")\nend", "  s.chars.each_with_index.inject(0)\
    \ {|sum, (c, i)| sum + if i % 2 == 0 then c >= 'A' && c <= 'Z' then 1 else 0 end}\n\
    end", "  s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + (char.upcase\
    \ ? i : 0)\n  end\nend", "  s.chars.each_with_index.inject(0) do |sum, (char,\
    \ i)|\n    sum + 1 if char.upcase && i.even?\n  end\nend", "  s.each_char.with_index.with_object(0)\
    \ do |c, i|\n    next if c.upcase != c\n    i += 1 if i % 2 == 0\n  end\nend",
  "  s.chars.each_with_index.inject(0) do |sum, (char, index)|\n    sum + 1 if index%2\
    \ == 0 && char.upcase == char\n  end\nend", "  s.gsub(/[AEIOU]/) { |c| c.upcase\
    \ }.length\nend", "  s.gsub(/[AEIOU]/) do |match|\n    match.to_s.size % 2 ==\
    \ 0 ? match.to_s.size : 0\n  end\nend", "  s.chars.each_with_index.inject(0) {\
    \ |sum, (ch,ix)| sum + 1 if ix % 2 == 0 and ch.upcase == ch }\nend", "  s.gsub(/[AEIOU]/)\
    \ do |c|\n    cased = c.upcase\n    cased.length if cased.length % 2 == 0\n  end\n\
    end", "  s.scan(/[AEIOU]/).inject(0) { |sum, char| sum + 1 if char.upcase }\n\
    end", "  s.gsub(/[AEIOU]/) do |c|\n    (c == 'A') ? 1 : 0\n  end\nend", "  s.gsub!(/[AEIOU]/)\
    \ { |c| c.upcase }\n  s.scan(/[AEIOU]/).size\nend", "  s.gsub(/[AEIOU]/) do |match|\n\
    \    match.size % 2 == 0 ? match.size : match.size - 1\n  end\nend", "  s.gsub(/[AEIOU]/,\
    \ '').length\nend", "  s.chars.each_with_index.inject(0) { |sum, (_, i)| sum +\
    \ 1 if i.odd? && i.upcase }\nend", "  s.gsub(/[AEIOU]/) {|c| c == 'A' ? 1 : c\
    \ == 'E' ? 2 : c == 'I' ? 3 : c == 'O' ? 4 : c == 'U' ? 5 : 0}\nend", "  s.gsub(/[AEIOU]/)\
    \ {|c| c == 'A' ? 1 : c == 'E' ? 2 : c == 'I' ? 3 : c == 'O' ? 4 : c == 'U' ?\
    \ 5 : 0}\nend", "  s.gsub(/[aeiou]/) do |match|\n    match.size % 2 == 0 ? match.size\
    \ : match.size - 1\n  end\nend", "  s.gsub(/[AEIOU]/) { |c| c == 'A' ? 1 : 0 }\n\
    end", "  s.gsub(/[AEIOU]/) do |match|\n    match.to_s.size % 2 == 0 ? match.to_s.size\
    \ : 0\n  end\nend", "  s.gsub(/[AEIOU]/, '').length\nend", "  s.gsub(/[AEIOU]/)\
    \ { |c| c == 'A' ? 1 : 0 }\nend", "  s.each_char.with_index do |c, i|\n    if\
    \ i % 2 == 0 && c.upcase == c\n      yield i\n    end\n  end\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, s| sum + s.upcase if s.odd? }\nend", "  s.each_char.with_index.inject(0)\
    \ do |sum, (c, i)|\n    sum + 1 if i % 2 == 0 && c.upcase == c\n  end\nend", " \
    \ s.scan(/[aeiou]/).inject(0) { |sum, element| sum + element == \"A\" ? 1 : 0\
    \ }\nend", "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\")\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if char == char.upcase && i % 2 == 0\n  end\n\
    end", "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\")\nend", "  s.gsub(/[AEIOU]/,\
    \ '').length\nend", "  s.chars.each_with_index.inject(0) { |sum, (_, i)| sum +\
    \ i.upcase if i.odd? }\nend", "  s.each_char.with_index do |c,i|\n    if i % 2\
    \ == 0 && c.upcase == c\n      yield i\n    end\n  end\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + (char.upcase ? i : 0)\n  end\nend", "  s.scan(/[AEIOU]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.scan(/[AEIOU]/)\n  s.count(\"\
    A\") + s.count(\"E\") + s.count(\"I\") + s.count(\"O\") + s.count(\"U\")\nend",
  "  s.gsub(/[AEIOU]/, '').length\nend", "  s.gsub!(/[aeiou]/) { |c| c.upcase }\n\
    \  s.scan(/./).inject(0) { |sum, e| sum + e.length if e.upcase }\nend", "  s.scan(/[aeiou]/)\n\
    \  s.count(\"A\"..\"Z\")\nend", "  s.scan(/[aeiou]/).inject(0) { |sum, char| sum\
    \ + 1 if char.upcase }\nend", "  s.gsub(/[AEIOU]/) { |match| match.size % 2 ==\
    \ 0 ? match.size : match.size - 1 }\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if char.upcase && i.even?\n  end\nend", " \
    \ s.gsub(/[AEIOU]/) {|c| c == 'A' ? 1 : c == 'E' ? 2 : c == 'I' ? 3 : c == 'O'\
    \ ? 4 : c == 'U' ? 5 : 0}\nend", "  s.scan(/[AEIOU]/).inject(0) { |sum, char|\
    \ sum + 1 if char.upcase }\nend", "  s.scan(/[aeiou]/)\n  s.count(\"A\"..\"Z\"\
    ) + s.count(\"a\"..\"z\")\nend", "  s.chars.each_with_index.inject(0) do |sum,\
    \ (char, index)|\n    sum + 1 if char.upcase && index % 2 == 0\n  end\nend", " \
    \ s.gsub(/[AEIOU]/) { |m| m.size % 2 == 0 ? m.size : m.size + 1 }\nend", "  s.gsub(/[AEIOU]/)\
    \ do |match|\n    match.length % 2 == 0 ? match.length : match.length / 2\n  end\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
