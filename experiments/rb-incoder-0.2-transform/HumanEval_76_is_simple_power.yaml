name: HumanEval_76_is_simple_power
language: rb
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power.call(1, 4)\n# true\n# >>> is_simple_power.call(2,\
  \ 2)\n# true\n# >>> is_simple_power.call(8, 2)\n# true\n# >>> is_simple_power.call(3,\
  \ 2)\n# false\n# >>> is_simple_power.call(3, 1)\n# false\n# >>> is_simple_power.call(5,\
  \ 3)\n# false\ndef is_simple_power(x, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n\
  \    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16,\
  \ 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true,\
  \ candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true,\
  \ candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false,\
  \ candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true,\
  \ candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\n\
  end\n"
completions: ["  if n**int(x)==x\n    return true\n  else\n    return false\n  end\n\
    end", "  x == n**int(x)\nend", "  x = x.to_i\n  n = n.to_i\n  return x == n**x\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if n**int(x) = x\n\
    \  else\n    return false\n  end\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  return false if n == 0\n  x = x.to_i\n  n = n.to_i\n  return true if\
    \ n == 1\n  return true if n == x\n  return true if n % x == 0\n  return false\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if\
    \ n**int(x) = x\n  else\n    return false\n  end\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if n==0\n    return true\n\
    \  else\n    return false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
