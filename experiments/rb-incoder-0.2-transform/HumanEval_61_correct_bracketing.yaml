name: HumanEval_61_correct_bracketing
language: rb
prompt: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
  (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
  (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
  \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"\
  ))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false,\
  \ candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n  \
  \  assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\"\
  )\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false,\
  \ candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"\
  ()()(()())()))()\"))\n  end\nend\n"
completions: ["  brackets.scan(/[()]/) do |char|\n    next if char == \")\"\n    next\
    \ if char == \"(\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  brackets == \"\
    \"\nend", "  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n \
    \ brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\\
    )/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\\
    (/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n \
    \ brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\\
    }/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n \
    \ brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\\
    {/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n \
    \ brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\\
    ]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n \
    \ brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n \
    \ brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\\
    )/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub", "  brackets.chars.each_with_index\
    \ do |char, index|\n    if char == \"(\" && brackets.chars[index + 1] == \"(\"\
    \n      brackets.chars[index + 1] = \")\"\n    elsif char == \")\" && brackets.chars[index\
    \ + 1] == \")\"\n      brackets.chars[index + 1] = \"(\"\n    end\n  end\n  brackets\
    \ == brackets.chars.join\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for\
    \ `correct_bracketing(\"()\")` which should return `true`.\n<|/ c |>\n<| c |>\n\
    : It does. I tested it before posting it.\n<|/ c |>\n<| c |>\n: It does. I tested\
    \ it before posting it.\n<|/ c |>\n<| c |>\n: It does. I tested it before posting\
    \ it.\n<|/ c |>\n<| c |>\n: It does. I tested it before posting it.\n<|/ c |>\n\
    <| a tags=ruby |>\n<code>", "  brackets.scan(/[()]/) do |char|\n    next if char\
    \ == \"(\" || char == \")\"\n    char == \"(\" ? \"(\" : \")\"\n  end\nend", " \
    \ brackets.scan(/[()]+/).all? { |x| brackets.scan(/[)]+/).all? { |y| x == y }\
    \ }\nend", "  brackets.scan(/[()]/) do |char|\n    next if char == \")\"\n   \
    \ next if char == \"(\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  brackets\
    \ == \")((\"\nend", "  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \"\
    )\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\\
    {/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n \
    \ brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\\
    ]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n \
    \ brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n \
    \ brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\\
    )/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\\
    (/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n \
    \ brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\\
    }/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n \
    \ brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\\
    {/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n \
    \ brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\\
    ]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub", "  brackets.chars.each\
    \ do |char|\n    if char == \"(\"\n      brackets.gsub!(char, \"(\")\n    elsif\
    \ char == \")\"\n      brackets.gsub!(char, \")\")\n    end\n  end\n  brackets.chars.empty?\n\
    end", "  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n \
    \ brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\\
    }/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n \
    \ brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\\
    {/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n \
    \ brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\\
    ]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n \
    \ brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n \
    \ brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\\
    )/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\\
    (/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n \
    \ brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\\
    }/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n \
    \ brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(", "  brackets.chars.each_with_index\
    \ do |char, i|\n    if char == \"(\"\n      brackets.chars.each { |j| return false\
    \ if j == \"(\" } \n      return true\n    elsif char == \")\"\n      brackets.chars.each\
    \ { |j| return false if j == \")\" } \n      return true\n    end\n  end\n  return\
    \ false\nend", "  brackets.scan(/\\(|\\)|\\[|\\]|\\{|\\}/ do |char|\n    next\
    \ if char == \")\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\"\
    \ || char == \"}\" || char == \"}\" || char == \"}\" || char == \"}\" || char\
    \ == \"}\" ", "  brackets.gsub!(/\\(/, '')\n  brackets.gsub!(/\\)/, '')\n  brackets.gsub!(/\\\
    [/, '')\n  brackets.gsub!(/\\]/, '')\n  brackets.gsub!(/\\{/, '')\n  brackets.gsub!(/\\\
    }/, '')\n  brackets.gsub!(/\\(/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\\
    [/, '[')\n  brackets.gsub!(/\\]/, ']')\n  brackets.gsub!(/\\{/, '{')\n  brackets.gsub!(/\\\
    }/, '}')\n  brackets.gsub!(/\\(/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\\
    [/, '[')\n  brackets.gsub!(/\\]/, ']')\n  brackets.gsub!(/\\{/, '{')\n  brackets.gsub!(/\\\
    }/, '}')\n  brackets.gsub!(/\\{/, '{')\n  brackets.gsub!(/\\}/, '}')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\[/, '[')\n  brackets.gsub!(/\\\
    ]/, ']')\n  brackets.gsub!(/\\{/, '{')\n  brackets.gsub!(/\\}/, '}')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\[/, '[')\n  brackets.gsub!(/\\\
    ]/, ']')\n  brackets.gsub!(/\\{/, '{')\n  brackets.gsub!(/\\}/, '}')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\[/, '[')\n  brackets.gsub!(/\\\
    ]/, ']')\n  brackets.gsub!(/\\{/, '{')\n  brackets.gsub!(/\\}/, '}')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\[/, '[')\n  brackets.gsub!(/\\\
    ]/, ']')\n  brackets.gsub", "  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\\
    )/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\\
    (/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n \
    \ brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\\
    }/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n \
    \ brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\\
    {/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n \
    \ brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\\
    ]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n \
    \ brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n \
    \ brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\\
    )/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\\
    (/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n \
    \ brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub",
  "  brackets.scan(/[()]/) do |char|\n    next if char == \")\"\n    next if char\
    \ == \"(\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  true\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nI like your solution, but I believe it would be more efficient\
    \ to just scan the string once, instead of scanning the string twice for each\
    \ character.\n<|/ c |>\n<| c |>\n: I believe that would be more efficient in terms\
    \ of memory usage, but I doubt that would make any noticeable difference in performance.\n\
    <|/ c |>\n<| c |>\n: I believe that would be more efficient in terms of memory\
    \ usage, but I doubt that would make any noticeable difference in performance.\n\
    <|/ c |>\n<| c |>\n: I believe that would be more efficient in terms of memory\
    \ usage, but I doubt that would make any noticeable difference in performance.\n\
    <|/ c |>\n<| c |>\n: I believe that would be more efficient in terms of memory\
    \ usage, but I doubt that would make any noticeable difference in performance.\n\
    <|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\", "  brackets.scan(/[()]/) do |char|\n    next if char\
    \ == \"(\" || char == \")\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  true\n\
    end", "  brackets.scan(/[()]/) do |char|\n    next if char == \")\"\n    next\
    \ if char == \"(\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  true\nend", " \
    \ brackets.chars.each_with_index do |char, index|\n    if char == '('\n      brackets.chars[index\
    \ + 1] == '('\n    elsif char == ')'\n      brackets.chars[index + 1] == ')'\n\
    \    end\n  end\nend", "  brackets.scan(/\\(|\\)|\\[|\\]|\\{|\\}/ do |char|\n\
    \    next if char == \")\" || char == \"}\" || char == \"}\" || char == \"(\"\
    \ || char == \"[\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"[\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"[\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"{\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"[\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"{\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"[\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"{\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"{\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"{\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"{\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"(\" || char == \"[\" || char == \"{\"\
    \ || char == \"{\"\n    next if char == \"{\" || char == \"[\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"[\" || char == \"{\" || char == \"(\"\
    \ || char == \"{\"\n    next if char == \"(\" || char == \"[\" || ", "  brackets.scan(/[()]/).all?\
    \ { |x| brackets.scan(/[)]/).all? { |y| x == y } }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
