name: HumanEval_88_sort_array
language: rb
prompt: "# Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# >>> sort_array.call([])\n# []\n# >>> sort_array.call([5])\n\
  # [5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array.call([2,\
  \ 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5],\
  \ candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2,\
  \ 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0,\
  \ 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23,\
  \ 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n"
completions: ["  array.sort\nend", "  array.sort!\n  array\nend", "  array.sort!\n\
    \  array\nend", "  array.sort!\n  array\nend", "  array.sort!\n  array\nend",
  "  array.sort!\nend", "  array.sort!\nend", "  array.sort!\n  array\nend", "  array.sort!\n\
    \  array\nend", "  array.sort!\n  array\nend", "  array.sort!\n  array\nend",
  "  array.sort\n  array.inject([]) do |sum, el|\n    sum << el\n    sum\n  end\n\
    end", "  array.sort!\n  array\nend", "  array.sort!\n  array\nend", "  array.sort\n\
    \  array.sort!\nend", "  array.sort!\n  array\nend", "  array.sort!\n  array\n\
    end", "  array.sort!\n  array\nend", "  array.sort\nend", "  array.sort!\n  array\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
