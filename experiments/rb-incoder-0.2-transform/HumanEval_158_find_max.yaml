name: HumanEval_158_find_max
language: rb
prompt: "# Write a function that accepts a list of strings.\n# The list contains different\
  \ words. Return the word with maximum number\n# of unique characters. If multiple\
  \ strings have maximum number of unique\n# characters, return the one which comes\
  \ first in lexicographical order.\n# >>> find_max.call([\"name\", \"of\", \"string\"\
  ])\n# \"string\"\n# >>> find_max.call([\"name\", \"enam\", \"game\"])\n# \"enam\"\
  \n# >>> find_max.call([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\ndef find_max(words)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_max\n\
  \    candidate = method(:find_max)\n    assert_equal(\"string\", candidate.call([\"\
  name\", \"of\", \"string\"]))\n    assert_equal(\"enam\", candidate.call([\"name\"\
  , \"enam\", \"game\"]))\n    assert_equal(\"aaaaaaa\", candidate.call([\"aaaaaaa\"\
  , \"bb\", \"cc\"]))\n    assert_equal(\"abc\", candidate.call([\"abc\", \"cba\"\
  ]))\n    assert_equal(\"footbott\", candidate.call([\"play\", \"this\", \"game\"\
  , \"of\", \"footbott\"]))\n    assert_equal(\"gonna\", candidate.call([\"we\", \"\
  are\", \"gonna\", \"rock\"]))\n    assert_equal(\"nation\", candidate.call([\"we\"\
  , \"are\", \"a\", \"mad\", \"nation\"]))\n    assert_equal(\"this\", candidate.call([\"\
  this\", \"is\", \"a\", \"prrk\"]))\n    assert_equal(\"b\", candidate.call([\"b\"\
  ]))\n    assert_equal(\"play\", candidate.call([\"play\", \"play\", \"play\"]))\n\
  \  end\nend\n"
completions: ["  words.sort.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n\
    \  words.reverse!\n  words.uniq!\n  words.reverse!\n  words.uniq!\n  words.reverse!\n\
    \  words.uniq!\n  words.reverse!\n  words.uniq!\n", "  words.sort.reverse.uniq.first\n\
    end", "  words.each_with_object(Hash.new(0)) { |word, counts| counts[word] +=\
    \ 1 }.max_by { |word, counts| counts[word] }[1]\nend", "  words.inject(Hash.new(0))\
    \ { |h, word| h[word] += 1; h }.max_by { |k, v| v }[0]\nend", "  words.sort_by\
    \ { |word| word.chars.uniq.size }\n  words.max_by { |word| word.chars.uniq.size\
    \ }\nend", "  words.sort.reverse.uniq.length.first\nend", "  words.sort.reverse!\n\
    \  words.uniq!\n  words.first\nend", "  words.uniq.sort.first\nend", "  words.sort.reverse.map\
    \ { |word| word.chars.uniq.size }.max\nend", "  words.each_with_object(Hash.new(0))\
    \ { |w, h| h[w] += 1 }.max_by { |w, v| v }[0]\nend\n</cell>\n<cell>", "  words.sort.reverse.uniq.first\n\
    end", "  words.each_with_object(Hash.new(0)) { |word, counts| counts[word] +=\
    \ 1 }.max_by { |word, counts| counts[word] }[1]\nend", "  words.sort.reverse.uniq.first\n\
    end", "  words.sort.reverse.uniq.first\nend", "  words.inject(Hash.new(0)) { |memo,\
    \ word| memo[word] += 1; memo }.values.max\nend", "  words.inject(Hash.new(0))\
    \ { |memo, word| memo[word] += 1; memo }.values.max_by { |word| word.size }\n\
    end", "  words.sort.reverse.uniq.first\nend", "  words.sort.reverse.find { |word|\
    \ word.chars.uniq.size == words.uniq.size }\nend", "  words.inject([]) do |uniques,\
    \ word|\n    uniques << word if uniques.count(word) < uniques.count(word).max\n\
    \    uniques\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays |>\n\
    <code>", "  words.sort.reverse.first\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
