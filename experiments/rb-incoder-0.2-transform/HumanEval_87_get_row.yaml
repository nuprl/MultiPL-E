name: HumanEval_87_get_row
language: rb
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\n# >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
  \ 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row.call([],\
  \ 1)\n# []\n# >>> get_row.call([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\ndef get_row(lst,\
  \ x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  lst = lst.sort\n  x = x.to_i\n  result = []\n  for i in 0...lst.size\n\
    \    row = lst[i]\n    row.sort!\n    row.sort!.reverse!\n    result.push([i,\
    \ row])\n  end\n  result.sort!\n  result.sort!.reverse!\n  result\nend", "  rows\
    \ = []\n  row = []\n  for i in lst\n    row.push(i)\n    if row.size == x\n  \
    \    rows.push(row)\n      row = []\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each\
    \ do |row|\n    row.sort!\n  end\n  return rows\nend", "  row = []\n  for i in\
    \ lst\n    row.push([i, i.index(x)])\n  row.sort!\n  row.sort!.reverse!\n  return\
    \ row\nend", "  rows = []\n  for i in 0...(lst.size - 1)\n    row = lst[i]\n \
    \   if row.include?(x)\n      rows.push([i, row.index(x)])\n    end\n  end\n \
    \ rows.sort!\n  rows.reverse!\n  rows.map {|row| [row, row.last] }\nend", "  row\
    \ = []\n  for i in lst\n    if i.include? x\n      row << i\n    end\n  end\n\
    \  row.sort!\n  row.sort!.reverse!\n  row\nend", "  rows = []\n  for i in lst\n\
    \    row = i[x]\n    rows.push(row)\n  end\n  rows.sort!\n  rows.reverse!\n  rows.map!\
    \ {|row| row.to_a}\n  rows.each {|row| row.sort!}\n  rows.each {|row| row.each_index\
    \ {|i| row[i] = row[i].to_i}}\n  return rows\nend", "  row = []\n  row.push(x)\n\
    \  row.push(lst.length)\n  lst.each do |row|\n    row.each do |col|\n      if\
    \ col == x\n        row.push(row)\n      end\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  row\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0\n        row.push(j)\n\
    \      else\n        row.push(j - row.length)\n      end\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  lst = lst.sort\n  lst = lst.map { |e| e.sort\
    \ }\n  lst = lst.map { |e| e.map { |e| e == x ? [e, 0] : [e, -1] } }\n  lst =\
    \ lst.map { |e| e.sort_by { |e| -e[1] } }\n  lst = lst.map { |e| e.map { |e| e[0]\
    \ } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].size\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0].size, -e[1]] } }\n  lst = lst.map\
    \ { |e| e.sort_by { |e| -e[0].last } }\n  lst = lst.map { |e| e.map { |e| [e[0].last,\
    \ -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].first } }\n  lst = lst.map\
    \ { |e| e.map { |e| [e[0].first, -e[1]] } }\n  lst = lst.map { |e| e.sort_by {\
    \ |e| -e[0].last } }\n  lst = lst.map { |e| e.map { |e| [e[0].last, -e[1]] } }\n\
    \  lst = lst.map { |e| e.sort_by { |e| -e[0].first } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0].first, -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].last\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0].last, -e[1]] } }\n  lst = lst.map\
    \ { |e| e.sort_by { |e| -e[0].first } }\n  lst = lst.map { |e| e.map { |e| [e[0].first,\
    \ -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].last } }\n  lst = lst.map\
    \ { |e| e.map { |e| [e[0].last, -e[1]] } }\n  ", "  row = []\n  row.push(x)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)",
  "  rows = []\n  for i in 0..(lst.size - 1)\n    if lst[i] <= x\n      rows.push([i,\
    \ lst[i]])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  for i in 0..(rows.length\
    \ - 1)\n    rows[i].sort!\n  end\n  rows\nend", "  rows = []\n  for i in 0...(lst.size\
    \ - 1)\n    row = lst[i]\n    if row.include?(x)\n      rows.push([i, row.index(x)])\n\
    \    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n\
    \    row.last.reverse!\n  end\n  rows\nend", "  rows = []\n  row = []\n  for i\
    \ in lst\n    row.push(i)\n    if row.size == x\n      rows.push(row)\n      row\
    \ = []\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n\
    \    row.each do |i|\n      yield [i, row.size]\n    end\n  end\nend", "  lst.each\
    \ do |row|\n    row.each do |item|\n      if item == x\n        puts \"#{row[0]},\
    \ #{row[-1]}\"\n      end\n    end\n  end\nend", "  result = []\n  rows = lst.map(&:size).max\n\
    \  cols = lst[0].size\n  for i in 0...rows\n    row = lst[i].map { |e| e.to_i\
    \ }\n    row.sort!\n    row.sort!.reverse!\n    row.each { |e| result.push([i,\
    \ e]) }\n  end\n  result.select { |e| e[0] == x }.sort!.reverse!\n  result\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n   \
    \     row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_",
  "  lst = lst.sort\n  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e| e.map {\
    \ |e| e == x ? [e.size, 0] : [e, 0] } }\n  lst = lst.map { |e| e.sort_by { |e|\
    \ -e[0] } }\n  lst = lst.map { |e| e.map { |e| e[1] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[1] }\
    \ }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.sort_by { |e| -e[0] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] }\
    \ }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e",
  "  lst.each do |row|\n    row.each do |elem|\n      if elem == x\n        coord\
    \ = [row.index(elem), row.size - 1]\n        coord.reverse!\n        coord.each\
    \ { |i| coord[i] = coord[i].to_i }\n        return coord\n      end\n    end\n\
    \  end\n  return []\nend", "  lst.each do |row|\n    row.each do |item|\n    \
    \  if item == x\n        return [[row.index, row.index + 1]]\n      end\n    end\n\
    \  end\n  return []\nend", "  lst.each do |row|\n    row.each do |col|\n     \
    \ return [col, row] if col == x\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_", "  lst.each do |row|\n   \
    \ row.each do |col|\n      return [col, row] if col == x\n    end\n  end\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == j\n        next if i == 0\n        coord = [i, j]\n      end\n    end\n\
    \  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        coords = [[i, j]]\n      elsif i == 0\
    \ && j != 0\n        coords = [[i, j]]\n      elsif i != 0 && j == 0\n       \
    \ coords = [[i, j]]\n      elsif i != 0 && j != 0\n        coords << [i, j]\n\
    \      end\n    end\n  end\n  coords.sort_by! { |x, y| y }\n  coords.reverse!\n\
    \  coords.each do |coord|\n    coord.sort_by! { |x, y| x }\n  end\n  coords.reverse!\n\
    \  coords.map do |coord|\n    coord.map { |i| i + x }\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\
    \ || i == row.length || j == row[0].length\n        next if i == 0 || j == 0\n\
    \        next if i == row.length || j == row[0].length\n      end\n      if row[j]\
    \ == x\n        return [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j] if row[j] == x\n \
    \     end\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j !=\
    \ 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n      if i != 0 && j != 0\n        row.unshift(j)\n      end\n   \
    \ end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i\
    \ == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n\
    \        row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  l", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  l", "  row = []\n  for i in\
    \ lst\n    row.push(i[x])\n  end\n  row.sort!\n  row.sort!.reverse\n  return row\n\
    end", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0\
    \ && j != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n  \
    \      row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ l", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)", "  row = []\n  row.push(x)\n\
    \  row.push(lst.length)\n  lst.each do |row|\n    row.each do |col|\n      if\
    \ col == x\n        row.push(row)\n      end\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  lst.each do |row|\n    row.each do |elem|\n      return\
    \ [elem.to_i, row.to_i] if elem == x\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [i, j]\n      elsif i == 0 && j != 0\n        coords = [i, j-1]\n\
    \      elsif i != 0 && j == 0\n        coords = [i-1, j]\n      elsif i != 0 &&\
    \ j != 0\n        coords = [i-1, j-1]\n      end\n    end\n  end\n  coords.sort!\n\
    \  coords.reverse!\n  coords.map { |coord| [coord.first, coord.last] }\nend",
  "  rows = []\n  i = 0\n  while i < lst.size\n    row = lst[i]\n    i += 1\n    if\
    \ row.size == x\n      rows.push([i, row.size])\n    end\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  rows.each do |row|\n    row.sort!\n    row.each do |column|\n\
    \      column.reverse!\n    end\n  end\n  rows\nend", "  result = []\n  row =\
    \ 0\n  while row < lst.size\n    row = row + 1\n    column = 0\n    while column\
    \ < lst[row].size\n      column = column + 1\n      if x == lst[row][column]\n\
    \        result.push([row, column])\n      end\n    end\n  end\n  result.sort!\n\
    \  result.sort!.reverse\n  return result\nend", "  row = []\n  for i in 0..(lst.size\
    \ - 1)\n    if lst[i] < x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n\
    \  row.sort! { |a, b| b[1] <=> a[1] }\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i] >= x\n      row.push(i)\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  row = []\n  for i in 0...(lst.size - 1)\n    row = row + [(i\
    \ + 1, lst[i]) if lst[i] >= x else (i, lst[i])]\n  row.sort!\n  row.sort!\n  return\
    \ row\nend", "  row = []\n  for i in lst\n    row.push([i, i.index(x)])\n  row.sort!\n\
    \  row.sort!.reverse!\n  return row\nend", "  lst.sort!\n  result = []\n  i =\
    \ 0\n  while i < lst.size\n    if lst[i][0] == x\n      result << [[i, 0]]\n \
    \     i += 1\n      while i < lst.size && lst[i][0] == x\n        result << [[i,\
    \ 0]]\n        i += 1\n      i += 1\n      while i < lst.size && lst[i][0] !=\
    \ x\n        result << [[i, 0]]\n        i += 1\n    end\n  end\n  result.sort!\n\
    \  result.reverse!\n  result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|", "  lst.each do |row|\n    row.each\
    \ do |item|\n      if item == x\n        return [(rows.index(row), cols.index(item))]\
    \ if rows.index(row) < cols.index(item)\n      end\n    end\n  end\nend", "  lst.each\
    \ do |row|\n    row.each do |elem|\n      return elem if elem == x\n    end\n\
    \  end\n  return []\nend", "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push",
  "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [[i, j]]\n      elsif i == 0 && j != 0\n        coords = coords.unshift([i,\
    \ j])\n      elsif i != 0 && j == 0\n        coords = coords.unshift([i, j])\n\
    \      elsif i == 0 && j == 0\n        coords = coords.unshift([i, j])\n     \
    \ else\n        coords = coords.unshift([i, j])\n      end\n    end\n  end\n \
    \ coords.sort_by! { |x, y| y }.reverse!\n  coords.map { |x, y| [x, y] }\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n   \
    \     row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n \
    \     elsif i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j\
    \ != 0\n        row.unshift(j)\n      elsif i != 0 && j != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i == 0 && j == 0\n        row.unshift(0)\n \
    \     elsif i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i == 0 && j\
    \ == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      elsif i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j\
    \ != 0\n        row.unshift(j)\n      elsif i != 0 && j != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
