name: HumanEval_87_get_row
language: rb
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\n# >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
  \ 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row.call([],\
  \ 1)\n# []\n# >>> get_row.call([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\ndef get_row(lst,\
  \ x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  lst = lst.sort\n  x = x.to_i\n  result = []\n  for i in 0...lst.size\n\
    \    row = lst[i]\n    row.sort!\n    row.sort!.reverse!\n    result.push([i,\
    \ row])\n  end\n  result.sort!\n  result.sort!.reverse!\n  result\nend", "  rows\
    \ = []\n  row = []\n  for i in lst\n    row.push(i)\n    if row.size == x\n  \
    \    rows.push(row)\n      row = []\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each\
    \ do |row|\n    row.sort!\n  end\n  return rows\nend", "  row = []\n  for i in\
    \ lst\n    row.push([i, i.index(x)])\n  row.sort!\n  row.sort!.reverse!\n  return\
    \ row\nend", "  rows = []\n  for i in 0...(lst.size - 1)\n    row = lst[i]\n \
    \   if row.include?(x)\n      rows.push([i, row.index(x)])\n    end\n  end\n \
    \ rows.sort!\n  rows.reverse!\n  rows.map {|row| [row, row.last] }\nend", "  row\
    \ = []\n  for i in lst\n    if i.include? x\n      row << i\n    end\n  end\n\
    \  row.sort!\n  row.sort!.reverse!\n  row\nend", "  rows = []\n  for i in lst\n\
    \    row = i[x]\n    rows.push(row)\n  end\n  rows.sort!\n  rows.reverse!\n  rows.map!\
    \ {|row| row.to_a}\n  rows.each {|row| row.sort!}\n  rows.each {|row| row.each_index\
    \ {|i| row[i] = row[i].to_i}}\n  return rows\nend", "  row = []\n  row.push(x)\n\
    \  row.push(lst.length)\n  lst.each do |row|\n    row.each do |col|\n      if\
    \ col == x\n        row.push(row)\n      end\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  row\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0\n        row.push(j)\n\
    \      else\n        row.push(j - row.length)\n      end\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  lst = lst.sort\n  lst = lst.map { |e| e.sort\
    \ }\n  lst = lst.map { |e| e.map { |e| e == x ? [e, 0] : [e, -1] } }\n  lst =\
    \ lst.map { |e| e.sort_by { |e| -e[1] } }\n  lst = lst.map { |e| e.map { |e| e[0]\
    \ } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].size\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0].size, -e[1]] } }\n  lst = lst.map\
    \ { |e| e.sort_by { |e| -e[0].last } }\n  lst = lst.map { |e| e.map { |e| [e[0].last,\
    \ -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].first } }\n  lst = lst.map\
    \ { |e| e.map { |e| [e[0].first, -e[1]] } }\n  lst = lst.map { |e| e.sort_by {\
    \ |e| -e[0].last } }\n  lst = lst.map { |e| e.map { |e| [e[0].last, -e[1]] } }\n\
    \  lst = lst.map { |e| e.sort_by { |e| -e[0].first } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0].first, -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].last\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0].last, -e[1]] } }\n  lst = lst.map\
    \ { |e| e.sort_by { |e| -e[0].first } }\n  lst = lst.map { |e| e.map { |e| [e[0].first,\
    \ -e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0].last } }\n  lst = lst.map\
    \ { |e| e.map { |e| [e[0].last, -e[1]] } }\n  ", "  row = []\n  row.push(x)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)",
  "  rows = []\n  for i in 0..(lst.size - 1)\n    if lst[i] <= x\n      rows.push([i,\
    \ lst[i]])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  for i in 0..(rows.length\
    \ - 1)\n    rows[i].sort!\n  end\n  rows\nend", "  rows = []\n  for i in 0...(lst.size\
    \ - 1)\n    row = lst[i]\n    if row.include?(x)\n      rows.push([i, row.index(x)])\n\
    \    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n\
    \    row.last.reverse!\n  end\n  rows\nend", "  rows = []\n  row = []\n  for i\
    \ in lst\n    row.push(i)\n    if row.size == x\n      rows.push(row)\n      row\
    \ = []\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n\
    \    row.each do |i|\n      yield [i, row.size]\n    end\n  end\nend", "  lst.each\
    \ do |row|\n    row.each do |item|\n      if item == x\n        puts \"#{row[0]},\
    \ #{row[-1]}\"\n      end\n    end\n  end\nend", "  result = []\n  rows = lst.map(&:size).max\n\
    \  cols = lst[0].size\n  for i in 0...rows\n    row = lst[i].map { |e| e.to_i\
    \ }\n    row.sort!\n    row.sort!.reverse!\n    row.each { |e| result.push([i,\
    \ e]) }\n  end\n  result.select { |e| e[0] == x }.sort!.reverse!\n  result\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n   \
    \     row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_",
  "  lst = lst.sort\n  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e| e.map {\
    \ |e| e == x ? [e.size, 0] : [e, 0] } }\n  lst = lst.map { |e| e.sort_by { |e|\
    \ -e[0] } }\n  lst = lst.map { |e| e.map { |e| e[1] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[1] }\
    \ }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.sort_by { |e| -e[0] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] }\
    \ }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e",
  "  lst.each do |row|\n    row.each do |elem|\n      if elem == x\n        coord\
    \ = [row.index(elem), row.size - 1]\n        coord.reverse!\n        coord.each\
    \ { |i| coord[i] = coord[i].to_i }\n        return coord\n      end\n    end\n\
    \  end\n  return []\nend", "  lst.each do |row|\n    row.each do |item|\n    \
    \  if item == x\n        return [[row.index, row.index + 1]]\n      end\n    end\n\
    \  end\n  return []\nend", "  lst.each do |row|\n    row.each do |col|\n     \
    \ return [col, row] if col == x\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_", "  lst.each do |row|\n   \
    \ row.each do |col|\n      return [col, row] if col == x\n    end\n  end\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == j\n        next if i == 0\n        coord = [i, j]\n      end\n    end\n\
    \  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        coords = [[i, j]]\n      elsif i == 0\
    \ && j != 0\n        coords = [[i, j]]\n      elsif i != 0 && j == 0\n       \
    \ coords = [[i, j]]\n      elsif i != 0 && j != 0\n        coords << [i, j]\n\
    \      end\n    end\n  end\n  coords.sort_by! { |x, y| y }\n  coords.reverse!\n\
    \  coords.each do |coord|\n    coord.sort_by! { |x, y| x }\n  end\n  coords.reverse!\n\
    \  coords.map do |coord|\n    coord.map { |i| i + x }\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\
    \ || i == row.length || j == row[0].length\n        next if i == 0 || j == 0\n\
    \        next if i == row.length || j == row[0].length\n      end\n      if row[j]\
    \ == x\n        return [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j] if row[j] == x\n \
    \     end\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j !=\
    \ 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n      if i != 0 && j != 0\n        row.unshift(j)\n      end\n   \
    \ end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i\
    \ == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n\
    \        row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  l", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  l", "  row = []\n  for i in\
    \ lst\n    row.push(i[x])\n  end\n  row.sort!\n  row.sort!.reverse\n  return row\n\
    end", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0\
    \ && j != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n  \
    \      row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ l", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)", "  row = []\n  row.push(x)\n\
    \  row.push(lst.length)\n  lst.each do |row|\n    row.each do |col|\n      if\
    \ col == x\n        row.push(row)\n      end\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  lst.each do |row|\n    row.each do |elem|\n      return\
    \ [elem.to_i, row.to_i] if elem == x\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [i, j]\n      elsif i == 0 && j != 0\n        coords = [i, j-1]\n\
    \      elsif i != 0 && j == 0\n        coords = [i-1, j]\n      elsif i != 0 &&\
    \ j != 0\n        coords = [i-1, j-1]\n      end\n    end\n  end\n  coords.sort!\n\
    \  coords.reverse!\n  coords.map { |coord| [coord.first, coord.last] }\nend",
  "  rows = []\n  i = 0\n  while i < lst.size\n    row = lst[i]\n    i += 1\n    if\
    \ row.size == x\n      rows.push([i, row.size])\n    end\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  rows.each do |row|\n    row.sort!\n    row.each do |column|\n\
    \      column.reverse!\n    end\n  end\n  rows\nend", "  result = []\n  row =\
    \ 0\n  while row < lst.size\n    row = row + 1\n    column = 0\n    while column\
    \ < lst[row].size\n      column = column + 1\n      if x == lst[row][column]\n\
    \        result.push([row, column])\n      end\n    end\n  end\n  result.sort!\n\
    \  result.sort!.reverse\n  return result\nend", "  row = []\n  for i in 0..(lst.size\
    \ - 1)\n    if lst[i] < x\n      row << [lst[i], i]\n    end\n  end\n  row.sort!\n\
    \  row.sort! { |a, b| b[1] <=> a[1] }\n  row\nend", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i] >= x\n      row.push(i)\n    end\n  end\n  row.sort!\n  row.sort!.reverse\n\
    \  row\nend", "  row = []\n  for i in 0...(lst.size - 1)\n    row = row + [(i\
    \ + 1, lst[i]) if lst[i] >= x else (i, lst[i])]\n  row.sort!\n  row.sort!\n  return\
    \ row\nend", "  row = []\n  for i in lst\n    row.push([i, i.index(x)])\n  row.sort!\n\
    \  row.sort!.reverse!\n  return row\nend", "  lst.sort!\n  result = []\n  i =\
    \ 0\n  while i < lst.size\n    if lst[i][0] == x\n      result << [[i, 0]]\n \
    \     i += 1\n      while i < lst.size && lst[i][0] == x\n        result << [[i,\
    \ 0]]\n        i += 1\n      i += 1\n      while i < lst.size && lst[i][0] !=\
    \ x\n        result << [[i, 0]]\n        i += 1\n    end\n  end\n  result.sort!\n\
    \  result.reverse!\n  result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|", "  lst.each do |row|\n    row.each\
    \ do |item|\n      if item == x\n        return [(rows.index(row), cols.index(item))]\
    \ if rows.index(row) < cols.index(item)\n      end\n    end\n  end\nend", "  lst.each\
    \ do |row|\n    row.each do |elem|\n      return elem if elem == x\n    end\n\
    \  end\n  return []\nend", "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push",
  "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [[i, j]]\n      elsif i == 0 && j != 0\n        coords = coords.unshift([i,\
    \ j])\n      elsif i != 0 && j == 0\n        coords = coords.unshift([i, j])\n\
    \      elsif i == 0 && j == 0\n        coords = coords.unshift([i, j])\n     \
    \ else\n        coords = coords.unshift([i, j])\n      end\n    end\n  end\n \
    \ coords.sort_by! { |x, y| y }.reverse!\n  coords.map { |x, y| [x, y] }\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n   \
    \     row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n \
    \     elsif i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j\
    \ != 0\n        row.unshift(j)\n      elsif i != 0 && j != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i == 0 && j == 0\n        row.unshift(0)\n \
    \     elsif i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i == 0 && j\
    \ == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      elsif i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j\
    \ != 0\n        row.unshift(j)\n      elsif i != 0 && j != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j", "  lst.sort!\n\
    \  result = []\n  i = 0\n  while i < lst.size\n    if lst[i] != x\n      result\
    \ << [lst[i], i]\n      i += 1\n    else\n      break\n  end\n  result.sort!\n\
    \  result.reverse!\n  result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \     end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \     end\n    end\n  end\n  l", "  row = []\n  for i in 0..(lst.size-1)\n   \
    \ if lst[i] < x\n      row.push([i, lst[i]])\n    else\n      break\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  row = []\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push", "  lst.each do |row|\n    row.each do |item|\n      if item == x\n\
    \        return [[row, 0]]\n      end\n    end\n  end\nend", "  lst.each do |row|\n\
    \    row.each do |elem|\n      if elem == x\n        return [[row.index, row.index\
    \ + 1]]\n      end\n    end\n  end\n  return []\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n    end\n  end\n  l", "  rows = []\n\
    \  for i in lst\n    row = i[x..-1]\n    row.each_index do |j|\n      rows.push([i,\
    \ j])\n    end\n  end\n  rows.sort!.sort!.reverse\n  rows\nend", "  result = []\n\
    \  for i in lst\n    result.push([i, i.index(x)])\n  result.sort!\n  result.reverse!\n\
    \  result\nend", "  lst.each do |row|\n    row.each do |col|\n      return [col,\
    \ row] if col == x\n    end\n  end\nend", "  lst.each do |row|\n    row.each do\
    \ |elem|\n      if elem == x\n        return [[row.index, row.index + 1]]\n  \
    \    end\n    end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(lst[0])\n\
    \  row.push(lst[1])\n  row.push(lst[2])\n  row.push(lst[3])\n  row.push(lst[4])\n\
    \  row.push(lst[5])\n  row.push(lst[6])\n  row.push(lst[7])\n  row.push(lst[8])\n\
    \  row.push(lst[9])\n  row.push(lst[10])\n  row.push(lst[11])\n  row.push(lst[12])\n\
    \  row.push(lst[13])\n  row.push(lst[14])\n  row.push(lst[15])\n  row.push(lst[16])\n\
    \  row.push(lst[17])\n  row.push(lst[18])\n  row.push(lst[19])\n  row.push(lst[20])\n\
    \  row.push(lst[21])\n  row.push(lst[22])\n  row.push(lst[23])\n  row.push(lst[24])\n\
    \  row.push(lst[25])\n  row.push(lst[26])\n  row.push(lst[27])\n  row.push(lst[28])\n\
    \  row.push(lst[29])\n  row.push(lst[30])\n  row.push(lst[31])\n  row.push(lst[32])\n\
    \  row.push(lst[33])\n  row.push(lst[34])\n  row.push(lst[35])\n  row.push(lst[36])\n\
    \  row.push(lst[37])\n  row.push(lst[38])\n  row.push(lst[39])\n  row.push(lst[40])\n\
    \  row.push(lst[41])\n  row.push(lst[42])\n  row.push(lst[43])\n  row.push(lst[44])\n\
    \  row.push(lst[45])\n  row.push(lst[46])\n  row.push(lst[47])\n  row.push(lst[48])\n\
    \  row.push(lst[49])\n  row.push(lst[50])\n  row.push(lst[51])\n  row.push(lst[52])\n\
    \  row.push(lst[53])\n  row.push(lst[54])\n  row.push(lst[55])\n  row.push(lst[56])\n\
    \  row.push(lst[57])\n  row.push(lst[58])\n  row.push(lst[59])\n  row.push(lst[60])\n\
    \  row.push(lst[61])\n  row.push(lst[62])\n  row.push(lst[63])\n  row.push(lst[64])\n\
    \  row.push(lst[65])\n  ", "  row = []\n  row.push(x)\n  row.push(lst.length)\n\
    \  lst.each do |row|\n    row.each do |column|\n      if column == x\n       \
    \ row.push(0)\n      end\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  row = []\n  row.push(x)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n\
    \  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n \
    \ row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push(0)\n  row.push",
  "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i] >= x\n      row << [i,\
    \ lst[i]]\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend", " \
    \ lst.sort!\n  row = []\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, ", "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n\
    \    if lst[i][0] == x\n      result << [[i, 0]]\n      i += 1\n      while i\
    \ < lst.size && lst[i][0] == x\n        result << [[i, 0]]\n        i += 1\n \
    \     i += 1\n    end\n  end\n  result.sort!\n  result.reverse!\n  result\nend",
  "  result = []\n  row = 0\n  while row < lst.size\n    row = row + 1\n    column\
    \ = 0\n    while column < lst[row].size\n      column = column + 1\n      if x\
    \ == lst[row][column]\n        result.push([row, column])\n      end\n    end\n\
    \  end\n  result.sort!\n  result.sort!.reverse\n  return result\nend", "  rows\
    \ = []\n  row = []\n  for i in lst\n    row.push(i)\n    if row.size == x\n  \
    \    rows.push(row)\n      row = []\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each\
    \ do |row|\n    row.sort!\n    row.each do |i|\n      yield [i, row.size]\n  \
    \  end\n  end\nend", "  rows = []\n  for i in lst\n    row = i[x]\n    rows.push(row)\n\
    \  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n \
    \   row.reverse!\n  end\n  return rows\nend", "  result = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i] >= x\n      break\n    result.push([i, lst[i]])\n  end\n  result.sort!\n\
    \  result.sort!{|a, b| b[1] <=> a[1]}\n  result.reverse!\n  return result\nend",
  "  result = []\n  for i in lst\n    result.push([i, i.index(x)])\n  result.sort!\n\
    \  result.sort!{|a, b| b[1] <=> a[1]}\n  result.reverse!\n  result\nend", "  rows\
    \ = []\n  for i in lst\n    row = i[x]\n    row.each_with_index do |y, j|\n  \
    \    rows << [i, j]\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows.map\
    \ { |r| [r[0], r[1].to_i] }\nend", "  lst.sort!\n  result = []\n  row = 0\n  while\
    \ row < lst.size\n    row = row + 1\n    column = 0\n    while column < lst.first.size\n\
    \      column = column + 1\n      if lst.first[column] == x\n        result.push([row,\
    \ column])\n      end\n    end\n  end\n  result.sort!\n  result.reverse!\n  return\
    \ result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if i == 0 && j != 0\n        row.unshift(0)\n      end\n   \
    \   if i != 0 && j == 0\n        col.unshift(0)\n      end\n      if i != 0 &&\
    \ j != 0\n        row.unshift(0)\n        col.unshift(0)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n \
    \     end\n      if i == 0 && j != 0\n        row.unshift(0)\n      end\n    \
    \  if i != 0 && j == 0\n        col.unshift(0)\n      end\n      if i != 0 &&\
    \ j != 0\n        row.unshift(0)\n        col.unshift(0)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n \
    \     end\n      if i == 0 && j != 0\n        row.unshift(0)\n      end\n    \
    \  if i != 0 && j == 0\n        col.unshift(0)\n      end\n      if i != 0 &&\
    \ j != 0\n        row.unshift(0)\n        col.unshift(0)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n \
    \     end\n      if i == 0 && j != 0\n        row.unshift(0)\n      end\n    \
    \  if i != 0 && j == 0\n        col.unshift(0)\n      end\n      if i != 0 &&\
    \ j != 0\n        row.unshift(0)\n        col.unshift(0)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n \
    \     end\n      if i == 0 && j != 0\n        row.unshift(0)\n      end\n    \
    \  if i != 0 && j == 0\n        col.unshift(0)\n      end\n      if i != 0 &&\
    \ j != 0\n        row.unshift(0)\n        col.unshift(0)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(", " \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == j\n        next if i == 0\n        next if i == row.length - 1\n   \
    \     next if j == row.length - 1\n        next if j == 0\n        next if j ==\
    \ col.length - 1\n        next if col[j] == x\n        next if col[j] == row[j\
    \ + 1]\n        next if col[j] == row[j - 1]\n        next if col[j] == row[j\
    \ - 2]\n        next if col[j] == row[j + 2]\n        next if col[j] == row[j\
    \ + 3]\n        next if col[j] == row[j - 4]\n        next if col[j] == row[j\
    \ - 5]\n        next if col[j] == row[j + 5]\n        next if col[j] == row[j\
    \ - 6]\n        next if col[j] == row[j + 6]\n        next if col[j] == row[j\
    \ - 7]\n        next if col[j] == row[j + 7]\n        next if col[j] == row[j\
    \ - 8]\n        next if col[j] == row[j + 8]\n        next if col[j] == row[j\
    \ - 9]\n        next if col[j] == row[j + 9]\n        next if col[j] == row[j\
    \ - 10]\n        next if col[j] == row[j + 10]\n        next if col[j] == row[j\
    \ - 11]\n        next if col[j] == row[j + 11]\n        next if col[j] == row[j\
    \ - 12]\n        next if col[j] == row[j + 12]\n        next if col[j] == row[j\
    \ - 13]\n        next if col[j] == row[j + 13]\n        next if col[j] == row[j\
    \ - 14]\n        next if col[j] == row[j + 14]\n        next if col[j] == row[j\
    \ - 15]\n        next if col[j] == row[j + 15]\n        next if col[j] == row[j\
    \ - 16]\n        next if col[j] == row[j + 16]\n        next if col[j] == row[j\
    \ - 17]\n        next if col[j] == row[j + 17]\n        next if col[j] == row[j\
    \ - 18]\n        next if col[j] == row[j + 18]\n        next if col[j] == row[j\
    \ - 19]\n        next if col[j] == row[j + 19]\n        next if col[j] == row[j\
    \ - 20]\n        next if col[j] == row[j + 20]\n        next if ", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j]\n      end\n     \
    \ if coord == x\n        coord\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\
    \ || i == row.length || j == row[0].length\n        next if i == 0 || j == 0\n\
    \        next if i == row.length || j == row[0].length\n        next if i == row.length\
    \ - 1\n        next if j == row[0].length - 1\n        next if i == row.length\
    \ - 1\n        next if j == row[0].length\n        next if i == 0 && j == 0\n\
    \        next if i == 0 && j == row[0].length\n        next if i == 0 && j ==\
    \ row[0].length - 1\n        next if i == row.length - 1 && j == row[0].length\
    \ - 1\n        next if i == row.length - 1 && j == 0\n        next if i == row.length\
    \ - 1 && j == row[0].length\n        next if i == row.length - 1 && j == row[0].length\
    \ - 1\n        next if i == row.length - 2 && j == row[0].length - 1\n       \
    \ next if i == row.length - 2 && j == 0\n        next if i == row.length - 2 &&\
    \ j == row[0].length - 1\n        next if i == row.length - 2 && j == row[0].length\n\
    \        next if i == row.length - 1 && j == row[0].length\n        next if i\
    \ == row.length - 1 && j == 0\n        next if i == row.length - 1 && j == row[0].length\
    \ - 1\n        next if i == row.length - 2 && j == row[0].length - 1\n       \
    \ next if i == row.length - 2 && j == 0\n        next if i == row.length - 2 &&\
    \ j == row[0].length - 1\n        next if i == row.length - 2 && j == row[0].length\n\
    \        next if i == row.length - 1 && j == row[0].length\n        next if i\
    \ == row.length - 1 && j == 0\n        next if i == row.length - 1 && j == row[0].length\
    \ - 1\n        next if i == row.length - 2 && j == row[0].length - 1\n       \
    \ next if i == row.length - 2 && j == 0\n        next if i == row.length - 2 &&\
    \ j == row[0].length - 1\n        next if i == row.length - 2 && j == row[0].length\n\
    \        next if i == row.length - 1 && j == row[0].length\n        next if i\
    \ == row.length - 1 && j == 0\n        next if i == row.length - 1 && j == row[0].length\
    \ - 1\n        next if i == row.length - 2 && j == row[0].length - 1\n       \
    \ next if i == row.length - 2 && j == 0\n        next if i == row.length - 2 &&\
    \ j == row[0].length - 1\n        next if i == row.length - 2 && j == row[0].length\n\
    \      end\n      if row[i] == x\n        [[i, j], [i, j + 1]]\n      end\n  \
    \  end", "  lst.each do |row|\n    row.each do |column|\n      if column == x\n\
    \        return [[row, column]]\n      end\n    end\n  end\n  return []\nend",
  "  lst.each do |row|\n    row.each do |item|\n      if item == x\n        return\
    \ [[row.size - 1, row.size - 1]]\n      end\n    end\n  end\nend", "  row = []\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push", "  row = []\n  for i in 0..(lst.size\
    \ - 1)\n    if lst[i] >= x\n      row.push([i, lst[i]])\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  return row\nend", "  rows = []\n  for i in 0..(lst.size-1)\n\
    \    row = lst[i]\n    if row.size == x\n      rows.push([i, row.size])\n    end\n\
    \  end\n  rows.sort!\n  rows.reverse!\n  rows.map do |row|\n    row.map do |i|\n\
    \      [i, row.size]\n    end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.push(j)\n      else\n        row.push(j -\
    \ j)\n      end\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend",
  "  row = []\n  for i in 0..(lst.size - 1)\n    if lst[i] <= x\n      row.push(i)\n\
    \    end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\nend", "  result = []\n\
    \  row = 0\n  while row < lst.size\n    row = row + 1\n    column = 0\n    while\
    \ column < lst[row].size\n      column = column + 1\n      if x == lst[row][column]\n\
    \        result.push([row, column])\n      end\n    end\n  end\n  result.sort!\n\
    \  result.sort!.reverse\n  return result\nend", "  lst.each do |row|\n    row.each\
    \ do |column|\n      if column == x\n        return [[row, column]].flatten\n\
    \      end\n    end\n  end\nend", "  result = []\n  for i in 0..(lst.size-1)\n\
    \    if lst[i] <= x\n      result.push([i, lst[i]])\n    end\n  end\n  result.sort!\n\
    \  result.reverse!\n  result\nend", "  row = []\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\
    \ || i == row.length || j == row[0].length\n        puts \"#{i}, #{j}\"\n    \
    \  end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  l", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == j\n        next if i == 0\n        next if j == row.length\
    \ - 1\n        next if j == row.length\n        next if col < x\n        next\
    \ if col > x\n      end\n    end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(lst[0])\n\
    \  row.push(lst[1])\n  row.push(lst[2])\n  row.push(lst[3])\n  row.push(lst[4])\n\
    \  row.push(lst[5])\n  row.push(lst[6])\n  row.push(lst[7])\n  row.push(lst[8])\n\
    \  row.push(lst[9])\n  row.push(lst[10])\n  row.push(lst[11])\n  row.push(lst[12])\n\
    \  row.push(lst[13])\n  row.push(lst[14])\n  row.push(lst[15])\n  row.push(lst[16])\n\
    \  row.push(lst[17])\n  row.push(lst[18])\n  row.push(lst[19])\n  row.push(lst[20])\n\
    \  row.push(lst[21])\n  row.push(lst[22])\n  row.push(lst[23])\n  row.push(lst[24])\n\
    \  row.push(lst[25])\n  row.push(lst[26])\n  row.push(lst[27])\n  row.push(lst[28])\n\
    \  row.push(lst[29])\n  row.push(lst[30])\n  row.push(lst[31])\n  row.push(lst[32])\n\
    \  row.push(lst[33])\n  row.push(lst[34])\n  row.push(lst[35])\n  row.push(lst[36])\n\
    \  row.push(lst[37])\n  row.push(lst[38])\n  row.push(lst[39])\n  row.push(lst[40])\n\
    \  row.push(lst[41])\n  row.push(lst[42])\n  row.push(lst[43])\n  row.push(lst[44])\n\
    \  row.push(lst[45])\n  row.push(lst[46])\n  row.push(lst[47])\n  row.push(lst[48])\n\
    \  row.push(lst[49])\n  row.push(lst[50])\n  row.push(lst[51])\n  row.push(lst[52])\n\
    \  row.push(lst[53])\n  row.push(lst[54])\n  row.push(lst[55])\n  row.push(lst[56])\n\
    \  row.push(lst[57])\n  row.push(lst[58])\n  row.push(lst[59])\n  row.push(lst[60])\n\
    \  row.push(lst[61])\n  row.push(lst[62])\n  row.push(lst[63])\n  row.push(lst[64])\n\
    \  row.push(lst[65])\n  ", "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n\
    \    if lst[i] != x\n      break\n    i += 1\n  end\n  while i < lst.size\n  \
    \  result << [lst[i], i]\n    i += 1\n  end\n  result.sort!\n  result.reverse!\n\
    \  result\nend", "  rows = []\n  for i in 0..(lst.size-1)\n    row = lst[i]\n\
    \    if row.include?(x)\n      rows.push([i, row.index(x)])\n    end\n  end\n\
    \  rows.sort!\n  rows.reverse!\n  rows.map { |row| [row, row.index(x)] }\nend",
  "  result = []\n  for i in 0..(lst.size - 1)\n    if lst[i] >= x\n      break\n\
    \    result.push([i, lst[i]])\n  end\n  result.sort!\n  result.sort! { |a, b|\
    \ b[1] <=> a[1] }\n  result.reverse!\n  result\nend", "  result = []\n  for i\
    \ in lst\n    if i.include?(x)\n      result << [i - (i.index(x) + 1)]\n    end\n\
    \  end\n  result.sort!\n  result.sort! {|a, b| b[1] <=> a[1]}\n  result\nend",
  "  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  ", " \
    \ rows = []\n  for i in lst\n    row = i.dup\n    row.each_index do |i|\n    \
    \  row.delete_at(i)\n      row.insert(i, x)\n      row.each_index do |j|\n   \
    \     row.insert(j, 0)\n      end\n      rows << row\n    end\n  end\n  rows.sort_by!\
    \ { |row| row.first }\n  rows.sort_by! { |row| -row.last }\n  rows.map { |row|\
    \ [row.first, row.last] }\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coord = [0, i]\n      elsif\
    \ i == 0 && j != 0\n        coord = [0, j]\n      elsif i != 0 && j == 0\n   \
    \     coord = [i, 0]\n      elsif i != 0 && j != 0\n        coord = [i, j]\n \
    \     end\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord.sort!\n\
    \      coord.sort!\n      coord.sort!\n      coord.sort!\n      coord", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [[i, j]]\n      elsif i == 0 && j != 0\n        coords = [[i,\
    \ j]]\n      elsif j == 0 && i != 0\n        coords = [[i, j]]\n      elsif i\
    \ == 0 && j == 0\n        coords = [[i, j]]\n      elsif i == 0 && j == 0\n  \
    \      coords = [[i, j]]\n      elsif i == 0 && j != 0\n        coords = [[i,\
    \ j]]\n      elsif j == 0 && i != 0\n        coords = [[i, j]]\n      elsif j\
    \ != 0 && i != 0\n        coords = [[i, j]]\n      elsif j != 0 && i == 0\n  \
    \      coords = [[i, j]]\n      elsif j != 0 && i == 1\n        coords = [[i,\
    \ j]]\n      elsif j != 0 && i == 2\n        coords = [[i, j]]\n      elsif j\
    \ != 0 && i == 3\n        coords = [[i, j]]\n      elsif j != 0 && i == 4\n  \
    \      coords = [[i, j]]\n      elsif j != 0 && i == 5\n        coords = [[i,\
    \ j]]\n      elsif j != 0 && i == 6\n        coords = [[i, j]]\n      elsif j\
    \ != 0 && i == 7\n        coords = [[i, j]]\n      elsif j != 0 && i == 8\n  \
    \      coords = [[i, j]]\n      elsif j != 0 && i == 9\n        coords = [[i,\
    \ j]]\n      elsif j != 0 && i == 10\n        coords = [[i, j]]\n      elsif j\
    \ != 0 && i == 11\n        coords = [[i, j]]\n      elsif j != 0 && i == 12\n\
    \        coords = [[i, j]]\n      elsif j != 0 && i == 13\n        coords = [[i,\
    \ j]]\n      elsif j != 0 && i == 14\n        coords = [[i, j]]\n      elsif j\
    \ != 0 && i == 15\n        coords = [[i, j]]\n      elsif j != 0 && i == 16\n\
    \        coords = [[i, j]]\n      elsif j != 0 && i == 17\n        coords = [[i,\
    \ j]]\n      elsif j != 0 && i == 18\n        coords = [[i, j]]\n      elsif j\
    \ != 0 && i == 19\n        coords = [[i, j]]\n      elsif j != 0 && i == 20\n\
    \        coords = [[i, j]]\n      el", "  lst.each_with_index do |row, i|\n  \
    \  row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        coords\
    \ = [[i, j]]\n      elsif i == 0 && j != 0\n        coords = [[i, j]]\n      elsif\
    \ i != 0 && j == 0\n        coords = [[i, j]]\n      elsif i != 0 && j != 0\n\
    \        coords = [[i, j]]\n      end\n    end\n  end\nend", "  lst.each do |row|\n\
    \    row.each do |column|\n      if column == x\n        return [[row, column]]\n\
    \      end\n    end\n  end\n  return []\nend", "  row = []\n  for i in 0..(lst.size-1)\n\
    \    row.push([i, lst[i]])\n  end\n  row.sort!\n  row.sort!.reverse!\n  for i\
    \ in 0..row.size\n    if row[i][1]==x\n      return row\n    end\n  end\n  return\
    \ []\nend", "  lst.sort!\n  result = []\n  row = 0\n  while row < lst.size\n \
    \   column = 0\n    while column < lst[row].size\n      if lst[row][column] ==\
    \ x\n        result.push([row, column])\n      column += 1\n    row += 1\n  end\n\
    \  result.sort!\n  result.reverse!\n  result\nend", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if col == x\n        return\
    \ [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n\
    \      end\n      if i == 0 && j != 0\n        row.unshift(j)\n      end\n   \
    \   if i != 0 && j == 0\n        row.unshift(i)\n      end\n      if i != 0 &&\
    \ j != 0\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  l", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == j\n        next if i == 0\n      end\n      yield\
    \ [i, j] if col == x\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == j\n        next if i == 0\n\
    \        next if i == row.length - 1\n        next if j == row.length - 1\n  \
    \      next if j == 0\n        next if col == row[j].length - 1\n        next\
    \ if col == 0\n        next if col == row[j].length - 1\n        next if col ==\
    \ row[j].length - 2\n        next if col == row[j].length - 1\n        next if\
    \ col == row[j].length - 2\n        next if col == row[j].length - 3\n       \
    \ next if col == row[j].length - 2\n        next if col == row[j].length - 3\n\
    \        next if col == row[j].length - 4\n        next if col == row[j].length\
    \ - 3\n        next if col == row[j].length - 4\n        next if col == row[j].length\
    \ - 5\n        next if col == row[j].length - 4\n        next if col == row[j].length\
    \ - 5\n        next if col == row[j].length - 6\n        next if col == row[j].length\
    \ - 5\n        next if col == row[j].length - 6\n        next if col == row[j].length\
    \ - 7\n        next if col == row[j].length - 6\n        next if col == row[j].length\
    \ - 7\n        next if col == row[j].length - 8\n        next if col == row[j].length\
    \ - 7\n        next if col == row[j].length - 8\n        next if col == row[j].length\
    \ - 9\n        next if col == row[j].length - 8\n        next if col == row[j].length\
    \ - 9\n        next if col == row[j].length - 10\n        next if col == row[j].length\
    \ - 9\n        next if col == row[j].length - 10\n        next if col == row[j].length\
    \ - 11\n        next if col == row[j].length - 10\n        next if col == row[j].length\
    \ - 11\n        next if col == row[j].length - 12\n        next if col == row[j].length\
    \ - 11\n        next if col == row[j].length - 12\n        next if col == row[j].length\
    \ - 13\n        next if col == row[j].length - 12\n        next if col == row[j].length\
    \ - 13\n        next if col == row[j].length - 14\n        next if col == row[j].length\
    \ - 13\n        next if col == row[j].length - 14", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n \
    \       row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_", "  row = []\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push", "  row = []\n  for i in 0..(lst.size - 1)\n    row.push([i,\
    \ lst[i]])\n  end\n  row.sort!\n  row.sort!.reverse!\n  for i in 0..(row.size\
    \ - 1)\n    if row[i][1] != x\n      row.delete_at(row[i])\n    end\n  end\n \
    \ return row\nend", "  lst = lst.sort\n  lst = lst.map { |e| e.sort }\n  lst =\
    \ lst.map { |e| e.map { |e| e.to_i } }\n  lst = lst.map { |e| e.select { |e| e\
    \ == x } }\n  lst = lst.map { |e| e.map { |e| (e.first, e.last) } }\n  lst = lst.map\
    \ { |e| e.sort_by { |e| -e[1] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]]\
    \ } }\n  lst = lst.map { |e| e.sort_by { |e| -e[0] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e| e.sort_by { |e| -e[1] }\
    \ }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e|\
    \ e.sort_by { |e| -e[0] } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] }\
    \ }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e[1], e[0]] } }\n  lst = lst.map { |e|\
    \ e.map { |e| [e[0], e[1]", "  lst.sort!\n  result = []\n  i = 0\n  while i <\
    \ lst.size\n    row = lst[i]\n    i += 1\n    row.sort!\n    row.each_with_index\
    \ do |col, j|\n      if col == x\n        result.push([i, j])\n      end\n   \
    \ end\n  end\n  result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coords = [[i, j]]\n      elsif\
    \ i == 0 && j != 0\n        coords << [i, j - 1]\n      elsif i != 0 && j == 0\n\
    \        coords << [i-1, j]\n      elsif i == 0 && j == 0\n        coords << [i,\
    \ j]\n      else\n        coords << [i, j]\n      end\n    end\n  end\n  coords.sort_by\
    \ { |x, y| y }.reverse.sort_by { |x, y| x }.reverse\nend", "  lst.each do |row|\n\
    \    row.each do |elem|\n      if elem == x\n        return [[row.index, row.index\
    \ + 1]]\n      end\n    end\n  end\n  return []\nend", "  lst.each do |row|\n\
    \    row.each do |elem|\n      return [elem.to_i, row.to_i] if elem == x\n   \
    \ end\n  end\n  return []\nend", "  result = []\n  for i in lst\n    if i.include?(x)\n\
    \      result << [i, i.index(x)]\n    end\n  end\n  result.sort! {|a, b| a[1]\
    \ <=> b[1]}\n  result.sort! {|a, b| b[1] <=> a[1]}\n  result\nend", "  lst.each\
    \ do |row|\n    row.each do |item|\n      if item == x\n        return [[row,\
    \ 0]]\n      end\n    end\n  end\n  return []\nend", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n \
    \       puts \"#{x} is not in the list.\"\n      elsif i == 0 && j != 0\n    \
    \    puts \"#{x} is not in the list.\"\n      elsif j == 0 && i != 0\n       \
    \ puts \"#{x} is not in the list.\"\n      elsif i == 0 && j == 0\n        puts\
    \ \"#{x} is not in the list.\"\n      elsif i == 0 && j == 0\n        puts \"\
    #{x} is not in the list.\"\n      elsif i == 0 && j == 0\n        puts \"#{x}\
    \ is not in the list.\"\n      elsif i == 0 && j == 0\n        puts \"#{x} is\
    \ not in the list.\"\n      elsif i == 0 && j == 0\n        puts \"#{x} is not\
    \ in the list.\"\n      elsif i == 0 && j == 0\n        puts \"#{x} is not in\
    \ the list.\"\n      elsif i == 0 && j == 0\n        puts \"#{x} is not in the\
    \ list.\"\n      elsif i == 0 && j == 0\n        puts \"#{x} is not in the list.\"\
    \n      elsif i == 0 && j == 0\n        puts \"#{x} is not in the list.\"\n  \
    \    elsif i == 0 && j == 0\n        puts \"#{x} is not in the list.\"\n     \
    \ elsif i == 0 && j == 0\n        puts \"#{x} is not in the list.\"\n      elsif\
    \ i == 0 && j == 0\n        puts \"#{x} is not in the list.\"\n      elsif i ==\
    \ 0 && j == 0\n        puts \"#{x} is not in the list.\"\n      elsif i == 0 &&\
    \ j == 0\n        puts \"#{x} is not in the list.\"\n      elsif i == 0 && j ==\
    \ 0\n        puts \"#{x} is not in the list.\"\n      elsif i == 0 && j == 0\n\
    \        puts \"#{x} is not in the list.\"\n      elsif i == 0 && j == 0\n   \
    \     puts \"#{x} is not in the list.\"\n      elsif i == 0 && j == 0\n      \
    \  puts \"#{x} is not in the list.\"\n      elsif i == 0 && j == 0\n        puts\
    \ \"#{x} is not in the list.\"\n      elsif i == 0 && j == 0\n        puts \"\
    #{x} is not in the list.\"\n      elsif i == 0 && j == 0\n        puts \"#{x}\
    \ is not in the list.\"\n      elsif i == 0 && j == 0\n        ", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  l", "  row = []\n  for i in\
    \ lst\n    row.push(i[x])\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend",
  "  lst.sort!\n  result = []\n  i = 0\n  while i < lst.size\n    row = lst[i]\n \
    \   i += 1\n    row.sort!\n    row.each_with_index do |col, j|\n      if col ==\
    \ x\n        result.push([i, j])\n      end\n    end\n  end\n  result.sort!\n\
    \  result.reverse!\n  result\nend", "  lst.sort!\n  result = []\n  i = 0\n  while\
    \ i < lst.size\n    row = lst[i]\n    i += 1\n    row.sort!\n    break if i ==\
    \ lst.size\n    j = i\n    while j < lst.size && row[j] == x\n      j += 1\n \
    \   result.push([i, j])\n  end\n  result\nend", "  lst.sort!\n  result = []\n\
    \  i = 0\n  while i < lst.size\n    if lst[i][0] == x\n      result << [lst[i][1],\
    \ lst[i][2]]\n      i += 1\n      while i < lst.size && lst[i][0] == x\n     \
    \   i += 1\n      i += 1\n    end\n  end\n  result.sort!\n  result.reverse!\n\
    \  return result\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if col == x\n        row.push(i)\n        row.push(j)\n      end\n    end\n\
    \  end\n  row.sort!\n  row.sort!.reverse!\n  return row\nend", "  row = []\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n\
    \      elsif i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i\
    \ != 0\n        row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_", "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push",
  "  row = []\n  row.push(x)\n  row.push(lst.length)\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      row.push([i, j, col])\n    end\n\
    \  end\n  row.sort_by! { |x| x[0] }\n  row.sort_by! { |x| x[2] }\n  row.reverse!\n\
    \  row\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)", "  lst.each do |row|\n    row.each\
    \ do |item|\n      if item == x\n        return [[row.first, x]]\n      end\n\
    \    end\n  end\nend", "  row = []\n  row_size = lst.count\n  for i in 0..row_size\n\
    \    row.push([i, x])\n  end\n  row.sort!\n  row.sort!.reverse!\n  row\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == j\n        next if i == 0\n        coord = [i, j]\n      else\n       \
    \ coord = [i, j] if row[j] == x\n      end\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n", "  lst.each do |row|\n    row.each do |item|\n      if\
    \ item == x\n        puts \"#{row[0]}, #{row[1]}\"\n      end\n    end\n  end\n\
    end", "  lst = lst.sort\n  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e|\
    \ e.map { |e| e.to_i } }\n  lst = lst.map { |e| e.select { |e| e == x } }\n  lst\
    \ = lst.map { |e| e.map { |e| [e, 0] } }\n  lst = lst.map { |e| e.sort_by { |e|\
    \ -e.first } }\n  lst = lst.map { |e| e.map { |e| [e.first, e.last] } }\n  lst\
    \ = lst.map { |e| e.sort_by { |e| -e.last } }\n  lst = lst.map { |e| e.map { |e|\
    \ [e.last, e.first] } }\n  lst = lst.map { |e| e.map { |e| [e.first, e.last] }\
    \ }\n  lst = lst.map { |e| e.map { |e| [e.last, e.first] } }\n  lst = lst.map\
    \ { |e| e.map { |e| [e.first, e.last] } }\n  lst = lst.map { |e| e.map { |e| [e.last,\
    \ e.first] } }\n  lst = lst.map { |e| e.map { |e| [e.first, e.last] } }\n  lst\
    \ = lst.map { |e| e.map { |e| [e.last, e.first] } }\n  lst = lst.map { |e| e.map\
    \ { |e| [e.first, e.last] } }\n  lst = lst.map { |e| e.map { |e| [e.last, e.first]\
    \ } }\n  lst = lst.map { |e| e.map { |e| [e.first, e.last] } }\n  lst = lst.map\
    \ { |e| e.map { |e| [e.last, e.first] } }\n  lst = lst.map { |e| e.map { |e| [e.first,\
    \ e.last] } }\n  lst = lst.map { |e| e.map { |e| [e.last, e.first] } }\n  lst\
    \ = lst.map { |e| e.map { |e| [e.first, e.last] } }\n  lst = lst.map { |e| e.map\
    \ { |e| ", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 &&\
    \ j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|", "  lst = lst.sort\n  row = []\n  i = 0\n  while i < lst.size\n\
    \    row = row + [[i, j] for j in lst[i].sort]\n    i += 1\n  end\n  row = row.sort\n\
    \  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = row.reverse\n\
    \  row = row[0]\n  row = row.sort\n  row = row.reverse\n  row = row[0]\n  row\
    \ = row.sort\n  row = row.reverse\n  row = row[0]\n  row = row.sort\n  row = ",
  "  rows = []\n  for i in lst\n    row = i[x..-1]\n    rows.push(row)\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  rows.each do |row|\n    row.sort!\n  end\n  return rows\n\
    end", "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j !=\
    \ 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      elsif i != 0 && j != 0\n        row.unshift(j)\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \       row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j != 0\n\
    \        row.unshift(j)\n        row.unshift(i)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      elsif i != 0 && j != 0\n        row.unshift(j)\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \       row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if col == x\n        [i, j]\n\
    \      end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j > 0\n        row.unshift(j)\n      end\n      if j == 0\
    \ && i > 0\n        row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if i == 0 && j > 0\n        row.unshift(j)\n\
    \      end\n      if j == 0 && i > 0\n        row.unshift(i)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0\
    \ && j > 0\n        row.unshift(j)\n      end\n      if j == 0 && i > 0\n    \
    \    row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j > 0\n        row.unshift(j)\n\
    \      end\n      if j == 0 && i > 0\n        row.unshift(i)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0\
    \ && j > 0\n        row.unshift(j)\n      end\n      if j == 0 && i > 0\n    \
    \    row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j > 0\n        row.unshift(j)\n\
    \      end\n      if j == 0 && i > 0\n        row.unshift(i)\n      end\n    end\n\
    \  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0\
    \ && j > 0\n        row.unshift(j)\n      end\n      if j == 0 && i > 0\n    \
    \    row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        coord = [0, i]\n      elsif\
    \ i == 0 && j != 0\n        coord = [0, j]\n      elsif i != 0 && j == 0\n   \
    \     coord = [i, 0]\n      else\n        coord = [i, j]\n      end\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n\
    \      coord.reverse!\n      coord.sort!", "  row = []\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i] >= x\n  \
    \    row << [lst[i], i]\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n \
    \ return row\nend", "  lst = lst.sort\n  lst = lst.map { |e| e.sort }\n  lst =\
    \ lst.map { |e| e.map { |e| e == x ? [e.size, 0] : e } }\n  lst = lst.map { |e|\
    \ e.sort_by { |e| -e[0] } }\n  lst = lst.map { |e| e.map { |e| e[1] } }\n  lst\
    \ = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.sort_by\
    \ { |e| -e[0] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst =\
    \ lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e|\
    \ [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst\
    \ = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map {\
    \ |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n \
    \ lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map\
    \ { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n\
    \  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map\
    \ { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n\
    \  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map\
    \ { |e| [e[0], e[1]] } }\n  lst = lst.map { |e| e.map { |e| [e[0], e[1]] } }\n\
    \  lst = lst.map { |e| ", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \       row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j != 0\n\
    \        row.unshift(j)\n        row.unshift(i)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      elsif i != 0 && j != 0\n        row.unshift(j)\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \       row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j != 0\n\
    \        row.unshift(j)\n        row.unshift(i)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)",
  "  row = []\n  row_idx = []\n  row_idx_sorted = []\n  for i in lst\n    row_idx.push(i)\n\
    \    row_idx_sorted.push(i)\n  end\n  row_idx.sort!\n  row_idx_sorted.sort!\n\
    \  for i in row_idx\n    row.push([row_idx_sorted.index(i), row_idx.index(i)])\n\
    \  end\n  row.sort!\n  for i in row\n    if i[0] == x\n      return row\n    end\n\
    \  end\n  return []\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_", "  row = []\n  row_num = 0\n  col_num = 0\n  while row_num\
    \ < len(lst)\n    row = row + [col_num] * len(lst[row_num])\n    row_num += 1\n\
    \    col_num = 0\n    while col_num < len(lst[row_num])\n      if lst[row_num][col_num]\
    \ == x\n        col_num += 1\n      else\n        col_num = 0\n      end\n   \
    \ end\n  end\n  row.sort!\n  row.sort!.reverse\n  row\nend", "  rows = []\n  for\
    \ i in lst\n    row = i[x..-1]\n    row.sort!\n    row.sort!.reverse!\n    rows.push(row)\n\
    \  end\n  rows.sort!\n  rows.sort!.reverse!\n  return rows\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if col == x\n      \
    \  [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 || j == 0 || i == row.length\
    \ || j == row[0].length\n        puts \"#{i},#{j}\"\n      end\n    end\n  end\n\
    end", "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j-1]\n      end\n   \
    \   coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0\n        row.push(j)\n\
    \      else\n        row.push(j - row.length)\n      end\n    end\n  end\n  row.sort!\n\
    \  row.sort!.reverse!\n  row\nend", "  lst = lst.sort\n  lst = lst.map { |e| e.sort\
    \ }\n  lst = lst.map { |e| e.map { |e| e == x ? [e, 0] : e } }\n  lst = lst.map\
    \ { |e| e.sort }\n  lst = lst.map { |e| e.map { |e| e == x ? [e, 0] : e } }\n\
    \  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e| e.map { |e| e == x ? [e,\
    \ 0] : e } }\n  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e| e.map { |e|\
    \ e == x ? [e, 0] : e } }\n  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e|\
    \ e.map { |e| e == x ? [e, 0] : e } }\n  lst = lst.map { |e| e.sort }\n  lst =\
    \ lst.map { |e| e.map { |e| e == x ? [e, 0] : e } }\n  lst = lst.map { |e| e.sort\
    \ }\n  lst = lst.map { |e| e.map { |e| e == x ? [e, 0] : e } }\n  lst = lst.map\
    \ { |e| e.sort }\n  lst = lst.map { |e| e.map { |e| e == x ? [e, 0] : e } }\n\
    \  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e| e.map { |e| e == x ? [e,\
    \ 0] : e } }\n  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e| e.map { |e|\
    \ e == x ? [e, 0] : e } }\n  lst = lst.map { |e| e.sort }\n  lst = lst.map { |e|\
    \ e.map { |e| e == x ? [e, 0] : e } }\n  lst = lst.map { |e| e.sort }\n  lst =\
    \ lst.map { |e| e.map { |e| e == x ? [e, 0] : e } }\n  lst = lst.map { |e| e.sort\
    \ }", "  lst.each do |row|\n    row.each do |elem|\n      if elem == x\n     \
    \   coord = row.index(elem)\n        coord.times { yield [coord, coord] }\n  \
    \    end\n    end\n  end\nend", "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push",
  "  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst\
    \ = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst =\
    \ lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n\
    \  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst\
    \ = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst =\
    \ lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n\
    \  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst\
    \ = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst =\
    \ lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n\
    \  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst\
    \ = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst =\
    \ lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n\
    \  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst\
    \ = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst =\
    \ lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort\n\
    \  lst = lst.sort!\n  lst = lst.sort\n  lst = lst.sort!\n  lst", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j] if row[j] == x\n \
    \     end\n      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!\n\
    \      coord.sort!\n      coord.reverse!\n      coord.sort!\n      coord.reverse!",
  "  lst = lst.sort\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst\
    \ = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  lst = lst.sort!\n  ", " \
    \ rows = []\n  for i in lst\n    if i.include?(x)\n      rows << [i.index(x),\
    \ i.index(x) + 1]\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows.map!\
    \ {|i| [i.first, i.last]}\nend", "  rows = []\n  for i in 0..(lst.size - 1)\n\
    \    row = lst[i]\n    if row.include? x\n      rows.push([i, row.index(x)])\n\
    \    end\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n    row.sort!\n\
    \    row.reverse!\n  end\n  rows\nend", "  row = []\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push", "  result = []\n  for i in 0...lst.size\n    if lst[i] > x\n   \
    \   break\n    result.push([i, lst[i]])\n  end\n  result.sort!\n  result.reverse!\n\
    \  result\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif i ==\
    \ 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 || j == 0 || i == row.length || j == row[0].length\n        next if i\
    \ == 0 && j == 0\n        next if i == row.length && j == row[0].length\n    \
    \    next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if i == row.length && j == row[0].length\n\
    \        next if i == row.length && j == 0\n        next if i == 0 && j == row[0].length\n\
    \        next if i == 0 && j == 0\n        next if ", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if i == j\n        next\
    \ if i == 0\n        next if j == row.length - 1\n        next if j == row.length\n\
    \      end\n      next if col == x\n      yield [i, j]\n    end\n  end\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ col == x\n        [i, j]\n      end\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n\
    \        coord = [i, j]\n      else\n        coord = [i, j] if coord.last < x\n\
    \      end\n    end\n  end\n  coord.sort!\n  coord.reverse!\n  coord.map { |i|\
    \ [i, coord.index(i)] }\nend", "  row = []\n  row.push(x)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        coords = [[i, j]]\n      elsif i == 0 && j != 0\n        coords = [[i,\
    \ j], [i, j - 1]]\n      elsif j == 0 && i != 0\n        coords = [[i, j], [i-1,\
    \ j]]\n      elsif j != 0 && i != 0\n        coords = [[i, j], [i-1, j-1], [i,\
    \ j-1]]\n      end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n\
    \        col.unshift(0)\n      end\n      if col == x\n        row.unshift(j)\n\
    \        col.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n        col.unshift(0)\n      end\n      if col == x\n     \
    \   row.unshift(j)\n        col.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n        col.unshift(0)\n      end\n      if col == x\n\
    \        row.unshift(j)\n        col.unshift(i)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n      end\n\
    \      if col == x\n        row.unshift(j)\n        col.unshift(i)\n      end\n\
    \    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n        col.unshift(0)\n\
    \      end\n      if col == x\n        row.unshift(j)\n        col.unshift(i)\n\
    \      end\n    end\n  end\n", "  row = []\n  for i in lst\n    row.push([i, i.index(x)])\n\
    \  row.sort!\n  row.sort!.reverse!\n  return row\nend", "  row = []\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0,\
    \ 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([0, 0])\n  row.push([",
  "  result = []\n  for i in lst\n    if i.include?(x)\n      result << [i - x, i.size\
    \ - 1]\n    end\n  end\n  result.sort!\n  result.sort!{|a, b| b[1] <=> a[1]}\n\
    \  result\nend", "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push", "  lst.sort!\n\
    \  result = []\n  i = 0\n  while i < lst.size\n    row = lst[i]\n    i += 1\n\
    \    row.sort!\n    j =0\n    while j < row.size\n      if row[j] == x\n     \
    \   result.push([i, j])\n      j += 1\n    end\n  end\n  result.reverse!\n  return\
    \ result\nend", "  row = []\n  for i in lst\n    row.push([i, i.index(x)])\n \
    \ row.sort!\n  row.sort!.reverse!\n  return row\nend", "  rows = []\n  row = []\n\
    \  for i in lst\n    row << i\n  end\n  row.each do |i|\n    i.each do |j|\n \
    \     if j == x\n        rows.push [i, j]\n      end\n    end\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  return rows\nend", "  row = []\n  row.push(x)\n  row.push(lst[0])\n\
    \  row.push(lst[1])\n  row.push(lst[2])\n  row.push(lst[3])\n  row.push(lst[4])\n\
    \  row.push(lst[5])\n  row.push(lst[6])\n  row.push(lst[7])\n  row.push(lst[8])\n\
    \  row.push(lst[9])\n  row.push(lst[10])\n  row.push(lst[11])\n  row.push(lst[12])\n\
    \  row.push(lst[13])\n  row.push(lst[14])\n  row.push(lst[15])\n  row.push(lst[16])\n\
    \  row.push(lst[17])\n  row.push(lst[18])\n  row.push(lst[19])\n  row.push(lst[20])\n\
    \  row.push(lst[21])\n  row.push(lst[22])\n  row.push(lst[23])\n  row.push(lst[24])\n\
    \  row.push(lst[25])\n  row.push(lst[26])\n  row.push(lst[27])\n  row.push(lst[28])\n\
    \  row.push(lst[29])\n  row.push(lst[30])\n  row.push(lst[31])\n  row.push(lst[32])\n\
    \  row.push(lst[33])\n  row.push(lst[34])\n  row.push(lst[35])\n  row.push(lst[36])\n\
    \  row.push(lst[37])\n  row.push(lst[38])\n  row.push(lst[39])\n  row.push(lst[40])\n\
    \  row.push(lst[41])\n  row.push(lst[42])\n  row.push(lst[43])\n  row.push(lst[44])\n\
    \  row.push(lst[45])\n  row.push(lst[46])\n  row.push(lst[47])\n  row.push(lst[48])\n\
    \  row.push(lst[49])\n  row.push(lst[50])\n  row.push(lst[51])\n  row.push(lst[52])\n\
    \  row.push(lst[53])\n  row.push(lst[54])\n  row.push(lst[55])\n  row.push(lst[56])\n\
    \  row.push(lst[57])\n  row.push(lst[58])\n  row.push(lst[59])\n  row.push(lst[60])\n\
    \  row.push(lst[61])\n  row.push(lst[62])\n  row.push(lst[63])\n  row.push(lst[64])\n\
    \  row.push(lst[65])\n  ", "  result = []\n  for i in lst\n    if i.include?(x)\n\
    \      result << [i - x, i.size - x]\n    end\n  end\n  result.sort!\n  result.sort!\
    \ {|a, b| b[0] <=> a[0]}\n  result\nend", "  row = []\n  for i in lst\n    row.push([i,\
    \ i.index(x)])\n  row.sort!\n  row.sort!.reverse!\n  return row\nend", "  result\
    \ = []\n  for i in lst\n    result << i.select {|e| e == x}\n  end\n  result.sort!\
    \ {|a, b| a[0] <=> b[0]}\n  result.sort! {|a, b| b[1] <=> a[1]}\n  result\nend",
  "  rows = []\n  for i in 0...(lst.size - 1)\n    row = lst[i]\n    if row.include?(x)\n\
    \      rows.push([i, row.index(x)])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  rows.map! {|row| row.map! {|i| lst[i][row]}}\n  rows\nend", "  row = []\n \
    \ for i in lst\n    row.push([i, i.index(x)])\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  result = []\n  row = 0\n  while row < lst.size\n    column\
    \ = lst[row].index(x)\n    result.push([row, column])\n    row += 1\n  end\n \
    \ result.sort!\n  result.sort! {|a, b| b[1] <=> a[1]}\n  result.reverse!\n  result\n\
    end", "  row = []\n  row.push(x)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n  row.push(lst.length)\n\
    \  row.push(lst.length)\n  row.push(lst.length)", "  lst.each do |row|\n    row.each\
    \ do |elem|\n      return [elem.to_i, row.to_i] if elem == x\n    end\n  end\n\
    \  return []\nend", "  row = []\n  for i in 0..(lst.size-1)\n    if lst[i] >=\
    \ x\n      row.push([i, lst[i]])\n    end\n  end\n  row.sort!\n  row.sort!.reverse!\n\
    \  return row\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if col == x\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if col == x\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if col == x\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if col == x\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if col == x\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if col == x\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if col == x\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      end\n      if col == x\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if col == x\n        row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && ", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_", "  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      if i == j\n        next\
    \ if i == 0\n        next if j == row.length - 1\n        next if j == row.length\n\
    \      end\n      break if col == x\n    end\n    break if i == row.length - 1\n\
    \  end\n  lst\nend", "  lst = lst.sort\n  lst.each_with_index do |row, i|\n  \
    \  row.each_with_index do |col, j|\n      if col == x\n        [i, j]\n      end\n\
    \    end\n  end\nend", "  rows = []\n  for i in lst\n    if i.include? x\n   \
    \   rows << i.index(x)\n    end\n  end\n  rows.sort!\n  rows.reverse!\n  for i\
    \ in rows\n    j = rows.index(i)\n    rows[j] = [i.last, i.first]\n  end\n  rows.sort!\n\
    \  rows.reverse!\n  return rows\nend", "  lst.each do |row|\n    row.each do |elem|\n\
    \      return elem if elem == x\n    end\n  end\n  return []\nend", "  result\
    \ = []\n  for i in lst\n    result << i.select { |e| e == x }\n  end\n  result.sort\
    \ { |a, b| a.first <=> b.first }.reverse.map { |e| [e.first, e.last] }\nend",
  "  row = []\n  row.push(x)\n  row.push(lst[0])\n  row.push(lst[1])\n  row.push(lst[2])\n\
    \  row.push(lst[3])\n  row.push(lst[4])\n  row.push(lst[5])\n  row.push(lst[6])\n\
    \  row.push(lst[7])\n  row.push(lst[8])\n  row.push(lst[9])\n  row.push(lst[10])\n\
    \  row.push(lst[11])\n  row.push(lst[12])\n  row.push(lst[13])\n  row.push(lst[14])\n\
    \  row.push(lst[15])\n  row.push(lst[16])\n  row.push(lst[17])\n  row.push(lst[18])\n\
    \  row.push(lst[19])\n  row.push(lst[20])\n  row.push(lst[21])\n  row.push(lst[22])\n\
    \  row.push(lst[23])\n  row.push(lst[24])\n  row.push(lst[25])\n  row.push(lst[26])\n\
    \  row.push(lst[27])\n  row.push(lst[28])\n  row.push(lst[29])\n  row.push(lst[30])\n\
    \  row.push(lst[31])\n  row.push(lst[32])\n  row.push(lst[33])\n  row.push(lst[34])\n\
    \  row.push(lst[35])\n  row.push(lst[36])\n  row.push(lst[37])\n  row.push(lst[38])\n\
    \  row.push(lst[39])\n  row.push(lst[40])\n  row.push(lst[41])\n  row.push(lst[42])\n\
    \  row.push(lst[43])\n  row.push(lst[44])\n  row.push(lst[45])\n  row.push(lst[46])\n\
    \  row.push(lst[47])\n  row.push(lst[48])\n  row.push(lst[49])\n  row.push(lst[50])\n\
    \  row.push(lst[51])\n  row.push(lst[52])\n  row.push(lst[53])\n  row.push(lst[54])\n\
    \  row.push(lst[55])\n  row.push(lst[56])\n  row.push(lst[57])\n  row.push(lst[58])\n\
    \  row.push(lst[59])\n  row.push(lst[60])\n  row.push(lst[61])\n  row.push(lst[62])\n\
    \  row.push(lst[63])\n  row.push(lst[64])\n  row.push(lst[65])\n  "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
