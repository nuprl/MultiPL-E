name: HumanEval_47_median
language: rb
prompt: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2, 4,\
  \ 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
  \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4,\
  \ 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5,\
  \ candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7,\
  \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
completions: ["  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f /\
    \ 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  len = (l[-1] - l[0]).abs\n  len = (len / 2.0).ceil\
    \ if len % 2 == 0\n  len.times { |i| l[i] = l[i] / len }\n  l[len / 2]\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2\
    \ == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ > 1 \n  l[l.length / 2]\nend", "  return l.sort.inject(0.0, :+) / 2.0\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  return l.sort.last.to_f\
    \ / 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
