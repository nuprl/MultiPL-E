name: HumanEval_47_median
language: rb
prompt: "# Return median of elements in the list l.\n# >>> median.call([3, 1, 2, 4,\
  \ 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
  \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4,\
  \ 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5,\
  \ candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7,\
  \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
completions: ["  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f /\
    \ 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  len = (l[-1] - l[0]).abs\n  len = (len / 2.0).ceil\
    \ if len % 2 == 0\n  len.times { |i| l[i] = l[i] / len }\n  l[len / 2]\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2\
    \ == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ > 1 \n  l[l.length / 2]\nend", "  return l.sort.inject(0.0, :+) / 2.0\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  return l.sort.last.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size/2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size > 1 \n  l[l.length / 2]\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\n\
    \  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2\
    \ == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size\
    \ / 2).floor]\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length\n  l = l[1..-1] if l.length < 3 else l\n \
    \ l.length\n  l.length == 1 ? l[0] : (l.length / 2).floor * 2 + l[(l.length /\
    \ 2).floor]\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  return l.sort.last.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\n\
    end", "  l.sort!\n  l.length\n  l.length / 2\nend", "  l.sort!\n  l = l.sort\n\
    \  if l.length < 2\n    return l[0]\n  mid = l.length / 2\n  if l[mid] == l[mid-1]\n\
    \    return l[mid]\n  else\n    return l[mid-1] + l[mid]/2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l = l.length if l.length < 5 else 5\n  l.times { yield l[l.length\
    \ / 2] }\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  len = (l[-1]\
    \ - l[0]).abs\n  len = (len / 2.0).ceil if len % 2 == 0\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { ", "  return l.sort.last.to_f / 2.0\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ > 1 \n  l[l.size/2].to_f / 2.0\nend", "  l.sort!\n  l.length\n  l.length / 2\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size > 1 \n  l[l.size/2].to_f / 2.0\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend", "  return\
    \ l.sort.last if l.size % 2 == 0 ? (l[l.size/2 - 1] + l[l.size/2]) / 2 : l[l.size/2].to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0 \n  l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ return l.sort.last if l.size % 2 == 0 ? (l[l.size/2] + l[l.size/2-1])/2 : l[l.size/2].median\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size\n  l.size / 2.0\nend", "  l.sort!\n  l = l.length if l.length\
    \ < 3 else 3\n  l = (l+1)/2\n  l = (l-1)/2\n  l\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend",
  "  l.sort!\n  len = (l[-1]-l[0])/2\n  len.times { l.delete_at(l[l.length/2]) }\n\
    \  len\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length\n  l.length / 2\n  l[(l.length / 2) - 1]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0 \n  l.size / 2\nend", "  l.sort!\n  l.length\n  l.length\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n \
    \ l[(l.length-1)/2].to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  return l.sort.last(l/2).to_f\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ return l.sort.inject(0.0, :+) / 2.0\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend", " \
    \ return l.sort.last(l/2).to_f / 2.0\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n  l/2\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2\
    \ == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l.length if l.length % 2 == 0 else l.length / 2\n  l.ceil\n  l\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2\
    \ == 0 \n  l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length\n\
    \  l = l[1..-1] if l.length < 3 else l\n  l.length\n  l.length == 1 ? l[0] : (l[l.length\
    \ / 2] + l[l.length / 2 - 1]) / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend", "  l.sort!\n  len\
    \ = (l[1]-l[0])/2\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift\
    \ }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n\
    \  len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n \
    \ len.times { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times\
    \ { l.shift }\n  len.times { l.shift }\n  len.times { l.shift }\n  len.times {\
    \ l.shift }\n  len.times { l.shift }\n  len", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  return l.sort.last.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0 \n  l[l.size / 2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  return l.sort.inject(0.0,\
    \ :+) / 2.0\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l.size /\
    \ 2\nend", "  return l.sort.last if l.size % 2 == 0 \n  l.sort.each_with_index\
    \ { |e, i| return i if e > l.sort.last }\n  l.size / 2\nend", "  l.sort!\n  l\
    \ = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0 \n  l[(l.size / 2).floor]\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  len = (l[-1] - l[0]).abs\n  len.floor / 2\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  return l.sort.last(l/2).floor\nend", "  l.sort!\n  l.length\n\
    \  l = l[1..-1] if l.length < 3 else l\n  l.length\n  l[l.length / 2]\nend", " \
    \ l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size / 2]\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\n  l[l.size / 2]\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size\n  l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  return l.sort.last if l.is_a?(Array) ? (l.sort.last / 2).floor : nil\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n \
    \ l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n\
    \  l.length / 2\n  l.length / 2.0\nend", "  return l.sort.last(l/2).to_f / 2.0\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  len = (l.length / 2).ceil\n  len.times { yield l[len] }\n\
    \  len.times { yield l[-len] }\nend", "  l.sort!\n  l.length.to_f / 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
