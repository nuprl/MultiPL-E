name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>>\
  \ fib4.call(7)\n# 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \ end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when\
    \ 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n\
    </cell>\n<text>\nProblem 5\nThe Fibonacci sequence is defined by the formula:\n\
    $$ F_n = \\begin{cases}\n0 & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\n\
    F{n-2} + F_{n-1} & \\text{otherwise}\n\\end{cases}$$\nwhere $F_0 = 1$ and $F_1\
    \ = 1$.\nThe first few terms of the Fibonacci sequence are 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, \u2026\nBy iterating through the terms in the sequence\
    \ $F_n$, find the sum of the even-valued terms.\nFor example, as $n \\rightarrow\
    \ \\infty$, $F_n$ is congruent to 1 modulo 4.\nHence the sequence converges to\
    \ the $F_5$: 1, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 72, 89, 145, \u2026\nThe\
    \ sum of even fibonacci numbers is $1 + 3 + 5 + 8 + 13 + 21 + 34 + 55 + 89 + 144\
    \ + \u2026 = 55$.\nFind the sum of the odd Fibonacci numbers, $F_6$, modulo 3.",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).", "  if n <= 0\n    0\n\
    \  else\n    fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\nend", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n \
    \ when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4\
    \ = (0..(n-4)).inject(0) do |sum, index|\n    sum += (index+1).to_i\n  end\n \
    \ fib4\nend", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3]\
    \ + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.cache[n] ||= fib4.cache[n-1]\
    \ + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n  fib4.cache[n]\nend",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  case n\n \
    \   when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n \
    \   when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend", " \
    \ fib4.stack[n-1] = fib4.stack[n-2] if fib4.stack[n-2].nil? || fib4.stack[n-2].zero?\
    \ || fib4.stack[n-2].even? else fib4.stack[n-2] + fib4.stack[n-3]\n  fib4.stack[n]\
    \ = fib4.stack[n-1] + fib4.stack[n-2] if fib4.stack[n-1].nil? || fib4.stack[n-1].zero?\
    \ || fib4.stack[n-1].even? else fib4.stack[n-1] + fib4.stack[n-2] + fib4.stack[n-3]\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  if n <= 0\n    0\n  else\n    fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\nend", "  case n\n    when 0 then\
    \ 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n    when n then\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
