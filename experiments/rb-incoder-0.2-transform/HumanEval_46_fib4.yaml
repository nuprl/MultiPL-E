name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>>\
  \ fib4.call(7)\n# 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \ end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when\
    \ 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n\
    </cell>\n<text>\nProblem 5\nThe Fibonacci sequence is defined by the formula:\n\
    $$ F_n = \\begin{cases}\n0 & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\n\
    F{n-2} + F_{n-1} & \\text{otherwise}\n\\end{cases}$$\nwhere $F_0 = 1$ and $F_1\
    \ = 1$.\nThe first few terms of the Fibonacci sequence are 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, \u2026\nBy iterating through the terms in the sequence\
    \ $F_n$, find the sum of the even-valued terms.\nFor example, as $n \\rightarrow\
    \ \\infty$, $F_n$ is congruent to 1 modulo 4.\nHence the sequence converges to\
    \ the $F_5$: 1, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 72, 89, 145, \u2026\nThe\
    \ sum of even fibonacci numbers is $1 + 3 + 5 + 8 + 13 + 21 + 34 + 55 + 89 + 144\
    \ + \u2026 = 55$.\nFind the sum of the odd Fibonacci numbers, $F_6$, modulo 3.",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).", "  if n <= 0\n    0\n\
    \  else\n    fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\nend", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n \
    \ when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4\
    \ = (0..(n-4)).inject(0) do |sum, index|\n    sum += (index+1).to_i\n  end\n \
    \ fib4\nend", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3]\
    \ + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.cache[n] ||= fib4.cache[n-1]\
    \ + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n  fib4.cache[n]\nend",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  case n\n \
    \   when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n \
    \   when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend", " \
    \ fib4.stack[n-1] = fib4.stack[n-2] if fib4.stack[n-2].nil? || fib4.stack[n-2].zero?\
    \ || fib4.stack[n-2].even? else fib4.stack[n-2] + fib4.stack[n-3]\n  fib4.stack[n]\
    \ = fib4.stack[n-1] + fib4.stack[n-2] if fib4.stack[n-1].nil? || fib4.stack[n-1].zero?\
    \ || fib4.stack[n-1].even? else fib4.stack[n-1] + fib4.stack[n-2] + fib4.stack[n-3]\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  if n <= 0\n    0\n  else\n    fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\nend", "  case n\n    when 0 then\
    \ 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n    when n then\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when\
    \ 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when 0\n    0\n\
    \  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n  when 4\n    4\n  else\n\
    \    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.cache[n]\
    \ ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] +\
    \ fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end\nfib4.call(5)\nfib4.call(6)\nfib4.call(7)\nfib4.call(8)\nfib4.call(9)\nfib4.call(10)\n\
    fib4.call(11)\nfib4.call(12)\nfib4.call(13)\nfib4.call(14)\nfib4.call(15)\nfib4.call(16)\n\
    fib4.call(17)\nfib4.call(18)\nfib4.call(19)\nfib4.call(20)\nfib4.call(21)\nfib4.call(22)\n\
    fib4.call(23)\nfib4.call(24)\nfib4.call(25)\nfib4.call(26)\nfib4.call(27)\nfib4.call(28)\n\
    fib4.call(29)\nfib4.call(30)\nfib4.call(31)\nfib4.call(32)\nfib4.call(33)\nfib4.call(34)\n\
    fib4.call(35)\nfib4.call(36)\nfib4.call(37)\nfib4.call(38)\nfib4.call(39)\nfib4.call(40)\n\
    fib4.call(41)\nfib4.call(42)\nfib4.call(43)\nfib4.call(44)\nfib4.call(45)\nfib4.call(46)\n\
    fib4.call(47)\nfib4.call(48)\nfib4.call(49)\nfib4.call(50)\nfib4.call(51)\nfib4.call(52)\n\
    fib4.call(53)\nfib4.call(54)\nfib4.call(55)\nfib4.call(56)\nfib4.call(57)\nfib4.call(58)\n\
    fib4.call(59)\nfib4.call(60)\nfib4.call(61)\nfib4.call(62)\nfib4.call(63)\nfib4.call(64)\n\
    fib4.call(65)\nfib4.call(66)\nfib4.call(67)\nfib4.call(68)\nfib4.call(69)\nfib4.call(70)\n\
    fib4.call(71)\nfib4.call(72)\nfib4.call(73)\nfib4.call(74)\nfib4.call(75)\nfib4.call(76)\n\
    fib4.call(77)\nfib4.call(78)\nfib4.call(79)\nfib4.call(80)\nfib4.call(81)\nfib4.call(82)\n\
    fib4.call(83)\nfib4.call(84)\nfib4.call(85)\nfib4.call(86)\nfib4.call(87)\nfib4.call(88)\n\
    fib4.call(89)\n", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n\
    \  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \ end\nend", "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3]\
    \ + fib4.cache[n-4]\n  fib4.cache[n]\nend", "  case n\n  when 0\n    0\n  when\
    \ 1\n    0\n  when 2\n    2\n  when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2]\
    \ + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  case n\n  when 0\
    \ then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).", "  fib4(n-1).call(n-2).call(n-3).call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n ==\
    \ 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \ end\nend", "  case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then\
    \ 2\n    when 3 then 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n \
    \ when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend\n\
    </cell>\n<cell>", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3]\
    \ + fib4.cache[n-4]\n  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.stack[n-1] = fib4.stack[n-2] if fib4.stack[n-2] >= 0 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-3] if fib4.stack[n-3] >= 0 \n  fib4.stack[n-1] = fib4.stack[n-4]\
    \ if fib4.stack[n-4] >= 0 \n  fib4.stack[n-1] = fib4.stack[n-1] + fib4.stack[n-2]\
    \ if fib4.stack[n-2] >= 0 \n  fib4.stack[n-1] = fib4.stack[n-1] + fib4.stack[n-3]\
    \ if fib4.stack[n-3] >= 0 \n  fib4.stack[n-1] = fib4.stack[n-1] + fib4.stack[n-4]\
    \ if fib4.stack[n-4] >= 0 \n  fib4.stack[n-1] = fib4.stack[n-1] + fib4.stack[n-1]\n\
    end\nfib4.stack = Array.new\nfib4.stack[0] = fib4.stack[1] = fib4.stack[2] = fib4.stack[3]\
    \ = fib4.stack[4] = 0\nfib4.stack\n</cell>\n<cell>", "  fib4.stack[n-1] = fib4.stack[n-2]\
    \ + (fib4.stack[n-3] + (fib4.stack[n-4]))\n  fib4.stack[n-1]\nend", "  if n ==\
    \ 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n   \
    \ 0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \ end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  if\
    \ n <= 0\n    0\n  else\n    fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n\
    \ - 3) + fib4.call(n - 4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.cache[n]\
    \ ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib =\
    \ Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3] =\
    \ fib[2]\n  fib[4] = fib[3] + fib[2]\n  fib[n] = fib[n-1] + fib[n-2] + fib[n-3]\
    \ + fib[n-4]\n  fib[n]\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\nend", "  case n\n    when 0\n      0\n\
    \    when 1\n      0\n    when 2\n      2\n    when 3\n      0\n    when 4\n \
    \     fib4.call(5) + fib4.call(6) + fib4.call(7) + fib4.call(8)\n  end\nend",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n\
    \    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n\
    \    else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.memo[n]\
    \ ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\n\
    end", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n\
    \    when 3\n      0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    else\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n  end\nend", "  fib = Fib4.new\n\
    \  fib.call(Fib4.new, n)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3]\
    \ + fib4.cache[n-4]\n  fib4.cache[n]\nend", "  fib4.memo[n] ||= fib4.memo[n-1]\
    \ + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", " \
    \ fib = Array.new(n) { |i| 0 }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3]\
    \ = 3\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2]\
    \ + fib[n-3] + fib[n-4]\nend", "  fib4(n-1).call(n-2).call(n-3).call(n-4).call(n-5)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n\
    <cell>", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when\
    \ 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend",
  "  fib4.stack[n-1] = fib4.stack[n-2] + (fib4.stack[n-3] + (fib4.stack[n-4]))\n \
    \ fib4.stack[n-1]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.stack[n-1] = fib4.stack[n-2] + (fib4.stack[n-3] + (fib4.stack[n-4] or 0))\n\
    \  fib4.stack[n-1]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end\nfib4.call(5)\nfib4.call(6)\nfib4.call(7)\nfib4.call(8)\nfib4.call(9)\nfib4.call(10)\n\
    fib4.call(11)\nfib4.call(12)\nfib4.call(13)\nfib4.call(14)\nfib4.call(15)\nfib4.call(16)\n\
    fib4.call(17)\nfib4.call(18)\nfib4.call(19)\nfib4.call(20)\nfib4.call(21)\nfib4.call(22)\n\
    fib4.call(23)\nfib4.call(24)\nfib4.call(25)\nfib4.call(26)\nfib4.call(27)\nfib4.call(28)\n\
    fib4.call(29)\nfib4.call(30)\nfib4.call(31)\nfib4.call(32)\nfib4.call(33)\nfib4.call(34)\n\
    fib4.call(35)\nfib4.call(36)\nfib4.call(37)\nfib4.call(38)\nfib4.call(39)\nfib4.call(40)\n\
    fib4.call(41)\nfib4.call(42)\nfib4.call(43)\nfib4.call(44)\nfib4.call(45)\nfib4.call(46)\n\
    fib4.call(47)\nfib4.call(48)\nfib4.call(49)\nfib4.call(50)\nfib4.call(51)\nfib4.call(52)\n\
    fib4.call(53)\nfib4.call(54)\nfib4.call(55)\nfib4.call(56)\nfib4.call(57)\nfib4.call(58)\n\
    fib4.call(59)\nfib4.call(60)\nfib4.call(61)\nfib4.call(62)\nfib4.call(63)\nfib4.call(64)\n\
    fib4.call(65)\nfib4.call(66)\nfib4.call(67)\nfib4.call(68)\nfib4.call(69)\nfib4.call(70)\n\
    fib4.call(71)\nfib4.call(72)\nfib4.call(73)\nfib4.call(74)\nfib4.call(75)\nfib4.call(76)\n\
    fib4.call(77)\nfib4.call(78)\nfib4.call(79)\nfib4.call(80)\nfib4.call(81)\nfib4.call(82)\n\
    fib4.call(83)\nfib4.call(84)\nfib4.call(85)\nfib4.call(86)\nfib4.call(87)\nfib4.call(88)\n\
    fib4.call(89)\n", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  if n < 0\n    puts \"fib4 number sequence is defined\
    \ for n >= 0\"\n  elsif n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n\
    \    2\n  elsif n == 3\n    0\n  elsif n == 4\n    0\n  else\n    fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib = Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] =\
    \ 2\n  fib[3] = 3\n  fib[4] = fib[4-1] + fib[4-2] + fib[4-3] + fib[4-4]\n  fib[n-1]\
    \ = fib[n-2] + fib[n-3] + fib[n-4]\n  fib\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  case n\n\
    \  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n\
    \    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3]\
    \ + fib4.cache[n-4]\n  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n\
    \    when 3\n      0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3\
    \ then 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\n\
    end", "  fib4 = (1..n).inject(:+).to_a\n  fib4[n-1]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  case n\n    when 0\n      0\n    when 1\n      0\n \
    \   when 2\n      2\n    when 3\n      0\n    when 4\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n  end\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a recursive function fib5 that computes the n-th element of\
    \ the Fibonacci sequence using recursion.  Your function should take one argument,\
    \ n, and return the n-th element of the Fibonacci sequence.  For example, fib5.call(5)\
    \ should return 5.", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n ==\
    \ 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3\
    \ then 0\n    else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend",
  "  case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then\
    \ 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend",
  "  fib = Array.new(n) { |i| 0 }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3]\
    \ = 3\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2]\
    \ + fib[n-3] + fib[n-4]\nend", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2]\
    \ + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end\nfib4.call(5)\nfib4.call(6)\nfib4.call(7)\nfib4.call(8)\nfib4.call(9)\nfib4.call(10)\n\
    fib4.call(11)\nfib4.call(12)\nfib4.call(13)\nfib4.call(14)\nfib4.call(15)\nfib4.call(16)\n\
    fib4.call(17)\nfib4.call(18)\nfib4.call(19)\nfib4.call(20)\nfib4.call(21)\nfib4.call(22)\n\
    fib4.call(23)\nfib4.call(24)\nfib4.call(25)\nfib4.call(26)\nfib4.call(27)\nfib4.call(28)\n\
    fib4.call(29)\nfib4.call(30)\nfib4.call(31)\nfib4.call(32)\nfib4.call(33)\nfib4.call(34)\n\
    fib4.call(35)\nfib4.call(36)\nfib4.call(37)\nfib4.call(38)\nfib4.call(39)\nfib4.call(40)\n\
    fib4.call(41)\nfib4.call(42)\nfib4.call(43)\nfib4.call(44)\nfib4.call(45)\nfib4.call(46)\n\
    fib4.call(47)\nfib4.call(48)\nfib4.call(49)\nfib4.call(50)\nfib4.call(51)\nfib4.call(52)\n\
    fib4.call(53)\nfib4.call(54)\nfib4.call(55)\nfib4.call(56)\nfib4.call(57)\nfib4.call(58)\n\
    fib4.call(59)\nfib4.call(60)\nfib4.call(61)\nfib4.call(62)\nfib4.call(63)\nfib4.call(64)\n\
    fib4.call(65)\nfib4.call(66)\nfib4.call(67)\nfib4.call(68)\nfib4.call(69)\nfib4.call(70)\n\
    fib4.call(71)\nfib4.call(72)\nfib4.call(73)\nfib4.call(74)\nfib4.call(75)\nfib4.call(76)\n\
    fib4.call(77)\nfib4.call(78)\nfib4.call(79)\nfib4.call(80)\nfib4.call(81)\nfib4.call(82)\n\
    fib4.call(83)\nfib4.call(84)\nfib4.call(85)\nfib4.call(86)\nfib4.call(87)\nfib4.call(88)\n\
    fib4.call(89)\n", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n <= 0\n    0\n  elsif n <= 1\n    0\n  elsif n <= 2\n    2\n  elsif\
    \ n <= 3\n    0\n  elsif n <= 4\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n  end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib = Array.new(n)\
    \ { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3] = 3\n  fib[4]\
    \ = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2] + fib[n-3]\
    \ + fib[n-4]\n  fib\nend", "  case n\n    when 0\n      0\n    when 1\n      0\n\
    \    when 2\n      2\n    when 3\n      0\n    else\n      fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\nend", "  fib = Fib4.new\n  fib.call(n - 4)\n  fib.call(n\
    \ - 3)\n  fib.call(n - 2)\n  fib.call(n - 1)\n  fib.call(n)\nend", "  fib4 = (0..(n-4)).inject(:+).to_a\n\
    \  fib4[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.stack[n-1] = fib4.stack[n-2] + (fib4.stack[n-3] + (fib4.stack[n-4]\
    \ or 0))\n  fib4.stack[n] = fib4.stack[n-1]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib = Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] =\
    \ 2\n  fib[3] = 3\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1]\
    \ + fib[n-2] + fib[n-3] + fib[n-4]\n  fib\nend", "  case n\n  when 0 then 0\n\
    \  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when 0 then 0\n  when 1 then\
    \ 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when\
    \ 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  fib4(n-1).call(n-2).call(n-3).call(n-4)\nend", "  case n\n  when\
    \ 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3]\
    \ + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  case n\n  when 0\n    0\n  when 1\n\
    \    0\n  when 2\n    2\n  when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n    when 0\n      0\n    when\
    \ 1\n      0\n    when 2\n      2\n    when 3\n      0\n    when 4\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 5\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 6\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 7\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 8\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 9\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 10\n \
    \     fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 11\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 12\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 13\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 14\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 15\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 16\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 17\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 18\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 19\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 20\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 21\n \
    \     fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 22\n      fib4.call(n - 1) + fib4.", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n   \
    \ when 3 then 0\n    when 4 then 4\n    else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when\
    \ 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend\n</cell>\n<text>\nProblem 5\nThe Fibonacci sequence is defined by\
    \ the formula:\n$$ F_n = \\begin{cases}\n0 & \\text{if $n = 0$} \\\n1 & \\text{if\
    \ $n = 1$} \\\nF{n-1} + F{n-2} & \\text{otherwise}\n\\end{cases}$$\nwhere $F_1\
    \ = 1$ and $F_2 = 1$.\nThe first few terms of the Fibonacci sequence are 1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026\nBy iterating through the terms\
    \ in the sequence $F_n$, find the sum of the even-valued terms.\nFor example,\
    \ with $n = 3$, the sequence is 1, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \u2026\
    \nThe sum of even Fibonacci numbers is $1 + 3 + 5 + 8 + 13 + 21 + 34 + 55 + 89\
    \ + 144 + \u2026 = 55$.\nHence the sum of even Fibonacci numbers is even.\nWhat\
    \ is the sum of the first 1000 Fibonacci numbers?\nWhat is the sum of the first\
    \ 1,000 Fibonacci numbers that are even?\nWhat is the sum of the first 10,000\
    \ Fibonacci numbers?", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n ==\
    \ 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  case n\n  when 0 then 0\n  when\
    \ 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).", "  fib4 = (0..(n-1)).reduce(:+)\nend", "  case n\n    when 0\n\
    \      0\n    when 1\n      0\n    when 2\n      2\n    when 3\n      0\n    when\
    \ 4\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 5\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 6\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 7\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 8\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 9\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 10\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 11\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 12\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 13\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 14\n \
    \     fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 15\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 16\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 17\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 18\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 19\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 20\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 21\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 22\n      fib4.call(n - 1) + fib4.", "  case n\n\
    \  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1) + fib4.call(n-2)\
    \ + fib4.call(n-3) + fib4.call(n-4)\nend", "  case n\n  when 0 then 0\n  when\
    \ 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case\
    \ n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then\
    \ 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend",
  "  fib = Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3]\
    \ = 3\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2]\
    \ + fib[n-3] + fib[n-4]\n  fib\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  fib4.stack[n-1] = fib4.stack[n-2] if fib4.stack[n-2]\
    \ >= fib4.stack[n-3] else fib4.stack[n-3] + fib4.stack[n-4]\n  fib4.stack[n] =\
    \ fib4.stack[n-1]\nend\nfib4.stack = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571273,139583862445,225851433717,365435296162,591286729871,956722026041,1548008755920,2504730781961,4027552584416,6557470319842,10610209857723,17167680177566,27777890035288,4494557021285,7306754626409,117060573582508,190392490709135,308061521170124,48331569734672,76524757009742,128498648426361,195834556959503,30104498404188,52682619110959,83204396981191,134626967163081,217830452653378,35245855386739,570288641692609,922746683994155,149303550378737,2415782069711763,390881692684551,63245977173233,1023341521741865,1655801422924731,267914295939941,43349443716082,70140873362780,113490317",
  "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n\
    \  when 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n   \
    \ 2\n  elsif n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2]\
    \ + fib4.cache[n-3] + fib4.cache[n-4]\n  fib4.cache[n]\nend", "  case n\n    when\
    \ 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n    when\
    \ n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend", "  fib4.call(n-1)\
    \ + fib4.call(n-2) + fib4.call(n-3) + fib4.call(n-4)\nend", "  fib = Fib4.new\n\
    \  fib.call(n - 1)\n  fib.call(n - 2)\n  fib.call(n - 3)\n  fib.call(n - 4)\n\
    \  fib.value\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    2\n  elsif n == 3\n    0\n  elsif n == 4\n    0\n  else\n    fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4).\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.stack[n]\n  if fib4.stack[n] == nil\n    fib4.stack[n] = fib4.stack[n-1]\
    \ + fib4.stack[n-2] + fib4.stack[n-3] + fib4.stack[n-4]\n  end\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  if n == 0\n \
    \   0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n \
    \ elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend\n</cell>\n<cell>", "  case n\n  when 0 then 0\n  when 1 then\
    \ 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4 = (0..(n-4)).inject(0) do |sum, index|\n    sum + fib4(index-1)\
    \ + fib4(index-2) + fib4(index-3) + fib4(index-4)\n  end\n  fib4\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).",
  "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  if n < 0\n    raise ArgumentError, \"fib4 expects non-negative\
    \ integer\"\n  else\n    fib4.call(n-1)\n    fib4.call(n-2)\n    fib4.call(n-3)\n\
    \    fib4.call(n-4)\n  end\nend", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2]\
    \ + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end\nfib4.call(5)\nfib4.call(6)\nfib4.call(7)\nfib4.call(8)\nfib4.call(9)\nfib4.call(10)\n\
    fib4.call(11)\nfib4.call(12)\nfib4.call(13)\nfib4.call(14)\nfib4.call(15)\nfib4.call(16)\n\
    fib4.call(17)\nfib4.call(18)\nfib4.call(19)\nfib4.call(20)\nfib4.call(21)\nfib4.call(22)\n\
    fib4.call(23)\nfib4.call(24)\nfib4.call(25)\nfib4.call(26)\nfib4.call(27)\nfib4.call(28)\n\
    fib4.call(29)\nfib4.call(30)\nfib4.call(31)\nfib4.call(32)\nfib4.call(33)\nfib4.call(34)\n\
    fib4.call(35)\nfib4.call(36)\nfib4.call(37)\nfib4.call(38)\nfib4.call(39)\nfib4.call(40)\n\
    fib4.call(41)\nfib4.call(42)\nfib4.call(43)\nfib4.call(44)\nfib4.call(45)\nfib4.call(46)\n\
    fib4.call(47)\nfib4.call(48)\nfib4.call(49)\nfib4.call(50)\nfib4.call(51)\nfib4.call(52)\n\
    fib4.call(53)\nfib4.call(54)\nfib4.call(55)\nfib4.call(56)\nfib4.call(57)\nfib4.call(58)\n\
    fib4.call(59)\nfib4.call(60)\nfib4.call(61)\nfib4.call(62)\nfib4.call(63)\nfib4.call(64)\n\
    fib4.call(65)\nfib4.call(66)\nfib4.call(67)\nfib4.call(68)\nfib4.call(69)\nfib4.call(70)\n\
    fib4.call(71)\nfib4.call(72)\nfib4.call(73)\nfib4.call(74)\nfib4.call(75)\nfib4.call(76)\n\
    fib4.call(77)\nfib4.call(78)\nfib4.call(79)\nfib4.call(80)\nfib4.call(81)\nfib4.call(82)\n\
    fib4.call(83)\nfib4.call(84)\nfib4.call(85)\nfib4.call(86)\nfib4.call(87)\nfib4.call(88)\n\
    fib4.call(89)\n", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n\
    \  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n\
    \    2\n  when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).",
  "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n    when\
    \ 3\n      0\n    when 4\n      4\n    when 5\n      8\n    when 6\n      14\n\
    \    when 7\n      20\n    when 8\n      28\n    when 9\n      36\n    when 10\n\
    \      45\n    when 11\n      56\n    when 12\n      66\n    when 13\n      78\n\
    \    when 14\n      90\n    when 15\n      100\n    when 16\n      110\n    when\
    \ 17\n      122\n    when 18\n      134\n    when 19\n      145\n    when 20\n\
    \      156\n    when 21\n      168\n    when 22\n      180\n    when 23\n    \
    \  192\n    when 24\n      204\n    when 25\n      216\n    when 26\n      228\n\
    \    when 27\n      240\n    when 28\n      252\n    when 29\n      264\n    when\
    \ 30\n      276\n    when 31\n      288\n    when 32\n      300\n    when 33\n\
    \      312\n    when 34\n      324\n    when 35\n      336\n    when 36\n    \
    \  348\n    when 37\n      360\n    when 38\n      372\n    when 39\n      384\n\
    \    when 40\n      396\n    when 41\n      408\n    when 42\n      420\n    when\
    \ 43\n      432\n    when 44\n      444\n    when 45\n      456\n    when 46\n\
    \      458\n    when 47\n      460\n    when 48\n      462\n    when 49\n    \
    \  464\n    when 50\n      466\n    when 51\n      468\n    when 52\n      470\n\
    \    when 53\n      472\n    when 54\n      473\n    when 55\n      474\n    when\
    \ 56\n      475\n    when 57\n      476\n    when 58\n      477\n    when 59\n\
    \      478\n    when 60\n      479\n    when 61\n      480\n    when 62\n    \
    \  481\n    when 63\n      482\n    when 64\n      483\n    when 65\n      484\n\
    \    when 66\n      485\n    when 67\n      486\n    when 68\n      487", "  if\
    \ n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n\
    \    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4) \nend", "  case n\n    when 0\n      0\n    when 1\n      0\n    when\
    \ 2\n      2\n    when 3\n      0\n    when 4\n      4\n    when 5\n      0\n\
    \    when 6\n      8\n    when 7\n      14\n    when 8\n      0\n    when 9\n\
    \      0\n    when 10\n      0\n    when 11\n      0\n    when 12\n      0\n \
    \   when 13\n      0\n    when 14\n      0\n    when 15\n      0\n    when 16\n\
    \      0\n    when 17\n      0\n    when 18\n      0\n    when 19\n      0\n \
    \   when 20\n      0\n    when 21\n      0\n    when 22\n      0\n    when 23\n\
    \      0\n    when 24\n      0\n    when 25\n      0\n    when 26\n      0\n \
    \   when 27\n      0\n    when 28\n      0\n    when 29\n      0\n    when 30\n\
    \      0\n    when 31\n      0\n    when 32\n      0\n    when 33\n      0\n \
    \   when 34\n      0\n    when 35\n      0\n    when 36\n      0\n    when 37\n\
    \      0\n    when 38\n      0\n    when 39\n      0\n    when 40\n      0\n \
    \   when 41\n      0\n    when 42\n      0\n    when 43\n      0\n    when 44\n\
    \      0\n    when 45\n      0\n    when 46\n      0\n    when 47\n      0\n \
    \   when 48\n      0\n    when 49\n      0\n    when 50\n      0\n    when 51\n\
    \      0\n    when 52\n      0\n    when 53\n      0\n    when 54\n      0\n \
    \   when 55\n      0\n    when 56\n      0\n    when 57\n      0\n    when 58\n\
    \      0\n    when 59\n      0\n    when 60\n      0\n    when 61\n      0\n \
    \   when 62\n      0\n    when 63\n      0\n    when 64\n      0\n    when 65\n\
    \      0\n    when 66\n      0\n    when 67\n      0\n    when 68\n      0\n \
    \   when 69\n      0\n    when 70\n      0\n    when 71\n      0\n    when 72\n",
  "  case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then\
    \ 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend",
  "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
