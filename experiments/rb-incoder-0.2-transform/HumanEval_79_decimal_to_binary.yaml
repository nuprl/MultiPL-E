name: HumanEval_79_decimal_to_binary
language: rb
prompt: "# You will be given a number in decimal form and your task is to convert\
  \ it to\n# binary format. The function should return a string, with each character\
  \ representing a binary\n# number. Each character in the string will be '0' or '1'.\n\
  # There will be an extra couple of characters 'db' at the beginning and at the end\
  \ of the string.\n# The extra characters are there to help with the format.\n# Examples:\n\
  # >>> decimal_to_binary.call(15)\n# \"db1111db\"\n# >>> decimal_to_binary.call(32)\n\
  # \"db100000db\"\ndef decimal_to_binary(decimal)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
  \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
  \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
  , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\n\
  end\n"
completions: ["  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n  decimal.slice!(0...-1)\n\
    \  ", "  decimal = decimal.to_i\n  result = ''\n  while decimal != 0\n    decimal,\
    \ mod = decimal % 2, decimal / 2\n    result << (mod * '0' + '1') if (mod != 0)\n\
    \  end\n  result << 'db'\n  result\nend", "  decimal = decimal.to_i\n  result\
    \ = ''\n  while decimal > 0\n    decimal, mod = decimal / 2, decimal % 2\n   \
    \ result += '1' if mod else '0'\n  end\n  result += 'db'\n  result\nend", "  decimal\
    \ = decimal.to_i\n  binary = \"\"\n  while decimal != 0\n    binary = binary +\
    \ \"0\" if decimal % 2 == 0 else \"1\"\n    decimal = decimal / 2\n  end\n  binary\
    \ = \"db\" + binary + \"db\"\n  return binary\nend", "  decimal = decimal.to_i\n\
    \  binary = \"\"\n  while decimal != 0\n    binary = (\"0\" + binary.to_s).chr\
    \ + (\"1\" + binary.to_s).chr + (\"0\" + binary.to_s).chr\n    decimal = decimal\
    \ / 2\n  end\n  binary = (\"db\" + binary.to_s).chr + (\"db\" + binary.to_s).chr\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n  \
    \  decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  binary = \"\"\n  while decimal != 0\n  \
    \  binary = binary + \"0\" if decimal % 2 == 0 else \"1\"\n    decimal = decimal\
    \ / 2\n  end\n  binary = \"db\" + binary + \"db\"\n  return binary\nend", "  decimal\
    \ = decimal.to_i\n  binary = \"\"\n  while decimal != 0\n    binary = binary +\
    \ \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary\
    \ = binary + \"b\"\n  return binary\nend", "  decimal = decimal.to_s\n  decimal.insert(0,\
    \ \"db\")\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0,\
    \ 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n\
    \  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, 2)\n  decimal.slice!(0, ",
  "  decimal = decimal.to_s\n  decimal.insert(0, 'db')\n  decimal.insert(decimal.length,\
    \ 'db')\n  decimal.insert(decimal.length + 1, 'db')\n  decimal.insert(decimal.length\
    \ + 2, 'db')\n  decimal.insert(decimal.length + 3, 'db')\n  decimal.insert(decimal.length\
    \ + 4, 'db')\n  decimal.insert(decimal.length + 5, 'db')\n  decimal.insert(decimal.length\
    \ + 6, 'db')\n  decimal.insert(decimal.length + 7, 'db')\n  decimal.insert(decimal.length\
    \ + 8, 'db')\n  decimal.insert(decimal.length + 9, 'db')\n  decimal.insert(decimal.length\
    \ + 10, 'db')\n  decimal.insert(decimal.length + 11, 'db')\n  decimal.insert(decimal.length\
    \ + 12, 'db')\n  decimal.insert(decimal.length + 13, 'db')\n  decimal.insert(decimal.length\
    \ + 14, 'db')\n  decimal.insert(decimal.length + 15, 'db')\n  decimal.insert(decimal.length\
    \ + 16, 'db')\n  decimal.insert(decimal.length + 17, 'db')\n  decimal.insert(decimal.length\
    \ + 18, 'db')\n  decimal.insert(decimal.length + 19, 'db')\n  decimal.insert(decimal.length\
    \ + 20, 'db')\n  decimal.insert(decimal.length + 21, 'db')\n  decimal.insert(decimal.length\
    \ + 22, 'db')\n  decimal.insert(decimal.length + 23, 'db')\n  decimal.insert(decimal.length\
    \ + 24, 'db')\n  decimal.insert(decimal.length + 25, 'db')\n  decimal.insert(decimal.length\
    \ + 26, 'db')\n  decimal.insert(decimal.length + 27, 'db')\n  decimal.insert(decimal.length\
    \ + 28, 'db')\n  decimal.insert(decimal.length + 29, 'db')\n  decimal.insert(decimal.length\
    \ + 30, 'db')\n  decimal.insert(decimal.length + 31, 'db')\n  decimal.insert(decimal.length\
    \ + 32, 'db')\n  decimal.insert(decimal.length + 33, 'db')\n  decimal.insert(decimal.length\
    \ + 34, 'db')\n  decimal.insert(decimal.length + 35, 'db')\n  decimal.insert(decimal.length\
    \ + 36, 'db')\n  decimal.insert(decimal.length + 37, 'db')\n  decimal.insert(decimal.length\
    \ + 38, 'db')\n  decimal.insert(decimal.length + 39, 'db')\n  decimal.insert(decimal.length\
    \ + 40, 'db')\n  decimal.insert(decimal.length + 41, 'db')\n  decimal", "  binary\
    \ = \"\"\n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  binary =\
    \ binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = binary + \"b\"\n  binary = binary + \"b\"\n  binary\
    \ = binary + \"b\"\n  binary = ", "  decimal = decimal.to_i\n  binary = \"\"\n\
    \  while decimal != 0\n    binary = binary + \"0\" if decimal % 2 == 0 else binary\
    \ + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary + \"db\"\n  return\
    \ binary\nend", "  decimal = decimal.to_i\n  result = ''\n  while decimal != 0\n\
    \    result += (decimal % 2).to_s\n    decimal = decimal / 2\n  end\n  result\
    \ += 'db'\n  result\nend", "  decimal = decimal.to_s\n  decimal.insert(0, \"db\"\
    )\n  decimal.insert(decimal.length, \"db\")\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n\
    \  decimal.slice!(decimal.length)\n  decimal.slice!(decimal.length)\n  ", "  decimal\
    \ = decimal.to_i\n  binary = \"\"\n  while decimal != 0\n    binary = binary +\
    \ \"0\"\n    decimal = decimal - 1\n  end\n  binary = binary + \"1\"\n  binary\
    \ = binary.reverse\n  binary = binary.insert(0, \"db\")\n  binary = binary.insert(binary.length,\
    \ \"db\")\n  return binary\nend", "  decimal = decimal.to_i\n  binary_string =\
    \ \"\"\n  while decimal > 0\n    binary_string += \"0\"\n    decimal -= 1\n  end\n\
    \  while decimal > 0\n    binary_string += \"1\"\n    decimal -= 1\n  end\n  binary_string\
    \ = \"db\" + binary_string\n  return binary_string\nend", "  decimal = decimal.to_i\n\
    \  result = ''\n  while decimal != 0\n    decimal, mod = decimal % 2, decimal\
    \ / 2\n    result += (mod % 2) + '0'\n  end\n  result = 'db' + result\n  result\n\
    end", "  binary = \"\"\n  while decimal != 0\n    binary = binary + \"0\" if decimal\
    \ % 2 == 0 else binary + \"1\"\n    decimal = decimal / 2\n  end\n  binary = binary\
    \ + \"db\"\n  return binary\nend", "  decimal = decimal.to_i\n  result = ''\n\
    \  while decimal > 0\n    decimal, mod = decimal / 2, decimal % 2\n    result\
    \ << mod ? '1' : '0'\n  end\n  result << 'db'\n  result\nend", "  binary = \"\"\
    \n  while decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n\
    \  end\n  binary = binary + \"1\"\n  binary = binary + \"b\"\n  return binary\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
