name: HumanEval_97_multiply
language: rb
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>>\
  \ multiply.call(148, 412)\n# 16\n# >>> multiply.call(19, 28)\n# 72\n# >>> multiply.call(2020,\
  \ 1851)\n# 0\n# >>> multiply.call(14, -15)\n# 20\ndef multiply(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n\
  \    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n\
  \    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020,\
  \ 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76,\
  \ 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0,\
  \ 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n"
completions: ["  \n  # TODO: Write code here\n  return 0\nend", "  \n  # Your code\
    \ here\n  return a * b\nend", "  \n  # Your code here\n  \nend", "  \n  # TODO:\
    \ Write your code here\n  return 0\nend", "  \n  # TODO: Write your code here\n\
    \  return 0\nend", "  \n  # TODO: Write your code here\n  return 0\nend", "  \n\
    \  # Your code here\n  \n  return 0\nend", "  \n  # Your code here\n  \nend",
  "  \n  # Your code here\n  \nend", "  \n  # TODO: Write your code here\n  return\
    \ 0\nend", "  \n  # TODO: Write your code here\n  return 0\nend", "  \n  # Your\
    \ code here\n  \nend", "  \n  # Your code here\n  \nend", "  \n  # Your code here\n\
    \  \nend", "  \n  # Your code here\n  return 0\nend", "  \n  # Your code here\n\
    \  \nend\n</cell>\n<cell>", "  \n  # TODO: Write your code here\n  \nend", " \
    \ \n  # Your code here\n  return 0\nend", "  \n  # TODO: Write your code here\n\
    \  return 0\nend", "  \n  # Your code here\n  \nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
