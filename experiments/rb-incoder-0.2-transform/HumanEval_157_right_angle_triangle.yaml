name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
  \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["  \n  # Write your code here.\n  return ((b - a) * (c - b)) <= 0\n\
    end", "  return (b**2 + c**2) - (4*a*c)**2 <= 0\nend", "  triangle_sides = [a,\
    \ b, c]\n  triangle_sides.sort!\n  \n  triangle_sides.each do |side|\n    if side\
    \ > 0 && side < triangle_sides.last\n      return false\n    end\n  end\n  \n\
    \  return true\nend", "  triangle_sides = (a+b+c)/2\n  triangle_sides_2 = (a*a+b*b+c*c)/2\n\
    \  triangle_sides_3 = (b*b+c*c)/2\n  return triangle_sides_2 > triangle_sides_3\n\
    end", "  ab = ab_of_triangle(a, b, c) # ab = ab_of_triangle(a, b, c) \n  ac =\
    \ ac_of_triangle(a, b, c) # ac = ac_of_triangle(a, b, c) \n  \n  ab_ac = ab +\
    \ ac # ab_ac = ab + ac\n  \n  ab_ac = ab_ac.to_i\n  \n  if ab_ac % 2 == 0 # if\
    \ ab_ac is even\n    ab_ac = ab_ac / 2 # ab_ac = ab_ac / 2\n  else\n    ab_ac\
    \ = ab_ac / 2 # ab_ac = ab_ac / 2\n  end\n  \n  ab_ac = ab_ac.to_i\n  \n  if ab_ac\
    \ % 2 == 0 # if ab_ac is even\n    ab_ac = ab_ac / 2 # ab_ac = ab_ac / 2\n  else\n\
    \    ab_ac = ab_ac / 2 # ab_ac = ab_ac / 2\n  end\n  \n  ab_ac = ab_ac.to_i\n\
    \  \n  if ab_ac % 2 == 0 # if ab_ac is even\n    ab_ac = ab_ac / 2 # ab_ac = ab_ac\
    \ / 2\n  else\n    ab_ac = ab_ac / 2 # ab_ac = ab_ac / 2\n  end\n  \n  ab_ac =\
    \ ab_ac.to_i\n  \n  if ab_ac % 2 == 0 # if ab_ac is even\n    ab_ac = ab_ac /\
    \ 2 # ab_ac = ab_ac / 2\n  else\n    ab_ac = ab_ac / 2 # ab_ac = ab_ac / 2\n \
    \ end\n  \n  ab_ac = ab_ac.to_i\n  \n  if ab_ac % 2 == 0 # if ab_ac is even\n\
    \    ab_ac = ab_ac / 2 # ab_ac = ab_ac / 2\n  else\n    ab_ac = ab_ac / 2 # ab_ac\
    \ = ab_ac / 2\n  end\n  \n  ab_ac = ab_ac.to_i\n  \n  if ab_ac % 2 == 0 # if ab_ac\
    \ is even\n    ab_ac = ab_ac / 2 # ab_ac = ab_ac / 2\n  else\n    ab_ac = ab_ac\
    \ / 2 # ab_ac = ab", "  triangle_sides = a + b + c\n  \n  if triangle_sides ==\
    \ 0 \n    true\n  elsif triangle_sides == 1\n    false\n  elsif triangle_sides\
    \ == 2\n    true\n  elsif triangle_sides == 3\n    true\n  elsif triangle_sides\
    \ == 4\n    true\n  elsif triangle_sides == 5\n    true\n  elsif triangle_sides\
    \ == 6\n    true\n  elsif triangle_sides == 7\n    true\n  elsif triangle_sides\
    \ == 8\n    true\n  elsif triangle_sides == 9\n    true\n  elsif triangle_sides\
    \ == 10\n    true\n  elsif triangle_sides == 11\n    true\n  elsif triangle_sides\
    \ == 12\n    true\n  elsif triangle_sides == 13\n    true\n  elsif triangle_sides\
    \ == 14\n    true\n  elsif triangle_sides == 15\n    true\n  elsif triangle_sides\
    \ == 16\n    true\n  elsif triangle_sides == 17\n    true\n  elsif triangle_sides\
    \ == 18\n    true\n  elsif triangle_sides == 19\n    true\n  elsif triangle_sides\
    \ == 20\n    true\n  elsif triangle_sides == 21\n    true\n  elsif triangle_sides\
    \ == 22\n    true\n  elsif triangle_sides == 23\n    true\n  elsif triangle_sides\
    \ == 24\n    true\n  elsif triangle_sides == 25\n    true\n  elsif triangle_sides\
    \ == 26\n    true\n  elsif triangle_sides == 27\n    true\n  elsif triangle_sides\
    \ == 28\n    true\n  elsif triangle_sides == 29\n    true\n  elsif triangle_sides\
    \ == 30\n    true\n  elsif triangle_sides == 31\n    true\n  elsif triangle_sides\
    \ == 32\n    true\n  elsif triangle_sides == 33\n    true\n  elsif triangle_sides\
    \ == 34\n    true\n  elsif triangle_sides == 35\n    true\n  elsif triangle_sides\
    \ == 36\n    true\n  elsif triangle_sides == 37\n    true\n  elsif triangle_sides\
    \ == 38", "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "  return (b ** 2 + c ** 2) **\
    \ .5 == (a ** 2 + b ** 2) ** .5\nend", "  ab = abs(b - a)\n  ac = abs(c - a)\n\
    \  return ab == ac or ab == (b + c) / 2\nend", "  \n  \n  # Write your code here.\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  ", "  ab = abs(b - a)\n  ac = abs(c - a)\n  \n  if(ab > ac)\n\
    \    abc = ab\n  else\n    abc = ac\n  \n  if(abc > ab)\n    true\n  else\n  \
    \  false\nend", "  ab = abs(b - a)\n  ac = abs(c - a)\n  \n  if ab == ac\n   \
    \ return (b > a) or (c > a)\n  else\n    return ab > ac\n  end\nend", "  \n  return\
    \ ((b**2) - (4 * a * c)) < 0\nend", "  triangle_sides = a + b + c\n  triangle_sides.odd?\
    \ or triangle_sides.even?\nend", "  ab = abs(b - a)\n  ac = abs(c - a)\n  \n \
    \ if ab == ac\n    return true\n  \n  abc = ab + ac\n  \n  return abc > ab\nend",
  "  ab = abs(b - a)\n  ac = abs(c - a)\n  \n  if ab == ac\n    return b > a\n  \n\
    \  return ab > ac\nend", "  triangle_sides = a + b + c\n  \n  if(triangle_sides\
    \ == 0)\n    return false\n  \n  if(triangle_sides == 1)\n    return true\n  \n\
    \  if(triangle_sides == 2)\n    return true\n  \n  if(triangle_sides == 3)\n \
    \   return true\n  \n  if(triangle_sides == 4)\n    return true\n  \n  if(triangle_sides\
    \ == 5)\n    return true\n  \n  if(triangle_sides == 6)\n    return true\n  \n\
    \  if(triangle_sides == 7)\n    return true\n  \n  if(triangle_sides == 8)\n \
    \   return true\n  \n  if(triangle_sides == 9)\n    return true\n  \n  if(triangle_sides\
    \ == 10)\n    return true\n  \n  if(triangle_sides == 11)\n    return true\n \
    \ \n  if(triangle_sides == 12)\n    return true\n  \n  if(triangle_sides == 13)\n\
    \    return true\n  \n  if(triangle_sides == 14)\n    return true\n  \n  if(triangle_sides\
    \ == 15)\n    return true\n  \n  if(triangle_sides == 16)\n    return true\n \
    \ \n  if(triangle_sides == 17)\n    return true\n  \n  if(triangle_sides == 18)\n\
    \    return true\n  \n  if(triangle_sides == 19)\n    return true\n  \n  if(triangle_sides\
    \ == 20)\n    return true\n  \n  if(triangle_sides == 21)\n    return true\n \
    \ \n  if(triangle_sides == 22)\n    return true\n  \n  if(triangle_sides == 23)\n\
    \    return true\n  \n  if(triangle_sides == 24)\n    return true\n  \n  if(triangle_sides\
    \ == 25)\n    return true\n  \n  if(triangle_sides == 26)\n    return true\n \
    \ \n  if(triangle_sides == 27)\n    return true\n  \n  if(triangle_sides == 28)\n\
    \    return true\n  \n  if(triangle_sides == 29)\n    return true\n  \n  if(triangle_sides\
    \ == 30)\n    return true\n  \n  if(triangle_sides == 31)\n    return true\n \
    \ \n  if(triangle_sides == 32)\n    return true\n  \n  if(triangle_sides == 33)\n\
    \    return true\n  \n  if(triangle_sides == 34)\n    return true\n  \n  if(triangle_sides\
    \ == 35)\n    return true\n  \n  if(triangle_sides == 36)\n    return true\n \
    \ \n  if(triangle_sides == 37)", "  ab = ab_of_triangle(a, b, c)\n  ac = ac_of_triangle(a,\
    \ b, c)\n  ad = ad_of_triangle(a, b, c)\n  \n  ab_ac = ab_of_triangle(ab, ac)\n\
    \  ab_ad = ab_of_triangle(ab, ad)\n  ac_ad = ac_of_triangle(ac, ad)\n  \n  ab_ac\
    \ = ab_of_triangle(ab_ac, ab_ad)\n  ab_ac = ab_of_triangle(ab_ac, ac_ad)\n  ab_ac\
    \ = ab_of_triangle(ab_ac, ab_ad)\n  \n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n\
    \  ab_ac = ab_of_triangle(ab_ac, ac_ad)\n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n\
    \  \n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n  ab_ac = ab_of_triangle(ab_ac, ac_ad)\n\
    \  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n  \n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n\
    \  ab_ac = ab_of_triangle(ab_ac, ac_ad)\n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n\
    \  \n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n  ab_ac = ab_of_triangle(ab_ac, ac_ad)\n\
    \  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n  \n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n\
    \  ab_ac = ab_of_triangle(ab_ac, ac_ad)\n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n\
    \  \n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n  ab_ac = ab_of_triangle(ab_ac, ac_ad)\n\
    \  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n  \n  ab_ac = ab_of_triangle(ab_ac, ab_ad)\n\
    \  ab_ac = ab_of_triangle(ab_", "  ab = abs(b - a)\n  ac = abs(c - a)\n  return\
    \ ab == ac or ab == (a + b + c) / 2\nend", "  ab = abs(b - a)\n  ac = abs(c -\
    \ a)\n  return ab == ac or ab == (a + b + c) / 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
