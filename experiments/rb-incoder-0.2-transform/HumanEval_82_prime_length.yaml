name: HumanEval_82_prime_length
language: rb
prompt: "# Write a function that takes a string and returns True if the string\n#\
  \ length is a prime number or False otherwise\n# Examples\n# >>> prime_length.call(\"\
  Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"\
  kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n\
  \    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"\
  Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true,\
  \ candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"\
  ))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"\
  world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true,\
  \ candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true,\
  \ candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false,\
  \ candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"\
  ))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"\
  M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n"
completions: ["  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i,\
    \ '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n\
    \  string.gsub(/[^a-z]/i, '')\n  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n\
    \  string.downcase!\n  string.", "  string.gsub(/[^\\d]/,\"\").length == string.gsub(/[^\\\
    d]/,\"\").to_s.length\nend", "  string.chars.all? { |c| c.prime? }\nend", "  string.split(\"\
    \").each do |char|\n    next if char.upcase == char\n    next if char.downcase\
    \ == char\n    next if char == char.upcase\n    next if char == char.downcase\n\
    \    next if char == char.upcase.downcase\n    next if char == char.upcase.upcase\n\
    \    next if char == char.upcase.downcase.upcase\n    next if char == char.upcase.downcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase\n    next if char == char.upcase.upcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.upcase\n    next if\
    \ char == char.upcase.upcase.downcase.downcase.downcase.upcase\n    next if char\
    \ == char.upcase.upcase.downcase.downcase.downcase.downcase.upcase\n    next if\
    \ char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.upcase\n\
    \    next if char == char.upcase.upcase.downcase.downcase.downcase.downcase.downcase.downcase.downcase.down",
  "  string.split(//).each do |char|\n    if char.length % 2 == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  string.split(\"\").each do |char|\n \
    \   next if char.upcase == char\n    next if char.downcase == char\n    next if\
    \ char.upcase == \"A\" && char.downcase == \"Z\"\n    next if char.upcase == \"\
    a\" && char.downcase == \"z\"\n    next if char.upcase == \"0\" && !char.downcase.include?(\"\
    0\")\n    next if char.downcase == \"0\" && !char.upcase.include?(\"0\")\n   \
    \ next if char.upcase == \"1\" && !char.downcase.include?(\"1\")\n    next if\
    \ char.downcase == \"1\" && !char.upcase.include?(\"1\")\n    next if char.upcase\
    \ == \"2\" && !char.downcase.include?(\"2\")\n    next if char.downcase == \"\
    2\" && !char.upcase.include?(\"2\")\n    next if char.upcase == \"3\" && !char.downcase.include?(\"\
    3\")\n    next if char.downcase == \"3\" && !char.upcase.include?(\"3\")\n   \
    \ next if char.upcase == \"4\" && !char.downcase.include?(\"4\")\n    next if\
    \ char.downcase == \"4\" && !char.upcase.include?(\"4\")\n    next if char.upcase\
    \ == \"5\" && !char.downcase.include?(\"5\")\n    next if char.downcase == \"\
    5\" && !char.upcase.include?(\"5\")\n    next if char.upcase == \"6\" && !char.downcase.include?(\"\
    6\")\n    next if char.downcase == \"6\" && !char.upcase.include?(\"6\")\n   \
    \ next if char.upcase == \"7\" && !char.downcase.include?(\"7\")\n    next if\
    \ char.downcase == \"7\" && !char.upcase.include?(\"7\")\n    next if char.upcase\
    \ == \"8\" && !char.downcase.include?(\"8\")\n    next if char.downcase == \"\
    8\" && !char.upcase.include?(\"8\")\n    next if char.upcase == \"9\" && !char.downcase.include?(\"\
    9\")\n    next if char.downcase == \"9\" && !char.upcase.include?(\"9\")\n   \
    \ next if char.upcase == \"0\" && !char.downcase.include?(\"0\")\n    next if\
    \ char.downcase == \"0\" && !char.upcase.include?(\"0\")\n    next if char.up",
  "  string.chars.each do |char|\n    if char.prime?\n      return true\n    end\n\
    \  end\n  return false\nend", "  string.split(\"\").each do |char|\n    if char.prime?\n\
    \      return true\n    end\n  end\n  return false\nend", "  string.gsub(/[^a-z]/i,\
    \ '').length == string.length\nend", "  string.split(\"\").each do |char|\n  \
    \  if char.prime?\n      return true\n    end\n  end\n  return false\nend", " \
    \ string.split(\"\").each do |char|\n    if char.prime?\n      return true\n \
    \   end\n  end\n  return false\nend", "  string.each_char.with_index do |char,\
    \ index|\n    next if index == 0\n    next if char == \"\\n\"\n    next if char\
    \ == \"\\r\"\n    next if char == \"\\t\"\n    next if char == \"\\v\"\n    next\
    \ if char == \"\\b\"\n    next if char == \"\\f\"\n    next if char == \"\\a\"\
    \n    next if char == \"\\e\"\n    next if char == \"\\o\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\f\"\n    next if char == \"\\n\"\n    next\
    \ if char == \"\\r\"\n    next if char == \"\\t\"\n    next if char == \"\\v\"\
    \n    next if char == \"\\b\"\n    next if char == \"\\f\"\n    next if char ==\
    \ \"\\a\"\n    next if char == \"\\e\"\n    next if char == \"\\o\"\n    next\
    \ if char == \"\\v\"\n    next if char == \"\\f\"\n    next if char == \"\\n\"\
    \n    next if char == \"\\r\"\n    next if char == \"\\t\"\n    next if char ==\
    \ \"\\v\"\n    next if char == \"\\b\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\a\"\n    next if char == \"\\e\"\n    next if char == \"\\o\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\f\"\n    next if char ==\
    \ \"\\n\"\n    next if char == \"\\r\"\n    next if char == \"\\t\"\n    next\
    \ if char == \"\\v\"\n    next if char == \"\\b\"\n    next if char == \"\\f\"\
    \n    next if char == \"\\a\"\n    next if char == \"\\e\"\n    next if char ==\
    \ \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\n\"\n    next if char == \"\\r\"\n    next if char == \"\\t\"\
    \n    next if char == \"\\v\"\n    next if char == \"\\b\"\n    next if char ==\
    \ \"\\f\"\n    next if char == \"\\a\"\n    next if char == \"\\e\"\n    next\
    \ if char == \"\\o\"\n    next if char == \"\\v\"\n    next if char == \"\\f\"\
    \n    next if char == \"\\n\"\n    next if char == \"\\r\"\n    next if char ==\
    \ \"\\t\"\n    next if char == \"\\v\"\n    next if char == \"\\b", "  string.split(//).each\
    \ do |char|\n    if char.prime?\n      return true\n    end\n  end\n  return false\n\
    end", "  string.split(//).each do |char|\n    if char.length % 2 == 0\n      return\
    \ false if char.length == 2\n    end\n  end\n  return true\nend", "  string.split(\"\
    \").each do |char|\n    next if char == \"#\"\n    next if char == \"-\"\n   \
    \ next if char == \"/\"\n    next if char == \"\\\\\"\n    next if char == \"\
    *\"\n    next if char == \"(\"\n    next if char == \")\"\n    next if char ==\
    \ \"[\"\n    next if char == \"]\"\n    next if char == \"{\"\n    next if char\
    \ == \"}\"\n    next if char == \"[\"\n    next if char == \"]\"\n    next if\
    \ char == \"(\"\n    next if char == \")\"\n    next if char == \"[\"\n    next\
    \ if char == \"]\"\n    next if char == \"{\"\n    next if char == \"}\"\n   \
    \ next if char == \"[\"\n    next if char == \"]\"\n    next if char == \"(\"\n\
    \    next if char == \")\"\n    next if char == \"[\"\n    next if char == \"\
    ]\"\n    next if char == \"{\"\n    next if char == \"}\"\n    next if char ==\
    \ \"[\"\n    next if char == \"]\"\n    next if char == \"(\"\n    next if char\
    \ == \")\"\n    next if char == \"[\"\n    next if char == \"]\"\n    next if\
    \ char == \"{\"\n    next if char == \"}\"\n    next if char == \"[\"\n    next\
    \ if char == \"]\"\n    next if char == \"(\"\n    next if char == \")\"\n   \
    \ next if char == \"[\"\n    next if char == \"]\"\n    next if char == \"{\"\n\
    \    next if char == \"}\"\n    next if char == \"[\"\n    next if char == \"\
    ]\"\n    next if char == \"(\"\n    next if char == \")\"\n    next if char ==\
    \ \"[\"\n    next if char == \"]\"\n    next if char == \"{\"\n    next if char\
    \ == \"}\"\n    next if char == \"[\"\n    next if char == \"]\"\n    next if\
    \ char == \"(\"\n    next if char == \")\"\n    next if char == \"[\"\n    next\
    \ if char == \"]\"\n    next if char == \"{\"\n    next if char == \"}\"\n   \
    \ next if char == \"[\"\n    next if char == \"]\"\n    next if char == \"(\"\n\
    \    next if char == \")\"\n    next if char == \"[\"\n    next if char == \"\
    ]\"\n    next if char == \"{\"\n    next if char == \"}\"\n    next if char ==\
    \ \"[\"\n    next ", "  string.split(\"\").each do |char|\n    if char.prime?\n\
    \      return true\n    end\n  end\n  return false\nend", "  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[^a-z",
  "  string.to_s.length.prime?\nend", "  string.to_s.length.prime?\nend", "  string.split(\"\
    \").each do |char|\n    if char.prime?\n      return true\n    end\n  end\n  return\
    \ false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
