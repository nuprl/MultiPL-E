name: HumanEval_12_longest
language: rb
prompt: "# Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return None in case the input\
  \ list is empty.\n# >>> longest.call([])\n# nil\n# >>> longest.call([\"a\", \"b\"\
  , \"c\"])\n# \"a\"\n# >>> longest.call([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\ndef\
  \ longest(strings)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_longest\n\
  \    candidate = method(:longest)\n    assert_equal(nil, candidate.call([]))\n \
  \   assert_equal(\"x\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"\
  zzzz\", candidate.call([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]))\n\
  \  end\nend\n"
completions: ["  strings.reduce(:max) do |max, string|\n    max ? max.length < string.length\
    \ ? max : string : nil\n  end\nend", "  strings.sort.last\nend", "  return strings.sort.last.size\
    \ if strings.size > 0\n  nil\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  return strings.sort.last.empty?\
    \ ? nil : strings.sort.last\nend", "  strings.sort.last\nend", "  return strings.max_by\
    \ { |s| s.length } if strings.any?\n  nil\nend", "  return strings.max_by(&:length)\
    \ if strings.any?\n  nil\nend", "  return strings.max_by { |s| s.length } if strings.any?\n\
    \  nil\nend", "  return strings.max_by(&:length) if strings.any?\n  nil\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\nend",
  "  strings.sort.last\nend", "  return strings.max_by(&:length) if strings.any?\n\
    \  nil\nend", "  strings.reduce(:max) do |max, string|\n    max ? max.length <\
    \ string.length ? max : string : nil\n  end\nend", "  strings.sort.last\nend",
  "  return strings.max_by { |s| s.length } if strings.any?\n  nil\nend", "  return\
    \ strings.sort.last.compact if strings.any? && strings.size > 1\n  strings.first\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  return strings.max_by { |s| s.length } if strings.any?\n  nil\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  return strings.sort.last.empty?\
    \ ? nil : strings.sort.last\nend", "  strings.max_by(&:length)\nend", "  strings.sort.last\n\
    end", "  return strings.max_by { |s| s.length } if strings.any?\n  nil\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  return strings.max_by\
    \ { |s| s.length } if strings.length > 0\n  nil\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  return strings.max_by { |s| s.length } if\
    \ strings.any?\n  nil\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  return strings.max_by { |s| s.length } if strings.any?\n  nil\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  return strings.max_by\
    \ { |s| s.length } if strings.any?\n  nil\nend", "  strings.sort.last\nend", " \
    \ return strings.max_by(&:length) if strings.any?\n  nil\nend", "  strings.sort.last\n\
    end", "  return strings.sort.last.nil? ? nil : strings.sort.last\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
