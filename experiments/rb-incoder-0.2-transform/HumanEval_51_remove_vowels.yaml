name: HumanEval_51_remove_vowels
language: rb
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels.call(\"\")\n# \"\"\n# >>> remove_vowels.call(\"abcdef\"\
  )\n# \"bcdf\"\n# >>> remove_vowels.call(\"aaaaa\")\n# \"\"\n# >>> remove_vowels.call(\"\
  aaBAA\")\n# \"B\"\n# >>> remove_vowels.call(\"zbcd\")\n# \"zbcd\"\ndef remove_vowels(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n\
  \    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n\
  \    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\",\
  \ candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"\
  ))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\"\
  , candidate.call(\"ybcd\"))\n  end\nend\n"
completions: ["  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend",
  "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend\n</cell>\n<cell>", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend\n</cell>\n<cell>", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend\n</cell>\n<cell>", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThe `gsub` method doesn't modify\
    \ the original string. It returns a new string with the modifications.\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I've edited my answer to reflect\
    \ that.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"aBcD\". It will remove all vowels, not just\
    \ the ones at the beginning of the string.\n<|/ c |>\n<| c |>\n: Yes, I noticed\
    \ that and fixed it. I also added a link to the Ruby docs for `String#gsub`.\n\
    <|/ c |>\n<| c |>\n: I added a link to the Ruby docs for `String#gsub` as well.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend\n</cell>\n<cell>", "  text.gsub(/[aeiou]/, '')\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
