name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0,\
  \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game,\
  \ guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["  guess = guess.sort\n  game = game.sort\n  result = []\n  i = 0\n\
    \  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess\
    \ == game\n      result[i] = 0\n    else\n      result[i] = abs(guess - game)\n\
    \    end\n    i += 1\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each do |i|\n\
    \    game[i] = 0\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |i|\n    game[i] = game[i] + (guess[i]\
    \ - game[i])\n  end\n  guesses.each do |", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  games = Array.new(game.length)\n  games.each\
    \ do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  guesses.each do |i|\n\
    \    guesses[i] = guess[i] if guess[i] != 0\n  end\n  guesses.each do |i|\n  \
    \  games.each do |j|\n      games[j] = games[j] if games[j] != 0\n    end\n  \
    \  guesses[i] = guess[i] - games[i]\n  end\n  guesses.each do |i|\n    games.each\
    \ do |j|\n      games[j] = games[j] if games[j] != 0\n    end\n    guesses[i]\
    \ = guess[i] - games[i]\n  end\n  guesses.each do |i|\n    games.each do |j|\n\
    \      games[j] = games[j] if games[j] != 0\n    end\n    guesses[i] = guess[i]\
    \ - games[i]\n  end\n  guesses.each do |i|\n    games.each do |j|\n      games[j]\
    \ = games[j] if games[j] != 0\n    end\n    guesses[i] = guess[i] - games[i]\n\
    \  end\n  guesses.each do |i|\n    games.each do |j|\n      games[j] = games[j]\
    \ if games[j] != 0\n    end\n    guesses[i] = guess[i] - games[i]\n  end\n  guesses.each\
    \ do |i|\n    games.each do |j|\n      games[j] = games[j] if games[j] != 0\n\
    \    end\n    guesses[i] = guess[i] - games[i]\n  end\n  guesses.each do |i|\n\
    \    games.each do |j|\n      games[j] = games[j] if games[j] != 0\n    end\n\
    \    guesses[i] = guess[i] - games[i]\n  end\n  guesses.each do |i|\n    games.each\
    \ do |j|\n      games[j] = games[j] if games[j] != 0\n    end\n    guesses[i]\
    \ = guess[i] - games[i]\n  end\n  guesses.each do |i|\n    games.each do |j|\n\
    \      games[j] = games[j] if games[j] != 0\n    end\n    guesses[i] = guess[i]\
    \ - games[i]\n  end\n  guesses.each do |i|\n    games.each do |j|\n      games[j]\
    \ = games[j] if games[j] != 0\n    end\n    guesses[i] = guess[i] - games[i]\n\
    \  end\n  guesses.each do |", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  game.each_with_index do |score, index|\n    guess = guess[index]\n \
    \   if guess == score\n      result << 0\n    elsif guess > score\n      result\
    \ << guess - score\n    else\n      result << guess + score\n    end\n  end\n\
    \  result\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your\
    \ solution works perfectly for me. I am still trying to understand why my code\
    \ didn't work. I am still trying to understand Ruby better. Thanks again.\n<|/\
    \ c |>\n<| c |>\nI added some comments to my answer, hopefully that helps.\n<|/\
    \ c |>\n<| a tags=ruby,arrays |>\n<code>", "  game = game.dup\n  guess = guess.dup\n\
    \  game.each_with_index do |score, index|\n    guess[index] = 0 if guess[index]\
    \ == score\n    guess[index] = guess[index] - score if guess[index] > score\n\
    \  end\n  guess = guess.dup\n  game.each_with_index do |score, index|\n    guess[index]\
    \ = 0 if guess[index] == score\n    guess[index] = guess[index] - score if guess[index]\
    \ < score\n  end\n  game\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i]\
    \ = game[i] - guess[i]\n  end\n  guesses.select { |i| guess[i] < 0 }.map { |i|\
    \ -guess[i] }\nend\n</cell>\n<cell>", "  game = game.dup\n  guess = guess.dup\n\
    \  game.each_with_index do |score, index|\n    guess[index] = 0 if guess[index]\
    \ == score\n    guess[index] = guess[index] - score if guess[index] > score\n\
    \    guess[index] = guess[index] + score if guess[index] < score\n  end\n  guess[game.size..-1]\n\
    end", "  game = game.dup\n  guess = guess.dup\n  game.sort!\n  guess.sort!\n \
    \ result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ && guess[j] == game[j]\n      j += 1\n    guess = guess[0...j]\n    game = game[0...j]\n\
    \    guess = guess.dup\n    guess = guess.sort!\n    game = game.sort!\n    result.push(guess.length\
    \ - game.length)\n    i = j\n  end\n  result\nend", "  game = game.dup\n  guess\
    \ = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each\
    \ do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each do |i|\n\
    \    if guesses[i] > 0\n      guesses[i] = guesses[i]\n    else\n      guesses[i]\
    \ = -guesses[i]\n    end\n  end\n  guesses\nend", "  game = game.dup\n  guess\
    \ = guess.dup\n  guesses = []\n  scores = []\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  guesses.each_with_index\
    \ do |guess, index|\n    score = scores[index]\n    if guess == score\n      guesses[index]\
    \ = 0\n    else\n      guesses[index] = abs(guess - score)\n    end\n  end\n \
    \ guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each_with_index do |guess, index|\n    game[index]\
    \ == guess[index] ? guesses[index] = 0 : guesses[index] = abs(game[index] - guess[index])\n\
    \  end\n  guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses =\
    \ Array.new(guess.length, guess)\n  scores = Array.new(guess.length, game)\n \
    \ guesses.each_with_index do |guess, i|\n    scores[i] = guesses.count(guess)\n\
    \  end\n  scores.each_with_index do |score, i|\n    scores[i] = score if guesses.count(guess[i])\
    \ == 0\n  end\n  scores.each_with_index do |score, i|\n    scores[i] = score if\
    \ guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index do |score, i|\n\
    \    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index\
    \ do |score, i|\n    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n\
    \  scores.each_with_index do |score, i|\n    scores[i] = score if guesses.count(guess[i])\
    \ > 0\n  end\n  scores.each_with_index do |score, i|\n    scores[i] = score if\
    \ guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index do |score, i|\n\
    \    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index\
    \ do |score, i|\n    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n\
    \  scores.each_with_index do |score, i|\n    scores[i] = score if guesses.count(guess[i])\
    \ > 0\n  end\n  scores.each_with_index do |score, i|\n    scores[i] = score if\
    \ guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index do |score, i|\n\
    \    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index\
    \ do |score, i|\n    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n\
    \  scores.each_with_index do |score, i|\n    scores[i] = score if guesses.count(guess[i])\
    \ > 0\n  end\n  scores.each_with_index do |score, i|\n    scores[i] = score if\
    \ guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index do |score, i|\n\
    \    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n  scores.each_with_index\
    \ do |score, i|\n    scores[i] = score if guesses.count(guess[i]) > 0\n  end\n\
    \  scores.each_with_index do |score, i|\n    scores[i] = score if guesses.count(guess[i])\
    \ > 0\n  end\n  scores.each_with_index do |score, i", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n\
    \    while j < guess.length and guess[j] == game[i]\n      j += 1\n    if j ==\
    \ guess.length\n      result << 0\n      i += 1\n      break\n    result << (guess[j]\
    \ - game[i]).abs\n    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess =\
    \ guess[i]\n    game = game[i]\n    if guess == game\n      result[i] = 0\n  \
    \  else\n      result[i] = abs(guess - game)\n    i += 1\n  end\n  result\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ score = 0\n  guesses.each do |i|\n    guesses[i] = game[i] if game[i] != 0\n\
    \  end\n  guesses.each do |i|\n    guesses[i] = guess[i] - guesses[i] + game[i]\
    \ if guess[i] != 0\n  end\n  guesses.each do |i|\n    guesses[i] = guess[i] -\
    \ guesses[i] + game[i] if guess[i] != 0\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i] - guesses[i] + game[i] if guess[i] != 0\n  end\n  guesses.each do\
    \ |i|\n    guesses[i] = guess[i] - guesses[i] + game[i] if guess[i] != 0\n  end\n\
    \  guesses.each do |i|\n    guesses[i] = guess[i] - guesses[i] + game[i] if guess[i]\
    \ != 0\n  end\n  guesses.each do |i|\n    guesses[i] = guess[i] - guesses[i] +\
    \ game[i] if guess[i] != 0\n  end\n  guesses.each do |i|\n    guesses[i] = guess[i]\
    \ - guesses[i] + game[i] if guess[i] != 0\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i] - guesses[i] + game[i] if guess[i] != 0\n  end\n  guesses.each do\
    \ |i|\n    guesses[i] = guess[i] - guesses[i] + game[i] if guess[i] != 0\n  end\n\
    \  guesses.each do |i|\n    guesses[i] = guess[i] - guesses[i] + game[i] if guess[i]\
    \ != 0\n  end\n  guesses.each do |i|\n    guesses[i] = guess[i] - guesses[i] +\
    \ game[i] if guess[i] != 0\n  end\n  guesses.each do |i|\n    guesses[i] = guess[i]\
    \ - guesses[i] + game[i] if guess[i] != 0\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i] - guesses[i] + game[i] if guess[i] != 0\n  end\n  guesses.each do\
    \ |i|\n    guesses[i] = guess[i] - guesses[i] + game[i] if guess[i] != 0\n  end\n\
    \  guesses.each do |i|\n    guesses[i] = guess[i] - guesses[i] + game[i] if guess[i]\
    \ != 0\n  end\n  guesses.each do |i|\n    guesse", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n\
    \    while j < guess.length and guess[j] == game[i]\n      j += 1\n    guess =\
    \ guess[0..j-1]\n    game = game[i..j]\n    result.push(j - i)\n    i += 1\n \
    \ end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      i += 1\n\
    \    elsif game[i] > guess[i]\n      result.push(guess[i] - game[i])\n      i\
    \ += 1\n    else\n      result.push(game[i] - guess[i])\n      i += 1\n  end\n\
    \  result\nend", "  game = game.dup\n  guess = guess.dup\n  game.each_with_index\
    \ do |score, index|\n    guess[index] = 0 if guess[index] == score\n    guess[index]\
    \ = guess[index] - score if guess[index] > score\n    guess[index] = guess[index]\
    \ + score if guess[index] < score\n  end\n  guess\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you so much for taking the time to write this out. I'm going\
    \ to try this out right now. I'm going to have to read up on each_with_index because\
    \ I didn't know about that method. Thanks again!\n<|/ c |>\n<| c |>\nI added some\
    \ comments to explain how it works.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to explain how it works.\n<|/ c |>\n<| c |>\nI added some comments to explain\
    \ how it works.\n<|/ c |>\n<| c |>\nI added some comments to explain how it works.\n\
    <|/ c |>\n<| a |>\n<code>", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each_index { |i| guesses[i]\
    \ = guess[i] }\n  games = Array.new(game.length)\n  games.fill(0)\n  games.each_index\
    \ { |i| games[i] = game[i] }\n  guesses.each_with_index { |guess, i| games.each_with_index\
    \ { |game, j| guesses[j] += (guess == game) ? 0 : abs(guess - game) } }\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length,\
    \ -1)\n  games = Array.new(game.length, -1)\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game] = game.abs - guess\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    guesses[guess] = game.abs if game == 0\n  end\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  games.each do |i|\n    games[i] = game[i]\
    \ if game[i] != 0\n  end\n  guesses.each do |i|\n    guesses[i] = guess[i] if\
    \ guess[i] != 0\n  end\n  guesses.each do |i|\n    games.each do |j|\n      guesses[i]\
    \ = guesses[i] - game[j] if guesses[i] > game[j]\n      guesses[i] = guesses[i]\
    \ + game[j] if guesses[i] < game[j]\n    end\n  end\n  guesses.map { |i| i if\
    \ i != 0 }\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    game\
    \ = game.to_a\n    guess = guess.to_a\n    difference = []\n    game.length ==\
    \ guess.length\n    game.length.times do |i|\n        difference << game[i] -\
    \ guess[i]\n    end\n    difference\nend\n</cell>\n<cell>", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  score = 0\n  game.length.times do |i|\n    score += game[i]\n    guesses[i]\
    \ = guess[i] - game[i]\n  end\n  guesses.each do |i|\n    guess[i] = 0 if guess[i]\
    \ < 0\n    guess[i] = guess[i] - score if guess[i] > score\n  end\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  \n  guesses.zip(games).each do |g, g|\n \
    \   games[g] ||= 0\n    guesses[g] ||= 0\n    games[g] += game[g]\n    guesses[g]\
    \ += guess[g]\n  end\n  \n  guesses.zip(games).map { |g, g| g if g != 0 }\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each do |i|\n    if guesses[i] < 0\n      guesses[i] = guesses[i]\
    \ + game.length\n    end\n  end\n  guesses\nend", "  game.length == guess.length\n\
    \  game.length.times do |i|\n    game[i] != guess[i] ? game[i] += guess[i] - game[i]\
    \ : game[i] = 0\n  end\n  game\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  guesses = guess.size\n  scores = game.size\n  result = []\n  for i in 0...guesses\n\
    \    diff = guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n    result.push(diff)\n\
    \  end\n  return result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n      i\
    \ += 1\n      continue\n    diff = game[i] - guess[i]\n    result.push(diff)\n\
    \    i += 1\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.zip(game).each\
    \ do |pair|\n    guesses[pair[0]] = pair[1]\n  end\n  guesses.zip(guess).each\
    \ do |pair|\n    if pair[0] != pair[1]\n      guesses[pair[0]] = pair[1] - pair[0]\n\
    \    end\n  end\n  guesses\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  \n  game.length == guess.length\n  \n  for i in 0...game.length\n\
    \    if game[i] == guess[i]\n      result.push(0)\n    else\n      result.push(abs(game[i]\
    \ - guess[i]))\n    end\n  end\n  \n  result\nend", "  game = game.to_a\n  guess\
    \ = guess.to_a\n  result = []\n  game.each_with_index do |score, index|\n    guess\
    \ = guess[index]\n    if guess == score\n      result << 0\n    elsif guess >\
    \ score\n      result << guess - score\n    else\n      result << guess + score\n\
    \    end\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  games = Array.new(game.length)\n  guesses.zip(games).each\
    \ do |g,g|\n    games[g] = game[g]\n  end\n  guesses.zip(games).each do |g,g|\n\
    \    guesses[g] = guess[g]\n  end\n  guesses.zip(games).each do |g,g|\n    guesses[g]\
    \ = guesses[g] - games[g]\n  end\n  guesses.zip(games).each do |g,g|\n    guesses[g]\
    \ = 0 if guesses[g] < 0\n    guesses[g] = guesses[g] if guesses[g] > 0\n  end\n\
    \  guesses\nend", "    game = game.to_a\n    guess = guess.to_a\n    diff = []\n\
    \    \n    game.each_with_index do |score, index|\n        diff = diff + [abs(guess[index]\
    \ - score)]\n    end\n    \n    diff\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each do |i|\n\
    \    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = 0 if guesses[i] == 0\n  end\n  guesses.each do |i|\n    guesses[i] = guesses[i].abs\
    \ if guesses[i] > 0\n  end\n  guesses\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  \n  game.each_with_index\
    \ do |score, index|\n    guesses[index] = guess[index] - score\n  end\n  \n  guesses.each_with_index\
    \ do |guess, index|\n    if guess == 0\n      guesses[index] = 0\n    elsif guess\
    \ < 0\n      guesses[index] = guess * -1\n    end\n  end\n  \n  guesses\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each do |i|\n    if guesses[i] < 0\n      guesses[i] = guesses[i]\
    \ + game.length\n    end\n  end\n  guesses.each do |i|\n    if guesses[i] > game.length\n\
    \      guesses[i] = guesses[i] - game.length\n    end\n  end\n  guesses.each do\
    \ |i|\n    if guesses[i] == 0\n      guesses[i] = 0\n    end\n  end\n  guesses\n\
    end", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.length\
    \ == guess.length ? (0...guess.length).each do |i|\n    result.push(game[i] -\
    \ guess[i])\n  end : game.length == guess.length ? (0...guess.length).each do\
    \ |i|\n    result.push(game[i] - guess[i])\n    result.push(game[i] - guess[i])\n\
    \  end : game.length != guess.length ? (0...guess.length).each do |i|\n    result.push(game[i]\
    \ - guess[i])\n    result.push(game[i] - guess[i])\n    result.push(game[i] -\
    \ guess[i])\n    result.push(game[i] - guess[i])\n  end\n  result\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    j = i\n    while j < guess.length and guess[j] == game[i]\n      j += 1\n\
    \    if j == guess.length\n      result << 0\n      i += 1\n      continue\n \
    \   result << (guess[j] - game[i]).abs\n    i += 1\n  end\n  result\nend", " \
    \ game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess[index] ? result[index] = 0 : result[index] = score\
    \ - guess[index]\n  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  \n  game.length == guess.length\n  \n  for i in 0...game.length\n\
    \    \n    if game[i] == guess[i]\n      result[i] = 0\n      \n    else\n   \
    \   result[i] = abs(game[i] - guess[i])\n    end\n  end\n  \n  result\nend", " \
    \ game.length, guess.length\n  result = []\n  for i in 0...game.length\n    if\
    \ game[i] == guess[i]\n      result.push(0)\n    else\n      result.push(abs(game[i]\
    \ - guess[i]))\n    end\n  end\n  result\nend", "  game = game.dup\n  guess =\
    \ guess.dup\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n   \
    \ while j < guess.length && guess[j] == game[j]\n      j += 1\n    guess[j] =\
    \ nil\n    guess = guess.dup\n    guess[i] = game[i]\n    result.push(guess.length\
    \ - j)\n    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  for i in 0...guess.length\n    diff = guess[i] - game[i]\n \
    \   if diff < 0\n      diff *= -1\n    result << diff\n  end\n  result\nend\n\
    </cell>\n<code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ && guess[j] == game[i]\n      j += 1\n    if j == i\n      result.push(0)\n\
    \    else\n      result.push(abs(guess[i] - game[j]))\n    end\n    i += 1\n \
    \ end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n\
    \  game.length.times do |i|\n    guess.length.times do |j|\n      result[j] =\
    \ game[j] if game[j] == guess[j]\n    end\n  end\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  result = []\n  game.each_with_index do |score, index|\n\
    \    guess[index] = 0 if guess[index] == score\n    guess[index] = score if guess[index]\
    \ == 0\n    guess[index] = guess[index] - score if guess[index] > score\n    guess[index]\
    \ = guess[index] + score if guess[index] < score\n    guess[index] = guess[index]\
    \ / 2 if guess[index] % 2 == 0\n    guess[index] = guess[index] / 2 if guess[index]\
    \ % 2 == 1\n    guess[index] = guess[index] / 2 if guess[index] % 2 == 0\n   \
    \ guess[index] = guess[index] / 2 if guess[index] % 2 == 1\n    guess[index] =\
    \ guess[index] / 2 if guess[index] % 2 == 0\n    guess[index] = guess[index] /\
    \ 2 if guess[index] % 2 == 1\n    guess[index] = guess[index] / 2 if guess[index]\
    \ % 2 == 0\n    guess[index] = guess[index] / 2 if guess[index] % 2 == 1\n   \
    \ guess[index] = guess[index] / 2 if guess[index] % 2 == 0\n    guess[index] =\
    \ guess[index] / 2 if guess[index] % 2 == 1\n    guess[index] = guess[index] /\
    \ 2 if guess[index] % 2 == 0\n    guess[index] = guess[index] / 2 if guess[index]\
    \ % 2 == 1\n    guess[index] = guess[index] / 2 if guess[index] % 2 == 0\n   \
    \ guess[index] = guess[index] / 2 if guess[index] % 2 == 1\n    guess[index] =\
    \ guess[index] / 2 if guess[index] % 2 == 0\n    guess[index] = guess[index] /\
    \ 2 if guess[index] % 2 == 1\n    guess[index] = guess[index] / 2 if guess[index]\
    \ % 2 == 0\n    guess[index] = guess[index] / 2 if guess[index] % 2 == 1\n   \
    \ guess[index] = guess[index] / 2 if guess[index] % 2 == 0\n    guess[index] =\
    \ guess[index] / 2 if guess[index] % 2 == 1\n    guess[index] = guess[index] /\
    \ 2 if guess[index] % 2 == 0\n    guess[index] = guess[index] / 2 if guess[index]\
    \ % 2 == 1\n    guess[index] = guess[index] / 2 if guess[index] % 2 == 0\n   \
    \ guess[index] = guess[index] / 2 if guess[index] % 2 == 1\n    guess[index] =\
    \ guess[index] / 2 if guess[index] % 2 == 0\n    guess[index] = guess[index] /\
    \ 2 if guess[index] % 2 == 1\n    guess[index] = guess[index] / 2 if guess[index]\
    \ % 2 == 0\n    guess[index", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i]\
    \ = game[i] - guess[i]\n  end\n  guesses.select { |i| guesses[i] != 0 }\nend",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    guess = guess[i]\n    game = game[i]\n    if guess == game\n      result.push(0)\n\
    \    else\n      result.push(abs(guess - game))\n    i += 1\n  end\n  result\n\
    end\n</cell>\n<code language=julia-0.5>", "    game = game.sort\n    guess = guess.sort\n\
    \    game.length, guess.length, guess.length.times do |i|\n        guess[i] =\
    \ guess[i] - game[i]\n    end\n    guess[guess.length-1] = 0 if guess[guess.length-1]\
    \ < 0\n    guess[guess.length-1] = guess[guess.length-1].abs\n    guess[guess.length-1]\n\
    end\n</cell>\n<cell>", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n\
    \  game.length.times do |i|\n    guess.length.times do |j|\n      result[j] =\
    \ game[j] if game[j] == guess[j]\n    end\n  end\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each_with_index\
    \ do |g, i|\n    guesses[i] = g if g > 0\n  end\n  guesses\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j\
    \ = i\n    while j < guess.length and guess[j] == game[j]\n      j += 1\n    if\
    \ j == guess.length\n      result[i] = 0\n      i += 1\n      continue\n    diff\
    \ = guess[j] - game[j]\n    if diff < 0\n      result[i] = diff\n      i += 1\n\
    \    else\n      result[i] = abs(diff)\n      i += 1\n  end\n  result\nend\n</cell>\n\
    <code language=julia-1.5>", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  score = 0\n  game.length.times\
    \ do |i|\n    guesses[i] = guess[i] unless guess[i] == 0\n    score += game[i]\n\
    \  end\n  guesses.each do |i|\n    guess[i] = game[i] - score if guess[i] != 0\n\
    \  end\n  guesses\nend", "  game = game.to_a\n  guess = guess.to_a\n  result =\
    \ []\n  game.length.times do |i|\n    guess.length.times do |j|\n      result[j]\
    \ += game[i][j] - guess[i][j]\n    end\n  end\n  result\nend", "  game = game.sort!\n\
    \  guess = guess.sort!\n  guesses = 0...guess.length\n  scores = 0...game.length\n\
    \  guesses.zip(scores).each do |guess, score|\n    next if guess == score\n  \
    \  guesses.delete_at(guesses.index(guess))\n    scores.delete_at(scores.index(score))\n\
    \  end\n  guesses.zip(scores).map { |guess, score| abs(guess - score) }\nend\n\
    </code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nI like your solution, however I believe\
    \ that your solution will fail if there are duplicate values in either array.\
    \ For example, `compare.call([1,2,3], [1,2,3])` returns `[0, 0, 0]` instead of\
    \ `[0, 0, 3]`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my answer.\
    \ Thanks for pointing it out. I've updated my answer accordingly.\n<|/ c |>\n\
    <| c |>\nI like your solution, however I believe that your solution will fail\
    \ if there are duplicate values in either array. For example, `compare.call([1,2,3],\
    \ [1,2,3])` returns `[0, 0, 0]` instead of `[0, 0, 3]`.\n<|/ c |>\n<| c |>\nYes,\
    \ I realized that after I posted my answer. Thanks for pointing it out. I've updated\
    \ my answer accordingly.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "    game\
    \ = game.sort\n    guess = guess.sort\n    diff = []\n    i = 0\n    while i <\
    \ guess.length\n        if game[i] == guess[i]\n            i += 1\n        else\n\
    \            diff << abs(game[i] - guess[i])\n            i += 1\n        end\n\
    \    end\n    diff\nend", "  game = game.dup\n  guess = guess.dup\n  game.each_with_index\
    \ do |score, index|\n    guess[index] = 0 if guess[index] == score\n    guess[index]\
    \ = guess[index] - score if guess[index] > score\n  end\n  guess\nend\n</cell>\n\
    <cell>", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n \
    \ while i < guess.length\n    j = i\n    while j < guess.length && guess[j] ==\
    \ game[j]\n      j += 1\n    if j == i\n      result[i] = 0\n      i += 1\n  \
    \    continue\n    diff = guess[j] - game[j]\n    if diff < 0\n      result[i]\
    \ = -diff\n      i += 1\n    else\n      result[i] = diff\n      i += 1\n  end\n\
    \  result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  guesses\
    \ = guess.size\n  games = game.size\n  \n  for i in 0...guesses\n    diff = game[i]\
    \ - guess[i]\n    if diff < 0\n      diff *= -1\n    result.push(diff)\n  end\n\
    \  \n  return result\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\n\
    \      if game[i] == guess[j]\n        j += 1\n      else\n        break\n   \
    \ end\n    guess = guess[0...j]\n    result += [guess.length - j - i].abs\n  \
    \  i = j\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n \
    \ result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[i]\n      j += 1\n    if j == guess.length\n      result\
    \ << 0\n    else\n      result << guess[j] - game[i]\n    end\n    i += 1\n  end\n\
    \  result\nend", "  game = game.sort!\n  guess = guess.sort!\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n    if diff\
    \ < 0\n      diff *= -1\n      i += 1\n    result << diff\n  end\n  result\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(guess.length)\n  guesses.each do |i|\n    guesses[i] = 0\n  end\n\
    \  game.length.times do |i|\n    guesses[game[i]] += 1\n  end\n  guesses.each_with_index\
    \ do |count, i|\n    guesses[i] = count if count == guess.length\n  end\n  guesses.map\
    \ do |i|\n    guesses[i] > guess.length ? guesses[i] - guess.length : guesses[i]\n\
    \  end\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n  game.length.times\
    \ do |i|\n    guess.length.times do |j|\n      result[j] += game[i] - guess[j]\n\
    \    end\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n\
    I like your solution, but I believe it can be made more efficient by not sorting\
    \ the arrays. Sorting them is O(n log n) while this solution has O(n^2). Sorting\
    \ them is also not necessary because you can compare the elements directly without\
    \ needing to sort them.\n<|/ c |>\n<| c |>\nI agree with you, thank you. I was\
    \ just trying to keep it simple.\n<|/ c |>\n<| c |>\nI believe your solution is\
    \ O(n^2), but you also need to sort the guesses. Sorting them is O(n log n), so\
    \ sorting them is O(n log n) + O(n^2) = O(n log n^2). Sorting them is also not\
    \ necessary because you can compare the elements directly without needing to sort\
    \ them.\n<|/ c |>\n<| c |>\nI believe your solution is O(n^2), but you also need\
    \ to sort the guesses. Sorting them is O(n log n), so sorting them is O(n log\
    \ n) + O(n^2) = O(n log n^2). Sorting them is also not necessary because you can\
    \ compare the elements directly without needing to sort them.\n<|/ c |>\n<| c\
    \ |>\nI believe your solution is O(n^2), but you also need to sort the guesses.\
    \ Sorting them is O(n log n), so sorting them is O(n log n) + O(n^2) = O(n log\
    \ n^2). Sorting them is also not necessary because you can compare the elements\
    \ directly without needing to sort them.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  game.length == guess.length\n  game.each_with_index do |score, index|\n    guess[index]\
    \ == score ? 0 : (guess[index] - score)\n  end\nend", "  game = game.to_a\n  guess\
    \ = guess.to_a\n  result = []\n  game.length.times do |i|\n    guess.length.times\
    \ do |j|\n      result[j] = guess[j] - game[i] if guess[j] == game[i]\n    end\n\
    \  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length and\
    \ guess[j] == game[j]\n      j += 1\n    if j == guess.length\n      result <<\
    \ 0\n    else\n      result << (guess[j] - game[j])\n    end\n    i += 1\n  end\n\
    \  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  games = Array.new(game.length)\n  games.fill(0)\n  \n  games.each\
    \ do |g|\n    guesses.each do |g|\n      guesses.each do |g|\n        games.each\
    \ do |g|\n          games.each do |g|\n            games.each do |g|\n       \
    \       games.each do |g|\n                games.each do |g|\n               \
    \   games.each do |g|\n                    games.each do |g|\n               \
    \       games.each do |g|\n                        games.each do |g|\n       \
    \                   games.each do |g|\n                            games.each\
    \ do |g|\n                              games.each do |g|\n                  \
    \              games.each do |g|\n                                  games.each\
    \ do |g|\n                                    games.each do |g|\n            \
    \                          games.each do |g|\n                               \
    \         games.each do |g|\n                                          games.each\
    \ do |g|\n                                            games.each do |g|\n    \
    \                                          games.each do |g|\n               \
    \                                 games.each do |g|\n                        \
    \                          games.each do |g|\n                               \
    \                     games.each do |g|\n                                    \
    \                  games.each do |g|\n                                       \
    \                 games.each do |g|\n                                        \
    \                  games.each do |g|\n                                       \
    \                     games.each do |g|\n                                    \
    \                          games.each do |g|\n                               \
    \                                 games.each do |g|\n                        \
    \                                          games.each do |g|\n               \
    \                                                     games.each do |g|\n    \
    \                                                                games.each do\
    \ |g|\n                                                                    games.each\
    \ do |g|\n                                                                   \
    \ games.each do |g|\n                                                        \
    \            games.each do |g|\n                                             \
    \                       games.each do |g|\n                                  \
    \                                  games.each do |g|\n                       \
    \                                             games.each do |g|\n            \
    \                                                        games.each do |g|\n \
    \                                                                   games.each\
    \ do |g|\n                                                                   \
    \ games.each do |g|\n                                                        \
    \            games.each do |g|\n                                             \
    \                       games.each do |g|\n                                  \
    \                                  games.each do |g|\n                       \
    \                                             games.each do |g|\n            \
    \                                                        games.each do |g|\n \
    \                                                                   games.each\
    \ do |g|\n                                                                   \
    \ games.each do |g|\n                                                        \
    \            games.each do |g|\n                                             \
    \                       games.each do |g|\n                                  \
    \                                  games.each do |g|\n                       \
    \                                             games.each do |g|\n            \
    \                    ", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.select { |i| guesses[i] > 0 }.map { |i| guesses[i] }\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  \n  game.length.times do |i|\n    guesses[i] = game[i] -\
    \ guess[i]\n  end\n  \n  guesses.each_with_index do |guess, i|\n    if guess ==\
    \ 0\n      guesses[i] = 0\n    elsif guess < 0\n      guesses[i] = guess\n   \
    \ else\n      guesses[i] = -guess\n    end\n  end\n  \n  guesses\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  game.each_with_index do\
    \ |score, index|\n    guess = guess[index]\n    if guess == score\n      result\
    \ << 0\n    elsif guess > score\n      result << guess - score\n    else\n   \
    \   result << guess + score\n    end\n  end\n  result\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for the answer! I didn't know about each_with_index. I'm\
    \ still a beginner at Ruby, so I appreciate the help.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i =\
    \ 0\n  while i < guess.length\n    if guess[i] == game[i]\n      i += 1\n    else\n\
    \      result[i] = abs(guess[i] - game[i])\n      i += 1\n    end\n  end\n  result\n\
    end\n</cell>\n<code language=julia-1.0>", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  \n  game.length.times\
    \ do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  \n  guesses.select { |i|\
    \ guess[i] < 0 }.map { |i| -guess[i] }\nend", "    game = game.to_a\n    guess\
    \ = guess.to_a\n    guesses = guess.size\n    score = 0\n    \n    guesses_correct\
    \ = 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  \n  guesses.each do |i|\n  \
    \  guesses[i] = game[i] - guess[i]\n  end\n  \n  guesses.each do |i|\n    if guesses[i]\
    \ == 0\n      guesses[i] = guess[i]\n    else\n      guesses[i] = guesses[i] -\
    \ game[i]\n    end\n  end\n  \n  guesses\nend", "  game = game.dup\n  guess =\
    \ guess.dup\n  guesses = Array.new(guess.length)\n  score = 0\n  guesses.each_index\
    \ do |i|\n    guesses[i] = guess[i]\n  end\n  guesses.each_index do |i|\n    guesses[i]\
    \ = guesses[i] - game[i]\n  end\n  guesses.each_index do |i|\n    if guesses[i]\
    \ < 0\n      guesses[i] = -guesses[i]\n    end\n  end\n  guesses.each_index do\
    \ |i|\n    score += guesses[i]\n  end\n  guesses.each_index do |i|\n    guesses[i]\
    \ = -guesses[i]\n  end\n  guesses.each_index do |i|\n    if guesses[i] == 0\n\
    \      guesses[i] = 0\n    end\n  end\n  guesses.each_index do |i|\n    score\
    \ += guesses[i]\n  end\n  guesses.each_index do |i|\n    guesses[i] = -guesses[i]\n\
    \  end\n  guesses.each_index do |i|\n    if guesses[i] == 0\n      guesses[i]\
    \ = 0\n    end\n  end\n  guesses.each_index do |i|\n    score += guesses[i]\n\
    \  end\n  guesses.each_index do |i|\n    guesses[i] = -guesses[i]\n  end\n  guesses.each_index\
    \ do |i|\n    if guesses[i] == 0\n      guesses[i] = 0\n    end\n  end\n  guesses.each_index\
    \ do |i|\n    score += guesses[i]\n  end\n  guesses.each_index do |i|\n    guesses[i]\
    \ = -guesses[i]\n  end\n  guesses.each_index do |i|\n    if guesses[i] == 0\n\
    \      guesses[i] = 0\n    end\n  end\n  guesses.each_index do |i|\n    score\
    \ += guesses[i]\n  end\n  guesses.each_index do |i|\n    guesses[i] = -guesses[i]\n\
    \  end\n  guesses.each_index do |i|\n    if guesses[i] == 0\n      guesses[i]\
    \ = 0\n    end\n  end\n  guesses.each_index do |i|\n    score += guesses[i]\n\
    \  end\n  guesses.each_index do |i|\n    guesses[i] = -guesses[i]\n  end\n  guesses.each_index\
    \ do |i|\n    if guesses[i] == 0\n      guesses[i] = 0\n"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
