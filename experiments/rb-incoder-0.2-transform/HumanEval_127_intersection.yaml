name: HumanEval_127_intersection
language: rb
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# >>> intersection.call([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection.call([-1,\
  \ 1], [0, 4])\n# \"NO\"\n# >>> intersection.call([-3, -1], [-5, 5])\n# \"YES\"\n\
  def intersection(interval1, interval2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n\
  \    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1,\
  \ 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"\
  YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2,\
  \ 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n\
  \    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\"\
  , candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2,\
  \ -2], [-3, -2]))\n  end\nend\n"
completions: ["  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] <\
    \ j[1] && i[0] < j[0]) \n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  interval1[0] < interval2[1] and interval2[0] < interval1[1]\n\
    end", "    \n    interval1_start, interval1_end = interval1\n    interval2_start,\
    \ interval2_end = interval2\n    \n    if interval1_start >= interval2_end or\
    \ interval1_end <= interval2_start:\n        return \"NO\"\n    \n    intersection_start\
    \ = max(interval1_start, interval2_start)\n    intersection_end = min(interval1_end,\
    \ interval2_end)\n    \n    if intersection_start == intersection_end:\n     \
    \   return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n\
    \    \n    if intersection_length == 2:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 3:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 4:\n        return \"YES\"\n    \n    if intersection_length == 5:\n    \
    \    return \"YES\"\n    \n    if intersection_length == 6:\n        return \"\
    YES\"\n    \n    if intersection_length == 7:\n        return \"YES\"\n    \n\
    \    if intersection_length == 8:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 9:\n        return \"YES\"\n    \n    if intersection_length == 10:\n   \
    \     return \"YES\"\n    \n    if intersection_length == 11:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 12:\n        return \"YES\"\n \
    \   \n    if intersection_length == 13:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 14:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 15:\n        return \"YES\"\n    \n    if intersection_length == 16:\n  \
    \      return \"YES\"\n    \n    if intersection_length == 17:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 18:\n        return \"YES\"\n \
    \   \n    if intersection_length == 19:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 20:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 21:\n        return \"YES\"\n    \n    if intersection_length == 22:\n  \
    \      return \"YES\"\n    \n    if intersection_length == 23:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 24:\n        return \"YES\"\n \
    \   \n    if intersection_length == 25:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 26:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 27:\n        return \"YES\"\n    \n    if intersection_length == 28:\n  \
    \      return \"YES\"\n    \n    if intersection_length == 29:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 30:\n        return \"YES\"\n \
    \   \n    if intersection_length == 31:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 32:\n        return \"YES\"\n    \n    if intersection_",
  "  interval1[0] < interval1[1] and interval2[0] < interval2[1]\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return \"YES\" : return \"\
    NO\"\n    end\n  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1..i2 if i1.include?(i2)\n    end\n  end\nend", "    interval1.each\
    \ do |i1|\n        interval2.each do |i2|\n            if i1 < i2 \n         \
    \       return \"NO\"\n            end\n        end\n    end\n    return \"YES\"\
    \nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return\
    \ \"NO\" : return \"YES\"\n    end\n  end\n  return \"NO\"\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1 < i2\n        return i1 if\
    \ i1 == i2\n      end\n    end\n  end\n  return \"NO\"\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[0] < j[0]\n        puts \"NO\"\
    \n        return\n      elsif i[1] > j[1]\n        puts \"NO\"\n        return\n\
    \      end\n    end\n  end\n  puts \"YES\"\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      if i1 <= i2\n        puts \"YES\"\n      else\n        puts \"NO\"\n  \
    \    end\n    end\n  end\nend", "  interval1[0] = interval1[0].to_i\n  interval1[1]\
    \ = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n\
    \  \n  interval1[0] = interval1[0] < interval1[1] ? interval1[0] : interval1[1]\n\
    \  interval2[0] = interval2[0] < interval2[1] ? interval2[0] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0]\n\
    \  interval1[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1]\n\
    \  \n  interval1[0] = interval1[0] < ", "  interval1[0] < interval1[1] and interval2[0]\
    \ < interval2[1]\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      if i1 <= i2\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    interval1 = [interval1[0], interval1[1]] if interval1[0] < interval1[1]\
    \ else [interval1[1], interval1[0]]\n    interval2 = [interval2[0], interval2[1]]\
    \ if interval2[0] < interval2[1] else [interval2[1], interval2[0]]\n    \n   \
    \ interval1 = [interval1[0], interval1[1]] if interval1[0] < interval1[1] else\
    \ [interval1[1], interval1[0]]\n    interval2 = [interval2[0], interval2[1]] if\
    \ interval2[0] < interval2[1] else [interval2[1], interval2[0]]\n    \n    interval1\
    \ = [interval1[0], interval1[1]] if interval1[0] < interval1[1] else [interval1[1],\
    \ interval1[0]]\n    interval2 = [interval2[0], interval2[1]] if interval2[0]\
    \ < interval2[1] else [interval2[1], interval2[0]]\n    \n    interval1 = [interval1[0],\
    \ interval1[1]] if interval1[0] < interval1[1] else [interval1[1], interval1[0]]\n\
    \    interval2 = [interval2[0], interval2[1]] if interval2[0] < interval2[1] else\
    \ [interval2[1], interval2[0]]\n    \n    interval1 = [interval1[0], interval1[1]]\
    \ if interval1[0] < interval1[1] else [interval1[1], interval1[0]]\n    interval2\
    \ = [interval2[0], interval2[1]] if interval2[0] < interval2[1] else [interval2[1],\
    \ interval2[0]]\n    \n    interval1 = [interval1[0], interval1[1]] if interval1[0]\
    \ < interval1[1] else [interval1[1], interval1[0]]\n    interval2 = [interval2[0],\
    \ interval2[1]] if interval2[0] < interval2[1] else [interval2[1], interval2[0]]\n\
    \    \n    interval1 = [interval1[0], interval1[1]] if interval1[0] < interval1[1]\
    \ else [interval1[1], interval1[0]]\n    interval2 = [interval2[0], interval2[1]]\
    \ if interval2[0] < interval2[1] else [interval2[1], interval2[0]]\n    \n   \
    \ interval1 = [interval1[0], interval1[1]] if interval1[0] < interval1[1] else\
    \ [interval1[1], interval1[0]]\n    interval2 = [interval2[0], interval2[1]] if\
    \ interval2[0] < interval2[1] else [interval2[1], interval2[0]]\n    \n    interval1\
    \ = [interval1[0], interval1[1]] if interval1[0] < interval1[1] else [interval1[1],\
    \ interval1[0]]\n    interval2 = [interval2[0], interval2[1]] if interval2[0]\
    \ < interval2[1] else [interval2[1], interval2[0]]\n    \n    interval1 = [interval1[0],\
    \ interval1[1]] if interval1[0] < interval1", "    interval1.each do |i1|\n  \
    \      interval2.each do |i2|\n            if i1[1] < i2[0]\n                return\
    \ \"NO\"\n            elsif i1[1] > i2[0]\n                return \"NO\"\n   \
    \         elsif i1[0] == i2[0]\n                return \"NO\"\n            end\n\
    \        end\n    end\n    return \"YES\"\nend", "  interval1.each do |i|\n  \
    \  interval2.each do |j|\n      if(i[1] < j[1] && j[1] < i[1])\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    interval1.each do\
    \ |i|\n        interval2.each do |j|\n            if i[1] < j[1]\n           \
    \     return \"NO\"\n            elsif i[1] > j[1]\n                return \"\
    NO\"\n            end\n        end\n    end\n    return \"YES\"\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i.first <= j.first && j.first <=\
    \ i.last)\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.reduce(:&)\n  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\n\
    \  interval2.reduce(:&).reduce(:&)\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do\
    \ |i|\n    interval2.each do |j|\n      if i[1] < j[1]\n        return false if\
    \ i[0] < j[0]\n      end\n    end\n  end\n  return true\nend", "    interval1Start,\
    \ interval1End = interval1\n    interval2Start, interval2End = interval2\n   \
    \ \n    if interval1Start <= interval1End <= interval2Start or interval2Start\
    \ <= interval2End <= interval1Start:\n        return \"NO\"\n    \n    if interval1Start\
    \ <= interval2Start <= interval1End or interval2Start <= interval1Start <= interval2End:\n\
    \        return \"YES\"\n    \n    if interval1Start <= interval2Start <= interval1End\
    \ or interval2Start <= interval2End <= interval1End:\n        return \"YES\"\n\
    \    \n    if interval1Start <= interval2Start <= interval1End or interval2Start\
    \ <= interval1End <= interval2End:\n        return \"YES\"\n    \n    return \"\
    NO\"", "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1[1] >=\
    \ i2[0] && i1[1] <= i2[1]\n        return i1\n      end\n    end\n  end\n  return\
    \ \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2\
    \ if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1..i2 if i1..i2.include?(i1..i2)\n    end\n  end\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[1] < j[1]\n        puts \"NO\"\
    \n        return\n      end\n    end\n  end\n  puts \"YES\"\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1[0] < interval2[1] and interval2[0] < interval1[1]\nend", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n \
    \   interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ \n  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1[1] < i2[0]\n\
    \        return false \n      elsif i1[1] > i2[1]\n        return false \n   \
    \   end\n    end\n  end\n  \n  return true\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n \
    \   interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ \n  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n \
    \ interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n \
    \ interval1[0] = interval1[0] if interval1[0] < interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] == interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] == interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] \n  interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] == interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ == interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] > interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] < interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] \n  interval2[0] = interval2[0] if interval2[0] > interval2[1]\
    \ \n  \n  interval1[0] = interval1[0] if interval1[0] == interval1[1] \n  interval2[0]\
    \ = interval2[0] if interval2[0] == interval2[1] \n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] \n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] \n  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ \n  interval2[0] = interval2[0] if interval2[0] < interval2[1] \n  \n  interval1[0]\
    \ = interval1[0] if interval1[0] > interval1[1] \n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] \n", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do\
    \ |i1|\n    interval2.each do |i2|\n      if i1[1] < i2[0]\n        return false\n\
    \      elsif i1[0] > i2[1]\n        return false\n      end\n    end\n  end\n\
    \  return true\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      if i1 < i2\n        puts \"YES\"\n      else\n        puts \"NO\"\n   \
    \   end\n    end\n  end\nend", "  interval1.each do |i|\n    interval2.each do\
    \ |j|\n      if(i[1] < j[1] && i[0] < j[0])\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "    \n    interval1_start, interval1_end\
    \ = interval1\n    interval2_start, interval2_end = interval2\n    \n    intersection_start\
    \ = max(interval1_start, interval2_start)\n    intersection_end = min(interval1_end,\
    \ interval2_end)\n    \n    if intersection_start > intersection_end:\n      \
    \  return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n\
    \    \n    if intersection_length == 2:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 3:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 5:\n        return \"YES\"\n    \n    if intersection_length == 7:\n    \
    \    return \"YES\"\n    \n    if intersection_length == 9:\n        return \"\
    YES\"\n    \n    if intersection_length == 11:\n        return \"YES\"\n    \n\
    \    if intersection_length == 13:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 15:\n        return \"YES\"\n    \n    if intersection_length == 17:\n  \
    \      return \"YES\"\n    \n    if intersection_length == 19:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 21:\n        return \"YES\"\n \
    \   \n    if intersection_length == 23:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 25:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 27:\n        return \"YES\"\n    \n    if intersection_length == 29:\n  \
    \      return \"YES\"\n    \n    if intersection_length == 31:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 33:\n        return \"YES\"\n \
    \   \n    if intersection_length == 35:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 37:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 39:\n        return \"YES\"\n    \n    if intersection_length == 41:\n  \
    \      return \"YES\"\n    \n    if intersection_length == 43:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 45:\n        return \"YES\"\n \
    \   \n    if intersection_length == 47:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 49:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 51:\n        return \"YES\"\n    \n    if intersection_length == 53:\n  \
    \      return \"YES\"\n    \n    if intersection_length == 55:\n        return\
    \ \"YES\"\n    \n    if intersection_length == 57:\n        return \"YES\"\n \
    \   \n    if intersection_length == 59:\n        return \"YES\"\n    \n    if\
    \ intersection_length == 61:\n        return \"YES\"\n    \n    if intersection_length\
    \ == 63:\n        return \"YES\"\n    \n    if intersection_length == ", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i[0]<=j[1] && j[0]<=i[1])\n    \
    \    return true\n      end\n    end\n  end\n  return false\nend", "  interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1<i2 ? return \"YES\" : return \"NO\"\n  \
    \  end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n \
    \     i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n  \
    \  interval2.each do |i2|\n      i1<i2 ? return \"NO\" : return \"YES\"\n    end\n\
    \  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each do\
    \ |i2|\n      if i1[1] > i2[0]\n        return false\n      elsif i1[0] < i2[1]\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  interval1[0]\
    \ < interval2[1] and interval1[1] > interval2[0]\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1..i2 if i1..i2.include?(i1..i2)\n    end\n\
    \  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2\
    \ if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      if i1 <= i2\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  interval1.each do |i|\n    interval2.each do |j|\n \
    \     if(i[0] < j[0] && i[1] > j[1])\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  interval1.each do |i1|\n    interval2.each do\
    \ |i2|\n      i1..i2 if i1.include?(i2)\n    end\n  end\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1 > i2\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1[1] >= i2[0] && i1[1] <= i2[1]\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "    interval1start,\
    \ interval1end = interval1\n    interval2start, interval2end = interval2\n   \
    \ if interval1start > interval1end:\n        interval1start, interval1end = interval1end,\
    \ interval1start\n    if interval2start > interval2end:\n        interval2start,\
    \ interval2end = interval2end, interval2start\n    if interval1start > interval2end:\n\
    \        return \"NO\"\n    if interval1end < interval2start:\n        return\
    \ \"NO\"\n    if interval1start == interval1end:\n        return \"NO\"\n    if\
    \ interval2start == interval2end:\n        return \"NO\"\n    if interval1start\
    \ < interval2start:\n        return \"NO\"\n    if interval1start < interval1end:\n\
    \        return \"NO\"\n    if interval2end < interval1end:\n        return \"\
    NO\"\n    if interval1start < interval2end:\n        return \"NO\"\n    if interval1end\
    \ > interval2end:\n        return \"NO\"\n    if interval1start < interval1end:\n\
    \        return \"NO\"\n    if interval1start > interval2start:\n        return\
    \ \"NO\"\n    if interval1end > interval2end:\n        return \"NO\"\n    if interval1start\
    \ > interval2start:\n        return \"NO\"\n    if interval1end < interval2end:\n\
    \        return \"NO\"\n    if interval1start < interval2start:\n        return\
    \ \"NO\"\n    if interval1end > interval2end:\n        return \"NO\"\n    if interval1start\
    \ > interval2start:\n        return \"NO\"\n    if interval1end < interval2end:\n\
    \        return \"NO\"\n    if interval1start > interval2end:\n        return\
    \ \"NO\"\n    if interval1end > interval2end:\n        return \"NO\"\n    if interval1start\
    \ < interval2start:\n        return \"NO\"\n    if interval1end < interval2end:\n\
    \        return \"NO\"\n    if interval1start < interval2start:\n        return\
    \ \"NO\"\n    if interval1end > interval2end:\n        return \"NO\"\n    if interval1start\
    \ > interval2start:\n        return \"NO\"\n    if interval1end < interval2end:\n\
    \        return \"NO\"\n    if interval1start < interval2start:\n        return\
    \ \"NO\"\n    if interval1end > interval2end:\n        return \"NO\"\n    if interval1start\
    \ < interval2start:\n        return \"NO\"\n    if interval1end > interval2end:\n\
    \        return \"NO\"\n    if interval1start > interval2start:\n        return\
    \ \"NO\"\n    if interval1end < interval2end:\n        return \"NO\"\n    if interval1start\
    \ < interval2start:\n        return \"NO\"\n    if interval1end > interval2end:\n\
    \        return \"NO\"\n    if interval1start ", "  interval1[0], interval1[1]\
    \ = interval1[1], interval1[0]\n  interval2[0], interval2[1] = interval2[1], interval2[0]\n\
    \  \n  if interval1[1] < interval2[0]\n    interval1, interval2 = interval2, interval1\n\
    \  \n  if interval1[1] > interval2[1]\n    return \"NO\"\n  \n  if interval1[0]\
    \ == interval2[0]\n    return \"YES\"\n  \n  if interval1[0] < interval2[0]\n\
    \    return \"NO\"\n  \n  if interval1[0] > interval2[1]\n    return \"NO\"\n\
    \  \n  interval1[0], interval1[1] = interval2[0], interval2[1]\n  \n  while interval1[0]\
    \ < interval2[1]\n    interval1[0] += 1\n  \n  while interval1[1] > interval2[0]\n\
    \    interval1[1] -= 1\n  \n  return \"YES\"\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1 < i2\n        puts \"YES\"\n      else\n\
    \        puts \"NO\"\n      end\n    end\n  end\nend", "    interval1Start, interval1End\
    \ = interval1\n    interval2Start, interval2End = interval2\n    \n    if interval1Start\
    \ >= interval1End:\n        return \"NO\"\n    if interval2Start >= interval2End:\n\
    \        return \"NO\"\n    \n    intersectionStart = max(interval1Start, interval2Start)\n\
    \    intersectionEnd = min(interval1End, interval2End)\n    \n    if intersectionStart\
    \ <= intersectionEnd:\n        return \"YES\"\n    else:\n        return \"NO\"",
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      if i1 <= i2\n        return i1\n      end\n    end\n  end\n  return \"\
    NO\"\nend", "  interval1.each do |i|\n    interval2.each do |j|\n      break if\
    \ i == j\n    end\n  end\n  interval1.each do |i|\n    interval2.each do |j|\n\
    \      break if i > j\n    end\n  end\n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      break if i < j\n    end\n  end\n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      break if i == j\n    end\n  end\n  interval1.each do |i|\n   \
    \ interval2.each do |j|\n      break if i > j\n    end\n  end\n  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      break if i < j\n    end\n  end\n  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      break if i == j\n    end\n  end\n \
    \ interval1.each do |i|\n    interval2.each do |j|\n      break if i > j\n   \
    \ end\n  end\n  interval1.each do |i|\n    interval2.each do |j|\n      break\
    \ if i < j\n    end\n  end\n  interval1.each do |i|\n    interval2.each do |j|\n\
    \      break if i == j\n    end\n  end\n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      break if i > j\n    end\n  end\n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      break if i < j\n    end\n  end\n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      break if i == j\n    end\n  end\n  interval1.each do |i|\n   \
    \ interval2.each do |j|\n      break if i > j\n    end\n  end\n  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      break if i < j\n    end\n  end\n  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      break if i == j\n    end\n  end\n \
    \ interval1.each do |i|\n    interval2.each do |j|\n      break if i > j\n   \
    \ end\n  end\n  interval1.each do |i|\n    interval2.each do |j|\n      break\
    \ if i < j\n    end\n  end\n  interval1.each do |i|\n    interval2.each do |j|\n\
    \      break if i == j\n    end\n  end\n  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      break", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      i[0] <= j[0] && j[0] <= i[1] && i[1] <= j[1]\n    end\n  end\n\
    end", "    interval1Start, interval1End = interval1\n    interval2Start, interval2End\
    \ = interval2\n    \n    if interval1Start > interval2End:\n        interval1Start,\
    \ interval1End = interval2Start, interval2End\n    if interval2Start > interval1End:\n\
    \        interval2Start, interval2End = interval1Start, interval1End\n    \n \
    \   if interval1Start >= interval2Start:\n        interval1Start, interval1End\
    \ = interval2Start, interval2End\n    if interval2Start >= interval1End:\n   \
    \     interval2Start, interval2End = interval1Start, interval1End\n    \n    intersectionStart\
    \ = max(interval1Start, interval2Start)\n    intersectionEnd = min(interval1End,\
    \ interval2End)\n    \n    if intersectionStart <= intersectionEnd:\n        intersectionLength\
    \ = (intersectionEnd - intersectionStart)\n        if intersectionLength == 2\
    \ and is_prime(intersectionLength):\n            return \"YES\"\n        else:\n\
    \            return \"NO\"\n    else:\n        return \"NO\"", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if i[1] < j[1]\n        return false\n\
    \      elsif i[0] > j[0]\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2\
    \ if i1<=>i2\n    end\n  end\nend", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&)\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do\
    \ |i1|\n    interval2.each do |i2|\n      if i1 < i2\n        puts \"YES\"\n \
    \     else\n        puts \"NO\"\n      end\n    end\n  end\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return\
    \ \"YES\" : return \"NO\"\n    end\n  end\n  return \"NO\"\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1.first <= i2.first && i1.last\
    \ >= i2.last\n        return i1\n      end\n    end\n  end\n  return nil\nend",
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1[0] <= i2[0] && i1[1]\
    \ >= i2[1]\n    end\n  end\nend", "    interval1Start, interval1End = interval1\n\
    \    interval2Start, interval2End = interval2\n    \n    if interval1Start > interval1End:\n\
    \        return \"NO\"\n    elif interval2Start > interval2End:\n        return\
    \ \"NO\"\n    elif interval1Start >= interval2Start:\n        return \"NO\"\n\
    \    elif interval1End <= interval2End:\n        return \"NO\"\n    else:\n  \
    \      \n        intersectionLength = interval1End - interval1Start\n        \n\
    \        if interval1Start <= interval2Start and interval1End >= interval2End:\n\
    \            return \"YES\"\n        elif interval1Start <= interval2Start and\
    \ interval1End > interval2End:\n            return \"NO\"\n        elif interval1Start\
    \ > interval2Start and interval1End <= interval2End:\n            return \"NO\"\
    \n        elif interval1Start > interval2Start and interval1End > interval2End:\n\
    \            return \"YES\"\n        elif interval1Start <= interval2Start and\
    \ interval1End <= interval2End:\n            return \"YES\"\n        elif interval1Start\
    \ > interval2Start and interval1End > interval2End:\n            return \"YES\"\
    \n        elif interval1Start <= interval2Start and interval1End > interval2End:\n\
    \            return \"YES\"\n        elif interval1Start > interval2Start and\
    \ interval1End <= interval2End:\n            return \"YES\"\n        elif interval1Start\
    \ <= interval2Start and interval1End <= interval2End:\n            return \"YES\"\
    \n        elif interval1Start > interval2Start and interval1End > interval2End:\n\
    \            return \"YES\"\n        elif interval1Start <= interval2Start and\
    \ interval1End <= interval2End:\n            return \"YES\"\n        elif interval1Start\
    \ > interval2Start and interval1End > interval2End:\n            return \"YES\"\
    \n        elif interval1Start <= interval2Start and interval1End <= interval2End:\n\
    \            return \"YES\"\n        elif interval1Start > interval2Start and\
    \ interval1End > interval2End:\n            return \"YES\"\n        elif interval1Start\
    \ <= interval2Start and interval1End <= interval2End:\n            return \"YES\"\
    \n        elif interval1Start > interval2Start and interval1End > interval2End:\n\
    \            return \"YES\"\n        elif interval1Start <= interval2Start and\
    \ interval1End <= interval2End:\n            return \"YES\"\n        elif interval1Start\
    \ > interval2Start and interval1End > interval2End:\n            return \"YES\"\
    \n        elif interval1Start <= interval2Start and interval1End <= interval2End:\n\
    \            return \"YES\"", "    interval1Start, interval1End = interval1\n\
    \    interval2Start, interval2End = interval2\n    if interval1Start > interval1End\n\
    \        return \"NO\"\n    if interval2Start > interval2End\n        return \"\
    NO\"\n    if interval1Start >= interval2Start\n        return \"NO\"\n    if interval1End\
    \ <= interval2End\n        return \"NO\"\n    if interval1Start <= interval2Start\n\
    \        return \"NO\"\n    if interval1Start <= interval2End\n        return\
    \ \"NO\"\n    if interval1End >= interval2End\n        return \"NO\"\n    if interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n        return \"NO\"\n\
    \    if interval1Start <= interval2Start and interval1End <= interval2End\n  \
    \      return \"NO\"\n    if interval1Start >= interval2Start and interval1End\
    \ >= interval2End\n        return \"NO\"\n    if interval1Start >= interval2Start\
    \ and interval1End <= interval2End\n        return \"NO\"\n    if interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n        return \"NO\"\n\
    \    if interval1Start <= interval2Start and interval1End <= interval2End\n  \
    \      return \"NO\"\n    if interval1Start >= interval2Start and interval1End\
    \ <= interval2End\n        return \"NO\"\n    if interval1Start >= interval2Start\
    \ and interval1End >= interval2End\n        return \"NO\"\n    if interval1Start\
    \ <= interval2Start and interval1End <= interval2End\n        return \"NO\"\n\
    \    if interval1Start <= interval2Start and interval1End >= interval2End\n  \
    \      return \"NO\"\n    if interval1Start >= interval2Start and interval1End\
    \ <= interval2End\n        return \"NO\"\n    if interval1Start >= interval2Start\
    \ and interval1End >= interval2End\n        return \"NO\"\n    if interval1Start\
    \ <= interval2Start and interval1End <= interval2End\n        return \"NO\"\n\
    \    if interval1Start <= interval2Start and interval1End >= interval2End\n  \
    \      return \"NO\"\n    if interval1Start >= interval2Start and interval1End\
    \ <= interval2End\n        return \"NO\"\n    if interval1Start >= interval2Start\
    \ and interval1End >= interval2End\n        return \"NO\"\n    if interval1Start\
    \ <= interval2Start and interval1End <= interval2End\n        return \"NO\"\n\
    \    if interval1Start <= interval2Start and interval1End >= interval2End\n  \
    \      return \"NO\"\n    if interval1Start >= interval2Start and interval1End\
    \ <= interval2End\n        return \"NO\"\n    if interval", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0]<=j[0]\
    \ && i[1]>=j[1])\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] < interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] < interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if interval1[0] > interval1[1] else interval1[1]\n\
    \  interval2[0] = interval2[0] if interval2[0] > interval2[1] else interval2[1]\n\
    \  \n  interval1[0] = interval1[0] if ", "  interval1[0] = interval1[0].to_i\n\
    \  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1]\
    \ = interval2[1].to_i\n  \n  interval1[0] = interval1[0].to_i\n  interval1[1]\
    \ = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1..i2 if i1.include?(i2)\n    end\n  end\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      if i1[1] < i2[0]\n\
    \        return false\n      elsif i1[1] > i2[1]\n        return false\n     \
    \ end\n    end\n  end\n  return true\nend", "  \n  interval1.each do |i1|\n  \
    \  interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n  \n  interval1.length==interval2.length\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n\
    \    end\n  end\nend", "    \n    interval1 = interval1.sort\n    interval2 =\
    \ interval2.sort\n    \n    interval1[0] = interval1[0] if interval1[0] < interval1[1]\
    \ else interval1[1]\n    interval2[0] = interval2[0] if interval2[0] < interval2[1]\
    \ else interval2[1]\n    \n    intersection = []\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n    \n    interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n    interval2[0] = interval2",
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      if i1 <= i2\n        return i1\n      end\n    end\n  end\n  return \"\
    NO\"\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1\
    \ < i2\n        puts \"YES\"\n      else\n        puts \"NO\"\n      end\n   \
    \ end\n  end\nend", "  interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ && interval1[1] > interval2[0] || interval1[0] > interval1[1] && interval2[0]\
    \ > interval2[1] && interval1[1] < interval2[0] || interval1[0] > interval1[1]\
    \ && interval2[0] < interval2[1] && interval1[1] > interval2[0]\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return \"NO\" : return \"\
    YES\"\n    end\n  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do\
    \ |i1|\n    interval2.each do |i2|\n      if i1[1] >= i2[0]\n        return i1\n\
    \      end\n    end\n  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1 < i2\n        puts \"NO\"\n      elsif\
    \ i1 > i2\n        puts \"NO\"\n      else\n        puts \"YES\"\n      end\n\
    \    end\n  end\nend", "    \n    interval1_start, interval1_end = interval1\n\
    \    interval2_start, interval2_end = interval2\n    \n    if interval1_start\
    \ > interval1_end:\n        interval1_start, interval1_end = interval1_end, interval1_start\n\
    \    if interval2_start > interval2_end:\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start\n    \n    intersection_length = interval1_end\
    \ - interval2_start\n    \n    if intersection_length == interval1_end or intersection_length\
    \ == interval2_end:\n        return \"NO\"\n    \n    if intersection_length ==\
    \ 1:\n        return \"YES\"\n    \n    if intersection_length == 2:\n       \
    \ return \"YES\" if interval1_start == interval2_start else \"NO\"\n    \n   \
    \ if intersection_length == 3:\n        return \"YES\" if interval1_start == interval2_start\
    \ or interval1_end == interval2_end else \"NO\"\n    \n    if intersection_length\
    \ == 4:\n        return \"YES\" if interval1_start == interval2_start or interval1_end\
    \ == interval2_end or interval2_start == interval1_end else \"NO\"\n    \n   \
    \ if intersection_length == 5:\n        return \"YES\" if interval1_start == interval2_start\
    \ or interval1_end == interval2_end or interval2_start == interval1_end or interval2_end\
    \ == interval1_start else \"NO\"\n    \n    if intersection_length == 6:\n   \
    \     return \"YES\" if interval1_start == interval2_start or interval1_end ==\
    \ interval2_end or interval2_start == interval1_end or interval2_end == interval1_start\
    \ or interval1_end == interval2_end else \"NO\"\n    \n    if intersection_length\
    \ == 7:\n        return \"YES\" if interval1_start == interval2_start or interval1_end\
    \ == interval2_end or interval2_start == interval1_end or interval2_end == interval1_start\
    \ or interval1_end == interval2_end or interval2_start == interval1_end or interval1_end\
    \ == interval2_end or interval2_end == interval1_start else \"NO\"\n    \n   \
    \ if intersection_length == 8:\n        return \"YES\" if interval1_start == interval2_start\
    \ or interval1_end == interval2_end or interval2_start == interval1_end or interval2_end\
    \ == interval1_start or interval1_end == interval2_end or interval2_start == interval1_end\
    \ or interval1_end == interval2_end or interval2_end == interval1_start or interval1_end\
    \ == interval2_end or interval2_end == interval1_start or interval1_end == interval2_end\
    \ else \"NO\"\n    \n    if intersection_length == 9:\n        return \"YES\"\
    \ if interval1_start == interval2_", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<i2 ? return \"NO\" : return \"YES\"\n    end\n  end\n  return\
    \ \"NO\"\nend", "  \n  # Your code here\n  \nend", "  interval1.each do |i|\n\
    \    interval2.each do |j|\n      if i[1] < j[1]\n        return false if i[0]\
    \ < j[0]\n      end\n    end\n  end\n  return true\nend", "  interval1.each do\
    \ |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1.upto(i2)\
    \ do |i|\n        return true if i1.include?(i) && i2.include?(i)\n      end\n\
    \    end\n  end\n  return false\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1Start,\
    \ interval1End = interval1\n  interval2Start, interval2End = interval2\n  \n \
    \ if(interval1Start > interval1End)\n    return \"NO\"\n  if(interval2Start >\
    \ interval2End)\n    return \"NO\"\n  \n  if(interval1Start <= interval2Start\
    \ and interval1End >= interval2End)\n    return \"YES\"\n  if(interval1Start <=\
    \ interval2End or interval1End >= interval2Start)\n    return \"NO\"\n  \n  if(interval1Start\
    \ <= interval2Start and interval1End >= interval2End)\n    return \"YES\"\n  if(interval1Start\
    \ <= interval2Start and interval1End <= interval2End)\n    return \"YES\"\n  if(interval1Start\
    \ >= interval2Start and interval1End <= interval2End)\n    return \"YES\"\n  if(interval1Start\
    \ >= interval2Start and interval1End >= interval2End)\n    return \"YES\"\n  \n\
    \  if(interval1Start <= interval2Start and interval1End <= interval2End)\n   \
    \ return \"YES\"\n  if(interval1Start >= interval2Start and interval1End <= interval2End)\n\
    \    return \"YES\"\n  if(interval1Start >= interval2Start and interval1End >=\
    \ interval2End)\n    return \"YES\"\n  \n  if(interval1Start <= interval2Start\
    \ and interval1End >= interval2End)\n    return \"YES\"\n  if(interval1Start >=\
    \ interval2Start and interval1End <= interval2End)\n    return \"YES\"\n  if(interval1Start\
    \ >= interval2Start and interval1End >= interval2End)\n    return \"YES\"\n  \n\
    \  if(interval1Start <= interval2Start and interval1End <= interval2End)\n   \
    \ return \"YES\"\n  if(interval1Start >= interval2Start and interval1End <= interval2End)\n\
    \    return \"YES\"\n  if(interval1Start >= interval2Start and interval1End >=\
    \ interval2End)\n    return \"YES\"\n  \n  if(interval1Start <= interval2Start\
    \ and interval1End <= interval2End)\n    return \"YES\"\n  if(interval1Start >=\
    \ interval2Start and interval1End <= interval2End)\n    return \"YES\"\n  if(interval1Start\
    \ >= interval2Start and interval1End >= interval2End)\n    return \"YES\"\n  \n\
    \  if(interval1Start <= interval2Start and interval1End <= interval2End)\n   \
    \ return \"YES\"\n  if(interval1Start >= interval2Start ", "  \n  # Your code\
    \ here\n  \nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n    \
    \  i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i|\n    interval2.each\
    \ do |j|\n      if i[0] < j[0]\n        return false\n      elsif i[1] > j[1]\n\
    \        return false\n      end\n    end\n  end\n  true\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1 < i2\n\
    \        return i1\n      elsif i1 > i2\n        return i2\n      end\n    end\n\
    \  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each do\
    \ |i2|\n      if i1 < i2\n        return i1 if i1 == i2\n      end\n    end\n\
    \  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each do\
    \ |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n    end\n  end\n\
    end", "  \n  # TODO: Write your code here\n  \nend", "    \n    interval1_start\
    \ = interval1[0]\n    interval1_end = interval1[1]\n    interval2_start = interval2[0]\n\
    \    interval2_end = interval2[1]\n    \n    intersection_start = interval1_start\
    \ if interval1_start <= interval2_start else interval2_start\n    intersection_end\
    \ = interval1_end if interval1_end <= interval2_end else interval2_end\n    \n\
    \    intersection_length = intersection_end - intersection_start\n    \n    if\
    \ intersection_length == interval1_end - interval1_start:\n        return \"YES\"\
    \n    else:\n        return \"NO\"\n    ", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do\
    \ |i1|\n    interval2.each do |i2|\n      i1[0] <= i2[0] && i1[1] >= i2[1]\n \
    \   end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] && interval1[1] > interval2[0] || interval1[0]\
    \ > interval1[1] && interval2[0] > interval2[1] && interval1[1] < interval2[0]\
    \ || interval1[0] > interval1[1] && interval2[0] < interval2[1] && interval1[1]\
    \ > interval2[0]\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n \
    \   interval2.each do |i2|\n      if i1 < i2\n        return i1\n      end\n \
    \   end\n  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.reduce(:&)\n\
    \  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\n  interval2.reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&)\n  interval2.reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n  interval2.reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n  interval2.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval2.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval2.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval2.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval2.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval2.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(",
  "    \n    interval1 = [interval1[0], interval1[1]] if interval1[0] < interval1[1]\
    \ else [interval1[1], interval1[0]]\n    interval2 = [interval2[0], interval2[1]]\
    \ if interval2[0] < interval2[1] else [interval2[1], interval2[0]]\n    \n   \
    \ intersection = [interval1[0], interval1[1]]\n    \n    for interval in interval2:\n\
    \        if interval > interval1[1]:\n            intersection[1] = interval\n\
    \        elif interval < interval1[0]:\n            intersection[0] = interval\n\
    \    \n    if intersection[0] > intersection[1]:\n        return \"NO\"\n    else:\n\
    \        return \"YES\"", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      if i1 < i2\n        puts \"YES\"\n      else\n        puts \"NO\"\n   \
    \   end\n    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do\
    \ |i2|\n      if i1 < i2\n        return i1 if i1 == i2\n      end\n    end\n\
    \  end\n  return \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each do\
    \ |i2|\n      i1.upto(i2) do |i|\n        return true if i1.include?(i) && i2.include?(i)\n\
    \      end\n    end\n  end\n  return false\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1[1] < i2[0]\n        return false\n  \
    \    elsif i1[0] > i2[1]\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  \n  interval1.each do |i1|\n    interval2.each do |i2|\n    \
    \  i1<=>i2 if i1<=>i2\n    end\n  end\n  \n  interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && interval1.length==interval2.length && interval1.length==interval2.length\
    \ && ", "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1[0]\
    \ < i2[0] and i1[1] > i2[1]\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  \n  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n \
    \   interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n    end\n  end\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n\
    \    end\n  end\nend", "  \n  interval1 = interval1.sort\n  interval2 = interval2.sort\n\
    \  \n  intersection = []\n  \n  for i in interval1\n    \n    if interval2.include?(i)\n\
    \      \n      intersection.push(i)\n      \n    end\n  end\n  \n  if intersection.length\
    \ == 1\n    return \"NO\"\n  elsif intersection.length == 2\n    return \"YES\"\
    \n  end\n  \n  for i in intersection\n    \n    if i.include?(intersection.last)\n\
    \      \n      return \"YES\"\n    end\n  end\n  \n  return \"NO\"\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1]\
    \ && i[0] < j[0])\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n\
    \  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n\
    \  if interval1[0] > interval1[1]\n    interval1[0], interval1[1] = interval1[1],\
    \ interval1[0]\n  end\n  \n  if interval2[0] > interval2[1]\n    interval2[0],\
    \ interval2[1] = interval2[1], interval2[0]\n  end\n  \n  if interval1[1] < interval2[0]\n\
    \    return \"NO\"\n  end\n  \n  if interval2[1] < interval1[0]\n    return \"\
    NO\"\n  end\n  \n  if interval1[0] == interval1[1]\n    return \"NO\"\n  end\n\
    \  \n  if interval2[0] == interval2[1]\n    return \"NO\"\n  end\n  \n  if interval1[1]\
    \ > interval2[1]\n    return \"NO\"\n  end\n  \n  if interval2[1] > interval1[1]\n\
    \    return \"NO\"\n  end\n  \n  if interval1[1] < interval2[0]\n    return \"\
    NO\"\n  end\n  \n  if interval2[1] < interval1[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[0] == interval1[1]\n    return \"NO\"\n  end\n  \n  if interval2[0]\
    \ == interval2[1]\n    return \"NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n\
    \    return \"NO\"\n  end\n  \n  if interval2[1] > interval1[1]\n    return \"\
    NO\"\n  end\n  \n  if interval1[1] < interval2[0]\n    return \"NO\"\n  end\n\
    \  \n  if interval2[1] < interval1[0]\n    return \"NO\"\n  end\n  \n  if interval1[0]\
    \ == interval1[1]\n    return \"NO\"\n  end\n  \n  if interval2[0] == interval2[1]\n\
    \    return \"NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n    return \"\
    NO\"\n  end\n  \n  if interval2[1] > interval1[1]\n    return \"NO\"\n  end\n\
    \  \n  if interval1[1] < interval2[0]\n    return \"NO\"\n  end\n  \n  if interval2[1]\
    \ < interval1[0]\n    return \"NO\"\n  end\n  \n  if interval1[0] == interval1[1]\n\
    \    return \"NO\"\n  end\n  \n  if interval2[0] == interval2[1]\n    return \"\
    NO\"\n  end\n  \n  if interval1[1] > interval2[1]\n    return \"NO\"\n  end\n\
    \  \n  if interval2[1] > interval1[1]\n    return \"NO\"\n  end\n  \n  if interval1[1]\
    \ < interval2[0]\n    return \"NO\"\n  end\n  ", "  interval1.each do |i1|\n \
    \   interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n    end\n  end\n\
    end", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&)\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      if i1 >= i2\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  interval1.each do |i1|\n    interval2.each\
    \ do |i2|\n      i1<i2 ? return \"NO\" : return \"YES\"\n    end\n  end\n  return\
    \ \"NO\"\nend", "  interval1[0] < interval2[1] and interval1[1] > interval2[0]\
    \ or interval1[0] > interval2[1] and interval1[1] < interval2[0]\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return \"NO\" : return \"\
    YES\"\n    end\n  end\n  return \"NO\"\nend", "    interval1.each do |i1|\n  \
    \      interval2.each do |i2|\n            if i1[1] < i2[0]\n                return\
    \ \"NO\"\n            elsif i1[0] > i2[1]\n                return \"NO\"\n   \
    \         end\n        end\n    end\n    return \"YES\"\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      if i1.first <= i2.first\
    \ && i1.last >= i2.last\n        return i1\n      end\n    end\n  end\n  return\
    \ nil\nend", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  interval1.each do |i1|\n \
    \   interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n\
    \    end\n  end\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n\
    \      i1<=>i2 if i1<=>i2\n    end\n  end\nend", "  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] > interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] > interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0]\
    \ if interval1[0] < interval1[1] else interval1[1]\n  interval2[0] = interval2[0]\
    \ if interval2[0] < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1",
  "  \n  interval1.each do |i1|\n    interval2.each do |i2|\n      \n      if i1.first\
    \ <= i2.first and i1.last >= i2.last\n        return true\n      end\n    end\n\
    \  end\n  \n  return false\nend", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1..i2 if i1.include?(i2)\n\
    \    end\n  end\nend", "  interval1.each do |i|\n    interval2.each do |j|\n \
    \     break if i[1] < j[1]\n    end\n    break if i[1] > j[1]\n  end\n  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      break if i[0] < j[0]\n    end\n   \
    \ break if i[0] > j[0]\n  end\n  interval1.size == interval2.size ? \"YES\" :\
    \ \"NO\"\nend", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1..i2\
    \ if i1..i2.include?(i1..i2)\n    end\n  end\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\nend", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n\
    \    end\n  end\nend", "  \n  interval1 = interval1.sort\n  interval2 = interval2.sort\n\
    \  \n  if interval1[1] < interval2[0]\n    interval1, interval2 = interval2, interval1\n\
    \  end\n  \n  result = []\n  \n  for i in interval1\n    if interval2.include?(i)\n\
    \      result << i\n    end\n  end\n  \n  if result.size == 0\n    return \"NO\"\
    \n  end\n  \n  result.each do |i|\n    if i.include?(interval2[1])\n      return\
    \ \"YES\"\n    end\n  end\n  \n  return \"NO\"\nend", "  interval1.each do |i1|\n\
    \    interval2.each do |i2|\n      i1.upto(i2) do |i|\n        return true if\
    \ i1.include?(i)\n      end\n    end\n  end\n  return false\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return\
    \ \"YES\" : return \"NO\"\n    end\n  end\n  return \"NO\"\nend", "  interval1[0]\
    \ = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n\
    \  interval2[1] = interval2[1].to_i\n  \n  result = []\n  \n  for i in interval1..interval2\n\
    \    if i[0] == i[1]\n      result << i\n    end\n  end\n  \n  if result.size\
    \ == 0\n    return \"NO\"\n  end\n  \n  for i in result\n    if i.size == 2\n\
    \      if i[0] == i[1]\n        return \"YES\"\n      end\n    end\n  end\n  \n\
    \  return \"NO\"\nend", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(",
  "  \n  interval1[0] < interval2[0] && interval1[1] > interval2[1]\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "    \n    # Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0]\
    \ = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n  interval1[0]\
    \ = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n\
    \  interval2[1] = interval2[1].to_i\n  \n  interval1[0] = interval1[0].to_i\n\
    \  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1]\
    \ = interval2[1].to_i\n  \n  interval1[0] = interval1[0].to_i\n  interval1[1]\
    \ = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n\
    \  \n  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n\
    \  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n\
    \  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0]\
    \ = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n  interval1[0]\
    \ = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n\
    \  interval2[1] = interval2[1].to_i\n  \n  interval1[0] = interval1[0].to_i\n\
    \  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1]\
    \ = interval2[1].to_i\n  \n  interval1[0] = interval1[0].to_i\n  interval1[1]\
    \ = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n\
    \  \n  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n\
    \  interval2[0] = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n\
    \  interval1[0] = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0]\
    \ = interval2[0].to_i\n  interval2[1] = interval2[1].to_i\n  \n  interval1[0]\
    \ = interval1[0].to_i\n  interval1[1] = interval1[1].to_i\n  interval2[0] = interval2[0].to_i\n\
    \  interval2[1] = interval2[1].to_i\n  \n  interval1[0] = interval1[0].to_", " \
    \ interval1.each do |i1|\n    interval2.each do |i2|\n      i1<i2 ? return \"\
    NO\" : return \"YES\"\n    end\n  end\n  return \"NO\"\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1 > i2\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", '  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(',
  "  interval1[0] < interval1[1] and interval2[0] < interval2[1]\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.reduce(:&)\n  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&)\n  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&)\n\
    \  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && i[0]\
    \ < j[0])\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  interval1.each do |i|\n    interval2.each do |j|\n      if(i[0] >= j[0] && i[1]\
    \ <= j[1])\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    interval1Start, interval1End = interval1\n    interval2Start, interval2End\
    \ = interval2\n    \n    if interval1Start >= interval2Start or interval1End <=\
    \ interval2End:\n        return \"NO\"\n    \n    intersectionStart = interval1Start\n\
    \    intersectionEnd = interval1End\n    \n    while intersectionStart <= intersectionEnd:\n\
    \        if interval2Start <= intersectionStart and intersectionStart <= interval2End:\n\
    \            intersectionStart = intersectionStart + 1\n        elif interval2End\
    \ <= intersectionStart and intersectionStart <= interval2End:\n            intersectionEnd\
    \ = intersectionEnd - 1\n        else:\n            return \"NO\"\n    \n    if\
    \ interval1Start <= intersectionStart and intersectionStart <= interval1End:\n\
    \        return \"YES\"\n    else:\n        return \"NO\"", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      if i1 < i2\n        return false\
    \ if i1 == i2\n      end\n    end\n  end\n  return true\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  \n  interval1 = interval1.sort\n  interval2 = interval2.sort\n  \n  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      \n      if i1 < i2\n        \n  \
    \      if i1 == i2\n          return \"NO\"\n        else\n          return \"\
    YES\"\n        end\n      end\n    end\n  end\n  \n  return \"NO\"\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end", "  interval1.each do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if\
    \ i1<=>i2\n    end\n  end\nend", "  interval1[0] = interval1[0] if interval1[0]\
    \ < interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ < interval2[1] else interval2[1]\n  \n  interval1[0] = interval1[0] if interval1[0]\
    \ > interval1[1] else interval1[1]\n  interval2[0] = interval2[0] if interval2[0]\
    \ > interval2[1] else interval2[1]\n  \n  if interval1[0] >= interval2[0] and\
    \ interval1[1] <= interval2[1]\n    return \"YES\"\n  elsif interval1[0] <= interval2[0]\
    \ and interval1[1] >= interval2[1]\n    return \"NO\"\n  elsif interval1[0] >=\
    \ interval2[0] and interval1[1] >= interval2[1]\n    return \"NO\"\n  elsif interval1[0]\
    \ <= interval2[0] and interval1[1] <= interval2[1]\n    return \"NO\"\n  elsif\
    \ interval1[0] >= interval2[0] and interval1[1] >= interval2[1]\n    return \"\
    NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] <= interval2[0] and interval1[1] <= interval2[1]\n\
    \    return \"NO\"\n  elsif interval1[0] >= interval2[0] and interval1[1] >= interval2[1]\n\
    \    return \"NO\"", "  interval1.each do |i1|\n    interval2.each do |i2|\n \
    \     if i1[1] > i2[0]\n        return false\n      elsif i1[0] > i2[1]\n    \
    \    return false\n      end\n    end\n  end\n  return true\nend", "  interval1.reduce(:&)\n\
    \  interval2.reduce(:&)\n  interval1.reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(:&).reduce(",
  "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end\
    \ = interval2\n    \n    if interval1_start > interval1_end:\n        interval1_start,\
    \ interval1_end = interval1_end, interval1_start\n    if interval2_start > interval2_end:\n\
    \        interval2_start, interval2_end = interval2_end, interval2_start\n   \
    \ \n    intersection_length = interval1_end - interval1_start\n    \n    if interval2_start\
    \ < interval2_end:\n        interval2_start, interval2_end = interval2_end, interval2_start\n\
    \    \n    if interval1_start < interval1_end:\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start\n    \n    if interval1_start < interval2_start\
    \ and interval1_end > interval2_end:\n        return \"NO\"\n    elif interval1_start\
    \ > interval2_start and interval1_end < interval2_end:\n        return \"NO\"\n\
    \    elif interval1_start == interval2_start and interval1_end == interval2_end:\n\
    \        return \"YES\"\n    elif interval1_start < interval2_start and interval1_end\
    \ > interval2_end:\n        return \"NO\"\n    elif interval1_start > interval2_start\
    \ and interval1_end < interval2_end:\n        return \"NO\"\n    elif interval1_start\
    \ == interval2_start and interval1_end == interval2_end:\n        return \"YES\"\
    \n    elif interval1_start < interval2_start and interval1_end > interval2_end:\n\
    \        return \"NO\"\n    elif interval1_start > interval2_start and interval1_end\
    \ < interval2_end:\n        return \"NO\"\n    elif interval1_start == interval2_start\
    \ and interval1_end == interval2_end:\n        return \"YES\"\n    elif interval1_start\
    \ < interval2_start and interval1_end > interval2_end:\n        return \"NO\"\n\
    \    elif interval1_start > interval2_start and interval1_end < interval2_end:\n\
    \        return \"NO\"\n    elif interval1_start == interval2_start and interval1_end\
    \ == interval2_end:\n        return \"YES\"\n    elif interval1_start < interval2_start\
    \ and interval1_end > interval2_end:\n        return \"NO\"\n    elif interval1_start\
    \ > interval2_start and interval1_end < interval2_end:\n        return \"NO\"\n\
    \    elif interval1_start == interval2_start and interval1_end == interval2_end:\n\
    \        return \"YES\"\n    elif interval1_start < interval2_start and interval1_end\
    \ > interval2_end:\n        return \"NO\"\n    elif interval1_start > interval2_start\
    \ and interval1_end < interval2_end:\n        return \"NO\"\n    elif interval1_start\
    \ == interval2_start and interval1_end == interval2_end:\n        return \"YES\"\
    \n    elif interval1_start < interval2_start and interval1_end > interval2_end:\n\
    \        return \"NO\"", "  interval1[0] < interval2[1] and interval2[0] < interval1[1]\n\
    end", "  \n  interval1 = interval1.sort\n  interval2 = interval2.sort\n  \n  intersection\
    \ = []\n  \n  for i in interval1\n    if interval2.include? i\n      intersection\
    \ << i\n    end\n  end\n  \n  if intersection.length == 1\n    return \"NO\"\n\
    \  elsif intersection.length == 2\n    return \"YES\"\n  end\nend", "  interval1.each\
    \ do |i|\n    interval2.each do |j|\n      if(i[1] < j[1] && i[0] < j[0]) \n \
    \       return true\n      end\n    end\n  end\n  return false\nend", "  interval1.each\
    \ do |i1|\n    interval2.each do |i2|\n      i1<=>i2 if i1<=>i2\n    end\n  end\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
