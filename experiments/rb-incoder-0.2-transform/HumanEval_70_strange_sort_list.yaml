name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>>\
  \ strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if\
    \ i != lst.index(lst.min) && i != lst.index(lst.max)\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each do |i|\n    break if i.zero?\n    break if i.is_a?(Integer)\n    break\
    \ if i.is_a?(Float)\n    break if i.is_a?(String)\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e - i\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 && lst[i-1] > e\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n    lst[i] = lst[i\
    \ - 1] if i > 0 && lst[i - 1] > x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e != lst[i-1]\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend",
  "  lst.sort!\n  lst.each_with_index do |item, index|\n    lst[index] = item\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each do |i|\n    break if i == lst[0]\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i]\
    \ = e if i > 0 and lst[i-1] > e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    if i == 0\n      lst[i] = e\n      next\n    end\n    lst[i]\
    \ = e if e < lst[i - 1]\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nI like your solution. Can you explain why you used `each_with_index`?\
    \ I thought `each_with_index` was only used to iterate over an array. Why did\
    \ you use it here?\n<|/ c |>\n<| c |>\n`each_with_index` gives you the index and\
    \ the element at the same time. `sort!` sorts the array in place, so you don't\
    \ need to return anything. `each_with_index` gives you the index and the element\
    \ at the same time. `sort!` sorts the array in place, so you don't need to return\
    \ anything. `each_with_index` gives you the index and the element at the same\
    \ time. `sort!` sorts the array in place, so you don't need to return anything.\
    \ `each_with_index` gives you the index and the element at the same time. `sort!`\
    \ sorts the array in place, so you don't need to return anything.\n<|/ c |>\n\
    <| c |>\nI see. So `each_with_index` gives you the index and the element at the\
    \ same time. `sort!` sorts the array in place, so you don't need to return anything.\
    \ `each_with_index` gives you the index and the element at the same time. `sort!`\
    \ sorts the array in place, so you don't need to return anything. `each_with_index`\
    \ gives you the index and the element at the same time. `sort!` sorts the array\
    \ in place, so you don't need to return anything.\n<|/ c |>\n<| c |>\n`each_with_index`\
    \ gives you the index and the element at the same time. `sort!` sorts the array\
    \ in place, so you don't need to return anything. `each_with_index` gives you\
    \ the index and the element at the same time. `sort!` sorts the array in place,\
    \ so you don't need to return anything. `each_with_index` gives you the index\
    \ and the element at the same time. `sort!` sorts the array in place, so you don't\
    \ need to return anything.\n<|/ c |>\n<| c |>\n`each_with_index` gives you the\
    \ index and the element at the same time. `sort!` sorts the array in place, so\
    \ you don't need to return anything. `each_with_index` gives you the index and\
    \ the element at the same time. `sort!` sorts the array in place, so you don't\
    \ need to return anything. `each_with_index` gives you the ", "  lst.sort!\n \
    \ lst.each_with_index do |x, i|\n    lst[i] = lst[i].to_s\n  end\n  lst\nend",
  "  lst.sort!\n  lst.each_with_index do |value, index|\n    lst[index] = value if\
    \ index != lst.size - 1\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |val, index|\n    lst[index] = val if index != lst.size - 1\n  end\n  lst\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = lst[i].to_s\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i]\
    \ = e\n  end\n  lst\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
