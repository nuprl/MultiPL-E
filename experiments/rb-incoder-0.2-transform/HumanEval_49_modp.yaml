name: HumanEval_49_modp
language: rb
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n\
  # >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3,\
  \ 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n\
  \    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2,\
  \ candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8,\
  \ candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4,\
  \ candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n"
completions: ["  return ((n % p) + p) % p\nend", "  n = n.to_i\n  p = p.to_i\n  if\
    \ n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n += p\n\
    \  return n\nend", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p',
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) +\
    \ p) % p\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend",
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) +\
    \ p) % p\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend",
  '  return ((n & -p) ^ n) & p', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n\
    \ -= p\n    p = p % n\n  end\n  n\nend", '  return ((n % p) + p) % p', "  n =\
    \ n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  n\n\
    end", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = (n %\
    \ p).to_i\n  return n if n < p else p\nend", '  return ((n % p) + p) % p', " \
    \ n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p = p >> 1\n  end\n\
    \  n\nend", '  return ((n % p) + p) % p', "  n = (n or 0) % p\n  n = (n and ((n\
    \ / p) or 1)) * (p or 1)\n  return n\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', "  return ((n & -p) == n) ? n : ((n & -p) == p) ? p : ((n\
    \ & -p) == (p ^ n)) ? p ^ n : p\nend", "  return ((n % p) + p) % p\nend", '  return
    ((n % p) + p) % p', "  n = (n % p).to_i\n  p %= n\n  n -= p\n  n %= p\n  n -=\
    \ p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n\
    \ -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n\
    \  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %=\
    \ p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n\
    \ %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n\
    \  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -=\
    \ p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n\
    \ -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n\
    \  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %=\
    \ p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n\
    \ %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n\
    \  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -=\
    \ p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= ", '  return ((n % p) + p)
    % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n > 0\n\
    \    n -= p\n    p = p % n\n  end\n  return n\nend", '  return ((n % p) + p) %
    p', "  n = (n or 0) % p\n  n = (n < 0) ? p + n : n\n  n = (n > p) ? p : n\n  n\n\
    end", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    p -= 1\n  while p > 0\n  \
    \  q = n / p\n    n -= q * p\n    p -= 1\n  end\n  return n\nend", '  return ((n
    % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    p -= 1\n  while\
    \ p > 0\n    q = n / p\n    n -= q * p\n    p -= 1\n  end\n  return n\nend", '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return ((n % p) + p)
    % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n != 0\n    n >>= 1\n    p -=\
    \ 1\n  end\n  p += 1\n  while p >= 2\n    p >>= 1\n  end\n  return p\nend", '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return ((n % p) + p)
    % p', "  n = (n % p).to_i\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n\
    \  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -=\
    \ n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p\
    \ -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n\
    \  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %=\
    \ p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n\
    \ %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n\
    \  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -=\
    \ n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p\
    \ -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n\
    \  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %=\
    \ p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n\
    \ %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n\
    \  n %= p\n  p -= n\n  n %= p\n  p -= "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
