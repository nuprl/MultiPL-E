name: HumanEval_49_modp
language: rb
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n\
  # >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3,\
  \ 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n\
  \    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2,\
  \ candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8,\
  \ candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4,\
  \ candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n"
completions: ["  return ((n % p) + p) % p\nend", "  n = n.to_i\n  p = p.to_i\n  if\
    \ n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n += p\n\
    \  return n\nend", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p',
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) +\
    \ p) % p\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend",
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) +\
    \ p) % p\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend",
  '  return ((n & -p) ^ n) & p', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n\
    \ -= p\n    p = p % n\n  end\n  n\nend", '  return ((n % p) + p) % p', "  n =\
    \ n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  n\n\
    end", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = (n %\
    \ p).to_i\n  return n if n < p else p\nend", '  return ((n % p) + p) % p', " \
    \ n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p = p >> 1\n  end\n\
    \  n\nend", '  return ((n % p) + p) % p', "  n = (n or 0) % p\n  n = (n and ((n\
    \ / p) or 1)) * (p or 1)\n  return n\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', "  return ((n & -p) == n) ? n : ((n & -p) == p) ? p : ((n\
    \ & -p) == (p ^ n)) ? p ^ n : p\nend", "  return ((n % p) + p) % p\nend", '  return
    ((n % p) + p) % p', "  n = (n % p).to_i\n  p %= n\n  n -= p\n  n %= p\n  n -=\
    \ p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n\
    \ -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n\
    \  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %=\
    \ p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n\
    \ %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n\
    \  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -=\
    \ p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n\
    \ -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n\
    \  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %=\
    \ p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n\
    \ %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n\
    \  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= p\n  n -=\
    \ p\n  n %= p\n  n -= p\n  n %= p\n  n -= p\n  n %= ", '  return ((n % p) + p)
    % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n > 0\n\
    \    n -= p\n    p = p % n\n  end\n  return n\nend", '  return ((n % p) + p) %
    p', "  n = (n or 0) % p\n  n = (n < 0) ? p + n : n\n  n = (n > p) ? p : n\n  n\n\
    end", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    p -= 1\n  while p > 0\n  \
    \  q = n / p\n    n -= q * p\n    p -= 1\n  end\n  return n\nend", '  return ((n
    % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    p -= 1\n  while\
    \ p > 0\n    q = n / p\n    n -= q * p\n    p -= 1\n  end\n  return n\nend", '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return ((n % p) + p)
    % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n != 0\n    n >>= 1\n    p -=\
    \ 1\n  end\n  p += 1\n  while p >= 2\n    p >>= 1\n  end\n  return p\nend", '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return ((n % p) + p)
    % p', "  n = (n % p).to_i\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n\
    \  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -=\
    \ n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p\
    \ -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n\
    \  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %=\
    \ p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n\
    \ %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n\
    \  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -=\
    \ n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p\
    \ -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n\
    \  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %=\
    \ p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n\
    \ %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n  n %= p\n  p -= n\n\
    \  n %= p\n  p -= n\n  n %= p\n  p -= ", "  n = n.to_i\n  p = p.to_i\n  if n ==\
    \ 0\n    return 0\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  return n\n\
    end", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return ((n % p) + p)
    % p', "  n = n.to_i\n  p = p.to_i\n  r = n % p\n  if r == 0\n    r == p\n  else\n\
    \    r\n  end\nend", "  n = n.to_i\n  p = p.to_i\n  r = n.modulo(p)\n  r.zero?\
    \ ? 1 : r\nend", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while\
    \ n > 0\n    n -= p\n    p = p >> 1\n  end\n  return n\nend", "  n = (n % p +\
    \ p) % p\n  return n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p =\
    \ p.to_i\n  while n > p\n    n -= p\n    p -= 1\n  end\n  n\nend", '  return ((n
    % p) + p) % p', '  return ((n % p) + p) % p', "  n = (n % p + p) % p\n  if n <\
    \ 0\n    n += p\n  end\n  return n\nend", '  return ((n % p) + p) % p', "  return\
    \ ((n % p) + p) % p\nend", "  return ((n % p) + p) % p\nend", "  n = n.to_i\n\
    \  p = p.to_i\n  r = n % p\n  if r == 0\n    r == p\n  else\n    r\n  end\nend",
  "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    p -= 1\n  while p > 1\n    p -= 1\n\
    \    n %= p\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return\
    \ 0\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  return p\nend", '  return
    ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n \
    \ while n != 0\n    n >>= 1\n    p >>= 1\n    if n & 1 == 1\n      n -= 1\n  \
    \    p -= 1\n    end\n  end\n  return p\nend", "  n = (n.to_i if n.is_a?(Fixnum)\
    \ else\n       n.to_s if n.is_a?(String) else\n       n.to_f if n.is_a?(BigDecimal)\
    \ else\n       n.to_s if n.is_a?(Numeric) else\n       n.to_s)\n  p ||= 1\n  n\
    \ = n.to_i\n  p ||= 1\n  while p > 1\n    p >>= 1\n    n |= n >> p\n  end\n  n\n\
    end", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n
    % p) + p) % p', '  return ((n % p) + p) % p', "  n = (n % p).to_i\n  return n\
    \ if n < p else p\nend", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return\
    \ 0\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  return p\nend", "  return\
    \ ((n % p) + p) % p\nend", '  return ((n % p) + p) % p', '  return ((n % p) +
    p) % p', "  return ((n & -p) == 0) ^ ((n & p) == (p & -n))\nend", '  return ((n
    % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n & -p) % p) if n else
    0', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p %= n\n  end\n\
    \  n\nend", '  return ((n % p) + p) % p', "  n = (n.to_i if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_f if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?(String) else\n       n.to_s if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(Fixnum) else\n\
    \       n.to_s if n.is_a?", '  return ((n % p) + p) % p', '  return ((n % p) +
    p) % p', "  n = n.to_i\n  p = p.to_i\n  r = n % p\n  if r == 0\n    r == p\n \
    \ else\n    r\n  end\nend", "  return ((n % p) + p) % p\nend", "  return ((n %\
    \ p) + p) % p\nend", "  n = (n % p).to_i\n  if n < 0\n    n += p\n  end\n  n\n\
    end", '  return ((n % p) + p) % p', "  return ((n & -p) == 0) ^ ((n & p) == (p\
    \ & -n))\nend", "  return ((n & -p) == 0) ^ (n & n)\nend", "  return ((n % p)\
    \ + p) % p\nend", "  return ((n % p) + p) % p\nend", '  return ((n % p) + p) %
    p', '  return ((n % p) + p) % p', "  n = (n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_s if n.kind_of?(Bignum))\n  p = p.to_i\n  if n == 0\n    0\n  elsif\
    \ p == 0\n    1\n  else\n    (p % n).to_i\n  end\nend", '  return ((n % p) + p)
    % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n > p\n\
    \    n -= p\n  while n < 0\n    n += p\n  return n\nend", "  n = (n % p + p) %\
    \ p\n  if n < 0\n    n += p\n  end\n  n\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p',
  "  n = (n.to_i if n.respond_to?(:to_i)) ? n : n.to_s\n  p = (p.to_i if p.respond_to?(:to_i))\
    \ ? p : p.to_s\n  raise ArgumentError, \"negative modulus\" if n < 0\n  raise\
    \ ArgumentError, \"division by zero\" if n == 0\n  raise ArgumentError, \"zero\
    \ modulus\" if p == 0\n  raise ArgumentError, \"non-prime modulus\" if p != 1\
    \ && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n\
    \  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError,\
    \ \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime\
    \ modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\"\
    \ if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1\
    \ && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n\
    \  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError,\
    \ \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime\
    \ modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\"\
    \ if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1\
    \ && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n\
    \  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError,\
    \ \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime\
    \ modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\"\
    \ if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1\
    \ && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n\
    \  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError,\
    \ \"non-prime modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime\
    \ modulus\" if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\"\
    \ if p != 1 && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1\
    \ && p != p\n  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n\
    \  raise ArgumentError, \"non-prime modulus\" if p != 1 && p != p\n", "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n\
    \ < 0\n    n += p\n  return n\nend", "  return ((n % p) + p) % p\nend", '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  while n > 0\n    n -= p\n    p = p % n\n  end\n  n\nend", "  n = (n.to_i if\
    \ n.kind_of?(Fixnum) else\n    n.to_s if n.kind_of?(Bignum))\n  p = p.to_i\n \
    \ if p.zero?\n    1\n  elsif p.odd?\n    n + modp(n >> 1, p)\n  else\n    modp(n\
    \ >> 1, p) + n\n  end\nend", '  return ((n % p) + p) % p', '  return ((n % p)
    + p) % p', "  n = (n % p).to_i\n  if n < 0\n    n += p\n  end\n  n\nend", "  n\
    \ = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n != 0\n    n >>=\
    \ 1\n    p >>= 1\n    if n & 1 == 1\n      n -= 1\n      p -= 1\n    end\n  end\n\
    \  return p\nend", "  r = 0\n  while n > p\n    r += 1\n    n -= p\n  r\nend",
  '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n\
    \ -= p\n    p %= p\n  end\n  n\nend", "  n = (n % p + p) % p\n  if n < 0\n   \
    \ n += p\n  end\n  return n\nend", '  return ((n % p) + p) % p', "  return ((n\
    \ % p) + p) % p\nend", '  return ((n % p) + p) % p', '  return ((n % p) + p) %
    p', '  return ((n % p) + p) % p', "  n = (n.to_i if n.respond_to?(:to_i)) ? n\
    \ : n.to_s\n  p = p.to_i if p.respond_to?(:to_i) ? p : p.to_s\n  if n.zero?\n\
    \    n.zero? ? 1 : 0\n  elsif n.odd?\n    p % n == 0 ? p : p\n  else\n    p %\
    \ n\n  end\nend", "  n = (n.to_i if n.kind_of?(Fixnum) else\n    n.to_s if n.kind_of?(Bignum))\n\
    \  p = p.to_i\n  r = n.modulo(p)\n  r.zero? ? 1 : r\nend", "  return ((n % p)\
    \ + p) % p\nend", "  n = (n.to_i if n.respond_to?(:to_i)) ? n : n.to_int\n  p\
    \ = (p.to_i if p.respond_to?(:to_i)) ? p : p.to_int\n  if n <= 0\n    0\n  elsif\
    \ n >= p\n    n\n  else\n    (p % n).to_i\n  end\nend", '  return ((n % p) + p)
    % p', "  return ((n & -p) == 0) ^ (n & n)\nend", '  return ((n % p) + p) % p',
  "  return ((n % p) + p) % p\nend", '  return ((n % p) + p) % p', '  return ((n %
    p) + p) % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return\
    \ ((n % p) + p) % p\nend", "  return ((n % p) + p) % p\nend", '  return ((n %
    p) + p) % p', '  return ((n % p) + p) % p', "  n = (n.to_i if n.kind_of?(Fixnum)\
    \ else\n    n.to_s if n.kind_of?(Bignum))\n  p = p.to_i\n  r = n.modulo(p)\n \
    \ if r == 0 then return 0 end\n  if r > p then return r else return p end\nend",
  "  n = (n % p + p) % p\n  if n == 0: return 1\n  else return n\nend", "  n = (n\
    \ % p + p) % p\n  if n < 0\n    n += p\n  end\n  return n\nend", "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n != 0\n    n >>= 1\n    p >>=\
    \ 1\n    if n & 1 == 1\n      n -= 1\n      p -= 1\n    end\n  end\n  return p\n\
    end", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    p % n == 0\n  else\n    p\
    \ % n == 0 ? n : n % p\n  end\nend", "  n = n.to_i\n  p = p.to_i\n  while n >\
    \ 0\n    n -= p\n    p = p % n\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n\
    \  while n > p\n    n -= p\n    p -= 1\n  end\n  n\nend", '  return ((n % p) +
    p) % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return\
    \ ((n % p) + p) % p\nend", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return\
    \ 0\n  while n != 0\n    n >>= 1\n    p >>= 1\n    if n & 1 == 1\n      n -= 1\n\
    \      p -= 1\n    end\n  end\n  return p\nend", '  return ((n % p) + p) % p',
  "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    p -= 1\n  while p > 0\n    q = n /\
    \ p\n    mod = n % p\n    n = p\n    p = mod\n    n -= q * p\n  end\n  return\
    \ n\nend", "  n = (n.to_i if n.kind_of?(Fixnum) else\n    n.to_s if n.kind_of?(Bignum))\n\
    \  p = p.to_i\n  r = n.modulo(p)\n  r == 0 ? 1 : r\nend", "  n = (n or 0) % p\n\
    \  if n == 0: return n\n  if n < 0: return ((-p) % p) + n\n  return ((-p) % p)\
    \ + n + 1\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n \
    \ while n > 0\n    n -= p\n    p = p % n\n  end\n  n\nend", '  return ((n % p)
    + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n ==\
    \ 0\n    return 0\n  while n != 0\n    n >>= 1\n    p >>= 1\n    if n % p == 0\n\
    \      return n\n  return n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n\
    \ < 0\n    n += p\n  return n\nend", "  n = (n.to_i if n.respond_to?(:to_i)) ?\
    \ n : n.to_int\n  p = p.to_i\n  r = n % p\n  if r == 0\n    r % p\n  else\n  \
    \  r\n  end\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n +=\
    \ p\n  return n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    p -= 1\n  while p > 0\n    q, r = divmod(n, p)\n    n = q\n\
    \    p = r\n  end\n  return n\nend", '  return ((n % p) + p) % p', '  return ((n
    % p) + p) % p', "  n = (n % p).to_i\n  return n if n < p else (p - n) % p\nend",
  '  return ((n % p) + p) % p', "  n = (n.to_i if n.is_a?(Fixnum) else\n       n.to_s\
    \ if n.is_a?(String) else\n       n.to_f if n.is_a?(BigDecimal) else\n       n.to_s\
    \ if n.is_a?(Numeric))\n  p = p.to_i\n  while p > 1\n    p >>= 1\n    n |= n >>\
    \ p\n  end\n  n\nend", '  return ((n % p) + p) % p', '  return ((n & -p) % p)
    if n else 0', "  return ((n & -p) == 0) ^ ((n & p) == p)\nend", '  return ((n
    % p) + p) % p', "  r = 0\n  while n > 0 do\n    r = r * p % n\n    n = n / 2\n\
    \  end\n  return r\nend", "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -=\
    \ p\n    p = p % n\n  end\n  n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n > 0\n    n -= p\n    p = p\
    \ % n\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -=\
    \ p\n    p = p % n\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n\
    \    return 0\n  while n != 0\n    n >>= 1\n    p -= 1\n  end\n  p += 1\n  while\
    \ p >= 2\n    p >>= 1\n  end\n  return p\nend", '  return ((n % p) + p) % p',
  '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return\
    \ 0\n  while n > p\n    n -= p\n  while n < 0\n    n += p\n  return n\nend", '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p',
  '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n\
    \ -= p\n    p = p >> 1\n  end\n  n\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", "  return ((n & -p) ==\
    \ 0) ^ ((n & p) == p)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
