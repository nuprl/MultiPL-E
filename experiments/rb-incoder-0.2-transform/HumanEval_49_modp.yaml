name: HumanEval_49_modp
language: rb
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n\
  # >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3,\
  \ 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n\
  \    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2,\
  \ candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8,\
  \ candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4,\
  \ candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n"
completions: ["  return ((n % p) + p) % p\nend", "  n = n.to_i\n  p = p.to_i\n  if\
    \ n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n += p\n\
    \  return n\nend", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p',
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) +\
    \ p) % p\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend",
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) +\
    \ p) % p\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend",
  '  return ((n & -p) ^ n) & p', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n\
    \ -= p\n    p = p % n\n  end\n  n\nend", '  return ((n % p) + p) % p', "  n =\
    \ n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  n\n\
    end", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
