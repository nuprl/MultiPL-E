name: HumanEval_60_sum_to_n
language: rb
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
  # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
  # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
  \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n   \
  \ assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
  \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
  \  end\nend\n"
completions: ["  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  n.times do |i|\n    yield(i)\n  end\n  n\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  while n\
    \ > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum = 0\n  n.times do |i|\n \
    \   sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  while n > 0\n    sum\
    \ += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the number of words in the string.", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe function sum_to_n takes\
    \ one argument, n, which is the upper limit of the summation.\nIt then sums from\
    \ 1 to n and returns the result.", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  n.times do |i|\n    yield(i)\n  end\n  n\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI like this solution, but I wonder if it can be done\
    \ without using an explicit loop. I'm thinking there might be a way to do it with\
    \ recursion, but I'm not sure.\n<|/ c |>\n<| c |>\nI added a recursive solution\
    \ that doesn't use an explicit loop. Let me know if you think it can be improved.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution that doesn't use an explicit loop.\
    \ Let me know if you think it can be improved.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution that doesn't use an explicit loop. Let me know if you think it can\
    \ be improved.\n<|/ c |>\n<| a tags=ruby,recursion |>\n<code>", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n\
    \ function takes one argument, n, which represents the number of terms to sum.",
  "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n   \
    \ sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the numbers from 1\
    \ to n that are divisible by 3.", "  sum = 0\n  while n > 0\n    sum += n\n  \
    \  n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. Use a while loop to do this.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000", "  n.times.reduce(:+)\nend", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  while n >\
    \ 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe\
    \ sum_to_n function above is pretty straightforward, but we can do better. Let's\
    \ see what happens when we call sum_to_n.call(30).", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n\
    <cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the sum of the first\
    \ $n$ numbers. For example, sum_to_n(10) should return 55.", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n function\
    \ takes one argument, n, which is the upper limit of the summation.\nIt then loops\
    \ through all the numbers from 1 to n and adds them all together.\nFinally, it\
    \ returns the sum.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\n\
    end", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend",
  "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nThe Ruby Programming Language", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n\
    <cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(1000000000020)\n</cell>\n\
    <cell>\nsum_to_n(", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe\
    \ sum_to_n function takes one argument, n, which is the upper limit of the sum.\
    \ For example, to find the sum of the first 10 numbers, we would call:", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n\
    </cell>\n<cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n\
    </cell>\n<cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n\
    </cell>\n<cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n\
    </cell>\n<cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n\
    </cell>\n<cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n\
    </cell>\n<cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n\
    </cell>\n<cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n\
    </cell>\n<cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n\
    </cell>\n<cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(", "  n.times.reduce(:+)\n\
    end", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <text>\nLet's test our sum_to_n function by summing up all the numbers from 1\
    \ to 10. We'll use a while loop to do this.", "  sum = 0\n  while n > 0\n    sum\
    \ += n\n    n -= 1\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n \
    \ end\n  sum\nend", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n\
    </cell>\n<cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(1000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000)\n</cell>\n<cell>\nsum_to_n.call(100000)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000)\n</cell>\n<cell>\nsum_to_n.call(10000000)\n\
    </cell>\n<cell>\nsum_to_n.call(100000000)\n</cell>\n<cell>\nsum_to_n.call(1000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000)\n</cell>\n<cell>\nsum_to_n.call(100000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000000)\n</cell>\n<cell>\nsum_to_n.call(1000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n<cell>\nsum_to_n.call(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000000)\n</cell>\n", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n\
    <cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>\nsum_to_n.call(2)\n\
    </cell>\n<cell>\nsum_to_n.call(3)\n</cell>\n<cell>\nsum_to_n.call(4)\n</cell>\n\
    <cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(6)\n</cell>\n<cell>\n\
    sum_to_n.call(7)\n</cell>\n<cell>\nsum_to_n.call(8)\n</cell>\n<cell>\nsum_to_n.call(9)\n\
    </cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(11)\n</cell>\n\
    <cell>\nsum_to_n.call(12)\n</cell>\n<cell>\nsum_to_n.call(13)\n</cell>\n<cell>\n\
    sum_to_n.call(14)\n</cell>\n<cell>\nsum_to_n.call(15)\n</cell>\n<cell>\nsum_to_n.call(16)\n\
    </cell>\n<cell>\nsum_to_n.call(17)\n</cell>\n<cell>\nsum_to_n.call(18)\n</cell>\n\
    <cell>\nsum_to_n.call(19)\n</cell>\n<cell>\nsum_to_n.call(20)\n</cell>\n<cell>\n\
    sum_to_n.call(21)\n</cell>\n<cell>\nsum_to_n.call(22)\n</cell>\n<cell>\nsum_to_n.call(23)\n\
    </cell>\n<cell>\nsum_to_n.call(24)\n</cell>\n<cell>\nsum_to_n.call(25)\n</cell>\n\
    <cell>\nsum_to_n.call(26)\n</cell>\n<cell>\nsum_to_n.call(27)\n</cell>\n<cell>\n\
    sum_to_n.call(28)\n</cell>\n<cell>\nsum_to_n.call(29)\n</cell>\n<cell>\nsum_to_n.call(30)\n\
    </cell>\n<cell>\nsum", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100000000000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(100000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(1000000000000000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10000000000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100000000000000000000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100", "  n.times.reduce(:+)\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times do |i|\n    yield(i)\n\
    \  end\n  n\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a\
    \ function that returns the factorial of a number.", "  n.times.reduce(:+)\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(1000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000)\n</cell>\n<cell>\nsum_to_n.call(100000)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000)\n</cell>\n<cell>\nsum_to_n.call(10000000)\n\
    </cell>\n<cell>\nsum_to_n.call(100000000)\n</cell>\n<cell>\nsum_to_n.call(1000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(10000000000)\n</cell>\n<cell>\nsum_to_n.call(100000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000000)\n</cell>\n<cell>\nsum_to_n.call(1000000000000)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000001)\n</cell>\n<cell>\nsum_to_n.call(1000000000002)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000003)\n</cell>\n<cell>\nsum_to_n.call(1000000000004)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000005)\n</cell>\n<cell>\nsum_to_n.call(1000000000006)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000007)\n</cell>\n<cell>\nsum_to_n.call(1000000000008)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000009)\n</cell>\n<cell>\nsum_to_n.call(1000000000010)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000011)\n</cell>\n<cell>\nsum_to_n.call(1000000000012)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000013)\n</cell>\n<cell>\nsum_to_n.call(1000000000014)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000015)\n</cell>\n<cell>\nsum_to_n.call(1000000000016)\n\
    </cell>\n<cell>\nsum_to_n.call(1000000000017)\n</cell>\n<cell>\nsum_to_n.call(",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times do |i|\n\
    \    yield(i)\n  end\n  n\nend", "  n.times do |i|\n    puts i\n    puts sum_to_n(i\
    \ + 1)\n  end\n  puts n\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `sum_to_n.call(5)`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `sum_to_n.call(5)`. It prints `5` then `15` then `55` then `105` then\
    \ `1505` then `5515` then `105105` then `15051505` then `5515051505` then `105105105105`\
    \ then `1505150515051505` then `5515051505150515051505` then `
  "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of digits in $n$.\
    \ For example, sum_to_n(12) should return 3.", "  sum = 0\n  n.times do |i|\n\
    \    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  n.times do |i|\n    yield(i)\n  end\n  n\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThanks so much for taking the time to write this\
    \ up.  I appreciate it.  I understand how this works, but I'm still not understanding\
    \ how it works.  I understand that `sum_to_n` is an instance method of `Fixnum`,\
    \ but how does it work?  I understand that `sum_to_n` takes an argument `n`, but\
    \ how does it know to call `yield` on every number from 1 to `n`?  I understand\
    \ that `yield` returns `i`, but how does it know to return `i` on every iteration?\
    \  I understand that `sum_to_n` returns `n`, but how does it know to return `n`\
    \ on every iteration?  I understand that `sum_to_n` calls `yield` `n` times, but\
    \ how does it know to call `yield` on every iteration?  I really appreciate your\
    \ help and patience.\n<|/ c |>\n<| c |>\nI added some comments to my answer to\
    \ help you understand how it works.\n<|/ c |>\n<| c |>\nThanks so much for taking\
    \ the time to write this up.  I appreciate it.  I understand how this works, but\
    \ I'm still not understanding how it works.  I understand that `sum_to_n` is an\
    \ instance method of `Fixnum`, but how does it work?  I understand that `sum_to_n`\
    \ takes an argument `n`, but how does it know to call `yield` on every number\
    \ from 1 to `n`?  I understand that `yield` returns `i`, but how does it know\
    \ to return `i` on every iteration?  I understand that `sum_to_n` returns `n`,\
    \ but how does it know to return `n` on every iteration?  I understand that `sum_to_n`\
    \ calls `yield` `n` times, but how does it know to call `yield` on every iteration?\
    \  I really appreciate your help and patience.\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer to help you understand how it works.\n<|/ c |>\n<| c |>\n\
    Thanks so much for taking the time to write this up.  I appreciate it.  I understand\
    \ how this works, but I'm still not understanding how it works.  I understand\
    \ that `sum_to_n` is an instance method of `Fixnum`, but how does it work?  I\
    \ understand that `sum_to_n` takes an argument `n`, but how ", "  n.times do |i|\n\
    \    yield(i)\n  end\n  n\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<code>", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend",
  "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n\
    </cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n\
    <cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a number as an argument and returns the\
    \ sum of the first n numbers. For example, sum_to_n(10) should return 55.", " \
    \ sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  while\
    \ n > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n function takes one argument,\
    \ n, which represents the number of items that should be summed.\nThe for loop\
    \ is used to iterate over each item in the range 1..n.\nThe body of the loop is\
    \ executed once for each item in the range.\nThe body of the loop consists of\
    \ a single statement, sum += i, which sums the current item to the sum variable.\n\
    The body of the loop ends with a call to sum, which returns the value of the sum\
    \ variable.\nThe return value of the function is assigned to the variable sum_to_n.",
  "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell", "  n.times.reduce(:+)\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  n.times do |i|\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n \
    \   n -= 1\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n\
    </cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>\nsum_to_n.call(2)\n</cell>\n\
    <cell>\nsum_to_n.call(3)\n</cell>\n<cell>\nsum_to_n.call(4)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(6)\n</cell>\n<cell>\nsum_to_n.call(7)\n\
    </cell>\n<cell>\nsum_to_n.call(8)\n</cell>\n<cell>\nsum_to_n.call(9)\n</cell>\n\
    <cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(11)\n</cell>\n<cell>\n\
    sum_to_n.call(12)\n</cell>\n<cell>\nsum_to_n.call(13)\n</cell>\n<cell>\nsum_to_n.call(14)\n\
    </cell>\n<cell>\nsum_to_n.call(15)\n</cell>\n<cell>\nsum_to_n.call(16)\n</cell>\n\
    <cell>\nsum_to_n.call(17)\n</cell>\n<cell>\nsum_to_n.call(18)\n</cell>\n<cell>\n\
    sum_to_n.call(19)\n</cell>\n<cell>\nsum_to_n.call(20)\n</cell>\n<cell>\nsum_to_n.call(21)\n\
    </cell>\n<cell>\nsum_to_n.call(22)\n</cell>\n<cell>\nsum_to_n.call(23)\n</cell>\n\
    <cell>\nsum_to_n.call(24)\n</cell>\n<cell>\nsum_to_n.call(25)\n</cell>\n<cell>\n\
    sum_to_n.call(26)\n</cell>\n<cell>\nsum_to_n.call(27)\n</cell>\n<cell>\nsum_to_n.call(28)\n\
    </cell>\n<cell>\nsum_to_n.call(29)\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n\
    <cell", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n\
    </cell>\n<cell>\nsum_to_n.call(2)\n</cell>\n<cell>\nsum_to_n.call(3)\n</cell>\n\
    <cell>\nsum_to_n.call(4)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\n\
    sum_to_n.call(6)\n</cell>\n<cell>\nsum_to_n.call(7)\n</cell>\n<cell>\nsum_to_n.call(8)\n\
    </cell>\n<cell>\nsum_to_n.call(9)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(11)\n</cell>\n<cell>\nsum_to_n.call(12)\n</cell>\n<cell>\n\
    sum_to_n.call(13)\n</cell>\n<cell>\nsum_to_n.call(14)\n</cell>\n<cell>\nsum_to_n.call(15)\n\
    </cell>\n<cell>\nsum_to_n.call(16)\n</cell>\n<cell>\nsum_to_n.call(17)\n</cell>\n\
    <cell>\nsum_to_n.call(18)\n</cell>\n<cell>\nsum_to_n.call(19)\n</cell>\n<cell>\n\
    sum_to_n.call(20)\n</cell>\n<cell>\nsum_to_n.call(21)\n</cell>\n<cell>\nsum_to_n.call(22)\n\
    </cell>\n<cell>\nsum_to_n.call(23)\n</cell>\n<cell>\nsum_to_n.call(24)\n</cell>\n\
    <cell>\nsum_to_n.call(25)\n</cell>\n<cell>\nsum_to_n.call(26)\n</cell>\n<cell>\n\
    sum_to_n.call(27)\n</cell>\n<cell>\nsum_to_n.call(28)\n</cell>\n<cell>\nsum_to_n.call(29)\n\
    </cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n\
    </cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n\
    <cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>",
  "  n.times.reduce(:+)\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes an integer $n$ and returns the sum of the first $n$ numbers.\
    \ For example, sum_to_n(3) should return 3 + 4 + 5 + 6 + 7 = 17.", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the factorial of a number.", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n\
    </cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the numbers from 1 to n that are divisible by k.", "  sum = 0\n \
    \ while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the sum of the first n\
    \ positive integers. \nFor example, sum_to_n(10) should return 55.", "  n.times\
    \ do |i|\n    yield(i)\n  end\n  n\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like your solution, however it seems that it only works with\
    \ integers. I tried to make it work with floats and it didn't work. Do you know\
    \ why that is?\n<|/ c |>\n<| c |>\nI added a solution for floats.\n<|/ c |>\n\
    <| c |>\nI added a solution for floats.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  n.times do |i|\n    yield(i)\n  end\n  n\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  n.times do |i|\n   \
    \ yield(i)\n  end\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  n.times.reduce(:+)\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend",
  "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  n.times do |i|\n    yield(i+1)\n  end\n  n\nend\n</cell>\n<text>\n\
    Now let's use sum_to_n to sum the numbers from 1 to 100. We'll start by defining\
    \ a function that will sum the numbers from 1 to n.", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `sum`\
    \ function already exists in Ruby, so there's no need to define it yourself.\n\
    <|/ c |>\n<| c |>\n: I know, but I wanted to show how to define it myself.\n<|/\
    \ c |>\n<| c |>\n: I know, I know, but I wanted to show how to define it myself.\n\
    <|/ c |>\n<| c |>\n: I know, I know, but I wanted to show how to define it myself.\n\
    <|/ c |>\n<| c |>\n: I know, I know, but I wanted to show how to define it myself.\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  while n >\
    \ 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n\
    <cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the sum of the first n positive integers. Use a\
    \ while loop to do this.", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(100", "  n.times.reduce(:+)\n\
    end", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "  n.times\
    \ do |i|\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n\
    </cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>\nsum_to_n.call(2)\n</cell>\n\
    <cell>\nsum_to_n.call(3)\n</cell>\n<cell>\nsum_to_n.call(4)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(6)\n</cell>\n<cell>\nsum_to_n.call(7)\n\
    </cell>\n<cell>\nsum_to_n.call(8)\n</cell>\n<cell>\nsum_to_n.call(9)\n</cell>\n\
    <cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(11)\n</cell>\n<cell>\n\
    sum_to_n.call(12)\n</cell>\n<cell>\nsum_to_n.call(13)\n</cell>\n<cell>\nsum_to_n.call(14)\n\
    </cell>\n<cell>\nsum_to_n.call(15)\n</cell>\n<cell>\nsum_to_n.call(16)\n</cell>\n\
    <cell>\nsum_to_n.call(17)\n</cell>\n<cell>\nsum_to_n.call(18)\n</cell>\n<cell>\n\
    sum_to_n.call(19)\n</cell>\n<cell>\nsum_to_n.call(20)\n</cell>\n<cell>\nsum_to_n.call(21)\n\
    </cell>\n<cell>\nsum_to_n.call(22)\n</cell>\n<cell>\nsum_to_n.call(23)\n</cell>\n\
    <cell>\nsum_to_n.call(24)\n</cell>\n<cell>\nsum_to_n.call(25)\n</cell>\n<cell>\n\
    sum_to_n.call(26)\n</cell>\n<cell>\nsum_to_n.call(27)\n</cell>\n<cell>\nsum_to_n.call(28)\n\
    </cell>\n<cell>\nsum_to_n.call(29)\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n\
    <cell>\nsum", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  n.times do |i|\n    yield(i + 1)\n  end\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\n`n.times do |i|` can be replaced with `n.times\
    \ { |i| yield i + 1 }`.\n<|/ c |>\n<| c |>\n: Yes, but that doesn't make it any\
    \ more readable. `n.times { |i| yield i + 1 }` reads much more like English than\
    \ `n.times do |i|`.\n<|/ c |>\n<| c |>\nI agree, but I find it more readable that\
    \ way. `n.times { |i| yield i + 1 }` reads much more like English than `n.times\
    \ do |i|`.\n<|/ c |>\n<| c |>\n: I agree, but I find it more readable that way.\
    \ `n.times { |i| yield i + 1 }` reads much more like English than `n.times do\
    \ |i|`.\n<|/ c |>\n<| c |>\nI agree with you, however I find it more readable\
    \ that way. `n.times { |i| yield i + 1 }` reads much more like English than `n.times\
    \ do |i|`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "  sum = 0\n  while n > 0\n    sum\
    \ += n\n    n -= 1\n  end\n  sum\nend", "  n.times do |i|\n    yield(i)\n  end\n\
    \  n\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(", "  sum = 0\n  n.times do\
    \ |i|\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the squares\
    \ of numbers from 1 to n.", "  n.times do |i|\n    yield(i)\n  end\n  n\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "  n.times do |i|\n    yield(i)\n  end\n\
    \  n\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  sum = 0\n  while n\
    \ > 0\n    sum += n\n    n -= 1\n  sum\nend", "  n.times.reduce(:+)\nend", " \
    \ n.times do |i|\n    yield(i)\n  end\n  n\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a number as an argument and returns\
    \ the factorial of that number.", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n\
    </cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an integer $n$ and returns $n!$ ($n! = n * (n-1) * ... * 1$).", "  sum = 0\n\
    \  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n\
    \ function takes one argument, n, and returns the sum of the numbers from 1 to\
    \ n.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes an integer $n$ and returns the sum of the first $n$ prime\
    \ numbers.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ n.times.reduce(:+)\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n -=\
    \ 1\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n\
    </cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  n.times do |i|\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe sum_to_n function\
    \ takes one argument, n, which represents the number of items to sum.\nThe for\
    \ loop iterates over the numbers 1 through n.\nThe body of the for loop simply\
    \ adds i to the sum variable.\nThe end keyword is optional, but is often helpful.",
  "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend", "  n.times do |i|\n\
    \    yield(i)\n  end\n  n\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be done without an\
    \ explicit `return` statement?\n<|/ c |>\n<| c |>\nI guess you could do `return\
    \ n if n.zero?` but that would just be silly. I think `return` is necessary because\
    \ `yield` returns `nil` when no block is given.\n<|/ c |>\n<| c |>\nI guess you\
    \ could do `return n if n.zero?` but that would just be silly. I think `return`\
    \ is necessary because `yield` returns `nil` when no block is given.\n<|/ c |>\n\
    <| c |>\nI guess you could do `return n if n.zero?` but that would just be silly.\
    \ I think `return` is necessary because `yield` returns `nil` when no block is\
    \ given.\n<|/ c |>\n<| c |>\nI guess you could do `return n if n.zero?` but that\
    \ would just be silly. I think `return` is necessary because `yield` returns `nil`\
    \ when no block is given.\n<|/ c |>\n<| a |>\n<code>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000001)\n\
    </cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\nsum_to_n(1000000000003)\n\
    </cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\nsum_to_n(1000000000005)\n\
    </cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\nsum_to_n(1000000000007)\n\
    </cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\nsum_to_n(1000000000009)\n\
    </cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\nsum_to_n(1000000000011)\n\
    </cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\nsum_to_n(1000000000013)\n\
    </cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\nsum_to_n(1000000000015)\n\
    </cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\nsum_to_n(1000000000017)\n\
    </cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\nsum_to_n(1000000000019)\n\
    </cell>\n<cell>\nsum_to_n(1000000000020)\n</cell>\n<cell>\nsum_to_n(", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(1000000000020)\n</cell>\n\
    <cell>\nsum_to_n(", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the first n positive integers.\
    \ Use a loop to do this.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n\
    </cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer and returns the sum of the squares of all the numbers from 1 to that\
    \ integer.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <text>\nThe sum_to_n function takes one argument, n, which represents the number\
    \ of terms to sum. sum_to_n then sums up all the numbers from 1 to n. For example,\
    \ sum_to_n(5) returns 15.", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n\
    </cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n\
    <cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the first n positive integers.\
    \ Use a while loop to do this.", "  n.times do |i|\n    yield(i)\n  end\n  n\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ n.times do |i|\n    yield(i)\n  end\n  n\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
