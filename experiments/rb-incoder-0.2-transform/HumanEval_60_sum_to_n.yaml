name: HumanEval_60_sum_to_n
language: rb
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
  # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
  # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
  \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n   \
  \ assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
  \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
  \  end\nend\n"
completions: ["  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  n.times do |i|\n    yield(i)\n  end\n  n\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  while n\
    \ > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum = 0\n  n.times do |i|\n \
    \   sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  while n > 0\n    sum\
    \ += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the number of words in the string.", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n \
    \   sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe function sum_to_n takes\
    \ one argument, n, which is the upper limit of the summation.\nIt then sums from\
    \ 1 to n and returns the result."]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
