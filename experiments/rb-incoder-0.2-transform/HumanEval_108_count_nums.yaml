name: HumanEval_108_count_nums
language: rb
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n\
  # 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum + num if num > 0\n  end\nend", "  arr.inject(0) do |sum,\
    \ el|\n    sum + el if el > 0\n  end\nend", "  arr.inject(0) do |sum, el|\n  \
    \  sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum\
    \ + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    el\
    \ > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0\
    \ ? sum + el : sum\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n  \
    \  num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').map(&:to_i).reduce(:+)\n\
    \    num = num if ", "  arr.inject(0) do |sum, el|\n    el < 0 ? sum + el : sum\n\
    \  end\nend", "  arr.each do |n|\n    if n.is_a?(Integer)\n      n += n.abs\n\
    \    end\n    break if n.zero?\n  end\n  arr.count\nend", "  arr.inject(0) do\
    \ |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do\
    \ |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum + el if el > 0\n  end\nend", "  arr.inject(0) { |sum,\
    \ el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el\
    \ if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum +=\
    \ num if num > 0\n    sum\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    sum = 0\n    while num > 0\n      sum += num % 10\n      num /= 10\n    end\n\
    \    return sum if sum > 0\n  end\n  0\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum + el if el > 0\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum +=\
    \ el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum\
    \ += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n   \
    \ sum + el if el > 0\n  end\nend", "  arr.each do |n|\n    if n.is_a? Integer\n\
    \      n -= n.abs\n    end\n    break if n == 0\n    n += 1 if n.to_s.chars.map(&:to_i).reduce(:+)\
    \ > 9\n  end\n  arr.count\nend", "  arr.each do |n|\n    next if n.zero?\n   \
    \ digits = n.to_s.split('')\n    digits.each do |d|\n      next if d.zero?\n \
    \     digit = d.to_i\n      next if digit < 0\n      break\n    end\n    break\
    \ if digits.size == 0\n  end\n  arr.size - arr.select { |n| n.to_s.split('').size\
    \ == 0 }.size\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend",
  "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.each do |x|\n  \
    \  if x.to_s.chars.map(&:to_i).sum > 0\n      puts x.to_s.chars.map(&:to_i).sum\n\
    \    end\n  end\nend\ncount_nums(arr)\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>",
  "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      num -= num.abs\n    end\n    sum += num\n\
    \  end\n  sum\nend\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n\
    <cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2,\
    \ -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2,\
    \ 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\n\
    count_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n\
    </cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2,\
    \ 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\n\
    count_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n\
    </cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2,\
    \ 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\n\
    count_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n\
    </cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2,\
    \ 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\n\
    count_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n\
    </cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2,\
    \ 1, 2, -3, 4])\n</cell>\n<cell>\ncount_nums([-2, 1, 2, -3, 4])\n</cell>\n<cell>",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    sum + el if el > 0\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    return num if num < 0\n  end\n  0\nend", "  arr.each do |num|\n    num =\
    \ num.to_i\n    digits = num.to_s.chars.map(&:to_i)\n    digits.reduce(:+).to_i\
    \ if digits > 0 && digits.reduce(:+) > num\n  end\nend", "  arr.each do |n|\n\
    \    if n < 0\n      n += 100\n    end\n    sum = 0\n    while n > 0\n      sum\
    \ += n % 10\n      n /= 10\n    end\n    return sum if sum > 0\n  end\n  0\nend\n\
    </cell>\n<cell>\ncount_nums.call(arr)\n</cell>\n<cell>", "  arr.each do |num|\n\
    \    if num < 0\n      num *= -1\n      sign = -1\n    else\n      sign = 1\n\
    \    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n\
    \      digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n \
    \     digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n  \
    \    digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n   \
    \   digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n    \
    \  digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n     \
    \ digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n      digit\
    \ = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n      digit =\
    \ digit.abs\n      digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n\
    \      digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n \
    \     digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n  \
    \    digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n   \
    \   digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n    \
    \  digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n     \
    \ digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n      digit\
    \ = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n      digit =\
    \ digit.abs\n      digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n\
    \      digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n \
    \     digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n  \
    \    digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n   \
    \   digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n    \
    \  digit = digit.abs\n      digit = digit.abs\n      digit = digit.abs\n     \
    \ digit = digit.abs\n", "  arr.inject(0) { |sum, num| sum + num if num > 0 }\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      num -= num.abs\n\
    \    end\n    sum += num\n  end\n  sum\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum\
    \ > 0\n      puts \"#{x}\"\n    end\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, el|\n   \
    \ el > 0 ? sum + el : sum\n  end\nend", "  arr.each do |n|\n    if n < 0\n   \
    \   n += 10\n      n -= 1\n    end\n    n += 1 if n % 10 == 0\n  end\nend", " \
    \ arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum > 0\n      puts x.to_s.chars.map(&:to_i).sum\n\
    \    end\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n\
    \    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el : sum +\
    \ el\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n\
    \  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0)\
    \ { |sum, el| el > 0 ? sum + el : sum }\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum + el if el > 0\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    num = num.to_i\n    num = num\
    \ % 10\n    return num if num > 0\n  end\n  0\nend", "  arr.inject(0) do |sum,\
    \ el|\n    sum + el if el > 0\n  end\nend", "  arr.inject(0) do |sum, el|\n  \
    \  sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum\
    \ + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num\
    \ > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum +\
    \ el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el\
    \ : sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\n\
    end", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend",
  "  arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    break\
    \ if n == 0\n    n += n % 10\n  end\n  arr.count\nend", "  arr.inject(0) do |sum,\
    \ el|\n    el < 0 ? -el : sum + el\n  end\nend", "  arr.each do |n|\n    if n\
    \ < 0\n      n += 10\n      n -= 1\n    end\n    break if n >= 10\n    n += n\
    \ % 10\n  end\n  arr.count\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ?\
    \ sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num\
    \ if num > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum + el if el\
    \ > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      num += 9\n    end\n    sum\
    \ += num\n  end\n  sum\nend", "  arr.inject(0) do |sum, num|\n    sum += num if\
    \ num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el\
    \ if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el\
    \ if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ?\
    \ sum + el : sum\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num\
    \ *= -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.abs\n      sum += digit\n   \
    \ end\n  end\n  sum\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el\
    \ > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el\
    \ > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum +\
    \ el : sum\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select { |c|\
    \ c =~ /\\d/ }.size\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum + el\
    \ if el > 0\n  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    if num < 0\n      num *= -1\n\
    \      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend\n</cell>\n\
    <cell>\ncount_nums.call(arr)\n</cell>\n<cell>", "  arr.inject(0) do |sum, el|\n\
    \    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.each do |num|\n    if\
    \ num < 0\n      num *= -1\n      digit = num.abs\n      num -= digit\n    end\n\
    \    sum += num\n  end\n  sum\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    num = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    return num if num > 0\n  end\n  0\nend\n</cell>\n<cell>", "  arr.each do\
    \ |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n  \
    \  num = num.to_s.chars.map(&:to_i).reduce(:+)\n    return num if num > 0\n  end\n\
    \  0\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) do |sum, num|\n    sum + num if num > 0\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n\
    \    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_i\n      sum += digit * sign\n\
    \    end\n  end\n  sum\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer.\
    \ I am not able to understand how this works. Can you please explain it a little\
    \ bit?\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for the explanation. I understood it now. :)\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el\
    \ : sum + el\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el\
    \ : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n\
    \    sum\n  end\nend", "  arr.each do |n|\n    next if n < 0\n    sum = 0\n  \
    \  while n > 0\n      sum += n % 10\n      n /= 10\n    end\n    return 0 if sum\
    \ == 0\n  end\n  0\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\n\
    end", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el : sum + el\n  end\nend",
  "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum > 0\n      puts x.to_s.chars.map(&:to_i).sum\n\
    \    end\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n\
    \    sum\n  end\nend", "  arr.each do |n|\n    if n < 0\n      n += 10\n     \
    \ n -= 1\n    end\n    break if n >= 10\n    n += n % 10\n  end\n  arr.count(n)\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum > 0\n      puts\
    \ x.to_s.chars.map(&:to_i).sum\n    end\n  end\nend\ncount_nums(arr)\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, but I wonder if there is a way\
    \ to do it without using map/sum. I am not very familiar with map/sum.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without map/sum.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a way to do it without using map/sum.\
    \ I am not very familiar with map/sum.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without map/sum.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  arr.inject(0) do |sum,\
    \ el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum + el if el > 0\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    num = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    return num if num > 0\n  end\n  0\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    \  sum\nend", "  arr.each do |num|\n    num = num.to_i\n    if num > 0\n     \
    \ nums.times { |i| sum += num % 10 }\n      sum += num / 10\n    end\n  end\n\
    \  sum\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) do |sum, el|\n    sum + el if el > 0\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do\
    \ |num|\n    num = num.to_i\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |d|\n      d > 0 ? num += d : num -= d\n    end\n  end\n  num\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    num = num.abs\n    num = num % 10\n    num\
    \ = num > 0 ? num : -num\n    sum += num\n  end\n  sum\nend", "  arr.inject(0)\
    \ do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do\
    \ |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do\
    \ |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum,\
    \ num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum,\
    \ el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ?\
    \ -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum + num if\
    \ num > 0\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum + el if el > 0\n\
    \  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    if num < 0\n      num = num.abs\n      num\
    \ = num.divmod(10)\n      num = num.first - num.last\n    end\n    sum += num\n\
    \  end\n  sum\nend", "  arr.inject(0) { |sum, el| el > 0 ? sum + el : sum }\n\
    end", "  arr.each do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n\
    \    n += 1 if n % 10 == 0\n  end\n  arr.size\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |s| s > 0 }.count\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0\
    \ ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum + el if\
    \ el > 0\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    return num\
    \ if num > 0\n    num = num.abs\n    return num if num < 0\n  end\n  0\nend",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) { |sum,\
    \ el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum + el\
    \ if el > 0\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el\
    \ : sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num >\
    \ 0\n    sum\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select { |c|\
    \ c =~ /\\d/ }.count\n  end\nend", "  arr.each do |n|\n    n.to_s.split('').select\
    \ { |d| d =~ /^-/ }.size\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum\
    \ += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n   \
    \ el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el\
    \ > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum +=\
    \ num if num > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum + el\
    \ if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n\
    \    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum + num if num >\
    \ 0\n  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", " \
    \ arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", " \
    \ arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    sum + el if el > 0\n  end\nend", "  arr.each\
    \ do |n|\n    if n < 0\n      n += 10\n      n -= 1\n    end\n    n += 1 if n\
    \ % 10 == 0\n  end\n  arr.size\nend", "  arr.inject(0) do |sum, num|\n    sum\
    \ += num if num > 0\n    sum\n  end\nend", "  arr.each do |num|\n    if num <\
    \ 0\n      num *= -1\n      num -= num % 10\n    end\n    sum += num\n  end\n\
    \  sum\nend", "  arr.each do |x|\n    if x > 0 then\n      break\n    elsif x\
    \ < 0 then\n      x = -x\n      break\n    end\n  end\n  arr.count(x)\nend", " \
    \ arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", " \
    \ arr.each do |num|\n    num = num.to_i\n    return num if num > 0\n    num =\
    \ num.abs\n    num = num.to_i\n    return num if num > 0\n  end\n  0\nend", " \
    \ arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", " \
    \ arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum,\
    \ el|\n    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, num|\n  \
    \  sum += num if num > 0\n    sum\n  end\nend", "  arr.each do |num|\n    num\
    \ = num.to_i\n    if num > 0\n      sum = 0\n      while num > 0\n        sum\
    \ += num % 10\n        num /= 10\n      end\n      return sum if sum > 0\n   \
    \ end\n  end\n  0\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num\
    \ > 0\n    sum\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    num\
    \ = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|i|\
    \ i > 0}\n    num = num if num > 0\n    num = num if num < 10\n  end\nend", " \
    \ arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
