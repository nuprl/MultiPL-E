name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n\
  # [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n\
    \    if x.negative?\n      smallest = nil\n      break\n    elsif x.positive?\n\
    \      largest = nil\n      break\n    else\n      smallest = x\n    end\n  end\n\
    \  [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do\
    \ |x|\n    if x.is_a? Integer\n      if smallest == nil or x < smallest\n    \
    \    smallest = x\n      end\n      if largest == nil or x > largest\n       \
    \ largest = x\n      end\n    end\n  end\n  return [smallest, largest]\nend",
  "  lst.each do |i|\n    if i.is_a? Integer\n      return i if i > 0 && i < 0\n \
    \   end\n  end\n  return nil\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i.negative?\n      smallest = i\n    else\n\
    \      largest = i\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  [smallest, largest]\nend", "  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n      break\n\
    \    end\n    if x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x.negative?\n      smallest = nil\n      break\n    end\n    if smallest ==\
    \ nil\n      smallest = x\n    else\n      if x < smallest\n        smallest =\
    \ x\n      end\n    end\n    if largest == nil\n      largest = x\n    else\n\
    \      if x > largest\n        largest = x\n      end\n    end\n  end\n  return\
    \ [smallest, largest]\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n      break\n\
    \    end\n    if x > largest\n      largest = x\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? || smallest_integer\
    \ > i\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || largest_integer < i\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return [smallest_integer, largest_integer]\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest == nil or i < smallest\n        smallest = i\n      end\n      if largest\
    \ == nil or i > largest\n        largest = i\n      end\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = nil\n    else\n      smallest\
    \ = x\n    end\n    if x > largest\n      largest = x\n    end\n  end\n  return\
    \ [smallest, largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |x|\n    if x.negative?\n      smallest_integer = x\n    else\n\
    \      largest_integer = x\n    end\n  end\n  [smallest_integer, largest_integer]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = nil\n    else\n      smallest\
    \ = x\n    end\n    if x > largest\n      largest = x\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if i < 0\n      break\n    elsif i > 0 and x < lst[i - 1]\n \
    \     break\n    end\n    i = i + 1\n  end\n  lst.each_with_index do |x, i|\n\
    \    if i < 0\n      break\n    elsif i > 0 and x > lst[i - 1]\n      break\n\
    \    end\n    i = i + 1\n  end\n  [lst[i - 1], lst[i]]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
