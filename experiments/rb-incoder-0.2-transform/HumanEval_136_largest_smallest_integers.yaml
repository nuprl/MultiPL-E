name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n\
  # [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n\
    \    if x.negative?\n      smallest = nil\n      break\n    elsif x.positive?\n\
    \      largest = nil\n      break\n    else\n      smallest = x\n    end\n  end\n\
    \  [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do\
    \ |x|\n    if x.is_a? Integer\n      if smallest == nil or x < smallest\n    \
    \    smallest = x\n      end\n      if largest == nil or x > largest\n       \
    \ largest = x\n      end\n    end\n  end\n  return [smallest, largest]\nend",
  "  lst.each do |i|\n    if i.is_a? Integer\n      return i if i > 0 && i < 0\n \
    \   end\n  end\n  return nil\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i.negative?\n      smallest = i\n    else\n\
    \      largest = i\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  [smallest, largest]\nend", "  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n      break\n\
    \    end\n    if x > largest\n      largest = x\n    end\n  end\n  return [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x.negative?\n      smallest = nil\n      break\n    end\n    if smallest ==\
    \ nil\n      smallest = x\n    else\n      if x < smallest\n        smallest =\
    \ x\n      end\n    end\n    if largest == nil\n      largest = x\n    else\n\
    \      if x > largest\n        largest = x\n      end\n    end\n  end\n  return\
    \ [smallest, largest]\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n      break\n\
    \    end\n    if x > largest\n      largest = x\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if smallest_integer.nil? || smallest_integer\
    \ > i\n        smallest_integer = i\n      end\n      if largest_integer.nil?\
    \ || largest_integer < i\n        largest_integer = i\n      end\n    end\n  end\n\
    \  return [smallest_integer, largest_integer]\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest == nil or i < smallest\n        smallest = i\n      end\n      if largest\
    \ == nil or i > largest\n        largest = i\n      end\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each\
    \ do |x|\n    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  return\
    \ smallest_integer, largest_integer\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = nil\n    else\n      smallest\
    \ = x\n    end\n    if x > largest\n      largest = x\n    end\n  end\n  return\
    \ [smallest, largest]\nend", "  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |x|\n    if x.negative?\n      smallest_integer = x\n    else\n\
    \      largest_integer = x\n    end\n  end\n  [smallest_integer, largest_integer]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = nil\n    else\n      smallest\
    \ = x\n    end\n    if x > largest\n      largest = x\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if i < 0\n      break\n    elsif i > 0 and x < lst[i - 1]\n \
    \     break\n    end\n    i = i + 1\n  end\n  lst.each_with_index do |x, i|\n\
    \    if i < 0\n      break\n    elsif i > 0 and x > lst[i - 1]\n      break\n\
    \    end\n    i = i + 1\n  end\n  [lst[i - 1], lst[i]]\nend", "  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n    \
    \  break\n    elsif x > largest\n      largest = x\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  largest_integer = nil\n  smallest_integer = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if i.negative?\n        largest_integer\
    \ = i\n      else\n        smallest_integer = i\n      end\n    end\n  end\n \
    \ return largest_integer, smallest_integer\nend", "  largest_integer = nil\n \
    \ smallest_integer = nil\n  lst.each do |x|\n    if x.is_a?(Integer)\n      if\
    \ largest_integer.nil? || largest_integer > x\n        largest_integer = x\n \
    \     end\n      if smallest_integer.nil? || smallest_integer < x\n        smallest_integer\
    \ = x\n      end\n    else\n      return nil if smallest_integer.nil? || smallest_integer\
    \ == nil\n      return nil if largest_integer.nil? || largest_integer == nil\n\
    \    end\n  end\n  [largest_integer, smallest_integer]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  return [largest_integer,\
    \ smallest_integer]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n \
    \ lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n \
    \     largest = i\n    end\n  end\n  [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || smallest_integer > x\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || largest_integer < x\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  [smallest_integer, largest_integer]\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    if e < 0 && i\
    \ > 0 then\n      return [e, i]\n    elsif e > 0 && i < lst.size - 1 then\n  \
    \    return [e, lst.size - i - 1]\n    end\n  end\n  return [nil, nil]\nend",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a?(Integer)\n\
    \      if smallest_integer.nil? || smallest_integer > x\n        smallest_integer\
    \ = x\n      end\n    elsif x.is_a?(Float)\n      if largest_integer.nil? || largest_integer\
    \ < x\n        largest_integer = x\n      end\n    end\n  end\n  return smallest_integer,\
    \ largest_integer\nend", "  lst.sort.reverse!\n  lst.each_with_index do |e, i|\n\
    \    if e < 0 && i > 0 && lst[i-1] < 0\n      nil\n    elsif e > 0 && i < lst.size\
    \ - 1 && lst[i+1] > 0\n      nil\n    else\n      e\n    end\n  end\nend", " \
    \ smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n      break\n    elsif x > largest\n      largest = x\n    end\n  end\n\
    \  [smallest, largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do\
    \ |x|\n    if x < 0\n      smallest = nil\n      break\n    end\n    if x > largest\n\
    \      largest = x\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse!\n\
    \  lst.each_with_index do |n, i|\n    return nil if n.nil?\n    return i if n\
    \ < 0\n  end\n  lst.first\nend", "  lst.each do |x|\n    if x.negative?\n    \
    \  a = x\n      break\n    end\n  end\n  lst.each do |x|\n    if x.positive?\n\
    \      b = x\n      break\n    end\n  end\n  return [a, b] if a.nil? || b.nil?\n\
    \  return [a, b] if a.negative? && b.positive?\n  return [a, b] if b.negative?\
    \ && a.positive?\n  return [a, b] if a.negative? && b.negative?\n  return [a,\
    \ b] if b.negative? && a.negative?\n  return [a, b] if a.positive? && b.positive?\n\
    \  return [a, b] if b.positive? && a.positive?\n  return [a, b] if a.positive?\
    \ && b.negative?\n  return [a, b] if b.positive? && a.negative?\n  return [a,\
    \ b] if a.negative? && b.positive?\n  return [a, b] if b.negative? && a.positive?\n\
    \  return [a, b] if a.negative? && b.negative?\n  return [a, b] if b.negative?\
    \ && a.negative?\n  return [a, b] if a.positive? && b.positive?\n  return [a,\
    \ b] if b.positive? && a.positive?\n  return [a, b] if a.positive? && b.negative?\n\
    \  return [a, b] if b.positive? && a.negative?\n  return [a, b] if a.negative?\
    \ && b.positive?\n  return [a, b] if b.negative? && a.positive?\n  return [a,\
    \ b] if a.negative? && b.negative?\n  return [a, b] if b.negative? && a.negative?\n\
    \  return [a, b] if a.positive? && b.positive?\n  return [a, b] if b.positive?\
    \ && a.positive?\n  return [a, b] if a.positive? && b.negative?\n  return [a,\
    \ b] if b.positive? && a.negative?\n  return [a, b] if a.negative? && b.positive?\n\
    \  return [a, b] if b.negative? && a.positive?\n  return [a, b] if a.negative?\
    \ && b.negative?\n  return [a, b] if b.negative? && a.negative?\n  return [a,\
    \ b] if a.positive? && b.positive?\n  return [a, b] if b.positive? && a.positive?\n\
    \  return [a, b] if a.positive? && b.negative?\n  return [a, b] if b.positive?\
    \ && a.negative?\n  return [a, b] if a.negative? && b.positive?\n  return [a,\
    \ b] if b.negative? && a.positive?\n  return [a, b] if a.negative? && b.negative?\n\
    \  return [a, b] if b.negative? && a.negative?\n  return [a, b] if a.positive?\
    \ && b.positive?\n  return [a, b] if b.positive? && a", "  largest_integer = nil\n\
    \  smallest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ i.negative?\n        largest_integer = i\n      else\n        smallest_integer\
    \ = i\n      end\n    end\n  end\n  return largest_integer, smallest_integer\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n\
    \    if x.negative?\n      smallest_integer = x\n    else\n      largest_integer\
    \ = x\n    end\n  end\n  [smallest_integer, largest_integer]\nend", "  lst.sort.reverse\n\
    \  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |i|\n    if\
    \ i.is_a?(Integer)\n      if smallest_integer.nil? || i < smallest_integer\n \
    \       smallest_integer = i\n      end\n      if largest_integer.nil? || i >\
    \ largest_integer\n        largest_integer = i\n      end\n    end\n  end\n  [largest_integer,\
    \ smallest_integer]\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    return\
    \ nil if i < 0\n    return e if e < 0\n  end\n  nil\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to sort the list. I'm thinking something along the lines of `lst.each_with_index.select\
    \ { |e, i| i < 0 || e < 0 }`.\n<|/ c |>\n<| c |>\nYes, that would work. Or `lst.each_with_index.select\
    \ { |e, i| i < 0 || e < 0 || e > 0 }`. Or `lst.each_with_index.select { |e, i|\
    \ i < 0 || e < 0 || e > 0 || e < e }`. Or `lst.each_with_index.select { |e, i|\
    \ i < 0 || e < 0 || e > 0 || e < e || e > e }`. Or `lst.each_with_index.select\
    \ { |e, i| i < 0 || e < 0 || e > 0 || e < e || e > e || e == e }`. Or `lst.each_with_index.select\
    \ { |e, i| i < 0 || e < 0 || e > 0 || e < e || e > e || e == e || e != e }`. Or\
    \ `lst.each_with_index.select { |e, i| i < 0 || e < 0 || e > 0 || e < e || e >\
    \ e || e == e || e != e || e == e || e != e || e == e || e != e || e == e || e\
    \ != e || e == e || e != e || e == e || e != e || e == e || e != e || e == e ||\
    \ e != e || e == e || e != e || e == e || e != e || e == e || e != e || e == e\
    \ || e != e || e == e || e != e || e == e || e != e || e == e || e != e || e ==\
    \ e || e != e || e == e || e != e || e == e || e != e || e == e || e != e || e\
    \ == e || e != e || e == e || e != e || e == e || e != e || e == e || e != e ||\
    \ e == e || e != e || e == e || e != e || e == e || e ", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n   \
    \ if x < 0\n      smallest = x\n    elsif x > largest\n      largest = x\n   \
    \ end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if i < lst.size - 1\n      break if x<lst[i+1]\n    end\n   \
    \ break if x<0\n  end\n  return [lst[lst.size-1], lst.first] if lst.size > 1\n\
    \  return [lst[0], nil] if lst.size < 1\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x < 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x > 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  return nil if lst.size == 0\n  return\
    \ lst.first\nend", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n      largest\
    \ = i\n    end\n  end\n  [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if\
    \ smallest_integer.nil? || i < smallest_integer\n        smallest_integer = i\n\
    \      end\n      if largest_integer.nil? || i > largest_integer\n        largest_integer\
    \ = i\n      end\n    end\n  end\n  [smallest_integer, largest_integer]\nend",
  "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if\
    \ i.negative?\n      smallest = i\n    else\n      largest = i\n    end\n  end\n\
    \  return [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  [smallest, largest]\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a? Integer\n\
    \      if smallest_integer.nil? || x < smallest_integer\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || x > largest_integer\n     \
    \   largest_integer = x\n      end\n    end\n  end\n  [largest_integer, smallest_integer]\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a? Integer\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  [largest_integer,\
    \ smallest_integer]\nend", "  smallest, largest = nil, nil\n  lst.each do |x|\n\
    \    if x < 0\n      smallest = nil\n    else\n      smallest = x\n    end\n \
    \   if x > largest\n      largest = x\n    end\n  end\n  [smallest, largest]\n\
    end", "  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n  \
    \    smallest = i\n    elsif i > largest\n      largest = i\n    end\n  end\n\
    \  [smallest, largest]\nend", "  largest_integer = nil\n  smallest_integer = nil\n\
    \  lst.each do |x|\n    if x < 0\n      largest_integer = x\n    elsif x > 0 &&\
    \ smallest_integer.nil?\n      smallest_integer = x\n    end\n  end\n  return\
    \ [largest_integer, smallest_integer]\nend", "  lst.sort.reverse\n  smallest =\
    \ nil\n  largest = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest\
    \ == nil || i < smallest\n        smallest = i\n      end\n      if largest ==\
    \ nil || i > largest\n        largest = i\n      end\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = nil\n      break\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  [smallest, largest]\nend", "  smallest_integer = nil\n\
    \  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      smallest_integer\
    \ = i if i < smallest_integer\n      largest_integer = i if i > largest_integer\n\
    \    else\n      smallest_integer = nil if i.nil?\n      largest_integer = nil\
    \ if i.nil?\n    end\n  end\n  [smallest_integer, largest_integer]\nend", "  lst.sort.reverse!\n\
    \  lst.each_with_index do |e, i|\n    if e < 0\n      return [nil, i]\n    end\n\
    \  end\n  lst.each_with_index do |e, i|\n    if e > 0\n      return [i, nil]\n\
    \    end\n  end\nend", "  lst.sort.reverse!\n  smallest = nil\n  largest = nil\n\
    \  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x.negative?\n  \
    \    smallest = x\n    else\n      largest = x\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n\
    \    if x < 0\n      smallest = nil\n      break\n    end\n    if x > largest\n\
    \      largest = x\n    end\n  end\n  [smallest, largest]\nend", "  largest_integer\
    \ = nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i < 0\n      largest_integer\
    \ = i\n    elsif i > smallest_integer\n      smallest_integer = i\n    end\n \
    \ end\n  return largest_integer, smallest_integer\nend", "  lst.each do |x|\n\
    \    if x.is_a?(Integer)\n      return x if x > 0 && x < lst.max\n    end\n  end\n\
    \  return nil\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n \
    \   if x < 0\n      smallest = nil\n    else\n      smallest = x\n    end\n  \
    \  if x > largest\n      largest = x\n    end\n  end\n  return [smallest, largest]\n\
    end", "  lst.each do |x|\n    if x.negative?\n      return [x, nil]\n    elsif\
    \ x.positive?\n      return [nil, x]\n    end\n  end\n  nil\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = nil\n    else\n      smallest = x\n    end\n    if x\
    \ > largest\n      largest = x\n    end\n  end\n  return [smallest, largest]\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i.negative?\n      smallest = nil\n      break\n    end\n    if i.positive?\n\
    \      largest = nil\n      break\n    end\n    smallest = i if i.negative? &&\
    \ smallest == nil\n    largest = i if i.positive? && largest == nil\n  end\n \
    \ [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = nil\n      break\n    elsif\
    \ x > largest\n      largest = x\n    end\n  end\n  [smallest, largest]\nend",
  "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n\
    \      smallest = i\n    elsif i > largest\n      largest = i\n    end\n  end\n\
    \  [smallest, largest]\nend", "  lst.each do |i|\n    if i.is_a? Integer\n   \
    \   return i if i > 0 && i < 0\n    end\n  end\n  return nil\nend", "  smallest_integer\
    \ = nil\n  largest_integer = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      if smallest_integer.nil? || i < smallest_integer\n        smallest_integer\
    \ = i\n      end\n      if largest_integer.nil? || i > largest_integer\n     \
    \   largest_integer = i\n      end\n    end\n  end\n  [smallest_integer, largest_integer]\n\
    end", "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n\
    \    if x.is_a?(Integer)\n      if smallest_integer.nil? || x < smallest_integer\n\
    \        smallest_integer = x\n      end\n      if largest_integer.nil? || x >\
    \ largest_integer\n        largest_integer = x\n      end\n    end\n  end\n  [largest_integer,\
    \ smallest_integer]\nend", "  lst.sort.reverse!\n  smallest = nil\n  largest =\
    \ nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  [smallest, largest]\nend", "  lst.each do\
    \ |i|\n    if i.is_a? Integer\n      smallest_integer = i\n      break\n    end\n\
    \  end\n  lst.each do |i|\n    if i.is_a? Integer\n      largest_integer = i\n\
    \      break\n    end\n  end\n  return smallest_integer, largest_integer\nend",
  "  largest_integer = nil\n  smallest_integer = nil\n  lst.each do |i|\n    if i.is_a?\
    \ Integer\n      if i.negative?\n        largest_integer = i\n      else\n   \
    \     smallest_integer = i\n      end\n    end\n  end\n  return [largest_integer,\
    \ smallest_integer]\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n\
    \    break if x.nil?\n    if i > 0 and x < lst[i-1]\n      lst[i-1], lst[i] =\
    \ lst[i], lst[i-1]\n    end\n  end\n  lst\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks for your answer. I think this solution is more elegant than mine.\n\
    <|/ c |>\n<| c |>\nI believe this solution will fail if there is more than one\
    \ negative and one positive integer. For example, [-1, -2, -3, -4, -5, -6, -7,\
    \ -8] will return [-1, -2, -3, -4, -5, -6, -7, -8] instead of [-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -1]\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've edited\
    \ my answer to fix the bug.\n<|/ c |>\n<| a tags=ruby,arrays,sorting |>\n<code>",
  "  smallest_integer = nil\n  largest_integer = nil\n  lst.each do |x|\n    if x.is_a?(Integer)\n\
    \      if smallest_integer.nil? || smallest_integer > x\n        smallest_integer\
    \ = x\n      end\n      if largest_integer.nil? || largest_integer < x\n     \
    \   largest_integer = x\n      end\n    else\n      return nil if smallest_integer.nil?\
    \ || smallest_integer > x\n      return nil if largest_integer.nil? || largest_integer\
    \ < x\n    end\n  end\n  [largest_integer, smallest_integer]\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest\
    \ = i\n    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |x|\n    if x < 0\n      smallest = nil\n      break\n    end\n    if x >\
    \ largest\n      largest = x\n    end\n  end\n  [smallest, largest]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
