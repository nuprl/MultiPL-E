name: HumanEval_55_fib
language: rb
prompt: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
  # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
  \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
  \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
  \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
completions: ["  if n < 0\n    raise ArgumentError, \"n must be >= 0\"\n  if n ==\
    \ 0\n    return 0\n  if n == 1\n    return 1\n  return fib.call(n - 1) + fib.call(n\
    \ - 2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then return n\n  else\
    \ return fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-2) + fib(n-1)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise\
    \ ArgumentError, \"n must be >= 0\"\n  if n == 0\n    return 0\n  if n == 1\n\
    \    return 1\n  return fib.call(n - 1) + fib.call(n - 2)\nend", "  return n if\
    \ n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then return n\n  else\
    \ return fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-2) + fib(n-1)\nend", "  if n < 2\n    then\
    \ return n\n  else return fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-2) + fib(n-1)\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then n\n  else\n\
    \    fib(n-2) + fib(n-1)\n  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-2) + fib(n-1)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  if n < 2\n    then n\n  else\n    fib(n-2) + fib(n-1)\n  end\nend", " \
    \ return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"n must be >= 0\"\n  memo = {}\n  memo[0] = 0\n  memo[1] = 1\n  for i in 2..n\n\
    \    memo[i] = memo[i-1] + memo[i-2]\n  end\n  memo[n]\nend", "  return n if n\
    \ < 2 else fib(n-2) + fib(n-1)\nend", "  if n < 2\n    then return n\n  else return\
    \ fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then return\
    \ n\n  else return fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 2\n    then return n\n  else return fib(n-2) + fib(n-1)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    puts \"Negative numbers are\
    \ not allowed\"\n  elsif n == 0\n    puts \"0\"\n  elsif n == 1\n    puts \"1\"\
    \n  else\n    puts fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-2)\
    \ + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    then return n\n  else return fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-2) + fib(n-1)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-2)\
    \ + fib(n-1)\nend", "  if n < 0\n    raise ArgumentError, \"n must be >= 0\"\n\
    \  \n  if n == 0\n    return 0\n  \n  if n == 1\n    return 1\n  \n  return fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then n\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then\
    \ 1\n  else fib(n-2) + fib(n-1)\nend", "  if n < 2\n    then 1\n  else\n    fib(n-2)\
    \ + fib(n-1)\n  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 2\n    then return n\n  else return fib(n-2) + fib(n-1)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"negative argument\"\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend", "  return n if n < 2\
    \ else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError, \"n\
    \ must be >= 0\"\n  fib_cache[n] ||= fib_cache[n-1] + fib_cache[n-2]\nend", " \
    \ return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else\
    \ fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if\
    \ n < 0\n    raise ArgumentError, \"n must be >= 0\"\n  memo = {}\n  memo[1] =\
    \ 1\n  memo[2] = 2\n  while n > 0\n    memo[n] = memo[n-1] + memo[n-2]\n    n\
    \ -= 1\n  end\n  memo\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"n must be >= 0\"\n  memo = {}\n  memo[0] = 0\n  memo[1] = 1\n  while n > 0\n\
    \    memo[n] = memo[n-1] + memo[n-2]\n    n -= 1\n  end\n  memo\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-2) + fib(n-1)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  if n < 2\n    then 1\n  else\n    fib(n-2) + fib(n-1)\n\
    \  end\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n\
    \ if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-2) + fib(n-1)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-2)\
    \ + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 2\n    fib(n)\n  else\n\
    \    fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-2) + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\n\
    end", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n <\
    \ 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError, \"n\
    \ must be >= 0\"\n  if n == 0\n    return 0\n  if n == 1\n    return 1\n  return\
    \ fib(n-1) + fib(n-2)\nend", "  if n < 2\n    then return n\n  else return fib(n-2)\
    \ + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
