language: rb
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpubkbwnf3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpubkbwnf3.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.007358415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.90 tests/s, 407.70 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpubkbwnf3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpubkbwnf3.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.007358415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.90 tests/s, 407.70 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ { |sum, el| sum + el if el > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpampdxu4v\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpampdxu4v.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006928309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.34 tests/s, 288.67 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, num|\n    sum + num if num > 0\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate =\
    \ method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm0e7fbe0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpm0e7fbe0.rb:21:in `test_count_nums'\n\
    \     18:   def test_count_nums\n     19:     candidate = method(:count_nums)\n\
    \     20:     assert_equal(0, candidate.call([]))\n  => 21:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     22:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     23:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     24:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006845204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.09 tests/s, 292.18 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum + el if el > 0\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate =\
    \ method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn57p_5yv\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpn57p_5yv.rb:21:in `test_count_nums'\n\
    \     18:   def test_count_nums\n     19:     candidate = method(:count_nums)\n\
    \     20:     assert_equal(0, candidate.call([]))\n  => 21:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     22:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     23:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     24:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006223602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.68 tests/s, 321.36 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ { |sum, el| sum + el if el > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpampdxu4v\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpampdxu4v.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006928309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.34 tests/s, 288.67 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ { |sum, el| sum + el if el > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpampdxu4v\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpampdxu4v.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006928309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.34 tests/s, 288.67 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpubkbwnf3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpubkbwnf3.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.007358415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.90 tests/s, 407.70 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpb05_eei_\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpb05_eei_.rb:22:in `test_count_nums'\n\
    \     19:     candidate = method(:count_nums)\n     20:     assert_equal(0, candidate.call([]))\n\
    \     21:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 22:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     23:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     24:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     25:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.007499564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.34 tests/s, 400.02 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpb05_eei_\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpb05_eei_.rb:22:in `test_count_nums'\n\
    \     19:     candidate = method(:count_nums)\n     20:     assert_equal(0, candidate.call([]))\n\
    \     21:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 22:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     23:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     24:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     25:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.007499564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.34 tests/s, 400.02 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbkcibgjp\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpbkcibgjp.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.006781278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.46 tests/s, 442.39 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpubkbwnf3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpubkbwnf3.rb:23:in `test_count_nums'\n\
    \     20:     candidate = method(:count_nums)\n     21:     assert_equal(0, candidate.call([]))\n\
    \     22:     assert_equal(0, candidate.call([-1, -2, 0]))\n  => 23:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     24:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     25:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n     26:     assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n<6> expected but was\n<16>\n\ndiff:\n? 16\n===============================================================================\n\
    \nFinished in 0.007358415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.90 tests/s, 407.70 assertions/s\n"
  timestamp: 1659798589
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0)\
    \ { |sum, el| sum + el if el > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpampdxu4v\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpampdxu4v.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006928309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.34 tests/s, 288.67 assertions/s\n"
  timestamp: 1659798589
