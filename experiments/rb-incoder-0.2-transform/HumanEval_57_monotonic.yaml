name: HumanEval_57_monotonic
language: rb
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic.call([1, 2, 4, 20])\n# true\n# >>> monotonic.call([1, 20, 4, 10])\n\
  # false\n# >>> monotonic.call([4, 1, 0, -10])\n# true\ndef monotonic(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
  \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2,\
  \ 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
  \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
  \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
  end\n"
completions: ["  l.sort!\n  l.each_cons(2) do |a, b|\n    return false if a.nil? ||\
    \ b.nil?\n    return false if a.last < b.last\n  end\n  true\nend", "  l.sort!\n\
    \  l.each_cons(2) do |a, b|\n    return false if a.nil? || b.nil? || a > b\n \
    \ end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |x,y|\n    return false if\
    \ y > x\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return\
    \ false if b < a || b == a && a.zero?\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a, b|\n    return false if a.nil? || b.nil?\n    return false if a.last\
    \ < b.last\n    return false if a.first > b.first\n  end\n  true\nend", "  l.sort!\n\
    \  l.each_cons(2) do |x,y|\n    return false if y > x\n  end\n  true\nend", " \
    \ l.sort!\n  l.each_cons(2) do |a,b|\n    return false if b < a\n  end\n  true\n\
    end", "  l.sort!\n  l.each_cons(2) do |x,y|\n    return true if x<y\n  end\n \
    \ false\nend", "  l.sort!\n  l.each_cons(2) do |x,y|\n    return true if y > x\n\
    \  end\n  false\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return false\
    \ if a.nil? || b.nil?\n    return false if a.last < b.last\n    return true if\
    \ a.first > b.first\n  end\n  true\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    <code>", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return false if b < a\n \
    \ end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return false\
    \ if a.nil? || b.nil?\n    return false if a.last < b.last\n  end\n  true\nend",
  "  l.sort!\n  l.each_cons(2) do |a, b|\n    return false if b < a\n  end\n  true\n\
    end", "  l.sort!\n  l.each_cons(2) do |x,y|\n    return true if y > x\n  end\n\
    \  false\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me on\
    \ Ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0] -- it returns\
    \ true for [1,2,4,20] and [20,4,1,0]\n<|/ c |>\n<| c |>\n: It works for me on\
    \ 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin10.8.0] -- it returns true\
    \ for [1,2,4,20] and [20,4,1,0]\n<|/ c |>\n<| c |>\n: It works for me on 1.9.3p194\
    \ (2012-04-20 revision 35410) [x86_64-darwin10.8.0] -- it returns true for [1,2,4,20]\
    \ and [20,4,1,0]\n<|/ c |>\n<| c |>\n: It works for me on 1.9.3p194 (2012-04-20\
    \ revision 35410) [x86_64-darwin10.8.0] -- it returns true for [1,2,4,20] and\
    \ [20,4,1,0]\n<|/ c |>\n<| c |>\n: It works for me on 1.9.3p194 (2012-04-20 revision\
    \ 35410) [x86_64-darwin10.8.0] -- it returns true for [1,2,4,20] and [20,4,1,0]\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  l.sort!\n  l.each_cons(2) do |x,y|\n \
    \   return true if y > x\n  end\n  false\nend", "  l.sort!\n  l.each_cons(2) do\
    \ |x,y|\n    return false if y < x\n  end\n  true\nend", "  return l.all? { |x|\
    \ x.all? { |y| y > x } }\nend", "  return l.all? { |x| x.all? { |y| y >= x } }\n\
    end", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return false if a.nil? || b.nil?\n\
    \    return false if a.last < b.first\n  end\n  true\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `monotonic([1,3,5,7,9])` returns `true`\
    \ but `monotonic([1,3,5,7,10])` returns `false`\n<|/ c |>\n<| c |>\nI tested it\
    \ on ruby 2.4.1 on windows and it works fine. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running ruby 2.4.1 on windows.\n\
    <|/ c |>\n<| c |>\nI tested it on ruby 2.4.1 on linux and it works fine. Are you\
    \ sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly.\
    \ I'm running ruby 2.4.1 on windows.\n<|/ c |>\n<| a tags=ruby |>\n<code>", " \
    \ l.sort!\n  l.each_cons(2) do |x,y|\n    return false if x.nil? || y.nil?\n \
    \   return true if x.nil? || y.nil? || x.last <= y.last\n    return true if x.last\
    \ < y.last\n  end\n  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
