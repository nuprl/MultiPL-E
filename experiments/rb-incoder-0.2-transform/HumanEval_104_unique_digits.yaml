name: HumanEval_104_unique_digits
language: rb
prompt: "# Given a list of positive integers x. return a sorted list of all \n# elements\
  \ that hasn't any even digit.\n# Note: Returned list should be sorted in increasing\
  \ order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422, 1])\n# [1, 15,\
  \ 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
  \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
  \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n \
  \   assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
  \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
completions: ["  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ != 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size != i.to_s.length\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size !=\
    \ i.to_s.chars.size && i.to_s.chars.uniq.size != 0\n  end\n  result\nend", " \
    \ x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count != 0\n\
    \      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size != i.to_s.chars.size\
    \ || i.to_s.chars.uniq.include?('0')\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != 1\n  end\n\
    \  result\nend\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nThe function unique_digits\
    \ has one parameter, x, which is a list of positive integers. \nThe function returns\
    \ a list of all elements that hasn't any even digit.", "  x.sort!\n  result =\
    \ []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.length\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result\
    \ << x if x.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x % 10 == 0\n  end\n  result\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
