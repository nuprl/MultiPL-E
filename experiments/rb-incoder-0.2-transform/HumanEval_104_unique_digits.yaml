name: HumanEval_104_unique_digits
language: rb
prompt: "# Given a list of positive integers x. return a sorted list of all \n# elements\
  \ that hasn't any even digit.\n# Note: Returned list should be sorted in increasing\
  \ order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422, 1])\n# [1, 15,\
  \ 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
  \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
  \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n \
  \   assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
  \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
completions: ["  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ != 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size != i.to_s.length\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size !=\
    \ i.to_s.chars.size && i.to_s.chars.uniq.size != 0\n  end\n  result\nend", " \
    \ x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count != 0\n\
    \      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size != i.to_s.chars.size\
    \ || i.to_s.chars.uniq.include?('0')\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != 1\n  end\n\
    \  result\nend\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nThe function unique_digits\
    \ has one parameter, x, which is a list of positive integers. \nThe function returns\
    \ a list of all elements that hasn't any even digit.", "  x.sort!\n  result =\
    \ []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.length\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result\
    \ << x if x.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x % 10 == 0\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ > 1\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size != i.to_s.size\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.count == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,sorting,arrays |>\n<| c |>\n\
    This doesn't work. Try `unique_digits.call([15, 33, 1422, 1])`\n<|/ c |>\n<| c\
    \ |>\nYes, I missed the requirement to sort the array. Thanks for pointing out.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size < i.to_s.size\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size != i.to_s.chars.size\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count !=\
    \ i.to_s.chars.count\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i if i.to_s.chars.uniq.count == 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size\
    \ > 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count > 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.size\
    \ == 1\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    if x.to_s.chars.uniq.size != x.to_s.chars.length\n\
    \      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    if\
    \ x.to_s.chars.uniq.count > 1\n      result << x\n    end\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n   \
    \ result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count != i.to_s.length\n  end\n  result\nend", " \
    \ x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.map(&:to_i).uniq.size\
    \ != 1\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count == 1\n      result <<\
    \ i\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count > 1\n      result\
    \ << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do\
    \ |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays |>\n<code>", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| c |>\nThis doesn't work for `unique_digits([15, 33, 1422, 1])`\n<|/ c\
    \ |>\n<| c |>\n, thanks for pointing out. I've fixed the code now.\n<|/ c |>\n\
    <| c |>\n, thanks for pointing out. I've fixed the code now.\n<|/ c |>\n<| c |>\n\
    , thanks for pointing out. I've fixed the code now.\n<|/ c |>\n<| c |>\n, thanks\
    \ for pointing out. I've fixed the code now.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be done without sorting\
    \ the array. Sorting takes O(n log n) time, and this solution takes O(n) time.\n\
    <|/ c |>\n<| c |>\n: I agree with you, sorting is O(n log n), but this solution\
    \ takes O(n) time. Because it uses `uniq` method which takes O(n) time.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that takes O(n) time.\n<|/ c |>\n<| c |>\n\
    : I added a solution that takes O(n) time.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that takes O(n) time.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\n\
    end\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nGiven a list of positive integers x. return\
    \ a sorted list of all \nelements that hasn't any odd digit.\nNote: Returned list\
    \ should be sorted in increasing order.\nFor example:\n>>> unique_digits.call([15,\
    \ 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits.call([152, 323, 1422, 10])\n[]\n\
    </text>\n<cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i\
    \ if i.to_s.chars.uniq.size != i.to_s.chars.size\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    if\
    \ i.to_s.chars.uniq.size == 1\n      result << i\n    end\n  end\n  result\nend\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<cell>", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend\n</code>\n\
    <|/ a tags=ruby,arrays,sorting |>\n<| a tags=ruby,arrays,sorting |>\n<code>",
  "  x.sort!\n  result = []\n  x.each do |x|\n    result << x unless x.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,algorithm |>\n<| c\
    \ |>\n`x.sort!` will mutate the array in place, so you don't need to do `x.sort!.uniq!`\n\
    <|/ c |>\n<| c |>\nI know, but I prefer to be explicit about it.\n<|/ c |>\n<|\
    \ c |>\nI prefer to be explicit about it too, but I prefer to be explicit about\
    \ it too :)\n<|/ c |>\n<| c |>\nI prefer to be explicit about it too :) But I\
    \ prefer to be explicit about it too :)\n<|/ c |>\n<| c |>\nI prefer to be explicit\
    \ about it too :)\n<|/ c |>\n<| a tags=ruby,algorithm |>\n<code>", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size !=\
    \ i.to_s.chars.length\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.count == 1\n  end\n  result\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| a dscore=0 |>\n<code>", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count !=\
    \ 1\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count > 1\n\
    \      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count !=\
    \ i.to_s.chars.length\n  end\n  result\nend\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `unique_digits.call([15, 33, 1422, 1])`\n<|/ c |>\n<| c |>\n\
    Yes, I tested it and it doesn't work. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. I've updated my question\
    \ to make it clearer. Sorry for the confusion.\n<|/ c |>\n<| c |>\nI've updated\
    \ my answer to make it clearer. Sorry for the confusion.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays,sorting |>\n<| a dscore=0\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size !=\
    \ i.to_s.chars.length\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |x|\n    if x.to_s.chars.uniq.count != 0\n      result << x\n    end\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count\
    \ != 1\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count >\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result\
    \ << x if x.to_s.chars.uniq.size <= 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    if x.to_s.chars.uniq.size == 1\n      result << x\n\
    \    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count\
    \ != 0\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend\n</code>\n\
    <|/ a tags=ruby,arrays,sorting |>\n<| c |>\nThis doesn't work if there are multiple\
    \ digits in an integer.\n<|/ c |>\n<| c |>\n, thanks for pointing out. I've updated\
    \ my answer to fix it.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count != 0\n      result <<\
    \ x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend\n</cell>\n\
    <cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ <= 1\n  end\n  result\nend\n</cell>\n<cell>", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ < i.to_s.size\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do\
    \ |x|\n    result << x if x.to_s.chars.uniq.size != x.to_s.chars.size\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size < i.to_s.size\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count > 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.length\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count != 0\n      result\
    \ << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do\
    \ |i|\n    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size <= 1\n  end\n  result\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to make it more efficient than O(n^2). Maybe O(nlogn) would be better?\n<|/\
    \ c |>\n<| c |>\n: Yes, it can be done in O(nlogn) by sorting the list and then\
    \ iterating over it once, keeping track of the last digit seen. I'll post an answer\
    \ shortly.\n<|/ c |>\n<| c |>\n: I added an O(nlogn) solution to the answer.\n\
    <|/ c |>\n<| a tags=ruby,algorithm |>\nHere's a solution that's O(nlogn), but\
    \ uses Ruby's Array#uniq! method to do the work:\n<code>", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count > 1\n      result << x\n\
    \    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i if i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size\
    \ == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x % 2 == 0\n      result << x\n    end\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x.to_s.chars.uniq.count !=\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result\
    \ << x unless x.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count != 0\n      result\
    \ << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do\
    \ |i|\n    result << i if i.to_s.chars.uniq.count == 1\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count > 1\n\
    \      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    if i.to_s.chars.uniq.count\
    \ == 1\n      result << i\n    end\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i unless\
    \ i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 ==\
    \ 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != i.to_s.length\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |x|\n    result\
    \ << x unless x.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size <=\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend\n\
    </code>\n<|/ a tags=ruby,arrays,sorting |>\n<| c |>\nThis doesn't work. Try it\
    \ with `unique_digits([15, 33, 1422, 1])`\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added a test case to my answer.\n<|/ c |>\n<| a tags=ruby,arrays,sorting\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\n\
    end\n</cell>\n<cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count != 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count > 1\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.size ==\
    \ 1\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result =\
    \ []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count % 2 == 0\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.count == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n\
    \  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count != i.to_s.chars.count\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    if x.to_s.chars.map(&:to_i).uniq.count ==\
    \ 1\n      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result =\
    \ []\n  x.each do |x|\n    if x.to_s.chars.uniq.count != 0\n      result << x\n\
    \    end\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\n`x.sort!` will mutate `x`, so `x.uniq` will\
    \ throw an error.\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"Note\"\
    . :)\n<|/ c |>\n<| c |>\nI guess you meant `x.sort!` instead of `x.uniq!`\n<|/\
    \ c |>\n<| c |>\nYes, I meant `x.sort!` instead of `x.uniq!`\n<|/ c |>\n<| c |>\n\
    `x.sort!` will mutate `x`, so `x.uniq` will throw an error.\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if\
    \ i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |x|\n    result << x if x % 10 == 0\n  end\n  result\n\
    end", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count\
    \ != 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n  \
    \  result << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.size ==\
    \ 1\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    result << x if x % 10 == 0\n  end\n  result\nend\n\
    </cell>\n<cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result << i\
    \ unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i if i.to_s.chars.uniq.count !=\
    \ i.to_s.chars.count\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each\
    \ do |i|\n    result << i if i.to_s.chars.uniq.count != i.to_s.chars.length\n\
    \  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i if i.to_s.chars.uniq.size == 1\n  end\n  result\nend", "  x.sort!\n  result\
    \ = []\n  x.each do |x|\n    result << x if x % 10 == 0\n  end\n  result\nend",
  "  x.sort!\n  result = []\n  x.each do |x|\n    if x.to_s.chars.uniq.count > 1\n\
    \      result << x\n    end\n  end\n  result\nend", "  x.sort!\n  result = []\n\
    \  x.each do |i|\n    result << i if i.to_s.chars.uniq.count != 1\n  end\n  result\n\
    end\n</cell>\n<cell>", "  x.sort!\n  result = []\n  x.each do |i|\n    result\
    \ << i unless i.to_s.chars.uniq.count > 1\n  end\n  result\nend\n</code>\n<|/\
    \ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work. Try `unique_digits([15, 33,\
    \ 1422, 1])`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've fixed it.\n<|/\
    \ c |>\n<| c |>\n`x.sort!` should be `x.sort`\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ out. I've fixed it.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  x.sort!\n\
    \  result = []\n  x.each do |i|\n    result << i unless i.to_s.chars.uniq.count\
    \ % 2 == 0\n  end\n  result\nend", "  x.sort!\n  result = []\n  x.each do |i|\n\
    \    result << i unless i.to_s.chars.uniq.count % 2 == 0\n  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
