name: HumanEval_132_is_nested
language: rb
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return True if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\n# >>>\
  \ is_nested.call(\"[[]]\")\n# true\n# >>> is_nested.call(\"[]]]]]]][[[[[]\")\n#\
  \ false\n# >>> is_nested.call(\"[][]\")\n# false\n# >>> is_nested.call(\"[]\")\n\
  # false\n# >>> is_nested.call(\"[[][]]\")\n# true\n# >>> is_nested.call(\"[[]][[\"\
  )\n# true\ndef is_nested(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
  \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"\
  ))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
  \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n \
  \   assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"\
  []]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
  \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n \
  \   assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
  [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
  \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
  ))\n  end\nend\n"
completions: ["  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\",
  "  nesting = 0\n  bracket_count = 0\n  bracket_open = 0\n  bracket_close = 0\n \
    \ bracket_opens = []\n  bracket_closes = []\n  bracket_opens_count = 0\n  bracket_closes_count\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_indexs\
    \ = []\n  bracket_closes_indexs = []\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index\
    \ = 0\n  bracket_closes_index = 0\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index\
    \ = 0\n  bracket_closes_index = 0\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index\
    \ = 0\n  bracket_closes_index = 0\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index\
    \ = 0\n  bracket_closes_index = 0\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index\
    \ = 0\n  bracket_closes_index = 0\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index\
    \ = 0\n  bracket_closes_index = 0\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index\
    \ = 0\n  bracket_closes_index = 0\n  bracket_opens_index = 0\n  bracket_closes_index\
    \ = 0\n  bracket_opens_index = 0\n  bracket_closes_index = 0\n  bracket_opens_index",
  "  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \")\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\\
    [/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\\
    )/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\\
    [/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\\
    )/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\\
    [/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\\
    )/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\",
  '  string.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s| s.scan(/\[([^\[\]]+)\]/).flatten.all?{|s|
    s.scan(/\[([^\', "  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')", "  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\]/, \"}\")\n  string.gsub!(/\\\
    {/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\\
    ]/, \"}\")\n  string.gsub!(/\\{/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\\
    [/, \"{\")\n  string.gsub!(/\\]/, \"}\")\n  string.gsub!(/\\{/, \"[\")\n  string.gsub!(/\\\
    }/, \"]\")\n  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\]/, \"}\")\n  string.gsub!(/\\\
    {/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\\
    ]/, \"}\")\n  string.gsub!(/\\{/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\\
    [/, \"{\")\n  string.gsub!(/\\]/, \"}\")\n  string.gsub!(/\\{/, \"[\")\n  string.gsub!(/\\\
    }/, \"]\")\n  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\]/, \"}\")\n  string.gsub!(/\\\
    {/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\\
    ]/, \"}\")\n  string.gsub!(/\\{/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\\
    [/, \"{\")\n  string.gsub!(/\\]/, \"}\")\n  string.gsub!(/\\{/, \"[\")\n  string.gsub!(/\\\
    }/, \"]\")\n  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\]/, \"}\")\n  string.gsub!(/\\\
    {/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\[/, \"{\")\n  string.gsub!(/\\\
    ]/, \"}\")\n  string.gsub!(/\\{/, \"[\")\n  string.gsub!(/\\}/, \"]\")\n  string.gsub!(/\\\
    [/, \"{\")\n  string.gsub!(", "  nesting = 0\n  brackets = 0\n  for i in 0...string.length\n\
    \    if string[i] == \"[\"\n      nesting += 1\n      brackets += 1\n    elsif\
    \ string[i] == \"]\"\n      nesting -= 1\n      brackets -= 1\n      if nesting\
    \ < 0\n        return false\n    end\n  end\n  return brackets > 0\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nI like your solution, but I believe that `[[]]`\
    \ should return `true` because `[]]` contains at least one `[`.\n<|/ c |>\n<|\
    \ c |>\nI believe that `[[]]` should return `true` because `[]]` contains at least\
    \ one `[`.\n<|/ c |>\n<| c |>\nI believe that `[[]]` should return `true` because\
    \ `[]]` contains at least one `[`.\n<|/ c |>\n<| c |>\nI believe that `[[]]` should\
    \ return `true` because `[]]` contains at least one `[`.\n<|/ c |>\n<| c |>\n\
    I believe that `[[]]` should return `true` because `[]]` contains at least one\
    \ `[`.\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  string.gsub!(/\\[/, '{')\n\
    \  string.gsub!(/\\]/, '}')\n  string.gsub!(/\\{/, '[')\n  string.gsub!(/\\}/,\
    \ ']')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(/\\]/, ']')\n  string.gsub!(/\\\
    {/, '{')\n  string.gsub!(/\\}/, '}')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(/\\\
    ]/, ']')\n  string.gsub!(/\\{/, '{')\n  string.gsub!(/\\}/, '}')\n  string.gsub!(/\\\
    [/, '[')\n  string.gsub!(/\\]/, ']')\n  string.gsub!(/\\{/, '{')\n  string.gsub!(/\\\
    }/, '}')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(/\\]/, ']')\n  string.gsub!(/\\\
    {/, '{')\n  string.gsub!(/\\}/, '}')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(/\\\
    ]/, ']')\n  string.gsub!(/\\{/, '{')\n  string.gsub!(/\\}/, '}')\n  string.gsub!(/\\\
    [/, '[')\n  string.gsub!(/\\]/, ']')\n  string.gsub!(/\\{/, '{')\n  string.gsub!(/\\\
    }/, '}')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(/\\]/, ']')\n  string.gsub!(/\\\
    {/, '{')\n  string.gsub!(/\\}/, '}')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(/\\\
    ]/, ']')\n  string.gsub!(/\\{/, '{')\n  string.gsub!(/\\}/, '}')\n  string.gsub!(/\\\
    [/, '[')\n  string.gsub!(/\\]/, ']')\n  string.gsub!(/\\{/, '{')\n  string.gsub!(/\\\
    }/, '}')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(/\\]/, ']')\n  string.gsub!(/\\\
    {/, '{')\n  string.gsub!(/\\}/, '}')\n  string.gsub!(/\\[/, '[')\n  string.gsub!(",
  "  nesting = 0\n  nesting_open = 0\n  nesting_close = 0\n  nesting_open = string.count(\"\
    [\")\n  nesting_close = string.count(\"]\")\n  nesting = nesting_open + nesting_close\n\
    \  if nesting == 0\n    return false\n  else\n    return true\n  end\nend", " \
    \ nesting = 0\n  brackets = 0\n  for i in string\n    if i == \"[\"\n      nesting\
    \ += 1\n      brackets += 1\n    elsif i == \"]\"\n      brackets -= 1\n     \
    \ nesting -= 1\n      break if brackets == 0\n  end\n  nesting == 0\nend", " \
    \ string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/",
  "  string.scan(/\\[(?:[^\\[\\]]|(?R))*\\]|\\[(?:[^\\[\\]]|(?R))*\\]/)\n  string.scan(/\\\
    [(?:[^\\[\\]]|(?R))*\\]/)\n  string.scan(/\\[(?:[^\\[\\]]|(?R))*\\]\\]/)\n  string.scan(/\\\
    [(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]/)\n  string.scan(/\\[(?:[^\\\
    [\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\]/)\n  string.scan(/\\[(?:[^\\[\\]]|(?R))*\\\
    ]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]/)\n  string.scan(/\\[(?:[^\\\
    [\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\]/)\n  string.scan(/\\\
    [(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\\
    [\\]]|(?R))*\\]/)\n  string.scan(/\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\\
    ]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]/)\n\
    \  string.scan(/\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\\
    ]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\\
    ]/)\n  string.scan(/\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\\
    [\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\\
    ]]|(?R))*\\]\\[(?:[^\\[\\]]|(?R))*\\]/)\n  string.scan(/\\[(?:[^\\[\\]]|(?R))*\\\
    ]\\[(?:[^\\[\\]]|(?R))*\\]\\[(?:[^\\[\\]]", "  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\\
    ]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\\
    [/, '')\n  string.gsub!(/\\]/, '')", "  nesting = 0\n  open_brackets = 0\n  close_brackets\
    \ = 0\n  \n  string.each_char do |c|\n    if c == '['\n      open_brackets +=\
    \ 1\n    elsif c == '['\n      close_brackets += 1\n    elsif c == ']'\n     \
    \ close_brackets -= 1\n    elsif c == ']'\n      open_brackets -= 1\n    elsif\
    \ open_brackets == close_brackets\n      nesting += 1\n    end\n  end\n  \n  nesting\
    \ == 0\nend", "  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \")\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\\
    [/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\\
    )/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\\
    [/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\\
    )/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\\
    [/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\\
    )/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    (/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\[/, \"(\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\(/, \"[\")\n  string.gsub!(/\\)/, \"]\")\n  string.gsub!(/\\",
  "  string.scan(/\\[/).any? {|x| string.scan(/\\]/).any? {|y| x == y}}\nend", " \
    \ string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\]/",
  "  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n\
    \  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n\
    \  string.gsub!(/\\]/, '')\n  string.gsub!(/\\[/, '')\n  string.gsub!(/\\]/, '')",
  "  string.scan(/\\[/).any? { |c| string.scan(/\\]/).any? { |d| c == d } }\nend",
  "  string.gsub!(/\\[|\\]\\]|\\[|\\]/, \"\")\n  string.gsub!(/\\[|\\]/, \"[\")\n\
    \  string.gsub!(/\\]\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\]/, \"[\")\n  string.gsub!(/\\\
    ]/, \"]\")\n  string.gsub!(/\\[|\\]/, \"[\")\n  string.gsub!(/\\]/, \"]\")\n \
    \ string.gsub!(/\\[|\\]\\]/, \"[\")\n  string.gsub!(/\\]\\]/, \"]\")\n  string.gsub!(/\\\
    [|\\]\\]/, \"[\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\[|\\]/, \"\
    [\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\]/, \"[\")\n  string.gsub!(/\\\
    ]\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\]/, \"[\")\n  string.gsub!(/\\]/, \"]\"\
    )\n  string.gsub!(/\\[|\\]/, \"[\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    [|\\]\\]/, \"[\")\n  string.gsub!(/\\]\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\\
    ]/, \"[\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\[|\\]/, \"[\")\n \
    \ string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\]/, \"[\")\n  string.gsub!(/\\\
    ]\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\]/, \"[\")\n  string.gsub!(/\\]/, \"]\"\
    )\n  string.gsub!(/\\[|\\]/, \"[\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\\
    [|\\]\\]/, \"[\")\n  string.gsub!(/\\]\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\\
    ]/, \"[\")\n  string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\[|\\]/, \"[\")\n \
    \ string.gsub!(/\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\]/, \"[\")\n  string.gsub!(/\\\
    ]\\]/, \"]\")\n  string.gsub!(/\\[|\\]\\]/, \""]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
