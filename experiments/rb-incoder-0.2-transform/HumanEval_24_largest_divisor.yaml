name: HumanEval_24_largest_divisor
language: rb
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n# >>> largest_divisor.call(15)\n# 5\ndef largest_divisor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
  \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
  \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
  \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
  \  end\nend\n"
completions: ["  largest_divisor = 1\n  n.times do |i|\n    break if n % i == 0\n\
    \    largest_divisor = i if largest_divisor > i\n  end\n  largest_divisor\nend",
  "  largest_divisor = 0\n  for i in 1..n\n    if n % i == 0\n      largest_divisor\
    \ = i\n      break\n  largest_divisor\nend", "  largest_divisor = 1\n  n.times\
    \ do |i|\n    break if n % i == 0\n    largest_divisor = i if i > largest_divisor\n\
    \  end\n  largest_divisor\nend", "  largest_divisor = 0\n  for i in 1..n\n   \
    \ if n % i == 0\n      largest_divisor = i\n    end\n  end\n  return largest_divisor\n\
    end", "  largest_divisor = 0\n  n.times do |i|\n    largest_divisor = i if n %\
    \ i == 0\n  end\n  largest_divisor\nend\n</code>\n<|/ a tags=ruby,algorithm |>\n\
    <| c |>\nThis doesn't work. Try `largest_divisor.call(15)`.\n<|/ c |>\n<| c |>\n\
    : It works fine for me. `largest_divisor.call(15)` returns `5`.\n<|/ c |>\n<|\
    \ c |>\n: I see what you mean. I've updated my answer to fix it.\n<|/ c |>\n<|\
    \ c |>\n: I see what you mean. I've updated my answer to fix it.\n<|/ c |>\n<|\
    \ c |>\n: I see what you mean. I've updated my answer to fix it.\n<|/ c |>\n<|\
    \ a |>\n<code>", "  largest_divisor = nil\n  n.times do |i|\n    break if n %\
    \ i == 0\n    largest_divisor = i if largest_divisor.nil? || largest_divisor >\
    \ i\n  end\n  largest_divisor\nend", "  largest_divisor = 1\n  n.times do |i|\n\
    \    if n % i == 0\n      largest_divisor = i\n    end\n  end\n  largest_divisor\n\
    end\n</cell>\n<cell>\nlargest_divisor(15)\n</cell>\n<text>\nThe last function\
    \ we wrote is largest_divisor. Let's call it a couple more times to see what happens.",
  "  largest_divisor = nil\n  n.times do |i|\n    if n % i == 0\n      largest_divisor\
    \ = i\n    end\n  end\n  largest_divisor\nend", "  largest_divisor = nil\n  n.times\
    \ do |i|\n    largest_divisor = i if i % 2 == 0\n  end\n  largest_divisor\nend\n\
    </code>\n<|/ a tags=ruby,loops |>\n<| c |>\nThanks for the answer! I didn't know\
    \ about `times` and `if` statements. I really appreciate it!\n<|/ c |>\n<| c |>\n\
    I added a more efficient solution that doesn't require any loops.\n<|/ c |>\n\
    <| c |>\nThanks for the answer! I didn't know about `times` and `if` statements.\
    \ I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  largest_divisor\
    \ = 0\n  n.times do |i|\n    largest_divisor = i if n % i == 0\n  end\n  largest_divisor\n\
    end", "  largest_divisor = 0\n  n.times do |i|\n    largest_divisor = i if n %\
    \ i == 0\n  end\n  largest_divisor\nend", "  largest_divisor = 0\n  for i in 1..n\n\
    \    if n % i == 0\n      largest_divisor = i\n      break\n  return largest_divisor\n\
    end", "  largest_divisor = 0\n  n.times do |i|\n    break if n % i == 0\n    largest_divisor\
    \ = i if largest_divisor < i\n  end\n  largest_divisor\nend", "  largest_divisor\
    \ = 1\n  n.times do |i|\n    break if n % i == 0\n    largest_divisor = i if largest_divisor\
    \ > i\n  end\n  largest_divisor\nend", "  largest_divisor = 0\n  n.times do |i|\n\
    \    if n % i == 0\n      largest_divisor = i\n      break\n    end\n  end\n \
    \ largest_divisor\nend", "  largest_divisor = 0\n  n.times do |i|\n    if n %\
    \ i == 0\n      largest_divisor = i\n    end\n  end\n  largest_divisor\nend",
  "  largest_divisor = nil\n  n.times do |i|\n    break if n % i == 0\n    largest_divisor\
    \ = i if largest_divisor.nil? || largest_divisor > i\n  end\n  largest_divisor\n\
    end", "  largest_divisor = 1\n  for i in 1..n\n    if n % i == 0\n      largest_divisor\
    \ = i\n    end\n  end\n  largest_divisor\nend", "  largest_divisor = nil\n  n.times\
    \ do |i|\n    largest_divisor = i if n % i == 0\n  end\n  largest_divisor\nend",
  "  largest_divisor = nil\n  n.times do |i|\n    break if n % i == 0\n    largest_divisor\
    \ = i if largest_divisor.nil? || largest_divisor > i\n  end\n  largest_divisor\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
