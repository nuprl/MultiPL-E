name: HumanEval_16_count_distinct_characters
language: rb
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters.call(\"xyzXYZ\")\n# 3\n# >>>\
  \ count_distinct_characters.call(\"Jerry\")\n# 4\ndef count_distinct_characters(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
  \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
  \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
  abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n    assert_equal(5,\
  \ candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
completions: ["  string.downcase!\n  string.gsub(/[^a-z]/i).length\nend", "  string.downcase!\n\
    \  string.gsub(/[^a-z]+/, \"\").length\nend", "  string.downcase!\n  string.gsub(/[^a-z]/i).length\n\
    end", "  string.downcase!\n  string.gsub(/[^a-z]/i).length\nend", "  string.downcase!\n\
    \  string.gsub(/[[:alpha:]]/) { |c| c.ord }\nend", "  string.downcase!\n  string.gsub(/[^a-z]/i).length\n\
    end", "  string.downcase!\n  string.gsub(/[^a-z]/i, '')\n    .count\nend", " \
    \ string.downcase!\n  string.gsub(/[[:alpha:]]/) { |char| char.ord }\n  string.scan(/[[:alpha:]]/).uniq.size\n\
    end", "  string.downcase!\n  string.gsub(/[^a-z]/i).length\nend", "  string.downcase!\n\
    \  string.gsub(/[^a-z]+/, '').length\nend", "  string.downcase!\n  string.gsub(/[^a-z]/i).length\n\
    end", "  string.downcase!\n  string.gsub(/[[:alpha:]]/) { |c| c.length }\nend",
  "  string.downcase!\n  string.gsub(/[[:alpha:]]/) { |c| string.count(c) }\nend",
  "  string.downcase!\n  string.gsub(/[[:alpha:]]/) { |char| char.ord }.uniq.size\n\
    end", "  string.split(\"\").uniq.size\nend", "  string.downcase!\n  string.gsub(/[[:alpha:]]/).size\n\
    end", "  string.downcase!\n  string.gsub(/[^a-z]/i).length\nend", "  string.downcase!\n\
    \  string.gsub(/[^a-z]+/, \"\").length\nend", "  string.downcase!\n  string.gsub(/[[:alpha:]]/).length\n\
    end", "  string.downcase!\n  string.gsub(/[[:alpha:]]/) { |c| c.length }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
