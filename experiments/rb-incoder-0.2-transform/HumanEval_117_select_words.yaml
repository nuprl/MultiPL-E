name: HumanEval_117_select_words
language: rb
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words.call(\"\
  Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had\
  \ a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple\
  \ white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"\
  ]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["  \n  # TODO: Write your code here\n  \nend\n</cell>\n<text>\nTest\
    \ your Code\nRun the cell below to test your code.", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter.to_i\
    \ == n\n        result << word\n      end\n    end\n  end\n  result\nend", " \
    \ words = []\n  i = 0\n  while i < s.length\n    if s[i] =~ /[aeiou]/\n      words.push(s[i..i+n])\n\
    \      i += n\n    end\n  end\n  return words\nend", "  \n  # TODO: Write your\
    \ code here\n  \n  return []\nend", "  \n  # TODO: Write your code here\n  \n\
    end\n</cell>\n<text>\nTest your Code\nRun the cell below to test your code.",
  "  \n  # TODO: Write your code here\n  \nend", "    \n    words = []\n    \n   \
    \ if s == \"\"\n        \n        return words\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    if word.count(n) == n\n      result << word\n    end\n\
    \  end\n  return result\nend", "  \n  # TODO: Write your code here\n  \nend",
  "    \n    # Write your code here\n    \n    return []\n    \n</cell>\n<cell>",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  result = []\n \
    \ s = s.downcase\n  s.scan(/[b-df-hj-np-tv-xz]/) do |c|\n    if s.count(c) ==\
    \ n\n      result << c\n    end\n  end\n  result\nend", "  result = []\n  \n \
    \ s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n     \
    \ if letter.match(/[aeiou]/)\n        if result.length >= n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  \n  result\nend", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      result << word if letter == n\n    end\n  end\n  result\nend", "  \n  #\
    \ TODO: Write your code here\n  \nend", "  \n  # Your code here\n  \nend", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.match(/[aeiou]/)\n        if result.size < n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  result\nend", "  result =\
    \ []\n  i = 0\n  while i < s.length\n    if s[i] == \" \"\n      i += 1\n    \
    \  while i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n\
    \          break\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n   \
    \   while i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n\
    \          break\n        end\n      end\n    end\n    if s[i] == \" \"\n    \
    \  i += 1\n      while i < s.length\n        if s[i] == \" \"\n          i +=\
    \ 1\n        else\n          break\n        end\n      end\n    end\n    if s[i]\
    \ == \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n\
    \          i += 1\n        else\n          break\n        end\n      end\n   \
    \ end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if\
    \ s[i] == \" \"\n          i += 1\n        else\n          break\n        end\n\
    \      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1", "  \n  # Your code here\n\
    \  \nend\n</cell>\n<cell>", "    \n    words = []\n    \n    if s == \"\"\n  \
    \      return words\n    \n    i = 0\n    while i < s.length\n        if s.chars.at(i)\
    \ == \" \"\n            i += 1\n        else\n            words.push(s.chars.at(i))\n\
    \            i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \""]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
