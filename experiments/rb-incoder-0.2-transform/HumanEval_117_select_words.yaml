name: HumanEval_117_select_words
language: rb
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words.call(\"\
  Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had\
  \ a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple\
  \ white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"\
  ]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["  \n  # TODO: Write your code here\n  \nend\n</cell>\n<text>\nTest\
    \ your Code\nRun the cell below to test your code.", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter.to_i\
    \ == n\n        result << word\n      end\n    end\n  end\n  result\nend", " \
    \ words = []\n  i = 0\n  while i < s.length\n    if s[i] =~ /[aeiou]/\n      words.push(s[i..i+n])\n\
    \      i += n\n    end\n  end\n  return words\nend", "  \n  # TODO: Write your\
    \ code here\n  \n  return []\nend", "  \n  # TODO: Write your code here\n  \n\
    end\n</cell>\n<text>\nTest your Code\nRun the cell below to test your code.",
  "  \n  # TODO: Write your code here\n  \nend", "    \n    words = []\n    \n   \
    \ if s == \"\"\n        \n        return words\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    if word.count(n) == n\n      result << word\n    end\n\
    \  end\n  return result\nend", "  \n  # TODO: Write your code here\n  \nend",
  "    \n    # Write your code here\n    \n    return []\n    \n</cell>\n<cell>",
  "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  result = []\n \
    \ s = s.downcase\n  s.scan(/[b-df-hj-np-tv-xz]/) do |c|\n    if s.count(c) ==\
    \ n\n      result << c\n    end\n  end\n  result\nend", "  result = []\n  \n \
    \ s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n     \
    \ if letter.match(/[aeiou]/)\n        if result.length >= n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  \n  result\nend", "  result\
    \ = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      result << word if letter == n\n    end\n  end\n  result\nend", "  \n  #\
    \ TODO: Write your code here\n  \nend", "  \n  # Your code here\n  \nend", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.match(/[aeiou]/)\n        if result.size < n\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  result\nend", "  result =\
    \ []\n  i = 0\n  while i < s.length\n    if s[i] == \" \"\n      i += 1\n    \
    \  while i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n\
    \          break\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n   \
    \   while i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n\
    \          break\n        end\n      end\n    end\n    if s[i] == \" \"\n    \
    \  i += 1\n      while i < s.length\n        if s[i] == \" \"\n          i +=\
    \ 1\n        else\n          break\n        end\n      end\n    end\n    if s[i]\
    \ == \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n\
    \          i += 1\n        else\n          break\n        end\n      end\n   \
    \ end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if\
    \ s[i] == \" \"\n          i += 1\n        else\n          break\n        end\n\
    \      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\n\
    \        if s[i] == \" \"\n          i += 1\n        else\n          break\n \
    \       end\n      end\n    end\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length\n        if s[i] == \" \"\n          i += 1\n        else\n   \
    \       break\n        end\n      end\n    end\n    if s[i] == \" \"\n      i\
    \ += 1\n      while i < s.length\n        if s[i] == \" \"\n          i += 1\n\
    \        else\n          break\n        end\n      end\n    end\n    if s[i] ==\
    \ \" \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n  \
    \        i += 1\n        else\n          break\n        end\n      end\n    end\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          break\n        end\n   \
    \   end\n    end\n    if s[i] == \" \"\n      i += 1", "  \n  # Your code here\n\
    \  \nend\n</cell>\n<cell>", "    \n    words = []\n    \n    if s == \"\"\n  \
    \      return words\n    \n    i = 0\n    while i < s.length\n        if s.chars.at(i)\
    \ == \" \"\n            i += 1\n        else\n            words.push(s.chars.at(i))\n\
    \            i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"\n  \
    \          i += 1\n        else\n            words.push(s.chars.at(i))\n     \
    \       i += 1\n        end\n    end\n    \n    i = 0\n    while i < s.length\n\
    \        if s.chars.at(i) == \" \"\n            i += 1\n        else\n       \
    \     words.push(s.chars.at(i))\n            i += 1\n        end\n    end\n  \
    \  \n    i = 0\n    while i < s.length\n        if s.chars.at(i) == \" \"", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter.match(/[aeiou]/)\n        result << word if word.split(\" \"\
    ).length == n\n      end\n    end\n  end\n  result\nend", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter.match(/[aeiou]/)\n\
    \        if result.count < n\n          result << word\n        end\n      end\n\
    \    end\n  end\n  result\nend", "  \n  # TODO: Write your code here\n  \nend",
  "  result = []\n  s.split(\" \").each do |word|\n    if word.chars.count { |c| c\
    \ == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" } >= n\n  \
    \    result << word\n    end\n  end\n  result\nend", "  \n  # TODO: Write your\
    \ code here\n  \nend", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\
    \").each do |letter|\n      if letter.match(/[aeiou]/)\n        result << word\
    \ if word.split(\"\").size >= n\n      end\n    end\n  end\n  result\nend", " \
    \ result = []\n  s.split(\" \").each do |word|\n    if word.chars.uniq.size ==\
    \ n\n      result << word\n    end\n  end\n  result\nend", "  \n  # TODO: Write\
    \ your code here\n  \nend", "  result = []\n  s.split(\" \").each do |word|\n\
    \    word.split(\"\").each do |letter|\n      if letter == \"a\" || letter ==\
    \ \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\"\n        result\
    \ << word\n      end\n    end\n  end\n  result\nend", "  s.split(\" \").select\
    \ do |word|\n    word.chars.all? { |c| c == \"a\" || c == \"e\" || c == \"i\"\
    \ || c == \"o\" || c == \"u\" }\n  end\nend", "    \n    words = []\n    \n  \
    \  if s == \"\"\n        \n        words = []\n        \n    else \n        \n\
    \        words = s.split(\"\")\n        \n        words.each do |word|\n     \
    \       \n            if word.count(n) == n\n                \n              \
    \  words << word\n                \n            end\n            \n        end\n\
    \        \n    end\n    \n    return words\n    \nend\n</cell>\n<cell>\nselect_words.call(\"\
    Mary had a little lamb\", 4)\n</cell>\n<cell>\nselect_words.call(\"Mary had a\
    \ little lamb\", 3)\n</cell>\n<cell>\nselect_words.call(\"simple white space\"\
    , 2)\n</cell>\n<cell>\nselect_words.call(\"Hello world\", 4)\n</cell>\n<cell>\n\
    select_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle\
    \ sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\n\
    select_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle\
    \ sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\n\
    select_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle\
    \ sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\n\
    select_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle\
    \ sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\n\
    select_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle\
    \ sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\n\
    select_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle\
    \ sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\n\
    select_words.call(\"Uncle sam\", 3)\n</cell>\n<cell>\nselect_words.call(\"Uncle\
    \ sam", "    \n    words = []\n    \n    if s == \"\"\n        \n        return\
    \ words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "  \n  # Your code here\n  \nend", "  \n  # TODO: Write your\
    \ code here\n  \nend\n</cell>\n<cell>", "  \n  # TODO: Write your code here\n\
    \  \nend\n</cell>\n<text>\nTest your code\nRun the cell below to test your code.",
  "  \n  # TODO: Write your code here\n  \nend\n</cell>\n<text>\nTest your Code\n\
    Run the cell below to test your code.", "  result = []\n  s.split(\" \").each\
    \ do |word|\n    if word.chars.uniq.count == n\n      result << word\n    end\n\
    \  end\n  result\nend", "  \n  # TODO: Write your code here\n  return []\nend",
  "  \n  # TODO: Write your code here\n  \nend", "  \n  # TODO: Write your code here.\n\
    \  return []\nend", "  result = []\n  i = 0\n  while i < s.length\n    if s.slice(i,i+n).scan(/[b-df-hj-np-tv-z]/).length\
    \ == n\n      result << s.slice(i,i+n)\n      i += n\n    end\n    i += 1\n  end\n\
    \  result\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nI like your solution,\
    \ but I believe that `scan` will iterate over the entire string even if the match\
    \ is found early in the string. `scan(/[b-df-hj-np-tv-z]/)` will iterate over\
    \ the entire string even if the match is found early in the string. `scan(/[b-df-hj-np-tv-z]/).length\
    \ == n` will iterate over the entire string even if the match is found early in\
    \ the string. `scan(/[b-df-hj-np-tv-z]/).length == n` will iterate over the entire\
    \ string even if the match is found early in the string. `scan(/[b-df-hj-np-tv-z]/).length\
    \ == n` will iterate over the entire string even if the match is found early in\
    \ the string. `scan(/[b-df-hj-np-tv-z]/).length == n` will iterate over the entire\
    \ string even if the match is found early in the string. `scan(/[b-df-hj-np-tv-z]/).length\
    \ == n` will iterate over the entire string even if the match is found early in\
    \ the string. `scan(/[b-df-hj-np-tv-z]/).length == n` will iterate over the entire\
    \ string even if the match is found early in the string. `scan(/[b-df-hj-np-tv-z]/).length\
    \ == n` will iterate over the entire string even if the match is found early in\
    \ the string. `scan(/[b-df-hj-np-tv-z]/).length == n` will iterate over the entire\
    \ string even if the match is found early in the string. `scan(/[b-df-hj-np-tv-z]/).length\
    \ == n` will iterate over the entire string even if the match is found early in\
    \ the string. `scan(/[b-df-hj-np-tv-z]/).length == n` will iterate over the entire\
    \ string even if the match is found early in the string. `scan(/[b-df-hj-np-tv-z]/).length\
    \ == n` will iterate over the entire ", "  \n  # TODO: Write your code here\n\
    \  \nend", "  s.split(\" \").select { |word| word.count(n) == n }\nend", "  words\
    \ = []\n  i = 0\n  while i < s.length\n    word = s[i]\n    if word.length ==\
    \ n\n      words.push(word)\n    i += 1\n  end\n  return words\nend", "  \n  #\
    \ Your code here\n  \nend\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\"\
    , 4)\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\", 3)\n</cell>\n\
    <cell>\nselect_words(\"simple white space\", 2)\n</cell>\n<cell>\nselect_words(\"\
    Hello world\", 4)\n</cell>\n<cell>\nselect_words(\"Uncle sam\", 3)\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nIf the string s is empty then return 0.\nIf the string\
    \ contains only spaces then return 1.\nIf the string contains only letters then\
    \ return 1.\nIf the string contains only digits then return 1.\nIf the string\
    \ contains only consonants then return 1.\nIf the string contains only vowels\
    \ then return 1.\nIf the string contains only other characters then return 1.\n\
    If the string contains only consonants and digits then return 2.\nIf the string\
    \ contains only consonants, digits and vowels then return 3.\nIf the string contains\
    \ only consonants, digits, vowels and other characters then return 4.\nIf the\
    \ string contains only consonants, digits, vowels, other characters and spaces\
    \ then return 5.\nIf the string contains only consonants, digits, vowels, other\
    \ characters, spaces and digits then return 6.\nIf the string contains only consonants,\
    \ digits, vowels, other characters, spaces, digits and vowels then return 7.\n\
    If the string contains only consonants, digits, vowels, other characters, spaces,\
    \ digits, vowels and other characters then return 8.\nIf the string contains only\
    \ consonants, digits, vowels, other characters, spaces, digits, vowels, other\
    \ characters and spaces then return 9.\nIf the string contains only consonants,\
    \ digits, vowels, other characters, spaces, digits, vowels, other characters,\
    \ spaces and digits then return 10.\nIf the string contains only consonants, digits,\
    \ vowels, other characters, spaces, digits, vowels, other characters, spaces,\
    \ digits and vowels then return 11.\nIf the string contains only consonants, digits,\
    \ vowels, other characters, spaces, digits, vowels, other characters, spaces,\
    \ digits, vowels, other characters and spaces then return 12.\nIf the string contains\
    \ only consonants, digits, vowels, other characters, spaces, digits, vowels, other\
    \ characters, spaces, digits, vowels, other characters, spaces and digits then\
    \ return 13.\nIf the string contains only con", "  \n  # TODO: Write your code\
    \ here\n  \nend", "  words = []\n  i = 0\n  while i < s.length\n    if s.chars.include?(s[i])\
    \ && s[i..i+n].chars.include?(s[i..i+n].chars.last)\n      words << s[i..i+n]\n\
    \      i += n\n    else\n      i += 1\n    end\n  end\n  words\nend", "    \n\
    \    words = []\n    \n    if s == \"\"\n        \n        return words\n    \n\
    \    i = 0\n    \n    while i < s.length\n        \n        if s[i] == \"a\"\n\
    \            \n            words.append(s.slice(i))\n            \n          \
    \  i += n\n            \n        elif s[i] == \"e\"\n            \n          \
    \  words.append(s.slice(i))\n            \n            i += n\n            \n\
    \        elif s[i] == \"i\"\n            \n            words.append(s.slice(i))\n\
    \            \n            i += n\n            \n        elif s[i] == \"o\"\n\
    \            \n            words.append(s.slice(i))\n            \n          \
    \  i += n\n            \n        elif s[i] == \"u\"\n            \n          \
    \  words.append(s.slice(i))\n            \n            i += n\n            \n\
    \        elif s[i] == \"y\"\n            \n            words.append(s.slice(i))\n\
    \            \n            i += n\n            \n        elif s[i] == \"y\"\n\
    \            \n            words.append(s.slice(i))\n            \n          \
    \  i += n\n            \n        elif s[i] == \"s\"\n            \n          \
    \  words.append(s.slice(i))\n            \n            i += n\n            \n\
    \        elif s[i] == \"h\"\n            \n            words.append(s.slice(i))\n\
    \            \n            i += n\n            \n        elif s[i] == \"l\"\n\
    \            \n            words.append(s.slice(i))\n            \n          \
    \  i += n\n            \n        elif s[i] == \"d\"\n            \n          \
    \  words.append(s.slice(i))\n            \n            i += n\n            \n\
    \        elif s[i] == \"e\"\n            \n            words.append(s.slice(i))\n\
    \            \n            i += n\n            \n        elif s[i] == \"s\"\n\
    \            \n            words.append(s.slice(i))\n            \n          \
    \  i += n\n            \n        elif s[i] == \"p\"\n            \n          \
    \  words.append(s.slice(i))\n            \n            i += n\n            \n\
    \        elif s[i] == \"p\"\n            \n            words.append(s.slice(i))\n\
    \            \n            i += n\n            \n        elif s[i] == \"a\"\n\
    \            \n            words.append(s.slice(i))\n            \n          \
    \  i += n\n            \n        elif s[i] == \"e\"\n            \n          \
    \  words.append(s.slice(i))\n            \n            i += n\n            \n\
    \        elif s[i] == \"i\"\n            \n            words.append(s.slice(i))\n\
    \            \n            i += n\n            \n        elif s[i] == \"o\"\n\
    \            \n            words.append(s.slice(i))\n            \n          \
    \  i += n\n            \n        elif s[i] == \"u\"\n            \n          \
    \  words.append(s.slice(i))\n            \n            i += n\n            \n\
    \        elif s[i] == \"y\"\n            \n            words.append(s.slice",
  "  words = []\n  i = 0\n  while i < s.length\n    if s[i] =~ /[aeiou]/\n      words.push(s[i..i+n])\n\
    \      i += n\n    end\n  end\n  words\nend", "  words = []\n  i = 0\n  while\
    \ i < s.length\n    if s[i] =~ /[aeiou]/\n      words.push(s[i..i+n])\n      i\
    \ += n\n    end\n  end\n  words\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\
    \").each do |letter|\n      if letter.match(/[aeiou]/)\n        result.push(word)\n\
    \      end\n    end\n  end\n  result\nend", "  s.split(\" \").select { |word|\
    \ word.count(n) == n }\nend", "  result = []\n  s.split(\" \").each do |word|\n\
    \    word.split(\"\").each do |char|\n      if char.match(/[aeiou]/)\n       \
    \ result << word if word.split(\"\").length == n\n      end\n    end\n  end\n\
    \  result\nend", "  result = []\n  s = s.downcase\n  s.scan(/[aeiouy]+/) do |word|\n\
    \    word.scan(/[aeiouy]+/) do |letter|\n      result << word if word.size >=\
    \ n && letter == word.first\n    end\n  end\n  result\nend", "  s.split(\" \"\
    ).map do |word|\n    word.split(\"\").select { |c| c == \"a\" || c == \"e\" ||\
    \ c == \"i\" || c == \"o\" || c == \"u\" }\n  end\nend", "  result = []\n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if letter.downcase\
    \ == letter.upcase\n        result << word\n      end\n    end\n  end\n  result\n\
    end", "  \n  # TODO: Write your code here\n  \nend", "  result = []\n  i = 0\n\
    \  while i < s.length\n    if s[i] == \" \"\n      i += 1\n      while i < s.length\
    \ and s[i] == \" \"\n        i += 1\n      i += 1\n      break\n    i += 1\n \
    \ end\n  i = 0\n  while i < s.length\n    if s[i] == \" \"\n      i += 1\n   \
    \   while i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n     \
    \ break\n    i += 1\n  end\n  i = 0\n  while i < s.length\n    if s[i] == \" \"\
    \n      i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n \
    \     i += 1\n      break\n    i += 1\n  end\n  i = 0\n  while i < s.length\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\
    \n        i += 1\n      i += 1\n      break\n    i += 1\n  end\n  i = 0\n  while\
    \ i < s.length\n    if s[i] == \" \"\n      i += 1\n      while i < s.length and\
    \ s[i] == \" \"\n        i += 1\n      i += 1\n      break\n    i += 1\n  end\n\
    \  i = 0\n  while i < s.length\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n      break\n\
    \    i += 1\n  end\n  i = 0\n  while i < s.length\n    if s[i] == \" \"\n    \
    \  i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n      i\
    \ += 1\n      break\n    i += 1\n  end\n  i = 0\n  while i < s.length\n    if\
    \ s[i] == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\n  \
    \      i += 1\n      i += 1\n      break\n    i += 1\n  end\n  i = 0\n  while\
    \ i < s.length\n    if s[i] == \" \"\n      i += 1\n      while i < s.length and\
    \ s[i] == \" \"\n        i += 1\n      i += 1\n      break\n    i += 1\n  end\n\
    \  i = 0\n  while i < s.length\n    if s[i] == \" \"\n      i += 1\n      while\
    \ i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n      break\n\
    \    i += 1\n  end\n  i = 0\n  while i < s.length\n    if s[i] == \" \"\n    \
    \  i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n      i\
    \ += 1\n      break\n    i += 1\n  end\n  i = 0\n  while i < s.length\n    if\
    \ s[i] == \" \"\n      i += 1\n      while i < s.length and s[i] == \" \"\n  \
    \      i += 1\n      i += 1\n      break\n    i += 1\n  end\n  i = 0\n  while\
    \ i < s.length\n    if s[i] == \" \"\n      i += 1\n      while i < s.length and\
    \ s[i] == \" \"\n        i += 1\n      i += 1\n      break\n    i += 1\n  end\n\
    \  ", "  \n  # TODO: Write your code here.\n  \n  return []\nend\n</cell>\n<text>\n\
    Test your Code\nRun the cell below to test your code.", "  \n  # TODO: Write your\
    \ code here\n  \nend", "  result = []\n  \n  if s.length == 0\n    return result\n\
    \  \n  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  vowels = \"aeiou\"\n  \n  s.split(\"\
    \ \").each do |word|\n    word.split(\"\").each do |letter|\n      if consonants.include?(letter)\n\
    \        if result.length >= n\n          break\n        else\n          result\
    \ << word\n        end\n      end\n    end\n  end\n  \n  result\nend", "  s.split(\"\
    \ \").each do |word|\n    if word.chars.uniq.count == n\n      yield word\n  \
    \  end\n  end\nend", "  \n  words = []\n  \n  while s.length > 0\n    \n    word\
    \ = s.slice!(0, n)\n    \n    if word != \"\"\n      words.push(word)\n    end\n\
    \    \n    s = s.slice!(n..-1)\n  end\n  \n  words\nend", "  words = []\n  i =\
    \ 0\n  while i < s.length\n    if s[i] == \" \"\n      i += 1\n      while i <\
    \ s.length\n        if s[i] == \" \"\n          i += 1\n          while i < s.length\n\
    \            if s[i] == \" \"\n              i += 1\n              while i < s.length\n\
    \                if s[i] == \" \"\n                  i += 1\n                \
    \  while i < s.length\n                    if s[i] == \" \"\n                \
    \      i += 1\n                      while i < s.length\n                    \
    \    if s[i] == \" \"\n                          i += 1\n                    \
    \      while i < s.length\n                            if s[i] == \" \"\n    \
    \                          i += 1\n                              while i < s.length\n\
    \                                if s[i] == \" \"\n                          \
    \        i += 1\n                                  while i < s.length\n      \
    \                              if s[i] == \" \"\n                            \
    \          i += 1\n                                      while i < s.length\n\
    \                                        if s[i] == \" \"\n                  \
    \                        i += 1\n                                          while\
    \ i < s.length\n                                            if s[i] == \" \"\n\
    \                                              i += 1\n                      \
    \                        while i < s.length\n                                \
    \                if s[i] == \" \"\n                                          \
    \        i += 1\n                                                  while i < s.length\n\
    \                                                    if s[i] == \" \"\n      \
    \                                                i += 1\n                    \
    \                                  while i < s.length\n                      \
    \                                  if s[i] == \" \"\n                        \
    \                                  i += 1\n                                  \
    \                        while i < s.length\n                                \
    \                            if s[i] == \" \"\n                              \
    \                                i += 1\n                                    \
    \                          while i < s.length\n                              \
    \                                  if s[i] == \" \"\n                        \
    \                                          i += 1\n                          \
    \                                        while i < s.length\n                \
    \                                                    if s[i] == \" \"\n      \
    \                                                                i += 1\n    \
    \                                                                  while i < s.length\n\
    \                                                                        if s[i]\
    \ == \" \"\n                                                                 \
    \         i += 1\n                                                           \
    \               while i < s.length\n                                         \
    \                                   if s[i] == \" \"\n                       \
    \                                                       i += 1\n             \
    \                                                                 while i < s.length\n\
    \                                                                            \
    \    if s[i] == \" \"\n                                                      \
    \                            i += 1\n                                        \
    \                                          while i < s.length\n              \
    \                                                                      if s[i]\
    \ == \" \"\n                                                                 \
    \                     i += 1\n                                               \
    \                                       while i < s.length\n                 \
    \                                                                       if s[i]\
    \ == \" \"\n                                                                 \
    \                         i += 1\n                                           \
    \                                               while i < s.length\n         \
    \                                                                            \
    \       if s[i] == \" \"\n                                                   \
    \                                           i += 1\n                         \
    \                                                                     while i\
    \ < s.length\n                                                               \
    \                                 if s[i] == \" \"\n                         \
    \                                                                         i +=\
    \ 1\n                                                                        \
    \                          while i < s.length\n                              \
    \                                                                      if s[i]\
    \ == \" \"\n                                                                 \
    \                                     i += 1\n                               \
    \                                                                       while\
    \ i < s.length\n                                                             \
    \                                           if s[i] == \" \"\n               \
    \                                                                            \
    \               i += 1\n                                                     \
    \                                                     while i < s.length\n   \
    \                                                                            \
    \                             if s[i] == \" \"\n                             \
    \                                                                            \
    \     i += 1\n                                                               \
    \                                               while i < s.length\n         \
    \                                                                            \
    \                           if s[i] == \" \"\n                               \
    \                                                                            \
    \       i += 1\n                                                             \
    \                                                     while i < s.length\n   \
    \                                                                            \
    \                                     if s[i] == \" \"\n                     \
    \                                                                            \
    \                     i += 1\n                                               \
    \                                                                       while\
    \ i < s.length\n                                                             \
    \                                                           if s[i] == \" \"\n\
    \                                                                            \
    \                                              i += 1\n                      \
    \                                                                            \
    \                        while i < s.length\n                                \
    \                                                                            \
    \                if s[i] == \" \"\n                                          \
    \                                                                            \
    \        i += 1\n                                                            \
    \                                                                  while i < s.length\n\
    \                                                                            \
    \                                                    if s[i] == \" \"\n      \
    \                                                                            \
    \                                                i += 1\n                    \
    \                                                                            \
    \                                  while i < s.length\n                      \
    \                                                                            \
    \                                  if s[i] == \" \"\n                        \
    \                                                                            \
    \                                  i += 1\n                                  \
    \                                                                            \
    \                        while i < ", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\
    \").each do |char|\n      if char.match(/[aeiou]/)\n        result << word\n \
    \       break\n      end\n    end\n  end\n  result\nend", "  \n  # TODO: Write\
    \ your code here\n  \n  return []\nend", "  \n  # Your code here\n  \nend", " \
    \ s.split(\" \").select { |word| word.count(n) == n }\nend", "  result = []\n\
    \  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n    \
    \  result << word if letter == n\n    end\n  end\n  result\nend", "  s.split(\"\
    \ \").select { |word| word.count(n) == n }\nend", "  \n  words = []\n  \n  if\
    \ s.empty?\n    words\n  else\n    \n    i = 0\n    \n    while i < s.length\n\
    \      \n      if s[i] =~ /[aeiou]/\n        \n        if s[i-1] =~ /[aeiou]/\n\
    \          \n          words.push(s[i..i+n])\n          \n          i += n\n \
    \         \n        else\n          \n          words.push(s[i..i+n])\n      \
    \    \n          i += n\n          \n        end\n        \n      else\n     \
    \   \n        words.push(s[i..i+n])\n        \n        i += n\n        \n    \
    \  end\n      \n    end\n    \n  end\n  \nend\n</cell>\n<cell>", "  result = []\n\
    \  \n  s = s.downcase\n  \n  while s.length > 0\n    \n    word = s[0,n]\n   \
    \ \n    if word != \"\"\n      result.push(word)\n    \n    s = s[(n+1):s.length]\n\
    \  end\n  \n  result\nend", "  result = []\n  s.split(\" \").each do |word|\n\
    \    if word.chars.count { |c| c.downcase >= \"a\".downcase && c.downcase <= \"\
    z\".downcase }.to_i == n\n      result << word\n    end\n  end\n  result\nend",
  "  result = []\n  s.split(\" \").each do |word|\n    if word.include?(\"aeiou\"\
    )\n      result << word\n    end\n  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
