name: HumanEval_21_rescale_to_unit
language: r
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5,\
  \ 0.75, 1.0]\nrescale_to_unit <- function(numbers) {"
tests: "test_humaneval <- function() {\ncandidate <- rescale_to_unit\n    if(!identical(candidate(c(2.0,\
  \ 49.9)), c(0.0, 1.0))){quit('no', 1)}\n    if(!identical(candidate(c(100.0, 49.9)),\
  \ c(1.0, 0.0))){quit('no', 1)}\n    if(!identical(candidate(c(1.0, 2.0, 3.0, 4.0,\
  \ 5.0)), c(0.0, 0.25, 0.5, 0.75, 1.0))){quit('no', 1)}\n    if(!identical(candidate(c(2.0,\
  \ 1.0, 5.0, 3.0, 4.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))){quit('no', 1)}\n    if(!identical(candidate(c(12.0,\
  \ 11.0, 15.0, 13.0, 14.0)), c(0.25, 0.0, 1.0, 0.5, 0.75))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  smallest <- min(numbers)\n  largest <- max(numbers)\n  (numbers\
    \ - smallest) / (largest - smallest)\n}\n", "\n  max <- max(numbers)\n  min <-\
    \ min(numbers)\n  delta <- max - min\n  rescaled <- (numbers - min) / delta\n\
    \  return(rescaled)\n}\n", "\n  return((numbers - min(numbers)) / (max(numbers)\
    \ - min(numbers)))\n}\n", "\n    (numbers - min(numbers)) / (max(numbers) - min(numbers))\n\
    }\n", "\n    max <- max(numbers)\n    min <- min(numbers)\n    (numbers - min)\
    \ / (max - min)\n}\n", "\n  c(min(numbers), max(numbers)) %>%\n    range %>%\n\
    \    linear_rescale_fn() %>%\n    purrr::map(numbers)\n}\n", "\n  max_num <- max(numbers)\n\
    \  min_num <- min(numbers)\n  r <- (numbers - min_num) / (max_num - min_num)\n\
    \  return(r)\n}", "\n    # find the largest and smallest number in the list\n\
    \    min = min(numbers)\n    max = max(numbers)\n    # compute the difference\
    \ (range)\n    difference = max - min\n    # compute the scale factor\n    factor\
    \ = 1 / difference\n    # create a vector of the same length of 'numbers'\n  \
    \  # this will be the rescaled values\n    rescaled = rep(0, length(numbers))\n\
    \    # rescale each number in the list\n    # use the vectorized form of operations\n\
    \    # (also called 'vectorization')\n    # this means that you apply the same\
    \ operation to\n    # every element of the list\n    rescaled = (numbers - min)\
    \ * factor\n    # return the rescaled numbers\n    return(rescaled)\n}\n", "\n\
    \    m <- min(numbers)\n    M <- max(numbers)\n    numbers <- (numbers - m) /\
    \ (M - m)\n    return(numbers)\n}\n ", "\n    return (numbers - min(numbers))\
    \ / (max(numbers) - min(numbers))\n}\n", "\n  # TODO: replace by a correct solution\n\
    \  return(numbers)\n}\n", "\n  min <- min(numbers)\n  max <- max(numbers)\n  rescaled\
    \ <- (numbers - min) / (max - min)\n  return(rescaled)\n}\n", "\n    (numbers\
    \ - min(numbers)) / (max(numbers) - min(numbers))\n}", "\n    (numbers - min(numbers))\
    \ / (max(numbers) - min(numbers))\n}\n ", "\n    # extract max, min\n    # apply\
    \ formula ((number - min) / (max - min))\n    # map over numbers\n    # return\
    \ list of rescaled numbers\n    max_number <- max(numbers)\n    min_number <-\
    \ min(numbers)\n    list(\n        map(\n            .x = numbers,\n         \
    \   .f = function(x) {\n                return((x - min_number) / (max_number\
    \ - min_number))\n            }\n        )\n    )\n}\n", "\n  difference <- max(numbers)\
    \ - min(numbers)\n  scaled <- numbers - min(numbers)\n  return(scaled / difference)\n\
    }", "\n  input_range <- max(numbers) - min(numbers)\n  output_range <- 1 - 0\n\
    \  scale_factor <- output_range / input_range\n  return (numbers - min(numbers))\
    \ * scale_factor\n}\n", "\n  # TODO\n}\n", "\n    sorted_numbers <- sort(numbers)\n\
    \    lowest <- sorted_numbers[1]\n    highest <- sorted_numbers[length(sorted_numbers)]\n\
    \    (sorted_numbers - lowest) / (highest - lowest)\n}\n\nrescale_to_unit(c(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\n", "\n  return(lapply(numbers, function(x) (x - min(numbers))\
    \ / (max(numbers) - min(numbers))))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
