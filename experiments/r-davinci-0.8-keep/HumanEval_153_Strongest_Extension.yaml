name: HumanEval_153_Strongest_Extension
language: r
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
  Strongest_Extension <- function(class_name, extensions) {"
tests: "test_humaneval <- function() {\ncandidate <- Strongest_Extension\n    if(!identical(candidate('Watashi',\
  \ c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')){quit('no', 1)}\n    if(!identical(candidate('Boku123',\
  \ c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')){quit('no',\
  \ 1)}\n    if(!identical(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00',\
  \ 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')){quit('no', 1)}\n    if(!identical(candidate('K',\
  \ c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')){quit('no', 1)}\n    if(!identical(candidate('__HAHA',\
  \ c('Tab', '123', '781345', '-_-')), '__HAHA.123')){quit('no', 1)}\n    if(!identical(candidate('YameRore',\
  \ c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')){quit('no',\
  \ 1)}\n    if(!identical(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')),\
  \ 'finNNalLLly.WoW')){quit('no', 1)}\n    if(!identical(candidate('_', c('Bb', '91245')),\
  \ '_.Bb')){quit('no', 1)}\n    if(!identical(candidate('Sp', c('671235', 'Bb')),\
  \ 'Sp.671235')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  str_values <- c()\n  for (i in 1:length(extensions)) {\n    str_values[i]\
    \ <- sum(grepl(\"[A-Z]\", extensions[i])) - sum(grepl(\"[a-z]\", extensions[i]))\n\
    \  }\n  return(paste(class_name, extensions[which.max(str_values)], sep=\".\"\
    ))\n}\n", "\n    extensions <- gsub(\"[a-z]\", \"\", extensions)\n    which.max(extensions)\n\
    }", "\n   \n   # return function(class_name, extensions) {\n   #  return paste(class_name,\
    \ extensions[with(rle(extensions), which.max(values))])\n   # }\n   \n   \n  \
    \ strength_ext <- function(x) {\n      CAP <- sum(is.upper(x))\n      SM <- sum(is.lower(x))\n\
    \      return(CAP - SM)\n   }\n   \n   strengths <- sapply(extensions, strength_ext)\n\
    \   strongest <- extensions[which.max(strengths)]\n   return(paste(class_name,\
    \ strongest, sep = \".\"))\n}\n", "\n\tsapply(extensions, function(x) sum(is.na(match(x,\
    \ LETTERS))) - sum(is.na(match(x, LETTERS)))\n}\n ", "\n\n}\n", "\n  \n  # create\
    \ a vector of strength values\n  strength <- vector(mode = \"numeric\", length\
    \ = length(extensions))\n  \n  # calculate strength\n  for (i in 1:length(extensions))\
    \ {\n    strength[i] <- sum(extensions[i] %in% LETTERS) - \n      sum(extensions[i]\
    \ %in% letters)\n  }\n  \n  # find index of maximum value in strength vector\n\
    \  max_strength <- which.max(strength)\n  \n  # class name and extension, concatenated\n\
    \  paste(class_name, extensions[max_strength], sep = \".\")\n}\n\nStrongest_Extension(\"\
    Slices\", c(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n", "\n  ###########################################################################\n\
    \  # Start your code here.\n  ###########################################################################\n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n", "\n    extensions <- gsub(\"[^[:upper:]]\",\
    \ \"\", extensions)\n    class_name <- paste(class_name, extensions, sep = \"\
    .\")\n    class_name[which.max(nchar(gsub(\"[^[:upper:]]\", \"\", class_name))\
    \ - nchar(gsub(\"[^[:lower:]]\", \"\", class_name)))]\n}", "\n    # Your code\
    \ here\n}\n", "\n  \n  # set the class name as a list that contains the class\
    \ name\n  class_name <- list(class_name)\n  \n  # set a list of extensions with\
    \ their strengths \n  extensions_and_strengths <- list()\n  \n  # loop through\
    \ the extensions\n  for (extension in extensions) {\n    \n    # count the number\
    \ of upper case letters and lower case letters\n    upper_case_letters <- length(grep(\"\
    [[:upper:]]\", extension))\n    lower_case_letters <- length(grep(\"[[:lower:]]\"\
    , extension))\n    \n    # calculate the strength\n    strength <- upper_case_letters\
    \ - lower_case_letters\n    \n    # add the extension and the strength to the\
    \ list of extensions and strengths\n    extensions_and_strengths[[extension]]\
    \ <- strength\n    \n  }\n  \n  # sort the extensions based on the strengths\n\
    \  extensions_and_strengths <- do.call(\"list\", lapply(extensions_and_strengths,\
    \ rev))\n  \n  # create the new class name\n  new_class_name <- paste(class_name,\
    \ names(extensions_and_strengths)[1], sep = \".\")\n  \n  # return the new class\
    \ name\n  return(new_class_name)\n  \n}", "\n  class_strength <- function(class){\n\
    \    class_name <- strsplit(class, \"\")[[1]]\n    upper_count <- length(grep('[[:upper:]]',\
    \ class_name))\n    lower_count <- length(grep('[[:lower:]]', class_name))\n \
    \   return(upper_count - lower_count)\n  }\n  class_name <- paste(class_name,\
    \ \".Strongest_Extension\", sep = \"\")\n  strongest_extension <- max(sapply(extensions,\
    \ class_strength))\n  strongest_extension <- extensions[class_strength(extensions)\
    \ == strongest_extension]\n  if(length(strongest_extension) > 1){\n    strongest_extension\
    \ <- strongest_extension[1]\n  }\n  return(paste(class_name, strongest_extension,\
    \ sep = \"\"))\n}\n", "\n  \n  # count uppercase letters\n  CAP <- sapply(extensions,\
    \ function(x) {sum(grepl(\"[[:upper:]]\", x))})\n  \n  # count lowercase letters\n\
    \  SM <- sapply(extensions, function(x) {sum(grepl(\"[[:lower:]]\", x))})\n  \n\
    \  # calculate strongest extension\n  strength <- CAP - SM\n  \n  # find the strongest\
    \ extension\n  strongest <- which.max(strength)\n  \n  # return result\n  return(paste(class_name,\
    \ extensions[strongest], sep = \".\"))\n  \n}\n", "\n  # take the class name\n\
    \  class_name <- as.character(class_name)\n  # take the extensions\n  extensions\
    \ <- as.character(extensions)\n  # create the strength variable\n  strength <-\
    \ numeric(length(extensions))\n  # loop over the extensions\n  for (i in 1:length(extensions))\
    \ {\n    # take the extension\n    extension <- extensions[i]\n    # count the\
    \ number of uppercase letters\n    uppercase <- str_count(extension, '[[:upper:]]')\n\
    \    # count the number of lowercase letters\n    lowercase <- str_count(extension,\
    \ '[[:lower:]]')\n    # compute the strength\n    strength[i] <- uppercase - lowercase\n\
    \  }\n  # find the strongest extension\n  strongest <- extensions[which.max(strength)]\n\
    \  # return the string\n  paste(class_name, strongest, sep = '.')\n}", "\n  strengths\
    \ <- sapply(extensions, \n                      function(ext) {\n            \
    \            CAP = sum(grepl(\"[A-Z]\", ext))\n                        SM = sum(grepl(\"\
    [a-z]\", ext))\n                        CAP - SM\n                      })\n \
    \ names(strengths) <- extensions\n  order(strengths, decreasing = TRUE)\n  return(paste(class_name,\
    \ names(strengths)[1], sep = \".\"))\n}\nStrongest_Extension(\"my_class\", c(\"\
    AA\", \"Be\", \"CC\"))\n", "\n    ext_count <- rep(0, length(extensions))\n  \
    \  for (ext_ind in 1:length(extensions)) {\n        ext_count[ext_ind] <- sum(stri_count_regex(extensions[ext_ind],\
    \ \"[A-Z]\") - \n                                  stri_count_regex(extensions[ext_ind],\
    \ \"[a-z]\"))\n    }\n    max_ind <- which.max(ext_count)\n    paste(class_name,\
    \ \".\", extensions[max_ind], sep = \"\")\n}", "\n  return(paste(class_name, names(sort(as.list(sapply(extensions,\
    \ function(ext) {\n    CAP <- sum(grepl(\"[A-Z]\", ext))\n    SM <- sum(grepl(\"\
    [a-z]\", ext))\n    CAP - SM\n  })), decreasing = TRUE, index.return = TRUE))[1],\
    \ sep = \".\"))\n}", "\n  \n  strengths <- lapply(extensions, function(extension)\
    \ {\n    sum(str_count(extension, \"[A-Z]\")) - sum(str_count(extension, \"[a-z]\"\
    ))\n  })\n  \n  # find the strongest extension:\n  strongest_extension <- extensions[which.max(strengths)]\n\
    \  \n  paste(class_name, strongest_extension, sep = \".\")\n}\n\n", "\n  # Your\
    \ code here\n}\n", "\n    class_name <- paste(class_name, '.',\n             \
    \           sapply(extensions, function(ext) {\n                            strength\
    \ <- sum(grepl(\"[A-Z]\", ext)) -\n                                sum(grepl(\"\
    [a-z]\", ext))\n                            list(ext = ext, strength = strength)\n\
    \                        }),\n                        sep = '')\n    strongest\
    \ <- which.max(sapply(class_name, function(x) {\n        x[2]\n    }))\n    class_name\
    \ <- as.vector(class_name)\n    return(class_name[strongest])\n}\n", "\n  # Write\
    \ your code here\n  # Use the function nchar() to find the numbers of characters\n\
    \  # and toupper() to convert to upper case\n}"]
stop_tokens:
- "\n#"
- "\n```"
