name: HumanEval_13_greatest_common_divisor
language: r
prompt: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
  \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ngreatest_common_divisor <-\
  \ function(a, b) {"
tests: "test_humaneval <- function() {\ncandidate <- greatest_common_divisor\n   \
  \ if(!identical(candidate(3, 7), 1)){quit('no', 1)}\n    if(!identical(candidate(10,\
  \ 15), 5)){quit('no', 1)}\n    if(!identical(candidate(49, 14), 7)){quit('no', 1)}\n\
  \    if(!identical(candidate(144, 60), 12)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # Fill in code here.\n  m<-min(a,b)\n  gcd<-1\n  for(i in 2:m){\n\
    \    if((a%%i==0) & (b%%i==0)){\n      gcd<-i\n    }\n  }\n  return(gcd)\n}\n",
  "\n    # Your code here!\n}\n ", "\n  # YOUR CODE HERE\n  # hint: use gcd you implemented\
    \ in the previous problem.\n}\n", "\n    gcd <- 0\n    if (a > b) {\n        for\
    \ (i in b:1) {\n            if (a %% i == 0 & b %% i == 0) {\n               \
    \ gcd <- i\n                break\n            }\n        }\n    } else {\n  \
    \      for (i in a:1) {\n            if (a %% i == 0 & b %% i == 0) {\n      \
    \          gcd <- i\n                break\n            }\n        }\n    }\n\
    \    return(gcd)\n}\n ", "\n  if (a < b)\n    greatest_common_divisor(b, a)\n\
    \  else if (b == 0)\n    a\n  else\n    greatest_common_divisor(b, a %% b)\n}\n",
  "\n  if (a < b) stop(\"a must be greater than b\")\n  if (b == 0) return(a)\n  c\
    \ <- a %% b\n  return(greatest_common_divisor(b, c))\n}\n", "\n  a <- abs(a)\n\
    \  b <- abs(b)\n  while (b != 0) {\n    r <- a %% b\n    a <- b\n    b <- r\n\
    \  }\n  return(a)\n}\n", "\n  while (a != b) {\n    if (a > b) {\n      a <- a\
    \ - b\n    } else {\n      b <- b - a\n    }\n  }\n  return(a)\n}\n ", "\n   \
    \ if(a % b == 0) return(b)\n    greatest_common_divisor(b, a % b)\n}\n \ngreatest_common_divisor(3,\
    \ 5)\ngreatest_common_divisor(25, 15)\n", "\n    if (a < b)\n        return(greatest_common_divisor(b,\
    \ a))\n    while (b != 0) {\n        t <- b\n        b <- a %% b\n        a <-\
    \ t\n    }\n    return(a)\n}\n", "\n    return(a / LCM(a, b) * b)\n}\n", "\n \
    \   if (a < b) {\n        return greatest_common_divisor(b, a)\n    }\n    while\
    \ (b != 0) {\n        r <- a %% b\n        a <- b\n        b <- r\n    }\n   \
    \ return(a)\n}\n ", "\n    # YOUR CODE HERE\n}\n", "\n  if (a == 0)\n    return(b)\n\
    \  else\n    return(greatest_common_divisor(b %% a, a))\n}", "\n    if (a == 0)\n\
    \        return(b)\n    return(greatest_common_divisor(b %% a, a))\n}\n", "\n\
    \    if (a == 0) {\n        return(b)\n    }\n    if (b == 0) {\n        return(a)\n\
    \    }\n    return(greatest_common_divisor(b, a %% b))\n}\n", "\n    gcd <- 1\n\
    \    for (i in 1:max(a, b)) {\n        if (a %% i == 0 & b %% i == 0) {\n    \
    \        gcd <- i\n        }\n    }\n    return(gcd)\n}\n", "\n  gcd <- 0\n  if\
    \ (a < b) {\n    temp <- a\n    a <- b\n    b <- temp\n  }\n  if (a %% b == 0)\
    \ {\n    gcd <- b\n  } else {\n    while (a %% b != 0) {\n      remainder <- a\
    \ %% b\n      a <- b\n      b <- remainder\n    }\n    gcd <- b\n  }\n  return(gcd)\n\
    }\n", "\n  if (a > b) {\n    return(greatest_common_divisor(b, a))\n  }\n  if\
    \ (a == 0) {\n    return(b)\n  }\n  if (b % a == 0) {\n    return(a)\n  }\n  return(greatest_common_divisor(b\
    \ % a, a))\n}\n", "\n    if (a % b == 0) {\n        return(b)\n    } else {\n\
    \        return(greatest_common_divisor(b, a % b))\n    }\n}"]
stop_tokens:
- "\n#"
- "\n```"
