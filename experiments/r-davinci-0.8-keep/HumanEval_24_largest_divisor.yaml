name: HumanEval_24_largest_divisor
language: r
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n# >>> largest_divisor(15)\n# 5\nlargest_divisor <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- largest_divisor\n    if(!identical(candidate(3),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(7), 1)){quit('no', 1)}\n    if(!identical(candidate(10),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(100), 50)){quit('no', 1)}\n  \
  \  if(!identical(candidate(49), 7)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  for (i in seq(n-1, 2, -1)){\n    if (n %% i == 0) {\n      print(i)\n\
    \      break\n    }\n  }\n}\n\nlargest_divisor(15)\n", "\n    for (i in n-1:2)\
    \ {\n        if (n %% i == 0) {\n            return(i)\n        }\n    }\n}\n",
  "\n  sqrt_n <- floor(sqrt(n))\n  for (i in seq(sqrt_n, 2, -1)) {\n    if (n %% i\
    \ == 0) {\n      return(i)\n    }\n  }\n  return(n)\n}\n", "\n  largest_d <- 1\n\
    \  for (i in 1:n) {\n    if (n %% i == 0) {\n      largest_d <- i\n    }\n  }\n\
    \  return(largest_d)\n}\n\nlargest_divisor(15)\n", "\n  x <- 2\n  while (n %%\
    \ x != 0) {\n    x <- x + 1\n  }\n  return(x)\n}\n", "\n  for (divisor in (1:(n-1)))\
    \ {\n    if ((n %% divisor) == 0) {\n      return(divisor)\n    }\n  }\n}\n",
  "\n    x <- n - 1\n    while (x > 0 && n %% x != 0) {\n        x <- x - 1\n    }\n\
    \    return(x)\n}\n", "\n  l <- n - 1\n  while (l > 0) {\n    if (n %% l == 0)\
    \ {\n      return(l)\n    }\n    l <- l - 1\n  }\n}\nlargest_divisor(15)\n", "\n\
    \    for (i in n:1) {\n        if (n %% i == 0) {\n            return(i)\n   \
    \     }\n    }\n}\nlargest_divisor(15)\n", "\n  stopifnot(is.numeric(n))\n  d\
    \ <- 2\n  while (n %% d != 0) {\n    d <- d + 1\n  }\n  return(d)\n}\nlargest_divisor(15)\n",
  "\n  all_divisors <- function(n) {\n    divisors <- c()\n    for (i in 1:n) {\n\
    \      if (n %% i == 0) {\n        divisors <- c(divisors, i)\n      }\n    }\n\
    \    return(divisors)\n  }\n  return(max(all_divisors(n)))\n}\n\nn = 121\nn %%\
    \ 121:11\n\nlargest_divisor(n)\n", "\n  res <- 2\n  for (i in 2:n) {\n    if (n\
    \ %% i == 0) {\n      res <- i\n    }\n  }\n  return(res)\n}\n", "\n  nmax <-\
    \ ceiling(sqrt(n))\n  last <- nmax\n  l <- nmax:1\n  for (l in l) {\n    if (n\
    \ %% l == 0) {\n      last <- l\n      break\n    }\n  }\n  return(last)\n}\n\n\
    largest_divisor(15)\nlargest_divisor(144)\n", "\n  # YOUR CODE HERE\n  f<-as.vector(1:n)\n\
    \  m <- n\n  for (i in f){\n    if (m %% i == 0){\n      m <- i\n    }\n  }\n\
    \  return(m)\n}\n", "\n    divisors <- divisors_of(n)\n    max(divisors)\n}\n",
  "\n  # your code here\n}\nlargest_divisor(15)", "\n  for (i in seq(from = n - 1,\
    \ to = 1, by = -1)) {\n    if (n %% i == 0) {\n      return(i)\n    }\n  }\n}\n",
  "\n  largest_factor <- function(n, i) {\n    if (i == 1) { return(n) }\n    if (n\
    \ %% i == 0) {\n      return(largest_factor(n / i, i))\n    } else {\n      return(largest_factor(n,\
    \ i - 1))\n    }\n  }\n  largest_factor(n, floor(n / 2))\n}\n", "\n  for (i in\
    \ seq(from = n-1, to = 2, by = -1)) {\n    if (n %% i == 0) return(i)\n  }\n}\n",
  "\n  i <- n-1\n  while (i >= 1) {\n    if (n %% i == 0) {\n      return(i)\n   \
    \ }\n    i <- i - 1\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
