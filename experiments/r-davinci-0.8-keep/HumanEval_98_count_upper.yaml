name: HumanEval_98_count_upper
language: r
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
  \ 0\n# count_upper('dBBE') returns 0\ncount_upper <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- count_upper\n    if(!identical(candidate('aBCdEf'),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate('abcdefg'), 0)){quit('no', 1)}\n\
  \    if(!identical(candidate('dBBE'), 0)){quit('no', 1)}\n    if(!identical(candidate('B'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('U'), 1)){quit('no', 1)}\n   \
  \ if(!identical(candidate(''), 0)){quit('no', 1)}\n    if(!identical(candidate('EEEE'),\
  \ 2)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  vowels = c('A', 'E', 'I', 'O', 'U')\n  count = 0\n  for (i in 2:length(s))\
    \ {\n    if (s[i] %in% vowels) {\n      count = count + 1\n    }\n  }\n  return(count)\n\
    }\n\ncount_upper('aBCdEf')\ncount_upper('abcdefg')\ncount_upper('dBBE')\n", "\n\
    \    sum(str_count(s, '[AEIOU]')[seq(2, length(s), 2)])\n}\n", "\n  \n}\n", "\n\
    \    # YOUR CODE HERE\n    count = 0\n    s = toupper(s)\n    for (i in seq(1,length(s),2)){\n\
    \      if (s[i] %in% c(\"A\",\"E\",\"I\",\"O\",\"U\")){\n        count = count\
    \ + 1\n      }\n    }\n    return(count)\n}\ncount_upper(\"dfdfdf\")\n", "\n \
    \ upper_vowels <- 0\n  # TODO\n  upper_vowels\n}\n\nassert_that(count_upper('aBCdEf'),\
    \ is_equal_to(1))\nassert_that(count_upper('abcdefg'), is_equal_to(0))\nassert_that(count_upper('dBBE'),\
    \ is_equal_to(0))\n ", "\n  # your code here\n  upCount <- 0\n  for (i in seq(1,\
    \ length(s), 2)) {\n    if (str_detect(s[i], \"^[AEIOU]$\")) {\n      upCount\
    \ <- upCount + 1\n    }\n  }\n  return(upCount)\n}\n \n", "\n  # Initialize vowel\
    \ string\n  vowels <- \"AEIOU\"\n  # Create an empty vector to count the number\
    \ of upper vowels in even indices\n  upper_vowels <- 0\n  # Iterate through the\
    \ string\n  for (i in 1:nchar(s)) {\n    # Check if the index is even\n    if\
    \ (i %% 2 == 0) {\n      # If the index is even and the character is an upper\
    \ vowel, then add to count\n      if (substr(s, i, i) %in% vowels) {\n       \
    \ upper_vowels <- upper_vowels + 1\n      }\n    }\n  }\n  return(upper_vowels)\n\
    }\n", "\n\tupper <- 0\n\tfor (i in seq(s)) {\n\t\tif (i %% 2 == 0 && is.element(s[i],\
    \ letters) && !is.element(s[i], letters[26:51])) {\n\t\t\tupper <- upper + 1\n\
    \t\t}\n\t}\n\treturn(upper)\n}\n", "\n  # YOUR CODE HERE\n}\ncat(count_upper('aBCdEf'),\
    \ \"\\n\")\ncat(count_upper('abcdefg'), \"\\n\")\ncat(count_upper('dBBE'), \"\\\
    n\")\ntest_that('Solution is correct', {\n    expect_equal(count_upper('aBCdEf'),\
    \ 1)\n    expect_equal(count_upper('abcdefg'), 0)\n    expect_equal(count_upper('dBBE'),\
    \ 0)\n})\nprint(\"Success!\")\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "\n\
    \  # write your code here\n}\n", "\n  s <- strsplit(s, \"\")[[1]]\n  return(sum(sapply(s,\
    \ function(x) x %in% c(\"A\", \"E\", \"I\", \"O\", \"U\")\n                  \
    \  & (seq_along(s) %% 2 == 0))))\n}\n", "\n  counter <- 0\n  for (i in seq(1,\
    \ length(s), 2)) {\n    if (str_detect(s[i], '[AEIOU]')) {\n      counter <- counter\
    \ + 1\n    }\n  }\n  return(counter)\n}\ncount_upper('aBCdEf')\ncount_upper('abcdefg')\n\
    count_upper('dBBE')\n", "\n  sum(substr(s,seq(2,nchar(s),2),seq(2,nchar(s),2))\
    \ %in% c(\"A\",\"E\",\"I\",\"O\",\"U\"))\n}\n", "\n  i = 1\n  out = 0\n  for (c\
    \ in strsplit(s, \"\")[[1]]) {\n    if (i %% 2 == 0) {\n      if (c %in% c(\"\
    A\", \"E\", \"I\", \"O\", \"U\")) {\n        out = out + 1\n      }\n    }\n \
    \   i = i + 1\n  }\n  return(out)\n}\ncount_upper(\"aBCdEf\")\ncount_upper(\"\
    abcdefg\")\ncount_upper(\"dBBE\")\n ", "\n  count <- 0\n  for (i in seq(1, length(s),\
    \ 2)) {\n    if (is.element(toupper(s[i]), c('A', 'E', 'I', 'O', 'U'))) {\n  \
    \    count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  return(sum(grepl(\"\
    [AEIOU]\",s[seq(2, length(s), by=2)])))\n}\n", "\n    l <- stringr::str_extract_all(s,\
    \ \"[AEIOU]\")\n    return(sum(stringr::str_detect(l, \"[A-Z]\")))\n}\n", "\n\
    \    ## YOUR CODE HERE\n    v <- c(\"A\", \"E\", \"I\", \"O\", \"U\")\n    x <-\
    \ strsplit(s, \"\")[[1]]\n    w <- which(x %in% v)\n    y <- w %% 2\n    return(sum(y\
    \ == 0))\n}\n", "\n  count = 0\n  for (i in seq(2, length(s), 2)) {\n    if (is.element(substr(s,\
    \ i, i), c(\"A\", \"E\", \"I\", \"O\", \"U\"))) {\n      count = count + 1\n \
    \   }\n  }\n  return(count)\n}\n", "\n  vowel_count <- 0\n  for (i in seq(along\
    \ = s)) {\n    if ((i %% 2 == 0) & (substr(s, i, i) %in% c(\"A\", \"E\", \"I\"\
    , \"O\", \"U\"))) {\n      vowel_count <- vowel_count + 1\n    }\n  }\n  return(vowel_count)\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
