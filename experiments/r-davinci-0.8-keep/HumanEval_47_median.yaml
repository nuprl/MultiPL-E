name: HumanEval_47_median
language: r
prompt: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nmedian <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- median\n    if(!identical(candidate(c(3,\
  \ 1, 2, 4, 5)), 3)){quit('no', 1)}\n    if(!identical(candidate(c(-10, 4, 6, 1000,\
  \ 10, 20)), 8.0)){quit('no', 1)}\n    if(!identical(candidate(c(5)), 5)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(6, 5)), 5.5)){quit('no', 1)}\n    if(!identical(candidate(c(8,\
  \ 1, 3, 9, 9, 2, 7)), 7)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    sorted = sort(l)\n    n = length(l)\n    if (n %% 2 == 1) {\n\
    \        return(sorted[n %% 2 + 1])\n    } else {\n        return((sorted[n %%\
    \ 2] + sorted[n %% 2 + 1]) / 2)\n    }\n}\n    ", "\n  if (length(l) %% 2 == 1)\
    \ {\n    return(sort(l)[length(l) / 2 + 1])\n  } else {\n    idx = length(l) /\
    \ 2\n    return((sort(l)[idx] + sort(l)[idx + 1]) / 2)\n  }\n}\n", "\n  sort(l)[[floor(length(l)/2)]]\n\
    }\n", "\n    m <- length(l)\n    if (m == 0) {\n        return(0)\n    }\n   \
    \ res <- sort(l)\n    if (m %% 2 == 0) {\n        res[m / 2]\n    } else {\n \
    \       res[(m - 1) / 2]\n    }\n}\n", "\n  # Compute median of l.\n  # >>> median([1,\
    \ 2, 3, 4, 5])\n  # 3\n  # >>> median([1, 2, 3, 4, 10])\n  # 2.5\n  # >>> median([3,\
    \ 1, 2, 4, 5])\n  # 3\n  # >>> median([-10, 4, 6, 1000, 10, 20])\n  # 15.0\n \
    \ # >>> median([3, 1, 2, 4, 5, 6])\n  # 3.5\n  # >>> median([3, 1, 2, 4, 5, 6,\
    \ 1])\n  # 3\n  sorted_l <- sort(l)\n  n <- length(sorted_l)\n  # Assume n is\
    \ odd.\n  n_div_2 <- n %/% 2\n  sorted_l[n_div_2 + 1]\n}\n", "\n    sorted <-\
    \ sort(l)\n    length <- length(sorted)\n    if (length%%2 == 0) {\n        return((sorted[(length/2)\
    \ + 1] + sorted[(length/2)])/2)\n    } else {\n        return(sorted[(length +\
    \ 1)/2])\n    }\n}\n\nmedian(sorted)\n", "\n  return(median(l))\n}\n", "\n  s\
    \ <- sort(l)\n  n <- length(s)\n  if (n %% 2 == 0) {\n    (s[n / 2] + s[n / 2\
    \ + 1]) / 2\n  } else {\n    s[(n + 1) / 2]\n  }\n}\nmedian(c(3, 1, 2, 4, 5))\n\
    median(c(-10, 4, 6, 1000, 10, 20))\n", "\n  if(length(l) == 0)\n    return(0)\n\
    \  if(length(l) == 1)\n    return(l[1])\n  if(length(l) %% 2 == 0)\n    return((sort(l)[length(l)/2]\
    \ + sort(l)[length(l)/2 + 1])/2)\n  else\n    return(sort(l)[length(l)/2 + 1])\n\
    }\n", "\n    if (length(l) %% 2 == 1) {\n        return(l[(length(l) + 1) / 2])\n\
    \    } else {\n        return((l[length(l) / 2] + l[length(l) / 2 + 1]) / 2)\n\
    \    }\n}\nmedian(c(3, 1, 2, 4, 5))\nmedian(c(-10, 4, 6, 1000, 10, 20))\n", "\n\
    \  n <- length(l)\n  if (n %% 2 == 1) {\n    return(l[(n + 1) / 2])\n  } else\
    \ {\n    return((l[n / 2] + l[n / 2 + 1]) / 2)\n  }\n}\n", "\n  ## your code here\n\
    \  return(0)\n}\n", "\n    # input: l is a list\n    # output: a number\n    l\
    \ <- sort(l)\n    m <- length(l)\n    if (m %% 2 == 0) {\n        l[m / 2] + l[m\
    \ / 2 + 1] / 2\n    } else {\n        l[(m + 1) / 2]\n    }\n}\n \nmedian(c(3,\
    \ 1, 2, 4, 5))\nmedian(c(-10, 4, 6, 1000, 10, 20))\n", "\n  if (length(l) %% 2\
    \ == 1) {\n    return(quantile(l, 1/2))\n  } else {\n    return((quantile(l, 1/2)\
    \ + quantile(l, 3/2)) / 2)\n  }\n}\n", "\n    sorted <- sort(l)\n    n <- length(sorted)\n\
    \    if (n %% 2 == 1) {\n        return(sorted[n/2])\n    } else {\n        first\
    \ <- sorted[n/2]\n        second <- sorted[n/2+1]\n        return((first+second)/2)\n\
    \    }\n}\n", "\n    m <- length(l)\n    sorted <- sort(l)\n    if (m %% 2 ==\
    \ 1) {\n        return(sorted[(m + 1) / 2])\n    } else {\n        return((sorted[m\
    \ / 2] + sorted[m / 2 + 1]) / 2)\n    }\n}", "\n\tm <- median(l)\n\tif (length(l)\
    \ %% 2 == 0) {\n\t\tm <- (sort(l)[(length(l)/2)] + sort(l)[(length(l)/2) + 1])/2\n\
    \t}\n\treturn(m)\n}\n\n", "\n  sort(l) %>% median\n}\n", "\n    stopifnot(all(l\
    \ >= 0))\n    if (sum(l) < 1)\n        return(0)\n    if (all(l == 0))\n     \
    \   return(0)\n    if (all(l <= 1))\n        return(1)\n    if (length(l) == 2)\n\
    \        return(sum(l)/2)\n    p <- unlist(lapply(1:length(l), function(x) ifelse(x\
    \ <= length(l)/2, 0, 1)))\n    if (length(l) %% 2 == 0)\n        return(sum(l[p\
    \ == 0])/2)\n    return(l[which.max(l[p == 0])])\n}\n", "\n    ord <- order(l)\n\
    \    half.n <- length(l) %/% 2\n    if (half.n < length(l)) {\n        l[ord[half.n\
    \ + 1]]\n    } else {\n        (l[ord[half.n]] + l[ord[half.n + 1]]) / 2\n   \
    \ }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
