name: HumanEval_150_x_or_y
language: r
prompt: "# A simple program which should return the value of x if n is \n# a prime\
  \ number and should return the value of y otherwise.\n# Examples:\n# for x_or_y(7,\
  \ 34, 12) == 34\n# for x_or_y(15, 8, 5) == 5\nx_or_y <- function(n, x, y) {"
tests: "test_humaneval <- function() {\ncandidate <- x_or_y\n    if(!identical(candidate(7,\
  \ 34, 12), 34)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 5), 5)){quit('no',\
  \ 1)}\n    if(!identical(candidate(3, 33, 5212), 33)){quit('no', 1)}\n    if(!identical(candidate(1259,\
  \ 3, 52), 3)){quit('no', 1)}\n    if(!identical(candidate(7919, -1, 12), -1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(3609, 1245, 583), 583)){quit('no', 1)}\n    if(!identical(candidate(91,\
  \ 56, 129), 129)){quit('no', 1)}\n    if(!identical(candidate(6, 34, 1234), 1234)){quit('no',\
  \ 1)}\n    if(!identical(candidate(1, 2, 0), 0)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 2, 0), 2)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(is.prime(n)){\n    return(x)\n  } else {\n    return(y)\n  }\n\
    }", "\n  if (is.prime(n)) {\n    return(x)\n  } else {\n    return(y)\n  }\n}\n\
    \nx_or_y(15, 8, 5)\n \n", "\n  sqrt_n <- sqrt(n)\n  is_prime <- TRUE\n  for (i\
    \ in 2:sqrt_n) {\n    if (n %% i == 0) {\n      is_prime <- FALSE\n      break\n\
    \    }\n  }\n  if (is_prime) {\n    x\n  } else {\n    y\n  }\n}\nx_or_y(7, 34,\
    \ 12)\nx_or_y(15, 8, 5)\n", "\n\tif (is.prime(n)) {\n\t\tx\n\t} else {\n\t\ty\n\
    \t}\n}", "\n  if (is.prime(n)) {\n    return(x)\n  } else {\n    return(y)\n \
    \ }\n}\n", "\n  if (is.na(n) | is.na(x) | is.na(y)) {\n    return(NA)\n  } else\
    \ if (is.numeric(n) & is.numeric(x) & is.numeric(y)) {\n    if (n %in% primes)\
    \ {\n      return(x)\n    } else {\n      return(y)\n    }\n  } else {\n    stop(\"\
    Invalid input, use numbers\")\n  }\n}\n\nx_or_y(7, 34, 12)\nx_or_y(15, 8, 5)\n",
  "\n  if (is.prime(n)) {\n    return(x)\n  } else {\n    return(y)\n  }\n}\n", "\n\
    \   if (is_prime(n)) return(x)\n   return(y)\n}", "\n  for (i in 2:(n-1)) {\n\
    \    if (n %% i == 0) {\n      return(y)\n    }\n  }\n  return(x)\n}", "\n\tx_or_y\
    \ <- if (is.prime(n)) x else y\n\treturn(x_or_y)\n}\n", "\n  if (is.prime(n))\
    \ {\n    return(x)\n  } else {\n    return(y)\n  }\n}\n\nx_or_y(7, 34, 12)\nx_or_y(15,\
    \ 8, 5)\n", "\n    if (is.prime(n)) {\n        return(x)\n    } else {\n     \
    \   return(y)\n    }\n}\n", "\n  if(is.prime(n))\n    return(x)\n  else\n    return(y)\n\
    }\n", "\n  if (is.prime(n)) {\n    return(x)\n  } else {\n    return(y)\n  }\n\
    }\nx_or_y(7, 34, 12) == 34\nx_or_y(15, 8, 5) == 5\n", "\n  if(is.numeric(n) &\
    \ is.numeric(x) & is.numeric(y)){\n    if(n > 1){\n      n_prime <- TRUE\n   \
    \   for(i in seq(2, (n - 1))){\n        if(n %% i == 0){\n          n_prime <-\
    \ FALSE\n        }\n      }\n      if(n_prime){\n        x\n      }else{\n   \
    \     y\n      }\n    }else{\n      stop(\"n must be a number greater than 1!\"\
    )\n    }\n  }else{\n    stop(\"All arguments must be numbers!\")\n  }\n}\n", "\n\
    \  if (is.na(n) | !is.integer(n) | is.na(x) | is.na(y)) {\n    return(NA)\n  }\
    \ else if (n < 1) {\n    return(NA)\n  } else if (is_prime(n)) {\n    return(x)\n\
    \  } else {\n    return(y)\n  }\n}\n", "\n  if(is.prime(n)) {\n    x\n  } else\
    \ {\n    y\n  }\n}\n\nx_or_y(7, 34, 12)\n\nx_or_y(15, 8, 5)\n", "\n  if(n == 2)\
    \ return(x)\n  is_prime <- function(n) {\n    for(i in 2:(n - 1)) {\n      if(n\
    \ %% i == 0) return(FALSE)\n    }\n    return(TRUE)\n  }\n  if(is_prime(n)) return(x)\n\
    \  return(y)\n}\n", "\n    if (is.prime(n)) {\n        x\n    } else {\n     \
    \   y\n    }\n}\n\nx_or_y(7, 34, 12)\nx_or_y(15, 8, 5)\n", "\n  if (is.prime(n))\
    \ {\n    return(x)\n  } else {\n    return(y)\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
