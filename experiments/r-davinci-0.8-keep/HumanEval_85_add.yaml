name: HumanEval_85_add
language: r
prompt: "# Given a non-empty list of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nadd <- function(lst)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- add\n    if(!identical(candidate(c(4,\
  \ 88)), 88)){quit('no', 1)}\n    if(!identical(candidate(c(4, 5, 6, 7, 2, 122)),\
  \ 122)){quit('no', 1)}\n    if(!identical(candidate(c(4, 0, 6, 7)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(4, 4, 6, 8)), 12)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(lst[c(FALSE,TRUE)][lst%%2==0])\n}\n", "\n  sum(Filter(function(x)\
    \ x %% 2 == 0,\n             Filter(function(x) x %% 2 == 1,\n               \
    \     lst)))\n}\n", "\n    sum <- 0\n    for (i in 1:length(lst)) {\n        if\
    \ (lst[i] %% 2 == 0 && i %% 2 != 0) {\n            sum <- sum + lst[i]\n     \
    \   }\n    }\n    sum\n}", "\n  sum(lst[seq(1, length(lst), 2)][lst[seq(1, length(lst),\
    \ 2)] %% 2 == 0])\n}\nadd(c(4, 2, 6, 7))\n", "\n  sum(filter(lst, function(x)\
    \ x %% 2 == 0))\n}\n\nadd(c(4, 2, 6, 7))\nadd(c(1, 3, 5, 7))\nadd(c(100, 1, 3,\
    \ 7))\n", "\n \n  return(sum(lst[c(FALSE, TRUE)][lst %% 2 == 0]))\n \n}\n\nadd(c(4,\
    \ 2, 6, 7))\n", "\n  indices <- seq(1, length(lst), 2)\n  filtered <- lst[indices]\n\
    \  sum(filtered[filtered %% 2 == 0])\n}\n", "\n  # Your code here\n  return(sum(lst[seq(2,\
    \ length(lst), by = 2)][lst[seq(2, length(lst), by = 2)] %% 2 == 0]))\n}\nadd(c(1,\
    \ 2, 3, 4, 5, 6))\n", "\n  sum(lst[seq(2, length(lst), 2)])\n}\n", "\n  # add\
    \ your solution here\n  sum(lst[c(2, 4, 6, 8)])\n}\nadd(c(4, 2, 6, 7))\n", "\n\
    \  return(sum(lst[seq(2, length(lst), by = 2)], na.rm = TRUE))\n}\n", "\n  counter\
    \ <- 0\n  for (i in lst) {\n    if (i %% 2 == 0) {\n      counter <- counter +\
    \ i\n    }\n  }\n  return(counter)\n}\nadd(c(4, 2, 6, 7))\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)][lst[seq(1, length(lst), 2)] %% 2 == 0])\n}\n", "\n    lst <-\
    \ lst[seq(2, length(lst), by = 2)]\n    sum(lst[lst %% 2 == 0])\n}\n\n", "\n \
    \ sum(lst[seq(2, length(lst), 2)])\n}\n", "\n  ans <- 0\n  for (i in seq_along(lst))\
    \ {\n    if (i %% 2 == 1 && lst[[i]] %% 2 == 0) {\n      ans <- ans + lst[[i]]\n\
    \    }\n  }\n  ans\n}\n", "\n  sum(filter(lst, ~. %% 2 == 0 & seq_along(lst) %%\
    \ 2 == 1))\n}\n", "\n  lst <- lst[seq(1, length(lst), 2)]\n  sum(lst[lst %% 2\
    \ == 0])\n}\n", "\n    acc <- 0\n    for (el in lst) {\n        if (el %% 2 ==\
    \ 0) {\n            if (unlist(grep(x = lst, pattern = 2, invert = TRUE))) {\n\
    \                acc <- acc + el\n            }\n        }\n    }\n    acc\n}\n",
  "\n  return(sum(lst[(seq_along(lst)%%2!=0) & (lst%%2==0)]))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
