name: HumanEval_145_order_by_points
language: r
prompt: "# Write a function which sorts the given list of integers\n# in ascending\
  \ order according to the sum of their digits.\n# Note: if there are several items\
  \ with similar sum of their digits,\n# order them based on their index in original\
  \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11,\
  \ 1, -12, 11]\n# >>> order_by_points([]) == []\norder_by_points <- function(nums)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- order_by_points\n    if(!identical(candidate(c(1,\
  \ 11, -1, -11, -12)), c(-1, -11, 1, -12, 11))){quit('no', 1)}\n    if(!identical(candidate(c(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)), c(0, 2, 3, 6, 53,\
  \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457))){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, -11, -32, 43, 54, -98,\
  \ 2, -3)), c(-3, -32, -98, -11, 1, 2, 43, 54))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), c(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0, 6, 6, -76, -21, 23, 4)), c(-76, -21, 0,\
  \ 4, 23, 6, 6))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum_of_digits <- function(n){\n    sum(as.integer(unlist(strsplit(as.character(n),\
    \ \"\"))))\n  }\n  sums <- sapply(nums, sum_of_digits)\n  order(sums, nums)\n\
    }\n", "\n  # your code here\n  order(rowSums(t(as.data.frame(t(nums))), na.rm\
    \ = TRUE), \n        na.last = TRUE, index.return = TRUE)$ix\n}\norder_by_points(nums\
    \ = c(1, 11, -1, -11, -12))\n", "\n  temp <- sapply(as.character(nums), function(x)\
    \ sum(as.numeric(unlist(strsplit(x, \"\")))))\n  order(temp, nums)\n}\norder_by_points(nums)\n",
  "\n  if(length(nums) == 0) return(integer())\n  # adding the positions to the numbers.\n\
    \  indexed_nums <- transform(data.frame(nums), position = seq_along(nums))\n \
    \ # ordering by sum of digits and position\n  indexed_nums[order(rowSums(abs(as.matrix(indexed_nums[,\
    \ 1]))), indexed_nums$position),]$nums\n}\n", "\n  # YOUR CODE HERE\n  for (i\
    \ in seq_along(nums)){\n    nums[i] <- sum(as.numeric(unlist(strsplit(nums[i],\
    \ ''))))\n  }\n  order(nums)\n}\norder_by_points(c(1, 11, -1, -11, -12))\n", "\n\
    \  if(length(nums) == 0) return(nums)\n  nums_sum <- c()\n  for(item in nums)\
    \ nums_sum <- c(nums_sum, sum(as.integer(unlist(strsplit(as.character(item), \"\
    \")))))\n  nums[order(nums_sum, nums)]\n}\n ", "\n  if (length(nums) == 0) {\n\
    \    return(nums)\n  }\n  order_by_points <- function(x) {\n    # Your code goes\
    \ here!\n  }\n  order_by_points(nums)\n}\nprint(order_by_points(c(1, 11, -1, -11,\
    \ -12)))\n", "\n  nums <- rev(sort(nums, index.return = TRUE))\n  nums[, 1]\n\
    }\n", "\n  for (i in 1:length(nums)) {\n    nums[i] <- abs(nums[i])\n    nums[i]\
    \ <- sum(strsplit(as.character(nums[i]), \"\")[[1]])\n  }\n  return(order(nums))\n\
    }\n", "\n  if (length(nums) < 1) return(nums)\n  digits <- sapply(as.character(nums),\
    \ function(num) sum(as.numeric(strsplit(num, \"\")[[1]])))\n  data.frame(index\
    \ = 1:length(nums), nums, digits) %>%\n    arrange(digits, index) %>%\n    dplyr::select(nums)\
    \ %>%\n    unlist()\n}", "\n    nums[order(sapply(nums, function(x) sum(as.integer(unlist(strsplit(as.character(x),\
    \ split=\"\"))))))]\n}\norder_by_points(c(1, 11, -1, -11, -12))\n", "\n  \n  #\
    \ Function to sum digits of a given number\n  sum_digits <- function(x) {\n  \
    \  x <- strsplit(as.character(x), \"\")[[1]]\n    sum(as.numeric(x))\n  }\n  \n\
    \  # Create a df for given argument, with added column 'sum'\n  l_data <- data.frame(num\
    \ = nums, sum = sapply(nums, sum_digits))\n  \n  # Sort the nums by sum column\
    \ (default is decreasing)\n  ordered_nums <- sort(l_data$num, decreasing = FALSE,\
    \ index.return = TRUE)\n  \n  # Return the ordered vector\n  ordered_nums$x\n\
    }\n\n", "\n  sort(nums, index.return = TRUE, decreasing = TRUE)$ix\n}\norder_by_points\
    \ <- function(nums) {\n  indx <- order(sapply(nums, function(x) sum(as.numeric(strsplit(as.character(x),\
    \ split = '')[[1]]))), \n                 sapply(seq_along(nums), function(x)\
    \ -x))\n  nums[indx]\n}\nnums <- c(1, 11, -1, -11, -12)\norder_by_points(nums)\n",
  "\n  sums <- numeric(length(nums))\n  for (i in 1:length(nums)) {\n    # Get the\
    \ magnitude of each number\n    magnitudes <- abs(as.numeric(strsplit(as.character(nums[i]),\
    \ split = \"\")[[1]]))\n    # Sum their magnitude\n    sums[i] <- sum(magnitudes)\n\
    \  }\n  # Order by the sums and use the order to reorder the original vector\n\
    \  nums[order(sums, order(nums))]\n}\norder_by_points(c(1, 11, -1, -11, -12))\n",
  "\n  order(sapply(nums,sum),sapply(nums,function(x) match(x,nums)))\n}\n", "\n \
    \ nums <- sort(nums, decreasing = T)\n  nums <- data.frame(nums)\n  nums$digit\
    \ <- unlist(lapply(nums$nums, function(x) {\n    x <- as.character(x)\n    if\
    \ (x[1] == \"-\") x <- substr(x, 2, nchar(x))\n    if (nchar(x) == 1) return(as.numeric(x))\n\
    \    return(sum(as.numeric(unlist(strsplit(x, \"\")))))\n  }))\n  nums <- nums[order(nums$digit,\
    \ -nums$nums),]\n  return(nums$nums)\n}\n", "\n  if(length(nums)==0) return(nums)\n\
    \  nums <- nums %>%\n    tibble::as_tibble() %>%\n    dplyr::mutate(sum_digits\
    \ = purrr::map_dbl(nums, ~ sum(as.integer(strsplit(as.character(.), NULL)[[1]]))),\n\
    \                  index = seq_along(nums)) %>%\n    dplyr::arrange(sum_digits,\
    \ index) %>%\n    dplyr::pull(nums)\n  return(nums)\n}\n", "\n  nums <- rep(nums,\
    \ each = 2)\n  nums <- c(nums, nums)\n  nums <- as.data.frame(matrix(nums, ncol\
    \ = 2))\n  names(nums) <- c(\"num\", \"idx\")\n  nums$digits <- rowSums(sapply(nums$num,\
    \ as.numeric))\n  nums <- nums[order(nums$digits, nums$idx),]\n  nums$num\n}\n",
  "\n  # YOUR CODE HERE\n  dat <- data.frame(nums)\n  names(dat) <- 'val'\n  dat$sum\
    \ <- rowSums(as.matrix(lapply(strsplit(as.character(dat$val), ''), as.numeric)))\n\
    \  dat$ind <- 1:nrow(dat)\n  dat <- dat[order(dat$sum, dat$ind), ]\n  dat$val\n\
    }\n\n", "\n  order(sapply(nums, function(num) {\n    sum(as.integer(strsplit(as.character(num),\
    \ '')[[1]]))\n  }))\n}\n "]
stop_tokens:
- "\n#"
- "\n```"
