name: HumanEval_7_filter_by_substring
language: r
prompt: "# Filter an input list of strings only for ones that contain given substring\n\
  # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\nfilter_by_substring <- function(strings,\
  \ substring) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_substring\n    if(!identical(candidate(c(),\
  \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
  \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
  \    if(!identical(candidate(c('xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'),\
  \ 'xx'), c('xxx', 'aaaxxy', 'xxxAAA', 'xxx'))){quit('no', 1)}\n    if(!identical(candidate(c('grunt',\
  \ 'trumpet', 'prune', 'gruesome'), 'run'), c('grunt', 'prune'))){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  strings[grep(substring, strings)]\n}\n", "\n    strings <- as.character(strings)\n\
    \    out <- strings[grepl(substring, strings)]\n    return(out)\n}\n", "\n  return(strings[grepl(substring,\
    \ strings)])\n}\n", "\n  strings <- Filter(function(x) {grepl(substring, x)},\
    \ strings)\n  return(strings)\n}\n", "\n  return(Filter(function(x) grepl(substring,\
    \ x), strings))\n}\n", "\n  return(strings[grepl(substring, strings)])\n}\n",
  "\n    return_strings <- c()\n    for (string in strings) {\n        if (grepl(substring,\
    \ string)) {\n            return_strings <- c(return_strings, string)\n      \
    \  }\n    }\n    return (return_strings)\n}\n", "\n    gsub(\"^.*$\", \"(.*)a(.*)\"\
    , strings)\n}", "\n  strings[substring %in% strings]\n}\n", "\n    return(strings[sapply(strings,\
    \ function(x) any(x %in% substring))])\n}\n", "\n    return(strings[grep(substring,\
    \ strings)])\n}\n ", "\n  filtered_strings <- strings[grepl(substring, strings)]\n\
    \  return(filtered_strings)\n}\n", "\n  strings <-\n    strings[stri_detect_fixed(strings,\
    \ substring)]\n  return(strings)\n}\n", "\n    # todo implement me\n}\n ", "\n\
    \  # YOUR CODE HERE\n}\n", "\n    substrs = str_extract_all(strings, fixed(substring))\n\
    \    which(sapply(substrs, length) > 0)\n}\n", "\n    matches <- grepl(substring,\
    \ strings)\n    return(strings[matches])\n}\n    \n", "\n    strings[grepl(substring,\
    \ strings)]\n}\n", "\n\tres <- vector(mode = \"character\", length = 0)\n\tfor\
    \ (string in strings) {\n\t\tif (grepl(substring, string)) {\n\t\t\tres <- c(res,\
    \ string)\n\t\t}\n\t}\n\treturn(res)\n}\n", "\n    ret <- vector(\"character\"\
    , length(strings))\n    idx <- 0\n    for (s in strings) {\n        if (grepl(substring,\
    \ s)) {\n            idx <- idx + 1\n            ret[idx] <- s\n        }\n  \
    \  }\n    ret[1:idx]\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
