name: HumanEval_95_check_dict_case
language: r
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\n# check_dict_case({\"\
  a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\"\
  :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"\
  a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n#\
  \ check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  check_dict_case <- function(dict) {"
tests: "test_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
  \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
  \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
  \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # YOUR CODE HERE\n  keys <- names(dict)\n  to_upper <- toupper(keys)\n\
    \  to_lower <- tolower(keys)\n  if(tolower(to_upper) == to_lower) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\ntest_that('test_lower_case', {\n  expect_equal(check_dict_case(dict.1),\
    \ TRUE)\n  expect_equal(check_dict_case(dict.2), FALSE)\n  expect_equal(check_dict_case(dict.3),\
    \ FALSE)\n  expect_equal(check_dict_case(dict.4), FALSE)\n  expect_equal(check_dict_case(dict.5),\
    \ TRUE)\n})\n ", "\n    if (length(dict) == 0) return(FALSE)\n    if (nchar(names(dict)[1])\
    \ == 1) {\n        return(all(charToRaw(names(dict)) == as.raw(charToRaw(tolower(names(dict))))))\n\
    \    } else {\n        return(all(charToRaw(names(dict)) == as.raw(charToRaw(toupper(names(dict))))))\n\
    \    }\n}\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\ncheck_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\ncheck_dict_case({\"a\":\"\
    apple\", \"8\":\"banana\", \"a\":\"apple\"})\ncheck_dict_case({\"Name\":\"John\"\
    , \"Age\":\"36\", \"City\":\"Houston\"})\ncheck_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n\
    \  isLower <- FALSE\n  isUpper <- FALSE\n  for (key in names(dict)) {\n    if\
    \ (grepl(\"[A-Z]\", key)) {\n      isUpper <- TRUE\n    }\n    if (grepl(\"[a-z]\"\
    , key)) {\n      isLower <- TRUE\n    }\n  }\n  if ((isLower & isUpper) | (!isLower\
    \ & !isUpper)) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n    # Check\
    \ dictionary is not empty \n    if (length(dict) == 0) {\n        return(FALSE)\n\
    \    }\n    # Check whether keys are all strings in lower case\n    all_strings_lower\
    \ <- TRUE\n    for (key in names(dict)) {\n        if (!is.character(key) | !is.character(str_to_lower(key)))\
    \ {\n            all_strings_lower <- FALSE\n            break\n        }\n  \
    \  }\n    # Check whether keys are all strings in upper case\n    all_strings_upper\
    \ <- TRUE\n    for (key in names(dict)) {\n        if (!is.character(key) | !is.character(str_to_upper(key)))\
    \ {\n            all_strings_upper <- FALSE\n            break\n        }\n  \
    \  }\n    return(all_strings_lower | all_strings_upper)\n}\n", "\n  # TODO\n}\n",
  "\n  !(any(sapply(names(dict), function(x) any(grepl(\"[A-Z]\", x))))) | \n    !(any(sapply(names(dict),\
    \ function(x) any(grepl(\"[a-z]\", x)))))\n}\n", "\n  res = NULL\n  for (key in\
    \ names(dict)) {\n    res = append(res, ifelse(key == tolower(key), 1, 2))\n \
    \ }\n  return(length(unique(res)) == 1)\n}\ncheck_dict_case({\"a\":\"apple\",\
    \ \"b\":\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    })\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n\
    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n", "\n    is_string <-\
    \ function(x) {\n        if (is.character(x)) return(TRUE)\n        return(FALSE)\n\
    \    }\n    if (length(dict)==0) return(FALSE)\n    if (length(dict)==1) return(is_string(names(dict)[1]))\n\
    \    if (is_string(names(dict)[1])) {\n        if (is_string(names(dict)[2]))\
    \ {\n            if (isupper(names(dict)[1])) {\n                if (isupper(names(dict)[2]))\
    \ {\n                    return(TRUE)\n                } else {\n            \
    \        return(FALSE)\n                }\n            } else {\n            \
    \    if (islower(names(dict)[2])) {\n                    return(TRUE)\n      \
    \          } else {\n                    return(FALSE)\n                }\n  \
    \          }\n        } else {\n            return(FALSE)\n        }\n    } else\
    \ {\n        return(FALSE)\n    }\n}\ncheck_dict_case(dict)\n ", "\n  \n}\n",
  "\n\tresult <- NA\n\tif (is.null(dict)) {\n\t\tresult <- FALSE\n\t} else {\n\t\t\
    lower_count <- 0\n\t\tupper_count <- 0\n\t\tfor (key in names(dict)) {\n\t\t\t\
    if (is.na(result)) {\n\t\t\t\tif (nchar(key) == 1) {\n\t\t\t\t\tlower_count <-\
    \ lower_count + 1\n\t\t\t\t} else {\n\t\t\t\t\tlower_count <- lower_count + as.integer(tolower(key)\
    \ == key)\n\t\t\t\t\tupper_count <- upper_count + as.integer(toupper(key) == key)\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult <- (lower_count == length(dict)) | (upper_count\
    \ == length(dict))\n\t}\n\tresult\n}\n", "\n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  is_lower <- function(x) x == tolower(x)\n  is_upper <- function(x) x ==\
    \ toupper(x)\n  all(sapply(names(dict), is_lower)) || all(sapply(names(dict),\
    \ is_upper))\n}\n", "\n  # We need to check if the dictionary has no elements.\
    \ If it has no\n  # elements, then it is automatically False.\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  # We will use the map_lgl function to determine\
    \ if the keys are all upper\n  # case, then the map_lgl function to determine\
    \ if the keys are all lower\n  # case, and finally we'll use any to check if at\
    \ least one of the keys\n  # were lowercase. If all the keys are upper or all\
    \ the keys are lower, we\n  # will return True. Otherwise, we will return False.\n\
    \  if (!any(map_lgl(dict, tolower)) || !any(map_lgl(dict, toupper))) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  for (key in names(dict)) {\n \
    \   if (key == key) {\n      if (gsub(\"\\\\d+\", \"\", key) != key) return(FALSE)\n\
    \    }\n  }\n  return(TRUE)\n}\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    })\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\ncheck_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })\n ", "\n  # Your code here\n  return(NULL)\n}",
  "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  else if (min(nchar(names(dict)))\
    \ == 1) {\n    if (max(nchar(names(dict))) == 1) {\n      return(FALSE)\n    }\n\
    \    else {\n      return(FALSE)\n    }\n  }\n  else {\n    for (word in names(dict))\
    \ {\n      if (nchar(word) != nchar(tolower(word))) {\n        return(FALSE)\n\
    \      }\n    }\n    return(TRUE)\n  }\n}\ncheck_dict_case(dict)", "\n  dict_keys\
    \ <- names(dict)\n  if (length(dict_keys) == 0) {\n    return(FALSE)\n  }\n  upper_keys\
    \ <- toupper(dict_keys)\n  lower_keys <- tolower(dict_keys)\n  if (dict_keys ==\
    \ upper_keys | dict_keys == lower_keys) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n    keys <- names(dict)\n    all_uppercase <- all(stri_detect_fixed(keys,\
    \ \"^[A-Z]\"))\n    all_lowercase <- all(stri_detect_fixed(keys, \"^[a-z]\"))\n\
    \    all_uppercase | all_lowercase\n}\n", "\n    if(length(dict)==0) return(FALSE)\n\
    \    if(all(sapply(names(dict), function(x) is.na(x)))) return(FALSE)\n    all(sapply(names(dict),\
    \ function(x) all(stringr::str_detect(x, '[A-Z]')))) ||\n    all(sapply(names(dict),\
    \ function(x) all(stringr::str_detect(x, '[a-z]'))))\n}", "\n  if(length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  # Create a vector out of the keys and values.\n\
    \  keys <- names(dict)\n  # Convert all keys to strings.\n  keys <- unlist(lapply(keys,\
    \ toString))\n  # Check if all characters are upper case.\n  is_upper <- str_detect(keys,\
    \ \"^[A-Z]+$\")\n  # Check if all characters are lower case.\n  is_lower <- str_detect(keys,\
    \ \"^[a-z]+$\")\n  # If both upper and lower, return FALSE.\n  if(is_upper &&\
    \ is_lower) {\n    return(FALSE)\n  }\n  # If either upper or lower, return TRUE.\n\
    \  return(is_upper || is_lower)\n}", "\n    if (length(dict) == 0) {\n       \
    \ return(FALSE)\n    } else {\n        lower_key <- TRUE\n        upper_key <-\
    \ TRUE\n        for (key in names(dict)) {\n            if (key != tolower(key))\
    \ {\n                lower_key <- FALSE\n            }\n            if (key !=\
    \ toupper(key)) {\n                upper_key <- FALSE\n            }\n       \
    \ }\n        if (lower_key == TRUE | upper_key == TRUE) {\n            return(TRUE)\n\
    \        } else {\n            return(FALSE)\n        }\n    }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
