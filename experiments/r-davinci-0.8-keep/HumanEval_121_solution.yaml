name: HumanEval_121_solution
language: r
prompt: "# Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==> 12\n# solution([3,\
  \ 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\nsolution <- function(lst)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- solution\n    if(!identical(candidate(c(5,\
  \ 8, 7, 1)), 12)){quit('no', 1)}\n    if(!identical(candidate(c(3, 3, 3, 3, 3)),\
  \ 9)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 24, 321)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(5, 9)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 4, 8)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 23, 32)), 23)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(3, 13, 2, 9)), 3)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    sum(lst[seq(2, length(lst), by = 2)][lst[seq(2, length(lst),\
    \ by = 2)] %% 2 == 1])\n}\nsolution(c(5, 8, 7, 1))\nsolution(c(3, 3, 3, 3, 3))\n\
    solution(c(30, 13, 24, 321))\n", "\n    sum(lst[seq(2, length(lst), by = 2)][lst[seq(2,\
    \ length(lst), by = 2)] %% 2 == 1])\n}\nsolution(c(5, 8, 7, 1))\nsolution(c(3,\
    \ 3, 3, 3, 3))\nsolution(c(30, 13, 24, 321))\n", "\n  sum(lst[seq(2, length(lst),\
    \ by = 2)][lst[seq(2, length(lst), by = 2)] %% 2 == 1])\n}", "\n  sum(lst[!(seq_along(lst)\
    \ %% 2)][lst[!(seq_along(lst) %% 2)] %% 2 == 1])\n}", "\n  sum(lst[seq(2, length(lst),\
    \ by = 2)][lst[seq(2, length(lst), by = 2)] %% 2 == 1])\n}\n\nsolution <- function(lst)\
    \ {\n  sum(lst[seq(2, length(lst), by = 2)][lst[seq(2, length(lst), by = 2)] %%\
    \ 2 == 1])\n}\nsolution(c(5, 8, 7, 1))\nsolution(c(3, 3, 3, 3, 3))\nsolution(c(30,\
    \ 13, 24, 321))\n", "\n  sum(lst[2*(1:length(lst))-1][lst %% 2 == 1])\n}", "\n\
    \  sum(lst[seq(2, length(lst), by = 2)][lst[seq(2, length(lst), by = 2)] %% 2\
    \ == 1])\n}\n", "\n  #your code here\n}\n", "\n  sum(lst[sapply(seq_along(lst),\
    \ function(i) is.even(i)) & sapply(lst, is.odd)])\n}", "\n    sum(lst[c(2, 4,\
    \ 6, 8, ...)])\n}\nsolution <- function(lst) {\n    sum(lst[c(F, T, F, T, ...)])\n\
    }\nsolution <- function(lst) {\n    sum(Filter(function(x) x %% 2 == 1, lst, Mod(seq_along(lst),\
    \ 2) == 0))\n}\nsolution <- function(lst) {\n    sum(lst[seq_along(lst) %% 2 ==\
    \ 0])\n}\nsolution <- function(lst) {\n    lst[seq_along(lst) %% 2 == 0] %>% sum\n\
    }\nsolution <- function(lst) {\n    lst[seq_along(lst) %% 2 == 0] %>% Reduce(\"\
    +\")\n}\nsolution <- function(lst) {\n    Reduce(\"+\", lst[seq_along(lst) %%\
    \ 2 == 0])\n}\nsolution <- function(lst) {\n    Reduce(\"+\", Filter(function(x)\
    \ x %% 2 == 1, lst, Mod(seq_along(lst), 2) == 0))\n}\nsolution <- function(lst)\
    \ {\n    Reduce(\"+\", Filter(function(x) x %% 2 == 1, lst, Mod(seq_along(lst),\
    \ 2) == 0))\n}\nsolution <- function(lst) {\n    sum(Filter(function(x) x %% 2\
    \ == 1, lst, Mod(seq_along(lst), 2) == 0))\n}\nsolution <- function(lst) {\n \
    \   sum(lst[c(F, T, F, T, ...)])\n}\nsolution <- function(lst) {\n    sum(lst[c(2,\
    \ 4, 6, 8, ...)])\n}\nsolution <- function(lst) {\n    sum(Filter(function(x)\
    \ x %% 2 == 1, lst, Mod(seq_along(lst), 2) == 0))\n}\nsolution <- function(lst)\
    \ {\n    sum(lst[c(F, T, F, T, ...)])\n", "\n  total = 0\n  for (i in seq(2, length(lst),\
    \ by = 2)){\n    if (lst[i] %% 2 == 1){\n      total = total + lst[i]\n    }\n\
    \  }\n  return(total)\n}", "\n  sum(lst[seq(from = 2, to = length(lst), by = 2)][lst[seq(from\
    \ = 2, to = length(lst), by = 2)] %% 2 == 1])\n}\n", "\n  lst[seq(2, length(lst),\
    \ by = 2)] <- lst[seq(2, length(lst), by = 2)] %/% 10\n  sum(lst)\n}\n", "\n \
    \   ans = 0\n    for (i in seq(2, length(lst), by = 2)) {\n        if (lst[i]\
    \ %% 2 == 1) {\n            ans = ans + lst[i]\n        }\n    }\n    return(ans)\n\
    }\n\nsolution(c(5, 8, 7, 1))\nsolution(c(3, 3, 3, 3, 3))\nsolution(c(30, 13, 24,\
    \ 321))\n ", "\n  sum(lst[which(seq_along(lst) %% 2 == 0)][lst[which(seq_along(lst)\
    \ %% 2 == 0)] %% 2 == 1])\n}\n", "\n  # get all odd numbers\n  lst_odd <- lst[lst\
    \ %% 2 == 1]\n  # get the sum\n  sum(lst_odd[seq_along(lst_odd) %% 2 == 0])\n\
    }\n", "\n  sum(lst[grep(\"[02468]$\", names(lst))])\n}", "\n  sum(lst[seq(2, length(lst),\
    \ by = 2)][lst[seq(2, length(lst), by = 2)] %% 2 == 1])\n}", "\n    total <- 0\n\
    \    i <- 1\n    while (i <= length(lst)) {\n        if (i %% 2 == 0 && lst[i]\
    \ %% 2 == 1) {\n            total <- total + lst[i]\n        }\n        i <- i\
    \ + 1\n    }\n    return(total)\n}\n ", "\n  sum(lst[lst %% 2 == 1][seq_along(lst)\
    \ %% 2 == 0])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
