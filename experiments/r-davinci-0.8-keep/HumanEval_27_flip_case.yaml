name: HumanEval_27_flip_case
language: r
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\nflip_case <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- flip_case\n    if(!identical(candidate(''),\
  \ '')){quit('no', 1)}\n    if(!identical(candidate('Hello!'), 'hELLO!')){quit('no',\
  \ 1)}\n    if(!identical(candidate('These violent delights have violent ends'),\
  \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  string_lower <- stringr::str_to_lower(string)\n  string_upper <-\
    \ stringr::str_to_upper(string)\n  stringr::str_replace_all(string, string_lower,\
    \ string_upper)\n}\n", "\n  sapply(strsplit(string, \"\"),\n         function(x)\
    \ {\n           if (x %in% LETTERS) tolower(x)\n           else toupper(x)\n \
    \        })\n}\nflip_case(\"Hello\")\n", "\n    # new_string <- \"\"\n    # for\
    \ (i in seq_along(string)) {\n    #     if (is.lower(string[i])) {\n    #    \
    \     new_string <- paste(new_string, toupper(string[i]), sep = \"\")\n    # \
    \    } else {\n    #         new_string <- paste(new_string, tolower(string[i]),\
    \ sep = \"\")\n    #     }\n    # }\n    # return(new_string)\n    return(string)\n\
    }\n", "\n    # Your code here\n}\nflip_case('Hello')\n ", "\n  str_flip(string)\n\
    }\n", "\n  string <- strsplit(string, \"\")[[1]]\n  for (i in 1:length(string))\
    \ {\n    if (is.na(string[i])) next\n    if (str_detect(string[i], \"[a-z]\"))\
    \ {\n      string[i] <- toupper(string[i])\n    } else {\n      string[i] <- tolower(string[i])\n\
    \    }\n  }\n  string <- paste(string, collapse = \"\")\n  return(string)\n}\n",
  "\n    string <- strsplit(string, '')\n    string <- unlist(string)\n    string\
    \ <- sapply(string, function(x) {\n        if(x == toupper(x)) {\n           \
    \ return(tolower(x))\n        } else {\n            return(toupper(x))\n     \
    \   }\n    })\n    return(paste(string, collapse = ''))\n}\n\nflip_case('Hello')\n\
    flip_case('bye')\nflip_case('GoodBye')\n", "\n  string <- gsub('[a-z]', '[A-Z]',\
    \ string)\n  string <- gsub('[A-Z]', '[a-z]', string)\n  string\n}\n", "\n  flip_case\
    \ <- function(character) {\n    ifelse(character %in% letters, \n           ifelse(character\
    \ %in% LETTERS, tolower(character), toupper(character)),\n           character)\n\
    \  }\n  sapply(string, flip_case)\n}\n\nflip_case('Hello')\n", "\n    string_split\
    \ <- strsplit(string, split = \"\")\n    flip_string <- lapply(string_split, function(x)\
    \ {\n        for (i in 1:length(x)) {\n            if (x[i] == tolower(x[i]))\
    \ {\n                x[i] <- toupper(x[i])\n            } else {\n           \
    \     x[i] <- tolower(x[i])\n            }\n        }\n        return(x)\n   \
    \ })\n    return(unlist(flip_string))\n}\nflip_case('Hello')\n", "\n  string[string\
    \ == toupper(string)] <- tolower(string[string == toupper(string)])\n  string[string\
    \ == tolower(string)] <- toupper(string[string == tolower(string)])\n  return(string)\n\
    }\n", "\n  # Use a for loop to iterate through the string, and for each character,\n\
    \  # If a character is a letter:\n  #  If the letter is lowercase, turn it uppercase.\n\
    \  #  If the letter is uppercase, turn it lowercase.\n  # Use the documentation\
    \ on the `charToRaw` function to find out how to convert a character to its raw\
    \ ASCII value,\n  # and vice versa.\n  # Do not modify this line:\n  string <-\
    \ paste(string, collapse=\"\")\n  string_array <- strsplit(string, split=\"\"\
    )[[1]]\n  for (i in seq_along(string_array)) {\n    if (is.na(string_array[i]))\n\
    \      {\n        next\n      }\n    ascii_val <- as.integer(charToRaw(string_array[i]))\n\
    \    if (ascii_val > 64 && ascii_val < 91)\n      {\n        ascii_val <- ascii_val\
    \ + 32\n      }\n    else if (ascii_val > 96 && ascii_val < 123)\n      {\n  \
    \      ascii_val <- ascii_val - 32\n      }\n    string_array[i] <- rawToChar(ascii_val)\n\
    \  }\n  string <- paste(string_array, collapse=\"\")\n  return(string)\n}\nflip_case('Hello')\n",
  "\n  # (1) Convert string to lower case\n  result <- tolower(string)\n  # (2) Create\
    \ a vector of logical values.\n  # TRUE if element is not lowercase, and FALSE\
    \ if it is.\n  lv <- c(result != tolower(result))\n  # (3) Create a vector of\
    \ logical values.\n  # TRUE if element is not uppercase, and FALSE if it is.\n\
    \  uv <- c(result != toupper(result))\n  # (4) Combine logical vectors into vector\
    \ of indices,\n  # where TRUEs are located.\n  v <- lv + uv == 1\n  # (5) Convert\
    \ elements to upper case by indices.\n  result[v] <- toupper(result[v])\n  # (6)\
    \ Return a result.\n  return(result)\n}", "\n  # TODO\n  for (c in string) {\n\
    \    if(str_detect(c,\"[A-Z]\")) {\n        string = str_replace(string,c,tolower(c))\n\
    \    }\n    else if(str_detect(c,\"[a-z]\")) {\n        string = str_replace(string,c,toupper(c))\n\
    \    }\n  }\n  return(string)\n}\nflip_case(\"Hello\")\n", "\n  res = stringi::stri_trans_general(string,\
    \ \"anylower\", \"anyupper\")\n  return(res)\n}\nflip_case('Hello')\n", "\n  \
    \  # TODO: Implement this function\n    for (i in 1:length(string)) {\n      \
    \  if (is.lower(string[i])) {\n            string[i] <- toupper(string[i])\n \
    \       } else {\n            string[i] <- tolower(string[i])\n        }\n   \
    \ }\n    return(string)\n}\nflip_case('Hello')\n", "\n    out <- character(length\
    \ = nchar(string))\n    for (i in seq_along(string)) {\n        if (is.na(string[i]))\
    \ {\n            out[i] <- string[i]\n        } else if (grepl(\"[[:upper:]]\"\
    , string[i])) {\n            out[i] <- tolower(string[i])\n        } else {\n\
    \            out[i] <- toupper(string[i])\n        }\n    }\n    out\n}\n", "\n\
    \    string <- strsplit(string, \"\")[[1]]\n    res <- \"\"\n    for (i in string)\
    \ {\n        if (i == tolower(i)) {\n            res <- paste(res, toupper(i),\
    \ sep = \"\")\n        } else {\n            res <- paste(res, tolower(i), sep\
    \ = \"\")\n        }\n    }\n    res\n}\n", "\n  sapply(string, function(x) ifelse(x\
    \ == tolower(x), toupper(x), tolower(x)))\n}\n\nflip_case(\"Hello\")\n", "\n \
    \ return(string)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
