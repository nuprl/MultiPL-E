name: HumanEval_161_solve
language: r
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
  # solve(\"#a@C\") = \"#A@c\"\nsolve <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- solve\n    if(!identical(candidate('AsDf'),\
  \ 'aSdF')){quit('no', 1)}\n    if(!identical(candidate('1234'), '4321')){quit('no',\
  \ 1)}\n    if(!identical(candidate('ab'), 'AB')){quit('no', 1)}\n    if(!identical(candidate('#a@C'),\
  \ '#A@c')){quit('no', 1)}\n    if(!identical(candidate('#AsdfW^45'), '#aSDFw^45')){quit('no',\
  \ 1)}\n    if(!identical(candidate('#6@2'), '2@6#')){quit('no', 1)}\n    if(!identical(candidate('#$a^D'),\
  \ '#$A^d')){quit('no', 1)}\n    if(!identical(candidate('#ccc'), '#CCC')){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n    letter.vector <- strsplit(s, \"\")[[1]]\n    letter.vector <-\
    \ sapply(letter.vector, function(x) {\n        tryCatch(toupper(x), error = function(e)\
    \ {\n            tolower(x)\n        })\n    })\n    if(is.null(letter.vector))\n\
    \        return(s)\n    else\n        return(paste(letter.vector, collapse = \"\
    \"))\n}\n", "\n  s <- stringi::stri_split_fixed(s, \"\", -1)\n  for (i in seq_along(s))\
    \ {\n    if (is.na(stringi::stri_trans_totitle(s[i]))) {\n      s[i] <- stringi::stri_trans_totitle(s[i])\n\
    \    } else {\n      s[i] <- stringi::stri_trans_tolower(s[i])\n    }\n  }\n \
    \ s <- stringi::stri_join(s, \"\")\n  return(s)\n}\n", "\n  if (nzchar(s)) {\n\
    \    s = gsub(\"[a-z]\", \"\\\\U\\\\1\", s, perl = TRUE)\n    s = gsub(\"[A-Z]\"\
    , \"\\\\L\\\\1\", s, perl = TRUE)\n  } else {\n    s = rev(s)\n  }\n  return(s)\n\
    }", "\n    r <- \"\"\n    # If the string contains no letters, reverse the string.\n\
    \    if(nchar(gsub(\"[A-Za-z]\", \"\", s)) == nchar(s)){\n        for(i in 1:nchar(s)){\n\
    \            r <- paste(substr(s,i,i), r, sep=\"\")\n        }\n    }else{\n \
    \       for(i in 1:nchar(s)){\n            if(substr(s,i,i) %in% letters){\n \
    \               r <- paste(swapcase(substr(s,i,i)), r, sep=\"\")\n           \
    \ }else{\n                r <- paste(substr(s,i,i), r, sep=\"\")\n           \
    \ }\n        }\n    }\n    return(r)\n}", "\n  i <- nchar(s)\n  x <- \"\"\n  while\
    \ (i >= 1) {\n    tmp <- substr(s, i, i)\n    if (grepl(\"[a-zA-Z]\", tmp)) {\n\
    \      if (tmp %in% letters) {\n        x <- paste(x, toupper(tmp), sep = \"\"\
    )\n      } else {\n        x <- paste(x, tolower(tmp), sep = \"\")\n      }\n\
    \    } else {\n      x <- paste(x, tmp, sep = \"\")\n    }\n    i <- i - 1\n \
    \ }\n  return(x)\n}", "\n  if (nchar(s) == 0) \n    return(\"\")\n  #if (nchar(s)\
    \ == 1)\n  #  return(toupper(s))\n  x <- substr(s, 1, 1)\n  if (is.letter(x))\
    \ {\n    x <- ifelse(is.upper.letter(x), tolower(x), toupper(x))\n  }\n  return(paste(x,\
    \ solve(substr(s, 2, nchar(s))), sep = \"\"))\n}", "\n    str_to_lower(s) %in%\
    \ letters\n    if(!str_to_lower(s) %in% letters)\n        return(str_reverse(s))\n\
    \    ans <- \"\"\n    for(i in 1:str_length(s)){\n        if(str_to_lower(s[i])\
    \ %in% letters){\n            if(s[i] == str_to_lower(s[i])){\n              \
    \  ans <- paste0(ans,str_to_upper(s[i]))\n            }else{\n               \
    \ ans <- paste0(ans,str_to_lower(s[i]))\n            }\n        }else{\n     \
    \       ans <- paste0(ans,s[i])\n        }\n    }\n    return(ans)\n}\n\nsolve(\"\
    1234\")\nsolve(\"ab\")\nsolve(\"#a@C\")\nsolve(\"Kamil\")\n", "\n    i <- 1\n\
    \    solution <- c()\n    while (i <= nchar(s)) {\n        ch <- substr(s, i,\
    \ i)\n        if (is.na(match(ch, letters))) {\n            solution <- c(solution,\
    \ ch)\n        } else {\n            if (ch == toupper(ch)) {\n              \
    \  solution <- c(solution, tolower(ch))\n            } else {\n              \
    \  solution <- c(solution, toupper(ch))\n            }\n        }\n        i <-\
    \ i + 1\n    }\n    paste(solution, collapse = \"\")\n}\n\nsolve(\"1234\")\nsolve(\"\
    ab\")\nsolve(\"#a@C\")\n", "\n\treturn (toString(chartr(s,\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ,\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\")))\n}\nsolve(\"1234\"\
    )\nsolve(\"ab\")\nsolve(\"#a@C\")\n", "\n    if(!grepl(\"[a-zA-Z]\", s)) {return(rev(s))}\n\
    \    return(gsub(\"[a-zA-Z]\", function(x) {ifelse(x == toupper(x), tolower(x),\
    \ toupper(x))}, s))\n}", "\n    str <- \"\"\n    for (i in 1:nchar(s)) {\n   \
    \     if (is.element(toupper(substr(s, i, i)), letters))\n            str <- paste(str,\
    \ substr(s, i, i), sep = \"\")\n        else\n            str <- paste(str, toupper(substr(s,\
    \ i, i)), sep = \"\")\n    }\n    return(str)\n}\n\nsolve(\"#a@C\")\n", "\n  if\
    \ (grepl(\"[a-zA-Z]\", s)) {\n    s <- str_to_title(s)\n  } else {\n    s <- str_reverse(s)\n\
    \  }\n  return(s)\n}", "\n    if(grepl(\"[a-zA-Z]\", s)){\n        sapply(s, function(x)\
    \ ifelse(x %in% letters, tolower(x), toupper(x)))\n    } else {\n        rev(s)\n\
    \    }\n}\nsolve(\"ab\")\nsolve(\"#a@C\")\n", "\n  letters <- letters\n  if(any(s\
    \ %in% letters)) {\n    out <- chartr(letters, rev(letters), s)\n  } else {\n\
    \    out <- chartr(s, rev(s), s)\n  }\n  return(out)\n}\n", "\n  s[grep(\"[a-zA-Z]\"\
    , s)] <- gsub(\"[a-zA-Z]\", \"\", tolower(s), perl = TRUE)\n  if (nchar(s) ==\
    \ 0) return(s)\n  if (substr(s, 1, 1) %in% c(\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\")) {\n    return(paste(rev(substring(s, 1,\
    \ nchar(s) - 1)), substr(s, nchar(s), nchar(s)), sep = \"\"))\n  } else {\n  \
    \  return(substr(s, nchar(s), nchar(s)) %+% paste(rev(substring(s, 1, nchar(s)\
    \ - 1)), sep = \"\"))\n  }\n}\n\nsolve <- function(s) {\n  if (nchar(s) == 0)\
    \ return(s)\n  if (substr(s, 1, 1) %in% c(\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\")) {\n    return(paste(rev(substring(s, 1, nchar(s)\
    \ - 1)), substr(s, nchar(s), nchar(s)), sep = \"\"))\n  } else {\n    return(substr(s,\
    \ nchar(s), nchar(s)) %+% paste(rev(substring(s, 1, nchar(s) - 1)), sep = \"\"\
    ))\n  }\n}\nsolve <- function(s) {\n  if (grepl(\"^[0-9]+$\", s)) {\n    return(paste(rev(substring(s,\
    \ 1, nchar(s) - 1)), substr(s, nchar(s), nchar(s)), sep = \"\"))\n  } else {\n\
    \    return(substr(s, nchar(s), nchar(s)) %+% paste(rev(substring(s, 1, nchar(s)\
    \ - 1)), sep = \"\"))\n  }\n}\n\nsolve <- function(s) {\n  sub(\".\", \"", "\n\
    \  if(grepl(\"[a-zA-Z]\", s)) {\n    s <- toupper(s)\n    s <- tolower(s)\n  }\n\
    \  else {\n    s <- rev(s)\n  }\n  return(s)\n}\n", "\n    #your code here\n \
    \   print(s)\n    split <- strsplit(s, \"\")[[1]]\n    print(split)\n    for (i\
    \ in 1:length(split)) {\n        if (nchar(split[i]) == 1) {\n            if (is.na(as.numeric(split[i])))\
    \ {\n                split[i] <- ifelse(is.na(as.numeric(toupper(split[i]))),\
    \ tolower(split[i]), toupper(split[i]))\n            }\n        }\n    }\n   \
    \ paste(split, collapse = \"\")\n}\n ", "\n    # Your code here.\n    return (s)\n\
    }\n", "\n  if(nchar(gsub(\"[[:alpha:]]\",\"\",s)) == nchar(s))\n    return(strsplit(s,split=\"\
    \")[[1]][n():1])\n  else\n    return(gsub(\"[[:alpha:]]\",function(x)ifelse(x\
    \ %in% c(LETTERS,letters),{ifelse(x %in% c(LETTERS),tolower(x),toupper(x))},x),s))\n\
    }", "\n    x <- stringi::stri_reverse(s)\n    if (all(stringi::stri_trans_toupper(x)\
    \ == x)) {\n        return(stringi::stri_trans_tolower(x))\n    } else {\n   \
    \     return(stringi::stri_trans_toupper(x))\n    }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
