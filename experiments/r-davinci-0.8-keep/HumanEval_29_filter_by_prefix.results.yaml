name: HumanEval_29_filter_by_prefix
language: r
results:
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  return(strings[startsWith(strings, prefix)])\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in startsWith(strings, prefix) : non-character object(s)\\nCalls:\
    \ test_humaneval -> identical -> candidate -> startsWith\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    strings[sapply(strings, function(x) substr(x, 1, 1) == prefix)]\n\
    }\nprint(filter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a'))\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] "abc"   "array"\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    #R6\n    #strings <- c(\"bcd\", \"cde\", \"def\", \"efg\")\n\
    \    #prefix <- \"de\"\n    res <- strings[grep(prefix, strings)]\n    return(res)\n\
    \    }\nstrings <- c(\"bcd\", \"cde\", \"def\", \"efg\")\nprefix <- \"de\"\nfilter_by_prefix(strings,\
    \ prefix)\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n \
    \   if(!identical(candidate(c(), 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] "cde" "def"\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  # TODO\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings <- Filter(strings, function(string) {return(startsWith(string,\
    \ prefix))})\n  return(strings)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in get(as.character(FUN), mode = \"function\", envir = envir) : \\\
    n  object \\'strings\\' of mode \\'function\\' was not found\\nCalls: test_humaneval\
    \ ... identical -> candidate -> Filter -> match.fun -> get\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  f <- function(string) {\n    sub(prefix, '', string) != string\n\
    \  }\n  Filter(f, strings)\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ filter_by_prefix\n    if(!identical(candidate(c(), 'john'), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  # TODO: Implement me!\n  strings[substr(strings,1,1)==prefix]\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    if (is.null(strings)) {\n        return(NULL)\n    }\n    prefix_length\
    \ <- nchar(prefix)\n    if (prefix_length == 0) {\n        return(strings)\n \
    \   }\n    filtered <- list()\n    for (s in strings) {\n        if (nchar(s)\
    \ > prefix_length && substr(s, 1, prefix_length) == prefix) {\n            filtered\
    \ <- c(filtered, s)\n        }\n    }\n    return(filtered)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings <- strings[startsWith(strings, prefix)]\n  return(strings)\n\
    }\nfilter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n\ntest_humaneval <-\
    \ function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] "abc"   "array"\n'
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in startsWith(strings, prefix) : non-character object(s)\\nCalls:\
    \ test_humaneval -> identical -> candidate -> startsWith\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  prefix_len <- nchar(prefix)\n  grep(paste0('^', prefix), strings,\
    \ value = TRUE)\n}\nfilter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n\n\
    test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b'[1] "abc"   "array"\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    #define empty vector to contain the relevant strings\n    my_strings\
    \ <- c()\n    #check each string to see if it begins with the right prefix,\n\
    \    #  and append it to the empty vector if it does\n    for (s in strings) {\n\
    \        if (startsWith(s, prefix)) {\n            my_strings <- c(my_strings,\
    \ s)\n        }\n    }\n    #return the vector\n    return(my_strings)\n}\n\n\
    test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  ret <- vector()\n  for (s in strings) {\n    if (startsWith(s,\
    \ prefix)) {\n      ret <- c(ret, s)\n    }\n  }\n  return(ret)\n}\nfilter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n\ntest_humaneval <- function() {\ncandidate <-\
    \ filter_by_prefix\n    if(!identical(candidate(c(), 'john'), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b'[1] "abc"   "array"\n'
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  list_of_strings <- Filter(function(x) grepl(prefix, x), strings)\n\
    \  return(list_of_strings)\n}\n\ntest_humaneval <- function() {\ncandidate <-\
    \ filter_by_prefix\n    if(!identical(candidate(c(), 'john'), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  reg_ex <- paste('^', prefix, sep='')\n  result <- filter(strings,\
    \ grepl(reg_ex, .))\n  return(result)\n}\n\nfilter_by_prefix(c(), 'a')\nfilter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n\ntest_humaneval <- function() {\ncandidate <-\
    \ filter_by_prefix\n    if(!identical(candidate(c(), 'john'), c())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in ts(x) : \\'ts\\' object must have one or more observations\\nCalls:\
    \ filter_by_prefix -> filter -> as.ts -> as.ts.default -> ts\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  str_subset(strings, pattern = paste0('^', prefix))\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in str_subset(strings, pattern = paste0(\"^\", prefix)) : \\n  could\
    \ not find function \"str_subset\"\\nCalls: test_humaneval -> identical -> candidate\\\
    nExecution halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  filter(strings, function(x) str_starts(x, prefix))\n}\ntest_humaneval\
    \ <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in ts(x) : \\'ts\\' object must have one or more observations\\nCalls:\
    \ test_humaneval ... candidate -> filter -> as.ts -> as.ts.default -> ts\\nExecution\
    \ halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  return (sapply(strings, function(x) ifelse(startsWith(x, prefix),\
    \ x, NA)))\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n    # YOUR CODE HERE\n    return(str_subset(strings, regex(prefix)))\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in str_subset(strings, regex(prefix)) : \\n  could not find function\
    \ \"str_subset\"\\nCalls: test_humaneval -> identical -> candidate\\nExecution\
    \ halted\\n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  strings[startsWith(strings, prefix)]\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'),\
    \ c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
    }\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in startsWith(strings, prefix) : non-character object(s)\\nCalls:\
    \ test_humaneval -> identical -> candidate -> startsWith\\nExecution halted\\\
    n'"
  exit_code: 1
  status: Exception
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings,\
    \ prefix) {\n  filter(strings, function(el) {\n    str_starts(el, prefix)\n  })\n\
    }\nfilter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n\ntest_humaneval <-\
    \ function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  stdout: b''
  stderr: "b'During startup - Warning message:\\nSetting LC_CTYPE failed, using \"\
    C\" \\nError in as.double(filter) : \\n  cannot coerce type \\'closure\\' to vector\
    \ of type \\'double\\'\\nCalls: filter_by_prefix -> filter\\nIn addition: Warning\
    \ message:\\nIn storage.mode(x) <- \"double\" : NAs introduced by coercion\\nExecution\
    \ halted\\n'"
  exit_code: 1
  status: Exception
