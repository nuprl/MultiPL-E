name: HumanEval_22_filter_integers
language: r
prompt: "# Filter given list of any python values only for integers\n# >>> filter_integers(['a',\
  \ 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, 'abc', {}, []])\n# [1, 2, 3]\n\
  filter_integers <- function(values) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_integers\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(4, list(), c(), 23.2, 9, 'adasd')),\
  \ c(4, 9))){quit('no', 1)}\n    if(!identical(candidate(c(3, 'c', 3, 3, 'a', 'b')),\
  \ c(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    return(Filter(function(x) typeof(x) == 'integer', values))\n\
    }\n", "\n  is.integer(values)\n}\n\nfilter_integers(c(1, 2, 3, 'abc', {}, []))\n",
  "\n  return(unlist(lapply(values, FUN = function(x) { if (is.integer(x)) { return(x)\
    \ } })))\n}\n", "\n  values <- as.list(values)\n  out <- lapply(values, function(value)\
    \ {\n    if (is.integer(value)) return(value)\n  })\n  out <- unlist(out)\n  out\
    \ <- out[!is.na(out)]\n  return(out)\n}", "\n  res <- integer(0)\n  for (val in\
    \ values) {\n    if (is.integer(val)) {\n      res <- c(res, val)\n    }\n  }\n\
    \  return(res)\n}\nfilter_integers(list(1, \"a\", 3.14, 4))\n", "\n  lapply(values,\
    \ function(x) if(is.integer(x)) x)\n}\n", "\n  filter(values, is.integer)\n}\n\
    \ ", "\n  values[sapply(values, is.integer)]\n}\n", "\n  Filter(is.integer, values)\n\
    }\n", "\n    filtered_values <- values[which(unlist(lapply(values, is.integer)))]\n\
    \    return(filtered_values)\n}\n", "\n  # START SOLUTION\n  Filter(is.integer,\
    \ values)\n  # END SOLUTION\n}\n", "\n    return(Filter(is.integer, values))\n\
    }\n\nfilter_integers(['a', 3.14, 5])\nfilter_integers([1, 2, 3, 'abc', {}, []])\n",
  "\n  Filter(\n    function(x) {\n      is.integer(x)\n    },\n    values\n  )\n\
    }\n", "\n  \n  return(Filter(function(x) is.integer(x), values))\n}\n\nprint(filter_integers(['a',\
    \ 3.14, 5]))\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))\n", "\n    return(\n\
    \        Filter(is.integer, values)\n    )\n}\ntest_that('filter_integers filter\
    \ integers', {\n    expect_equal(filter_integers(c('a', 3.14, 5)), c(5))\n   \
    \ expect_equal(filter_integers(c(1, 2, 3, 'abc', list(), c())), c(1, 2, 3))\n\
    })\n", "\n  integers <- function(x) {\n    as.integer(x) == x\n  }\n  return(Filter(integers,\
    \ values))\n}\nfilter_integers(c('a', 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc',\
    \ list(), c()))\n ", "\n    # write your code here\n}\n", "\n    return(Filter(is.integer,\
    \ values))\n}\nfilter_integers(c('a', 3.14, 5))\nfilter_integers(c(1, 2, 3, 'abc',\
    \ list(), c()))\n", "\n  filter(values, function(v) is.integer(v))\n}\n", "\n\
    \    return([x for x in values if isinstance(x, (int, long))])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
