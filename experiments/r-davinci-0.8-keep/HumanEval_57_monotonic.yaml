name: HumanEval_57_monotonic
language: r
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
  # >>> monotonic([4, 1, 0, -10])\n# True\nmonotonic <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- monotonic\n    if(!identical(candidate(c(1,\
  \ 2, 4, 10)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 4, 20)),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 20, 4, 10)), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(4, 1, 0, -10)), TRUE)){quit('no', 1)}\n   \
  \ if(!identical(candidate(c(4, 1, 1, 0)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 2, 3, 2, 5, 60)), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2,\
  \ 3, 4, 5, 60)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(9, 9, 9, 9)),\
  \ TRUE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (length(l) < 2) {\n    return(TRUE)\n  } else {\n    inc <-\
    \ l[1] <= l[2]\n    for (i in 2:(length(l) - 1)) {\n      if ((inc && l[i] > l[i\
    \ + 1]) || (!inc && l[i] < l[i + 1])) {\n        return(FALSE)\n      }\n    }\n\
    \    return(TRUE)\n  }\n}\n", "\n    # your code here\n}\n", "\n    if(length(l)\
    \ <= 1) return(TRUE)\n    if((l[1] - l[2]) * (l[2] - l[3]) > 0) return(monotonic(l[-1]))\n\
    \    return(FALSE)\n}\n", "\n    if (length(l) <= 1) return(TRUE)\n    if (l[1]\
    \ == l[2]) return(monotonic(l[-1]))\n    if (all(diff(l) == sign(l[2] - l[1])))\
    \ return(TRUE)\n    return(FALSE)\n}\n", "\n    if(length(l) == 1)\n        return(TRUE)\n\
    \    else {\n        v <- ifelse(l[2] > l[1], 1, ifelse(l[2] < l[1], -1, 0))\n\
    \        if(v == 0)\n            return(FALSE)\n        else\n            return(monotonic(l[2:length(l)]))\n\
    \    }\n}\n", "\n  # check if decreasing or increasing\n  if ( l[1] < l[2] ) {\n\
    \    return ( all( diff(l) > 0 ) )\n  } else {\n    return ( all( diff(l) < 0\
    \ ) )\n  }\n}\n", "\n    if(length(l) == 0){\n        return(TRUE)\n    }\n  \
    \  else if(length(l) == 1){\n        return(TRUE)\n    }\n    for(i in 2:length(l)){\n\
    \        if(l[i] - l[i-1] > 0){\n            if(i == length(l)){\n           \
    \     return(TRUE)\n            }\n            next\n        }\n        else if(l[i]\
    \ - l[i-1] < 0){\n            if(i == length(l)){\n                return(TRUE)\n\
    \            }\n            next\n        }\n        else{\n            return(FALSE)\n\
    \        }\n    }\n    return(TRUE)\n}\n", "\n  if(length(l) == 0) {\n    TRUE\n\
    \  } else {\n    # If there is only one element in the list, then just return\
    \ TRUE\n    res <- TRUE\n    for(i in seq(1, length(l)-1)) {\n      if(l[i] >\
    \ l[i+1]) {\n        res <- FALSE\n      }\n    }\n    res\n  }\n}\n\nprint(\"\
    Testing monotonic\")\nprint(monotonic(c(1, 2, 4, 20)))\nprint(monotonic(c(1, 20,\
    \ 4, 10)))\nprint(monotonic(c(4, 1, 0, -10)))\nprint(monotonic(c()))\n", "\n \
    \   if (length(l) == 1) {\n        return(TRUE)\n    }\n    is_up <- c(TRUE, diff(l)\
    \ >= 0)\n    is_down <- c(TRUE, diff(l) <= 0)\n    all(is_up) || all(is_down)\n\
    }\n", "\n    # Append last value to beginning\n    m <- append(l, l[length(l)])\n\
    \    # Check if all values are sorted\n    all(diff(m) > 0) | all(diff(m) < 0)\n\
    }\n", "\n    for (i in 1:(length(l)-1)) {\n        if ( (l[i] > l[i+1]) & (l[i+1]\
    \ <= l[i+2]) )\n            return(FALSE)\n        if ( (l[i] < l[i+1]) & (l[i+1]\
    \ >= l[i+2]) )\n            return(FALSE)\n    }\n    return(TRUE)\n}\n", "\n\
    \    if(length(l) < 2)\n        return(TRUE)\n    if(length(l) == 2)\n       \
    \ return(l[1] == l[2])\n    if(diff(l) >= 0)\n        monotonic(diff(l))\n   \
    \ else\n        monotonic(diff(l))\n}\n", "\n    if (is.null(l))\n        return(TRUE)\n\
    \    else if (length(l) <= 1)\n        return(TRUE)\n    else {\n        if ((l[1]\
    \ > l[2]) & ((monotonic(l[2:length(l)]))))\n            return(TRUE)\n       \
    \ else if ((l[1] < l[2]) & ((monotonic(l[2:length(l)]))))\n            return(TRUE)\n\
    \        else\n            return(FALSE)\n    }\n}\nmonotonic(c(1, 2, 4, 20))\n\
    monotonic(c(1, 20, 4, 10))\nmonotonic(c(4, 1, 0, -10))\n", "\n    is_increasing\
    \ <- F\n    is_decreasing <- F\n    for (i in 1:(length(l)-1)) {\n        if (l[i]\
    \ < l[i+1]) {\n            is_increasing <- T\n        }\n        if (l[i] > l[i+1])\
    \ {\n            is_decreasing <- T\n        }\n    }\n    return(is_increasing\
    \ | is_decreasing)\n}\n", "\n    # YOUR CODE HERE\n    a <- diff(l)\n    if (length(a)\
    \ == 0) return(TRUE)\n    if (all(a < 0)) return(TRUE)\n    if (all(a > 0)) return(TRUE)\n\
    \    return(FALSE)\n}\n", "\n    if(length(l) <= 1) {\n        return(TRUE)\n\
    \    } else {\n        if(l[1] < l[2]) {\n            return(monotonic(l[-1])\
    \ & (l[1] < l[2]))\n        } else {\n            return(monotonic(l[-1]) & (l[1]\
    \ > l[2]))\n        }\n    }\n}\n", "\n    for (i in 2:length(l)) {\n        if\
    \ (l[i] > l[i-1]) {\n            if (length(l[which(l > l[i-1])]) != length(l[which(l\
    \ > l[i-1])][which(l[which(l > l[i-1])] > l[i])])) {\n                return(FALSE)\n\
    \            }\n        } else if (l[i] < l[i-1]) {\n            if (length(l[which(l\
    \ < l[i-1])]) != length(l[which(l < l[i-1])][which(l[which(l < l[i-1])] < l[i])]))\
    \ {\n                return(FALSE)\n            }\n        }\n    }\n    return(TRUE)\n\
    }", "\n    if (length(l) <= 1) return(TRUE)\n    if (l[1] < l[2]) {\n        for\
    \ (i in 2:(length(l)-1)) {\n            if (l[i] > l[i+1]) return(FALSE)\n   \
    \     }\n    } else {\n        for (i in 2:(length(l)-1)) {\n            if (l[i]\
    \ < l[i+1]) return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n", "\n    #\
    \ YOUR CODE HERE\n    # is_increasing returns TRUE if the vector x is monotonically\
    \ increasing; FALSE otherwise.\n    if (is_increasing(l)) {\n        return(TRUE)\n\
    \    }\n    else if (is_decreasing(l)) {\n        return(TRUE)\n    }\n    else\
    \ {\n        return(FALSE)\n    }\n}\n", "\n  # TODO: your code here\n}\n "]
stop_tokens:
- "\n#"
- "\n```"
