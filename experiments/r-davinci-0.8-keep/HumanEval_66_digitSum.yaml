name: HumanEval_66_digitSum
language: r
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\") =>\
  \ 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"helloE\"\
  ) => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\ndigitSum\
  \ <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- digitSum\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('abAB'), 131)){quit('no', 1)}\n\
  \    if(!identical(candidate('abcCd'), 67)){quit('no', 1)}\n    if(!identical(candidate('helloE'),\
  \ 69)){quit('no', 1)}\n    if(!identical(candidate('woArBld'), 131)){quit('no',\
  \ 1)}\n    if(!identical(candidate('aAaaaXa'), 153)){quit('no', 1)}\n    if(!identical(candidate('\
  \ How are yOu?'), 151)){quit('no', 1)}\n    if(!identical(candidate('You arE Very\
  \ Smart'), 327)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  res <- 0\n  for (i in 1:nchar(s)) {\n    char <- strsplit(s, '')[[1]][i]\n\
    \    if (char >= 'A' & char <= 'Z') {\n      res <- res + as.numeric(char)\n \
    \   }\n  }\n  return(res)\n}\n", "\n\tif (nchar(s) == 0) {\n\t\t0\n\t} else {\n\
    \t\tsum(as.numeric(gsub(\"[a-z]\", \"\", s)))\n\t}\n}\n", "\n  d <- 0\n  for (i\
    \ in s) {\n    if (i >= 'A' & i <= 'Z') {\n      d <- d + as.integer(i)\n    }\n\
    \  }\n  return(d)\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\n\
    digitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  total\
    \ <- 0\n  if (length(s) == 0) {\n    return(0)\n  }\n  for (i in 1:length(s))\
    \ {\n    char <- substr(s, i, i)\n    if (char %in% c(\"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"\
    O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"\
    Z\")) {\n      total <- total + as.numeric(char)\n    }\n  }\n  return(total)\n\
    }", "\n  as.numeric(unlist(strsplit(s, \"\"))) %>% sum(., na.rm = TRUE)\n}\n \n\
    digitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\n\
    digitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  if (nchar(s) == 0) return(0)\n\
    \  if (substr(s, 1, 1) %in% LETTERS) {\n    ascii <- as.numeric(substr(s, 1, 1))\n\
    \    if (ascii > 90) ascii -= 32\n    ascii += digitSum(substr(s, 2, nchar(s)))\n\
    \  } else digitSum(substr(s, 2, nchar(s)))\n}\n\ndigitSum(str)\n", "\n  unlist(strsplit(s,\
    \ \"\")) %>% \n    tolower() %>% \n    as.numeric() %>% \n    sum()\n}", "\n \
    \ o <- s%>%\n    strsplit(\"\")%>%\n    unlist()%>%\n    as.character()%>%\n \
    \   toupper()%>%\n    charToRaw()%>%\n    as.numeric()\n  s <- sum(o)\n  return(s)\n\
    }\ndigitSum(s)\n ", "\n  # your code here\n  sum(charToRaw(s)[grep(\"[A-Z]\",s)])\n\
    }", "\n  s %>%\n    strsplit(split = \"\") %>%\n    unlist() %>%\n    stri_trans_toupper()\
    \ %>%\n    stri_trans_general(pattern = \"^[A-Z]$\", replacement = \"\") %>%\n\
    \    as.numeric() %>%\n    sum()\n}\ndigitSum(\"abAB\")\n", "\n  # Get the ascii\
    \ codes of the string characters\n  codes <- charToRaw(s)\n  # Convert the codes\
    \ to integers\n  nums <- as.integer(codes)\n  # Only count the uppercase characters\n\
    \  sum(nums[nums < 91 & nums > 64])\n}\n\ndigitSum(\"\")\ndigitSum(\"abAB\")\n\
    digitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"\
    aAaaaXa\")\n", "\n    return( sum(charToRaw(s) - 64) )\n}\n\nprint(digitSum(\"\
    bbbbA\"))\n", "\n    sum(as.numeric(str_extract_all(s, \"[[:upper:]]\")[[1]]))\n\
    }\n\ndigitSum(\"aAaaaXa\")\n", "\n  sapply(strsplit(s, \"\"), function(x) sum(sapply(x,\
    \ function(x) as.numeric(x)))) %>% as.numeric()\n}\n", "\n  sum(as.numeric(s))\n\
    }\n\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\"\
    )\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  if(is.na(s)){\n    return\
    \ (0)\n  } else {\n    return (sum(as.numeric(s)))\n  }\n}\n", "\n  sum(as.numeric(s))\n\
    }\n\ndigitSum(\"abcCd\")\n", "\n  sum(unlist(strsplit(s, split=\"\")) %in% LETTERS)\n\
    }\n", "\n  sapply(strsplit(s, \"\"), function(x) sum(as.numeric(x) * as.numeric(x\
    \ >= 65 & x <= 90)))\n}\n", "\n  if (nchar(s) == 0) return(0)\n  else if (nchar(s)\
    \ == 1) {\n    if (nchar(gsub(\"[A-Z]\", \"\", s)) == 0) {\n      return(as.numeric(s))\n\
    \    } else {\n      return(0)\n    }\n  } else {\n    s <- substr(s, 1, 1)\n\
    \    if (nchar(gsub(\"[A-Z]\", \"\", s)) == 0) {\n      return(as.numeric(s) +\
    \ digitSum(substr(s, 2, nchar(s))))\n    } else {\n      return(digitSum(substr(s,\
    \ 2, nchar(s))))\n    }\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
