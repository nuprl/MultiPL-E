name: HumanEval_124_valid_date
language: r
prompt: "# You have to write a function which validates a given date string and\n\
  # returns True if the date is valid otherwise False.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# for example: \n# valid_date('03-11-2000') => True\n\
  # valid_date('15-01-2012') => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020')\
  \ => True\n# valid_date('06/04/2020') => False\nvalid_date <- function(date) {"
tests: "test_humaneval <- function() {\ncandidate <- valid_date\n    if(!identical(candidate('03-11-2000'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('15-01-2012'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('04-0-2040'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('06-04-2020'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('01-01-2007'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('03-32-2011'), FALSE)){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('04-31-3000'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('06-06-2005'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('21-31-2000'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('04-12-2003'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('04122003'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('20030412'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('2003-04'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('2003-04-12'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('04-2003'),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # Your code goes here\n  if (date == \"\") {\n    return(FALSE)\n\
    \  }\n  date = as.Date(date, format = \"%m-%d-%Y\")\n  if (is.na(date)) {\n  \
    \  return(FALSE)\n  }\n  return(TRUE)\n}\n\nvalid_date('02-30-2000')\nvalid_date('02-28-2000')\n\
    valid_date('01-03-2019')\nvalid_date('01-03-2001')\nvalid_date('09-01-2019')\n\
    valid_date('12-10-2019')\nvalid_date('01-10-2020')\nvalid_date('01-20-2020')\n",
  "\n  # Your code here\n  date <- strsplit(date, \"-\")\n  date <- date[[1]]\n  date\
    \ <- as.numeric(date)\n  if (date[1] == 2) {\n    if (date[2] > 29 || date[2]\
    \ < 1) {\n      return(FALSE)\n    }\n  } else if (date[1] % 2 == 0) {\n    if\
    \ (date[1] < 1 || date[1] > 12) {\n      return(FALSE)\n    }\n    if (date[2]\
    \ > 30 || date[2] < 1) {\n      return(FALSE)\n    }\n  } else {\n    if (date[1]\
    \ < 1 || date[1] > 12) {\n      return(FALSE)\n    }\n    if (date[2] > 31 ||\
    \ date[2] < 1) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\n", "\n\
    \  date_vec <- unlist(strsplit(date, split = '-'))\n  month <- as.numeric(date_vec[1])\n\
    \  day <- as.numeric(date_vec[2])\n  year <- as.numeric(date_vec[3])\n  if (length(date_vec)\
    \ == 3 &\n      (year == 2020) &\n      ((month == 1 & day <= 31) |\n      (month\
    \ == 2 & day <= 29) |\n      (month == 3 & day <= 31) |\n      (month == 4 & day\
    \ <= 30) |\n      (month == 5 & day <= 31) |\n      (month == 6 & day <= 30) |\n\
    \      (month == 7 & day <= 31) |\n      (month == 8 & day <= 31) |\n      (month\
    \ == 9 & day <= 30) |\n      (month == 10 & day <= 31) |\n      (month == 11 &\
    \ day <= 30) |\n      (month == 12 & day <= 31)) &\n      (month >= 1 & month\
    \ <= 12)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n \
    \ date <- strsplit(date, \"-\")\n  # check the format is mm-dd-yyyy\n  if (length(date)\
    \ != 3) return(FALSE)\n  day <- as.numeric(date[[1]][2])\n  month <- as.numeric(date[[1]][1])\n\
    \  year <- as.numeric(date[[1]][3])\n  if (day < 1 | day > 31) return(FALSE)\n\
    \  if (month < 1 | month > 12) return(FALSE)\n  if (month == 2 & day > 29) return(FALSE)\n\
    \  if (month %in% c(4,6,9,11) & day > 30) return(FALSE)\n  TRUE\n}", "\n  date_regex\
    \ <- '(\\\\d{2})-(\\\\d{2})-(\\\\d{4})'\n  date_matches <- regexpr(date_regex,\
    \ date)\n  if (date_matches == -1) return(FALSE)\n  day <- as.numeric(substr(date,\
    \ date_matches, date_matches + 1))\n  month <- as.numeric(substr(date, date_matches\
    \ + 3, date_matches + 4))\n  year <- as.numeric(substr(date, date_matches + 6,\
    \ date_matches + 9))\n  if (!is.finite(day) || !is.finite(month) || !is.finite(year))\
    \ return(FALSE)\n  if (day < 1 || day > 31 || month < 1 || month > 12 || year\
    \ < 1) return(FALSE)\n  if (month %in% c(1, 3, 5, 7, 8, 10, 12) && day > 31) return(FALSE)\n\
    \  if (month %in% c(4, 6, 9, 11) && day > 30) return(FALSE)\n  if (month == 2\
    \ && day > 29) return(FALSE)\n  TRUE\n}\n", "\n  # Split the date string by '-'\n\
    \  date_vector <- strsplit(date, '-')[[1]]\n  # There should be 3 components\n\
    \  if (length(date_vector) != 3) {\n    return(FALSE)\n  }\n  # Extract month,\
    \ day and year\n  month <- as.numeric(date_vector[1])\n  day <- as.numeric(date_vector[2])\n\
    \  year <- as.numeric(date_vector[3])\n  # Check if month is valid\n  if (month\
    \ < 1 || month > 12) {\n    return(FALSE)\n  }\n  # Check if day is valid for\
    \ each month\n  if (month %in% c(1, 3, 5, 7, 8, 10, 12)) {\n    if (day < 1 ||\
    \ day > 31) {\n      return(FALSE)\n    }\n  } else if (month %in% c(4, 6, 9,\
    \ 11)) {\n    if (day < 1 || day > 30) {\n      return(FALSE)\n    }\n  } else\
    \ if (month == 2) {\n    if (day < 1 || day > 29) {\n      return(FALSE)\n   \
    \ }\n  }\n  # Check if year is valid\n  if (year < 0) {\n    return(FALSE)\n \
    \ }\n  return(TRUE)\n}\n", "\n  if (is.na(date)) {\n    return(FALSE)\n  }\n \
    \ tokens <- strsplit(date, \"[-/]\")[[1]]\n  if (length(tokens) != 3) {\n    return(FALSE)\n\
    \  }\n  mm <- as.numeric(tokens[1])\n  dd <- as.numeric(tokens[2])\n  yyyy <-\
    \ as.numeric(tokens[3])\n  if (mm < 1 || mm > 12) {\n    return(FALSE)\n  }\n\
    \  if (dd < 1) {\n    return(FALSE)\n  }\n  if (mm %in% c(1,3,5,7,8,10,12)) {\n\
    \    if (dd > 31) {\n      return(FALSE)\n    }\n  } else if (mm %in% c(4,6,9,11))\
    \ {\n    if (dd > 30) {\n      return(FALSE)\n    }\n  } else if (mm == 2) {\n\
    \    if (dd > 29) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}", "\n\
    \    if (grepl(\"/\", date)) {\n        return(FALSE)\n    } else {\n        d\
    \ <- as.Date(date, format=\"%m-%d-%Y\")\n        if(is.na(d)){\n            return(FALSE)\n\
    \        } else {\n            return(TRUE)\n        }\n    }\n}", "\n  # Your\
    \ Code Here\n  month <- as.numeric(substr(date, 1, 2))\n  day <- as.numeric(substr(date,\
    \ 4, 5))\n  year <- as.numeric(substr(date, 7, 10))\n  date_check <- as.numeric(substr(date,\
    \ 4, 5))\n  months_days <- c(0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n\
    \  if (month < 1 | month > 12 | day > months_days[month + 1] | day < 1 | year\
    \ > 9999 | year < 0 | length(date) != 10) {\n    return(FALSE)\n  } else {\n \
    \   return(TRUE)\n  }\n}\n", "\n  # Check if the date is in the formate: mm-dd-yyyy.\n\
    \  if (grepl(\"[-]\", date)) {\n    # Split string into vector.\n    vector <-\
    \ strsplit(date, \"-\")[[1]]\n    # Check if the month is between 1 and 12.\n\
    \    if ((as.numeric(vector[1]) > 0) & (as.numeric(vector[1]) < 13)) {\n     \
    \ # Calculate the number of days per month.\n      days_per_month <- c(31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n      # Check if the day is between\
    \ 1 and the maximum number of days in the specific month.\n      if ((as.numeric(vector[2])\
    \ > 0) & (as.numeric(vector[2]) <= days_per_month[as.numeric(vector[1])])) {\n\
    \        # Check if the year is a leap year and has 29 days in the month 2.\n\
    \        if (((as.numeric(vector[3]) %% 4 == 0) & (as.numeric(vector[3]) %% 100\
    \ != 0)) | (as.numeric(vector[3]) %% 400 == 0)) {\n          days_per_month[2]\
    \ <- 29\n        }\n        # Check if the day is between 1 and the maximum number\
    \ of days in the specific month.\n        if ((as.numeric(vector[2]) > 0) & (as.numeric(vector[2])\
    \ <= days_per_month[as.numeric(vector[1])])) {\n          # Check if the year\
    \ is between 0 and 9999.\n          if ((as.numeric(vector[3]) > 0) & (as.numeric(vector[3])\
    \ < 10000)) {\n            # Return True if the date is valid.\n            return(TRUE)\n\
    \          }\n        }\n      }\n    }\n  }\n  # Return False if the date is\
    \ not valid.\n  return(FALSE)\n}\n", "\n  # get individual parts\n  m <- str_extract(date,\
    \ \"^\\\\d{2}\")\n  d <- str_extract(date, \"\\\\d{2}$\")\n  y <- str_extract(date,\
    \ \"\\\\d{4}$\")\n  if (str_length(date) == 0 | str_detect(date, \"/\")) {\n \
    \   return(FALSE)\n  }\n  # check month is between 1 and 12\n  if (m > 12 | m\
    \ < 1) {\n    return(FALSE)\n  }\n  # check day is between 1 and 30,31 or 29\n\
    \  if (m %in% c(1,3,5,7,8,10,12)) {\n    if (d > 31 | d < 1) {\n      return(FALSE)\n\
    \    }\n  } else if (m %in% c(4,6,9,11)) {\n    if (d > 30 | d < 1) {\n      return(FALSE)\n\
    \    }\n  } else if (m == 2) {\n    if (d > 29 | d < 1) {\n      return(FALSE)\n\
    \    }\n  }\n  # check year is 4 digits\n  if (str_length(y) != 4) {\n    return(FALSE)\n\
    \  }\n  return(TRUE)\n}", "\n  # your code here\n}\n", "\n  date_split <- unlist(strsplit(date,\
    \ split=\"-\"))\n  valid_date_format <- length(date_split) == 3\n  valid_date_format\
    \ <- valid_date_format & (nchar(date_split[1]) == 2)\n  valid_date_format <- valid_date_format\
    \ & (nchar(date_split[2]) == 2)\n  valid_date_format <- valid_date_format & (nchar(date_split[3])\
    \ == 4)\n  valid_date_format <- valid_date_format & is.numeric(date_split)\n \
    \ valid_date_format <- valid_date_format & (date_split[1] %in% 1:12)\n  valid_date_format\
    \ <- valid_date_format & (date_split[2] %in% 1:31)\n  valid_date_format <- valid_date_format\
    \ & (date_split[3] %in% 2020:2040)\n  valid_date_format\n}\n ", "\n  # your code\
    \ here\n}", "\n    #your code here\n    # check if dates is not empty\n    if\
    \ (is.null(date) | is.empty(date)){\n        return(FALSE)\n    } else {\n   \
    \     # check format for given date\n        if (!grepl(\"^\\\\d{2}-\\\\d{2}-\\\
    \\d{4}$\", date)){\n            return(FALSE)\n        } else {\n            #\
    \ split string into components\n            date_components <- strsplit(date,\
    \ \"-\")\n            # extract date components\n            month <- date_components[[1]][1]\n\
    \            day <- date_components[[1]][2]\n            year <- date_components[[1]][3]\n\
    \            # convert to integer\n            month <- as.integer(month)\n  \
    \          day <- as.integer(day)\n            year <- as.integer(year)\n    \
    \        # check if year is leap\n            leap <- (year %% 4 == 0 & year %%\
    \ 100 != 0) | year %% 400 == 0\n            # check if month is greater than 12\n\
    \            if (month > 12){\n                return(FALSE)\n            } else\
    \ {\n                # check if day is greater than 31 or lower than 1 or greater\
    \ than 30 or greater than 29 or greater than 28 or lower than 1\n            \
    \    if (month %in% c(1,3,5,7,8,10,12) & !(day > 0 & day < 32)){\n           \
    \         return(FALSE)\n                } else if (month %in% c(4,6,9,11) & !(day\
    \ > 0 & day < 31)){\n                    return(FALSE)\n                } else\
    \ if (month == 2 & leap & !(day > 0 & day < 30)){\n                    return(FALSE)\n\
    \                } else if (month == 2 & !leap & !(day > 0 & day < 29)){\n   \
    \                 return(FALSE)\n                } else {\n                  \
    \  return(TRUE)\n                }\n            }\n        }\n    }\n}\n", "\n\
    \  if(length(grep('^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$', date))\
    \ == 0) {\n    return(FALSE)\n  }\n  else {\n    date <- as.Date(date, format\
    \ = '%m-%d-%Y')\n    month <- as.numeric(format(date, '%m'))\n    day <- as.numeric(format(date,\
    \ '%d'))\n    if(month == 2) {\n      if(day <= 0 || day > 29) {\n        return(FALSE)\n\
    \      }\n    }\n    else if(month %in% c(4, 6, 9, 11)) {\n      if(day <= 0 ||\
    \ day > 30) {\n        return(FALSE)\n      }\n    }\n    else {\n      if(day\
    \ <= 0 || day > 31) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n\
    \  }\n}\n", "\n  if (length(date) == 0) return(FALSE)\n  date <- strsplit(date,\
    \ \"-\")[[1]]\n  if (length(date) != 3) return(FALSE)\n  if (!(length(date[1])\
    \ == 2 & length(date[2]) == 2 & length(date[3]) == 4)) return(FALSE)\n  year <-\
    \ as.numeric(date[3])\n  month <- as.numeric(date[1])\n  day <- as.numeric(date[2])\n\
    \  if (month > 12 | month < 1) return(FALSE)\n  else if (month %in% c(1,3,5,7,8,10,12))\
    \ {\n    if (day > 31 | day < 1) return(FALSE)\n  } else if (month %in% c(4,6,9,11))\
    \ {\n    if (day > 30 | day < 1) return(FALSE)\n  } else if (month == 2) {\n \
    \   if (day > 29 | day < 1) return(FALSE)\n  }\n  return(TRUE)\n}\nprint(valid_date('03-11-2000'))\n\
    print(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\n\
    print(valid_date('06/04/2020'))\n", "\n  if (date == \"\") {return(FALSE)}\n \
    \ if (grepl(\"/\", date)) {return(FALSE)}\n  if (grepl(\"-\", date)) {\n    date_list\
    \ <- unlist(strsplit(date, split = \"-\", fixed = T))\n    day <- as.numeric(date_list[2])\n\
    \    month <- as.numeric(date_list[1])\n    if (month %in% c(1,3,5,7,8,10,12))\
    \ {\n      if (day < 1 | day > 31) {return(FALSE)}\n    } else if (month %in%\
    \ c(4,6,9,11)) {\n      if (day < 1 | day > 30) {return(FALSE)}\n    } else if\
    \ (month == 2) {\n      if (day < 1 | day > 29) {return(FALSE)}\n    } else {return(FALSE)}\n\
    \    if (month < 1 | month > 12) {return(FALSE)}\n    return(TRUE)\n  } else {return(FALSE)}\n\
    }", "\n    pat <- '^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$'\n  \
    \  if(!grepl(pat, date))\n        return(FALSE)\n    date_split <- strsplit(date,\
    \ '-')[[1]]\n    month <- as.numeric(date_split[1])\n    day <- as.numeric(date_split[2])\n\
    \    if(month < 1 || month > 12)\n        return(FALSE)\n    if(month %in% c(1,\
    \ 3, 5, 7, 8, 10, 12)) {\n        if(day < 1 || day > 31)\n            return(FALSE)\n\
    \    } else if(month %in% c(4, 6, 9, 11)) {\n        if(day < 1 || day > 30)\n\
    \            return(FALSE)\n    } else {\n        if(day < 1 || day > 29)\n  \
    \          return(FALSE)\n    }\n    return(TRUE)\n}\n ", "\n  if (str_count(date,\
    \ '-') != 2) {\n    return(FALSE)\n  } else {\n    split_date <- str_split(date,\
    \ '-')\n    month <- as.numeric(split_date[[1]][1])\n    day <- as.numeric(split_date[[1]][2])\n\
    \    year <- as.numeric(split_date[[1]][3])\n    if (month < 1 | month > 12) {\n\
    \      return(FALSE)\n    } else if (day < 1 | day > 31) {\n      return(FALSE)\n\
    \    } else if (month == 2 & day > 29) {\n      return(FALSE)\n    } else if (month\
    \ %in% c(4,6,9,11) & day > 30) {\n      return(FALSE)\n    } else {\n      return(TRUE)\n\
    \    }\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
