name: HumanEval_108_count_nums
language: r
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n#\
  \ >>> count_nums([1, 1, 2]) == 3\ncount_nums <- function(arr) {"
tests: "test_humaneval <- function() {\ncandidate <- count_nums\n    if(!identical(candidate(c()),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate(c(-1, -2, 0)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 100, 98, -7, 1, -1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(12, 23,\
  \ 34, -45, -56, 0)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1)), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    return (length(arr[arr > 0]))\n}\n", "\n  ## NOTE: Write your\
    \ solution inside this function\n  return(0)\n}\n", "\n\t\n}\n", "\n  # Your code\
    \ here\n}\n", "\n  length(arr[apply(matrix(arr), 1, function(x) sum(abs(x)) >\
    \ 0)])\n}\n", "\n  arr[abs(arr) != arr] <- arr[abs(arr) != arr] * -1\n  sum(abs(arr))\
    \ > 0\n}\n", "\n  # Your code here\n}\n", "\n  length(arr[sapply(arr, function(x)\
    \ {\n    abs(x %/% 100) + (abs(x %% 100) %/% 10) + (abs(x %% 10)) > 0\n  })])\n\
    }\n", "\n  if (length(arr) == 0) return(0)\n  if (sum(sign(arr)) > 0) return(length(arr))\n\
    \  count_nums(arr[arr > 0])\n}\n\n", "\n  sum(ifelse(Reduce(`+`, abs(arr), accumulate\
    \ = TRUE) > 0, 1, 0))\n}\n", "\n  # your code here\n}\n", "\n    sum(ifelse(abs(arr)\
    \ %/% 10 == 0, 1, 0))\n}\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x)\
    \ ifelse(sum(x) > 0, 1, 0)))\n}\n", "\n  sum(apply(matrix(arr), 1, function(x)\
    \ sum(sign(x) * abs(floor(log10(abs(x))))) + 1))\n}\n", "\n    # Fill in your\
    \ code here!\n}\n", "\n  0\n}\n", "\n    sum(\n        abs(arr) %/% 10 + abs(arr)\
    \ %% 10 > 0\n    )\n}", "\n  return(sum(c(sapply(arr, sum), apply(arr, 2, sign))))\n\
    }\n", "\n    counter <- 0\n    for (i in arr) {\n        sum <- 0\n        if\
    \ (i < 0) {\n            sum <- sum + abs(i)\n        } else {\n            sum\
    \ <- sum + i\n        }\n        if (sum > 0) {\n            counter <- counter\
    \ + 1\n        }\n    }\n    return(counter)\n}", "\n  return (sum(abs(mod(arr,\
    \ 10)) + floor(abs(arr) / 10)))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
