name: HumanEval_31_is_prime
language: r
prompt: "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n\
  # False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n# >>> is_prime(13441)\n\
  # True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n# False\n# >>> is_prime(1)\n\
  # False\nis_prime <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- is_prime\n    if(!identical(candidate(6),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(101), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate(11), TRUE)){quit('no', 1)}\n    if(!identical(candidate(13441),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(61), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate(4), FALSE)){quit('no', 1)}\n    if(!identical(candidate(1),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(5), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate(11), TRUE)){quit('no', 1)}\n    if(!identical(candidate(17),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate(85), FALSE)){quit('no', 1)}\n\
  \    if(!identical(candidate(77), FALSE)){quit('no', 1)}\n    if(!identical(candidate(255379),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  \n  if (n <= 1) {return(FALSE)}\n  if (n <= 3) {return(TRUE)}\n\
    \  if (n %% 2 == 0 | n %% 3 == 0) {return(FALSE)}\n  \n  i <- 5\n  while (i*i\
    \ <= n) {\n    if (n %% i == 0 | n %% (i+2) == 0) {return(FALSE)}\n    i <- i\
    \ + 6\n  }\n  return(TRUE)\n}\n", "\n  if (n == 1) {\n    return(FALSE)\n  } else\
    \ if (n == 2) {\n    return(TRUE)\n  } else {\n    for (i in 2:(n-1)) {\n    \
    \  if (n %% i == 0) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n\
    \  }\n}\n", "\n  if (n < 2) {\n    return(FALSE)\n  } else {\n    for (i in seq(2,(n-1),1))\
    \ {\n      if (n %% i == 0) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n\
    \  }\n}\n", "\n    # n is prime iff its factors are 1 and n itself\n    factors\
    \ <- factor(n)\n    factors <- as.numeric(factors)\n    factors <- unique(factors)\n\
    \    if(length(factors) == 2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\n\nn <- scan(n=1)\nis_prime(n)\n", "\n  if (n <= 1) {\n    return(FALSE)\n\
    \  }\n  if (n == 2) {\n    return(TRUE)\n  }\n  for (i in 2:(n-1)) {\n    if (n\
    \ %% i == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n", "\n  if\
    \ (n == 1) {\n    return(FALSE)\n  }\n  for (i in 2:(n-1)) {\n    if (n %% i ==\
    \ 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n", "\n  if (n <= 1)\
    \ {\n    return(FALSE)\n  }\n  for (i in 2:(n-1)) {\n    if (n %% i == 0) {\n\
    \      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\nis_prime(6)\n", "\n  if (n\
    \ <= 1) {\n    return(FALSE)\n  }\n  for (i in 2:(n-1)) {\n    if (n %% i == 0)\
    \ {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}", "\n  for (i in seq(2,\
    \ n-1)) {\n    if (n %% i == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n\
    }\n", "\n  # You fill this out!\n}\n", "\n\tif (n <= 1) {\n\t\treturn(FALSE)\n\
    \t}\n\tif (n == 2) {\n\t\treturn(TRUE)\n\t}\n\tif (n %% 2 == 0) {\n\t\treturn(FALSE)\n\
    \t}\n\tfor (i in seq(3, (n-1))) {\n\t\tif (n %% i == 0) {\n\t\t\treturn(FALSE)\n\
    \t\t}\n\t}\n\treturn(TRUE)\n}\n", "\n    # Your code here\n    if (n <= 1) {\n\
    \        return(FALSE)\n    }\n    for (i in 2:(n-1)) {\n        if (n %% i ==\
    \ 0) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n", "\n\
    \    for (i in 2:(n-1)) {\n        if (n %% i == 0) {\n            return(FALSE)\n\
    \        }\n    }\n    if (n == 1) {\n        return(FALSE)\n    }\n    else {\n\
    \        return(TRUE)\n    }\n}\n", "\n    if (n == 1) {\n        return(FALSE)\n\
    \    }\n    else {\n        for (i in 2:(n-1)) {\n            if (n %% i == 0)\
    \ {\n                return(FALSE)\n            }\n        }\n        return(TRUE)\n\
    \    }\n}\n", "\n  if (n == 1) {\n    return(FALSE)\n  }\n  for (d in seq(2, (n\
    \ - 1))) {\n    if (n %% d == 0) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n\
    }\n", "\n    if (n == 1) {\n        return(FALSE)\n    }\n    if (n == 2) {\n\
    \        return(TRUE)\n    }\n    n_factors <- 0\n    for (i in 1:n) {\n     \
    \   if (n %% i == 0) {\n            n_factors <- n_factors + 1\n        }\n  \
    \  }\n    return(n_factors == 2)\n}", "\n  if (n < 2) {\n    return(FALSE)\n \
    \ }\n  for (i in 2:(n-1)) {\n    if (n %% i == 0) {\n      return(FALSE)\n   \
    \ }\n  }\n  return(TRUE)\n}\n\nprint(is_prime(6))\nprint(is_prime(101))\nprint(is_prime(11))\n\
    print(is_prime(13441))\nprint(is_prime(61))\nprint(is_prime(4))\nprint(is_prime(1))\n",
  "\n\tif (n < 2) {\n\t\treturn(FALSE)\n\t}\n\t\n\tfor (i in 2:(n-1)) {\n\t\tif (n\
    \ %% i == 0) {\n\t\t\treturn(FALSE)\n\t\t}\n\t}\n\t\n\treturn(TRUE)\n}\n\nis_prime(6)\n\
    is_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n",
  "\n  if (n == 1) {\n    return(FALSE)\n  } else if (n == 2) {\n    return(TRUE)\n\
    \  } else {\n    for (i in 2:(n-1)) {\n      if (n %% i == 0) {\n        return(FALSE)\n\
    \      }\n    }\n    return(TRUE)\n  }\n}\n", "\n    if (n == 1) {\n        return(FALSE)\n\
    \    } else if (n == 2) {\n        return(TRUE)\n    } else {\n        for (x\
    \ in seq(2, n-1)) {\n            if (n %% x == 0) {\n                return(FALSE)\n\
    \            }\n        }\n        return(TRUE)\n    }\n}"]
stop_tokens:
- "\n#"
- "\n```"
