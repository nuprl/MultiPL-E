name: HumanEval_14_all_prefixes
language: r
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\nall_prefixes <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- all_prefixes\n    if(!identical(candidate(''),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate('asdfgh'), c('a', 'as', 'asd',\
  \ 'asdf', 'asdfg', 'asdfgh'))){quit('no', 1)}\n    if(!identical(candidate('WWW'),\
  \ c('W', 'WW', 'WWW'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  lapply(seq_along(string), function(i) {\n    substr(string, 1,\
    \ i)\n  })\n}\n", "\n    lapply(1:nchar(string), function(i) substr(string, 1,\
    \ i))\n}\n", "\n  return(lapply(seq_along(string), function(i) substr(string,\
    \ 1, i)))\n}\n", "\n    all_prefixes_rec(string, 1, length(string))\n}\n", "\n\
    \  if (string == '') {\n    return('')\n  } else {\n    # Get index of first character\n\
    \    first_idx <- 1\n    # Get index of last character\n    last_idx <- nchar(string)\n\
    \    # Call recursive function\n    return(all_prefixes_recursive(string, first_idx,\
    \ last_idx))\n  }\n}\n\nall_prefixes_recursive <- function(string, first_idx,\
    \ last_idx) {\n  # Base case\n  if (first_idx > last_idx) {\n    return('')\n\
    \  } else {\n    # Recursive call with new first_idx\n    return(paste(substr(string,\
    \ first_idx, last_idx), all_prefixes_recursive(string, first_idx + 1, last_idx),\
    \ sep=''))\n  }\n}\n", "\n  prefixes <- character(length(string))\n  for (i in\
    \ seq_along(string)) {\n    prefixes[i] <- substr(string, 1, i)\n  }\n  return(prefixes)\n\
    }\n", "\n  sapply(1:nchar(string), function(i) substr(string, 1, i))\n}\n", "\n\
    \  unlist(lapply(seq_along(string), function(i) {\n    substring(string, 1, i)\n\
    \  }))\n}\n", "\n  'todo'\n}\n", "\n  s_length <- nchar(string)\n  return(c(substr(string,\
    \ 1, 1), lapply(2:s_length, function(i) substr(string, 1, i))))\n}\n", "\n   \
    \ res <- c()\n    for (i in 1:nchar(string)) {\n        res <- c(res, substr(string,\
    \ 1, i))\n    }\n    return(res)\n}\n", "\n    return(c(unlist(lapply(1:length(string),\
    \ function(x) substr(string, 1, x)))))\n}\n", "\n  ret <- c()\n  for (i in 1:nchar(string))\
    \ {\n    ret <- c(ret, substring(string, 1, i))\n  }\n  return(ret)\n}\n", "\n\
    \    list_of_prefixes <- lapply(1:nchar(string), substr, x = string, start = 1,\
    \ stop = .x)\n    return(list_of_prefixes)\n}\n ", "\n    return(c(substr(string,\
    \ 1, i) for (i in seq(nchar(string))))\n}\n", "\n  prefix_len <- 1:nchar(string)\n\
    \  prefixes <- sapply(prefix_len, substr, x = string, start = 1, stop = .)\n \
    \ return(prefixes)\n}\nall_prefixes('abc')\n", "\n    chars <- strsplit(string,\
    \ '')[[1]]\n    paste(chars, collapse='')\n}", "\n  all_prefixes <- c()\n  length\
    \ <- nchar(string)\n  for (i in seq(1, length)) {\n    all_prefixes <- c(all_prefixes,\
    \ substr(string, 1, i))\n  }\n  return(all_prefixes)\n}\nall_prefixes('abc')\n",
  "\n  prefixes <- c()\n  for (i in 1:length(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  lengths(sapply(seq_along(string),\
    \ function(idx) substr(string, 1, idx)))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
