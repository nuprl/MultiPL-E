name: HumanEval_69_search
language: r
prompt: "# You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n# zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n# The frequency of an integer is the number\
  \ of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n\
  # search([4, 1, 2, 2, 3, 1]) == 2\n# search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n\
  # search([5, 5, 4, 4, 4]) == -1\nsearch <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- search\n    if(!identical(candidate(c(5,\
  \ 5, 5, 5, 1)), 1)){quit('no', 1)}\n    if(!identical(candidate(c(4, 1, 4, 1, 4,\
  \ 4)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(3, 3)), -1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(8, 8, 8, 8, 8, 8, 8, 8)), 8)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(2, 3, 3, 2, 2)), 2)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(3, 2, 8, 2)), 2)){quit('no', 1)}\n    if(!identical(candidate(c(6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)), 1)){quit('no', 1)}\n    if(!identical(candidate(c(8,\
  \ 8, 3, 6, 5, 6, 4)), -1)){quit('no', 1)}\n    if(!identical(candidate(c(6, 9, 6,\
  \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 9, 10, 1, 3)), 1)){quit('no', 1)}\n    if(!identical(candidate(c(6,\
  \ 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)), 5)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1)), 1)){quit('no', 1)}\n    if(!identical(candidate(c(8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)), 4)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3,\
  \ 8, 6, 4, 10)), 2)){quit('no', 1)}\n    if(!identical(candidate(c(1, 6, 10, 1,\
  \ 6, 9, 10, 8, 6, 8, 7, 3)), 1)){quit('no', 1)}\n    if(!identical(candidate(c(9,\
  \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
  \ 8, 10, 9, 4)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(2, 6, 4, 2, 8,\
  \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)), 4)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2,\
  \ 3, 1)), 2)){quit('no', 1)}\n    if(!identical(candidate(c(5, 5, 3, 9, 5, 6, 3,\
  \ 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)), -1)){quit('no', 1)}\n    if(!identical(candidate(c(10)),\
  \ -1)){quit('no', 1)}\n    if(!identical(candidate(c(9, 7, 7, 2, 4, 7, 2, 10, 9,\
  \ 7, 5, 7, 2)), 2)){quit('no', 1)}\n    if(!identical(candidate(c(5, 4, 10, 2, 1,\
  \ 1, 10, 3, 6, 1, 8)), 1)){quit('no', 1)}\n    if(!identical(candidate(c(7, 9, 9,\
  \ 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)), 1)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(3, 10, 10, 9, 2)), -1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  lst <- sort(unique(lst))\n  for (i in seq_along(lst)) {\n    if\
    \ (table(lst)[lst[i]] >= lst[i]) {\n      return(lst[i])\n    }\n  }\n  return(-1)\n\
    }\n", "\n    max(which(lst == table(lst) & table(lst) >= lst))\n}\n", "\n  g =\
    \ max(lst)\n  x = 0\n  for (i in lst) {\n    if (i <= g & x < i) {\n      if (sum(lst\
    \ == i) >= i) {\n        x = i\n      }\n    }\n  }\n  if (x == 0) x = -1\n  return(x)\n\
    }\n", "\n  x <- c()\n  for (i in unique(lst)) {\n    if (sum(lst == i) >= i) x\
    \ <- c(x, i)\n  }\n  return(max(x, na.rm = TRUE))\n}\nsearch(c(4, 1, 2, 2, 3,\
    \ 1))\nsearch(c(1, 2, 2, 3, 3, 3, 4, 4, 4))\nsearch(c(5, 5, 4, 4, 4))\n", "\n\
    \    if (length(lst) == 0)\n        return(-1)\n    max.val <- max(lst)\n    for\
    \ (val in max.val:1) {\n        if (length(which(lst == val)) >= val)\n      \
    \      return(val)\n    }\n    return(-1)\n}", "\n  freq.df <- data.frame(table(lst))\
    \ # create a data frame with the frequency of each number\n  # freq.df\n  freq.df\
    \ <- freq.df[order(freq.df$Freq, decreasing = TRUE), ] # descending order of frequency\n\
    \  # freq.df\n  for (i in 1:length(freq.df$Freq)) {\n    if (freq.df$Freq[i] >=\
    \ freq.df$Var1[i]) {\n      return(freq.df$Var1[i])\n    }\n  }\n  return(-1)\n\
    }\n", "\n    if (length(lst) == 0) return(-1)\n    s <- sort(lst, decreasing =\
    \ TRUE)\n    n <- table(s)\n    t <- names(n)\n    p <- as.numeric(t)\n    q <-\
    \ as.numeric(n)\n    for (i in 1:length(t)) {\n        if (p[i] <= q[i]) {\n \
    \           return(p[i])\n        }\n    }\n    return(-1)\n}", "\n    ints <-\
    \ unique(lst)\n    ints <- ints[ints > 0]\n    ints <- ints[table(lst) >= ints]\n\
    \    return(max(ints, na.rm = TRUE))\n}\n", "\n  if (length(lst) == 0) return(-1)\n\
    \  if (length(lst) == 1) return(max(lst))\n  lst <- sort(lst)\n  n <- length(lst)\n\
    \  if (lst[n] > n) return(lst[n])\n  if (lst[n] < n) return(-1)\n  if (lst[n]\
    \ == n) {\n    if (lst[n] == lst[n-1]) return(-1)\n    return(lst[n])\n  }\n}\n\
    search(c(4, 1, 2, 2, 3, 1))\nsearch(c(1, 2, 2, 3, 3, 3, 4, 4, 4))\nsearch(c(5,\
    \ 5, 4, 4, 4))\n", "\n  lst.cnt <- table(lst)\n  idx <- which(lst.cnt >= names(lst.cnt))\n\
    \  if (length(idx) == 0) {\n    ans <- -1\n  } else {\n    ans <- max(names(lst.cnt)[idx])\n\
    \  }\n  return(ans)\n}\n", "\n  lst <- as.character(lst)\n  lst <- sort(table(lst))\n\
    \  lst <- lst[order(lst, decreasing = TRUE)]\n  if (lst[1] >= 2) {\n    for (i\
    \ in seq_along(lst)) {\n      if (lst[i] >= as.numeric(names(lst)[i])) {\n   \
    \     return(as.numeric(names(lst)[i]))\n      }\n    }\n  } else {\n    return(-1)\n\
    \  }\n}\n", "\n    if (is.null(lst)) {\n        return(-1)\n    }\n    return(-1)\n\
    }\n", "\n    my_table <- table(lst)\n    high_freq <- max(my_table)\n    desired_num\
    \ <- 0\n    for (i in 1:length(my_table)) {\n        if (my_table[i] >= i & i\
    \ > desired_num) {\n            desired_num <- i\n        }\n    }\n    if (desired_num\
    \ == 0) {\n        -1\n    } else {\n        desired_num\n    }\n}\n", "\n\t#\
    \ Change the value of this line.\n\t-1\n}", "\n    # Get the highest value in\
    \ the list\n    max_val <- max(lst)\n    # Get the frequency of each integer in\
    \ the list\n    freq <- table(lst)\n    # Create an empty vector to store the\
    \ values that satisfy the condition\n    qualified <- vector()\n    # Use a for\
    \ loop to find the qualified integers\n    for (i in 1:max_val) {\n        if\
    \ (i >= freq[i]) {\n            qualified <- c(qualified, i)\n        }\n    }\n\
    \    # If there is no qualified value, return -1\n    if (length(qualified) ==\
    \ 0) {\n        return(-1)\n    }\n    # Find the value with the highest frequency\n\
    \    max_freq <- max(table(qualified))\n    # Remove duplicate values\n    unique_qualified\
    \ <- unique(qualified)\n    # Find the value with the highest frequency\n    max_val\
    \ <- unique_qualified[which(table(qualified) == max_freq)]\n    # Return the highest\
    \ value\n    return(max(max_val))\n}\n", "\n    require(data.table)\n    counter\
    \ <- as.data.table(table(lst))\n    frequency <- counter[V1 %in% lst, if(all(V2\
    \ >= .(V1))) .(V1), by = .(V1 = V1)]\n    if(length(frequency) > 0) {\n      \
    \  return(frequency[1])\n    } else {\n        return(-1)\n    }\n}", "\n  # Check\
    \ input length\n  if (length(lst) == 0) {\n    return(-1)\n  }\n  # Count occurrence\
    \ of each number\n  counter <- numeric(length(lst))\n  for (i in 1:length(lst))\
    \ {\n    for (j in 1:length(lst)) {\n      if (lst[i] == lst[j]) {\n        counter[i]\
    \ <- counter[i] + 1\n      }\n    }\n  }\n  # Check if any number greater than\
    \ zero has occurrence that is greater than or equal to its frequency\n  for (i\
    \ in 1:length(lst)) {\n    if (lst[i] > 0 && counter[i] >= lst[i]) {\n      return(lst[i])\n\
    \    }\n  }\n  # Return -1 if no such number exist\n  return(-1)\n}\n", "\n  \
    \  # Find the frequency of each element in a vector.\n    # Taken from \"Advanced\
    \ R\" by Hadley Wickham\n    freq_of <- function(v) {\n        u <- unique(v)\n\
    \        u[match(v, u)]\n    }\n    freq <- length(lst) - length(unique(lst))\
    \ + 1\n    frequency <- length(freq_of(lst)) - length(unique(freq_of(lst))) +\
    \ 1\n    if (frequency == 0) {\n        return(-1)\n    }\n    else {\n      \
    \  return(freq)\n    }\n}\n ", "\n  counts <- table(lst)\n  result <- 0\n  for\
    \ (val in lst) {\n    if (counts[val] >= val) {\n      result <- val\n    }\n\
    \  }\n  if (result == 0) {\n    return(-1)\n  } else {\n    return(result)\n \
    \ }\n}\n\ntests <- read.table(\"tests.txt\", sep=\"\\n\", header=FALSE)\ntests[\
    \ , 2] <- sapply(tests[ , 1], search)\ntests\n", "\n  frq <- table(lst)\n  for\
    \ (i in frq) {\n    if (i >= names(frq[i])) {\n      return(names(frq[i]))\n \
    \   }\n  }\n  return(-1)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
