name: HumanEval_81_numerical_letter_grade
language: r
prompt: "# It is the last week of the semester and the teacher has to give the grades\n\
  # to students. The teacher has been making her own algorithm for grading.\n# The\
  \ only problem is, she has lost the code she used for grading.\n# She has given\
  \ you a list of GPAs for some students and you have to write \n# a function that\
  \ can output a list of letter grades using the following table:\n# GPA       | \
  \   Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3  \
  \              A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3\
  \                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3\
  \                C-\n# > 1.0                D+ \n# > 0.7                D \n# >\
  \ 0.0                D-\n# 0.0                E\n# Example:\n# grade_equation([4.0,\
  \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nnumerical_letter_grade <- function(grades)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- numerical_letter_grade\n    if(!identical(candidate(c(4.0,\
  \ 3, 1.7, 2, 3.5)), c('A+', 'B', 'C-', 'C', 'A-'))){quit('no', 1)}\n    if(!identical(candidate(c(1.2)),\
  \ c('D+'))){quit('no', 1)}\n    if(!identical(candidate(c(0.5)), c('D-'))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0.0)), c('E'))){quit('no', 1)}\n    if(!identical(candidate(c(1.0,\
  \ 0.3, 1.5, 2.8, 3.3)), c('D', 'D-', 'C-', 'B', 'B+'))){quit('no', 1)}\n    if(!identical(candidate(c(0.0,\
  \ 0.7)), c('E', 'D-'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    answer <- c()\n    for (i in grades) {\n        if (i >= 4.0)\
    \ {\n            answer <- c(answer, \"A+\")\n        } else if (i >= 3.7) {\n\
    \            answer <- c(answer, \"A\")\n        } else if (i >= 3.3) {\n    \
    \        answer <- c(answer, \"A-\")\n        } else if (i >= 3.0) {\n       \
    \     answer <- c(answer, \"B+\")\n        } else if (i >= 2.7) {\n          \
    \  answer <- c(answer, \"B\")\n        } else if (i >= 2.3) {\n            answer\
    \ <- c(answer, \"B-\")\n        } else if (i >= 2.0) {\n            answer <-\
    \ c(answer, \"C+\")\n        } else if (i >= 1.7) {\n            answer <- c(answer,\
    \ \"C\")\n        } else if (i >= 1.3) {\n            answer <- c(answer, \"C-\"\
    )\n        } else if (i >= 1.0) {\n            answer <- c(answer, \"D+\")\n \
    \       } else if (i >= 0.7) {\n            answer <- c(answer, \"D\")\n     \
    \   } else if (i >= 0.0) {\n            answer <- c(answer, \"D-\")\n        }\
    \ else {\n            answer <- c(answer, \"E\")\n        }\n    }\n    return(answer)\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))", "\n  \n  # use the ifelse\
    \ statement to solve this problem\n  \n}\n", "\n    res <- numeric(length(grades))\n\
    \    for (i in 1:length(grades)) {\n        if (grades[i] == 4.0) {\n        \
    \    res[i] <- 'A+'\n        } else if (grades[i] > 3.7) {\n            res[i]\
    \ <- 'A'\n        } else if (grades[i] > 3.3) {\n            res[i] <- 'A-'\n\
    \        } else if (grades[i] > 3.0) {\n            res[i] <- 'B+'\n        }\
    \ else if (grades[i] > 2.7) {\n            res[i] <- 'B'\n        } else if (grades[i]\
    \ > 2.3) {\n            res[i] <- 'B-'\n        } else if (grades[i] > 2.0) {\n\
    \            res[i] <- 'C+'\n        } else if (grades[i] > 1.7) {\n         \
    \   res[i] <- 'C'\n        } else if (grades[i] > 1.3) {\n            res[i] <-\
    \ 'C-'\n        } else if (grades[i] > 1.0) {\n            res[i] <- 'D+'\n  \
    \      } else if (grades[i] > 0.7) {\n            res[i] <- 'D'\n        } else\
    \ if (grades[i] > 0.0) {\n            res[i] <- 'D-'\n        } else {\n     \
    \       res[i] <- 'E'\n        }\n    }\n    return(res)\n}\nnumerical_letter_grade(c(3.5,\
    \ 3.8, 3.2, 3.3, 3.2, 3.8, 3.9, 4, 3.9, 4, 3.8, 3.4, 3.4, 3.4, 3.8, 3.9, 3.9,\
    \ 3.9, 3.8, 3.8, 3.8, 3.8, 3.8, 3.9, 3.9, 3.9, 3.8, 3.8, 3.5, 3.5, 3.5, 3.5, 3.5,\
    \ 3.5, 3.", "\n  # Write your code here\n}", "\n  grades <- round(grades, 2)\n\
    \  grades[grades > 4.0] <- 4.0\n  grades[grades < 0.0] <- 0.0\n  if (grades <=\
    \ 4.0 & grades > 3.7) {\n    return('A+')\n  } else if (grades <= 3.7 & grades\
    \ > 3.3) {\n    return('A')\n  } else if (grades <= 3.3 & grades > 3.0) {\n  \
    \  return('A-')\n  } else if (grades <= 3.0 & grades > 2.7) {\n    return('B+')\n\
    \  } else if (grades <= 2.7 & grades > 2.3) {\n    return('B')\n  } else if (grades\
    \ <= 2.3 & grades > 2.0) {\n    return('B-')\n  } else if (grades <= 2.0 & grades\
    \ > 1.7) {\n    return('C+')\n  } else if (grades <= 1.7 & grades > 1.3) {\n \
    \   return('C')\n  } else if (grades <= 1.3 & grades > 1.0) {\n    return('C-')\n\
    \  } else if (grades <= 1.0 & grades > 0.7) {\n    return('D+')\n  } else if (grades\
    \ <= 0.7 & grades > 0.0) {\n    return('D')\n  } else if (grades <= 0.0 & grades\
    \ > -0.0) {\n    return('D-')\n  } else if (grades <= -0.0 & grades > -0.0) {\n\
    \    return('E')\n  }\n}\ngrade_equation <- function(grades) {\n  results <- vector('character',\
    \ length(grades))\n  for (i in 1:length(grades)) {\n    results[i] <- numerical_letter_grade(grades[i])\n\
    \  }\n  return(results)\n}", "\n  if (grades >= 4.0) {\n    return ('A+')\n  }\
    \ else if (grades > 3.7 & grades < 4.0) {\n    return ('A')\n  } else if (grades\
    \ > 3.3 & grades < 3.7) {\n    return ('A-')\n  } else if (grades > 3.0 & grades\
    \ < 3.3) {\n    return ('B+')\n  } else if (grades > 2.7 & grades < 3.0) {\n \
    \   return ('B')\n  } else if (grades > 2.3 & grades < 2.7) {\n    return ('B-')\n\
    \  } else if (grades > 2.0 & grades < 2.3) {\n    return ('C+')\n  } else if (grades\
    \ > 1.7 & grades < 2.0) {\n    return ('C')\n  } else if (grades > 1.3 & grades\
    \ < 1.7) {\n    return ('C-')\n  } else if (grades > 1.0 & grades < 1.3) {\n \
    \   return ('D+')\n  } else if (grades > 0.7 & grades < 1.0) {\n    return ('D')\n\
    \  } else if (grades > 0.0 & grades < 0.7) {\n    return ('D-')\n  } else if (grades\
    \ == 0.0) {\n    return ('E')\n  }\n}\n\ngrade_equation <- function(gpas) {\n\
    \  new_grades <- c()\n  for (i in 1:length(gpas)) {\n    if (gpas[i] >= 4.0) {\n\
    \      new_grades[i] <- 'A+'\n    } else if (gpas[i] > 3.7 & gpas[i] < 4.0) {\n\
    \      new_grades[i] <- 'A'\n    } else if (gpas[i] > 3.3 & gpas[i] < 3.7) {\n\
    \      new_grades[i] <- 'A-'\n    } else if (gpas[i] > 3.0 & gpas[i] < 3.3) {\n\
    \      new_grades[i] <- 'B+'\n    } else if (", "\n    for (i in grades) {\n \
    \       if (i == 4.0) {\n            return(c('A+'))\n        } else if (i > 3.7)\
    \ {\n            return(c('A'))\n        } else if (i > 3.3) {\n            return(c('A-'))\n\
    \        } else if (i > 3.0) {\n            return(c('B+'))\n        } else if\
    \ (i > 2.7) {\n            return(c('B'))\n        } else if (i > 2.3) {\n   \
    \         return(c('B-'))\n        } else if (i > 2.0) {\n            return(c('C+'))\n\
    \        } else if (i > 1.7) {\n            return(c('C'))\n        } else if\
    \ (i > 1.3) {\n            return(c('C-'))\n        } else if (i > 1.0) {\n  \
    \          return(c('D+'))\n        } else if (i > 0.7) {\n            return(c('D'))\n\
    \        } else if (i > 0.0) {\n            return(c('D-'))\n        } else if\
    \ (i == 0.0) {\n            return(c('E'))\n        }\n    }\n}\nnumerical_letter_grade(c(4.0,\
    \ 3, 1.7, 2, 3.5))\n", "\n    letter_grade <- numeric(length(grades))\n    for\
    \ (i in 1:length(grades)) {\n        if (grades[i] >= 4.0) {\n            letter_grade[i]\
    \ <- \"A+\"\n        } else if (grades[i] >= 3.7) {\n            letter_grade[i]\
    \ <- \"A\"\n        } else if (grades[i] >= 3.3) {\n            letter_grade[i]\
    \ <- \"A-\"\n        } else if (grades[i] >= 3.0) {\n            letter_grade[i]\
    \ <- \"B+\"\n        } else if (grades[i] >= 2.7) {\n            letter_grade[i]\
    \ <- \"B\"\n        } else if (grades[i] >= 2.3) {\n            letter_grade[i]\
    \ <- \"B-\"\n        } else if (grades[i] >= 2.0) {\n            letter_grade[i]\
    \ <- \"C+\"\n        } else if (grades[i] >= 1.7) {\n            letter_grade[i]\
    \ <- \"C\"\n        } else if (grades[i] >= 1.3) {\n            letter_grade[i]\
    \ <- \"C-\"\n        } else if (grades[i] >= 1.0) {\n            letter_grade[i]\
    \ <- \"D+\"\n        } else if (grades[i] >= 0.7) {\n            letter_grade[i]\
    \ <- \"D\"\n        } else if (grades[i] >= 0.0) {\n            letter_grade[i]\
    \ <- \"D-\"\n        } else {\n            letter_grade[i] <- \"E\"\n        }\n\
    \    }\n    return(letter_grade)\n}", "\n  letter_grades <- c()\n  for (grade\
    \ in grades) {\n    if (grade >= 4.0) {\n      letter_grades <- c(letter_grades,\
    \ \"A+\")\n    } else if (grade >= 3.7) {\n      letter_grades <- c(letter_grades,\
    \ \"A\")\n    } else if (grade >= 3.3) {\n      letter_grades <- c(letter_grades,\
    \ \"A-\")\n    } else if (grade >= 3.0) {\n      letter_grades <- c(letter_grades,\
    \ \"B+\")\n    } else if (grade >= 2.7) {\n      letter_grades <- c(letter_grades,\
    \ \"B\")\n    } else if (grade >= 2.3) {\n      letter_grades <- c(letter_grades,\
    \ \"B-\")\n    } else if (grade >= 2.0) {\n      letter_grades <- c(letter_grades,\
    \ \"C+\")\n    } else if (grade >= 1.7) {\n      letter_grades <- c(letter_grades,\
    \ \"C\")\n    } else if (grade >= 1.3) {\n      letter_grades <- c(letter_grades,\
    \ \"C-\")\n    } else if (grade >= 1.0) {\n      letter_grades <- c(letter_grades,\
    \ \"D+\")\n    } else if (grade >= 0.7) {\n      letter_grades <- c(letter_grades,\
    \ \"D\")\n    } else if (grade >= 0.0) {\n      letter_grades <- c(letter_grades,\
    \ \"D-\")\n    } else {\n      letter_grades <- c(letter_grades, \"E\")\n    }\n\
    \  }\n  return(letter_grades)\n}\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))",
  "\n  # You can add code here.\n  # The input argument grades is a list of numerical\
    \ grade.\n  # Return a list of letter grades as a character vector.\n  for (i\
    \ in 1:length(grades)) {\n    if (grades[i] == 4.0) {\n      grades[i] <- \"A+\"\
    \n    } else if (grades[i] > 3.7) {\n      grades[i] <- \"A\"\n    } else if (grades[i]\
    \ > 3.3) {\n      grades[i] <- \"A-\"\n    } else if (grades[i] > 3.0) {\n   \
    \   grades[i] <- \"B+\"\n    } else if (grades[i] > 2.7) {\n      grades[i] <-\
    \ \"B\"\n    } else if (grades[i] > 2.3) {\n      grades[i] <- \"B-\"\n    } else\
    \ if (grades[i] > 2.0) {\n      grades[i] <- \"C+\"\n    } else if (grades[i]\
    \ > 1.7) {\n      grades[i] <- \"C\"\n    } else if (grades[i] > 1.3) {\n    \
    \  grades[i] <- \"C-\"\n    } else if (grades[i] > 1.0) {\n      grades[i] <-\
    \ \"D+\"\n    } else if (grades[i] > 0.7) {\n      grades[i] <- \"D\"\n    } else\
    \ if (grades[i] > 0.0) {\n      grades[i] <- \"D-\"\n    } else {\n      grades[i]\
    \ <- \"E\"\n    }\n  }\n  return(grades)\n}\n\na <- numerical_letter_grade(4.0,\
    \ 3, 1.7, 2, 3.5)\nb <- c(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nidentical(a,\
    \ b)\n", "\n  for (i in 1:length(grades)) {\n    if (grades[i] > 4.0) {\n    \
    \  grades[i] <- 'E'\n    } else if (grades[i] > 3.7) {\n      grades[i] <- 'A+'\n\
    \    } else if (grades[i] > 3.3) {\n      grades[i] <- 'A'\n    } else if (grades[i]\
    \ > 3.0) {\n      grades[i] <- 'A-'\n    } else if (grades[i] > 2.7) {\n     \
    \ grades[i] <- 'B+'\n    } else if (grades[i] > 2.3) {\n      grades[i] <- 'B'\n\
    \    } else if (grades[i] > 2.0) {\n      grades[i] <- 'B-'\n    } else if (grades[i]\
    \ > 1.7) {\n      grades[i] <- 'C+'\n    } else if (grades[i] > 1.3) {\n     \
    \ grades[i] <- 'C'\n    } else if (grades[i] > 1.0) {\n      grades[i] <- 'C-'\n\
    \    } else if (grades[i] > 0.7) {\n      grades[i] <- 'D+'\n    } else if (grades[i]\
    \ > 0.0) {\n      grades[i] <- 'D'\n    } else if (grades[i] == 0.0) {\n     \
    \ grades[i] <- 'D-'\n    } else {\n      grades[i] <- 'E'\n    }\n  }\n  return(grades)\n\
    }\nnumerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5))\n", "\n    if (grades < 1.3)\
    \ {\n        return('E')\n    } else if (grades < 1.7) {\n        return('D-')\n\
    \    } else if (grades < 2.0) {\n        return('D')\n    } else if (grades <\
    \ 2.3) {\n        return('D+')\n    } else if (grades < 2.7) {\n        return('C-')\n\
    \    } else if (grades < 3.0) {\n        return('C')\n    } else if (grades <\
    \ 3.3) {\n        return('C+')\n    } else if (grades < 3.7) {\n        return('B-')\n\
    \    } else if (grades < 4.0) {\n        return('B')\n    } else {\n        return('A+')\n\
    \    }\n}\n\ngrade_equation <- function(grades) {\n    grades <- lapply(grades,\
    \ numerical_letter_grade)\n    return(grades)\n}\n\ngrade_equation(c(4.0, 3, 1.7,\
    \ 2, 3.5))\n", "\n  list_grades <- numeric(length(grades))\n  list_grades[grades\
    \ >= 4.0] <- 'A+'\n  list_grades[grades > 3.7 & grades < 4.0] <- 'A'\n  list_grades[grades\
    \ > 3.3 & grades <= 3.7] <- 'A-'\n  list_grades[grades > 3.0 & grades <= 3.3]\
    \ <- 'B+'\n  list_grades[grades > 2.7 & grades <= 3.0] <- 'B'\n  list_grades[grades\
    \ > 2.3 & grades <= 2.7] <- 'B-'\n  list_grades[grades > 2.0 & grades <= 2.3]\
    \ <- 'C+'\n  list_grades[grades > 1.7 & grades <= 2.0] <- 'C'\n  list_grades[grades\
    \ > 1.3 & grades <= 1.7] <- 'C-'\n  list_grades[grades > 1.0 & grades <= 1.3]\
    \ <- 'D+'\n  list_grades[grades > 0.7 & grades <= 1.0] <- 'D'\n  list_grades[grades\
    \ > 0.0 & grades <= 0.7] <- 'D-'\n  list_grades[grades == 0.0] <- 'E'\n  return(list_grades)\n\
    }\n ", "\n  grades <- as.numeric(grades)\n  grades <- round(grades, digits = 1)\n\
    \  levels <- seq(from = 4.0, to = 0.0, by = -0.3)\n  letters <- c(\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\")\n  factor(grades, levels = levels, labels = letters)\n}\nlibrary(assertthat)\n\
    assert_that(numerical_letter_grade(c(4.0, 3, 1.7, 2, 3.5)), equals(c(\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\")))\n", "\n  # apply() is a very useful function in\
    \ R. It takes a function as the first\n  # argument and then applies that function\
    \ to every element of a vector that\n  # you provide as the second argument.\n\
    \  # In this case we provide the grades vector as the second argument and an\n\
    \  # anonymous function (a function that we don't need to name) that returns\n\
    \  # the letter grade (the A+/A/A-/etc.) for each grade.\n  return(apply(grades,\
    \ 1, function(g) if (g > 3.7) {\n    return('A+')\n  } else if (g > 3.3) {\n \
    \   return('A')\n  } else if (g > 3.0) {\n    return('A-')\n  } else if (g > 2.7)\
    \ {\n    return('B+')\n  } else if (g > 2.3) {\n    return('B')\n  } else if (g\
    \ > 2.0) {\n    return('B-')\n  } else if (g > 1.7) {\n    return('C+')\n  } else\
    \ if (g > 1.3) {\n    return('C')\n  } else if (g > 1.0) {\n    return('C-')\n\
    \  } else if (g > 0.7) {\n    return('D+')\n  } else if (g > 0.0) {\n    return('D')\n\
    \  } else if (g == 0.0) {\n    return('D-')\n  } else {\n    return('E')\n  }))\n\
    }", "\n  letter_grades <- letters[1:7]\n  letter_grades[1] <- 'A+'\n  letter_grades[2]\
    \ <- 'A'\n  letter_grades[3] <- 'A-'\n  letter_grades[4] <- 'B+'\n  letter_grades[5]\
    \ <- 'B'\n  letter_grades[6] <- 'B-'\n  letter_grades[7] <- 'C+'\n  letter_grades[8]\
    \ <- 'C'\n  letter_grades[9] <- 'C-'\n  letter_grades[10] <- 'D+'\n  letter_grades[11]\
    \ <- 'D'\n  letter_grades[12] <- 'D-'\n  letter_grades[13] <- 'E'\n  letter_grades\
    \ <- letter_grades[13:1]\n  grades_to_letters <- vector(mode = 'character', length\
    \ = length(grades))\n  for (i in 1:length(grades)) {\n    if (grades[i] < 0.7)\
    \ {\n      grades_to_letters[i] <- letter_grades[1]\n    } else if (grades[i]\
    \ < 1.0) {\n      grades_to_letters[i] <- letter_grades[2]\n    } else if (grades[i]\
    \ < 1.3) {\n      grades_to_letters[i] <- letter_grades[3]\n    } else if (grades[i]\
    \ < 1.7) {\n      grades_to_letters[i] <- letter_grades[4]\n    } else if (grades[i]\
    \ < 2.0) {\n      grades_to_letters[i] <- letter_grades[5]\n    } else if (grades[i]\
    \ < 2.3) {\n      grades_to_letters[i] <- letter_grades[6]\n    } else if (grades[i]\
    \ < 2.7) {\n      grades_to_letters[i] <- letter_grades[7]\n    } else if (grades[i]\
    \ < 3.0) {\n      grades_to_letters[i] <- letter_grades[8]\n    } else if (grades[i]\
    \ < 3.3) {\n      grades_to_letters[i] <- letter_", "\n    grade <- ''\n    for\
    \ (i in 1:length(grades)) {\n        if (grades[i] == 4.0) {\n            grade\
    \ <- c(grade, 'A+')\n        } else if (grades[i] >= 3.7) {\n            grade\
    \ <- c(grade, 'A')\n        } else if (grades[i] >= 3.3) {\n            grade\
    \ <- c(grade, 'A-')\n        } else if (grades[i] >= 3.0) {\n            grade\
    \ <- c(grade, 'B+')\n        } else if (grades[i] >= 2.7) {\n            grade\
    \ <- c(grade, 'B')\n        } else if (grades[i] >= 2.3) {\n            grade\
    \ <- c(grade, 'B-')\n        } else if (grades[i] >= 2.0) {\n            grade\
    \ <- c(grade, 'C+')\n        } else if (grades[i] >= 1.7) {\n            grade\
    \ <- c(grade, 'C')\n        } else if (grades[i] >= 1.3) {\n            grade\
    \ <- c(grade, 'C-')\n        } else if (grades[i] >= 1.0) {\n            grade\
    \ <- c(grade, 'D+')\n        } else if (grades[i] >= 0.7) {\n            grade\
    \ <- c(grade, 'D')\n        } else if (grades[i] >= 0.0) {\n            grade\
    \ <- c(grade, 'D-')\n        } else {\n            grade <- c(grade, 'E')\n  \
    \      }\n    }\n    return(grade)\n}\n\nnumerical_letter_grade(c(4.0, 3, 1.7,\
    \ 2, 3.5))\n", "\n  grade <- c()\n  for (i in 1:length(grades)) {\n    if (grades[i]\
    \ < 0) grade[i] <- \"E\"\n    else if (grades[i] < 0.7) grade[i] <- \"D-\"\n \
    \   else if (grades[i] < 1) grade[i] <- \"D+\"\n    else if (grades[i] < 1.3)\
    \ grade[i] <- \"D\"\n    else if (grades[i] < 1.7) grade[i] <- \"C-\"\n    else\
    \ if (grades[i] < 2) grade[i] <- \"C+\"\n    else if (grades[i] < 2.3) grade[i]\
    \ <- \"C\"\n    else if (grades[i] < 2.7) grade[i] <- \"B-\"\n    else if (grades[i]\
    \ < 3) grade[i] <- \"B+\"\n    else if (grades[i] < 3.3) grade[i] <- \"B\"\n \
    \   else if (grades[i] < 3.7) grade[i] <- \"A-\"\n    else if (grades[i] <= 4)\
    \ grade[i] <- \"A+\"\n  }\n  return(grade)\n}\nnumerical_letter_grade(c(4.0, 3,\
    \ 1.7, 2, 3.5))\n", "\n  if (grades > 4.0) {\n    \"A+\"\n  } else if (grades\
    \ > 3.7) {\n    \"A\"\n  } else if (grades > 3.3) {\n    \"A-\"\n  } else if (grades\
    \ > 3.0) {\n    \"B+\"\n  } else if (grades > 2.7) {\n    \"B\"\n  } else if (grades\
    \ > 2.3) {\n    \"B-\"\n  } else if (grades > 2.0) {\n    \"C+\"\n  } else if\
    \ (grades > 1.7) {\n    \"C\"\n  } else if (grades > 1.3) {\n    \"C-\"\n  } else\
    \ if (grades > 1.0) {\n    \"D+\"\n  } else if (grades > 0.7) {\n    \"D\"\n \
    \ } else if (grades > 0.0) {\n    \"D-\"\n  } else {\n    \"E\"\n  }\n}\n\nnumerical_letter_grade(4.0)\n\
    numerical_letter_grade(3.7)\nnumerical_letter_grade(3.3)\nnumerical_letter_grade(3.0)\n\
    numerical_letter_grade(2.7)\nnumerical_letter_grade(2.3)\nnumerical_letter_grade(2.0)\n\
    numerical_letter_grade(1.7)\nnumerical_letter_grade(1.3)\nnumerical_letter_grade(1.0)\n\
    numerical_letter_grade(0.7)\nnumerical_letter_grade(0.0)\nnumerical_letter_grade(0.00)\n\
    \nnumerical_letter_grade(4.1)\nnumerical_letter_grade(3.6)\nnumerical_letter_grade(3.2)\n\
    numerical_letter_grade(2.9)\nnumerical_letter_grade(2.6)\nnumerical_letter_grade(2.2)\n\
    numerical_letter_grade(1.9)\nnumerical_letter_grade(1.6)\nnumer", "\n  grade_values\
    \ <- c(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0)\n  grade_letters\
    \ <- c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"\
    D+\", \"D\", \"D-\", \"E\")\n  letter_grades <- rep(\"\", length(grades))\n  for\
    \ (i in 1:length(grades)) {\n    for (j in 1:length(grade_values)) {\n      if\
    \ (grades[i] >= grade_values[j]) {\n        letter_grades[i] <- grade_letters[j]\n\
    \        break\n      }\n    }\n  }\n  return(letter_grades)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
