name: HumanEval_63_fibfib
language: r
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nfibfib <- function(n)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- fibfib\n    if(!identical(candidate(2),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(1), 0)){quit('no', 1)}\n    if(!identical(candidate(5),\
  \ 4)){quit('no', 1)}\n    if(!identical(candidate(8), 24)){quit('no', 1)}\n    if(!identical(candidate(10),\
  \ 81)){quit('no', 1)}\n    if(!identical(candidate(12), 274)){quit('no', 1)}\n \
  \   if(!identical(candidate(14), 927)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    fibfib <- c(0,0,1)\n    for (i in seq(3,n)) {\n        fibfib[i+1]\
    \ <- fibfib[i] + fibfib[i-1] + fibfib[i-2]\n    }\n    return(fibfib[n+1])\n}\n\
    fibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    if (n == 0) {\n        return(0)\n\
    \    } else if (n == 1) {\n        return(0)\n    } else if (n == 2) {\n     \
    \   return(1)\n    } else {\n        return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \    }\n}\n\ncat(fibfib(1), '\\n')\ncat(fibfib(5), '\\n')\ncat(fibfib(8), '\\\
    n')\n", "\n    if (n < 0) stop(\"The input must be a non-negative integer\")\n\
    \    if (n <= 1) return(0)\n    if (n == 2) return(1)\n    return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n  if (n < 3) {\n    return(n-1)\n  }\
    \ else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n\
    \  if (n < 2) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else\
    \ {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\n", "\n    if\
    \ (n < 3) {\n        return(n-1)\n    }\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)", "\n  if(n==0) {return(0)}\n\
    \  if(n==1) {return(0)}\n  if(n==2) {return(1)}\n  if(n>2) {return(fibfib(n-1)+fibfib(n-2)+fibfib(n-3))}\n\
    }\n", "\n  out <- 0\n  k <- 0\n  for (x in 0:n) {\n    out <- out + k\n    k <-\
    \ k + 2*(x>0) - (x>1)\n  }\n  return(out)\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n    if (n==0) {\n        return(0)\n    } else if (n==1) {\n        return(0)\n\
    \    } else if (n==2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n  if (n <= 1)\n    return(0)\n  if (n == 2)\n    return(1)\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n \
    \ if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else\
    \ if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\n", "\n  fibfib <- function(n, cache = c(0, 0, 1)) {\n\
    \    if (n == 0) return(cache[1])\n    if (n == 1) return(cache[2])\n    if (n\
    \ == 2) return(cache[3])\n    cache <- c(cache[2], cache[3], cache[2] + cache[3]\
    \ + cache[1])\n    fibfib(n - 1, cache)\n  }\n  fibfib(n)\n}\n", "\n  if (n <=\
    \ 2) {\n    return(0)\n  } else if (n == 3) {\n    return(1)\n  } else {\n   \
    \ return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}\nfibfib(1)\n\nfibfib(5)\n\
    \nfibfib(8)\n", "\n  if (n <= 1) {\n    return(0)\n  } else if (n == 2) {\n  \
    \  return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  }\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n", "\n    if (n < 2) {\n        return(0)\n\
    \    } else if (n == 2) {\n        return(1)\n    } else {\n        return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n}\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n    if (n <= 2)\n        return(n - 1)\n    fib <- numeric(n)\n    fib[1] <-\
    \ 0\n    fib[2] <- 1\n    for (i in 3:n)\n        fib[i] <- fib[i - 1] + fib[i\
    \ - 2] + fib[i - 3]\n    return(fib[n])\n}\n\nfibfib(1)\nfibfib(5)\nfibfib(8)\n",
  "\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else\
    \ if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  }\n}\nfibfib(1)\n\nfibfib(5)\n\nfibfib(8)\n", "\n  if(n <=\
    \ 0) return(0)\n  if(n == 1) return(0)\n  if(n == 2) return(1)\n  return(fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n", "\n  if (n==0){\n    return(0)\n  }\n  if\
    \ (n==1){\n    return(0)\n  }\n  if (n==2){\n    return(1)\n  }\n  return(fibfib(n-1)+fibfib(n-2)+fibfib(n-3))\n\
    }\n", "\n  if (n == 0)\n    return(0)\n  if (n == 1)\n    return(0)\n  if (n ==\
    \ 2)\n    return(1)\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}"]
stop_tokens:
- "\n#"
- "\n```"
