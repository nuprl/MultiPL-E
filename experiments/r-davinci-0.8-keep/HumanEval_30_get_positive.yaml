name: HumanEval_30_get_positive
language: r
prompt: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2, -4,\
  \ 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  # [5, 3, 2, 3, 9, 123, 1]\nget_positive <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- get_positive\n    if(!identical(candidate(c(-1,\
  \ -2, 4, 5, 6)), c(4, 5, 6))){quit('no', 1)}\n    if(!identical(candidate(c(5, 3,\
  \ -5, 2, 3, 3, 9, 0, 123, 1, -10)), c(5, 3, 2, 3, 3, 9, 123, 1))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(-1, -2)), c())){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    l[l > 0]\n}\n\nget_positive(c(-1, 2, -4, 5, 6))\n\nget_positive(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n  # return(l[l > 0])\n  return(Filter(function(x)\
    \ x > 0, l))\n}\n", "\n    l[l > 0]\n}\nget_positive(c(-1, 2, -4, 5, 6))\n\nget_positive(c(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    return(Filter(function(x) x\
    \ > 0, l))\n}\n", "\n  l[l > 0]\n}\n", "\n  return(filter(l, function(x) {x >\
    \ 0}))\n}\n", "\n    return(l[l > 0])\n}\n", "\n    l[l>0]\n}\n", "\n  l[l > 0]\n\
    }\n\nget_positive(c(-1, 2, -4, 5, 6))\n", "\n    l[l > 0]\n}\n", "\n  return(l[l\
    \ > 0])\n}\n", "\n   answer <- l[l>0]\n   return(answer)\n}\nget_positive(c(-1,\
    \ 2, -4, 5, 6))\n", "\n  positive_numbers <- c()\n  for (i in 1:length(l)) {\n\
    \    if (l[i] > 0) {\n      positive_numbers <- c(positive_numbers, l[i])\n  \
    \  }\n  }\n  return(positive_numbers)\n}\n", "\n  return(l[l > 0])\n}\nl <- c(-1,\
    \ 2, -4, 5, 6)\nget_positive(l)\n\nl <- c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)\n\
    get_positive(l)\n", "\n  l[l > 0]\n}\nget_positive(c(-1, 2, -4, 5, 6))\n", "\n\
    \  filtered_list <- Filter(function(x) x > 0, l)\n  return(filtered_list)\n}\n",
  "\n    return (l[l > 0])\n}\n", "\n  l[l>0]\n}\nget_positive(c(-1, 2, -4, 5, 6))\n\
    get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n\t# TODO\n}\n",
  "\n   l[l > 0]\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
