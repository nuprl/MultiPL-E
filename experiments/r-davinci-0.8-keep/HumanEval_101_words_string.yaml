name: HumanEval_101_words_string
language: r
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return an array of the words.\n\
  # For example:\n# words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
  , \"is\", \"John\"]\n# words_string(\"One, two, three, four, five, six\") == [\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nwords_string <- function(s)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- words_string\n    if(!identical(candidate('Hi,\
  \ my name is John'), c('Hi', 'my', 'name', 'is', 'John'))){quit('no', 1)}\n    if(!identical(candidate('One,\
  \ two, three, four, five, six'), c('One', 'two', 'three', 'four', 'five', 'six'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('Hi, my name'), c('Hi', 'my', 'name'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('One,, two, three, four, five, six,'), c('One',\
  \ 'two', 'three', 'four', 'five', 'six'))){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate('ahmed     , gamal'), c('ahmed',\
  \ 'gamal'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  return(strsplit(s, \"[[:space:],]+\")[[1]])\n}\n\ntest_that(\"\
    words_string works\", {\n  expect_equal(words_string(\"Hi, my name is John\"),\
    \ c(\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n  expect_equal(words_string(\"\
    One, two, three, four, five, six\"), c(\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"))\n})\n", "\n  split(strsplit(s, \", \")[[1]], \"\")\n}\n",
  "\n  stringr::str_split(s, \"[, ]\")[[1]]\n}", "\n  return(unlist(strsplit(s, split\
    \ = \"[, ]+\")))\n}", "\n  strsplit(s, ', | ')[[1]]\n}\n", "\n    # your code\
    \ here\n}\n ", "\n    strsplit(s, \" |,\")[[1]]\n}\n", "\n  unlist(strsplit(s,\
    \ \" |,\"))\n}\n", "\n  strsplit(s, \"\\\\W+\")[[1]]\n}\n", "\n  return(strsplit(s,\
    \ \" |,\")[[1]])\n}\n", "\n  gsub(\" \", \",\", s) %>% strsplit(\",\") %>% `[[`(1)\n\
    }\n", "\n   strsplit(s, \"[, ]\")[[1]]\n}\n", "\n\treturn(strsplit(s, \"[, ]+\"\
    )[[1]])\n}\n", "\n  unlist(strsplit(s, \"[[:space:],]+\"))\n}\n", "\n  strsplit(s,\
    \ \", \")[[1]]\n}\n", "\n  stringr::str_split(s, \"[,\\\\s]+\")[[1]]\n}\n", "\n\
    \  return(unlist(strsplit(s, '[,\\\\s]+')))\n}", "\n  unlist(strsplit(s, \",|\
    \ \"))\n}\n", "\n  unlist(strsplit(s, \", | \"))\n}\nwords_string(\"One, two,\
    \ three, four, five, six\")\n", "\n  stringr::str_split(s, \"[, ]\")[[1]]\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
