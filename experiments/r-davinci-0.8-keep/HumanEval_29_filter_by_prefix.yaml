name: HumanEval_29_filter_by_prefix
language: r
prompt: "# Filter an input list of strings only for ones that start with a given prefix.\n\
  # >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc', 'bcd', 'cde',\
  \ 'array'], 'a')\n# ['abc', 'array']\nfilter_by_prefix <- function(strings, prefix)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
  \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
  \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n    strings[sapply(strings,\
    \ function(x) substr(x, 1, 1) == prefix)]\n}\nprint(filter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a'))\n", "\n    #R6\n    #strings <- c(\"bcd\", \"\
    cde\", \"def\", \"efg\")\n    #prefix <- \"de\"\n    res <- strings[grep(prefix,\
    \ strings)]\n    return(res)\n    }\nstrings <- c(\"bcd\", \"cde\", \"def\", \"\
    efg\")\nprefix <- \"de\"\nfilter_by_prefix(strings, prefix)\n", "\n  # TODO\n\
    }\n", "\n  strings <- Filter(strings, function(string) {return(startsWith(string,\
    \ prefix))})\n  return(strings)\n}\n", "\n  f <- function(string) {\n    sub(prefix,\
    \ '', string) != string\n  }\n  Filter(f, strings)\n}\n", "\n  # TODO: Implement\
    \ me!\n  strings[substr(strings,1,1)==prefix]\n}\n", "\n    if (is.null(strings))\
    \ {\n        return(NULL)\n    }\n    prefix_length <- nchar(prefix)\n    if (prefix_length\
    \ == 0) {\n        return(strings)\n    }\n    filtered <- list()\n    for (s\
    \ in strings) {\n        if (nchar(s) > prefix_length && substr(s, 1, prefix_length)\
    \ == prefix) {\n            filtered <- c(filtered, s)\n        }\n    }\n   \
    \ return(filtered)\n}\n", "\n  strings <- strings[startsWith(strings, prefix)]\n\
    \  return(strings)\n}\nfilter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n",
  "\n  prefix_len <- nchar(prefix)\n  grep(paste0('^', prefix), strings, value = TRUE)\n\
    }\nfilter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n", "\n    #define empty\
    \ vector to contain the relevant strings\n    my_strings <- c()\n    #check each\
    \ string to see if it begins with the right prefix,\n    #  and append it to the\
    \ empty vector if it does\n    for (s in strings) {\n        if (startsWith(s,\
    \ prefix)) {\n            my_strings <- c(my_strings, s)\n        }\n    }\n \
    \   #return the vector\n    return(my_strings)\n}\n", "\n  ret <- vector()\n \
    \ for (s in strings) {\n    if (startsWith(s, prefix)) {\n      ret <- c(ret,\
    \ s)\n    }\n  }\n  return(ret)\n}\nfilter_by_prefix(c('abc', 'bcd', 'cde', 'array'),\
    \ 'a')\n", "\n  list_of_strings <- Filter(function(x) grepl(prefix, x), strings)\n\
    \  return(list_of_strings)\n}\n", "\n  reg_ex <- paste('^', prefix, sep='')\n\
    \  result <- filter(strings, grepl(reg_ex, .))\n  return(result)\n}\n\nfilter_by_prefix(c(),\
    \ 'a')\nfilter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n", "\n  str_subset(strings,\
    \ pattern = paste0('^', prefix))\n}", "\n  filter(strings, function(x) str_starts(x,\
    \ prefix))\n}", "\n  return (sapply(strings, function(x) ifelse(startsWith(x,\
    \ prefix), x, NA)))\n}\n", "\n    # YOUR CODE HERE\n    return(str_subset(strings,\
    \ regex(prefix)))\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n\
    \  filter(strings, function(el) {\n    str_starts(el, prefix)\n  })\n}\nfilter_by_prefix(c('abc',\
    \ 'bcd', 'cde', 'array'), 'a')\n"]
stop_tokens:
- "\n#"
- "\n```"
