name: HumanEval_92_any_int
language: r
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n# any_int(3,\
  \ 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6, -2.2, 2) \u279E\
  \ False\nany_int <- function(x, y, z) {"
tests: "test_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
  \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4,\
  \ 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0,\
  \ 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  is_int(x) & is_int(y) & is_int(z) & ((x == y + z) | (y == x + z)\
    \ | (z == x + y))\n}\n", "\n  if (is.integer(x) & is.integer(y) & is.integer(z))\
    \ {\n    if ((x == y + z) | (y == x + z) | (z == x + y)) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  if(all(x == floor(x), y == floor(y), z == floor(z))) {\n    if(x ==\
    \ (y + z) | y == (x + z) | z == (x + y)) {\n      return(TRUE)\n    } else {\n\
    \      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n}", "\n  # add\
    \ a return value\n  return_value <- FALSE\n  # check if x, y and z are integer\n\
    \  if (is.integer(x) & is.integer(y) & is.integer(z)) {\n    # check if x + y\
    \ equals z or x + z equals y or y + z equals x\n    if (sum(x, y) == z | sum(x,\
    \ z) == y | sum(y, z) == x) {\n      # if yes, return TRUE\n      return_value\
    \ <- TRUE\n    }\n  }\n  # check for return value, if yes, return TRUE else FALSE\n\
    \  if (return_value) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\nany_int(x = 5, y = 2, z = 7)\nany_int(x = 3, y = 2, z = 2)\nany_int(x = 3,\
    \ y = -2, z = 1)\nany_int(x = 3.6, y = -2.2, z = 2)\n", "\n    if (x == (y + z)\
    \ | y == (x + z) | z == (x + y)){\n        TRUE\n    } else {\n        FALSE\n\
    \    }\n}", "\n  if(all(class(x) == \"integer\", class(y) == \"integer\", class(z)\
    \ == \"integer\")) {\n    if(x == y + z | y == x + z | z == x + y) {\n      TRUE\n\
    \    } else {\n      FALSE\n    }\n  } else {\n    FALSE\n  }\n}\n", "\n  if(all(is.integer(x),\
    \ is.integer(y), is.integer(z))) {\n    if(x == (y + z) | y == (x + z) | z ==\
    \ (x + y)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n \
    \ } else {\n    return(FALSE)\n  }\n}\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6,\
    \ -2.2, 2)\n", "\n  return (class(x) == \"integer\" & class(y) == \"integer\"\
    \ & class(z) == \"integer\" & (z == x + y | y == x + z | x == y + z))\n}\n", "\n\
    \  if (x == y + z | y == x + z | z == x + y & is.integer(x) & is.integer(y) &\
    \ is.integer(z)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
  "\n    if (x == y + z | y == x + z | z == x + y) {\n        return(TRUE)\n    }\
    \ else {\n        return(FALSE)\n    }\n}\nany_int(5, 2, 7)\nany_int(3, 2, 2)\n\
    any_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n", "\n  if (is.integer(x) && is.integer(y)\
    \ && is.integer(z)) {\n    return(x == y + z | y == x + z | z == x + y)\n  } else\
    \ {\n    return(FALSE)\n  }\n}", "\n    if (is.integer(x) && is.integer(y) &&\
    \ is.integer(z)) {\n        if (x == y + z || y == x + z || z == x + y) {\n  \
    \          return(TRUE)\n        } else {\n            return(FALSE)\n       \
    \ }\n    } else {\n        return(FALSE)\n    }\n}", "\n  if (class(x) == \"integer\"\
    \ & class(y) == \"integer\" & class(z) == \"integer\"){\n    if ((x == y + z)\
    \ | (y == x + z) | (z == x + y)){\n      return(TRUE)\n    }\n    else{\n    \
    \  return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n  }\n}", "\n  ifelse(x\
    \ %in% c(x+y,x+z) & y %in% c(x+y,y+z) & z %in% c(x+z,y+z) & is.integer(x) & is.integer(y)\
    \ & is.integer(z),\n         TRUE, FALSE)\n}\n", "\n  if (class(x) == \"integer\"\
    \ & class(y) == \"integer\" & class(z) == \"integer\") {\n    if (x == y + z |\
    \ y == x + z | z == x + y) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}", "\n  check <- x == y + z | y ==\
    \ x + z | z == x + y\n  if (x %% 1 == 0 & y %% 1 == 0 & z %% 1 == 0 & check) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}", "\n  is.integer(x)\
    \ & is.integer(y) & is.integer(z) &\n    (x == y + z | y == x + z | z == x + y)\n\
    }\n\nany_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2,\
    \ 2)", "\n  if(is.integer(x) & is.integer(y) & is.integer(z)) {\n    if(x == y\
    \ + z | y == x + z | z == x + y) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (is.integer(x) & is.integer(y)\
    \ & is.integer(z)) {\n    if (x == y + z | y == x + z | z == x + y) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  if (is.integer(x) == FALSE | is.integer(y) == FALSE | is.integer(z)\
    \ == FALSE) {\n    return(FALSE)\n  } else if (x == y + z | y == x + z | z ==\
    \ x + y) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nany_int(5,\
    \ 2, 7) # TRUE\nany_int(3, 2, 2) # FALSE\nany_int(3, -2, 1) # TRUE\nany_int(3.6,\
    \ -2.2, 2) # FALSE\n"]
stop_tokens:
- "\n#"
- "\n```"
