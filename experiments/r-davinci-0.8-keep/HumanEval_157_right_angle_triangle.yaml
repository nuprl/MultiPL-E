name: HumanEval_157_right_angle_triangle
language: r
prompt: "# Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2,\
  \ 3) == False\nright_angle_triangle <- function(a, b, c) {"
tests: "test_humaneval <- function() {\ncandidate <- right_angle_triangle\n    if(!identical(candidate(3,\
  \ 4, 5), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1, 2, 3), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(10, 6, 8), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 2, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(7, 24, 25), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(10, 5, 7), FALSE)){quit('no', 1)}\n    if(!identical(candidate(5,\
  \ 12, 13), TRUE)){quit('no', 1)}\n    if(!identical(candidate(15, 8, 17), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(48, 55, 73), TRUE)){quit('no', 1)}\n    if(!identical(candidate(1,\
  \ 1, 1), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2, 2, 10), FALSE)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  ab <- a^2 + b^2\n  ac <- a^2 + c^2\n  bc <- b^2 + c^2\n  if(a^2\
    \ == bc) {\n    return(TRUE)\n  } else if(b^2 == ac) {\n    return(TRUE)\n  }\
    \ else if(c^2 == ab) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n\nright_angle_triangle(3, 4, 5) == TRUE\nright_angle_triangle(1, 2, 3) == FALSE\n\
    \ ", "\n  # YOUR CODE HERE\n}\n", "\n    # Your code here\n}\ncat('right_angle_triangle(3,\
    \ 4, 5) ==', right_angle_triangle(3, 4, 5), '\\n')\ncat('right_angle_triangle(1,\
    \ 2, 3) ==', right_angle_triangle(1, 2, 3), '\\n')\n", "\n  \n  # sort the three\
    \ sides by length\n  sides <- sort(c(a, b, c))\n  \n  # compare the squares of\
    \ the two shorter sides with the longest one\n  (sides[1]^2 + sides[2]^2) == sides[3]^2\n\
    }", "\n  hyp <- sqrt(a^2 + b^2)\n  return(c == hyp)\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n", "\n    if (a^2 + b^2 == c^2 || a^2\
    \ + c^2 == b^2 || b^2 + c^2 == a^2) {\n        return(TRUE)\n    } else {\n  \
    \      return(FALSE)\n    }\n}", "\n  if (isTRUE(all.equal(a^2 + b^2, c^2)) |\n\
    \    isTRUE(all.equal(a^2 + c^2, b^2)) |\n    isTRUE(all.equal(b^2 + c^2, a^2)))\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  if(isTRUE(all.equal(c(c(a,\
    \ b), c), sort(c(a, b, c), decreasing = TRUE))) && a^2 + b^2 == c^2) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  angle <- round(max(a, b, c) *\
    \ max(a, b, c) / (a * b * c), 10)\n  if (angle == 1)\n    return(T)\n  else\n\
    \    return(F)\n}\n", "\n  # arrange the input into ascending order\n  a <- sort(c(a,\
    \ b, c))\n  # check if the largest side squared is equal to the sum of the other\
    \ two sides squared\n  a[3] ^ 2 == a[1] ^ 2 + a[2] ^ 2\n}\n\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n", "\n  a^2 + b^2 == c^2\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n", "\n    x <- a^2\n    y <- b^2\n   \
    \ z <- c^2\n    if(x+y==z | x+z==y | y+z==x)\n        return(TRUE)\n    else \n\
    \        return(FALSE)\n}\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1,\
    \ 2, 3)", "\n    if(a == 0 | b == 0 | c == 0) return(FALSE)\n    if(a^2 + b^2\
    \ == c^2 | b^2 + c^2 == a^2 | c^2 + a^2 == b^2) return(TRUE)\n    return(FALSE)\n\
    }\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n", "\n    # return((a^2\
    \ + b^2 == c^2) || (b^2 + c^2 == a^2) || (c^2 + a^2 == b^2))\n    return(a^2 +\
    \ b^2 == c^2)\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n\
    right_angle_triangle(3, 3, sqrt(18))\n", "\n  \n  if(a^2 + b^2 == c^2) {\n   \
    \ return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(3, 4, 6)\n", "\n  return(a^2 + b^2 == c^2)\n}\n",
  "\n    if (a^2 + b^2 == c^2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n\
    \    }\n}\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)\n", "\n\
    \  angle <- acos((a^2 + b^2 - c^2)/(2*a*b))\n  if(angle == pi/2)\n    return(TRUE)\n\
    \  else\n    return(FALSE)\n}", "\n  if(a^2 == b^2 + c^2 || b^2 == a^2 + c^2 ||\
    \ c^2 == a^2 + b^2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)", "\n  sqrt(a^2\
    \ + b^2) == c | sqrt(a^2 + c^2) == b | sqrt(b^2 + c^2) == a\n}\nright_angle_triangle(3,\
    \ 4, 5)\nright_angle_triangle(1, 2, 3)\n"]
stop_tokens:
- "\n#"
- "\n```"
