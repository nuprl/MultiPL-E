name: HumanEval_60_sum_to_n
language: r
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- sum_to_n\n    if(!identical(candidate(1),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(6), 21)){quit('no', 1)}\n    if(!identical(candidate(11),\
  \ 66)){quit('no', 1)}\n    if(!identical(candidate(30), 465)){quit('no', 1)}\n \
  \   if(!identical(candidate(100), 5050)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  total <- 0\n  for (i in 1:n) {\n    total <- total + i\n  }\n \
    \ total\n}\n\n\n", "\n  if (n <= 1) return(n)\n  n * (n + 1) / 2\n}\n", "\n  if\
    \ (n > 0) {\n    sum_to_n(n-1) + n\n  } else {\n    0\n  }\n}\nsum_to_n(5)\n",
  "\n  a <- 0\n  for (x in 1:n) {\n    a <- a + x\n  }\n  return(a)\n}\nsum_to_n(30)\n\
    sum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)", "\n  # YOUR CODE HERE\n\
    \  if (n == 1) {\n    return(1)\n  } else {\n    return(n + sum_to_n(n-1))\n \
    \ }\n}\n", "\n  # your code here\n}", "\n    n*(n+1)/2\n}\n", "\n  if (n == 1)\
    \ {\n    return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n  }\n}\nsum_to_n(30)\n",
  "\n  total <- 0\n  for (num in 1:n) {\n    total <- total + num\n  }\n  return(total)\n\
    }", "\n    sum(1:n)\n}\nsum_to_n(10)\n", "\n  return(n*(n+1)/2)\n}\n", "\n  #\
    \ your code here\n  sum(1:n)\n}", "\n  s <- 0\n  for (i in 1:n) {\n    s <- s\
    \ + i\n  }\n  return(s)\n}\n", "\n  res <- 0\n  for (num in 1:n) {\n    res <-\
    \ res + num\n  }\n  return(res)\n}\nsum_to_n(30)\n", "\n  return(sum(1:n))\n}\n",
  "\n    sum_result <- 0\n    for (i in 1:n) {\n        sum_result <- sum_result +\
    \ i\n    }\n    return(sum_result)\n}\nsum_to_n(30)\nsum_to_n(100)\nsum_to_n(5)\n\
    sum_to_n(10)\nsum_to_n(1)\n ", "\n  y <- 0\n  for (i in 1:n) {\n    y <- y + i\n\
    \  }\n  return(y)\n}\n\nsum_to_n(30)\n", "\n    if (n == 1) {\n        return\
    \ (1)\n    } else {\n        return (n + sum_to_n(n-1))\n    }\n}\n\nsum_to_n(30)\n\
    sum_to_n(100)\nsum_to_n(5)\nsum_to_n(10)\nsum_to_n(1)\n", "\n  if (n == 1) {\n\
    \    return(1)\n  } else {\n    return(n + sum_to_n(n - 1))\n  }\n}\n", "\n  total\
    \ <- 0\n  for (i in 1:n) {\n    total <- total + i\n  }\n  total\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
