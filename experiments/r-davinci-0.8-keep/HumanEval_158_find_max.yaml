name: HumanEval_158_find_max
language: r
prompt: "# Write a function that accepts a list of strings.\n# The list contains different\
  \ words. Return the word with maximum number\n# of unique characters. If multiple\
  \ strings have maximum number of unique\n# characters, return the one which comes\
  \ first in lexicographical order.\n# find_max([\"name\", \"of\", \"string\"]) ==\
  \ \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n# find_max([\"\
  aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfind_max <- function(words) {"
tests: "test_humaneval <- function() {\ncandidate <- find_max\n    if(!identical(candidate(c('name',\
  \ 'of', 'string')), 'string')){quit('no', 1)}\n    if(!identical(candidate(c('name',\
  \ 'enam', 'game')), 'enam')){quit('no', 1)}\n    if(!identical(candidate(c('aaaaaaa',\
  \ 'bb', 'cc')), 'aaaaaaa')){quit('no', 1)}\n    if(!identical(candidate(c('abc',\
  \ 'cba')), 'abc')){quit('no', 1)}\n    if(!identical(candidate(c('play', 'this',\
  \ 'game', 'of', 'footbott')), 'footbott')){quit('no', 1)}\n    if(!identical(candidate(c('we',\
  \ 'are', 'gonna', 'rock')), 'gonna')){quit('no', 1)}\n    if(!identical(candidate(c('we',\
  \ 'are', 'a', 'mad', 'nation')), 'nation')){quit('no', 1)}\n    if(!identical(candidate(c('this',\
  \ 'is', 'a', 'prrk')), 'this')){quit('no', 1)}\n    if(!identical(candidate(c('b')),\
  \ 'b')){quit('no', 1)}\n    if(!identical(candidate(c('play', 'play', 'play')),\
  \ 'play')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # write your code here\n}", "\n  max_unique <- 0\n  max_word <-\
    \ \"\"\n  for (word in words) {\n    unique_count <- length(unique(word))\n  \
    \  if (unique_count > max_unique) {\n      max_unique <- unique_count\n      max_word\
    \ <- word\n    }\n  }\n  return(max_word)\n}\n", "\n  # convert to data frame\n\
    \  word_count <- sapply(words, function(word) {\n    paste(sort(strsplit(word,\
    \ '')[[1]]), collapse='')\n  })\n  # make data frame with words and number of\
    \ unique letters\n  word_count <- data.frame(word = words, count = sapply(word_count,\
    \ nchar))\n  # keep only words with maximum number of unique letters\n  max_count\
    \ <- max(word_count$count)\n  word_count <- word_count[word_count$count == max_count,\
    \ ]\n  # find the first word\n  first_word <- word_count[1, ]\n  first_word$word\n\
    }\n ", "\n  max_length <- 0\n  max_word <- \"\"\n  for (w in words) {\n    if\
    \ (length(unique(strsplit(w, \"\")[[1]])) > max_length) {\n      max_length <-\
    \ length(unique(strsplit(w, \"\")[[1]]))\n      max_word <- w\n    }\n  }\n  return(max_word)\n\
    }\n", "\n    words <- as.character(words)\n    maxlen <- max(nchar(words))\n \
    \   words <- words[nchar(words) == maxlen]\n    return(words[which.min(words)])\n\
    }\n", "\n    words <- gsub(' ', '', words)\n    u <- unlist(lapply(words, function(x)\
    \ length(unique(strsplit(x, '')[[1]]))))\n    max <- which.max(u)\n    words[max]\n\
    }\nwords <- c(\"name\", \"of\", \"string\")\nfind_max(words)\n", "\n  words_uniq\
    \ = lapply(words, function(x) {\n    letters = strsplit(x, \"\")[[1]]\n    length(unique(letters))\n\
    \  })\n  index = which.max(words_uniq)\n  words[index]\n}\n", "\n  i <- 1\n  t\
    \ <- -1\n  w <- \"\"\n  while (i <= length(words)) {\n    x <- strsplit(words[i],\
    \ \"\")[[1]]\n    u <- length(unique(x))\n    if (u > t) {\n      t <- u\n   \
    \   w <- words[i]\n    }\n    i <- i + 1\n  }\n  w\n}\nwords <- c(\"name\", \"\
    of\", \"string\")\nfind_max(words)\nwords <- c(\"name\", \"enam\", \"game\")\n\
    find_max(words)\nwords <- c(\"aaaaaaa\", \"bb\" ,\"cc\")\nfind_max(words)\n",
  "\n    max_word <- \"\"\n    for (w in words) {\n        if (is.null(max_word) ||\
    \ \n            length(unique(unlist(strsplit(w, \"\")))) > length(unique(unlist(strsplit(max_word,\
    \ \"\"))))) {\n            max_word <- w\n        }\n    }\n    return(max_word)\n\
    }\n\nfind_max(c(\"name\", \"of\", \"string\"))\nfind_max(c(\"name\", \"enam\"\
    , \"game\"))\nfind_max(c(\"aaaaaaa\", \"bb\" ,\"cc\"))\n", "\n  tmp <- sapply(words,\
    \ unique)\n  tmp <- sapply(tmp, length)\n  word = words[order(tmp, words)][1]\n\
    \  return(word)\n}\n", "\n    # Write your function here\n}\nassert_true(identical(find_max(c(\"\
    name\", \"of\", \"string\")), \"string\"))\nassert_true(identical(find_max(c(\"\
    name\", \"enam\", \"game\")), \"enam\"))\nassert_true(identical(find_max(c(\"\
    aaaaaaa\", \"bb\" ,\"cc\")), \"aaaaaaa\"))\n ", "\n  if(is.null(words)) {\n  \
    \  return(NULL)\n  }\n  else {\n    char_count <- NULL\n    for(word in words)\
    \ {\n      char_count <- append(char_count, length(unique(unlist(strsplit(word,\
    \ \"\")))))\n    }\n    index <- which.max(char_count)\n    return(words[index])\n\
    \  }\n}\n", "\n  list <- list()\n  for (i in 1:length(words)) {\n    list[i] <-\
    \ length(unique(unlist(strsplit(words[i], split = \"\"))))\n  }\n  return(words[which.max(list)])\n\
    }\n\n", "\n  words_max <- words[1]\n  for (word in words) {\n    if (length(unique(unlist(strsplit(word,\
    \ \"\")))) > length(unique(unlist(strsplit(words_max, \"\"))))) {\n      words_max\
    \ <- word\n    }\n  }\n  return(words_max)\n}", "\n  \n  words_unique <- lapply(words,\
    \ function(word) {\n    unique(unlist(strsplit(word, \"\")))\n  })\n  \n  unique_lengths\
    \ <- lapply(words_unique, length)\n  \n  max_idx <- which.max(unique_lengths)\n\
    \  \n  words[max_idx]\n}\n", "\n  num_characters <- vapply(words, length, integer(1))\n\
    \  unique_characters <- vapply(words, function(word) length(unique(word)), integer(1))\n\
    \  unique_characters / num_characters\n}\n", "\n    max.uniq.len <- 0\n    max.uniq.word\
    \ <- \"\"\n    for (word in words) {\n        if (nchar(word) > max.uniq.len)\
    \ {\n            max.uniq.len <- nchar(word)\n            max.uniq.word <- word\n\
    \        }\n    }\n    max.uniq.word\n}\n", "\n    words <- sort(words, decreasing\
    \ = TRUE)\n    words[1]\n}\n", "\n  uniq_count <- sapply(words, function(x) length(unique(strsplit(x,\
    \ \"\")[[1]])))\n  return(words[which.max(uniq_count)])\n}\n\nfind_max(c(\"name\"\
    , \"of\", \"string\"))\n\nfind_max(c(\"name\", \"enam\", \"game\"))\n\nfind_max(c(\"\
    aaaaaaa\", \"bb\" ,\"cc\"))\n", "\n  uniq_len <- lapply(words, function(word)\
    \ length(unique(unlist(strsplit(word, \"\")))))\n  max_len <- max(uniq_len)\n\
    \  max_idx <- which(uniq_len == max_len)\n  words[max_idx[which.min(words[max_idx])]]\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
