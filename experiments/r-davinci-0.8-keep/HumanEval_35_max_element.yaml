name: HumanEval_35_max_element
language: r
prompt: "# Return maximum element in the list.\n# >>> max_element([1, 2, 3])\n# 3\n\
  # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nmax_element <-\
  \ function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- max_element\n    if(!identical(candidate(c(1,\
  \ 2, 3)), 3)){quit('no', 1)}\n    if(!identical(candidate(c(5, 3, -5, 2, -3, 3,\
  \ 9, 0, 124, 1, -10)), 124)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    max(l)\n}\n", "\n    max_element <- -Inf\n    for (i in l) {\n\
    \        if (i > max_element)\n            max_element <- i\n    }\n    return(max_element)\n\
    }\n", "\n  max_elem <- l[1]\n  for (item in l) {\n    if (item > max_elem) {\n\
    \      max_elem <- item\n    }\n  }\n  return(max_elem)\n}\n ", "\n  max(l)\n\
    }\n", "\n    # Write your code here\n    max(l)\n}\n", "\n    max <- 0\n    for\
    \ (i in l) {\n        if (i > max) {\n            max <- i\n        }\n    }\n\
    \    return(max)\n}\n", "\n    # REPLACE THIS LINE WITH YOUR CODE\n    print(l)\n\
    \    first=l[1]\n    for(i in 1:length(l)){\n        if(l[i]>first){\n       \
    \     first=l[i]\n        }\n    }\n    return(first)\n}\n ", "\n    m <- l[1]\n\
    \    for (i in 2:length(l)) {\n        if (l[i] > m) {\n            m <- l[i]\n\
    \        }\n    }\n    return(m)\n}\n", "\n    max = -9999999\n    for (i in l)\
    \ {\n        if (i > max) {\n            max = i\n        }\n    }\n    return(max)\n\
    }\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n    \n}\n", "\n    max(l)\n}\n", "\n    if (length(l) == 1) return(l)\n    el\
    \ = max_element(l[-1])\n    if (l[1] > el) return(l[1])\n    else return(el)\n\
    }\nmax_element(c(1, 2, 3))\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))",
  "\n    if (length(l) == 1) {\n        return(l[1])\n    }\n    if (l[1] > l[2])\
    \ {\n        return(max_element(c(l[1], l[-(1:2)])))\n    } else {\n        return(max_element(l[-(1:2)]))\n\
    \    }\n}\n", "\n  max(l)\n}\n", "\n    max = l[1]\n    for (e in l) {\n     \
    \   if (e > max) {\n            max = e\n        }\n    }\n    return(max)\n}\n\
    \nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n", "\n    if (length(l)\
    \ == 1) {\n        return(l[1])\n    } else {\n        m <- max_element(l[-1])\n\
    \        if (l[1] > m) {\n            return(l[1])\n        } else {\n       \
    \     return(m)\n        }\n    }\n}\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10))\n", "\n  max <- 0\n  for (e in l) {\n    if (e > max) {\n    \
    \  max <- e\n    }\n  }\n  return(max)\n}", "\n    # write your code here\n  \
    \  return(max(l))\n}\nmax_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n",
  "\n    max <- l[1]\n    for (i in l) {\n        if (i > max) {\n            max\
    \ <- i\n        }\n    }\n    return(max)\n}\n", "\n    if(length(l) == 1) {\n\
    \        return(l)\n    }\n    return(c(max_element(head(l, length(l)-1)), max(tail(l,\
    \ 1))))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
