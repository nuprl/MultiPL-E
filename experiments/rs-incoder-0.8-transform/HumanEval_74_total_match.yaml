name: HumanEval_74_total_match
language: rs
prompt: "/// Write a function that accepts two lists of strings and returns the list\
  \ that has \n/// total number of chars in the all strings of the list less than\
  \ the other list.\n/// if the two lists have the same number of chars, return the\
  \ first list.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n\
  /// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"\
  hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\"\
  )]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"\
  hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n\
  /// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
  ), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"),\
  \ String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"\
  1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"\
  5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>)\
  \ -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: []
stop_tokens:
- "\n}"
