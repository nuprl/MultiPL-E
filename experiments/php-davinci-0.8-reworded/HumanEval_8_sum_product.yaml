name: HumanEval_8_sum_product
language: php
prompt: "<?php\n// For a given array of integers, return an array consisting of a\
  \ sum and a product of all the integers in an array.\n// Empty sum should be equal\
  \ to 0 and empty product should be equal to 1.\n// >>> sum_product(array())\n//\
  \ array(0, 1)\n// >>> sum_product(array(1, 2, 3, 4))\n// array(10, 24)\nfunction\
  \ sum_product($numbers) {\n"
tests: "function candidate(...$args) {\n    return sum_product(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 1, 1)) !== array(3, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(100, 0)) !== array(100,\
  \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5,\
  \ 7)) !== array(15, 105)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10))\
  \ !== array(10, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number) {\n \
    \   $sum += $number;\n    $product *= $number;\n  }\n  return array($sum, $product);\n\
    }\n", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum,\
    \ $product);\n}", "  // Write a function body\n  $sum = 0;\n  $product = 1;\n\
    \  if (empty($numbers)) {\n    return array($sum, $product);\n  }\n  foreach ($numbers\
    \ as $value) {\n    $sum += $value;\n    $product *= $value;\n  }\n  return array($sum,\
    \ $product);\n}", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $number)\
    \ {\n    $sum += $number;\n    $product *= $number;\n  }\n  return array($sum,\
    \ $product);\n}\n", "    $sum = 0;\n    $product = 1;\n    if(empty($numbers))\
    \ {\n        return array($sum, $product);\n    }\n    else {\n        foreach($numbers\
    \ as $value) {\n            $sum += $value;\n            $product *= $value;\n\
    \        }\n        return array($sum, $product);\n    }\n}\nprint_r(sum_product(array(1,\
    \ 2, 3, 4)));", "    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ array($sum, $product);\n}\n", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers\
    \ as $number) {\n\t\t$sum += $number;\n\t\t$product *= $number;\n\t}\n\treturn\
    \ array($sum, $product);\n}\n", "    $s = 0;\n    $p = 1;\n    foreach ($numbers\
    \ as $number) {\n        $s += $number;\n        $p *= $number;\n    }\n    return\
    \ array($s, $p);\n}\n\nprint_r(sum_product(array(1, 2, 3, 4)));", "  $sum = 0;\n\
    \  $product = 1;\n  if (count($numbers) > 0) {\n    foreach ($numbers as $number)\
    \ {\n      $sum += $number;\n      $product *= $number;\n    }\n  }\n  return\
    \ array($sum, $product);\n}\n\n$numbers = array(1, 2, 3, 4);\n$result = sum_product($numbers);\n\
    print_r($result);", "    $sum = array_sum($numbers);\n    $product = array_product($numbers);\n\
    \    return array($sum, $product);\n}\n", "  $product = 1;\n  $sum = 0;\n  foreach\
    \ ($numbers as $number) {\n    $product *= $number;\n    $sum += $number;\n  }\n\
    \  return array($sum, $product);\n}\n", "    // Your code here\n}", "  $sum =\
    \ array_sum($numbers);\n  $product = array_product($numbers);\n  $result = [$sum,\
    \ $product];\n  return $result;\n}\nprint_r(sum_product([1, 2, 3, 4]));", "  \
    \  $sum = 0;\n    $product = 1;\n    if (empty($numbers)) {\n        return array($sum,\
    \ $product);\n    }\n    foreach ($numbers as $number) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return array($sum, $product);\n}\n",
  "\t// Don't forget to return the result!\n\t$sum = 0;\n\t$product = 1;\n\tforeach\
    \ ($numbers as $key => $value) {\n\t\t$sum += $value;\n\t\t$product *= $value;\n\
    \t}\n\treturn [$sum, $product];\n}\nprint_r(sum_product([1, 2, 3, 4]));\n", " \
    \   $sum = 0;\n    $product = 1;\n    foreach ($numbers as $num) {\n        $sum\
    \ += $num;\n        $product *= $num;\n    }\n    return array($sum, $product);\n\
    }\nprint_r(sum_product(array(1, 2, 3, 4)));", "\t$sum = 0;\n\t$product = 1;\n\t\
    $empty = [];\n\tforeach ($numbers as $key => $value) {\n\t\t$sum += $value;\n\t\
    \t$product *= $value;\n\t}\n\t$result = array($sum, $product);\n\treturn $result;\n\
    }", "  $sum = 0;\n  $product = 1;\n  foreach ($numbers as $value) {\n    $sum\
    \ += $value;\n    $product *= $value;\n  }\n  $result = array($sum, $product);\n\
    \  return $result;\n}\n", "    $sum = 0;\n    $product = 1;\n    if (!empty($numbers))\
    \ {\n        foreach ($numbers as $value) {\n            $sum += $value;\n   \
    \         $product *= $value;\n        }\n    }\n    return [$sum, $product];\n\
    }\n", "\t$sum = 0;\n\t$product = 1;\n\tforeach ($numbers as $v) {\n\t\t$sum +=\
    \ $v;\n\t\t$product *= $v;\n\t}\n\treturn array($sum, $product);\n}\nprint_r(sum_product(array(1,\
    \ 2, 3, 4)));\necho \"<br>\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
