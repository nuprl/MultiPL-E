language: php
name: HumanEval_108_count_nums
results:
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        $sum = 0;\n        $sign = 1;\n        if ($num < 0) {\n        \
    \    $sign = -1;\n            $num = $num * -1;\n        }\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        if ($sum * $sign > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\necho count_nums(array(1, 1, 2)) . PHP_EOL;\necho\
    \ count_nums(array(-1, 11, -11)) . PHP_EOL;\necho count_nums(array()) . PHP_EOL;\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ruuyz1p.php:44\n\
    Stack trace:\n#0 /tmp/tmp1ruuyz1p.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1ruuyz1p.php\
    \ on line 44\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sum = 0;\n    if ($arr[$i] < 0) {\n      $arr[$i] = -1 * $arr[$i];\n\
    \    }\n    while ($arr[$i] > 0) {\n      $sum += $arr[$i] % 10;\n      $arr[$i]\
    \ = (int)($arr[$i] / 10);\n    }\n    if ($sum > 0) {\n      $count++;\n    }\n\
    \  }\n  return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2jpk7_w.php:35\n\
    Stack trace:\n#0 /tmp/tmph2jpk7_w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmph2jpk7_w.php\
    \ on line 35\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$res = 0;\n\t$len = count($arr);\n\tfor ($i\
    \ = 0; $i < $len; $i++) {\n\t\t$sd = 0;\n\t\t$num = $arr[$i];\n\t\twhile ($num\
    \ != 0) {\n\t\t\t$sd += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\t\
    if ($sd > 0) {\n\t\t\t$res++;\n\t\t}\n\t}\n\treturn $res;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq2xzu4f.php:38\n\
    Stack trace:\n#0 /tmp/tmpyq2xzu4f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyq2xzu4f.php\
    \ on line 38\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $item)\
    \ {\n        $digits = abs($item);\n        $digits_sum = 0;\n        while ($digits)\
    \ {\n            $digits_sum += $digits % 10;\n            $digits = (int)($digits\
    \ / 10);\n        }\n        if ($digits_sum > 0) {\n            $count++;\n \
    \       }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4xzt1xg.php:33\n\
    Stack trace:\n#0 /tmp/tmpn4xzt1xg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn4xzt1xg.php\
    \ on line 33\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value < 0) {\n      $count += 1;\n    } else {\n      $count +=\
    \ count_digits($value);\n    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_digits()\
    \ in /tmp/tmp6wvai0k0.php:18\nStack trace:\n#0 /tmp/tmp6wvai0k0.php(25): count_nums(Array)\n\
    #1 /tmp/tmp6wvai0k0.php(30): candidate(Array)\n#2 /tmp/tmp6wvai0k0.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6wvai0k0.php on line 18\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $v) {\n  \
    \  if ($v < 0) {\n      $v = -$v;\n    }\n    while ($v) {\n      $count += $v\
    \ % 10;\n      $v /= 10;\n    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float'
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $cnt = 0;\n    foreach ($arr as $num) {\n\
    \        $sum = 0;\n        while ($num != 0) {\n            $digit = $num % 10;\n\
    \            $sum += $digit;\n            $num = $num / 10;\n        }\n     \
    \   if ($sum > 0) {\n            $cnt += 1;\n        }\n    }\n    return $cnt;\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float -0.1 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -0.01 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -0.001 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -0.0001 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -1.0E-5 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-6 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-7 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-8 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000003E-9 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000003E-10 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000003E-11 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-12 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-13 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-14 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0E-15 to int loses precision in
    /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000001E-16 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0E-17 to int loses precision in
    /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conv'
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // BEGIN\n  $count = 0;\n  foreach ($arr as\
    \ $value) {\n    $sum = 0;\n    foreach (str_split($value) as $digit) {\n    \
    \  $sum += abs($digit);\n    }\n    if ($sum > 0) {\n      $count++;\n    }\n\
    \  }\n  return $count;\n  // END\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, string given in /tmp/tmpd0rs356n.php:18\nStack trace:\n#0 /tmp/tmpd0rs356n.php(18):\
    \ abs('-')\n#1 /tmp/tmpd0rs356n.php(29): count_nums(Array)\n#2 /tmp/tmpd0rs356n.php(34):\
    \ candidate(Array)\n#3 /tmp/tmpd0rs356n.php(43): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpd0rs356n.php on line 18\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // TODO: implement this function\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8cjbtcu.php:21\n\
    Stack trace:\n#0 /tmp/tmpk8cjbtcu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpk8cjbtcu.php\
    \ on line 21\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $sum = 0;\n        $num = $arr[$i];\n        if ($num < 0)\
    \ {\n            $num = $num * -1;\n        }\n        while ($num > 0) {\n  \
    \          $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n\
    \        if ($sum > 0) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifgtf_ul.php:37\n\
    Stack trace:\n#0 /tmp/tmpifgtf_ul.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpifgtf_ul.php\
    \ on line 37\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // YOUR CODE HERE\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt_qqs92.php:20\n\
    Stack trace:\n#0 /tmp/tmptt_qqs92.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptt_qqs92.php\
    \ on line 20\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $num = 0;\n    foreach ($arr as $i) {\n\
    \        $sum = 0;\n        if ($i < 0) {\n            $sum = $i - $i - $i;\n\
    \        } else {\n            $sum = $i;\n        }\n        while ($sum >= 10)\
    \ {\n            $sum = 0;\n            while ($sum >= 10) {\n               \
    \ $sum = $sum % 10 + ($sum - $sum % 10) / 10;\n            }\n        }\n    \
    \    if ($sum > 0) {\n            $num = $num + 1;\n        }\n    }\n    return\
    \ $num;\n}\nprint count_nums(array(1, 1, 2)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -2)) . \"\\n\";\nprint count_nums(array(1, 1, -12)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -21)) . \"\\n\";\nprint count_nums(array(1, 1, -31)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -41)) . \"\\n\";\nprint count_nums(array(1, 1, -51)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -61)) . \"\\n\";\nprint count_nums(array(1, 1, -71)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -81)) . \"\\n\";\nprint count_nums(array(1, 1, -91)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -101)) . \"\\n\";\nprint count_nums(array(1, 1, -111)) . \"\\n\";\nprint\
    \ count_nums(array(1, 1, -121)) . \"\\n\";\nprint count_nums(array(1, 1, -131))\
    \ . \"\\n\";\nprint count_nums(array(1, 1, -141)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -151)) . \"\\n\";\nprint count_nums(array(1, 1, -161)) . \"\\n\";\nprint\
    \ count_\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpgmghak64.php
    on line 52

    '
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    foreach ($arr as $val)\
    \ {\n        $sum = 0;\n        if ($val < 0) {\n            $sum += substr($val,\
    \ 0, 1);\n            $val = substr($val, 1);\n        }\n        for ($i = 0;\
    \ $i < strlen($val); $i++) {\n            $sum += $val[$i];\n        }\n     \
    \   if ($sum > 0) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpx3lv_aug.php:17\nStack trace:\n#0 /tmp/tmpx3lv_aug.php(30): count_nums(Array)\n\
    #1 /tmp/tmpx3lv_aug.php(35): candidate(Array)\n#2 /tmp/tmpx3lv_aug.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx3lv_aug.php on line 17\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sum = 0;\n    $num = abs($arr[$i]);\n    while ($num > 0) {\n\
    \      $digit = $num % 10;\n      $sum += $digit;\n      $num = (int)($num / 10);\n\
    \    }\n    if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptycqzmba.php:34\n\
    Stack trace:\n#0 /tmp/tmptycqzmba.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptycqzmba.php\
    \ on line 34\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (count($arr) === 0) {\n        return\
    \ 0;\n    }\n    $arr2 = array_map(function($a) {\n        return str_split($a);\n\
    \    }, $arr);\n    $arr3 = array_map(function($a) {\n        return array_sum($a);\n\
    \    }, $arr2);\n    return count(array_filter($arr3, function($a) {\n       \
    \ return $a > 0;\n    }));\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhcr71lc.php:32\n\
    Stack trace:\n#0 /tmp/tmpdhcr71lc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdhcr71lc.php\
    \ on line 32\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $elem)\
    \ {\n        $sum = 0;\n        $temp = $elem;\n        if ($elem < 0) {\n   \
    \         $temp = $elem * -1;\n        }\n        for ($i = 0; $i < strlen($temp);\
    \ $i++) {\n            $sum += $temp[$i];\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php on\
    \ line 21\n\nWarning: Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php on\
    \ line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19lel9fb.php:36\n\
    Stack trace:\n#0 /tmp/tmp19lel9fb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp19lel9fb.php\
    \ on line 36\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $value)\
    \ {\n        if ($value < 0) {\n            $value = -$value;\n        }\n   \
    \     $sum = 0;\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n\nprint_r(count_nums(array()));\n\
    echo \"\\n\";\nprint_r(count_nums(array(-1, 11, -11)));\necho \"\\n\";\nprint_r(count_nums(array(1,\
    \ 1, 2)));\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zexalml.php:42\n\
    Stack trace:\n#0 /tmp/tmp4zexalml.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4zexalml.php\
    \ on line 42\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$total = 0;\n\tforeach ($arr as $value) {\n\
    \t\tif ($value >= 0) {\n\t\t\t$sum = array_sum(str_split($value));\n\t\t} else\
    \ {\n\t\t\t$spl = str_split($value);\n\t\t\t$negs = abs($spl[0]);\n\t\t\t$spl[0]\
    \ = 0;\n\t\t\t$sum = $negs + array_sum($spl);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\
    \t$total += 1;\n\t\t}\n\t}\n\treturn $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, string given in /tmp/tmphtbs1r68.php:19\nStack trace:\n#0 /tmp/tmphtbs1r68.php(19):\
    \ abs('-')\n#1 /tmp/tmphtbs1r68.php(31): count_nums(Array)\n#2 /tmp/tmphtbs1r68.php(36):\
    \ candidate(Array)\n#3 /tmp/tmphtbs1r68.php(45): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmphtbs1r68.php on line 19\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    return count(array_filter($arr, function($a)\
    \ {\n        return array_sum(str_split(abs($a))) > 0;\n    }));\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxh9nlu32.php:24\n\
    Stack trace:\n#0 /tmp/tmpxh9nlu32.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxh9nlu32.php\
    \ on line 24\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $el) {\n \
    \   $sum = 0;\n    foreach (str_split(abs($el)) as $digit) {\n      $sum += $digit;\n\
    \    }\n    if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1aq6dy2.php:31\n\
    Stack trace:\n#0 /tmp/tmpe1aq6dy2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpe1aq6dy2.php\
    \ on line 31\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    foreach ($arr as $item)\
    \ {\n        $result += count_signed_digits($item);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_signed_digits()\
    \ in /tmp/tmp8ktnzzg8.php:15\nStack trace:\n#0 /tmp/tmp8ktnzzg8.php(20): count_nums(Array)\n\
    #1 /tmp/tmp8ktnzzg8.php(25): candidate(Array)\n#2 /tmp/tmp8ktnzzg8.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8ktnzzg8.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $value) {\n\
    \t\t$sum = 0;\n\t\t$abs_val = abs($value);\n\t\twhile ($abs_val != 0) {\n\t\t\t\
    $sum += $abs_val % 10;\n\t\t\t$abs_val = (int)($abs_val / 10);\n\t\t}\n\t\tif\
    \ ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7psbba7.php:34\n\
    Stack trace:\n#0 /tmp/tmpw7psbba7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpw7psbba7.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $x) {\n\t\t\
    $digits = explode('', $x);\n\t\t$sum = 0;\n\t\tforeach ($digits as $digit) {\n\
    \t\t\t$sum += $digit;\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t\
    }\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: explode(): Argument #1 ($separator)\
    \ cannot be empty in /tmp/tmpukb26e91.php:15\nStack trace:\n#0 /tmp/tmpukb26e91.php(15):\
    \ explode('', '-1')\n#1 /tmp/tmpukb26e91.php(27): count_nums(Array)\n#2 /tmp/tmpukb26e91.php(32):\
    \ candidate(Array)\n#3 /tmp/tmpukb26e91.php(41): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpukb26e91.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $result = 0;\n  foreach ($arr as $value) {\n\
    \    $digits = [];\n    if ($value < 0) {\n      $digits[] = abs($value % 10);\n\
    \      $value = floor(abs($value) / 10);\n    }\n    while ($value > 0) {\n  \
    \    $digits[] = $value % 10;\n      $value = floor($value / 10);\n    }\n   \
    \ $sum = array_sum($digits);\n    if ($sum > 0) {\n      $result++;\n    }\n \
    \ }\n  return $result;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs8uahf7.php:37\n\
    Stack trace:\n#0 /tmp/tmphs8uahf7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphs8uahf7.php\
    \ on line 37\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (empty($arr)) {\n        return 0;\n\
    \    }\n    $count = 0;\n    foreach ($arr as $key => $value) {\n        $sum\
    \ = 0;\n        if ($value < 0) {\n            $sum += substr($value, 0, 1);\n\
    \            $value = substr($value, 1);\n        }\n        for ($i = 0; $i <\
    \ strlen($value); $i++) {\n            $sum += substr($value, $i, 1);\n      \
    \  }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpeoxiizfd.php:20\nStack trace:\n#0 /tmp/tmpeoxiizfd.php(33): count_nums(Array)\n\
    #1 /tmp/tmpeoxiizfd.php(38): candidate(Array)\n#2 /tmp/tmpeoxiizfd.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeoxiizfd.php on line 20\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        if (array_sum(str_split(abs($num))) > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlmkh4uq.php:27\n\
    Stack trace:\n#0 /tmp/tmpdlmkh4uq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdlmkh4uq.php\
    \ on line 27\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\tif (!count($arr)) {\n\t\treturn 0;\n\t}\n\t\
    \n\t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\t\n\t\tif ($num\
    \ < 0) {\n\t\t\t$sum += abs($num);\n\t\t} else {\n\t\t\t$sum += $num;\n\t\t}\n\
    \t\t\n\t\twhile ($sum > 0) {\n\t\t\t$count++;\n\t\t\t$sum -= $sum % 10;\n\t\t\t\
    $sum /= 10;\n\t\t}\n\t}\n\t\n\treturn $count;\n}\n\necho count_nums(array()) .\
    \ \"\\n\";\necho count_nums(array(-1, 11, -11)) . \"\\n\";\necho count_nums(array(1,\
    \ 1, 2)) . \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n5\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5hh_1h8t.php:46\n\
    Stack trace:\n#0 /tmp/tmp5hh_1h8t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5hh_1h8t.php\
    \ on line 46\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $value) {\n\
    \    $sum = 0;\n    while ($value != 0) {\n      $sum += abs($value % 10);\n \
    \     $value = intval($value / 10);\n    }\n    if ($sum > 0) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8whwk69j.php:33\n\
    Stack trace:\n#0 /tmp/tmp8whwk69j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8whwk69j.php\
    \ on line 33\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\treturn array_reduce($arr, function($carry,\
    \ $item) {\n\t\treturn $carry + ($item < 0 ? -1 : 1) * array_sum(str_split(abs($item)));\n\
    \t}, 0);\n}\n\necho count_nums(array(1, 1, 2));\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5dvobt_e.php:25\n\
    Stack trace:\n#0 /tmp/tmp5dvobt_e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5dvobt_e.php\
    \ on line 25\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$sum = 0;\n\t\tif ($arr[$i] < 0) {\n\t\t\t$arr[$i] = $arr[$i] *\
    \ -1;\n\t\t}\n\t\twhile ($arr[$i] > 0) {\n\t\t\t$sum += $arr[$i] % 10;\n\t\t\t\
    $arr[$i] = floor($arr[$i] / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\
    \t\t}\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5y_r_h9.php:36\n\
    Stack trace:\n#0 /tmp/tmpe5y_r_h9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpe5y_r_h9.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (empty($arr)) {\n        return 0;\n\
    \    }\n    $sum = 0;\n    foreach ($arr as $value) {\n        $str = (string)$value;\n\
    \        if ($value < 0) {\n            $str = substr($str, 1);\n        }\n \
    \       $sum += array_sum(str_split($str));\n    }\n    return $sum;\n}\n$arr\
    \ = array(-1, -11, 1, 1, 2);\necho count_nums($arr);\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_6ywfx6.php:34\n\
    Stack trace:\n#0 /tmp/tmpm_6ywfx6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm_6ywfx6.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $sum = 0;\n    foreach ($arr as $number)\
    \ {\n        $str = (string)$number;\n        $sum += intval($str[0]);\n     \
    \   $sum += intval($str[1]);\n        $sum += intval($str[2]);\n    }\n    return\
    \ $sum;\n}\n\n$arr = [-1, 11, -11];\necho count_nums($arr);\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 2 in /tmp/tmpofm3fc_h.php on line\
    \ 18\n\nWarning: Uninitialized string offset 2 in /tmp/tmpofm3fc_h.php on line\
    \ 18\n5\nWarning: Uninitialized string offset 2 in /tmp/tmpofm3fc_h.php on line\
    \ 18\n\nWarning: Uninitialized string offset 2 in /tmp/tmpofm3fc_h.php on line\
    \ 18\n\nWarning: Uninitialized string offset 1 in /tmp/tmpofm3fc_h.php on line\
    \ 17\n\nWarning: Uninitialized string offset 2 in /tmp/tmpofm3fc_h.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpofm3fc_h.php:31\n\
    Stack trace:\n#0 /tmp/tmpofm3fc_h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpofm3fc_h.php\
    \ on line 31\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $num) {\n\
    \    $total = 0;\n    if ($num < 0) {\n      $total += -1 * ($num % 10);\n   \
    \   $num = -1 * $num / 10;\n    } else {\n      $total += $num % 10;\n      $num\
    \ = $num / 10;\n    }\n    while (intval($num) != 0) {\n      $total += $num %\
    \ 10;\n      $num = $num / 10;\n    }\n    if ($total > 0) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\necho count_nums(array()) . PHP_EOL;\necho count_nums(array(-1,\
    \ 11, -11)) . PHP_EOL;\necho count_nums(array(1, 1, 2)) . PHP_EOL;\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n\nDeprecated: Implicit conversion from float 1.1 to int loses precision\
    \ in /tmp/tmpjktelkdg.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 1.1 to int loses precision in /tmp/tmpjktelkdg.php on line 24\n3\n3\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpjktelkdg.php:43\nStack trace:\n\
    #0 /tmp/tmpjktelkdg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjktelkdg.php\
    \ on line 43\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $n) {\n\t\t\
    $digits = str_split(abs($n));\n\t\t$sum = array_sum($digits);\n\t\tif ($sum >\
    \ 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi743ymn.php:29\n\
    Stack trace:\n#0 /tmp/tmpgi743ymn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgi743ymn.php\
    \ on line 29\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $counter = 0;\n  foreach ($arr as $int) {\n\
    \    if ($int < 0) {\n      $int = -$int;\n    }\n    if ($int > 0) {\n      $counter++;\n\
    \    }\n  }\n  return $counter;\n}\n\necho count_nums(array());\necho count_nums(array(-1,\
    \ 11, -11));\necho count_nums(array(1, 1, 2));\nfunction candidate(...$args) {\n\
    \    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "033\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmeh9xj3u.php:34\n\
    Stack trace:\n#0 /tmp/tmpmeh9xj3u.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmeh9xj3u.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $item)\
    \ {\n        $sum = sum_of_digit($item);\n        if ($sum > 0) {\n          \
    \  $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_of_digit()\
    \ in /tmp/tmpivcsaui7.php:15\nStack trace:\n#0 /tmp/tmpivcsaui7.php(24): count_nums(Array)\n\
    #1 /tmp/tmpivcsaui7.php(29): candidate(Array)\n#2 /tmp/tmpivcsaui7.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpivcsaui7.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        $digit_sum = 0;\n        $abs_num = abs($num);\n        while ($abs_num\
    \ > 0) {\n            $digit_sum += $abs_num % 10;\n            $abs_num = floor($abs_num\
    \ / 10);\n        }\n        if ($digit_sum > 0) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}\necho count_nums(array()) . PHP_EOL;\n\
    echo count_nums(array(-1, 11, -11)) . PHP_EOL;\necho count_nums(array(1, 1, 2))\
    \ . PHP_EOL;\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kxxewgb.php:37\n\
    Stack trace:\n#0 /tmp/tmp6kxxewgb.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6kxxewgb.php\
    \ on line 37\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $num) {\n\t\
    \t$sum = 0;\n\t\tif ($num < 0) {\n\t\t\t$num = $num * -1;\n\t\t}\n\t\twhile ($num\
    \ != 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num = floor($num / 10);\n\t\t}\n\t\
    \tif ($sum > 0) {\n\t\t\t$count += 1;\n\t\t}\n\t}\n\treturn $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1v6j_tri.php:36\n\
    Stack trace:\n#0 /tmp/tmp1v6j_tri.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1v6j_tri.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $sum = 0;\n    foreach ($arr as $number)\
    \ {\n        $number = abs($number);\n        while ($number > 0) {\n        \
    \    $sum += $number % 10;\n            $number = (int)($number / 10);\n     \
    \   }\n    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xbwt71o.php:29\n\
    Stack trace:\n#0 /tmp/tmp2xbwt71o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2xbwt71o.php\
    \ on line 29\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $val) {\n\
    \    $sum = 0;\n    $val = $val < 0 ? -$val : $val;\n    while ($val > 0) {\n\
    \      $sum += $val % 10;\n      $val = (int)($val / 10);\n    }\n    if ($sum\
    \ > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_5k9l_j.php:33\n\
    Stack trace:\n#0 /tmp/tmpg_5k9l_j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg_5k9l_j.php\
    \ on line 33\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $arr_size = count($arr);\n    $counter =\
    \ 0;\n    for ($i = 0; $i < $arr_size; $i++) {\n        $digits_sum = 0;\n   \
    \     if ($arr[$i] < 0) {\n            $digits_sum += abs($arr[$i]) % 10;\n  \
    \          $arr[$i] = (int)(abs($arr[$i]) / 10);\n        }\n        while ($arr[$i]\
    \ > 0) {\n            $digits_sum += $arr[$i] % 10;\n            $arr[$i] = (int)($arr[$i]\
    \ / 10);\n        }\n        if ($digits_sum > 0) {\n            $counter++;\n\
    \        }\n    }\n    return $counter;\n}\n\nfunction candidate(...$args) {\n\
    \    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5v6wtjg.php:38\n\
    Stack trace:\n#0 /tmp/tmpx5v6wtjg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpx5v6wtjg.php\
    \ on line 38\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $number) {\n\
    \    $digits = str_split(abs($number));\n    $sum = 0;\n    foreach ($digits as\
    \ $digit) {\n      $sum += $digit;\n    }\n    if ($sum > 0) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaj00xpud.php:32\n\
    Stack trace:\n#0 /tmp/tmpaj00xpud.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpaj00xpud.php\
    \ on line 32\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  $count_multi = 0;\n  $numbers\
    \ = str_split($arr);\n  foreach ($numbers as $number) {\n    if ($number > 0)\
    \ {\n      $count = $count + 1;\n    }\n  }\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: str_split(): Argument #1 ($string) must\
    \ be of type string, array given in /tmp/tmpzwhn4wbp.php:15\nStack trace:\n#0\
    \ /tmp/tmpzwhn4wbp.php(15): str_split(Array)\n#1 /tmp/tmpzwhn4wbp.php(24): count_nums(Array)\n\
    #2 /tmp/tmpzwhn4wbp.php(28): candidate(Array)\n#3 /tmp/tmpzwhn4wbp.php(38): test()\n\
    #4 {main}\n  thrown in /tmp/tmpzwhn4wbp.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $total = 0;\n    foreach ($arr as $number)\
    \ {\n        if ($number < 0) {\n            $number = $number * -1;\n       \
    \ }\n        $tots = 0;\n        for ($i = 0; $i < strlen($number); $i++) {\n\
    \            $tots += substr($number, $i, 1);\n        }\n        if ($tots >\
    \ 0) {\n            $total++;\n        }\n    }\n    return $total;\n}\n\necho\
    \ \"TESTING count_nums():\\n\";\n$tests = array(\n    array(),\n    array(-1,\
    \ 11, -11),\n    array(1, 1, 2),\n);\n\nforeach ($tests as $test) {\n    printf(\"\
    %s == %d\\n\", var_export($test, true), count_nums($test));\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "TESTING count_nums():\narray (\n) == 0\narray (\n  0 => -1,\n  1 => 11,\n\
    \  2 => -11,\n) == 3\narray (\n  0 => 1,\n  1 => 1,\n  2 => 2,\n) == 3\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpwizuukt6.php:46\nStack trace:\n\
    #0 /tmp/tmpwizuukt6.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpwizuukt6.php\
    \ on line 46\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $sum = 0;\n    foreach ($arr as $num) {\n\
    \        if ($num < 0) {\n            $num = -1 * $num;\n        }\n        $sum\
    \ += $num;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpis81m_eo.php:29\n\
    Stack trace:\n#0 /tmp/tmpis81m_eo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpis81m_eo.php\
    \ on line 29\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $value)\
    \ {\n        if ($value < 0) {\n            $value = $value * -1;\n        }\n\
    \        $count += sum_digits($value);\n    }\n    return $count;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpdvkfwl4u.php:18\nStack trace:\n#0 /tmp/tmpdvkfwl4u.php(23): count_nums(Array)\n\
    #1 /tmp/tmpdvkfwl4u.php(28): candidate(Array)\n#2 /tmp/tmpdvkfwl4u.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdvkfwl4u.php on line 18\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $item)\
    \ {\n        $count += has_positive_digit_sum($item);\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_positive_digit_sum()\
    \ in /tmp/tmpfhqu26i7.php:15\nStack trace:\n#0 /tmp/tmpfhqu26i7.php(21): count_nums(Array)\n\
    #1 /tmp/tmpfhqu26i7.php(26): candidate(Array)\n#2 /tmp/tmpfhqu26i7.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfhqu26i7.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $positiveNumbers = array_filter($arr, function($num)\
    \ {\n    $sumOfDigits = 0;\n    $num = abs($num);\n    while ($num > 0) {\n  \
    \    $sumOfDigits += $num % 10;\n      $num = (int)($num / 10);\n    }\n    return\
    \ $sumOfDigits > 0;\n  });\n  return count($positiveNumbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7f38cw7.php:31\n\
    Stack trace:\n#0 /tmp/tmpa7f38cw7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpa7f38cw7.php\
    \ on line 31\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $sum = 0;\n    $count = 0;\n    foreach\
    \ ($arr as $x) {\n        if ($x < 0) {\n            $x = -1 * $x;\n        }\n\
    \        $sum = sum_digits($x);\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpjaf5yjj6.php:19\nStack trace:\n#0 /tmp/tmpjaf5yjj6.php(28): count_nums(Array)\n\
    #1 /tmp/tmpjaf5yjj6.php(33): candidate(Array)\n#2 /tmp/tmpjaf5yjj6.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjaf5yjj6.php on line 19\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $int)\
    \ {\n        $int = abs($int);\n        while ($int > 0) {\n            $count\
    \ += $int % 10;\n            $int = floor($int / 10);\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif2bbett.php:29\n\
    Stack trace:\n#0 /tmp/tmpif2bbett.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpif2bbett.php\
    \ on line 29\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\tif(empty($arr)) {\n\t\treturn 0;\n\t}\n\t\
    $count = 0;\n\tforeach($arr as $value) {\n\t\t$sum = 0;\n\t\t$num = $value;\n\t\
    \tif($num < 0) {\n\t\t\t$num = $num * -1;\n\t\t}\n\t\twhile($num >= 10) {\n\t\t\
    \t$sum += $num % 10;\n\t\t\t$num = $num / 10;\n\t\t}\n\t\t$sum += $num;\n\t\t\
    if($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n$arr = array(1,\
    \ 1, 2);\necho count_nums($arr) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fa5h2nh.php:42\n\
    Stack trace:\n#0 /tmp/tmp8fa5h2nh.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8fa5h2nh.php\
    \ on line 42\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $total = 0;\n  foreach ($arr as $num) {\n\
    \    $num = abs($num);\n    $sum = 0;\n    while ($num > 0) {\n      $sum += $num\
    \ % 10;\n      $num = floor($num / 10);\n    }\n    if ($sum > 0) {\n      $total++;\n\
    \    }\n  }\n  return $total;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v36nrgd.php:34\n\
    Stack trace:\n#0 /tmp/tmp5v36nrgd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5v36nrgd.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $number) {\n\
    \t\tif ($number < 0) {\n\t\t\t$number = $number*-1;\n\t\t}\n\t\t$sum = 0;\n\t\t\
    while ($number != 0) {\n\t\t\t$sum += $number % 10;\n\t\t\t$number = $number /\
    \ 10;\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpiqw7rgqp.php
    on line 20


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpiqw7rgqp.php
    on line 20


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpiqw7rgqp.php
    on line 20


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpiqw7rgqp.php
    on line 20


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpiqw7rgqp.php
    on line 20


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpiqw7rgqp.php
    on line 20


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpiqw7rgqp.php on line 20


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpiqw7rgqp.php
    on line 20


    Deprecated: Implicit conversion from float'
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\treturn array_reduce($arr, function($carry,\
    \ $n) {\n\t\t$digits = array_sum(array_map(function($i) {\n\t\t\treturn abs($i);\n\
    \t\t}, str_split($n)));\n\t\tif ($digits > 0) $carry++;\n\t\treturn $carry;\n\t\
    }, 0);\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, string given in /tmp/tmpfjepgwoq.php:15\nStack trace:\n#0 /tmp/tmpfjepgwoq.php(15):\
    \ abs('-')\n#1 [internal function]: {closure}('-')\n#2 /tmp/tmpfjepgwoq.php(16):\
    \ array_map(Object(Closure), Array)\n#3 [internal function]: {closure}(0, -1)\n\
    #4 /tmp/tmpfjepgwoq.php(19): array_reduce(Array, Object(Closure), 0)\n#5 /tmp/tmpfjepgwoq.php(22):\
    \ count_nums(Array)\n#6 /tmp/tmpfjepgwoq.php(27): candidate(Array)\n#7 /tmp/tmpfjepgwoq.php(36):\
    \ test()\n#8 {main}\n  thrown in /tmp/tmpfjepgwoq.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $key =>\
    \ $value) {\n        $digitsum = 0;\n        while ($value != 0) {\n         \
    \   $digitsum += $value % 10;\n            $value = intval($value / 10);\n   \
    \     }\n        if ($digitsum > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgu_l2f7.php:36\n\
    Stack trace:\n#0 /tmp/tmppgu_l2f7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppgu_l2f7.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $i = 0;\n    foreach ($arr as $key => $value)\
    \ {\n        $digits = str_split(abs($value));\n        $total = 0;\n        foreach\
    \ ($digits as $digit) {\n            $total += $digit;\n        }\n        if\
    \ ($total > 0) {\n            $i++;\n        }\n    }\n    return $i;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3auiqmxn.php:32\n\
    Stack trace:\n#0 /tmp/tmp3auiqmxn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3auiqmxn.php\
    \ on line 32\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    // Write your code here\n    $count = 0;\n\
    \    foreach ($arr as $num) {\n        $num = abs($num);\n        $sum = 0;\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qs2rxoc.php:35\n\
    Stack trace:\n#0 /tmp/tmp9qs2rxoc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9qs2rxoc.php\
    \ on line 35\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\tif (empty($arr)) {\n\t\treturn 0;\n\t}\n\t\
    $count = 0;\n\tforeach ($arr as $val) {\n\t\t$digits = get_digits($val);\n\t\t\
    $digits_sum = sum_digits($digits);\n\t\tif ($digits_sum > 0) {\n\t\t\t$count++;\n\
    \t\t}\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_digits()\
    \ in /tmp/tmp5g4k9q9p.php:18\nStack trace:\n#0 /tmp/tmp5g4k9q9p.php(28): count_nums(Array)\n\
    #1 /tmp/tmp5g4k9q9p.php(33): candidate(Array)\n#2 /tmp/tmp5g4k9q9p.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5g4k9q9p.php on line 18\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    $non_zero_sum = false;\n\
    \    foreach ($arr as $number) {\n        if ($number < 0) {\n            $number\
    \ = -$number;\n        }\n        while ($number > 0) {\n            $count +=\
    \ $number % 10;\n            $number = (int)($number / 10);\n        }\n     \
    \   if ($count > 0) {\n            $non_zero_sum = true;\n        }\n        $count\
    \ = 0;\n    }\n    if ($non_zero_sum) {\n        return 1;\n    }\n    return\
    \ 0;\n}\necho 'count_nums([1,1,2]): ' . count_nums([1,1,2]) . \"\\n\";\necho 'count_nums([1,1,1]):\
    \ ' . count_nums([1,1,1]) . \"\\n\";\necho 'count_nums([-1,1,1]): ' . count_nums([-1,1,1])\
    \ . \"\\n\";\necho 'count_nums([-1,0,1]): ' . count_nums([-1,0,1]) . \"\\n\";\n\
    echo 'count_nums([-1,11,-11]): ' . count_nums([-1,11,-11]) . \"\\n\";\necho 'count_nums([-1,-1,-1]):\
    \ ' . count_nums([-1,-1,-1]) . \"\\n\";\necho 'count_nums([]): ' . count_nums([])\
    \ . \"\\n\";\necho 'count_nums([0]): ' . count_nums([0]) . \"\\n\";\necho 'count_nums([-1]):\
    \ ' . count_nums([-1]) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "count_nums([1,1,2]): 1\ncount_nums([1,1,1]): 1\ncount_nums([-1,1,1]): 1\n\
    count_nums([-1,0,1]): 1\ncount_nums([-1,11,-11]): 1\ncount_nums([-1,-1,-1]): 1\n\
    count_nums([]): 0\ncount_nums([0]): 0\ncount_nums([-1]): 1\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmplhbiadea.php:48\nStack trace:\n#0 /tmp/tmplhbiadea.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplhbiadea.php on line 48\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    // $sum = 0;\n    // for ($i = 0; $i < count($arr);\
    \ $i++) {\n    //     $sum += array_sum(str_split($arr[$i]));\n    // }\n    //\
    \ return $sum;\n    $sum = array_sum(str_split($arr));\n    return $sum;\n}\n\
    echo count_nums(array(-1, 11, -11)) . \"\\n\";\necho count_nums(array(1, 1, 2))\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: str_split(): Argument #1 ($string) must\
    \ be of type string, array given in /tmp/tmp872m0ri5.php:18\nStack trace:\n#0\
    \ /tmp/tmp872m0ri5.php(18): str_split(Array)\n#1 /tmp/tmp872m0ri5.php(21): count_nums(Array)\n\
    #2 {main}\n  thrown in /tmp/tmp872m0ri5.php on line 18\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $sum = 0;\n        $num = $arr[$i];\n        if ($num < 0)\
    \ {\n            $num = $num * -1;\n        }\n        for ($j = 0; $j < strlen($num);\
    \ $j++) {\n            $sum += intval($num[$j]);\n        }\n        if ($sum\
    \ > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nprint(count_nums(array()).\"\
    \\n\");\nprint(count_nums(array(-1, 11, -11)).\"\\n\");\nprint(count_nums(array(1,\
    \ 1, 2)).\"\\n\");\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpaxeu3ebc.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpaxeu3ebc.php on line 21\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpaxeu3ebc.php on\
    \ line 21\n0\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpaxeu3ebc.php on line 21\n0\n\n\
    Warning: Trying to access array offset on value of type int in /tmp/tmpaxeu3ebc.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpaxeu3ebc.php on line 21\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpaxeu3ebc.php on\
    \ line 21\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpaxeu3ebc.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpaxeu3ebc.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpaxeu3ebc.php on line 21\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpaxeu3ebc.php on\
    \ line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxeu3ebc.php:40\n\
    Stack trace:\n#0 /tmp/tmpaxeu3ebc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpaxeu3ebc.php\
    \ on line 40\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value < 0) {\n      $sign = -1;\n    } else {\n      $sign = 1;\n\
    \    }\n    $value = $value * $sign;\n    $sum = 0;\n    while ($value > 0) {\n\
    \      $sum += $value % 10;\n      $value = intval($value / 10);\n    }\n    if\
    \ ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho count_nums(array(1,\
    \ 1, 2));\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnrql1f0_.php:40\n\
    Stack trace:\n#0 /tmp/tmpnrql1f0_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpnrql1f0_.php\
    \ on line 40\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$result = 0;\n\tforeach ($arr as $n) {\n\t\
    \t$digits_sum = 0;\n\t\tif ($n < 0) {\n\t\t\t$digits_sum -= $n % 10;\n\t\t\t$n\
    \ = $n / -10;\n\t\t}\n\t\twhile ($n) {\n\t\t\t$digits_sum += $n % 10;\n\t\t\t\
    $n = $n / 10;\n\t\t}\n\t\tif ($digits_sum > 0)\n\t\t\t$result++;\n\t}\n\treturn\
    \ $result;\n}\n\n$arr = array();\necho count_nums($arr) . \"\\n\";\n$arr = array(-1,\
    \ 11, -11);\necho count_nums($arr) . \"\\n\";\n$arr = array(1, 1, 2);\necho count_nums($arr)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '0


    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp_koerz5b.php
    on line 21


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp_koerz5b.php
    on line 21


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp_koerz5b.php
    on line 21


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp_koerz5b.php
    on line 21


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp_koerz5b.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp_koerz5b.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp_koerz5b.php on line 21


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp_koerz5b.php
    on line 21


    Deprecated: Implicit conversion from flo'
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $int)\
    \ {\n        $count += array_sum(str_split(abs($int)));\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81h90kah.php:26\n\
    Stack trace:\n#0 /tmp/tmp81h90kah.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp81h90kah.php\
    \ on line 26\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        if ($num < 0) {\n            $num = -$num;\n        }\n        $sum\
    \ = 0;\n        while ($num) {\n            $sum += $num % 10;\n            $num\
    \ = intval($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgaasxm5.php:36\n\
    Stack trace:\n#0 /tmp/tmpsgaasxm5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsgaasxm5.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t// write your solution here\n\t$counter =\
    \ 0;\n\tforeach ($arr as $elem) {\n\t\tif ($elem > 0) {\n\t\t\t$digits = array_map('intval',\
    \ str_split($elem));\n\t\t\t$total = array_sum($digits);\n\t\t\tif ($total > 0)\
    \ {\n\t\t\t\t$counter++;\n\t\t\t}\n\t\t} else {\n\t\t\t$digits = array_map('intval',\
    \ str_split($elem * -1));\n\t\t\t$total = array_sum($digits);\n\t\t\tif ($total\
    \ > 0) {\n\t\t\t\t$counter++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $counter;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpir07nivv.php:38\n\
    Stack trace:\n#0 /tmp/tmpir07nivv.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpir07nivv.php\
    \ on line 38\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $result = 0;\n  foreach ($arr as $value) {\n\
    \    $sum = 0;\n    if ($value < 0) {\n      $sum += $value % 10;\n      $value\
    \ = $value / 10;\n    }\n    while ($value > 0) {\n      $sum += $value % 10;\n\
    \      $value = $value / 10;\n    }\n    if ($sum > 0) {\n      $result++;\n \
    \   }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp58lvqpo3.php
    on line 21


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp58lvqpo3.php
    on line 21


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp58lvqpo3.php
    on line 21


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp58lvqpo3.php
    on line 21


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp58lvqpo3.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp58lvqpo3.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp58lvqpo3.php on line 21


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp58lvqpo3.php
    on line 21


    Deprecated: Implicit conversion from float'
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $int)\
    \ {\n        if ($int < 0) {\n            $int = 0 - $int;\n        }\n      \
    \  $nums = str_split($int);\n        $total = 0;\n        foreach ($nums as $num)\
    \ {\n            $total += $num;\n        }\n        if ($total > 0) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17ys_xle.php:36\n\
    Stack trace:\n#0 /tmp/tmp17ys_xle.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp17ys_xle.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  $total = 0;\n  foreach ($arr\
    \ as $elem) {\n    $total = 0;\n    while ($elem > 0) {\n      $total += $elem\
    \ % 10;\n      $elem = intval($elem / 10);\n    }\n    while ($elem < 0) {\n \
    \     $total += abs($elem % 10);\n      $elem = intval($elem / 10);\n    }\n \
    \   if ($total > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh4wlqox.php:37\n\
    Stack trace:\n#0 /tmp/tmpdh4wlqox.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdh4wlqox.php\
    \ on line 37\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv8n5g6h.php:21\n\
    Stack trace:\n#0 /tmp/tmpvv8n5g6h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvv8n5g6h.php\
    \ on line 21\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $value) {\n\
    \t\t$sum = 0;\n\t\t$num = abs($value);\n\t\twhile ($num != 0) {\n\t\t\t$sum +=\
    \ $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\
    \t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho count_nums(array()).\"\\\
    n\";\necho count_nums(array(-1, 11, -11)).\"\\n\";\necho count_nums(array(1, 1,\
    \ 2)).\"\\n\";\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4azv6r7.php:38\n\
    Stack trace:\n#0 /tmp/tmpf4azv6r7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf4azv6r7.php\
    \ on line 38\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $item) {\n\
    \t\t$strArr = str_split($item);\n\t\t$sum = 0;\n\t\tforeach ($strArr as $strNum)\
    \ {\n\t\t\t$sum += (int)$strNum;\n\t\t}\n\t\tif ($sum != 0) $count++;\n\t}\n\t\
    return $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94_tr8h2.php:31\n\
    Stack trace:\n#0 /tmp/tmp94_tr8h2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp94_tr8h2.php\
    \ on line 31\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $sum = 0;\n    $arr_count = count($arr);\n\
    \    for ($i = 0; $i < $arr_count; $i++) {\n        $arr[$i] = (string) $arr[$i];\n\
    \        if ($arr[$i][0] == '-') {\n            $arr[$i] = substr($arr[$i], 1);\n\
    \        }\n        $arr[$i] = str_split($arr[$i]);\n        $arr[$i] = array_sum($arr[$i]);\n\
    \        if ($arr[$i] > 0) {\n            $sum++;\n        }\n    }\n    return\
    \ $sum;\n}\nprint count_nums(array()) . PHP_EOL;\nprint count_nums(array(-1, 11,\
    \ -11)) . PHP_EOL;\nprint count_nums(array(1, 1, 2)) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz32maba8.php:38\n\
    Stack trace:\n#0 /tmp/tmpz32maba8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpz32maba8.php\
    \ on line 38\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $nums = array();\n    $digits = array();\n\
    \    foreach ($arr as $value) {\n        if ($value < 0) {\n            $value\
    \ = abs($value);\n            $temp_value = 0;\n            while ($value > 0)\
    \ {\n                $temp_value += $value % 10;\n                $value = floor($value\
    \ / 10);\n            }\n            $temp_value = -$temp_value;\n        } else\
    \ {\n            $temp_value = $value;\n        }\n        $temp_value = strval($temp_value);\n\
    \        $digits = str_split($temp_value);\n        if (array_sum($digits) > 0)\
    \ {\n            $nums[] = $temp_value;\n        }\n    }\n    return count($nums);\n\
    }\n\nprint_r(count_nums(array()));\nprint_r(count_nums(array(-1, 11, -11)));\n\
    print_r(count_nums(array(1, 1, 2)));\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "033\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8_takig.php:45\n\
    Stack trace:\n#0 /tmp/tmpv8_takig.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpv8_takig.php\
    \ on line 45\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    return sizeof(array_filter($arr, function($x)\
    \ {\n        return array_sum(str_split(abs($x))) > 0;\n    }));\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqcbakl2.php:23\n\
    Stack trace:\n#0 /tmp/tmpgqcbakl2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgqcbakl2.php\
    \ on line 23\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $num = $arr[$i];\n        $num = (int)abs($num);\n        $sum\
    \ = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n         \
    \   $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n           \
    \ $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpek9e_ps1.php:35\n\
    Stack trace:\n#0 /tmp/tmpek9e_ps1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpek9e_ps1.php\
    \ on line 35\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $int) {\n\
    \    $count += (sum_of_digits($int) > 0) ? 1 : 0;\n  }\n  return $count;\n}\n\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_of_digits()\
    \ in /tmp/tmpakmetidv.php:15\nStack trace:\n#0 /tmp/tmpakmetidv.php(21): count_nums(Array)\n\
    #1 /tmp/tmpakmetidv.php(26): candidate(Array)\n#2 /tmp/tmpakmetidv.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpakmetidv.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $x) {\n\
    \        if ($x < 0) {\n            $x = -$x;\n        }\n        $sum = 0;\n\
    \        while ($x != 0) {\n            $sum += $x % 10;\n            $x = (int)($x\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\necho \"1 \";\necho count_nums(array(1, 2, 3))\
    \ . \"\\n\";\necho \"3 \";\necho count_nums(array(1, 1, 2)) . \"\\n\";\necho \"\
    0 \";\necho count_nums(array()) . \"\\n\";\necho \"1 \";\necho count_nums(array(-1,\
    \ 11, -11)) . \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1 3\n3 3\n0 0\n1 3\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp60asepvf.php:44\nStack trace:\n#0 /tmp/tmp60asepvf.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmp60asepvf.php on line 44\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $total = 0;\n  foreach ($arr as $element)\
    \ {\n    $digits_sum = 0;\n    if ($element < 0) {\n      $digits_sum += $element;\n\
    \      $element = abs($element);\n    }\n    while ($element > 0) {\n      $digit\
    \ = $element % 10;\n      $digits_sum += $digit;\n      $element /= 10;\n    }\n\
    \    if ($digits_sum > 0) {\n      $total++;\n    }\n  }\n  return $total;\n}\n\
    \nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpt24f9182.php
    on line 21


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpt24f9182.php
    on line 21


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpt24f9182.php
    on line 21


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpt24f9182.php
    on line 21


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpt24f9182.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpt24f9182.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpt24f9182.php on line 21


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpt24f9182.php
    on line 21


    Deprecated: Implicit conversion from float'
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$num = $arr[$i];\n\t\t$sum = 0;\n\t\twhile ($num != 0) {\n\t\t\t\
    $digit = $num % 10;\n\t\t\t$sum += $digit;\n\t\t\t$num = (int)($num / 10);\n\t\
    \t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphaykfd6l.php:39\n\
    Stack trace:\n#0 /tmp/tmphaykfd6l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphaykfd6l.php\
    \ on line 39\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $number)\
    \ {\n        if (sum_digits($number) > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpdwdle0dy.php:15\nStack trace:\n#0 /tmp/tmpdwdle0dy.php(23): count_nums(Array)\n\
    #1 /tmp/tmpdwdle0dy.php(28): candidate(Array)\n#2 /tmp/tmpdwdle0dy.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdwdle0dy.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        $num_str = strval($num);\n        $num_sum = 0;\n        if ($num_str[0]\
    \ == '-') {\n            $num_sum += intval($num_str[1]);\n        }\n       \
    \ $num_sum += array_sum(str_split($num_str));\n        if ($num_sum > 0) {\n \
    \           $count++;\n        }\n    }\n    return $count;\n}\necho count_nums(array());\
    \ // 0\necho count_nums(array(-1, 11, -11)); // 1\necho count_nums(array(1, 1,\
    \ 2)); // 3\n\necho \"\\n\\n\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "033\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1v3hy13.php:39\n\
    Stack trace:\n#0 /tmp/tmpx1v3hy13.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx1v3hy13.php\
    \ on line 39\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $val) {\n\t\
    \t$sum = 0;\n\t\t$num = $val;\n\t\twhile ($num) {\n\t\t\t$sum += abs($num % 10);\n\
    \t\t\t$num = intval($num / 10);\n\t\t}\n\t\tif ($sum > 0)\n\t\t\t$count++;\n\t\
    }\n\treturn $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjt0dgyn7.php:33\n\
    Stack trace:\n#0 /tmp/tmpjt0dgyn7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjt0dgyn7.php\
    \ on line 33\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$arr = array_map('abs', $arr);\n\t$count =\
    \ 0;\n\tforeach ($arr as $num) {\n\t\t$arr2 = str_split($num);\n\t\t$sum = array_sum($arr2);\n\
    \t\tif ($sum > 0) {\n\t\t\t$count += 1;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho\
    \ count_nums(array(1, 2, 3)) . \"\\n\";\necho count_nums(array(1, 1, 1)) . \"\\\
    n\";\necho count_nums(array(1, -1, 1)) . \"\\n\";\necho count_nums(array(1, -1,\
    \ 1, -1)) . \"\\n\";\necho count_nums(array(1, 1, 2)) . \"\\n\";\necho count_nums(array(1,\
    \ 1, 1, 2)) . \"\\n\";\necho count_nums(array(10, 10, 10, 1)) . \"\\n\";\necho\
    \ count_nums(array(-1, 11, -11)) . \"\\n\";\necho count_nums(array()) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\n3\n3\n4\n3\n4\n4\n3\n0\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7_6je5ri.php:40\nStack trace:\n#0 /tmp/tmp7_6je5ri.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7_6je5ri.php on line 40\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    foreach ($arr as $num)\
    \ {\n        if ($num != 0) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\necho count_nums(array(-1, 11, -11));\necho \"<br>\";\necho count_nums(array(1,\
    \ 1, 2));\necho \"<br>\";\necho count_nums(array());\necho \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3<br>3<br>0<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppuh594yy.php:34\n\
    Stack trace:\n#0 /tmp/tmppuh594yy.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppuh594yy.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // BEGIN\n  $count = 0;\n  foreach ($arr as\
    \ $value) {\n    $count += sum($value) > 0 ? 1 : 0;\n  }\n  return $count;\n \
    \ // END\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum() in /tmp/tmpmfkcdw23.php:16\n\
    Stack trace:\n#0 /tmp/tmpmfkcdw23.php(23): count_nums(Array)\n#1 /tmp/tmpmfkcdw23.php(28):\
    \ candidate(Array)\n#2 /tmp/tmpmfkcdw23.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpmfkcdw23.php on line 16\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $non_zero_counter = 0;\n    foreach ($arr\
    \ as $int) {\n        $count = 0;\n        if ($int < 0) {\n            $count\
    \ -= $int % 10;\n            $int = (-1) * ($int / 10);\n        }\n        while\
    \ ($int != 0) {\n            $count += $int % 10;\n            $int = $int / 10;\n\
    \        }\n        if ($count != 0) {\n            $non_zero_counter++;\n   \
    \     }\n    }\n    return $non_zero_counter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp81sjbulp.php
    on line 21


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp81sjbulp.php
    on line 21


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp81sjbulp.php
    on line 21


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp81sjbulp.php
    on line 21


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp81sjbulp.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp81sjbulp.php
    on line 21


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp81sjbulp.php on line 21


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp81sjbulp.php
    on line 21


    Deprecated: Implicit conversion from float'
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_2g31fc.php:19\n\
    Stack trace:\n#0 /tmp/tmpz_2g31fc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz_2g31fc.php\
    \ on line 19\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        if (sum_of_digit($num) > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_of_digit()\
    \ in /tmp/tmpv7tdkym0.php:15\nStack trace:\n#0 /tmp/tmpv7tdkym0.php(23): count_nums(Array)\n\
    #1 /tmp/tmpv7tdkym0.php(28): candidate(Array)\n#2 /tmp/tmpv7tdkym0.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv7tdkym0.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $item) {\n\
    \    $count += sum_digits($item);\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpkh8k2fg6.php:15\nStack trace:\n#0 /tmp/tmpkh8k2fg6.php(21): count_nums(Array)\n\
    #1 /tmp/tmpkh8k2fg6.php(26): candidate(Array)\n#2 /tmp/tmpkh8k2fg6.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkh8k2fg6.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $num = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $num = $num + abs($arr[$i]);\n  }\n  return $num;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6eygcfxv.php:25\n\
    Stack trace:\n#0 /tmp/tmp6eygcfxv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6eygcfxv.php\
    \ on line 25\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $number)\
    \ {\n        if ($number >= 0) {\n            $sum = array_sum(str_split($number));\n\
    \        } else {\n            $sum = array_sum(str_split($number)) * -1;\n  \
    \      }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n \
    \   return $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40ginmg1.php:37\n\
    Stack trace:\n#0 /tmp/tmp40ginmg1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp40ginmg1.php\
    \ on line 37\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $num = abs($arr[$i]);\n        $digitSum = 0;\n        while\
    \ ($num > 0) {\n            $digitSum += $num % 10;\n            $num = floor($num\
    \ / 10);\n        }\n        if ($digitSum > 0) {\n            $count++;\n   \
    \     }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91r_0l_z.php:34\n\
    Stack trace:\n#0 /tmp/tmp91r_0l_z.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp91r_0l_z.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $item) {\n\
    \    if ($item == 0) {\n      $count += 1;\n    } else {\n      $item = abs($item);\n\
    \      $sum = 0;\n      while ($item != 0) {\n        $sum += $item % 10;\n  \
    \      $item = intval($item / 10);\n      }\n      if ($sum > 0) {\n        $count\
    \ += 1;\n      }\n    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxofq9zp.php:38\n\
    Stack trace:\n#0 /tmp/tmpnxofq9zp.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnxofq9zp.php\
    \ on line 38\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt9wiv15.php:20\n\
    Stack trace:\n#0 /tmp/tmplt9wiv15.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplt9wiv15.php\
    \ on line 20\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $counter = 0;\n    foreach ($arr as $key\
    \ => $value) {\n        $sum = 0;\n        if($value < 0) {\n            $value\
    \ = abs($value);\n            $sum += substr($value, 0, 1);\n            $value\
    \ = substr($value, 1);\n        }\n        while($value != 0) {\n            $sum\
    \ += $value % 10;\n            $value = intval($value / 10);\n        }\n    \
    \    if($sum > 0) {\n            $counter++;\n        }\n    }\n    return $counter;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string %\
    \ int in /tmp/tmpmt5klt4c.php:22\nStack trace:\n#0 /tmp/tmpmt5klt4c.php(32): count_nums(Array)\n\
    #1 /tmp/tmpmt5klt4c.php(37): candidate(Array)\n#2 /tmp/tmpmt5klt4c.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmt5klt4c.php on line 22\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $sum = 0;\n  foreach ($arr as $num) {\n  \
    \  if ($num > 0) {\n      $sum += array_sum(str_split($num));\n    } else {\n\
    \      $sum += array_sum(str_split($num * -1)) * -1;\n    }\n  }\n  return $sum;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d3i8z4q.php:29\n\
    Stack trace:\n#0 /tmp/tmp_d3i8z4q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_d3i8z4q.php\
    \ on line 29\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $total = 0;\n    foreach ($arr as $val)\
    \ {\n        $nums = array();\n        while ($val != 0) {\n            array_push($nums,\
    \ $val % 10);\n            $val = (int)($val / 10);\n        }\n        if (array_sum($nums)\
    \ > 0) {\n            $total += 1;\n        }\n    }\n    return $total;\n}\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7fvgyq1.php:36\n\
    Stack trace:\n#0 /tmp/tmpp7fvgyq1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpp7fvgyq1.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $value) {\n\
    \    $signed_digits = str_split(strval(abs($value)));\n    $signed_sum = array_sum($signed_digits);\n\
    \    if ($signed_sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9w3ql_6.php:30\n\
    Stack trace:\n#0 /tmp/tmpa9w3ql_6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa9w3ql_6.php\
    \ on line 30\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\tforeach ($arr as $k => $v) {\n\t\tif ($v <\
    \ 0) {\n\t\t\t$v = $v * -1;\n\t\t}\n\t\twhile ($v > 0) {\n\t\t\t$sum += $v % 10;\n\
    \t\t\t$v = floor($v / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t\
    }\n\t\t$sum = 0;\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args) {\n\
    \    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $count in /tmp/tmpl9qbsgyq.php on line 26\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9qbsgyq.php:34\nStack\
    \ trace:\n#0 /tmp/tmpl9qbsgyq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpl9qbsgyq.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $arr_count = count($arr);\n    $count =\
    \ 0;\n    for ($i = 0; $i < $arr_count; $i++) {\n        $x = $arr[$i];\n    \
    \    if ($x < 0) {\n            $x = ($x * -1);\n        }\n        $digits =\
    \ str_split($x);\n        $digit_count = count($digits);\n        $digit_sum =\
    \ 0;\n        for ($j = 0; $j < $digit_count; $j++) {\n            $digit_sum\
    \ += $digits[$j];\n        }\n        if ($digit_sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsoxmltoh.php:38\n\
    Stack trace:\n#0 /tmp/tmpsoxmltoh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpsoxmltoh.php\
    \ on line 38\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  return count(array_filter($arr, 'hasSumOfDigitsGreaterThanZero'));\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #2 ($callback)\
    \ must be a valid callback or null, function \"hasSumOfDigitsGreaterThanZero\"\
    \ not found or invalid function name in /tmp/tmp3n_5ux90.php:13\nStack trace:\n\
    #0 /tmp/tmp3n_5ux90.php(13): array_filter(Array, 'hasSumOfDigitsG...')\n#1 /tmp/tmp3n_5ux90.php(17):\
    \ count_nums(Array)\n#2 /tmp/tmp3n_5ux90.php(21): candidate(Array)\n#3 /tmp/tmp3n_5ux90.php(31):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp3n_5ux90.php on line 13\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $elem)\
    \ {\n        $sum = 0;\n        if ($elem < 0) {\n            $sum += $elem *\
    \ -1;\n        } else {\n            $sum += $elem;\n        }\n        if ($sum\
    \ > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$arr\
    \ = array();\n$arr2 = array(-1, 11, -11);\n$arr3 = array(1, 1, 2);\n\necho count_nums($arr);\n\
    echo \"\\n\";\necho count_nums($arr2);\necho \"\\n\";\necho count_nums($arr3);\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6l7s0ns.php:43\n\
    Stack trace:\n#0 /tmp/tmpx6l7s0ns.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpx6l7s0ns.php\
    \ on line 43\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $sum = 0;\n  foreach ($arr as $a) {\n    if\
    \ ($a < 0) {\n      $sum += abs($a % 10);\n    } else {\n      $sum += $a % 10;\n\
    \    }\n  }\n  return $sum;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppua55ocg.php:30\n\
    Stack trace:\n#0 /tmp/tmppua55ocg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppua55ocg.php\
    \ on line 30\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $number)\
    \ {\n        $sum = 0;\n        $number = str_split(abs($number));\n        foreach\
    \ ($number as $num) {\n            $sum += $num;\n        }\n        if ($sum\
    \ > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnin6thh8.php:32\n\
    Stack trace:\n#0 /tmp/tmpnin6thh8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnin6thh8.php\
    \ on line 32\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $cnt = 0;\n  foreach ($arr as $val) {\n  \
    \  $sum = 0;\n    if ($val < 0) {\n      $sum += $val * -1;\n    } else {\n  \
    \    $sum += $val;\n    }\n    $sum = array_sum(str_split($sum));\n    if ($sum\
    \ > 0) {\n      $cnt++;\n    }\n  }\n  return $cnt;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpds71zpoq.php:35\n\
    Stack trace:\n#0 /tmp/tmpds71zpoq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpds71zpoq.php\
    \ on line 35\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$num = 0;\n\tforeach ($arr as $a) {\n\t\t\
    $sum = 0;\n\t\tif ($a < 0) {\n\t\t\t$sum += $a%10;\n\t\t\t$a = ($a-$a%10)/10;\n\
    \t\t}\n\t\twhile ($a > 0) {\n\t\t\t$sum += $a%10;\n\t\t\t$a = ($a-$a%10)/10;\n\
    \t\t}\n\t\tif ($sum > 0) {\n\t\t\t$num++;\n\t\t}\n\t}\n\treturn $num;\n}\necho\
    \ count_nums(array(-1, 11, -11)).\"\\n\";\necho count_nums(array(1, 1, 2)).\"\\\
    n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f23vcem.php:42\n\
    Stack trace:\n#0 /tmp/tmp3f23vcem.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3f23vcem.php\
    \ on line 42\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  return array_reduce($arr, function($c, $n)\
    \ {\n    return $c + ($n >= 0 ? (int) ($n > 0) : (int) ($n < 0));\n  }, 0);\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ini8rks.php:24\n\
    Stack trace:\n#0 /tmp/tmp3ini8rks.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3ini8rks.php\
    \ on line 24\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    foreach ($arr as $num)\
    \ {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n\
    \            $sum += $num % 10;\n            $num = intval($num / 10);\n     \
    \   }\n        if ($sum > 0) {\n            $result++;\n        }\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qxtab5m.php:34\n\
    Stack trace:\n#0 /tmp/tmp9qxtab5m.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9qxtab5m.php\
    \ on line 34\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $result = 0;\n  foreach ($arr as $value) {\n\
    \    if (array_sum(str_split($value)) > 0) {\n      $result++;\n    }\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0e285t3y.php:28\n\
    Stack trace:\n#0 /tmp/tmp0e285t3y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0e285t3y.php\
    \ on line 28\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t// Fill in the missing code\n\t$count = 0;\n\
    \tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\t\t\t$sum +=\
    \ $num * -1;\n\t\t} else {\n\t\t\t$sum += $num;\n\t\t}\n\t\t$count += $sum;\n\t\
    }\n\techo $count;\n}\n\ncount_nums(array());\necho \"\\n\";\ncount_nums(array(-1,\
    \ 11, -11));\necho \"\\n\";\ncount_nums(array(1, 1, 2));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n23\n4\n0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfr8hoge.php:38\n\
    Stack trace:\n#0 /tmp/tmpzfr8hoge.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzfr8hoge.php\
    \ on line 38\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (empty($arr)) {\n        return 0;\n\
    \    }\n    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n   \
    \     $absNum = abs($num);\n        while ($absNum) {\n            $sum += $absNum\
    \ % 10;\n            $absNum = (int)($absNum / 10);\n        }\n        if ($sum)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$arr =\
    \ array(-1, 11, -11);\nprint(count_nums($arr));\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1yy1aha.php:39\n\
    Stack trace:\n#0 /tmp/tmpe1yy1aha.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpe1yy1aha.php\
    \ on line 39\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $total_cnt = 0;\n    $arr_cnt = count($arr);\n\
    \    for ($i = 0; $i < $arr_cnt; $i++) {\n        $num = $arr[$i];\n        $num_cnt\
    \ = 0;\n        while ($num != 0) {\n            $digit = $num % 10;\n       \
    \     $num_cnt += $digit;\n            $num = (int)($num / 10);\n        }\n \
    \       if ($num_cnt > 0) {\n            $total_cnt++;\n        }\n    }\n   \
    \ return $total_cnt;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcxtin78.php:39\n\
    Stack trace:\n#0 /tmp/tmpvcxtin78.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvcxtin78.php\
    \ on line 39\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $sum = 0;\n        $num = $arr[$i];\n        if ($num == 0)\
    \ {\n            $count++;\n        } else if ($num < 0) {\n            $num =\
    \ $num * -1;\n            while ($num != 0) {\n                $sum += $num %\
    \ 10;\n                $num = floor($num / 10);\n            }\n            if\
    \ ($sum > 0) {\n                $count++;\n            }\n        } else {\n \
    \           while ($num != 0) {\n                $sum += $num % 10;\n        \
    \        $num = floor($num / 10);\n            }\n            if ($sum > 0) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrit89z7.php:46\n\
    Stack trace:\n#0 /tmp/tmpdrit89z7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdrit89z7.php\
    \ on line 46\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$sum_digits = 0;\n\t$signed_digits = 0;\n\t\
    foreach ($arr as $n) {\n\t\t$sum_digits += sum_digits($n);\n\t\t$signed_digits\
    \ += abs($n);\n\t}\n\treturn $sum_digits + $signed_digits;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpyh4s0hj4.php:16\nStack trace:\n#0 /tmp/tmpyh4s0hj4.php(23): count_nums(Array)\n\
    #1 /tmp/tmpyh4s0hj4.php(28): candidate(Array)\n#2 /tmp/tmpyh4s0hj4.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyh4s0hj4.php on line 16\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $value) {\n\
    \    $digits = get_signed_digits($value);\n    $sum = array_sum($digits);\n  \
    \  if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_signed_digits()\
    \ in /tmp/tmpm86dmzrq.php:15\nStack trace:\n#0 /tmp/tmpm86dmzrq.php(25): count_nums(Array)\n\
    #1 /tmp/tmpm86dmzrq.php(30): candidate(Array)\n#2 /tmp/tmpm86dmzrq.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm86dmzrq.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $sum = 0;\n  foreach ($arr as $value) {\n\
    \    $sum += count_digits($value);\n  }\n  return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_digits()\
    \ in /tmp/tmpg6fkjeff.php:15\nStack trace:\n#0 /tmp/tmpg6fkjeff.php(20): count_nums(Array)\n\
    #1 /tmp/tmpg6fkjeff.php(25): candidate(Array)\n#2 /tmp/tmpg6fkjeff.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg6fkjeff.php on line 15\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiizjb3s.php:21\n\
    Stack trace:\n#0 /tmp/tmpxiizjb3s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxiizjb3s.php\
    \ on line 21\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $num = abs($arr[$i]);\n        $sum = 0;\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = intval($num / 10);\n\
    \        }\n        if ($sum > 0) $count++;\n    }\n    return $count;\n}\n\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6uq2t6_.php:32\n\
    Stack trace:\n#0 /tmp/tmpi6uq2t6_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi6uq2t6_.php\
    \ on line 32\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // your solution here\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3ftyiro.php:20\n\
    Stack trace:\n#0 /tmp/tmpe3ftyiro.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe3ftyiro.php\
    \ on line 20\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$final_array = array();\n\tforeach ($arr as\
    \ $value) {\n\t\t$final_array[] = abs($value);\n\t}\n\treturn array_sum($final_array);\n\
    }\n$a = array(1, 2, 3, 4, 5);\n$b = array(-1, -2, -3, -4, -5);\n$c = array(5,\
    \ 6, -1, -2, -3, -4, -5);\n\necho count_nums($a);\necho \"<br>\";\necho count_nums($b);\n\
    echo \"<br>\";\necho count_nums($c);\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15<br>15<br>26<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1e8wayvq.php:36\n\
    Stack trace:\n#0 /tmp/tmp1e8wayvq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1e8wayvq.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $num) {\n\t\
    \tif ($num < 0) {\n\t\t\t$sum += $num;\n\t\t} else {\n\t\t\t$sum = array_sum(str_split($num));\n\
    \t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\
    \nprint_r(count_nums(array(1, 1, 2)));\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nWarning: Undefined variable $sum in /tmp/tmp8_431v29.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_431v29.php:36\nStack\
    \ trace:\n#0 /tmp/tmp8_431v29.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8_431v29.php\
    \ on line 36\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        if ($num < 0) {\n            $num = -1 * $num;\n        }\n     \
    \   $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n    \
    \        $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglmqi4kr.php:35\n\
    Stack trace:\n#0 /tmp/tmpglmqi4kr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpglmqi4kr.php\
    \ on line 35\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $output = 0;\n  foreach ($arr as $value) {\n\
    \    $digits = str_split($value);\n    if ($digits[0] === '-') {\n      $digits[0]\
    \ = substr($digits[0], 1);\n    }\n    $output += array_sum($digits);\n  }\n \
    \ return $output;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqybp76fb.php:29\n\
    Stack trace:\n#0 /tmp/tmpqybp76fb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqybp76fb.php\
    \ on line 29\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $i = 0;\n    $count = 0;\n    while ($i\
    \ < count($arr)) {\n        $sum = 0;\n        while ($arr[$i] > 0) {\n      \
    \      $sum += $arr[$i] % 10;\n            $arr[$i] = (int)($arr[$i] / 10);\n\
    \        }\n        while ($arr[$i] < 0) {\n            $sum += (-1) * ($arr[$i]\
    \ % 10);\n            $arr[$i] = (int)($arr[$i] / 10);\n        }\n        if\
    \ ($sum > 0) {\n            $count++;\n        }\n        $i++;\n    }\n    return\
    \ $count;\n}\n$arr = array(-1, 11, -11);\n$result = count_nums($arr);\necho \"\
    $result\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gi26fbq.php:41\n\
    Stack trace:\n#0 /tmp/tmp3gi26fbq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp3gi26fbq.php\
    \ on line 41\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $num_nums = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $num = $arr[$i];\n        $sum = 0;\n        if ($num < 0)\
    \ {\n            $sum = $num % 10;\n            $num = $num / -10;\n        }\n\
    \        while ($num != 0) {\n            $sum += $num % 10;\n            $num\
    \ = $num / 10;\n        }\n        if ($sum > 0) {\n            $num_nums++;\n\
    \        }\n    }\n    return $num_nums;\n}\nfunction candidate(...$args) {\n\
    \    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp3guv_j9w.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp3guv_j9w.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp3guv_j9w.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp3guv_j9w.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp3guv_j9w.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp3guv_j9w.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp3guv_j9w.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp3guv_j9w.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $value) {\n\
    \t\t$s = 0;\n\t\tfor ($i = $value; $i > 0; $i = intval($i / 10)) {\n\t\t\t$s +=\
    \ $i % 10;\n\t\t}\n\t\tif ($s > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsum47npn.php:36\n\
    Stack trace:\n#0 /tmp/tmpsum47npn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsum47npn.php\
    \ on line 36\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $n = count($arr);\n    $count = 0;\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        $num = $arr[$i];\n        $sum = 0;\n\
    \        while ($num != 0) {\n            $sum += $num % 10;\n            $num\
    \ = $num / 10;\n        }\n        if ($sum > 0) {\n            $count += 1;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float -0.1 to int loses precision in /tmp/tmpa7lrgw6n.php
    on line 19


    Deprecated: Implicit conversion from float -0.01 to int loses precision in /tmp/tmpa7lrgw6n.php
    on line 19


    Deprecated: Implicit conversion from float -0.001 to int loses precision in /tmp/tmpa7lrgw6n.php
    on line 19


    Deprecated: Implicit conversion from float -0.0001 to int loses precision in /tmp/tmpa7lrgw6n.php
    on line 19


    Deprecated: Implicit conversion from float -1.0E-5 to int loses precision in /tmp/tmpa7lrgw6n.php
    on line 19


    Deprecated: Implicit conversion from float -1.0000000000000002E-6 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000002E-7 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000002E-8 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000003E-9 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000003E-10 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000003E-11 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000002E-12 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000002E-13 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000002E-14 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0E-15 to int loses precision in
    /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0000000000000001E-16 to int loses
    precision in /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conversion from float -1.0E-17 to int loses precision in
    /tmp/tmpa7lrgw6n.php on line 19


    Deprecated: Implicit conv'
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    foreach ($arr as $value)\
    \ {\n        $check = $value < 0 ? $value * -1 : $value;\n        $sum = 0;\n\
    \        while ($check) {\n            $sum += $check % 10;\n            $check\
    \ = floor($check / 10);\n        }\n        if ($sum > 0) {\n            $result++;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3obalvym.php:33\n\
    Stack trace:\n#0 /tmp/tmp3obalvym.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3obalvym.php\
    \ on line 33\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    //your code here...\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q0zvhmd.php:21\n\
    Stack trace:\n#0 /tmp/tmp8q0zvhmd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8q0zvhmd.php\
    \ on line 21\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  return array_reduce($arr, function($count,\
    \ $n) {\n    $sd = ($n < 0) ? -1 * $n % 10 : $n % 10;\n    if ($sd > 0) {\n  \
    \    $count++;\n    }\n    return $count;\n  }, 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5pur3jp.php:28\n\
    Stack trace:\n#0 /tmp/tmpv5pur3jp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv5pur3jp.php\
    \ on line 28\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $nums_with_sum_gt_0 = array_filter($arr, function($val)\
    \ {\n    if ($val < 0) {\n      $val = substr($val, 1);\n    }\n    return array_sum(str_split($val))\
    \ > 0;\n  });\n  return count($nums_with_sum_gt_0);\n}\n\necho count_nums(array())\
    \ . \"\\n\";\necho count_nums(array(-1, 11, -11)) . \"\\n\";\necho count_nums(array(1,\
    \ 1, 2)) . \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3kntm0o.php:31\n\
    Stack trace:\n#0 /tmp/tmpf3kntm0o.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf3kntm0o.php\
    \ on line 31\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $num) {\n\
    \    $num_abs = abs($num);\n    $sum = 0;\n    while ($num_abs > 0) {\n      $sum\
    \ += $num_abs % 10;\n      $num_abs = intval($num_abs / 10);\n    }\n    if ($sum\
    \ > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv0g1jlx.php:33\n\
    Stack trace:\n#0 /tmp/tmphv0g1jlx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphv0g1jlx.php\
    \ on line 33\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        if ($num < 0) {\n            $count += (abs($num) % 10) == 0 ? 1\
    \ : 0;\n        } else {\n            $count += ($num % 10) == 0 ? 1 : 0;\n  \
    \      }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hu66tcc.php:29\n\
    Stack trace:\n#0 /tmp/tmp8hu66tcc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8hu66tcc.php\
    \ on line 29\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $num = $arr[$i];\n        if ($num < 0) {\n            $num\
    \ = 0 - $num;\n        }\n        $sum = 0;\n        while ($num > 0) {\n    \
    \        $sum += $num % 10;\n            $num = intval($num / 10);\n        }\n\
    \        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnr0ixyfs.php:36\n\
    Stack trace:\n#0 /tmp/tmpnr0ixyfs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnr0ixyfs.php\
    \ on line 36\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $value) {\n\
    \t\tif ($value < 0) {\n\t\t\t$num = substr($value, 1);\n\t\t} else {\n\t\t\t$num\
    \ = $value;\n\t\t}\n\t\t$sum = 0;\n\t\tfor ($i = 0; $i < strlen($num); $i++) {\n\
    \t\t\t$sum += substr($num, $i, 1);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\
    \t\t}\n\t}\n\treturn $count;\n}\nprint_r(count_nums(array()));\nprint_r(count_nums(array(-1,\
    \ 11, -11)));\nprint_r(count_nums(array(1, 1, 2)));\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "033\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8co_t1cd.php:39\n\
    Stack trace:\n#0 /tmp/tmp8co_t1cd.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8co_t1cd.php\
    \ on line 39\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    $arr_len = count($arr);\n\
    \    for ($i = 0; $i < $arr_len; $i++) {\n        $num = $arr[$i];\n        $abs_num\
    \ = abs($num);\n        $has_num = FALSE;\n        $digit_sum = 0;\n        while\
    \ ($abs_num > 0) {\n            $digit = $abs_num % 10;\n            $digit_sum\
    \ += $digit;\n            $abs_num = ($abs_num - $digit) / 10;\n        }\n  \
    \      if ($digit_sum > 0) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rr94a68.php:37\n\
    Stack trace:\n#0 /tmp/tmp8rr94a68.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8rr94a68.php\
    \ on line 37\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    $sum = 0;\n    foreach\
    \ ($arr as $key => $val) {\n        if ($val < 0) {\n            $sum += $val\
    \ * -1;\n        } else {\n            $sum += $val;\n        }\n        if ($sum\
    \ != 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgj65j9v_.php:33\n\
    Stack trace:\n#0 /tmp/tmpgj65j9v_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgj65j9v_.php\
    \ on line 33\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    // YOUR CODE HERE\n    return 0;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwu0h0y8g.php:23\n\
    Stack trace:\n#0 /tmp/tmpwu0h0y8g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwu0h0y8g.php\
    \ on line 23\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $num) {\n\t\
    \t$sum = 0;\n\t\t$sign = 1;\n\t\tif ($num < 0) {\n\t\t\t$sign = -1;\n\t\t\t$num\
    \ = -$num;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num\
    \ = (int)($num / 10);\n\t\t}\n\t\tif ($sum * $sign > 0) {\n\t\t\t$count++;\n\t\
    \t}\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0kqw1akx.php:42\n\
    Stack trace:\n#0 /tmp/tmp0kqw1akx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0kqw1akx.php\
    \ on line 42\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\tif (empty($arr)) {\n\t\treturn 0;\n\t}\n\t\
    $count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\t$value = abs($value);\n\
    \t\twhile ($value != 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = floor($value\
    \ / 10);\n\t\t}\n\t\tif ($sum != 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\nvar_dump(count_nums(array()));\nvar_dump(count_nums(array(-1, 11, -11)));\n\
    var_dump(count_nums(array(1, 1, 2)));\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(0)\nint(3)\nint(3)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1cgxaq2j.php:40\nStack trace:\n#0 /tmp/tmp1cgxaq2j.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1cgxaq2j.php on line 40\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvceh0d_l.php:20\n\
    Stack trace:\n#0 /tmp/tmpvceh0d_l.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvceh0d_l.php\
    \ on line 20\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $counter = 0;\n  foreach ($arr as $i) {\n\
    \    if ($i < 0) {\n      $i = (-1 * $i);\n    }\n    $x = $i;\n    $sum = 0;\n\
    \    while ($x > 0) {\n      $sum += $x % 10;\n      $x = floor($x / 10);\n  \
    \  }\n    if ($sum > 0) {\n      $counter++;\n    }\n  }\n  return $counter;\n\
    }\nprint_r(count_nums(array(0, -1, 11, -11)));\nfunction candidate(...$args) {\n\
    \    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5yay19y.php:37\n\
    Stack trace:\n#0 /tmp/tmpp5yay19y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpp5yay19y.php\
    \ on line 37\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$temp_sum = 0;\n\t\t$temp_arr = str_split($arr[$i]);\n\t\tfor ($j\
    \ = 0; $j < count($temp_arr); $j++) {\n\t\t\t$temp_sum += $temp_arr[$j];\n\t\t\
    }\n\t\tif ($temp_sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\
    echo \"<p>EX1.1</p>\";\necho \"<p>EX1.1.1</p>\";\necho count_nums(array());\n\
    echo \"<p>EX1.1.2</p>\";\necho count_nums(array(-1, 11, -11));\necho \"<p>EX1.1.3</p>\"\
    ;\necho count_nums(array(1, 1, 2));\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<p>EX1.1</p><p>EX1.1.1</p>0<p>EX1.1.2</p>\nFatal error: Uncaught TypeError:\
    \ Unsupported operand types: int + string in /tmp/tmphg7m7opi.php:18\nStack trace:\n\
    #0 /tmp/tmphg7m7opi.php(30): count_nums(Array)\n#1 {main}\n  thrown in /tmp/tmphg7m7opi.php\
    \ on line 18\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $num = 0;\n  foreach ($arr as $value) {\n\
    \    $sum = sum_digits($value);\n    if ($sum > 0) {\n      $num++;\n    }\n \
    \ }\n  return $num;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpqs3af9mz.php:15\nStack trace:\n#0 /tmp/tmpqs3af9mz.php(24): count_nums(Array)\n\
    #1 /tmp/tmpqs3af9mz.php(29): candidate(Array)\n#2 /tmp/tmpqs3af9mz.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqs3af9mz.php on line 15\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $sum = 0;\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value < 0) {\n            $value = -$value;\n      \
    \  }\n        while ($value != 0) {\n            $sum += $value % 10;\n      \
    \      $value = floor($value / 10);\n        }\n    }\n    echo $sum . \"\\n\"\
    ;\n}\ncount_nums(array());\ncount_nums(array(-1, 11, -11));\ncount_nums(array(1,\
    \ 1, 2));\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n5\n4\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjgs5rx4.php:34\n\
    Stack trace:\n#0 /tmp/tmpkjgs5rx4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkjgs5rx4.php\
    \ on line 34\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$sum = 0;\n\t\t$num = strval($arr[$i]);\n\t\t$len = strlen($num);\n\
    \t\tfor ($j = 0; $j < $len; $j++) {\n\t\t\t$sum += $num[$j];\n\t\t}\n\t\tif ($sum\
    \ > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n$arr = array(-1, 11,\
    \ -11);\necho count_nums($arr);\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpea3gtgdt.php:19\nStack trace:\n#0 /tmp/tmpea3gtgdt.php(28): count_nums(Array)\n\
    #1 {main}\n  thrown in /tmp/tmpea3gtgdt.php on line 19\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\tif (count($arr) == 0) {\n\t\treturn 0;\n\t\
    } else if (array_sum($arr) > 0) {\n\t\treturn count($arr);\n\t} else {\n\t\treturn\
    \ 1;\n\t}\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpooibys04.php:27\n\
    Stack trace:\n#0 /tmp/tmpooibys04.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpooibys04.php\
    \ on line 27\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sum = 0;\n    if ($arr[$i] < 0) {\n      $sum = $sum + $arr[$i]*-1;\n\
    \    } else {\n      $sum = $sum + $arr[$i];\n    }\n    while ($sum >= 10) {\n\
    \      $sum = $sum / 10;\n    }\n    if ($sum != 0) {\n      $count++;\n    }\n\
    \  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieh5hp5y.php:37\n\
    Stack trace:\n#0 /tmp/tmpieh5hp5y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpieh5hp5y.php\
    \ on line 37\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $arrResult = array();\n  for ($i = 0; $i <\
    \ count($arr); $i++) {\n    $sum = 0;\n    $number = $arr[$i];\n    while ($number\
    \ > 0) {\n      $sum += $number % 10;\n      $number = floor($number / 10);\n\
    \    }\n    if ($sum > 0) {\n      array_push($arrResult, $arr[$i]);\n    }\n\
    \  }\n  return count($arrResult);\n}\n$arr = array(1, 1, 2);\n$number = -123;\n\
    $sum = 0;\nwhile ($number > 0) {\n  $sum += $number % 10;\n  $number = floor($number\
    \ / 10);\n}\necho 'count_nums('.json_encode($arr).')'. '<br>';\necho 'count_nums('.json_encode($arr).')\
    \ => '. count_nums($arr). '<br>';\necho 'sum_nums('.json_encode($number).') =>\
    \ '. $sum. '<br>';\necho '<br>';\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "count_nums([1,1,2])<br>count_nums([1,1,2]) => 3<br>sum_nums(-123) => 0<br><br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0ltyh5dm.php:48\nStack\
    \ trace:\n#0 /tmp/tmp0ltyh5dm.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0ltyh5dm.php\
    \ on line 48\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    foreach ($arr as $value)\
    \ {\n        $sum = 0;\n        $n = abs($value);\n        while ($n > 0) {\n\
    \            $sum += $n % 10;\n            $n = (int)($n / 10);\n        }\n \
    \       if ($sum != 0) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tocz87w.php:34\n\
    Stack trace:\n#0 /tmp/tmp8tocz87w.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8tocz87w.php\
    \ on line 34\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $number) {\n\
    \    if ($number >= 0) {\n      $sum = array_sum(str_split($number));\n    } else\
    \ {\n      $sum = array_sum(str_split(abs($number)));\n      $sum = -$sum;\n \
    \   }\n    if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\
    echo count_nums(array());\necho \"\\n\";\necho count_nums(array(-1, 11, -11));\n\
    echo \"\\n\";\necho count_nums(array(1, 1, 2));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n1\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo943nzlb.php:44\n\
    Stack trace:\n#0 /tmp/tmpo943nzlb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpo943nzlb.php\
    \ on line 44\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $v) {\n  \
    \  $sum = 0;\n    $sign = 1;\n    if ($v < 0) {\n      $sign = -1;\n      $v =\
    \ -$v;\n    }\n    while ($v != 0) {\n      $sum += $v % 10;\n      $v = intval($v\
    \ / 10);\n    }\n    if ($sum * $sign > 0) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqu61w7c.php:42\n\
    Stack trace:\n#0 /tmp/tmpnqu61w7c.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnqu61w7c.php\
    \ on line 42\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $positive = array_filter($arr, function($x)\
    \ {\n        return $x > 0;\n    });\n    $positive_sum = array_map(function($x)\
    \ {\n        return array_sum(str_split($x));\n    }, $positive);\n    $positive_sum\
    \ = array_filter($positive_sum, function($x) {\n        return $x > 0;\n    });\n\
    \    return count($positive_sum);\n}\necho '>>> ' . count_nums(array()) . \"\\\
    n\";\necho '>>> ' . count_nums(array(-1, 11, -11)) . \"\\n\";\necho '>>> ' . count_nums(array(1,\
    \ 1, 2)) . \"\\n\";\n\necho '-' . \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ">>> 0\n>>> 1\n>>> 3\n-\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp567j1vzu.php:40\nStack trace:\n#0 /tmp/tmp567j1vzu.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp567j1vzu.php on line 40\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $array = [];\n  $array = str_split(implode($arr));\n\
    \  return array_sum($array);\n}\n\nvar_dump(count_nums([]));\nvar_dump(count_nums([-1,\
    \ 11, -11]));\nvar_dump(count_nums([1, 1, 2]));\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(0)\nint(5)\nint(4)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp8marqweh.php:27\nStack trace:\n#0 /tmp/tmp8marqweh.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8marqweh.php on line 27\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $a) {\n\t\t\
    $sum = 0;\n\t\t$a = abs($a);\n\t\twhile ($a > 0) {\n\t\t\t$sum += $a % 10;\n\t\
    \t\t$a = (int)($a / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\
    \t}\n\treturn $count;\n}\n\n$arr = array(-1, 11, -11);\n$count = count_nums($arr);\n\
    print_r($count);\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d0vyiy8.php:38\n\
    Stack trace:\n#0 /tmp/tmp_d0vyiy8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_d0vyiy8.php\
    \ on line 38\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiizjb3s.php:21\n\
    Stack trace:\n#0 /tmp/tmpxiizjb3s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxiizjb3s.php\
    \ on line 21\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $x) {\n\
    \        $sum = 0;\n        while ($x != 0) {\n            $sum += $x % 10;\n\
    \            $x = intval($x / 10);\n        }\n        if ($sum > 0) $count++;\n\
    \    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnaa7lke.php:35\n\
    Stack trace:\n#0 /tmp/tmppnaa7lke.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppnaa7lke.php\
    \ on line 35\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $sum = 0;\n    $positive = 0;\n    $negative\
    \ = 0;\n    foreach ($arr as $number) {\n        if ($number < 0) {\n        \
    \    $negative = substr($number, 1);\n            $sum += substr($number, 1);\n\
    \        } else {\n            $positive = $number;\n            $sum += $number;\n\
    \        }\n    }\n    return $sum;\n}\nvar_dump(count_nums(array()));\nvar_dump(count_nums(array(-1,\
    \ 11, -11)));\nvar_dump(count_nums(array(1, 1, 2)));\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(0)\nint(23)\nint(4)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpep1r5_iy.php:37\nStack trace:\n#0 /tmp/tmpep1r5_iy.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpep1r5_iy.php on line 37\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $result = 0;\n  foreach ($arr as $value) {\n\
    \    $sum = 0;\n    $temp = abs($value);\n    while ($temp > 0) {\n      $sum\
    \ += $temp % 10;\n      $temp = intval($temp / 10);\n    }\n    if ($sum > 0)\
    \ {\n      $result++;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyza6xm68.php:34\n\
    Stack trace:\n#0 /tmp/tmpyza6xm68.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyza6xm68.php\
    \ on line 34\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  return 0;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzp2py01m.php:22\n\
    Stack trace:\n#0 /tmp/tmpzp2py01m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzp2py01m.php\
    \ on line 22\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n\
    \            $rem = $num % 10;\n            $sum += $rem;\n            $num =\
    \ floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2f9klhzu.php:35\n\
    Stack trace:\n#0 /tmp/tmp2f9klhzu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2f9klhzu.php\
    \ on line 35\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $val)\
    \ {\n        $temp = array_map('intval', str_split(abs($val)));\n        $sum\
    \ = array_sum($temp);\n        if ($sum > 0) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenydcuti.php:29\n\
    Stack trace:\n#0 /tmp/tmpenydcuti.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpenydcuti.php\
    \ on line 29\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $n) {\n  \
    \  if ($n < 0) {\n      $n = $n * -1;\n    }\n    $sum = 0;\n    while ($n > 0)\
    \ {\n      $sum += $n % 10;\n      $n = (int)($n / 10);\n    }\n    if ($sum >\
    \ 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ec8gcdr.php:35\n\
    Stack trace:\n#0 /tmp/tmp4ec8gcdr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4ec8gcdr.php\
    \ on line 35\n"
  timestamp: 1660004010
- exit_code: -1
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $sum = 0;\n        if ($arr[$i] < 0) {\n            $sum +=\
    \ $arr[$i] * -1;\n        } else {\n            $sum += $arr[$i];\n        }\n\
    \        while ($sum > 0) {\n            $digit = $sum % 10;\n            $sum\
    \ = floor($sum / 10);\n            $sum += $digit;\n        }\n        if ($sum\
    \ > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho\
    \ count_nums(array(1, 1, 2)) . \"<br>\";\necho count_nums(array()) . \"<br>\"\
    ;\necho count_nums(array(-1, 11, -11)) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660004015
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t\n}\n\nfunction candidate(...$args) {\n  \
    \  return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fb3kqct.php:21\n\
    Stack trace:\n#0 /tmp/tmp5fb3kqct.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5fb3kqct.php\
    \ on line 21\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (empty($arr)) {\n        return 0;\n\
    \    }\n    $result = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n       \
    \ $tmp = 0;\n        $val = abs($arr[$i]);\n        while ($val > 0) {\n     \
    \       $tmp += $val % 10;\n            $val = (int)($val / 10);\n        }\n\
    \        if ($tmp > 0) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = array(-1, 11, -11);\necho count_nums($arr) . \"\\n\";\n\
    $arr = array(1, 1, 2);\necho count_nums($arr) . \"\\n\";\n$arr = array();\necho\
    \ count_nums($arr) . \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\n3\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_k57fsf.php:43\n\
    Stack trace:\n#0 /tmp/tmpw_k57fsf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpw_k57fsf.php\
    \ on line 43\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $number) {\n\
    \    $count += strlen(ltrim($number, '-')) > 1 ? 1 : 0;\n  }\n  return $count;\n\
    }\n\n$input = array(1234, -43, 0, -1, 12, 4);\necho count_nums($input);\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxym60qq7.php:29\n\
    Stack trace:\n#0 /tmp/tmpxym60qq7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxym60qq7.php\
    \ on line 29\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if(empty($arr)) {\n        return 0;\n \
    \   }\n\n    $count = 0;\n    foreach($arr as $num) {\n        $sum = sum_digits($num);\n\
    \        if($sum > 0) {\n            $count++;\n        }\n    }\n\n    return\
    \ $count;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpg1gk5zsv.php:19\nStack trace:\n#0 /tmp/tmpg1gk5zsv.php(29): count_nums(Array)\n\
    #1 /tmp/tmpg1gk5zsv.php(34): candidate(Array)\n#2 /tmp/tmpg1gk5zsv.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg1gk5zsv.php on line 19\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $nums = 0;\n    foreach ($arr as $num) {\n\
    \        if ($num < 0) {\n            $num = $num * -1;\n        }\n        if\
    \ ($num > 0) {\n            $sum = 0;\n            while ($num != 0) {\n     \
    \           $sum += $num % 10;\n                $num = floor($num / 10);\n   \
    \         }\n            if ($sum > 0) {\n                $nums++;\n         \
    \   }\n        }\n    }\n    return $nums;\n}\nfunction candidate(...$args) {\n\
    \    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v8xpvbh.php:37\n\
    Stack trace:\n#0 /tmp/tmp3v8xpvbh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3v8xpvbh.php\
    \ on line 37\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_2g31fc.php:19\n\
    Stack trace:\n#0 /tmp/tmpz_2g31fc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz_2g31fc.php\
    \ on line 19\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $val) {\n\t\
    \t$sum = 0;\n\t\t$val = abs($val);\n\t\twhile ($val > 0) {\n\t\t\t$digit = $val\
    \ % 10;\n\t\t\t$sum += $digit;\n\t\t\t$val = floor($val / 10);\n\t\t}\n\t\tif\
    \ ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\necho count_nums(array()).\"\
    \\n\";\necho count_nums(array(-1, 11, -11)).\"\\n\";\necho count_nums(array(1,\
    \ 1, 2)).\"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_xckrjx.php:37\n\
    Stack trace:\n#0 /tmp/tmpc_xckrjx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpc_xckrjx.php\
    \ on line 37\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvceh0d_l.php:20\n\
    Stack trace:\n#0 /tmp/tmpvceh0d_l.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvceh0d_l.php\
    \ on line 20\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_2g31fc.php:19\n\
    Stack trace:\n#0 /tmp/tmpz_2g31fc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz_2g31fc.php\
    \ on line 19\n"
  timestamp: 1660004009
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $n) {\n\t\t\
    if ($n == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ($n < 0) {\n\t\t\t$n = $n * -1;\n\
    \t\t}\n\t\t$sum = 0;\n\t\twhile ($n != 0) {\n\t\t\t$sum += $n % 10;\n\t\t\t$n\
    \ = $n / 10;\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpdoz1ou0x.php
    on line 23


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpdoz1ou0x.php
    on line 23


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpdoz1ou0x.php
    on line 23


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpdoz1ou0x.php
    on line 23


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpdoz1ou0x.php
    on line 23


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpdoz1ou0x.php
    on line 23


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpdoz1ou0x.php on line 23


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpdoz1ou0x.php
    on line 23


    Deprecated: Implicit conversion from float'
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (empty($arr)) return 0;\n    $count =\
    \ 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if ($value <\
    \ 0) {\n            $sum += $value[0];\n            $value = substr($value, 1);\n\
    \        }\n        while ($value != 0) {\n            $sum += $value % 10;\n\
    \            $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n\nprint count_nums(array())\
    \ . \"\\n\";\nprint count_nums(array(-1, 11, -11)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, 2)) . \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n\nWarning: Trying to access array offset on value of type int in /tmp/tmppunivorv.php\
    \ on line 18\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmppunivorv.php on line 18\n3\n3\n\nWarning: Trying to access array offset\
    \ on value of type int in /tmp/tmppunivorv.php on line 18\n\nWarning: Trying to\
    \ access array offset on value of type int in /tmp/tmppunivorv.php on line 18\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmppunivorv.php:41\nStack\
    \ trace:\n#0 /tmp/tmppunivorv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppunivorv.php\
    \ on line 41\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        $sum = 0;\n        foreach (str_split($num) as $digit) {\n      \
    \      $sum += $digit;\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpt9mjcnd3.php:17\nStack trace:\n#0 /tmp/tmpt9mjcnd3.php(26): count_nums(Array)\n\
    #1 /tmp/tmpt9mjcnd3.php(31): candidate(Array)\n#2 /tmp/tmpt9mjcnd3.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt9mjcnd3.php on line 17\n"
  timestamp: 1660004010
- exit_code: -1
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (empty($arr)) {\n        return 0;\n\
    \    }\n    else {\n        $result = 0;\n        foreach ($arr as $val) {\n \
    \           $sum = 0;\n            while ($val != 0) {\n                $sum +=\
    \ abs($val % 10);\n                $val = floor($val / 10);\n            }\n \
    \           if ($sum > 0) {\n                $result++;\n            }\n     \
    \   }\n        return $result;\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660004015
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $positiveNums = array_filter($arr, function($n)\
    \ {\n        return $n > 0;\n    });\n    $positiveNums = array_map(function($n)\
    \ {\n        return str_split($n);\n    }, $positiveNums);\n    $positiveNums\
    \ = array_map(function($n) {\n        return array_reduce($n, function($acc, $curr)\
    \ {\n            return $acc + $curr;\n        });\n    }, $positiveNums);\n \
    \   $positiveNums = array_filter($positiveNums, function($n) {\n        return\
    \ $n > 0;\n    });\n    return count($positiveNums);\n}\nprint_r(count_nums(array(1,\
    \ 1, 2)));\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t7b21uj.php:41\n\
    Stack trace:\n#0 /tmp/tmp0t7b21uj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0t7b21uj.php\
    \ on line 41\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    // YOUR CODE HERE\n    return 0;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwu0h0y8g.php:23\n\
    Stack trace:\n#0 /tmp/tmpwu0h0y8g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwu0h0y8g.php\
    \ on line 23\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $res = 0;\n  foreach ($arr as $num) {\n  \
    \  $abs = abs($num);\n    while ($abs > 0) {\n      $res += $abs % 10;\n     \
    \ $abs = intval($abs / 10);\n    }\n  }\n  return $res;\n}\n\n$arr = array(1,1,2);\n\
    print(count_nums($arr));\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37z4zyy2.php:32\n\
    Stack trace:\n#0 /tmp/tmp37z4zyy2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp37z4zyy2.php\
    \ on line 32\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $elem) {\n\
    \t\t$str = strval($elem);\n\t\tif ($str[0] == '-') {\n\t\t\t$str = substr($str,\
    \ 1);\n\t\t}\n\t\tif (array_sum(str_split($str)) > 0) {\n\t\t\t$count++;\n\t\t\
    }\n\t}\n\treturn $count;\n}\n\necho count_nums(array(1, 2, 3)) . \"\\n\";\necho\
    \ count_nums(array(-1, 11, -11)) . \"\\n\";\necho count_nums(array(1, 1, 2)) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsexozou_.php:35\n\
    Stack trace:\n#0 /tmp/tmpsexozou_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsexozou_.php\
    \ on line 35\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // Your code here\n}\n\nclass TestCountNums\
    \ extends PHPUnit_Framework_TestCase {\n  public function testEmpty() {\n    $this->assertEquals(0,\
    \ count_nums(array()));\n  }\n\n  public function testSingleNegative() {\n   \
    \ $this->assertEquals(1, count_nums(array(-1)));\n  }\n\n  public function testSinglePositive()\
    \ {\n    $this->assertEquals(1, count_nums(array(1)));\n  }\n\n  public function\
    \ testSingle0() {\n    $this->assertEquals(0, count_nums(array(0)));\n  }\n\n\
    \  public function testMultiple() {\n    $this->assertEquals(1, count_nums(array(-1,\
    \ 11, -11)));\n    $this->assertEquals(3, count_nums(array(1, 1, 2)));\n  }\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"PHPUnit_Framework_TestCase\" not\
    \ found in /tmp/tmpaj83mke8.php:16\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpaj83mke8.php\
    \ on line 16\n"
  timestamp: 1660004010
- exit_code: -1
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\t$sum = 0;\n\tfor ($i = 0; $i\
    \ < count($arr); $i++) {\n\t\t$num = $arr[$i];\n\t\twhile ($num) {\n\t\t\t$lastDigit\
    \ = $num % 10;\n\t\t\t$sum += $lastDigit;\n\t\t\t$num = floor($num / 10);\n\t\t\
    }\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t\t$sum = 0;\n\t}\n\treturn $count;\n\
    }\n\n$arr = array(1, 1, 2);\n$arr1 = array(-1, 11, -11);\n$arr2 = array(0, -1,\
    \ -11);\n$arr3 = array();\necho count_nums($arr);\necho '<br>';\necho count_nums($arr1);\n\
    echo '<br>';\necho count_nums($arr2);\necho '<br>';\necho count_nums($arr3);\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: b'3<br>'
  timestamp: 1660004015
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $c = 0;\n  foreach ($arr as $v) {\n    $s\
    \ = 0;\n    $v = abs($v);\n    while ($v > 0) {\n      $s += $v % 10;\n      $v\
    \ = (int)($v / 10);\n    }\n    if ($s > 0) {\n      $c++;\n    }\n  }\n  return\
    \ $c;\n}\necho count_nums(array());\necho count_nums(array(-1, 11, -11));\necho\
    \ count_nums(array(1, 1, 2));\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "033\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6omt1vp.php:36\n\
    Stack trace:\n#0 /tmp/tmpl6omt1vp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpl6omt1vp.php\
    \ on line 36\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$num = 0;\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\t$number = $arr[$i];\n\t\t$abs = abs($number);\n\t\t$sum = 0;\n\t\
    \twhile ($abs > 0) {\n\t\t\t$sum += $abs % 10;\n\t\t\t$abs = floor($abs / 10);\n\
    \t\t}\n\t\tif ($sum > 0) {\n\t\t\t$num++;\n\t\t}\n\t}\n\treturn $num;\n}\n$arr\
    \ = array(-1, 11, -11);\necho count_nums($arr);\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oyymvvy.php:36\n\
    Stack trace:\n#0 /tmp/tmp0oyymvvy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0oyymvvy.php\
    \ on line 36\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (!is_array($arr)) return null;\n    if\
    \ (empty($arr)) return 0;\n    $num = 0;\n    foreach ($arr as $value) {\n   \
    \     if (abs($value) < 10) {\n            $sum = abs($value);\n        } else\
    \ {\n            $sum = 0;\n            while (abs($value) > 0) {\n          \
    \      $sum += abs($value) % 10;\n                $value = abs($value) / 10;\n\
    \            }\n        }\n        if ($sum > 0) {\n            $num++;\n    \
    \    }\n    }\n    return $num;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4eeb4khf.php:39\n\
    Stack trace:\n#0 /tmp/tmp4eeb4khf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4eeb4khf.php\
    \ on line 39\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if(!$arr) {\n        return 0;\n    }\n\
    \    $count = 0;\n    foreach($arr as $num) {\n        $sum = 0;\n        $num\
    \ = (string)$num;\n        for($i = 0; $i < strlen($num); $i++) {\n          \
    \  $sum += abs($num[$i]);\n        }\n        if($sum) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\necho count_nums(array(1, 1, 2));\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, string given in /tmp/tmpddbtumz9.php:21\nStack trace:\n#0 /tmp/tmpddbtumz9.php(21):\
    \ abs('-')\n#1 /tmp/tmpddbtumz9.php(31): count_nums(Array)\n#2 /tmp/tmpddbtumz9.php(36):\
    \ candidate(Array)\n#3 /tmp/tmpddbtumz9.php(45): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpddbtumz9.php on line 21\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $arr1 = [];\n    $c = 0;\n    foreach ($arr\
    \ as $k => $v) {\n        $v = (string)$v;\n        if (preg_match('#^-#', $v))\
    \ {\n            $v = str_replace('-', '', $v);\n            $v = (int)$v * -1;\n\
    \        }\n        $v = (int)$v;\n        $arr1[] = $v;\n    }\n    $sum = array_sum($arr1);\n\
    \    return $sum;\n}\n$a = [-10];\necho count_nums($a);\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "-10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpija0yqup.php:35\n\
    Stack trace:\n#0 /tmp/tmpija0yqup.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpija0yqup.php\
    \ on line 35\n"
  timestamp: 1660004010
- exit_code: -1
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t// solution goes here\n\t$result = 0;\n\t\
    foreach ($arr as $key => $value) {\n\t\t$sum = 0;\n\t\twhile ($value != 0) {\n\
    \t\t\t$sum += $value % 10;\n\t\t\t$value = floor($value / 10);\n\t\t}\n\t\tif\
    \ ($sum > 0) {\n\t\t\t$result++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660004015
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  if (empty($arr)) {\n    return 0;\n  }\n\n\
    \  $count = 0;\n  foreach ($arr as $item) {\n    $count += sum_digits($item) >\
    \ 0 ? 1 : 0;\n  }\n\n  return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sum_digits()\
    \ in /tmp/tmpzopb61lp.php:19\nStack trace:\n#0 /tmp/tmpzopb61lp.php(26): count_nums(Array)\n\
    #1 /tmp/tmpzopb61lp.php(31): candidate(Array)\n#2 /tmp/tmpzopb61lp.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzopb61lp.php on line 19\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  $arr_len = count($arr);\n \
    \ for ($i = 0; $i < $arr_len; $i++) {\n    $sum = 0;\n    $num = $arr[$i];\n \
    \   while (abs($num) > 0) {\n      $sum += abs($num) % 10;\n      $num = floor(abs($num)\
    \ / 10);\n    }\n    if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpih4xip7d.php:34\n\
    Stack trace:\n#0 /tmp/tmpih4xip7d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpih4xip7d.php\
    \ on line 34\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (empty($arr)) return 0;\n    $count =\
    \ 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        $count += abs($arr[$i])\
    \ % 10 + count_nums(array_map('intval', str_split(abs($arr[$i]) / 10)));\n   \
    \ }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    20480 bytes) in /tmp/tmp5egcmr0q.php on line 16

    '
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $elem) {\n\
    \    if (digit_sum($elem) > 0) {\n      $count += 1;\n    }\n  }\n  return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function digit_sum() in\
    \ /tmp/tmpeqrbj0sz.php:15\nStack trace:\n#0 /tmp/tmpeqrbj0sz.php(23): count_nums(Array)\n\
    #1 /tmp/tmpeqrbj0sz.php(28): candidate(Array)\n#2 /tmp/tmpeqrbj0sz.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeqrbj0sz.php on line 15\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $num) {\n\
    \    $sum = 0;\n    if ($num < 0) {\n      $num = -1 * $num;\n      $sum = -1;\n\
    \    }\n    while ($num > 0) {\n      $sum += $num % 10;\n      $num = floor($num\
    \ / 10);\n    }\n    if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n\
    }\n\n$arr = array(-1, 11, -11);\n$arr2 = array(1, 1, 2);\n\necho count_nums($arr)\
    \ . PHP_EOL;\necho count_nums($arr2) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vp9bj33.php:42\n\
    Stack trace:\n#0 /tmp/tmp5vp9bj33.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5vp9bj33.php\
    \ on line 42\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        $num = abs($num);\n        while ($num > 0) {\n            $count\
    \ += $num % 10;\n            $num = (int)($num / 10);\n        }\n    }\n    return\
    \ $count;\n}\n$arr = array(1, 1, 2);\necho count_nums($arr);\necho \"\\n\";\n\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkb9s0gm9.php:33\n\
    Stack trace:\n#0 /tmp/tmpkb9s0gm9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkb9s0gm9.php\
    \ on line 33\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $sum = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $arr[$i] = abs($arr[$i]);\n    $sum += floor($arr[$i] / 10) + $arr[$i]\
    \ % 10;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_vmeiegm.php:27\n\
    Stack trace:\n#0 /tmp/tmp_vmeiegm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_vmeiegm.php\
    \ on line 27\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t\n}\n\nfunction candidate(...$args) {\n  \
    \  return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fb3kqct.php:21\n\
    Stack trace:\n#0 /tmp/tmp5fb3kqct.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5fb3kqct.php\
    \ on line 21\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // CODE HERE\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhpt304s.php:21\n\
    Stack trace:\n#0 /tmp/tmphhpt304s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphhpt304s.php\
    \ on line 21\n"
  timestamp: 1660004010
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$count = 0;\n\tforeach ($arr as $int) {\n\t\
    \tif ($int < 0) {\n\t\t\t$int = $int * -1;\n\t\t}\n\t\tif (array_sum(str_split($int))\
    \ > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgirp17l7.php:31\n\
    Stack trace:\n#0 /tmp/tmpgirp17l7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgirp17l7.php\
    \ on line 31\n"
  timestamp: 1660004010
