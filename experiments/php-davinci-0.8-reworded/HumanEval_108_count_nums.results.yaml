language: php
name: HumanEval_108_count_nums
results:
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num)\
    \ {\n        $sum = 0;\n        $sign = 1;\n        if ($num < 0) {\n        \
    \    $sign = -1;\n            $num = $num * -1;\n        }\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        if ($sum * $sign > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\necho count_nums(array(1, 1, 2)) . PHP_EOL;\necho\
    \ count_nums(array(-1, 11, -11)) . PHP_EOL;\necho count_nums(array()) . PHP_EOL;\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ruuyz1p.php:44\n\
    Stack trace:\n#0 /tmp/tmp1ruuyz1p.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1ruuyz1p.php\
    \ on line 44\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sum = 0;\n    if ($arr[$i] < 0) {\n      $arr[$i] = -1 * $arr[$i];\n\
    \    }\n    while ($arr[$i] > 0) {\n      $sum += $arr[$i] % 10;\n      $arr[$i]\
    \ = (int)($arr[$i] / 10);\n    }\n    if ($sum > 0) {\n      $count++;\n    }\n\
    \  }\n  return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2jpk7_w.php:35\n\
    Stack trace:\n#0 /tmp/tmph2jpk7_w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmph2jpk7_w.php\
    \ on line 35\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$res = 0;\n\t$len = count($arr);\n\tfor ($i\
    \ = 0; $i < $len; $i++) {\n\t\t$sd = 0;\n\t\t$num = $arr[$i];\n\t\twhile ($num\
    \ != 0) {\n\t\t\t$sd += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\t\
    if ($sd > 0) {\n\t\t\t$res++;\n\t\t}\n\t}\n\treturn $res;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq2xzu4f.php:38\n\
    Stack trace:\n#0 /tmp/tmpyq2xzu4f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyq2xzu4f.php\
    \ on line 38\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $item)\
    \ {\n        $digits = abs($item);\n        $digits_sum = 0;\n        while ($digits)\
    \ {\n            $digits_sum += $digits % 10;\n            $digits = (int)($digits\
    \ / 10);\n        }\n        if ($digits_sum > 0) {\n            $count++;\n \
    \       }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4xzt1xg.php:33\n\
    Stack trace:\n#0 /tmp/tmpn4xzt1xg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn4xzt1xg.php\
    \ on line 33\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value < 0) {\n      $count += 1;\n    } else {\n      $count +=\
    \ count_digits($value);\n    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_digits()\
    \ in /tmp/tmp6wvai0k0.php:18\nStack trace:\n#0 /tmp/tmp6wvai0k0.php(25): count_nums(Array)\n\
    #1 /tmp/tmp6wvai0k0.php(30): candidate(Array)\n#2 /tmp/tmp6wvai0k0.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6wvai0k0.php on line 18\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $v) {\n  \
    \  if ($v < 0) {\n      $v = -$v;\n    }\n    while ($v) {\n      $count += $v\
    \ % 10;\n      $v /= 10;\n    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpy2rhnxx6.php on line 19


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpy2rhnxx6.php
    on line 19


    Deprecated: Implicit conversion from float'
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $cnt = 0;\n    foreach ($arr as $num) {\n\
    \        $sum = 0;\n        while ($num != 0) {\n            $digit = $num % 10;\n\
    \            $sum += $digit;\n            $num = $num / 10;\n        }\n     \
    \   if ($sum > 0) {\n            $cnt += 1;\n        }\n    }\n    return $cnt;\n\
    }\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float -0.1 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -0.01 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -0.001 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -0.0001 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -1.0E-5 to int loses precision in /tmp/tmpduhl0a3j.php
    on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-6 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-7 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-8 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000003E-9 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000003E-10 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000003E-11 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-12 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-13 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000002E-14 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0E-15 to int loses precision in
    /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0000000000000001E-16 to int loses
    precision in /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conversion from float -1.0E-17 to int loses precision in
    /tmp/tmpduhl0a3j.php on line 17


    Deprecated: Implicit conv'
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // BEGIN\n  $count = 0;\n  foreach ($arr as\
    \ $value) {\n    $sum = 0;\n    foreach (str_split($value) as $digit) {\n    \
    \  $sum += abs($digit);\n    }\n    if ($sum > 0) {\n      $count++;\n    }\n\
    \  }\n  return $count;\n  // END\n}\n\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, string given in /tmp/tmpd0rs356n.php:18\nStack trace:\n#0 /tmp/tmpd0rs356n.php(18):\
    \ abs('-')\n#1 /tmp/tmpd0rs356n.php(29): count_nums(Array)\n#2 /tmp/tmpd0rs356n.php(34):\
    \ candidate(Array)\n#3 /tmp/tmpd0rs356n.php(43): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpd0rs356n.php on line 18\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // TODO: implement this function\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8cjbtcu.php:21\n\
    Stack trace:\n#0 /tmp/tmpk8cjbtcu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpk8cjbtcu.php\
    \ on line 21\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $sum = 0;\n        $num = $arr[$i];\n        if ($num < 0)\
    \ {\n            $num = $num * -1;\n        }\n        while ($num > 0) {\n  \
    \          $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n\
    \        if ($sum > 0) {\n            $result++;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifgtf_ul.php:37\n\
    Stack trace:\n#0 /tmp/tmpifgtf_ul.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpifgtf_ul.php\
    \ on line 37\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  // YOUR CODE HERE\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt_qqs92.php:20\n\
    Stack trace:\n#0 /tmp/tmptt_qqs92.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptt_qqs92.php\
    \ on line 20\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $num = 0;\n    foreach ($arr as $i) {\n\
    \        $sum = 0;\n        if ($i < 0) {\n            $sum = $i - $i - $i;\n\
    \        } else {\n            $sum = $i;\n        }\n        while ($sum >= 10)\
    \ {\n            $sum = 0;\n            while ($sum >= 10) {\n               \
    \ $sum = $sum % 10 + ($sum - $sum % 10) / 10;\n            }\n        }\n    \
    \    if ($sum > 0) {\n            $num = $num + 1;\n        }\n    }\n    return\
    \ $num;\n}\nprint count_nums(array(1, 1, 2)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -2)) . \"\\n\";\nprint count_nums(array(1, 1, -12)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -21)) . \"\\n\";\nprint count_nums(array(1, 1, -31)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -41)) . \"\\n\";\nprint count_nums(array(1, 1, -51)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -61)) . \"\\n\";\nprint count_nums(array(1, 1, -71)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -81)) . \"\\n\";\nprint count_nums(array(1, 1, -91)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -101)) . \"\\n\";\nprint count_nums(array(1, 1, -111)) . \"\\n\";\nprint\
    \ count_nums(array(1, 1, -121)) . \"\\n\";\nprint count_nums(array(1, 1, -131))\
    \ . \"\\n\";\nprint count_nums(array(1, 1, -141)) . \"\\n\";\nprint count_nums(array(1,\
    \ 1, -151)) . \"\\n\";\nprint count_nums(array(1, 1, -161)) . \"\\n\";\nprint\
    \ count_\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpgmghak64.php
    on line 52

    '
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $result = 0;\n    foreach ($arr as $val)\
    \ {\n        $sum = 0;\n        if ($val < 0) {\n            $sum += substr($val,\
    \ 0, 1);\n            $val = substr($val, 1);\n        }\n        for ($i = 0;\
    \ $i < strlen($val); $i++) {\n            $sum += $val[$i];\n        }\n     \
    \   if ($sum > 0) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpx3lv_aug.php:17\nStack trace:\n#0 /tmp/tmpx3lv_aug.php(30): count_nums(Array)\n\
    #1 /tmp/tmpx3lv_aug.php(35): candidate(Array)\n#2 /tmp/tmpx3lv_aug.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx3lv_aug.php on line 17\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $sum = 0;\n    $num = abs($arr[$i]);\n    while ($num > 0) {\n\
    \      $digit = $num % 10;\n      $sum += $digit;\n      $num = (int)($num / 10);\n\
    \    }\n    if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptycqzmba.php:34\n\
    Stack trace:\n#0 /tmp/tmptycqzmba.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptycqzmba.php\
    \ on line 34\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    if (count($arr) === 0) {\n        return\
    \ 0;\n    }\n    $arr2 = array_map(function($a) {\n        return str_split($a);\n\
    \    }, $arr);\n    $arr3 = array_map(function($a) {\n        return array_sum($a);\n\
    \    }, $arr2);\n    return count(array_filter($arr3, function($a) {\n       \
    \ return $a > 0;\n    }));\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhcr71lc.php:32\n\
    Stack trace:\n#0 /tmp/tmpdhcr71lc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdhcr71lc.php\
    \ on line 32\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $elem)\
    \ {\n        $sum = 0;\n        $temp = $elem;\n        if ($elem < 0) {\n   \
    \         $temp = $elem * -1;\n        }\n        for ($i = 0; $i < strlen($temp);\
    \ $i++) {\n            $sum += $temp[$i];\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php on\
    \ line 21\n\nWarning: Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmp19lel9fb.php on line 21\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmp19lel9fb.php on\
    \ line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19lel9fb.php:36\n\
    Stack trace:\n#0 /tmp/tmp19lel9fb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp19lel9fb.php\
    \ on line 36\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $value)\
    \ {\n        if ($value < 0) {\n            $value = -$value;\n        }\n   \
    \     $sum = 0;\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n\nprint_r(count_nums(array()));\n\
    echo \"\\n\";\nprint_r(count_nums(array(-1, 11, -11)));\necho \"\\n\";\nprint_r(count_nums(array(1,\
    \ 1, 2)));\necho \"\\n\";\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zexalml.php:42\n\
    Stack trace:\n#0 /tmp/tmp4zexalml.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4zexalml.php\
    \ on line 42\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n\t$total = 0;\n\tforeach ($arr as $value) {\n\
    \t\tif ($value >= 0) {\n\t\t\t$sum = array_sum(str_split($value));\n\t\t} else\
    \ {\n\t\t\t$spl = str_split($value);\n\t\t\t$negs = abs($spl[0]);\n\t\t\t$spl[0]\
    \ = 0;\n\t\t\t$sum = $negs + array_sum($spl);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\
    \t$total += 1;\n\t\t}\n\t}\n\treturn $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: abs(): Argument #1 ($num) must be of\
    \ type int|float, string given in /tmp/tmphtbs1r68.php:19\nStack trace:\n#0 /tmp/tmphtbs1r68.php(19):\
    \ abs('-')\n#1 /tmp/tmphtbs1r68.php(31): count_nums(Array)\n#2 /tmp/tmphtbs1r68.php(36):\
    \ candidate(Array)\n#3 /tmp/tmphtbs1r68.php(45): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmphtbs1r68.php on line 19\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n    return count(array_filter($arr, function($a)\
    \ {\n        return array_sum(str_split(abs($a))) > 0;\n    }));\n}\n\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxh9nlu32.php:24\n\
    Stack trace:\n#0 /tmp/tmpxh9nlu32.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxh9nlu32.php\
    \ on line 24\n"
  timestamp: 1659823963
- exit_code: 255
  program: "<?php\n// Write a function count_nums which takes an array of integers\
    \ and returns\n// the number of elements which has a sum of digits > 0.\n// If\
    \ a number is negative, then its first signed digit will be negative:\n// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>>\
    \ count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n//\
    \ 3\nfunction count_nums($arr) {\n  $count = 0;\n  foreach ($arr as $el) {\n \
    \   $sum = 0;\n    foreach (str_split(abs($el)) as $digit) {\n      $sum += $digit;\n\
    \    }\n    if ($sum > 0) {\n      $count++;\n    }\n  }\n  return $count;\n}\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe1aq6dy2.php:31\n\
    Stack trace:\n#0 /tmp/tmpe1aq6dy2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpe1aq6dy2.php\
    \ on line 31\n"
  timestamp: 1659823963
