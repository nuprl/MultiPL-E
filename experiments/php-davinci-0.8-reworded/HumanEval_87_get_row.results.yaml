language: php
name: HumanEval_87_get_row
results:
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $k => $a) {\n        foreach ($a as $k1 => $v) {\n            if ($v\
    \ == $x) {\n                $result[] = [$k, $k1];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        return $a[0] == $b[0]\
    \ ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$coordinates = [];\n\t\
    for ($row = 0; $row < count($lst); $row++) {\n\t\tfor ($col = 0; $col < count($lst[$row]);\
    \ $col++) {\n\t\t\tif ($lst[$row][$col] == $x) {\n\t\t\t\t$coordinates[] = [$row,\
    \ $col];\n\t\t\t}\n\t\t}\n\t}\n\tusort($coordinates, function($a, $b) {\n\t\t\
    if ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] -\
    \ $b[0];\n\t});\n\treturn $coordinates;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $row => $values) {\n    foreach ($values as $column => $value) {\n\
    \      if ($value == $x) {\n        $result[] = [$row, $column];\n      }\n  \
    \  }\n  }\n  array_multisort(array_column($result, 0), SORT_ASC, array_column($result,\
    \ 1), SORT_DESC, $result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // your code here\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29ffsbj5.php:26\n\
    Stack trace:\n#0 /tmp/tmp29ffsbj5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp29ffsbj5.php\
    \ on line 26\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    $i =\
    \ 0;\n    foreach ($lst as $row) {\n        $j = 0;\n        foreach ($row as\
    \ $item) {\n            if ($item == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }\necho \"<pre>\";\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]], 1));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(get_row([],\
    \ 1));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(get_row([[], [1], [1, 2,\
    \ 3]], 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 0\n    \
    \        [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n\
    \            [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n \
    \       (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n    [0] => Array\n        (\n            [0] => 2\n\
    \            [1] => 2\n        )\n\n)\n</pre>"
  timestamp: 1659824507
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $matrix = [];\n    foreach\
    \ ($lst as $row) {\n        if (!empty($row)) {\n            foreach ($row as\
    \ $key => $column) {\n                if ($column == $x) {\n                 \
    \   $matrix[] = [$key, array_search($row, $lst)];\n                }\n       \
    \     }\n        }\n    }\n    usort($matrix, function ($a, $b) {\n        if\
    \ ($a[1] == $b[1]) {\n            return 0;\n        }\n        return ($a[1]\
    \ < $b[1]) ? -1 : 1;\n    });\n    return $matrix;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37gz353j.php:42\n\
    Stack trace:\n#0 /tmp/tmp37gz353j.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp37gz353j.php\
    \ on line 42\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $i => $row) {\n    foreach ($row as $j => $col) {\n      if ($col ==\
    \ $x) {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $sorted_lst = [];\n \
    \   foreach ($lst as $row_index => $row) {\n        foreach ($row as $col_index\
    \ => $el) {\n            if ($el == $x) {\n                $sorted_lst[] = [$row_index,\
    \ $col_index];\n            }\n        }\n    }\n    if (empty($sorted_lst)) {\n\
    \        return $sorted_lst;\n    }\n    usort($sorted_lst, function ($row1, $row2)\
    \ {\n        return $row1[0] <=> $row2[0];\n    });\n    usort($sorted_lst, function\
    \ ($row1, $row2) {\n        return $row1[1] <=> $row2[1];\n    });\n    return\
    \ $sorted_lst;\n}\n\necho var_export(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1), true) . \"\\n\";\necho var_export(get_row([],\
    \ 1), true) . \"\\n\";\necho var_export(get_row([[], [1], [1, 2, 3]], 3), true)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array (\n  0 => \n  array (\n    0 => 0,\n    1 => 0,\n  ),\n  1 => \n\
    \  array (\n    0 => 1,\n    1 => 0,\n  ),\n  2 => \n  array (\n    0 => 2,\n\
    \    1 => 0,\n  ),\n  3 => \n  array (\n    0 => 1,\n    1 => 4,\n  ),\n  4 =>\
    \ \n  array (\n    0 => 2,\n    1 => 5,\n  ),\n)\narray (\n)\narray (\n  0 =>\
    \ \n  array (\n    0 => 2,\n    1 => 2,\n  ),\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk238q3su.php:46\nStack trace:\n#0 /tmp/tmpk238q3su.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk238q3su.php on line 46\n"
  timestamp: 1659824507
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $temp = [];\n    foreach\
    \ ($lst as $k => $v) {\n        $temp[$k] = array_keys($v, $x);\n    }\n    $temp\
    \ = array_filter($temp);\n    $result = [];\n    foreach ($temp as $k => $v) {\n\
    \        $result[] = array_map(function($v) use ($k) {\n            return [$k,\
    \ $v];\n        }, $v);\n    }\n    return array_merge(...$result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xru54p8.php:37\n\
    Stack trace:\n#0 /tmp/tmp4xru54p8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4xru54p8.php\
    \ on line 37\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$y = 0;\n\t$res = array();\n\
    \tforeach ($lst as $l) {\n\t\t$cur = array();\n\t\t$x_c = 0;\n\t\tforeach ($l\
    \ as $item) {\n\t\t\tif ($item == $x) {\n\t\t\t\t$cur[] = array($y, $x_c);\n\t\
    \t\t}\n\t\t\t$x_c++;\n\t\t}\n\t\t$res = array_merge($res, $cur);\n\t\t$y++;\n\t\
    }\n\t$func = function($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1]\
    \ - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t};\n\tusort($res, $func);\n\t\
    return $res;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    // your code here\n \
    \   $output = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $output[] = [$i, $j];\n            }\n        }\n    }\n    array_multisort(array_column($output,\
    \ 0), SORT_ASC, array_column($output, 1), SORT_DESC, $output);\n    return $output;\n\
    }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  $rows\
    \ = count($lst);\n  for ($row = 0; $row < $rows; $row++) {\n    $columns = count($lst[$row]);\n\
    \    for ($column = 0; $column < $columns; $column++) {\n      if ($lst[$row][$column]\
    \ == $x) {\n        $result[] = [$row, $column];\n      }\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ry41k91.php:36\n\
    Stack trace:\n#0 /tmp/tmp9ry41k91.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9ry41k91.php\
    \ on line 36\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $y => $row) {\n    foreach ($row as $z => $value) {\n      if ($value\
    \ == $x) {\n        $result[] = [$y, $z];\n      }\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] < $b[0]) {\n      return -1;\n    } elseif\
    \ ($a[0] > $b[0]) {\n      return 1;\n    } else {\n      if ($a[1] < $b[1]) {\n\
    \        return 1;\n      } elseif ($a[1] > $b[1]) {\n        return -1;\n   \
    \   } else {\n        return 0;\n      }\n    }\n  });\n  return $result;\n}\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $results = [];\n  $rows\
    \ = count($lst);\n  for ($i = 0; $i < $rows; $i++) {\n    $row = $lst[$i];\n \
    \   $rowSize = count($row);\n    for ($j = 0; $j < $rowSize; $j++) {\n      if\
    \ ($row[$j] == $x) {\n        $results[] = [$i, $j];\n      }\n    }\n  }\n  usort($results,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $results;\n}\n\n$lst = [[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\nprint_r(get_row($lst,\
    \ 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $matrix = [];\n    $coords\
    \ = [];\n    $x = (int)$x;\n    foreach ($lst as $i => $arr) {\n        $matrix[]\
    \ = $arr;\n        foreach ($arr as $j => $elem) {\n            if ($elem ===\
    \ $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    array_multisort(array_column($coords, 0), SORT_ASC, array_column($coords,\
    \ 1), SORT_DESC, $coords);\n    return $coords;\n}\n$lst = [[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$n = 1;\nprint_r(get_row($lst, $n));\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    if (empty($lst)) return\
    \ [];\n    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for\
    \ ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x)\
    \ {\n                $res[] = [$i, $j];\n            }\n        }\n    }\n   \
    \ usort($res, function($a, $b) {\n        return $a[0] == $b[0] ? $b[1] - $a[1]\
    \ : $a[0] - $b[0];\n    });\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $keyRow => $row) {\n        foreach ($row as $keyCol => $item) {\n\
    \            if ($item == $x) {\n                $result[] = [$keyRow, $keyCol];\n\
    \            }\n        }\n    }\n    uasort($result, function ($a, $b) {\n  \
    \      return ($a[0] == $b[0]) ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n   \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzn166cc9.php:36\n\
    Stack trace:\n#0 /tmp/tmpzn166cc9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzn166cc9.php\
    \ on line 36\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $i => $sub_lst) {\n        foreach ($sub_lst as $j => $v) {\n     \
    \       if ($v == $x) {\n                $result[] = [$i, $j];\n            }\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] !=\
    \ $b[0]) {\n            return $a[0] - $b[0];\n        }\n        return $b[1]\
    \ - $a[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coordinates[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($coordinates, function\
    \ ($a, $b) {\n        return $a[0] > $b[0];\n    });\n    foreach ($coordinates\
    \ as $key => $value) {\n        $coordinates[$key] = rsort($coordinates[$key]);\n\
    \    }\n    return $coordinates;\n}\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: usort(): Returning bool from comparison function is deprecated,\
    \ return an integer less than, equal to, or greater than zero in /tmp/tmpab9o571e.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpab9o571e.php:39\n\
    Stack trace:\n#0 /tmp/tmpab9o571e.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpab9o571e.php\
    \ on line 39\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $column => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $key => $row) {\n        foreach ($row as $key1 => $cell) {\n     \
    \       if ($cell == $x) {\n                $result[] = [$key, $key1];\n     \
    \       }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if\
    \ ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return\
    \ $a[0] - $b[0];\n    });\n    return $result;\n}\nprint_r(get_row([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\tif (count($lst) == 0) return\
    \ array();\n\t$lst2 = array();\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t\
    $r = array();\n\t\tfor ($j = 0; $j < count($lst[$i]); $j++) {\n\t\t\tif ($lst[$i][$j]\
    \ == $x) {\n\t\t\t\t$r[] = $j;\n\t\t\t}\n\t\t}\n\t\tif (count($r) > 0) {\n\t\t\
    \trsort($r);\n\t\t\t$lst2[] = array_merge(array($i), $r);\n\t\t}\n\t}\n\tusort($lst2,\
    \ \"cmp\");\n\treturn $lst2;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: usort(): Argument #2 ($callback) must\
    \ be a valid callback, function \"cmp\" not found or invalid function name in\
    \ /tmp/tmpdp48woah.php:32\nStack trace:\n#0 /tmp/tmpdp48woah.php(32): usort(Array,\
    \ 'cmp')\n#1 /tmp/tmpdp48woah.php(36): get_row(Array, 1)\n#2 /tmp/tmpdp48woah.php(40):\
    \ candidate(Array, 1)\n#3 /tmp/tmpdp48woah.php(48): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpdp48woah.php on line 32\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$position = [];\n\tforeach\
    \ ($lst as $row => $cols) {\n\t\tforeach ($cols as $col => $item) {\n\t\t\tif\
    \ ($item == $x) {\n\t\t\t\t$position[] = [$row, $col];\n\t\t\t}\n\t\t}\n\t}\n\t\
    // sort($position);\n\tusort($position, function($a, $b) {\n\t\tif ($a[0] != $b[0])\
    \ {\n\t\t\treturn $a[0] - $b[0];\n\t\t} else {\n\t\t\treturn $b[1] - $a[1];\n\t\
    \t}\n\t});\n\treturn $position;\n}\necho '<pre>';\nprint_r(get_row([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([],\
    \ 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 0\n    \
    \        [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n\
    \            [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n \
    \       (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => 2\n          \
    \  [1] => 2\n        )\n\n)\n</pre>"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = count($lst);\n\
    \  $cols = [];\n  $ret = [];\n  for ($i = 0; $i < $rows; $i++) {\n    $cols[$i]\
    \ = count($lst[$i]);\n    for ($j = 0; $j < $cols[$i]; $j++) {\n      if ($lst[$i][$j]\
    \ == $x) {\n        $ret[] = [$i, $j];\n      }\n    }\n  }\n  usort($ret, function($a,\
    \ $b) {\n    if ($a[0] < $b[0]) {\n      return -1;\n    } else if ($a[0] > $b[0])\
    \ {\n      return 1;\n    } else {\n      if ($a[1] < $b[1]) {\n        return\
    \ 1;\n      } else if ($a[1] > $b[1]) {\n        return -1;\n      } else {\n\
    \        return 0;\n      }\n    }\n  });\n  return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    //     $result = [];\n\
    \    //     foreach ($lst as $key_outer => $value_outer) {\n    //         foreach\
    \ ($value_outer as $key_inner => $value_inner) {\n    //             if ($value_inner\
    \ == $x) {\n    //                 $result[] = [$key_outer, $key_inner];\n   \
    \ //             }\n    //         }\n    //     }\n    //     return $result;\n\
    \    $result = [];\n    array_walk_recursive($lst, function ($item, $key) use\
    \ (&$result, $x) {\n        if ($item == $x) {\n            $result[] = [$key[0],\
    \ $key[1]];\n        }\n    });\n    usort($result, function ($a, $b) {\n    \
    \    if ($a[0] > $b[0]) {\n            return 1;\n        } elseif ($a[0] < $b[0])\
    \ {\n            return -1;\n        } else {\n            if ($a[1] > $b[1])\
    \ {\n                return -1;\n            } elseif ($a[1] < $b[1]) {\n    \
    \            return 1;\n            } else {\n                return 0;\n    \
    \        }\n        }\n    });\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpfemhhcp1.php\
    \ on line 30\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpfemhhcp1.php on line 30\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpfemhhcp1.php on line 30\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpfemhhcp1.php on line 30\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpfemhhcp1.php on\
    \ line 30\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpfemhhcp1.php\
    \ on line 30\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpfemhhcp1.php on line 30\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpfemhhcp1.php on line 30\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpfemhhcp1.php on line 30\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpfemhhcp1.php on\
    \ line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfemhhcp1.php:55\n\
    Stack trace:\n#0 /tmp/tmpfemhhcp1.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpfemhhcp1.php\
    \ on line 55\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // TODO\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjkkcibj.php:25\n\
    Stack trace:\n#0 /tmp/tmprjkkcibj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprjkkcibj.php\
    \ on line 25\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $positions = [];\n  foreach\
    \ ($lst as $row => $items) {\n    foreach ($items as $col => $item) {\n      if\
    \ ($item == $x) {\n        $positions[] = [$row, $col];\n      }\n    }\n  }\n\
    \  usort($positions, function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return\
    \ $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return $positions;\n\
    }\nprint_r(get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3,\
    \ 4, 5, 1]\n], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([\n  [],\n  [1],\n\
    \  [1, 2, 3]\n], 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    foreach\
    \ ($lst as $i => $row) {\n        $found = array_keys($row, $x);\n        if (!empty($found))\
    \ {\n            foreach ($found as $j) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    usort($res, function ($p1, $p2) {\n    \
    \    $i1 = $p1[0];\n        $i2 = $p2[0];\n        if ($i1 == $i2) {\n       \
    \     $j1 = $p1[1];\n            $j2 = $p2[1];\n            return $j2 - $j1;\n\
    \        }\n        return $i1 - $i2;\n    });\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$matches = [];\n\t$index\
    \ = 0;\n\tforeach ($lst as $row) {\n\t\tforeach ($row as $key => $value) {\n\t\
    \t\tif ($value == $x) {\n\t\t\t\t$matches[] = [$index, $key];\n\t\t\t}\n\t\t}\n\
    \t\t$index++;\n\t}\n\tsort_by_row($matches);\n\treturn $matches;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_by_row()\
    \ in /tmp/tmp3l96r3wk.php:28\nStack trace:\n#0 /tmp/tmp3l96r3wk.php(33): get_row(Array,\
    \ 1)\n#1 /tmp/tmp3l96r3wk.php(37): candidate(Array, 1)\n#2 /tmp/tmp3l96r3wk.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3l96r3wk.php on line 28\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $elem) {\n          \
    \  if ($elem == $x) {\n                $result[] = [$i, $j];\n            }\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\nvar_dump(get_row([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nvar_dump(get_row([], 1));\n\
    var_dump(get_row([[], [1], [1, 2, 3]], 3));\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    array(0) {\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n\
    \    int(2)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$res = array();\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\t$sub_array = $lst[$i];\n\t\tfor ($j\
    \ = 0; $j < count($sub_array); $j++) {\n\t\t\tif ($sub_array[$j] == $x) {\n\t\t\
    \t\t$res[] = array($i, $j);\n\t\t\t}\n\t\t}\n\t}\n\tusort($res, function($a, $b)\
    \ {\n\t\tif ($a[0] != $b[0]) {\n\t\t\treturn $a[0] - $b[0];\n\t\t} else {\n\t\t\
    \treturn $b[1] - $a[1];\n\t\t}\n\t});\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$result = array();\n\t\
    $y = 0;\n\tforeach ($lst as $row) {\n\t\t$xIn = array_search($x, $row);\n\t\t\
    if ($xIn !== false) {\n\t\t\t$result[] = array($y, $xIn);\n\t\t}\n\t\t$y++;\n\t\
    }\n\t$cmp = function($a, $b) {\n\t\treturn $a[0] - $b[0];\n\t};\n\tusort($result,\
    \ $cmp);\n\t$cmp = function($a, $b) {\n\t\treturn $b[1] - $a[1];\n\t};\n\tforeach\
    \ ($result as $key => $value) {\n\t\tusort($result[$key], $cmp);\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpnryva52e.php\
    \ on line 32\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpnryva52e.php on line 32\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpnryva52e.php on line 32\n\nWarning: Trying to access\
    \ array offset on value of type int in /tmp/tmpnryva52e.php on line 32\n\nWarning:\
    \ Trying to access array offset on value of type int in /tmp/tmpnryva52e.php on\
    \ line 32\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpnryva52e.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnryva52e.php:44\n\
    Stack trace:\n#0 /tmp/tmpnryva52e.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpnryva52e.php\
    \ on line 44\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $i => $sublst) {\n    $index = array_search($x, $sublst);\n    if ($index\
    \ !== false) {\n      $result[] = [$i, $index];\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n}\necho '<pre>';\n\
    print_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1));\necho '</pre>';\necho '<pre>';\nprint_r(get_row([], 1));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 0\n    \
    \        [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 0\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 2\n            [1] => 0\n        )\n\n)\n</pre><pre>Array\n(\n)\n\
    </pre><pre>Array\n(\n    [0] => Array\n        (\n            [0] => 2\n     \
    \       [1] => 2\n        )\n\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmptbqxj1u3.php:47\nStack trace:\n#0 /tmp/tmptbqxj1u3.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptbqxj1u3.php on line 47\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\";\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_0sv5lf.php:27\n\
    Stack trace:\n#0 /tmp/tmpm_0sv5lf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm_0sv5lf.php\
    \ on line 27\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $pos = [];\n    foreach\
    \ ($lst as $r=>$row) {\n        $c = array_search($x, $row);\n        if ($c!==false)\
    \ {\n            $pos[] = [$r, $c];\n        }\n    }\n    usort($pos, function($a,\
    \ $b) {\n        return $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n\
    \    return $pos;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpioxxz7yw.php:36\n\
    Stack trace:\n#0 /tmp/tmpioxxz7yw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpioxxz7yw.php\
    \ on line 36\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $row = [];\n  foreach ($lst\
    \ as $k => $v) {\n    foreach ($v as $k2 => $v2) {\n      if ($v2 == $x) {\n \
    \       $row[] = [$k, $k2];\n      }\n    }\n  }\n  return $row;\n}\n\n$lst =\
    \ [\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n];\n\
    print_r(get_row($lst, 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp70z6nj_c.php:40\nStack trace:\n\
    #0 /tmp/tmp70z6nj_c.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp70z6nj_c.php\
    \ on line 40\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $indices = [];\n    $counter\
    \ = 0;\n    foreach ($lst as $row) {\n        $col = array_search($x, $row);\n\
    \        if ($col !== false) {\n            $indices[] = [$counter, $col];\n \
    \       }\n        $counter++;\n    }\n    usort($indices, function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return $indices;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vd222d8.php:40\n\
    Stack trace:\n#0 /tmp/tmp0vd222d8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0vd222d8.php\
    \ on line 40\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    if (count($lst) === 0)\
    \ {\n        return array();\n    }\n    $a = array();\n    foreach ($lst as $i\
    \ => $row) {\n        foreach ($row as $j => $v) {\n            if ($v === $x)\
    \ {\n                $a[] = array($i, $j);\n            }\n        }\n    }\n\
    \    usort($a, function($a, $b) {\n        if ($a[0] == $b[0]) {\n           \
    \ return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n \
    \   return $a;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $count\
    \ = 0;\n    foreach ($lst as $value) {\n        $count++;\n        $i = array_search($x,\
    \ $value);\n        if ($i !== false) {\n            $result[] = [$count - 1,\
    \ $i];\n        }\n    }\n    foreach ($result as $key => $value) {\n        $temp1[]\
    \ = $value[0];\n        $temp2[] = $value[1];\n    }\n    array_multisort($temp1,\
    \ SORT_ASC, $temp2, SORT_DESC, $result);\n    return $result;\n}\n\n$matrix =\
    \ [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\necho json_encode(get_row($matrix,\
    \ 1)) . \"\\n\";\necho json_encode(get_row([], 1)) . \"\\n\";\necho json_encode(get_row([[],\
    \ [1], [1, 2, 3]], 3)) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[[0,0],[1,0],[2,0]]\n\nFatal error: Uncaught TypeError: array_multisort():\
    \ Argument #1 ($array) must be an array or a sort flag in /tmp/tmpy0aylkbf.php:31\n\
    Stack trace:\n#0 /tmp/tmpy0aylkbf.php(31): array_multisort(NULL, 4, NULL, 3, Array)\n\
    #1 /tmp/tmpy0aylkbf.php(37): get_row(Array, 1)\n#2 {main}\n  thrown in /tmp/tmpy0aylkbf.php\
    \ on line 31\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $indexes = [];\n  foreach\
    \ ($lst as $row_idx => $row) {\n    $col_idx = array_search($x, $row);\n    if\
    \ ($col_idx !== false) {\n      $indexes[] = [$row_idx, $col_idx];\n    }\n  }\n\
    \  return $indexes;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwct12lr.php:33\n\
    Stack trace:\n#0 /tmp/tmpzwct12lr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzwct12lr.php\
    \ on line 33\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $arr = [];\n  foreach ($lst\
    \ as $key => $value) {\n    $arr = array_merge($arr, array_keys($value, $x));\n\
    \  }\n  foreach ($arr as $key => $value) {\n    $arr[$key] = [$value/count($lst[$key]),\
    \ $value%count($lst[$key])];\n  }\n  usort($arr, function($a, $b) {\n    if ($a[0]\
    \ != $b[0]) {\n      return $a[0] - $b[0];\n    } else {\n      return $b[1] -\
    \ $a[1];\n    }\n  });\n  return $arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpiaddr879.php on line 23\n\n\
    Fatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type\
    \ Countable|array, null given in /tmp/tmpiaddr879.php:23\nStack trace:\n#0 /tmp/tmpiaddr879.php(36):\
    \ get_row(Array, 1)\n#1 /tmp/tmpiaddr879.php(40): candidate(Array, 1)\n#2 /tmp/tmpiaddr879.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpiaddr879.php on line 23\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = [];\n  foreach\
    \ ($lst as $i => $row) {\n    $columns = [];\n    foreach ($row as $j => $column)\
    \ {\n      if ($column == $x) {\n        $columns[] = $j;\n      }\n    }\n  \
    \  if (count($columns) > 0) {\n      $rows[] = [$i, $columns];\n    }\n  }\n \
    \ if (count($rows) > 0) {\n    array_multisort($rows, SORT_ASC, SORT_NUMERIC);\n\
    \    $rv = [];\n    foreach ($rows as $row) {\n      foreach ($row[1] as $column)\
    \ {\n        $rv[] = [$row[0], $column];\n      }\n    }\n    return $rv;\n  }\n\
    \  return [];\n}\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));\n\n$lst\
    \ = array();\n$x = 1;\nprint_r(get_row($lst, $x));\n\n$lst = array(array(), array(1),\
    \ array(1, 2, 3));\n$x = 3;\nprint_r(get_row($lst, $x));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcyokqjj9.php:59\n\
    Stack trace:\n#0 /tmp/tmpcyokqjj9.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpcyokqjj9.php\
    \ on line 59\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $i = 0;\n    foreach ($lst as $row) {\n        foreach ($row as $key => $value)\
    \ {\n            if ($value == $x) {\n                $rows[] = array($i, $key);\n\
    \            }\n        }\n        $i++;\n    }\n    usort($rows, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $rows;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // BEGIN (write your solution\
    \ here)\n\t$index_array = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t\
    for ($j = 0; $j < count($lst[$i]); $j++) {\n\t\t\tif ($lst[$i][$j] == $x) {\n\t\
    \t\t\t$index_array[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t}\n\tusort($index_array, 'sort_by_first_index');\n\
    \tfor ($i = 0; $i < count($index_array); $i++) {\n\t\t$index_array[$i] = array_reverse($index_array[$i]);\n\
    \t}\n\tusort($index_array, 'sort_by_second_index');\n\treturn $index_array;\n\
    \  // END\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: usort(): Argument #2 ($callback) must\
    \ be a valid callback, function \"sort_by_first_index\" not found or invalid function\
    \ name in /tmp/tmpkxyp2w7h.php:27\nStack trace:\n#0 /tmp/tmpkxyp2w7h.php(27):\
    \ usort(Array, 'sort_by_first_i...')\n#1 /tmp/tmpkxyp2w7h.php(37): get_row(Array,\
    \ 1)\n#2 /tmp/tmpkxyp2w7h.php(41): candidate(Array, 1)\n#3 /tmp/tmpkxyp2w7h.php(49):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpkxyp2w7h.php on line 27\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $allCoordinates = [];\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    $newCoordinates = findInRow($lst[$i],\
    \ $x, $i);\n    if (count($newCoordinates) > 0) {\n      $allCoordinates = array_merge($allCoordinates,\
    \ $newCoordinates);\n    }\n  }\n  sort($allCoordinates);\n  return $allCoordinates;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function findInRow() in\
    \ /tmp/tmpjxzc5mu_.php:20\nStack trace:\n#0 /tmp/tmpjxzc5mu_.php(30): get_row(Array,\
    \ 1)\n#1 /tmp/tmpjxzc5mu_.php(34): candidate(Array, 1)\n#2 /tmp/tmpjxzc5mu_.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjxzc5mu_.php on line 20\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = count($lst);\n\
    \    $res = array();\n    for ($i = 0; $i < $rows; $i++) {\n        $cols = count($lst[$i]);\n\
    \        for ($j = 0; $j < $cols; $j++) {\n            if ($lst[$i][$j] == $x)\
    \ {\n                $res[] = array($i, $j);\n            }\n        }\n    }\n\
    \    usort($res, function($a, $b) {\n        if ($a[0] == $b[0]) {\n         \
    \   return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $res = [];\n  foreach ($lst\
    \ as $k1 => $v1) {\n    foreach ($v1 as $k2 => $v2) {\n      if ($v2 == $x) $res[]\
    \ = [$k1, $k2];\n    }\n  }\n  if (count($res) > 0) {\n    for ($i = 0; $i < count($res)\
    \ - 1; $i++) {\n      for ($j = $i + 1; $j < count($res); $j++) {\n        if\
    \ ($res[$i][0] == $res[$j][0]) {\n          if ($res[$i][1] < $res[$j][1]) {\n\
    \            $tmp = $res[$i];\n            $res[$i] = $res[$j];\n            $res[$j]\
    \ = $tmp;\n          }\n        } elseif ($res[$i][0] > $res[$j][0]) {\n     \
    \     $tmp = $res[$i];\n          $res[$i] = $res[$j];\n          $res[$j] = $tmp;\n\
    \        }\n      }\n    }\n  }\n  return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $out = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n           \
    \ if ($val == $x) {\n                $out[] = [$i, $j];\n            }\n     \
    \   }\n    }\n    usort($out, function($a, $b) {\n        if ($a[0] > $b[0]) {\n\
    \            return 1;\n        } elseif ($a[0] < $b[0]) {\n            return\
    \ -1;\n        } else {\n            if ($a[1] > $b[1]) {\n                return\
    \ -1;\n            } elseif ($a[1] < $b[1]) {\n                return 1;\n   \
    \         } else {\n                return 0;\n            }\n        }\n    });\n\
    \    return $out;\n}\n\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $out = [];\n    foreach\
    \ ($lst as $row => $sub) {\n        foreach ($sub as $col => $cur) {\n       \
    \     if ($cur === $x) {\n                $out[] = [$row, $col];\n           \
    \ }\n        }\n    }\n    usort($out, function ($a, $b) {\n        if ($a[0]\
    \ !== $b[0]) {\n            return $a[0] - $b[0];\n        }\n        return $b[1]\
    \ - $a[1];\n    });\n    return $out;\n}\n\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        $row = $lst[$i];\n        for ($j\
    \ = 0; $j < count($row); $j++) {\n            if ($row[$j] == $x) {\n        \
    \        $result[] = [$i, $j];\n            }\n        }\n    }\n    $swap = function($a,\
    \ $b) {\n        $tmp = $a;\n        $a = $b;\n        $b = $tmp;\n    };\n  \
    \  $quicksort = function($A, $swap, $p, $r) {\n        if ($p < $r) {\n      \
    \      $q = partition($A, $swap, $p, $r);\n            $quicksort($A, $swap, $p,\
    \ $q - 1);\n            $quicksort($A, $swap, $q + 1, $r);\n        }\n    };\n\
    \    $partition = function($A, $swap, $p, $r) {\n        $x = $A[$r][0];\n   \
    \     $i = $p - 1;\n        for ($j = $p; $j < $r; $j++) {\n            if ($A[$j][0]\
    \ <= $x) {\n                $i = $i + 1;\n                $swap($A[$i], $A[$j]);\n\
    \            }\n        }\n        $swap($A[$i + 1], $A[$r]);\n        return\
    \ $i + 1;\n    };\n    $p = 0;\n    $r = count($result) - 1;\n    $quicksort($result,\
    \ $swap, $p, $r);\n    $p = 0;\n    $r = count($result) - 1;\n    for ($i = 0;\
    \ $i < count($result); $i++) {\n        $k = $i;\n        for ($j = $i + 1; $j\
    \ < count($result); $j++) {\n            if ($result[$j][0] == $result[$i][0])\
    \ {\n                $k = $j;\n           \nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 59 in /tmp/tmpmqxehz8z.php on line 75

    '
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $get_row = [];\n  foreach\
    \ ($lst as $i => $array) {\n    foreach ($array as $j => $val) {\n      if ($val\
    \ == $x) {\n        $get_row[] = [$i, $j];\n      }\n    }\n  }\n  usort($get_row,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $get_row;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$results = [];\n\tfor ($i\
    \ = 0; $i < count($lst); $i++) {\n\t\tfor ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n\t\t\tif ($lst[$i][$j] == $x) {\n\t\t\t\t$results[] = [$i, $j];\n\t\t\t}\n\
    \t\t}\n\t}\n\tusort($results, function($c1, $c2) {\n\t\tif ($c1[0] == $c2[0])\
    \ {\n\t\t\treturn $c2[1] - $c1[1];\n\t\t}\n\t\treturn $c1[0] - $c2[0];\n\t});\n\
    \treturn $results;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row => $l) {\n        foreach ($l as $column => $value) {\n      \
    \      if ($value == $x) {\n                $result[] = [$row, $column];\n   \
    \         }\n        }\n    }\n    sort($result);\n    return $result;\n}\nprint_r(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpkag9rv2z.php:35\nStack trace:\n\
    #0 /tmp/tmpkag9rv2z.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkag9rv2z.php\
    \ on line 35\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$result = array();\n\t\
    foreach ($lst as $row => $columns) {\n\t\tforeach ($columns as $column => $value)\
    \ {\n\t\t\tif ($value == $x) {\n\t\t\t\t$result[] = array($row, $column);\n\t\t\
    \t}\n\t\t}\n\t}\n\tusort($result, function($a, $b) {\n\t\tif ($a[0] < $b[0]) {\n\
    \t\t\treturn -1;\n\t\t} elseif ($a[0] > $b[0]) {\n\t\t\treturn 1;\n\t\t} else\
    \ {\n\t\t\tif ($a[1] < $b[1]) {\n\t\t\t\treturn 1;\n\t\t\t} elseif ($a[1] > $b[1])\
    \ {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\
    });\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  $i = 0;\n\
    \  foreach ($lst as $row) {\n    $j = 0;\n    foreach ($row as $item) {\n    \
    \  if ($item == $x) {\n        $result[] = [$i, $j];\n      }\n      $j++;\n \
    \   }\n    $i++;\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}\n\n$lst = [\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1,\
    \ 2, 3, 4, 5, 1]\n];\n$x = 1;\nprint_r(get_row($lst, $x));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$result = array();\n\t\
    $i = 0;\n\t$j = 0;\n\tforeach ($lst as $sub_lst) {\n\t\t$j = 0;\n\t\tforeach ($sub_lst\
    \ as $elem) {\n\t\t\tif ($elem == $x) {\n\t\t\t\t$result[] = array($i, $j);\n\t\
    \t\t}\n\t\t\t$j++;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxvy0a1l.php:39\n\
    Stack trace:\n#0 /tmp/tmprxvy0a1l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmprxvy0a1l.php\
    \ on line 39\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    if (empty($lst)) {\n\
    \        return [];\n    }\n    $result = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        $row = $lst[$i];\n        for ($j = 0; $j < count($row); $j++)\
    \ {\n            if ($row[$j] == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return sort_matrix($result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_matrix()\
    \ in /tmp/tmps7cj21dg.php:30\nStack trace:\n#0 /tmp/tmps7cj21dg.php(34): get_row(Array,\
    \ 1)\n#1 /tmp/tmps7cj21dg.php(38): candidate(Array, 1)\n#2 /tmp/tmps7cj21dg.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmps7cj21dg.php on line 30\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $index => $row) {\n        foreach ($row as $index2 => $num) {\n  \
    \          if ($num == $x) {\n                $result[] = [$index, $index2];\n\
    \            }\n        }\n    }\n    array_multisort(array_column($result, 0),\
    \ SORT_ASC, array_column($result, 1), SORT_DESC, $result);\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$coordinates = [];\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tfor ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n\t\t\tif ($lst[$i][$j] == $x) {\n\t\t\t\t$coordinates[] = [$i, $j];\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($coordinates);\n\tfor ($i = 0; $i < count($coordinates);\
    \ $i++) {\n\t\tsort($coordinates[$i]);\n\t}\n\treturn $coordinates;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjp9nx9v.php:37\n\
    Stack trace:\n#0 /tmp/tmpgjp9nx9v.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgjp9nx9v.php\
    \ on line 37\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $row = [];\n  foreach ($lst\
    \ as $key => $value) {\n    $column = array_keys($value, $x);\n    if (!empty($column))\
    \ {\n      foreach ($column as $key2 => $value2) {\n        $row[] = [$key, $value2];\n\
    \      }\n    }\n  }\n  sort($row);\n  return $row;\n}\n\n$lst = [[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpvhduzwzn.php:39\nStack trace:\n\
    #0 /tmp/tmpvhduzwzn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvhduzwzn.php\
    \ on line 39\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $return = array();\n\
    \    $i = 0;\n    foreach ($lst as $row) {\n        $j = 0;\n        foreach ($row\
    \ as $col) {\n            if ($col == $x) {\n                $return[] = array($i,\
    \ $j);\n            }\n            $j++;\n        }\n        $i++;\n    }\n  \
    \  $a = array();\n    foreach ($return as $key => $val) {\n        $a[$key] =\
    \ $val[0];\n    }\n    array_multisort($a, SORT_ASC, $return);\n    foreach ($return\
    \ as $key => $val) {\n        $a[$key] = $val[1];\n    }\n    array_multisort($a,\
    \ SORT_DESC, $return);\n    return $return;\n}\n\n$a = array(array(1, 2, 3, 4,\
    \ 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\necho '<pre>';\nprint_r(get_row($a,\
    \ 1));\necho '</pre>';\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 2\n    \
    \        [1] => 5\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 0\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n\
    \            [0] => 1\n            [1] => 0\n        )\n\n    [4] => Array\n \
    \       (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpevu2e9p3.php:51\nStack\
    \ trace:\n#0 /tmp/tmpevu2e9p3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpevu2e9p3.php\
    \ on line 51\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $coords = [];\n  $row =\
    \ 0;\n  foreach ($lst as $list) {\n    $col = 0;\n    foreach ($list as $value)\
    \ {\n      if ($value == $x) {\n        $coords[] = [$row, $col];\n      }\n \
    \     $col++;\n    }\n    $row++;\n  }\n  usort($coords, function($a, $b) {\n\
    \    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return $a[0]\
    \ - $b[0];\n  });\n  return $coords;\n}\nprint_r(get_row([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  if (!is_array($lst)) {\n\
    \    return array();\n  }\n\n  $row = -1;\n  $column = -1;\n  $result = array();\n\
    \  foreach ($lst as $row_index => $row_value) {\n    if (!is_array($row_value))\
    \ {\n      continue;\n    }\n\n    foreach ($row_value as $column_index => $column_value)\
    \ {\n      if ($column_value != $x) {\n        continue;\n      }\n\n      $result[]\
    \ = array($row_index, $column_index);\n    }\n  }\n\n  usort($result, function($a,\
    \ $b) {\n    if ($a[0] > $b[0]) {\n      return 1;\n    }\n\n    if ($a[0] < $b[0])\
    \ {\n      return -1;\n    }\n\n    if ($a[1] > $b[1]) {\n      return -1;\n \
    \   }\n\n    if ($a[1] < $b[1]) {\n      return 1;\n    }\n\n    return 0;\n \
    \ });\n\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row => $arr) {\n        foreach ($arr as $col => $val) {\n       \
    \     if ($val == $x) {\n                $result[] = [$row, $col];\n         \
    \   }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    $max_column = 0;\n    foreach ($lst as $row_index => $row) {\n        $column_index\
    \ = array_search($x, $row);\n        while ($column_index !== false) {\n     \
    \       $max_column = max($max_column, $column_index);\n            $coordinates[]\
    \ = [$row_index, $column_index];\n            $column_index = array_search($x,\
    \ $row, $column_index + 1);\n        }\n    }\n    usort($coordinates, function\
    \ ($coord1, $coord2) use ($max_column) {\n        if ($coord1[0] < $coord2[0])\
    \ {\n            return -1;\n        } elseif ($coord1[0] > $coord2[0]) {\n  \
    \          return 1;\n        } else {\n            return ($max_column - $coord1[1])\
    \ - ($max_column - $coord2[1]);\n        }\n    });\n    return $coordinates;\n\
    }\nprint_r(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1,\
    \ 2, 3, 4, 5, 1]\n], 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    20480 bytes) in /tmp/tmpfbf57xb4.php on line 24

    '
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    // your code here\n}\n\
    \n$in = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n \
    \   array(1, 2, 3, 4, 5, 1),\n);\nprint_r(get_row($in, 1));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajei8cw5.php:32\n\
    Stack trace:\n#0 /tmp/tmpajei8cw5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpajei8cw5.php\
    \ on line 32\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $arr = [];\n  foreach ($lst\
    \ as $k => $v) {\n    $column = array_search($x, $v);\n    if ($column !== false)\
    \ {\n      $arr[] = [$k, $column];\n    }\n  }\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk57eps9t.php:39\n\
    Stack trace:\n#0 /tmp/tmpk57eps9t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpk57eps9t.php\
    \ on line 39\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $newArray = [];\n   \
    \ $count = 0;\n    foreach ($lst as $key1 => $value1) {\n        foreach ($value1\
    \ as $key2 => $value2) {\n            if ($value2 == $x) {\n                $newArray[$count]\
    \ = array($key1, $key2);\n                $count++;\n            }\n        }\n\
    \    }\n    usort($newArray, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $newArray;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $row_index = 0;\n  $column_index\
    \ = 0;\n  $coordinates = [];\n  foreach ($lst as $row) {\n    foreach ($row as\
    \ $column) {\n      if ($column == $x) {\n        $coordinates[] = [$row_index,\
    \ $column_index];\n      }\n      $column_index++;\n    }\n    $row_index++;\n\
    \    $column_index = 0;\n  }\n  usort($coordinates, function($a, $b) {\n    if\
    \ ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n\
    \  });\n  return $coordinates;\n}\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\nprint_r(get_row($lst, 1));\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    $row = 0;\n    foreach ($lst as $arr) {\n        $column = 0;\n        foreach\
    \ ($arr as $item) {\n            if ($item == $x) {\n                $coordinates[]\
    \ = [$row, $column];\n            }\n            $column++;\n        }\n     \
    \   $row++;\n    }\n    usort($coordinates, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $coordinates;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    // your code\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazkmzh04.php:26\n\
    Stack trace:\n#0 /tmp/tmpazkmzh04.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpazkmzh04.php\
    \ on line 26\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  $iterator\
    \ = new RecursiveIteratorIterator(new RecursiveArrayIterator($lst));\n  $flattened\
    \ = iterator_to_array($iterator, false);\n  $index = array_search($x, $flattened);\n\
    \  if ($index === false) {\n    return $result;\n  }\n  for ($i = 0; $i < sizeof($lst);\
    \ $i++) {\n    for ($j = 0; $j < sizeof($lst[$i]); $j++) {\n      if ($lst[$i][$j]\
    \ == $x) {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    return ($a[0] == $b[0]) ? ($b[1] - $a[1]) : ($a[0] -\
    \ $b[0]);\n  });\n  return $result;\n}\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $ans = [];\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        $lst[$i] = array_reverse($lst[$i]);\n\
    \        $tmp = array_keys($lst[$i], $x);\n        if (count($tmp) > 0) {\n  \
    \          foreach ($tmp as $v) {\n                $ans[] = [$i, $v];\n      \
    \      }\n        }\n    }\n    return $ans;\n}\n\n$lst = [\n    [1, 2, 3, 4,\
    \ 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n$x = 1;\nvar_dump(get_row($lst,\
    \ $x));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(5)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(1)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(5)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i327x8o.php:43\nStack\
    \ trace:\n#0 /tmp/tmp7i327x8o.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp7i327x8o.php\
    \ on line 43\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row_index => $row) {\n        foreach ($row as $column_index => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row_index,\
    \ $column_index];\n            }\n        }\n    }\n    $compare = function ($a,\
    \ $b) {\n        if ($a[0] > $b[0]) {\n            return 1;\n        } elseif\
    \ ($a[0] < $b[0]) {\n            return -1;\n        } else {\n            if\
    \ ($a[1] > $b[1]) {\n                return -1;\n            } elseif ($a[1] <\
    \ $b[1]) {\n                return 1;\n            } else {\n                return\
    \ 0;\n            }\n        }\n    };\n    usort($result, $compare);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $c = [];\n  foreach ($lst\
    \ as $i => $row) {\n    $c = array_merge($c, array_keys($row, $x));\n  }\n  if\
    \ (!empty($c)) {\n    for ($i = 0; $i < count($c); $i++) {\n      $c[$i] = [floor($c[$i]\
    \ / count($lst[0])), $c[$i] % count($lst[0])];\n    }\n    usort($c, function($a,\
    \ $b) {\n      return ($a[0] != $b[0]) ? $a[0] - $b[0] : $b[1] - $a[1];\n    });\n\
    \  }\n  return $c;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6gaydbbc.php:38\n\
    Stack trace:\n#0 /tmp/tmp6gaydbbc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6gaydbbc.php\
    \ on line 38\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] > $b[0]) {\n \
    \     return 1;\n    } else if ($a[0] < $b[0]) {\n      return -1;\n    } else\
    \ {\n      if ($a[1] > $b[1]) {\n        return -1;\n      } else if ($a[1] <\
    \ $b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n  \
    \  }\n  });\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  $i = 0;\n\
    \  foreach ($lst as $row) {\n    $j = 0;\n    foreach ($row as $elem) {\n    \
    \  if ($elem == $x) {\n        $result[] = [$i, $j];\n      }\n      $j++;\n \
    \   }\n    $i++;\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}\n\necho var_export(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1), true) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array (\n  0 => \n  array (\n    0 => 0,\n    1 => 0,\n  ),\n  1 => \n\
    \  array (\n    0 => 1,\n    1 => 4,\n  ),\n  2 => \n  array (\n    0 => 1,\n\
    \    1 => 0,\n  ),\n  3 => \n  array (\n    0 => 2,\n    1 => 5,\n  ),\n  4 =>\
    \ \n  array (\n    0 => 2,\n    1 => 0,\n  ),\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    foreach\
    \ ($lst as $rowKey => $row) {\n        foreach ($row as $columnKey => $value)\
    \ {\n            if ($value == $x) {\n                $res[] = [$rowKey, $columnKey];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $res;\n}\necho \"\\n\";\n$lst =\
    \ [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n\
    ];\nvar_dump(get_row($lst, 1));\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\narray(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n\
    \    int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n  \
    \  int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$coords = [];\n\t$count\
    \ = 0;\n\tforeach ($lst as $row) {\n\t\t$rowCount = 0;\n\t\tforeach ($row as $num)\
    \ {\n\t\t\tif ($num == $x) {\n\t\t\t\t$coords[] = [$count, $rowCount];\n\t\t\t\
    }\n\t\t\t$rowCount++;\n\t\t}\n\t\t$count++;\n\t}\n\tusort($coords, function($a,\
    \ $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn\
    \ $a[0] - $b[0];\n\t});\n\treturn $coords;\n}\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$coords = [];\n\tforeach\
    \ ($lst as $row => $vals) {\n\t\tforeach ($vals as $col => $val) {\n\t\t\tif ($val\
    \ == $x) {\n\t\t\t\t$coords[] = [$row, $col];\n\t\t\t}\n\t\t}\n\t}\n\tusort($coords,\
    \ function($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\
    \t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\treturn $coords;\n}\n\n$data = [\n\t\
    [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\n\t[],\n\t[[], [1],\
    \ [1, 2, 3]],\n];\n\nforeach ($data as $item) {\n\t$res = get_row($item[0], 1);\n\
    \tprint_r($res);\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: foreach() argument must be of type array|object, int given in /tmp/tmpnyh0zcki.php
    on line 20


    Warning: foreach() argument must be of type array|object, int given in /tmp/tmpnyh0zcki.php
    on line 20


    Warning: foreach() argument must be of type array|object, int given in /tmp/tmpnyh0zcki.php
    on line 20


    Warning: foreach() argument must be of type array|object, int given in /tmp/tmpnyh0zcki.php
    on line 20


    Warning: foreach() argument must be of type array|object, int given in /tmp/tmpnyh0zcki.php
    on line 20


    Warning: foreach() argument must be of type array|object, int given in /tmp/tmpnyh0zcki.php
    on line 20

    Array

    (

    )


    Warning: Undefined array key 0 in /tmp/tmpnyh0zcki.php on line 42


    Warning: foreach() argument must be of type array|object, null given in /tmp/tmpnyh0zcki.php
    on line 19

    Array

    (

    )

    Array

    (

    )

    '
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $out = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n         \
    \   if ($value == $x) {\n                $out[] = [$i, $j];\n            }\n \
    \       }\n    }\n    usort($out, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $out;\n}\n$a = array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\n$a1 = get_row($a, 1);\nprint_r($a1);\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n            if ($lst[$i][$j] == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    $array_sort = function ($a, $b) {\n    \
    \    if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n   \
    \     return $a[0] - $b[0];\n    };\n    usort($res, $array_sort);\n    return\
    \ $res;\n}\necho \"\\n\";\necho \"Example 1:\\n\";\nprint_r(get_row([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\necho \"\\n\";\necho\
    \ \"Example 2:\\n\";\nprint_r(get_row([], 1));\necho \"\\n\";\necho \"Example\
    \ 3:\\n\";\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\nExample 1:\nArray\n(\n    [0] => Array\n        (\n            [0] =>\
    \ 0\n            [1] => 0\n        )\n\n    [1] => Array\n        (\n        \
    \    [0] => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n\
    \            [0] => 1\n            [1] => 0\n        )\n\n    [3] => Array\n \
    \       (\n            [0] => 2\n            [1] => 5\n        )\n\n    [4] =>\
    \ Array\n        (\n            [0] => 2\n            [1] => 0\n        )\n\n\
    )\n\nExample 2:\nArray\n(\n)\n\nExample 3:\nArray\n(\n    [0] => Array\n     \
    \   (\n            [0] => 2\n            [1] => 2\n        )\n\n)\n\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$result = array();\n\t\
    foreach ($lst as $i => $row) {\n\t\t$coordinates = array_keys($row, $x);\n\t\t\
    foreach ($coordinates as $j) {\n\t\t\t$result[] = array($i, $j);\n\t\t}\n\t}\n\
    \tusort($result, function($c1, $c2) {\n\t\treturn $c1[0] == $c2[0] ? $c2[1] -\
    \ $c1[1] : $c1[0] - $c2[0];\n\t});\n\treturn $result;\n}\n\n$lst = array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\necho '<pre>';\n\
    print_r(get_row($lst, 1));\necho '</pre>';\n\n$lst = array();\necho '<pre>';\n\
    print_r(get_row($lst, 1));\necho '</pre>';\n\n$lst = array(array(), array(1),\
    \ array(1, 2, 3));\necho '<pre>';\nprint_r(get_row($lst, 3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 0\n    \
    \        [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n\
    \            [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n \
    \       (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n    [0] => Array\n        (\n            [0] => 2\n\
    \            [1] => 2\n        )\n\n)\n</pre>"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$coordinates = [];\n\t\
    foreach ($lst as $row => $elements) {\n\t\t$x_index = array_search($x, $elements);\n\
    \t\tif ($x_index !== false) {\n\t\t\t$coordinates[] = [$row, $x_index];\n\t\t\
    }\n\t}\n\tusort($coordinates, function($a, $b) {\n\t\tif ($a[0] === $b[0]) {\n\
    \t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\treturn\
    \ $coordinates;\n}\necho implode(', ', get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)) . \"\\n\";\necho implode(', ', get_row([],\
    \ 1)) . \"\\n\";\necho implode(', ', get_row([[], [1], [1, 2, 3]], 3)) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpipcdu9ic.php on line 33\n\
    \nWarning: Array to string conversion in /tmp/tmpipcdu9ic.php on line 33\n\nWarning:\
    \ Array to string conversion in /tmp/tmpipcdu9ic.php on line 33\nArray, Array,\
    \ Array\n\n\nWarning: Array to string conversion in /tmp/tmpipcdu9ic.php on line\
    \ 35\nArray\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipcdu9ic.php:41\n\
    Stack trace:\n#0 /tmp/tmpipcdu9ic.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpipcdu9ic.php\
    \ on line 41\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = 0;\n    $result\
    \ = [];\n    foreach ($lst as $val) {\n        $found = array_search($x, $val);\n\
    \        if ($found !== false) {\n            $result[] = [$row, $found];\n  \
    \      }\n        $row++;\n    }\n    return $result;\n}\n$lst = [[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqiyo339.php:35\n\
    Stack trace:\n#0 /tmp/tmpjqiyo339.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpjqiyo339.php\
    \ on line 35\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // your code here\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29ffsbj5.php:26\n\
    Stack trace:\n#0 /tmp/tmp29ffsbj5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp29ffsbj5.php\
    \ on line 26\n"
  timestamp: 1659824507
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $res = [];\n  foreach ($lst\
    \ as $r => $row) {\n    foreach ($row as $c => $cell) {\n      if ($cell == $x)\
    \ {\n        $res[] = [$r, $c];\n      }\n    }\n  }\n  usort($res, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $res;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $rowIndex => $row) {\n        foreach ($row as $columnIndex => $item)\
    \ {\n            if ($item == $x) {\n                $result[] = [$rowIndex, $columnIndex];\n\
    \            }\n        }\n    }\n    // ascending by row and descending by column\n\
    \    usort($result, function ($item1, $item2) {\n        if ($item1[0] == $item2[0])\
    \ {\n            return $item2[1] - $item1[1];\n        }\n        return $item1[0]\
    \ - $item2[0];\n    });\n    return $result;\n}\nprint_r(get_row([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([], 1));\n\
    print_r(get_row([[], [1], [1, 2, 3]], 3));\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $ret = array();\n   \
    \ for ($row = 0; $row < count($lst); $row++) {\n        $cols = array_keys($lst[$row],\
    \ $x);\n        foreach ($cols as $col) {\n            $ret[] = array($row, $col);\n\
    \        }\n    }\n    usort($ret, function($a, $b) {\n        if ($a[0] != $b[0])\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $b[1] - $a[1];\n\
    \    });\n    return $ret;\n}\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));\n\
    \necho \"\\n\";\n\n$lst = array();\n$x = 1;\nprint_r(get_row($lst, $x));\n\necho\
    \ \"\\n\";\n\n$lst = array(array(), array(1), array(1, 2, 3));\n$x = 3;\nprint_r(get_row($lst,\
    \ $x));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n\nArray\n(\n\
    )\n\nArray\n(\n    [0] => Array\n        (\n            [0] => 2\n           \
    \ [1] => 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row => $cols) {\n        $found = array_keys($cols, $x);\n       \
    \ $result = array_merge($result, array_map(function($col) use ($row) {\n     \
    \       return [$row, $col];\n        }, $found));\n    }\n    usort($result,\
    \ function($lhs, $rhs) {\n        if ($lhs[0] == $rhs[0]) {\n            return\
    \ $rhs[1] - $lhs[1];\n        }\n        return $lhs[0] - $rhs[0];\n    });\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coordinates[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($coordinates, function\
    \ ($el1, $el2) {\n        if ($el1[0] == $el2[0]) {\n            return $el2[1]\
    \ - $el1[1];\n        }\n        return $el1[0] - $el2[0];\n    });\n    return\
    \ $coordinates;\n}\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    foreach ($lst as $row => $cols) {\n        foreach ($cols as $col => $val)\
    \ {\n            if ($val == $x) {\n                $coordinates[] = [$row, $col];\n\
    \            }\n        }\n    }\n    usort($coordinates, function ($a, $b) {\n\
    \        if ($a[0] != $b[0]) {\n            return $a[0] - $b[0];\n        }\n\
    \        return $b[1] - $a[1];\n    });\n    return $coordinates;\n}\necho get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1);\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Array to string conversion in /tmp/tmpiykjaqmc.php on line 34

    Array'
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0]) {\n\
    \      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    // your code here\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bz4h30_.php:26\n\
    Stack trace:\n#0 /tmp/tmp0bz4h30_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0bz4h30_.php\
    \ on line 26\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $coordinates = [];\n  foreach\
    \ ($lst as $row_index => $row) {\n    foreach ($row as $column_index => $value)\
    \ {\n      if ($value == $x) {\n        $coordinates[] = [$row_index, $column_index];\n\
    \      }\n    }\n  }\n  usort($coordinates, function($a, $b) {\n    if ($a[0]\
    \ == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n\
    \  });\n  return $coordinates;\n}\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $arr = [];\n    foreach\
    \ ($lst as $index => $row) {\n        foreach ($row as $indexRow => $item) {\n\
    \            if ($item == $x) {\n                $arr[] = [$index, $indexRow];\n\
    \            }\n        }\n    }\n    usort($arr, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $arr = [];\n  foreach ($lst\
    \ as $k => $v) {\n    if ($i = array_search($x, $v)) {\n      $arr[] = [$k, $i];\n\
    \    }\n  }\n  array_multisort(array_column($arr, 0), SORT_ASC, array_column($arr,\
    \ 1), SORT_DESC, $arr);\n  return $arr;\n}\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexn3jz9t.php:32\n\
    Stack trace:\n#0 /tmp/tmpexn3jz9t.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpexn3jz9t.php\
    \ on line 32\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $output = [];\n    foreach\
    \ ($lst as $row_idx => $row) {\n        foreach ($row as $col_idx => $value) {\n\
    \            if ($value == $x) {\n                $output[] = [$row_idx, $col_idx];\n\
    \            }\n        }\n    }\n    sort($output);\n    return $output;\n}\n\
    \nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnyj3rzzq.php:38\n\
    Stack trace:\n#0 /tmp/tmpnyj3rzzq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnyj3rzzq.php\
    \ on line 38\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$result = array();\n\t\
    foreach ($lst as $k => $v) {\n\t\tforeach ($v as $k2 => $v2) {\n\t\t\tif ($v2\
    \ == $x) {\n\t\t\t\t$result[] = array($k, $k2);\n\t\t\t}\n\t\t}\n\t}\n\tuasort($result,\
    \ function($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\
    \t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ihypapq.php:39\n\
    Stack trace:\n#0 /tmp/tmp_ihypapq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_ihypapq.php\
    \ on line 39\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $row\
    \ = 0;\n    foreach ($lst as $list) {\n        $column = 0;\n        foreach ($list\
    \ as $number) {\n            if ($number == $x) {\n                $result[] =\
    \ [$row, $column];\n            }\n            $column++;\n        }\n       \
    \ $row++;\n    }\n    array_multisort($result);\n    return $result;\n}\n\n$lst\
    \ = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\necho '<pre>';\n\
    print_r(get_row($lst, 1));\necho '</pre>';\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 0\n    \
    \        [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 0\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n\
    \            [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n \
    \       (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxxtveaum.php:43\nStack\
    \ trace:\n#0 /tmp/tmpxxtveaum.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxxtveaum.php\
    \ on line 43\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $rowNumber => $row) {\n    $key = array_search($x, $row);\n    if ($key\
    \ !== false) {\n      $result[] = [$rowNumber, $key];\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n}\n$a = array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\n$res = get_row($a,\
    \ 1);\necho \"answer = \";\nvar_dump($res);\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "answer = array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n   \
    \ [1]=>\n    int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n\
    \    int(0)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n  \
    \  int(0)\n  }\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhcnfbrs.php:43\n\
    Stack trace:\n#0 /tmp/tmphhcnfbrs.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphhcnfbrs.php\
    \ on line 43\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $count\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j <\
    \ count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n          \
    \      $result[$count][0] = $i;\n                $result[$count][1] = $j;\n  \
    \              $count++;\n            }\n        }\n    }\n    foreach ($result\
    \ as $key => $row) {\n        $row_name[$key] = $row[0];\n        $col_name[$key]\
    \ = $row[1];\n    }\n    array_multisort($row_name, SORT_ASC, $col_name, SORT_DESC,\
    \ $result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_multisort(): Argument #1 ($array)\
    \ must be an array or a sort flag in /tmp/tmp5jxn1vfe.php:33\nStack trace:\n#0\
    \ /tmp/tmp5jxn1vfe.php(33): array_multisort(NULL, 4, NULL, 3, Array)\n#1 /tmp/tmp5jxn1vfe.php(38):\
    \ get_row(Array, 1)\n#2 /tmp/tmp5jxn1vfe.php(45): candidate(Array, 1)\n#3 /tmp/tmp5jxn1vfe.php(50):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmp5jxn1vfe.php on line 33\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        $row = $lst[$i];\n        for ($j\
    \ = 0; $j < count($row); $j++) {\n            if ($row[$j] == $x) {\n        \
    \        $result[] = [$i, $j];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] < $b[0]) {\n            return -1;\n\
    \        } elseif ($a[0] > $b[0]) {\n            return 1;\n        } else {\n\
    \            if ($a[1] < $b[1]) {\n                return 1;\n            } elseif\
    \ ($a[1] > $b[1]) {\n                return -1;\n            } else {\n      \
    \          return 0;\n            }\n        }\n    });\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $key => $val) {\n    $key++;\n    if (in_array($x, $val)) {\n     \
    \ $index = array_search($x, $val);\n      $index++;\n      $result[] = [$key,\
    \ $index];\n    }\n  }\n  return $result;\n}\n\n$get_row = get_row([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1);\necho json_encode($get_row)\
    \ . PHP_EOL;\n\n$get_row2 = get_row([], 1);\necho json_encode($get_row2) . PHP_EOL;\n\
    \n$get_row3 = get_row([[], [1], [1, 2, 3]], 3);\necho json_encode($get_row3) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[[1,1],[2,1],[3,1]]\n[]\n[[3,3]]\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5stwi6lq.php:43\nStack trace:\n#0 /tmp/tmp5stwi6lq.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5stwi6lq.php on line 43\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $current_row\
    \ = 0;\n    foreach ($lst as $row_number => $row) {\n        $current_row = $row_number;\n\
    \        if (in_array($x, $row)) {\n            foreach ($row as $element_number\
    \ => $element) {\n                if ($element == $x) {\n                    $result[]\
    \ = [$current_row, $element_number];\n                }\n            }\n     \
    \   }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] < $b[0])\
    \ {\n            return -1;\n        } elseif ($a[0] > $b[0]) {\n            return\
    \ 1;\n        } else {\n            if ($a[1] < $b[1]) {\n                return\
    \ 1;\n            } elseif ($a[1] > $b[1]) {\n                return -1;\n   \
    \         } else {\n                return 0;\n            }\n        }\n    });\n\
    \    return $result;\n}\n$nested_array = array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\necho '<pre>';\nprint_r(get_row($nested_array,\
    \ 1));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 0\n    \
    \        [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n\
    \            [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n \
    \       (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n</pre>"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  $sorted = usort($result, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    if (count($lst) == 0)\
    \ {\n        return array();\n    }\n    $count = 0;\n    $results = array();\n\
    \    foreach ($lst as $i => $v) {\n        $row = $i;\n        $column = array_search($x,\
    \ $v);\n        if ($column !== false) {\n            $results[$count] = array($row,\
    \ $column);\n            $count++;\n        }\n    }\n    sort($results);\n  \
    \  return $results;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hqj6ot8.php:39\n\
    Stack trace:\n#0 /tmp/tmp6hqj6ot8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6hqj6ot8.php\
    \ on line 39\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $x_indices = [];\n  foreach\
    \ ($lst as $y => $row) {\n    foreach ($row as $x_candidate => $x_coordinate)\
    \ {\n      if ($x_coordinate == $x) {\n        $x_indices[] = [$y, $x_candidate];\n\
    \      }\n    }\n  }\n  usort($x_indices, function($a, $b) {\n    if ($a[0] !=\
    \ $b[0]) {\n      return $a[0] - $b[0];\n    } else {\n      return $b[1] - $a[1];\n\
    \    }\n  });\n  return $x_indices;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $coordinates[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($coordinates,\
    \ function ($a, $b) {\n        return ($a[0] == $b[0]) ? $b[1] - $a[1] : $a[0]\
    \ - $b[0];\n    });\n    return $coordinates;\n}\n\nvar_dump(get_row([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nvar_dump(get_row([],\
    \ 1));\nvar_dump(get_row([[], [1], [1, 2, 3]], 3));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    array(0) {\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n\
    \    int(2)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $results = [];\n    $row\
    \ = 0;\n    foreach ($lst as $item) {\n        if (!is_array($item)) {\n     \
    \       $row++;\n            continue;\n        }\n        $column = count($item)\
    \ - 1;\n        foreach ($item as $element) {\n            if ($element == $x)\
    \ {\n                $results[] = [$row, $column];\n            }\n          \
    \  $column--;\n        }\n        $row++;\n    }\n    usort($results, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] < $b[1];\n\
    \        }\n        return $a[0] < $b[0];\n    });\n    return $results;\n}\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: usort(): Returning bool from comparison function is deprecated,\
    \ return an integer less than, equal to, or greater than zero in /tmp/tmpbt4450ez.php\
    \ on line 39\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbt4450ez.php:47\n\
    Stack trace:\n#0 /tmp/tmpbt4450ez.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbt4450ez.php\
    \ on line 47\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    return $result;\n}\n\n$a = [\n\
    \    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\
    $b = get_row($a, 1);\nvar_dump($b);\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(0)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpziybh5oy.php:41\nStack\
    \ trace:\n#0 /tmp/tmpziybh5oy.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpziybh5oy.php\
    \ on line 41\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = count($lst);\n\
    \  $cols = [];\n  $xy = [];\n  for ($i = 0; $i < $rows; $i++) {\n    $cols[$i]\
    \ = count($lst[$i]);\n    for ($j = 0; $j < $cols[$i]; $j++) {\n      if ($lst[$i][$j]\
    \ == $x) {\n        $xy[] = [$i, $j];\n      }\n    }\n  }\n  usort($xy, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $xy;\n}\n\nprint_r(get_row([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([], 1));\n\
    print_r(get_row([[], [1], [1, 2, 3]], 3));\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $ret = array();\n   \
    \ foreach ($lst as $i => $val) {\n        foreach ($val as $j => $val2) {\n  \
    \          if ($val2 == $x) {\n                $ret[] = array($i, $j);\n     \
    \       }\n        }\n    }\n    function cmp($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    }\n    usort($ret, \"cmp\");\n    return $ret;\n}\nprint_r(get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1));\nprint_r(get_row(array(),\
    \ 1));\nprint_r(get_row(array(array(), array(1), array(1, 2, 3)), 3));\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n\nFatal error:\
    \ Cannot redeclare cmp() (previously declared in /tmp/tmpa4qbso_n.php:26) in /tmp/tmpa4qbso_n.php\
    \ on line 26\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $lst = array_map(function($v)\
    \ use ($x) {\n    $a = [];\n    foreach($v as $k => $val) {\n      if ($val ==\
    \ $x) {\n        $a[] = [$k, $val];\n      }\n    }\n    return $a;\n  }, $lst);\n\
    \  $lst = array_filter($lst);\n  if (empty($lst)) {\n    return $lst;\n  }\n \
    \ $lst = array_reduce($lst, function($a, $v) {\n    return array_merge($a, $v);\n\
    \  }, []);\n  uasort($lst, function($a, $b) {\n    return $a[0] == $b[0] ? $b[1]\
    \ - $a[1] : $a[0] - $b[0];\n  });\n  return array_values($lst);\n}\n\n$lst = [\n\
    \  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n];\nprint_r(get_row($lst,\
    \ 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 0\n\
    \            [1] => 1\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 0\n            [1] => 1\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 4\n            [1] => 1\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 5\n            [1] => 1\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 3\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7trrgkcq.php:53\n\
    Stack trace:\n#0 /tmp/tmp7trrgkcq.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7trrgkcq.php\
    \ on line 53\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = [];\n    $row\
    \ = -1;\n    foreach ($lst as $row => $columns) {\n        $column = 0;\n    \
    \    foreach ($columns as $column => $item) {\n            if ($item == $x) {\n\
    \                $rows[] = [$row, $column];\n            }\n        }\n    }\n\
    \    usort($rows, function($a, $b) {\n        if ($a[0] < $b[0]) {\n         \
    \   return -1;\n        } elseif ($a[0] > $b[0]) {\n            return 1;\n  \
    \      } else {\n            if ($a[1] < $b[1]) {\n                return 1;\n\
    \            } elseif ($a[1] > $b[1]) {\n                return -1;\n        \
    \    } else {\n                return 0;\n            }\n        }\n    });\n\
    \    return $rows;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $coordinates = [];\n  foreach\
    \ ($lst as $key => $row) {\n    $lst[$key] = array_reverse($row);\n    for ($i\
    \ = 0; $i < count($row); $i++) {\n      if ($row[$i] == $x) {\n        $coordinates[]\
    \ = [$key, $i];\n      }\n    }\n  }\n  $coordinates = array_merge($coordinates,\
    \ [['x'], ['y']]);\n  for ($i = 0; $i < count($coordinates); $i++) {\n    for\
    \ ($j = $i; $j < count($coordinates); $j++) {\n      if ($coordinates[$i][0] >\
    \ $coordinates[$j][0]) {\n        $temp = $coordinates[$i];\n        $coordinates[$i]\
    \ = $coordinates[$j];\n        $coordinates[$j] = $temp;\n      }\n    }\n  }\n\
    \  for ($i = 0; $i < count($coordinates); $i++) {\n    for ($j = $i; $j < count($coordinates);\
    \ $j++) {\n      if ($coordinates[$i][0] == $coordinates[$j][0]\n          &&\
    \ $coordinates[$i][1] < $coordinates[$j][1]) {\n        $temp = $coordinates[$i];\n\
    \        $coordinates[$i] = $coordinates[$j];\n        $coordinates[$j] = $temp;\n\
    \      }\n    }\n  }\n  return $coordinates;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpgd8q_e16.php on line 40\n\n\
    Warning: Undefined array key 1 in /tmp/tmpgd8q_e16.php on line 40\n\nWarning:\
    \ Undefined array key 1 in /tmp/tmpgd8q_e16.php on line 40\n\nWarning: Undefined\
    \ array key 1 in /tmp/tmpgd8q_e16.php on line 40\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgd8q_e16.php:54\nStack trace:\n#0 /tmp/tmpgd8q_e16.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgd8q_e16.php on line 54\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    foreach ($lst as $index => $row) {\n        foreach ($row as $index2 => $number)\
    \ {\n            if ($number == $x) {\n                $coordinates[] = [$index,\
    \ $index2];\n            }\n        }\n    }\n    usort($coordinates, function\
    \ ($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    $coordinates = array_map(function\
    \ ($a) {\n        return array_reverse($a);\n    }, $coordinates);\n    return\
    \ $coordinates;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xr_1ggj.php:39\n\
    Stack trace:\n#0 /tmp/tmp2xr_1ggj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2xr_1ggj.php\
    \ on line 39\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $found_points = [];\n\
    \    $y = 0;\n    foreach ($lst as $row) {\n        $x_pos = array_search($x,\
    \ $row);\n        if ($x_pos !== false) {\n            $found_points[] = [$y,\
    \ $x_pos];\n        }\n        $y++;\n    }\n    usort($found_points, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $found_points;\n\
    }\n\n$input_matrix = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n   \
    \ [1, 2, 3, 4, 5, 1]\n];\n\necho json_encode(get_row($input_matrix, 1)) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[[0,0],[1,0],[2,0]]\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpsi3hfuki.php:48\nStack trace:\n#0 /tmp/tmpsi3hfuki.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsi3hfuki.php on line 48\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    //your code here\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu9s64uqc.php:26\n\
    Stack trace:\n#0 /tmp/tmpu9s64uqc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpu9s64uqc.php\
    \ on line 26\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $arr = [];\n  foreach ($lst\
    \ as $k => $v) {\n    foreach ($v as $kk => $vv) {\n      if ($vv == $x) {\n \
    \       $arr[] = [$k, $kk];\n      }\n    }\n  }\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[0] != $b[0]) {\n      return $a[0] > $b[0];\n    } else {\n  \
    \    return $a[1] < $b[1];\n    }\n  });\n  return $arr;\n}\n\n$a = [[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$b = 1;\nprint_r(get_row($a,\
    \ $b));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\nDeprecated: usort(): Returning bool from comparison function is deprecated,\
    \ return an integer less than, equal to, or greater than zero in /tmp/tmppgkgvsaf.php\
    \ on line 32\nArray\n(\n    [0] => Array\n        (\n            [0] => 0\n  \
    \          [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [2] => Array\n        (\n     \
    \       [0] => 1\n            [1] => 0\n        )\n\n    [3] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n\
    \        (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n\nDeprecated:\
    \ usort(): Returning bool from comparison function is deprecated, return an integer\
    \ less than, equal to, or greater than zero in /tmp/tmppgkgvsaf.php on line 32\n\
    \nDeprecated: usort(): Returning bool from comparison function is deprecated,\
    \ return an integer less than, equal to, or greater than zero in /tmp/tmppgkgvsaf.php\
    \ on line 32\n\nDeprecated: usort(): Returning bool from comparison function is\
    \ deprecated, return an integer less than, equal to, or greater than zero in /tmp/tmppgkgvsaf.php\
    \ on line 32\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $coords = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $coords[] = [$i, $j];\n      }\n\
    \    }\n  }\n  usort($coords, function($a, $b) {\n    if ($a[0] > $b[0]) {\n \
    \     return 1;\n    } else if ($a[0] < $b[0]) {\n      return -1;\n    } else\
    \ {\n      if ($a[1] > $b[1]) {\n        return -1;\n      } else if ($a[1] <\
    \ $b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n  \
    \  }\n  });\n  return $coords;\n}\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]];\nvar_dump(get_row($lst, 1));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $answer = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $answer[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    usort($answer, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n\
    \        }\n        return $a[0] <=> $b[0];\n    });\n    return $answer;\n}\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $key2 => $value2) {\n\
    \            if ($value2 == $x) {\n                $result[] = [$key, $key2];\n\
    \            }\n        }\n    }\n    if (empty($result)) {\n        return $result;\n\
    \    } else {\n        usort($result, function ($a, $b) {\n            if ($a[0]\
    \ == $b[0]) {\n                return $b[1] - $a[1];\n            }\n        \
    \    return $a[0] - $b[0];\n        });\n        return $result;\n    }\n}\necho\
    \ \"<pre>\";\nvar_dump(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1));\necho \"</pre>\";\necho \"<pre>\";\nvar_dump(get_row([],\
    \ 1));\necho \"</pre>\";\necho \"<pre>\";\nvar_dump(get_row([[], [1], [1, 2, 3]],\
    \ 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n\
    \    int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n  \
    \  int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    </pre><pre>array(0) {\n}\n</pre><pre>array(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n\
    \    int(2)\n    [1]=>\n    int(2)\n  }\n}\n</pre>"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  $i = 0;\n\
    \  foreach ($lst as $row) {\n    $j = 0;\n    foreach ($row as $item) {\n    \
    \  if ($item == $x) {\n        $result[] = [$i, $j];\n      }\n      $j++;\n \
    \   }\n    $i++;\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] != $b[0])\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $b[1] - $a[1];\n  });\n  return\
    \ $result;\n}\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1], [1,\
    \ 2, 3]], 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    // your code\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzm3ht_od.php:25\n\
    Stack trace:\n#0 /tmp/tmpzm3ht_od.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzm3ht_od.php\
    \ on line 25\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $output = [];\n  foreach\
    \ ($lst as $i => $row) {\n    foreach ($row as $j => $num) {\n      if ($num ==\
    \ $x) $output[] = [$i, $j];\n    }\n  }\n  usort($output, function($a, $b) {\n\
    \    if ($a[0] == $b[0]) return $b[1] - $a[1];\n    return $a[0] - $b[0];\n  });\n\
    \  return $output;\n}\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1],\
    \ [1, 2, 3]], 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // Your code here\n}\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9y6gu2z_.php:25\n\
    Stack trace:\n#0 /tmp/tmp9y6gu2z_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9y6gu2z_.php\
    \ on line 25\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    $sort = function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n\
    \        return $a[0] - $b[0];\n    };\n    usort($result, $sort);\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $xIndex => $xArr) {\n        foreach ($xArr as $yIndex => $yVal) {\n\
    \            if ($yVal == $x) {\n                $result[] = [$xIndex, $yIndex];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n$lst = [\n    [1,\
    \ 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\nprint_r(get_row($lst,\
    \ 1));\necho \"\\n\";\n$lst = [];\nprint_r(get_row($lst, 1));\necho \"\\n\";\n\
    $lst = [\n    [],\n    [1],\n    [1, 2, 3]\n];\nprint_r(get_row($lst, 3));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n\nArray\n(\n\
    )\n\nArray\n(\n    [0] => Array\n        (\n            [0] => 2\n           \
    \ [1] => 2\n        )\n\n)\n\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $coordinates[] = [$key, $k];\n\
    \            }\n        }\n    }\n    usort($coordinates, function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return $coordinates;\n}\n\nprint_r(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([],\
    \ 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] > $b[0]) {\n            return 1;\n        } elseif\
    \ ($a[0] < $b[0]) {\n            return -1;\n        } else {\n            if\
    \ ($a[1] > $b[1]) {\n                return -1;\n            } elseif ($a[1] <\
    \ $b[1]) {\n                return 1;\n            } else {\n                return\
    \ 0;\n            }\n        }\n    });\n    return $result;\n}\n$lst = [\n  \
    \  [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\
    print_r(get_row($lst, 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  foreach ($lst as $k1 =>\
    \ $v1) {\n    foreach ($v1 as $k2 => $v2) {\n      if ($v2 == $x) {\n        $rows[$k1][$k2]\
    \ = $v2;\n      }\n    }\n  }\n  if (!isset($rows)) {\n    return array();\n \
    \ }\n  ksort($rows);\n  foreach ($rows as $k => $v) {\n    krsort($rows[$k]);\n\
    \  }\n  foreach ($rows as $k1 => $v1) {\n    foreach ($v1 as $k2 => $v2) {\n \
    \     $res[] = array($k1, $k2);\n    }\n  }\n  return $res;\n}\nprint_r(get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1));\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $results = [];\n  foreach\
    \ ($lst as $row => $cols) {\n    foreach ($cols as $col => $val) {\n      if ($val\
    \ == $x) {\n        $results[] = [$row, $col];\n      }\n    }\n  }\n  usort($results,\
    \ function($a, $b) {\n    if ($a[0] != $b[0]) {\n      return $a[0] < $b[0] ?\
    \ -1 : 1;\n    }\n    return $a[1] > $b[1] ? -1 : 1;\n  });\n  return $results;\n\
    }\necho PHP_EOL;\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    '
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $results = [];\n    foreach\
    \ ($lst as $i => $array) {\n        foreach ($array as $j => $value) {\n     \
    \       if ($value == $x) {\n                $results[] = [$i, $j];\n        \
    \    }\n        }\n    }\n    usort($results, function ($a, $b) {\n        if\
    \ ($a[0] != $b[0]) {\n            return $a[0] - $b[0];\n        } else {\n  \
    \          return $b[1] - $a[1];\n        }\n    });\n    return $results;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcyien_h.php:33\n\
    Stack trace:\n#0 /tmp/tmplcyien_h.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplcyien_h.php\
    \ on line 33\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    $max\
    \ = count($lst);\n    for ($i = 0; $i < $max; $i++) {\n        $max2 = count($lst[$i]);\n\
    \        for ($j = 0; $j < $max2; $j++) {\n            if ($lst[$i][$j] == $x)\
    \ {\n                $res[] = [$i, $j];\n            }\n        }\n    }\n   \
    \ usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n           \
    \ return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n \
    \   return $res;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $matches = [];\n    $matches_str\
    \ = [];\n    $cols = [];\n    foreach ($lst as $row => $arr) {\n        $idx =\
    \ array_search($x, $arr);\n        if ($idx !== false) {\n            $match =\
    \ [$row, $idx];\n            $match_str = $row . '-' . $idx;\n            array_push($matches,\
    \ $match);\n            array_push($matches_str, $match_str);\n            array_push($cols,\
    \ $idx);\n        }\n    }\n    array_multisort($matches_str, SORT_ASC, $matches);\n\
    \    array_multisort($cols, SORT_DESC, $matches);\n    return $matches;\n}\necho\
    \ '<pre>';\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1));\necho '</pre>';\necho '<pre>';\nprint_r(get_row([], 1));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Array\n        (\n            [0] => 0\n    \
    \        [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] =>\
    \ 1\n            [1] => 0\n        )\n\n    [2] => Array\n        (\n        \
    \    [0] => 2\n            [1] => 0\n        )\n\n)\n</pre><pre>Array\n(\n)\n\
    </pre><pre>Array\n(\n    [0] => Array\n        (\n            [0] => 2\n     \
    \       [1] => 2\n        )\n\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpeji36vmd.php:49\nStack trace:\n#0 /tmp/tmpeji36vmd.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeji36vmd.php on line 49\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  $row\
    \ = 0;\n  foreach ($lst as $row_data) {\n    $column = 0;\n    foreach ($row_data\
    \ as $column_data) {\n      if ($column_data == $x) {\n        $rows[] = array($row,\
    \ $column);\n      }\n      $column++;\n    }\n    $row++;\n  }\n  array_multisort($rows);\n\
    \  return $rows;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegk9zdd8.php:38\n\
    Stack trace:\n#0 /tmp/tmpegk9zdd8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpegk9zdd8.php\
    \ on line 38\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $row => $lst2) {\n    foreach ($lst2 as $col => $x2) {\n      if ($x\
    \ == $x2) {\n        $result[] = [$row, $col];\n      }\n    }\n  }\n  // echo\
    \ json_encode($result) . PHP_EOL;\n  usort($result, function($a, $b) {\n    if\
    \ ($a[0] < $b[0]) {\n      return -1;\n    } else if ($a[0] > $b[0]) {\n     \
    \ return 1;\n    } else {\n      if ($a[1] < $b[1]) {\n        return 1;\n   \
    \   } else if ($a[1] > $b[1]) {\n        return -1;\n      } else {\n        return\
    \ 0;\n      }\n    }\n  });\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // BEGIN (write your solution\
    \ here)\n  $res = [];\n  foreach ($lst as $key => $value) {\n    $found = array_keys($value,\
    \ $x);\n    if (!empty($found)) {\n      foreach ($found as $y) {\n        $res[]\
    \ = [$key, $y];\n      }\n    }\n  }\n  return $res;\n  // END\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3b7gxkw.php:37\n\
    Stack trace:\n#0 /tmp/tmpj3b7gxkw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj3b7gxkw.php\
    \ on line 37\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  if (!$lst) return array();\n\
    \  $result = array();\n  for ($i = 0; $i < count($lst); $i++) {\n    $row = $lst[$i];\n\
    \    for ($j = 0; $j < count($row); $j++) {\n      if ($row[$j] == $x) {\n   \
    \     $result[] = array($i, $j);\n      }\n    }\n  }\n  sort($result);\n  $result\
    \ = array_map(function($el) {\n    $el[1] = -$el[1];\n    return $el;\n  }, $result);\n\
    \  sort($result);\n  $result = array_map(function($el) {\n    $el[1] = -$el[1];\n\
    \    return $el;\n  }, $result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $columns = array_keys($value, $x);\n   \
    \     if (count($columns) > 0) {\n            foreach ($columns as $col) {\n \
    \               $result[] = [$key, $col];\n            }\n        }\n    }\n \
    \   return $result;\n}\n\n$a = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4,\
    \ 1, 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($a, $x));\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5bxtiuwa.php:38\nStack trace:\n\
    #0 /tmp/tmp5bxtiuwa.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5bxtiuwa.php\
    \ on line 38\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $output = [];\n  foreach\
    \ ($lst as $key1 => $array) {\n    foreach ($array as $key2 => $value) {\n   \
    \   if ($value == $x) {\n        $output[] = [$key1, $key2];\n      }\n    }\n\
    \  }\n  return $output;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6liqoa6x.php:34\n\
    Stack trace:\n#0 /tmp/tmp6liqoa6x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6liqoa6x.php\
    \ on line 34\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $row => $arr) {\n    foreach ($arr as $col => $val) {\n      if ($val\
    \ == $x) {\n        $result[] = [$row, $col];\n      }\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    return ($a[0] > $b[0]) ? 1 : -1;\n  });\n  $temp = [];\n\
    \  foreach ($result as $i => $row) {\n    $temp[$row[0]][] = $row;\n  }\n  foreach\
    \ ($temp as $row => $cols) {\n    usort($temp[$row], function($a, $b) {\n    \
    \  return ($a[1] < $b[1]) ? 1 : -1;\n    });\n  }\n  $result = [];\n  foreach\
    \ ($temp as $row => $cols) {\n    foreach ($cols as $col) {\n      $result[] =\
    \ $col;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $output = [];\n    foreach\
    \ ($lst as $rows => $row) {\n        foreach ($row as $columns => $item) {\n \
    \           if ($item == $x) {\n                $output[] = [$rows, $columns];\n\
    \            }\n        }\n    }\n    usort($output, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    foreach ($lst as $y => $row) {\n        foreach ($row as $x1 => $value) {\n\
    \            if ($value == $x) {\n                $coordinates[] = [$y, $x1];\n\
    \            }\n        }\n    }\n    usort($coordinates, function ($a, $b) {\n\
    \        return $a[0] - $b[0];\n    });\n    return $coordinates;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbdzyvkd.php:37\n\
    Stack trace:\n#0 /tmp/tmpbbdzyvkd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbbdzyvkd.php\
    \ on line 37\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row => $arr) {\n        foreach ($arr as $col => $value) {\n     \
    \       if ($value == $x) {\n                $result[] = [$row, $col];\n     \
    \       }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if\
    \ ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return\
    \ $a[0] - $b[0];\n    });\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $row => $row_data) {\n    foreach ($row_data as $col => $val) {\n \
    \     if ($val == $x) {\n        $result[] = [$row, $col];\n      }\n    }\n \
    \ }\n  uasort($result, function($a, $b) {\n    if ($a[0] > $b[0]) {\n      return\
    \ 1;\n    } elseif ($a[0] < $b[0]) {\n      return -1;\n    } else {\n      if\
    \ ($a[1] > $b[1]) {\n        return -1;\n      } elseif ($a[1] < $b[1]) {\n  \
    \      return 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n \
    \ return $result;\n}\n\n$lst = [\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n\
    \  [1, 2, 3, 4, 5, 1]\n];\necho '<pre>';\nvar_dump(get_row($lst, 1));\necho '</pre>';\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n\
    \    int(0)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n  \
    \  int(4)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    </pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixuco8zc.php:57\n\
    Stack trace:\n#0 /tmp/tmpixuco8zc.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpixuco8zc.php\
    \ on line 57\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $returned = [];\n  $num\
    \ = 0;\n  foreach ($lst as $index => $row) {\n    foreach ($row as $key => $value)\
    \ {\n      if ($value == $x) {\n        $returned[] = [$index, $key];\n      }\n\
    \    }\n  }\n  $sorted = [];\n  foreach ($returned as $key => $row) {\n    $sorted[$key]\
    \ = $row[0];\n  }\n  array_multisort($sorted, SORT_ASC, $returned);\n  return\
    \ $returned;\n}\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk2_kghu0.php:43\nStack trace:\n\
    #0 /tmp/tmpk2_kghu0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpk2_kghu0.php\
    \ on line 43\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = 0;\n    $arr =\
    \ [];\n    foreach ($lst as $i => $ele) {\n        $col = array_search($x, $ele);\n\
    \        if ($col !== false) {\n            $arr[] = [$row, $col];\n        }\n\
    \        $row++;\n    }\n    return $arr;\n}\nprint_r(get_row([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 2\n            [1] => 0\n        )\n\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpu8kk9zmz.php:35\nStack trace:\n#0 /tmp/tmpu8kk9zmz.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu8kk9zmz.php on line 35\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  if (!is_array($lst)) {\n\
    \    throw new Exception(\"get_row() function is expecting an argument of array\
    \ type\\n\");\n  }\n  if (!is_int($x)) {\n    throw new Exception(\"get_row()\
    \ function is expecting a second argument of integer type\\n\");\n  }\n  if (count($lst)\
    \ == 0) {\n    return array();\n  }\n  $row_coords = array();\n  $i = 0;\n  foreach\
    \ ($lst as $row) {\n    $j = 0;\n    foreach ($row as $num) {\n      if ($num\
    \ == $x) {\n        $row_coords[] = array($i, $j);\n      }\n      $j++;\n   \
    \ }\n    $i++;\n  }\n  if (count($row_coords) > 0) {\n    usort($row_coords, function($a,\
    \ $b) {\n      if ($a[0] == $b[0]) {\n        return $b[1] - $a[1];\n      }\n\
    \      return $a[0] - $b[0];\n    });\n  }\n  return $row_coords;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $coordinates = [];\n  foreach\
    \ ($lst as $key => $row) {\n    if (in_array($x, $row)) {\n      $y = array_search($x,\
    \ $row);\n      $coordinates[] = [$key, $y];\n    }\n  }\n  if (!$coordinates)\
    \ {\n    return [];\n  }\n  $sorted_coordinates = $coordinates;\n  usort($sorted_coordinates,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $sorted_coordinates;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzybkuoq0.php:43\n\
    Stack trace:\n#0 /tmp/tmpzybkuoq0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzybkuoq0.php\
    \ on line 43\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$ans = array();\n\tforeach\
    \ ($lst as $row_index => $row) {\n\t\tforeach ($row as $column_index => $column)\
    \ {\n\t\t\tif ($column == $x) {\n\t\t\t\t$ans[] = array($row_index, $column_index);\n\
    \t\t\t}\n\t\t}\n\t}\n\tusort($ans, function($a, $b) {\n\t\tif ($a[0] < $b[0])\
    \ {\n\t\t\treturn -1;\n\t\t} else if ($a[0] > $b[0]) {\n\t\t\treturn 1;\n\t\t\
    } else {\n\t\t\tif ($a[1] < $b[1]) {\n\t\t\t\treturn 1;\n\t\t\t} else if ($a[1]\
    \ > $b[1]) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\
    \t\t}\n\t});\n\treturn $ans;\n}\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\n$ret = get_row($lst, $x);\n\
    print_r($ret);\nprint_r(get_row(array(), 1));\nprint_r(get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3));\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $output = [];\n  foreach\
    \ ($lst as $k => $v) {\n    foreach ($v as $kk => $vv) {\n      if ($vv == $x)\
    \ {\n        $output[] = [$k, $kk];\n      }\n    }\n  }\n  if (count($output)\
    \ == 0) {\n    return $output;\n  } else {\n    $output2 = $output;\n    $output\
    \ = [];\n    $keys = array_keys($output2);\n    usort($keys, function($a, $b)\
    \ use ($output2) {\n      if ($output2[$a][0] == $output2[$b][0]) {\n        return\
    \ $output2[$b][1] - $output2[$a][1];\n      } else {\n        return $output2[$a][0]\
    \ - $output2[$b][0];\n      }\n    });\n    foreach ($keys as $key) {\n      $output[]\
    \ = $output2[$key];\n    }\n    return $output;\n  }\n}\nprint_r(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([],\
    \ 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $count = 0;\n  $store =\
    \ [];\n  foreach ($lst as $row) {\n    $count = 0;\n    foreach ($row as $column)\
    \ {\n      if ($column == $x) {\n        $coordinates = [$count, $row];\n    \
    \    array_push($store, $coordinates);\n      }\n      $count++;\n    }\n  }\n\
    \  return $store;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiudkfte9.php:38\n\
    Stack trace:\n#0 /tmp/tmpiudkfte9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpiudkfte9.php\
    \ on line 38\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $locations = [];\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        $row = $lst[$i];\n        for\
    \ ($j = 0; $j < count($row); $j++) {\n            if ($row[$j] == $x) {\n    \
    \            $locations[] = [$i, $j];\n            }\n        }\n    }\n    usort($locations,\
    \ function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $locations;\n\
    }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$row = 0;\n\t$col = 0;\n\
    \t$ret = array();\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t$row++;\n\t\t\
    for ($j = 0; $j < count($lst[$i]); $j++) {\n\t\t\t$col++;\n\t\t\tif ($lst[$i][$j]\
    \ == $x) {\n\t\t\t\t$ret[] = array($row, $col);\n\t\t\t}\n\t\t}\n\t\t$col = 0;\n\
    \t}\n\tusort($ret, function($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn\
    \ $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\treturn $ret;\n}\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7ro_efc.php:44\n\
    Stack trace:\n#0 /tmp/tmpu7ro_efc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpu7ro_efc.php\
    \ on line 44\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $r => $row) {\n        foreach ($row as $c => $col) {\n  \
    \          if ($col == $x) {\n                $rows[] = array($r, $c);\n     \
    \       }\n        }\n    }\n    usort($rows, function($a, $b) {\n        return\
    \ $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return $rows;\n\
    }\n\nvar_dump(get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6),\
    \ array(1, 2, 3, 4, 5, 1)), 1));\nvar_dump(get_row(array(), 1));\nvar_dump(get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3));\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    array(0) {\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n\
    \    int(2)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    foreach ($lst as $row => $r) {\n        foreach ($r as $col => $c) {\n  \
    \          if ($c == $x) {\n                $coordinates[] = [$row, $col];\n \
    \           }\n        }\n    }\n    usort($coordinates, function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return $coordinates;\n}\necho '<pre>';\n\
    var_dump(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1));\nvar_dump(get_row([], 1));\nvar_dump(get_row([[], [1], [1, 2, 3]], 3));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n\
    \    int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n  \
    \  int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    array(0) {\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n\
    \    int(2)\n  }\n}\n</pre>"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $indices = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $indices[] = [$i, $j];\n      }\n\
    \    }\n  }\n  sort($indices);\n  foreach ($indices as $index) {\n    $sublist[]\
    \ = [$index[0], -1 * $index[1]];\n  }\n  sort($sublist);\n  foreach ($sublist\
    \ as $sub) {\n    $sublist2[] = [$sub[0], -1 * $sub[1]];\n  }\n  return $sublist2;\n\
    }\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1));\n$x = 1;\nvar_dump(get_row($lst, $x));\n$lst = array();\n$x =\
    \ 1;\nvar_dump(get_row($lst, $x));\n$lst = array(array(), array(1), array(1, 2,\
    \ 3));\n$x = 3;\nvar_dump(get_row($lst, $x));\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, null given in /tmp/tmpfxjgjesi.php:30\nStack trace:\n#0 /tmp/tmpfxjgjesi.php(30):\
    \ sort(NULL)\n#1 /tmp/tmpfxjgjesi.php(41): get_row(Array, 1)\n#2 {main}\n  thrown\
    \ in /tmp/tmpfxjgjesi.php on line 30\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = [];\n\
    \    foreach ($lst as $y => $row) {\n        foreach ($row as $x1 => $value) {\n\
    \            if ($value == $x) {\n                $coordinates[] = [$y, $x1];\n\
    \            }\n        }\n    }\n    usort($coordinates, function ($a, $b) {\n\
    \        return strcmp($a[0], $b[0]);\n    });\n    foreach ($coordinates as $key\
    \ => $value) {\n        usort($coordinates[$key], function ($a, $b) {\n      \
    \      return $b <=> $a;\n        });\n    }\n    return $coordinates;\n}\n\n\
    var_dump(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(0)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(4)\n    [1]=>\n    int(1)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(5)\n    [1]=>\n    int(2)\n  }\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpec7ri9nn.php:43\nStack\
    \ trace:\n#0 /tmp/tmpec7ri9nn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpec7ri9nn.php\
    \ on line 43\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $r = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        $col = array_search($x, $columns);\n \
    \       if ($col !== false) {\n            $r[] = [$row, $col];\n        }\n \
    \   }\n    usort($r, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n    \
    \        return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n   \
    \ });\n    return $r;\n}\n\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\nArray\n(\n    [0] =>\
    \ Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxm96c1w.php:42\n\
    Stack trace:\n#0 /tmp/tmpyxm96c1w.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpyxm96c1w.php\
    \ on line 42\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $i = 0;\n  $coord = [];\n\
    \  foreach ($lst as $v) {\n    $y = 0;\n    foreach ($v as $d) {\n      if ($d\
    \ == $x) {\n        $coord[] = [$i, $y];\n      }\n      $y++;\n    }\n    $i++;\n\
    \  }\n  sort($coord);\n  foreach ($coord as $c) {\n    $d[] = $c[0];\n  }\n  array_multisort($d,\
    \ SORT_ASC, $coord);\n  return $coord;\n}\necho '<pre>';\nprint_r(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(get_row([], 1));\necho '</pre>';\necho '<pre>';\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nFatal error: Uncaught Error: Cannot use a scalar value as an array\
    \ in /tmp/tmp9pc1dx50.php:32\nStack trace:\n#0 /tmp/tmp9pc1dx50.php(38): get_row(Array,\
    \ 1)\n#1 {main}\n  thrown in /tmp/tmp9pc1dx50.php on line 32\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row => $arr) {\n        $offset = array_search($x, $arr);\n      \
    \  if ($offset !== false) {\n            $result[] = [$row, $offset];\n      \
    \  }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] <=>\
    \ $b[0] || $b[1] <=> $a[1];\n    });\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: usort(): Returning bool from comparison function is deprecated,\
    \ return an integer less than, equal to, or greater than zero in /tmp/tmp149u7ss6.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp149u7ss6.php:36\n\
    Stack trace:\n#0 /tmp/tmp149u7ss6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp149u7ss6.php\
    \ on line 36\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    if (is_empty($lst)) {\n\
    \        return array();\n    }\n    $result = array();\n    foreach ($lst as\
    \ $r => $row) {\n        foreach ($row as $c => $cell) {\n            if ($cell\
    \ == $x) {\n                $result[] = array($r, $c);\n            }\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_empty() in\
    \ /tmp/tmpxhc0e4y3.php:18\nStack trace:\n#0 /tmp/tmpxhc0e4y3.php(33): get_row(Array,\
    \ 1)\n#1 /tmp/tmpxhc0e4y3.php(37): candidate(Array, 1)\n#2 /tmp/tmpxhc0e4y3.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxhc0e4y3.php on line 18\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $y => $row) {\n        $columns = array_keys($row, $x);\n        foreach\
    \ ($columns as $column) {\n            $result[] = [$y, $column];\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] != $b[0]) {\n\
    \            return $a[0] - $b[0];\n        }\n        return $b[1] - $a[1];\n\
    \    });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    foreach\
    \ ($lst as $key => $item) {\n        $key1 = array_search($x, $item);\n      \
    \  if ($key1 !== false) {\n            $res[] = [$key, $key1];\n        }\n  \
    \  }\n    usort($res, function ($a, $b) {\n        if ($a[0] > $b[0]) {\n    \
    \        return 1;\n        } elseif ($a[0] == $b[0]) {\n            if ($a[1]\
    \ < $b[1]) {\n                return 1;\n            } elseif ($a[1] == $b[1])\
    \ {\n                return 0;\n            } else {\n                return -1;\n\
    \            }\n        } else {\n            return -1;\n        }\n    });\n\
    \    return $res;\n}\n\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 2\n            [1] => 0\n        )\n\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprf89k_pl.php:49\nStack trace:\n#0 /tmp/tmprf89k_pl.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprf89k_pl.php on line 49\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  if (empty($lst)) {\n  \
    \  return array();\n  }\n  $result = array();\n  foreach ($lst as $k => $row)\
    \ {\n    if (empty($row)) {\n      continue;\n    }\n    if (in_array($x, $row))\
    \ {\n      foreach ($row as $key => $val) {\n        if ($val == $x) {\n     \
    \     $temp = array();\n          $temp[] = $k;\n          $temp[] = $key;\n \
    \         $result[] = $temp;\n        }\n      }\n    }\n  }\n  return $result;\n\
    }\n$a = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3,\
    \ 4, 5, 1));\nprint_r(get_row($a, 1));\nprint_r(get_row(array(), 1));\nprint_r(get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3));\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa310t_y7.php:49\n\
    Stack trace:\n#0 /tmp/tmpa310t_y7.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpa310t_y7.php\
    \ on line 49\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  $prev_row\
    \ = 0;\n  $cnt = 0;\n  foreach ($lst as $row_idx => $row) {\n    $row_idx++;\n\
    \    foreach ($row as $col_idx => $item) {\n      $col_idx++;\n      if ($item\
    \ === $x) {\n        $result[] = [$row_idx, $col_idx];\n      }\n    }\n  }\n\
    \  usort($result, function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return\
    \ $b[1] <=> $a[1];\n    }\n    return $a[0] <=> $b[0];\n  });\n  return $result;\n\
    }\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\nprint_r(get_row($lst,\
    \ 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 1\n         \
    \   [1] => 1\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 5\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 2\n            [1] => 1\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 3\n            [1] => 6\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 3\n            [1] => 1\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph0aldaui.php:45\nStack trace:\n\
    #0 /tmp/tmph0aldaui.php(53): test()\n#1 {main}\n  thrown in /tmp/tmph0aldaui.php\
    \ on line 45\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $res = [];\n  foreach ($lst\
    \ as $i => $item) {\n    $row = array_keys($item, $x);\n    foreach ($row as $index)\
    \ {\n      $res[] = [$i, $index];\n    }\n  }\n  usort($res, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) {\n      return $b[1] <=> $a[1];\n    }\n    return\
    \ $a[0] <=> $b[0];\n  });\n  return $res;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5,\
    \ 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\n$x = 1;\n\nprint_r(get_row($lst,\
    \ $x));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$coords = [];\n\t$i = 0;\n\
    \tforeach ($lst as $row) {\n\t\t$coord = array_search($x, $row);\n\t\tif ($coord\
    \ !== false) {\n\t\t\t$coords[] = [$i, $coord];\n\t\t}\n\t\t$i++;\n\t}\n\tusort($coords,\
    \ function($a, $b) {\n\t\tif ($a[0] < $b[0]) return -1;\n\t\tif ($a[0] > $b[0])\
    \ return 1;\n\t\tif ($a[1] > $b[1]) return -1;\n\t\tif ($a[1] < $b[1]) return\
    \ 1;\n\t\treturn 0;\n\t});\n\treturn $coords;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmbnf4ix.php:42\n\
    Stack trace:\n#0 /tmp/tmppmbnf4ix.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppmbnf4ix.php\
    \ on line 42\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $res = [];\n  $row = 0;\n\
    \  $col = 0;\n  foreach ($lst as $l) {\n    $col = 0;\n    foreach ($l as $c)\
    \ {\n      if ($c == $x) {\n        $res[] = [$row, $col];\n      }\n      $col++;\n\
    \    }\n    $row++;\n  }\n  usort($res, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $res;\n}\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1], [1, 2,\
    \ 3]], 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\nArray\n(\n)\n\
    Array\n(\n    [0] => Array\n        (\n            [0] => 2\n            [1] =>\
    \ 2\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    $x_count\
    \ = 0;\n    foreach ($lst as $row => $subarray) {\n        $occurences = array_keys($subarray,\
    \ $x);\n        foreach ($occurences as $item) {\n            $result[$x_count]\
    \ = array($row, $item);\n            $x_count++;\n        }\n    }\n    usort($result,\
    \ function($a, $b) {\n        if ($a[0] > $b[0]) {\n            return true;\n\
    \        } elseif ($a[0] == $b[0]) {\n            if ($a[1] < $b[1]) {\n     \
    \           return true;\n            }\n        }\n        return false;\n  \
    \  });\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpfsgeitkp.php on
    line 36


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpfsgeitkp.php on
    line 36


    Deprecated: usort(): Returning bool from comparison function is deprecated, return
    an integer less than, equal to, or greater than zero in /tmp/tmpfsgeitkp.php on
    line 36

    '
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    if(!$lst) return $lst;\n\
    \    $coords = [];\n    foreach($lst as $y => $row) {\n        foreach($row as\
    \ $i => $el) {\n            if($el == $x) $coords[] = [$y, $i];\n        }\n \
    \   }\n    array_multisort(array_column($coords, 0), SORT_ASC, array_column($coords,\
    \ 1), SORT_DESC, $coords);\n    return $coords;\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $array = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $key1 => $value1) {\n\
    \            if ($value1 == $x) {\n                $array[] = [$key, $key1];\n\
    \            }\n        }\n    }\n    sort($array);\n    return $array;\n}\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cgidya7.php:34\n\
    Stack trace:\n#0 /tmp/tmp3cgidya7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3cgidya7.php\
    \ on line 34\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $col_max = 0;\n  $result\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n  \
    \      if ($j > $col_max) {\n          $col_max = $j;\n        }\n      }\n  \
    \  }\n  }\n  $dcol = [];\n  for ($i = 0; $i < count($result); $i++) {\n    $dcol[]\
    \ = $col_max - $result[$i][1];\n  }\n  array_multisort($result, $dcol);\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q0319qi.php:43\n\
    Stack trace:\n#0 /tmp/tmp1q0319qi.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp1q0319qi.php\
    \ on line 43\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n}\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyn_k5iss.php:24\n\
    Stack trace:\n#0 /tmp/tmpyn_k5iss.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyn_k5iss.php\
    \ on line 24\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    foreach\
    \ ($lst as $rowIdx => $row) {\n        foreach ($row as $colIdx => $val) {\n \
    \           if ($val == $x) {\n                $res[] = [$rowIdx, $colIdx];\n\
    \            }\n        }\n    }\n    array_multisort(array_column($res, 0), SORT_ASC,\
    \ array_column($res, 1), SORT_DESC, $res);\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $row_columns = [];\n  foreach\
    \ ($lst as $row => $columns) {\n    foreach ($columns as $column => $value) {\n\
    \      if ($value == $x) {\n        $row_columns[] = [$row, $column];\n      }\n\
    \    }\n  }\n  usort($row_columns, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $row_columns;\n}\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $coords = [];\n  $rows\
    \ = 0;\n  foreach ($lst as $row) {\n    $columns = 0;\n    foreach ($row as $item)\
    \ {\n      if ($item == $x) {\n        $coords[] = [$rows, $columns];\n      }\n\
    \      $columns++;\n    }\n    $rows++;\n  }\n  usort($coords, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $coords;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $res = [];\n  foreach ($lst\
    \ as $row => $data) {\n    foreach ($data as $col => $value) {\n      if ($value\
    \ == $x) {\n        $res[] = [$row, $col];\n      }\n    }\n  }\n  usort($res,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $res;\n}\n\nclass Test extends\
    \ PHPUnit_Framework_TestCase {\n  public function test1() {\n    $this->assertEquals(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1), [[0, 0], [1, 4],\
    \ [1, 0], [2, 5], [2, 0]]);\n  }\n  public function test2() {\n    $this->assertEquals(get_row([],\
    \ 1), []);\n  }\n  public function test3() {\n    $this->assertEquals(get_row([[],\
    \ [1], [1, 2, 3]], 3), [[2, 2]]);\n  }\n}\n\nTest::main();\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"PHPUnit_Framework_TestCase\" not\
    \ found in /tmp/tmpgxl4jwa4.php:35\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpgxl4jwa4.php\
    \ on line 35\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    if (!is_array($lst))\
    \ {\n        return [];\n    }\n    $result = [];\n    $i = 0;\n    foreach ($lst\
    \ as $row) {\n        $j = 0;\n        foreach ($row as $col) {\n            if\
    \ ($col == $x) {\n                $result[] = [$i, $j];\n            }\n     \
    \       $j++;\n        }\n        $i++;\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] > $b[0]) {\n            return 1;\n        } elseif\
    \ ($a[0] < $b[0]) {\n            return -1;\n        } else {\n            if\
    \ ($a[1] > $b[1]) {\n                return -1;\n            } elseif ($a[1] <\
    \ $b[1]) {\n                return 1;\n            } else {\n                return\
    \ 0;\n            }\n        }\n    });\n    return $result;\n}\n\n$lst = [\n\
    \    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\
    var_dump(get_row($lst, 1));\nvar_dump(get_row([], 1));\nvar_dump(get_row([[],\
    \ [1], [1, 2, 3]], 3));\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    array(0) {\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n\
    \    int(2)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  foreach ($result as $key => $value) {\n    $sort_num[$key] = $value[0];\n\
    \    $sort_num_for_desc[$key] = $value[1];\n  }\n  array_multisort($sort_num,\
    \ SORT_ASC, $sort_num_for_desc, SORT_DESC, $result);\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_multisort(): Argument #1 ($array)\
    \ must be an array or a sort flag in /tmp/tmpp7739sp3.php:30\nStack trace:\n#0\
    \ /tmp/tmpp7739sp3.php(30): array_multisort(NULL, 4, NULL, 3, Array)\n#1 /tmp/tmpp7739sp3.php(35):\
    \ get_row(Array, 1)\n#2 /tmp/tmpp7739sp3.php(42): candidate(Array, 1)\n#3 /tmp/tmpp7739sp3.php(47):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpp7739sp3.php on line 30\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $k=>$v) {\n        $result_1 = [];\n        foreach ($v as $k1=>$v1)\
    \ {\n            if ($v1 == $x) {\n                $result_1[] = $k1;\n      \
    \      }\n        }\n        if (!empty($result_1)) {\n            $result[$k]\
    \ = $result_1;\n        }\n    }\n    ksort($result);\n    foreach ($result as\
    \ $k2=>$v2) {\n        rsort($result[$k2]);\n    }\n    $result_2 = [];\n    foreach\
    \ ($result as $k3=>$v3) {\n        foreach ($v3 as $k4=>$v4) {\n            $result_2[]\
    \ = [$k3, $v4];\n        }\n    }\n    return $result_2;\n}\n$lst = [\n    [1,\
    \ 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n$res =\
    \ get_row($lst, 1);\nprint_r($res);\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexrtc506.php:34\n\
    Stack trace:\n#0 /tmp/tmpexrtc506.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpexrtc506.php\
    \ on line 34\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] < $b[0]) {\n \
    \     return -1;\n    } else if ($a[0] > $b[0]) {\n      return 1;\n    } else\
    \ {\n      if ($a[1] < $b[1]) {\n        return 1;\n      } else if ($a[1] > $b[1])\
    \ {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n \
    \ });\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  foreach ($lst as $key =>\
    \ $row) {\n    foreach ($row as $index => $element) {\n      if ($element == $x)\
    \ {\n        $element = [$key, $index];\n        $values[] = $element;\n     \
    \ }\n    }\n  }\n  sort($values);\n  return $values;\n}\n$lst = array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\nprint_r(get_row($lst,\
    \ 1));\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpgpwmumyj.php:36\nStack trace:\n\
    #0 /tmp/tmpgpwmumyj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgpwmumyj.php\
    \ on line 36\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row_index => $row) {\n        foreach ($row as $column_index => $elem)\
    \ {\n            if ($elem == $x) {\n                $result[] = [$row_index,\
    \ $column_index];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] != $b[0]) {\n            return $a[0] < $b[0]\
    \ ? -1 : 1;\n        }\n        return $a[1] > $b[1] ? -1 : 1;\n    });\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3bg7qqs.php:25\n\
    Stack trace:\n#0 /tmp/tmpl3bg7qqs.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl3bg7qqs.php\
    \ on line 25\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $i => $row) {\n    $column = array_search($x, $row);\n    if ($column\
    \ !== false) {\n      $result[] = [$i, $column];\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n}\n\nprint_r(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\necho PHP_EOL;\n\
    print_r(get_row([], 1));\necho PHP_EOL;\nprint_r(get_row([[], [1], [1, 2, 3]],\
    \ 3));\necho PHP_EOL;\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 2\n            [1] => 0\n        )\n\n)\n\nArray\n(\n)\n\nArray\n(\n    [0]\
    \ => Array\n        (\n            [0] => 2\n            [1] => 2\n        )\n\
    \n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszwfn869.php:45\n\
    Stack trace:\n#0 /tmp/tmpszwfn869.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpszwfn869.php\
    \ on line 45\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n\t$arr = [];\n\tforeach ($lst\
    \ as $key => $row) {\n\t\tforeach ($row as $row_key => $v) {\n\t\t\tif ($v ==\
    \ $x) {\n\t\t\t\t$arr[] = [$key, $row_key];\n\t\t\t}\n\t\t}\n\t}\n\t$r = $r2 =\
    \ [];\n\tforeach ($arr as $v) {\n\t\t$r[$v[0]][] = $v[1];\n\t}\n\tforeach ($r\
    \ as $key => $row) {\n\t\tarsort($row);\n\t\tforeach ($row as $row_key => $v)\
    \ {\n\t\t\t$r2[] = [$key, $v];\n\t\t}\n\t}\n\treturn $r2;\n}\nprint_r(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 4\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 0\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 5\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 0\n        )\n\n)\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row => $cols) {\n        foreach ($cols as $col => $item) {\n    \
    \        if ($item == $x) {\n                $result[] = [$row, $col];\n     \
    \       }\n        }\n    }\n    // sort by row (key 0), then by col (key 1)\n\
    \    usort($result, function($a, $b) {\n        if ($a[0] != $b[0]) {\n      \
    \      return $a[0] - $b[0];\n        }\n        return $b[1] - $a[1];\n    });\n\
    \    return $result;\n}\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1,\
    \ 6],\n    [1, 2, 3, 4, 5, 1]\n];\nvar_dump(get_row($lst, 1));\nvar_dump(get_row([],\
    \ 1));\nvar_dump(get_row([[], [1], [1, 2, 3]], 3));\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    array(0) {\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n\
    \    int(2)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  foreach\
    \ ($lst as $row => $values) {\n    $cols = array_keys($values, $x);\n    foreach\
    \ ($cols as $col) {\n      $result[] = [$row, $col];\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n}\n\n$lst = [[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\nvar_dump(get_row($lst,\
    \ 1));\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $a = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $col) {\n           \
    \ if ($col == $x) {\n                $a[] = [$i, $j];\n            }\n       \
    \ }\n    }\n    usort($a, function($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $a;\n}\n\n$a = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]];\n$b = get_row($a, 1);\nvar_dump($b);\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(4)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $result = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) $result[] = [$i, $j];\n    }\n  }\n  return\
    \ $result;\n}\n\n$a = [\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2,\
    \ 3, 4, 5, 1]\n];\n\nprint_r(get_row($a, 1));\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 0\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 1\n\
    \            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => 1\n            [1] => 4\n        )\n\n    [3] => Array\n        (\n     \
    \       [0] => 2\n            [1] => 0\n        )\n\n    [4] => Array\n      \
    \  (\n            [0] => 2\n            [1] => 5\n        )\n\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphqvodako.php:40\nStack trace:\n\
    #0 /tmp/tmphqvodako.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphqvodako.php\
    \ on line 40\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  // keep track of array\
    \ index for each row\n  $indexes = [];\n  $count = 0;\n  $result = [];\n  foreach\
    \ ($lst as $key => $val) {\n    $indexes[$key] = 0;\n    foreach ($val as $key1\
    \ => $val1) {\n      if ($val1 == $x) {\n        $result[$count]['x'] = $key;\n\
    \        $result[$count]['y'] = $key1;\n        $count++;\n      }\n    }\n  }\n\
    \  $ans = [];\n  $count = 0;\n  // sort array by first index 'x'\n  usort($result,\
    \ function($a, $b) {\n    return $a['x'] - $b['x'];\n  });\n  // sort array by\
    \ second index 'y' descending\n  usort($result, function($a, $b) {\n    return\
    \ $b['y'] - $a['y'];\n  });\n  // translate from array of hashes to array of arrays\n\
    \  foreach ($result as $key => $val) {\n    $ans[$count][0] = $val['x'];\n   \
    \ $ans[$count][1] = $val['y'];\n    $count++;\n  }\n  return $ans;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3koydmn.php:56\n\
    Stack trace:\n#0 /tmp/tmpd3koydmn.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpd3koydmn.php\
    \ on line 56\n"
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $res = [];\n    foreach\
    \ ($lst as $k => $v) {\n        foreach ($v as $k2 => $v2) {\n            if ($v2\
    \ == $x) {\n                $res[] = [$k, $k2];\n            }\n        }\n  \
    \  }\n    return $res;\n}\n$data = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]];\n$data2 = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]];\n$res = get_row($data, 1);\n$res2 = get_row($data2, 1);\nvar_dump($res);\n\
    var_dump($res2);\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n   \
    \ int(0)\n  }\n  [2]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(4)\n\
    \  }\n  [3]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n\
    \  [4]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(5)\n  }\n}\n\
    array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(0)\n    [1]=>\n    int(0)\n\
    \  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(1)\n    [1]=>\n    int(0)\n  }\n\
    \  [2]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(0)\n  }\n}\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vohl0er.php:39\nStack\
    \ trace:\n#0 /tmp/tmp3vohl0er.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3vohl0er.php\
    \ on line 39\n"
  timestamp: 1660028995
- exit_code: 0
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $l = [];\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n            if ($lst[$i][$j] == $x) {\n                $l[] = [$i, $j];\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < count($l); $i++) {\n \
    \       for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i][0] >\
    \ $l[$j][0]) {\n                $temp = $l[$i];\n                $l[$i] = $l[$j];\n\
    \                $l[$j] = $temp;\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++)\
    \ {\n            if ($l[$i][0] == $l[$j][0]) {\n                if ($l[$i][1]\
    \ < $l[$j][1]) {\n                    $temp = $l[$i];\n                    $l[$i]\
    \ = $l[$j];\n                    $l[$j] = $temp;\n                }\n        \
    \    }\n        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028995
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $coordinates = [];\n  $number_of_rows\
    \ = count($lst);\n  for ($row = 0; $row < $number_of_rows; $row++) {\n    $number_of_columns\
    \ = count($lst[$row]);\n    for ($column = 0; $column < $number_of_columns; $column++)\
    \ {\n      if ($lst[$row][$column] == $x) {\n        $coordinates[] = [$row, $column];\n\
    \      }\n    }\n  }\n  // sort rows in ascending order\n  $coordinates = my_sort($coordinates,\
    \ 0);\n  // sort columns in descending order\n  $coordinates = my_sort($coordinates,\
    \ 1, SORT_DESC);\n  return $coordinates;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function my_sort() in\
    \ /tmp/tmpoqmpbahn.php:29\nStack trace:\n#0 /tmp/tmpoqmpbahn.php(36): get_row(Array,\
    \ 1)\n#1 /tmp/tmpoqmpbahn.php(40): candidate(Array, 1)\n#2 /tmp/tmpoqmpbahn.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpoqmpbahn.php on line 29\n"
  timestamp: 1660028995
