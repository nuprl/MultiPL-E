name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given array of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11,\
  \ -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\n\
  function order_by_points($nums) {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t// enter your code here.\n}", "    $sum = [];\n    $res = [];\n \
    \   foreach ($nums as $key => $val) {\n        $sum[$key] = sum_of_digits($val);\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $val) {\n        $res[]\
    \ = $nums[$key];\n    }\n    return $res;\n}\n", "\t$nums_with_points = array();\n\
    \t$sum_of_digits = 0;\n\t$sum_of_digits_array = array();\n\tforeach ($nums as\
    \ $num_key => $num) {\n\t\t$sum_of_digits = 0;\n\t\tif($num > 0) {\n\t\t\t$sum_of_digits\
    \ = array_sum(str_split($num));\n\t\t}\n\t\telse {\n\t\t\t$sum_of_digits = array_sum(str_split($num\
    \ * -1));\n\t\t}\n\t\t$nums_with_points[$num_key] = array(\n\t\t\t\"points\" =>\
    \ $sum_of_digits,\n\t\t\t\"number\" => $num\n\t\t);\n\t\t$sum_of_digits_array[]\
    \ = $sum_of_digits;\n\t}\n\tasort($sum_of_digits_array);\n\t$sorted_nums = array();\n\
    \tforeach ($sum_of_digits_array as $key => $value) {\n\t\tforeach ($nums_with_points\
    \ as $num_key => $num) {\n\t\t\tif($value == $num[\"points\"]) {\n\t\t\t\t$sorted_nums[]\
    \ = $num[\"number\"];\n\t\t\t\tunset($nums_with_points[$num_key]);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $sorted_nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "\t$m = array();\n\tforeach ($nums as $index => $num)\
    \ {\n\t\t$m[$index] = array_sum(str_split($num));\n\t}\n\tasort($m);\n\t$output\
    \ = array();\n\tforeach (array_keys($m) as $index) {\n\t\t$output[] = $nums[$index];\n\
    \t}\n\treturn $output;\n}\necho implode(', ', order_by_points(array(1, 11, -1,\
    \ -11, -12))), \"\\n\";", "    $sum = array();\n    foreach ($nums as $key =>\
    \ $value) {\n        $sum[$key] = $value;\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\nprint_r(order_by_points(array()));", "\tif (!empty($nums)) {\n\t\t\
    foreach ($nums as $key => $value) {\n\t\t\t$arr[] = [$key, sum_digits($value)];\n\
    \t\t}\n\t\tsort($arr);\n\t\t$new_arr = [];\n\t\tforeach ($arr as $key => $value)\
    \ {\n\t\t\t$new_arr[] = $nums[$value[0]];\n\t\t}\n\t\treturn $new_arr;\n\t} else\
    \ {\n\t\treturn [];\n\t}\n}\n", "    if (empty($nums)) {\n        return $nums;\n\
    \    }\n    $sum = array();\n    foreach ($nums as $key => $num) {\n        $sum[$key]\
    \ = array_sum(str_split($num));\n    }\n    array_multisort($sum, SORT_ASC, $nums);\n\
    \    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    for ($i = 0; $i < count($nums); $i++) {\n        $nums[$i] = [$nums[$i], array_sum(str_split($nums[$i]))];\n\
    \    }\n    array_multisort(array_column($nums, 1), SORT_ASC, $nums);\n    return\
    \ array_column($nums, 0);\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    echo '<br>';\nprint_r(order_by_points(array()));\n", "  $arr = array();\n  foreach\
    \ ($nums as $key => $value) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($value);\
    \ $i++) {\n      $sum += intval($value[$i]);\n    }\n    $arr[$key] = $sum;\n\
    \  }\n  array_multisort($arr, $nums);\n  return $nums;\n}\necho '<pre>';\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\necho '</pre>';", "    $sums = array();\n    foreach ($nums\
    \ as $index => $num) {\n        $sums[$index] = sum_of_digits($num);\n    }\n\
    \    asort($sums);\n    $sorted = array();\n    foreach ($sums as $index => $num)\
    \ {\n        $sorted[] = $nums[$index];\n    }\n    return $sorted;\n}", "  if\
    \ (!$nums) {\n    return $nums;\n  }\n  $sum_nums = [];\n  foreach ($nums as $key\
    \ => $num) {\n    $sum_nums[$key] = array_sum(str_split($num));\n  }\n  array_multisort($sum_nums,\
    \ SORT_ASC, $nums);\n  return $nums;\n}\n", "    $nums_count = count($nums);\n\
    \    if ($nums_count <= 1) {\n        return $nums;\n    }\n    $buckets = [];\n\
    \    $min_sum = -1;\n    $max_sum = -1;\n    for ($i = 0; $i < $nums_count; $i++)\
    \ {\n        $num = $nums[$i];\n        $digits = [];\n        $digit_sum = 0;\n\
    \        if ($num < 0) {\n            $num = -$num;\n        }\n        while\
    \ ($num > 0) {\n            $digit = $num % 10;\n            $num = floor($num\
    \ / 10);\n            $digits[] = $digit;\n            $digit_sum += $digit;\n\
    \        }\n        if ($min_sum == -1 || $digit_sum < $min_sum) {\n         \
    \   $min_sum = $digit_sum;\n        }\n        if ($max_sum == -1 || $digit_sum\
    \ > $max_sum) {\n            $max_sum = $digit_sum;\n        }\n        if (!array_key_exists($digit_sum,\
    \ $buckets)) {\n            $buckets[$digit_sum] = [];\n        }\n        $buckets[$digit_sum][]\
    \ = $i;\n    }\n    $result = [];\n    for ($sum = $min_sum; $sum <= $max_sum;\
    \ $sum++) {\n        if (!array_key_exists($sum, $buckets)) {\n            continue;\n\
    \        }\n        $positions = $buckets[$sum];\n        foreach ($positions\
    \ as $position) {\n            $result[] = $nums[$position];\n        }\n    }\n\
    \    return $result;\n}\n\nif (sizeof($argv) > 1) {\n    $nums = [];\n    for\
    \ ($i = 1; $i < sizeof($argv); $i++) {\n        $nums[] = intval($argv[$i]);\n\
    \    }\n    echo json_encode(order_by_points($nums)) . \"\\n\";\n}", "    if (empty($nums))\
    \ {\n        return $nums;\n    }\n    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $result[$key] = array_sum(str_split(abs($num)));\n    }\n\
    \    asort($result);\n    $order_nums = [];\n    foreach ($result as $key => $val)\
    \ {\n        $order_nums[] = $nums[$key];\n    }\n    return $order_nums;\n}\n\
    \n$a = order_by_points(array(1, 11, -1, -11, -12));\nprint_r($a);\n", "  // your\
    \ code goes here\n}", "\t$sum = 0;\n\t$result = [];\n\tforeach ($nums as $key\
    \ => $value) {\n\t\t// sum the digits of each number\n\t\t$number_array = str_split($value);\n\
    \t\t$sum = array_sum($number_array);\n\t\t// store the sum of the current number\
    \ in the result array\n\t\t// under the key $key\n\t\t$result[$key] = $sum;\n\t\
    }\n\t// sort the result array\n\tasort($result);\n\t// store the results array\
    \ as the key in a temporary array\n\t$new_result = [];\n\tforeach ($result as\
    \ $key => $value) {\n\t\t$new_result[$key] = $nums[$key];\n\t}\n\t// sort the\
    \ temporary array\n\tasort($new_result);\n\t// store the results from the temporary\
    \ array in the original array\n\t$i = 0;\n\tforeach ($new_result as $key => $value)\
    \ {\n\t\t$nums[$i] = $value;\n\t\t$i++;\n\t}\n\treturn $nums;\n}\necho implode(',\
    \ ', order_by_points(array(1, 11, -1, -11, -12)));\necho \"\\n\";\necho implode(',\
    \ ', order_by_points(array()));\necho \"\\n\";\necho implode(', ', order_by_points(array(1,\
    \ 99, -1, -99, -12)));\necho \"\\n\";", "    return array();\n}\n\necho \"order_by_points(array(1,\
    \ 11, -1, -11, -12)) should return [(-1, -11, 1, -12, 11)]<br/>\";\necho \"order_by_points(array(1,\
    \ 11, -1, -11, -12)) returns : \";\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\necho \"<br/>\";\necho \"order_by_points(array()) should return array()<br/>\"\
    ;\necho \"order_by_points(array()) returns : \";\nprint_r(order_by_points(array()));\n\
    echo \"<br/>\";", "  $points_sum = array();\n  foreach ($nums as $key => $value)\
    \ {\n    $points_sum[$key] = $value;\n    while($value != 0) {\n      $points_sum[$key]\
    \ += $value % 10;\n      $value = floor($value / 10);\n    }\n  }\n  asort($points_sum);\n\
    \  foreach ($points_sum as $key => $value) {\n    $result[] = $nums[$key];\n \
    \ }\n  return $result;\n}\n", "    $nums_as_string = array_map('strval', $nums);\n\
    \    $sum_of_digits = array_map('sum_of_digits', $nums_as_string);\n    array_multisort($sum_of_digits,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $point_map = array();\n   \
    \ foreach ($nums as $index => $num) {\n        $point_map[$index] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($point_map, $nums);\n    return $nums;\n}\n$nums =\
    \ array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "\t$nums_sum\
    \ = array();\n\tif (!empty($nums)) {\n\t\tforeach ($nums as $key => $value) {\n\
    \t\t\t$nums_sum[$key] = array_sum(str_split($value));\n\t\t}\n\t\tarray_multisort($nums_sum,\
    \ SORT_ASC, $nums);\n\t}\n\treturn $nums;\n}\n", "  $index = 0;\n  $sum = 0;\n\
    \  $sumsArray = array();\n  $finalArray = array();\n  $sumNums = 0;\n  $result\
    \ = array();\n  foreach ($nums as $n) {\n    $sumNums = 0;\n    $n = strval($n);\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n      $sumNums += $n[$i];\n    }\n\
    \    $sumsArray[$index] = $sumNums;\n    $index++;\n  }\n  asort($sumsArray);\n\
    \  $index = 0;\n  foreach ($sumsArray as $k => $n) {\n    $finalArray[$index]\
    \ = $nums[$k];\n    $index++;\n  }\n  $index = 0;\n  foreach ($finalArray as $n)\
    \ {\n    $result[$index] = intval($n);\n    $index++;\n  }\n  return $result;\n\
    }\nprint_r(order_by_points(array(11, 12, 1, -1, -11, -12)));\n", "  $sums = array();\n\
    \  foreach ($nums as $key => $num) {\n    $sum = sum_digits($num);\n    if (isset($sums[$sum]))\
    \ {\n      $sums[$sum][] = $num;\n    } else {\n      $sums[$sum] = array($num);\n\
    \    }\n  }\n  ksort($sums);\n  return flatten($sums);\n}\n", "  $totals = array();\n\
    \  foreach ($nums as $index => $num) {\n    $totals[$index] = array_sum(str_split($num));\n\
    \  }\n  asort($totals);\n  $result = array();\n  foreach ($totals as $index =>\
    \ $total) {\n    $result[] = $nums[$index];\n  }\n  return $result;\n}\n$nums\
    \ = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "  $order_by_points\
    \ = array();\n  foreach ($nums as $key => $value) {\n    if ($value >= 0) {\n\
    \      $value = str_split($value);\n      $sum = array_sum($value);\n      $order_by_points[$key]\
    \ = $sum;\n    } else {\n      $minus = $value * -1;\n      $minus = str_split($minus);\n\
    \      $sum = array_sum($minus);\n      $order_by_points[$key] = $sum;\n    }\n\
    \  }\n  asort($order_by_points);\n  $order_by_points = array_keys($order_by_points);\n\
    \  $final_array = array();\n  foreach ($order_by_points as $key => $value) {\n\
    \    $final_array[] = $nums[$value];\n  }\n  return $final_array;\n}\n$nums =\
    \ array(1, 11, -1, -11, -12);\necho \"<pre>\";\nprint_r(order_by_points($nums));\n\
    echo \"</pre>\";", "  $res = [];\n  $sum = [];\n  $cnt = 0;\n  foreach ($nums\
    \ as $num) {\n    $num = str_split($num);\n    $s = 0;\n    foreach ($num as $digit)\
    \ {\n      $s += $digit;\n    }\n    $sum[$cnt] = $s;\n    $cnt++;\n  }\n  array_multisort($sum,\
    \ $nums);\n  return $nums;\n}\n\nvar_dump(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "    $order = [];\n    foreach ($nums as $key => $num) {\n       \
    \ $sum = 0;\n        $newNum = $num;\n        while ($newNum != 0) {\n       \
    \     $sum += $newNum % 10;\n            $newNum = (int)($newNum / 10);\n    \
    \    }\n        $order[$key] = $sum;\n    }\n    asort($order);\n    $res = [];\n\
    \    foreach ($order as $key => $value) {\n        $res[] = $nums[$key];\n   \
    \ }\n    return $res;\n}\n", "  // write your code here\n  $result = array();\n\
    \  foreach ($nums as $key => $value) {\n    $result[$key] = array_sum(str_split($value));\n\
    \  }\n  asort($result);\n  $result2 = array();\n  foreach ($result as $key =>\
    \ $value) {\n    $result2[] = $nums[$key];\n  }\n  return $result2;\n}", "   \
    \ if (empty($nums)) {\n        return $nums;\n    }\n    $sum_num = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sum_num[$key] = get_sum_of_num($num);\n\
    \    }\n    array_multisort($sum_num, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "  $result = [];\n  $sum = [];\n  $count = 0;\n  for ($i = 0; $i < count($nums);\
    \ $i++) {\n    $tens = $nums[$i] % 10;\n    $hundreds = $nums[$i] % 100 / 10;\n\
    \    $sum[$count] = $tens + $hundreds;\n    $count++;\n  }\n  asort($sum);\n \
    \ foreach ($sum as $key => $val) {\n    $result[] = $nums[$key];\n  }\n  return\
    \ $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\n$result = order_by_points($nums);\n\
    print_r($result);\n", "    $result = [];\n    $index = 0;\n    $length = count($nums);\n\
    \    $nums_str = [];\n    foreach ($nums as $n) {\n        $nums_str[$index] =\
    \ get_sum_of_digits($n);\n        $index++;\n    }\n    asort($nums_str);\n  \
    \  $index = 0;\n    foreach ($nums_str as $k => $v) {\n        $result[$index]\
    \ = $nums[$k];\n        $index++;\n    }\n    return $result;\n}", "    if(empty($nums))\
    \ return $nums;\n    $sums = array();\n    foreach($nums as $key => $num) {\n\
    \        $digits = get_digits($num);\n        $sums[$key] = array_sum($digits);\n\
    \    }\n    return array_multisort($sums, SORT_ASC, $nums);\n}\n", "  $result\
    \ = array();\n  foreach ($nums as $key => $num) {\n    $sum = 0;\n    for ($i\
    \ = 0; $i < strlen($num); $i++) {\n      $sum += $num[$i];\n    }\n    $result[$key]\
    \ = $sum;\n  }\n  asort($result);\n  $final_result = array();\n  foreach ($result\
    \ as $key => $sum) {\n    $final_result[] = $nums[$key];\n  }\n  return $final_result;\n\
    }", "  $sums = array();\n  foreach ($nums as $k => $num) {\n    $sums[$k] = array_sum(str_split($num));\n\
    \  }\n  asort($sums);\n  $new_nums = array();\n  foreach ($sums as $k => $sum)\
    \ {\n    $new_nums[] = $nums[$k];\n  }\n  return $new_nums;\n}\n\n$array = array(1,\
    \ 11, -1, -11, -12);\n$nums = order_by_points($array);\necho '<pre>';\nprint_r($nums);\n\
    echo '</pre>';\n", "    // TODO: implement\n    usort($nums, function($a, $b)\
    \ {\n        $val1 = $a;\n        $val2 = $b;\n        $sum1 = array_sum(str_split($val1));\n\
    \        $sum2 = array_sum(str_split($val2));\n        if ($sum1 > $sum2) {\n\
    \            return 1;\n        } elseif ($sum1 < $sum2) {\n            return\
    \ -1;\n        } else {\n            return 0;\n        }\n    });\n    return\
    \ $nums;\n}\n", "\t$sum_nums = array();\n\tfor ($i = 0; $i < count($nums); $i++)\
    \ {\n\t\t$sum_nums[$i] = array_sum(str_split($nums[$i]));\n\t}\n\t// $sum_nums_2\
    \ = array_combine($sum_nums, $nums);\n\t// $sum_nums_3 = array_unique($sum_nums_2);\n\
    \t// ksort($sum_nums_3);\n\t// return array_values($sum_nums_3);\n\tasort($sum_nums);\n\
    \t$sum_nums_index = array_keys($sum_nums);\n\t$result = array();\n\tfor ($i =\
    \ 0; $i < count($sum_nums_index); $i++) {\n\t\t$result[$i] = $nums[$sum_nums_index[$i]];\n\
    \t}\n\treturn $result;\n}\n", "    $sum = [];\n    $res = [];\n    for ($i = 0;\
    \ $i < count($nums); $i++) {\n        $sum[$i] = sum_of_digits($nums[$i]);\n \
    \   }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", " \
    \   $sums = array();\n    foreach ($nums as $i => $num) {\n        $sums[$i] =\
    \ $num < 0 ? -$num : $num;\n        $sum = 0;\n        while ($sums[$i] != 0)\
    \ {\n            $sum += $sums[$i] % 10;\n            $sums[$i] = intval($sums[$i]\
    \ / 10);\n        }\n        $sums[$i] = $sum;\n    }\n    asort($sums);\n   \
    \ $result = array();\n    foreach ($sums as $i => $sum) {\n        $result[] =\
    \ $nums[$i];\n    }\n    return $result;\n}\n", "    if (empty($nums)) {\n   \
    \     return $nums;\n    }\n\n    $sums = array();\n    foreach ($nums as $key\
    \ => $num) {\n        $absNum = abs($num);\n        $sum = 0;\n        while ($absNum\
    \ != 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum\
    \ / 10);\n        }\n        $sums[$key] = $sum;\n    }\n\n    array_multisort($sums,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    //$result = $nums;\n    $result\
    \ = [];\n    $sumDigitArray = [];\n    if(!empty($nums)) {\n        foreach($nums\
    \ as $key => $number) {\n            $sumDigitArray[$key] = 0;\n            if($number\
    \ < 0) {\n                $number = $number * -1;\n            }\n           \
    \ while($number > 0) {\n                $sumDigitArray[$key] += $number % 10;\n\
    \                $number = (int)($number / 10);\n            }\n        }\n  \
    \      asort($sumDigitArray);\n        foreach($sumDigitArray as $key => $value)\
    \ {\n            $result[] = $nums[$key];\n        }\n    }\n    return $result;\n\
    }\n$result = order_by_points(array(1, 11, -1, -11, -12));\necho \"Result is: \"\
    ;\nprint_r($result);\n$result = order_by_points(array());\necho \"Result is: \"\
    ;\nprint_r($result);", "  // Your code here\n  $sum = [];\n  $arr = [];\n  foreach\
    \ ($nums as $key => $value) {\n    $s = array_sum(str_split($value));\n    $sum[$s][]\
    \ = $value;\n  }\n  ksort($sum);\n  foreach ($sum as $arrVal) {\n    foreach ($arrVal\
    \ as $val) {\n      $arr[] = $val;\n    }\n  }\n  return $arr;\n}\n", "  $sum_nums\
    \ = array();\n  foreach ($nums as $num) {\n    $sum_nums[] = array_sum(str_split(abs($num)));\n\
    \  }\n  array_multisort($sum_nums, $nums);\n  return $nums;\n}\necho \"First Result:\
    \ \";\necho json_encode(order_by_points(array(1, 11, -1, -11, -12)));\necho \"\
    </br>\";\necho \"Second Result: \";\necho json_encode(order_by_points(array()));\n\
    echo \"</br>\";\necho \"</br>\";\n", "  $array = [];\n  $n = count($nums);\n \
    \ for ($i = 0; $i < $n; $i++) {\n    $array[$i] = array('i' => $i, 'v' => $nums[$i]);\n\
    \  }\n  usort($array, function($a, $b) {\n    $v = $a['v'] < 0 ? $a['v'] * -1\
    \ : $a['v'];\n    $w = $b['v'] < 0 ? $b['v'] * -1 : $b['v'];\n    $ap = 0;\n \
    \   while ($v) {\n      $ap += $v % 10;\n      $v = floor($v / 10);\n    }\n \
    \   $bp = 0;\n    while ($w) {\n      $bp += $w % 10;\n      $w = floor($w / 10);\n\
    \    }\n    if ($ap == $bp) {\n      return $a['i'] - $b['i'];\n    }\n    return\
    \ $ap - $bp;\n  });\n  for ($i = 0; $i < $n; $i++) {\n    $nums[$i] = $array[$i]['v'];\n\
    \  }\n  return $nums;\n}\n\n$a = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($a));",
  "  if (empty($nums)) {\n    return $nums;\n  }\n\n  // your code here\n  $sums =\
    \ [];\n  foreach ($nums as $i => $v) {\n    $sums[$i] = sum_of_digits($v);\n \
    \ }\n  asort($sums);\n  $result = [];\n  foreach ($sums as $i => $v) {\n    $result[]\
    \ = $nums[$i];\n  }\n  return $result;\n}\n", "\t$sums = array();\n\tforeach ($nums\
    \ as $key => $value) {\n\t\t$numbers = str_split($value);\n\t\t$sums[$key] = array_sum($numbers);\n\
    \t}\n\tasort($sums);\n\t$output = array();\n\tforeach ($sums as $key => $value)\
    \ {\n\t\t$output[] = $nums[$key];\n\t}\n\treturn $output;\n}", "    $final = array();\n\
    \    foreach ($nums as $key => $value) {\n        $final[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($final);\n    $result = array();\n    foreach ($final as $key\
    \ => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n", "  $summed = [];\n  foreach ($nums as $index => $num) {\n    $summed[$index]\
    \ = [\n      'sum' => array_sum(str_split($num)),\n      'num' => $num\n    ];\n\
    \  }\n  usort($summed, function($a, $b) {\n    if ($a['sum'] > $b['sum']) {\n\
    \      return 1;\n    } elseif ($a['sum'] < $b['sum']) {\n      return -1;\n \
    \   } else {\n      return 0;\n    }\n  });\n  $res = [];\n  foreach ($summed\
    \ as $i => $data) {\n    $res[$i] = $data['num'];\n  }\n  return $res;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\necho \"\\n\";", "  // your code here\n}\n", "  $result\
    \ = [];\n  $points = [];\n  foreach ($nums as $key => $num) {\n    $points[$key]\
    \ = sum_of_digits($num);\n  }\n  asort($points);\n  foreach ($points as $key =>\
    \ $point) {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\n", "  if\
    \ (empty($nums)) return $nums;\n  $sums = [];\n  foreach ($nums as $i => $num)\
    \ {\n    $sums[$i] = array_sum(str_split($num));\n  }\n  asort($sums);\n  $sorted\
    \ = [];\n  foreach ($sums as $i => $sum) {\n    $sorted[] = $nums[$i];\n  }\n\
    \  return $sorted;\n}\n\nclass TestTest extends PHPUnit_Framework_TestCase {\n\
    \  public function testSolution() {\n    $this->assertEquals(order_by_points(array(1,\
    \ 11, -1, -11, -12)), array(-1, -11, 1, -12, 11));\n    $this->assertEquals(order_by_points(array()),\
    \ array());\n  }\n}\n\n$t = new TestTest();\n$t->testSolution();", "    $sum =\
    \ [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split(abs($value)));\n\
    \    }\n    asort($sum);\n    $ordered = [];\n    foreach ($sum as $key => $value)\
    \ {\n        $ordered[] = $nums[$key];\n    }\n    return $ordered;\n}\n\n$nums\
    \ = [1, 11, -1, -11, -12];\n$nums2 = [];\nprint_r(order_by_points($nums));\nprint_r(order_by_points($nums2));",
  "    $sum = 0;\n    $nums_map = array();\n    for ($i = 0; $i < count($nums); $i++)\
    \ {\n        if ($nums[$i] < 0) {\n            $sum += $nums[$i] * -1;\n     \
    \   } else {\n            $sum += $nums[$i];\n        }\n        $nums_map[$sum]\
    \ = $nums[$i];\n    }\n    ksort($nums_map);\n    return $nums_map;\n}", "  return\
    \ usort($nums, function($a, $b) {\n    $sum1 = array_sum(str_split(abs($a)));\n\
    \    $sum2 = array_sum(str_split(abs($b)));\n    if ($sum1 == $sum2) {\n     \
    \ return $a > $b;\n    }\n    return $sum1 > $sum2;\n  });\n}", "    $sum = 0;\n\
    \    $sumarray = array();\n    $sumorder = array();\n    $sumcount = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum = 0;\n        while($value\
    \ >= 10) {\n            $rem = $value % 10;\n            $sum += $rem;\n     \
    \       $value = $value / 10;\n        }\n        $sum += $value;\n        $sumarray[$key]\
    \ = $sum;\n        $sumorder[$key] = $key;\n        $sumcount[$key] = 0;\n   \
    \ }\n    foreach ($sumarray as $key => $value) {\n        $array = $sumarray;\n\
    \        array_splice($array, $key, 1);\n        foreach ($array as $index =>\
    \ $val) {\n            if ($value > $val) {\n                $sumcount[$key] +=\
    \ 1;\n            }\n        }\n    }\n    array_multisort($sumcount, SORT_ASC,\
    \ $sumorder, SORT_ASC, $sumarray, SORT_ASC);\n    foreach ($sumorder as $key =>\
    \ $value) {\n        foreach ($nums as $index => $val) {\n            if ($value\
    \ == $index) {\n                $array[$key] = $val;\n            }\n        }\n\
    \    }\n    return $array;\n}", "    if (empty($nums)) {\n        return array();\n\
    \    }\n\n    $points = array();\n    foreach ($nums as $idx => $num) {\n    \
    \    $points[$idx] = $num;\n        $sum = 0;\n        while ($num > 0) {\n  \
    \          $sum += $num % 10;\n            $num = intval($num / 10);\n       \
    \ }\n        $points[$idx] = $sum;\n    }\n\n    $sorted = array();\n    while\
    \ (!empty($points)) {\n        $min_index = array_search(min($points), $points);\n\
    \        $sorted[] = $nums[$min_index];\n        unset($points[$min_index]);\n\
    \        unset($nums[$min_index]);\n    }\n\n    return $sorted;\n}\n\necho \"\
    order_by_points(array(1, 11, -1, -11, -12))\\n\";\nvar_dump(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\necho \"order_by_points(array())\\n\";\nvar_dump(order_by_points(array()));",
  "    if(!is_array($nums)) return false;\n    if(count($nums) == 0) return $nums;\n\
    \    $sums = array();\n    foreach($nums as $key => $val) {\n        $sums[$key]\
    \ = array_sum(str_split($val));\n    }\n    array_multisort($sums, SORT_ASC, $nums);\n\
    \    return $nums;\n}\n", "\t$res=array();\n\t$key=array();\n\t$sum=array();\n\
    \t$temp=array();\n\t$c=0;\n\tfor($i=0;$i<count($nums);$i++)\n\t{\n\t\t$sum[$i]=0;\n\
    \t\t$key[$i]=$i;\n\t\t$temp[$i]=abs($nums[$i]);\n\t\t$n=$temp[$i];\n\t\twhile($n!=0)\n\
    \t\t{\n\t\t\t$sum[$i]+=$n%10;\n\t\t\t$n=floor($n/10);\n\t\t}\n\t}\n\tfor($i=0;$i<count($nums);$i++)\n\
    \t{\n\t\tfor($j=$i+1;$j<count($nums);$j++)\n\t\t{\n\t\t\tif($sum[$i]>$sum[$j])\n\
    \t\t\t{\n\t\t\t\t$c=$sum[$i];\n\t\t\t\t$sum[$i]=$sum[$j];\n\t\t\t\t$sum[$j]=$c;\n\
    \t\t\t\t$c=$temp[$i];\n\t\t\t\t$temp[$i]=$temp[$j];\n\t\t\t\t$temp[$j]=$c;\n\t\
    \t\t\t$c=$key[$i];\n\t\t\t\t$key[$i]=$key[$j];\n\t\t\t\t$key[$j]=$c;\n\t\t\t}\n\
    \t\t}\n\t}\n\tfor($i=0;$i<count($nums);$i++)\n\t{\n\t\t$res[$i]=$nums[$key[$i]];\n\
    \t}\n\treturn $res;\n}", "  // Write your code here\n}\n$nums = array(1, 11, -1,\
    \ -11, -12);\nprint_r(order_by_points($nums));", "    $sum_map = array();\n  \
    \  foreach ($nums as $key => $num) {\n        $sum = 0;\n        $digits = str_split(abs($num));\n\
    \        foreach ($digits as $digit) {\n            $sum += $digit;\n        }\n\
    \        $sum_map[$key] = $sum;\n    }\n    asort($sum_map);\n    $result = array();\n\
    \    foreach ($sum_map as $key => $value) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}", "    $count = count($nums);\n    $digits = array();\n\
    \    foreach ($nums as $key => $num) {\n        $digits[$key] = sum_digits($num);\n\
    \    }\n    array_multisort($digits, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    // Use a and b to represent elements of the array.\n    // Return the difference\
    \ between the two.\n    usort($nums, function($a, $b) {\n        // Remove negative\
    \ sign from the number by using abs() function.\n        $a = abs($a);\n     \
    \   $b = abs($b);\n        // Initialize the digit variables with 0.\n       \
    \ $a_digit = 0;\n        $b_digit = 0;\n        // Loop through the numbers by\
    \ converting the number\n        // to string and storing the length of the string.\n\
    \        for ($i = 0; $i < strlen(strval($a)); $i++) {\n            // Add each\
    \ digit to the variable.\n            $a_digit += substr(strval($a), $i, 1);\n\
    \        }\n        for ($i = 0; $i < strlen(strval($b)); $i++) {\n          \
    \  $b_digit += substr(strval($b), $i, 1);\n        }\n        // Return the difference\
    \ between the digits.\n        return $a_digit - $b_digit;\n    });\n    return\
    \ $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "\tif (empty($nums))\
    \ return array();\n\t\n\t$points = array();\n\tforeach ($nums as $idx => $num)\
    \ {\n\t\t$points[$idx] = array_sum(str_split($num));\n\t}\n\tasort($points);\n\
    \t\n\t$result = array();\n\tforeach ($points as $idx => $point) {\n\t\t$result[]\
    \ = $nums[$idx];\n\t}\n\treturn $result;\n}\necho '<pre>'.print_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)), true).'</pre>';\necho '<pre>'.print_r(order_by_points(array()),\
    \ true).'</pre>';", "  $sums = array();\n  foreach ($nums as $key => $num) {\n\
    \    $n = $num;\n    $sum = 0;\n    while ($n > 0) {\n      $sum += $n % 10;\n\
    \      $n = (int)($n / 10);\n    }\n    $sums[$key] = $sum;\n  }\n  asort($sums);\n\
    \  foreach ($sums as $key => $sum) {\n    $sums[$key] = $nums[$key];\n  }\n  return\
    \ $sums;\n}\n$s = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($s));",
  "    $sum_of_all_nums = array();\n    for ($i = 0; $i < count($nums); $i++) {\n\
    \        $sum_of_num = 0;\n        if ($nums[$i] < 0) {\n            $num = $nums[$i]\
    \ * -1;\n        } else {\n            $num = $nums[$i];\n        }\n        while\
    \ ($num != 0) {\n            $sum_of_num += $num % 10;\n            $num = $num\
    \ / 10;\n        }\n        $sum_of_all_nums[$i] = $sum_of_num;\n    }\n    return\
    \ $sum_of_all_nums;\n}\n", "    $sum_of_digits = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum_of_digits[$key] = get_sum_of_digits($num);\n    }\n\
    \    asort($sum_of_digits);\n    $ordered_nums = [];\n    foreach ($sum_of_digits\
    \ as $key => $value) {\n        $ordered_nums[] = $nums[$key];\n    }\n    return\
    \ $ordered_nums;\n}\n", "    if(!is_array($nums))\n        return false;\n   \
    \ if(empty($nums))\n        return array();\n    $arr = array();\n    foreach($nums\
    \ as $key => $value) {\n        $sum = 0;\n        for($i = 0; $i < strlen($value);\
    \ $i++) {\n            $sum += $value[$i];\n        }\n        $arr[$sum][] =\
    \ $value;\n    }\n    ksort($arr);\n    $result = array();\n    foreach($arr as\
    \ $value) {\n        $result = array_merge($result, $value);\n    }\n    return\
    \ $result;\n}", "  // TODO: \u043F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\
    \ \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435\
    , \u0435\u0441\u043B\u0438 \u043D\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \u0430 \u0432\u044B\u0439\u0442\u0438\n  // \u043F\u0440\u043E\u0432\u0435\u0440\
    \u0438\u0442\u044C \u043D\u0430 \u0432\u043B\u043E\u0436\u0435\u043D\u043D\u043E\
    \u0441\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432\u0430, \u0435\u0441\u043B\
    \u0438 \u0435\u0441\u0442\u044C \u0432\u044B\u0439\u0442\u0438\n  // \u0441\u043E\
    \u0437\u0434\u0430\u0442\u044C \u0432\u0440\u0435\u043C\u0435\u043D\u043D\u044B\
    \u0439 \u043C\u0430\u0441\u0441\u0438\u0432\n  // \u043F\u0440\u043E\u0439\u0442\
    \u0438\u0441\u044C \u043F\u043E \u043C\u0430\u0441\u0441\u0438\u0432\u0443\n \
    \ // \u0434\u043B\u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442\u0430 \u043C\u0430\u0441\u0441\u0438\u0432\u0430\
    \ \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u0441\u0443\u043C\u043C\u0443\
    \ \u0446\u0438\u0444\u0440\n  // \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044C\
    \ \u0432\u043E \u0432\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0439 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u043A\u0430\u043A \u043A\u043B\u044E\u0447 \u0438\u043D\
    \u0434\u0435\u043A\u0441 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430, \u0430\
    \ \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0441\u0443\u043C\u043C\u0430\
    \n  // \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\
    \u044C \u043C\u0430\u0441\u0441\u0438\u0432\n  // \u043D\u0430 \u043E\u0441\u043D\
    \u043E\u0432\u0435 \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\
    \u0430\u043D\u043D\u043E\u0433\u043E \u043C\u0430\u0441\u0441\u0438\u0432\u0430\
    \ \u0441\u0444\u043E\u0440\u043C\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0438\
    \u0441\u0445\u043E\u0434\u043D\u044B\u0439 \u043C\u0430\u0441\u0441\u0438\u0432\
    \n  if (!is_array($nums)) {\n    return \"Only array allowed\";\n  }\n  if (!count($nums))\
    \ {\n    return array();\n  }\n  foreach ($nums as $num) {\n    if (is_array($num))\
    \ {\n      return \"You can not use nested arrays\";\n    }\n  }\n  $tmp = array();\n\
    \  foreach ($nums as $index => $num) {\n    $sum = 0;\n    foreach (str_", " \
    \ $new_nums = [];\n  foreach ($nums as $k => $n) {\n    $new_nums[$k] = get_point($n);\n\
    \  }\n  asort($new_nums);\n  foreach ($new_nums as $k => $n) {\n    $new_nums[$k]\
    \ = $nums[$k];\n  }\n  return $new_nums;\n}\n", "  $pairs = array();\n  foreach\
    \ ($nums as $i => $n) {\n    $pairs[$i] = array_sum(str_split(abs($n)));\n  }\n\
    \  asort($pairs);\n  $ordered = array();\n  foreach ($pairs as $i => $p) {\n \
    \   $ordered[] = $nums[$i];\n  }\n  return $ordered;\n}\necho join(', ', order_by_points(array(1,\
    \ 11, -1, -11, -12))) . PHP_EOL;\necho join(', ', order_by_points(array())) .\
    \ PHP_EOL;", "    $result = [];\n    $hash = [];\n    foreach ($nums as $key =>\
    \ $value) {\n        $hash[$key] = $value;\n    }\n    arsort($hash);\n    foreach\
    \ ($hash as $key => $value) {\n        $result[] = $value;\n    }\n    return\
    \ $result;\n}\n\n$nums = [1, 11, -1, -11, -12];\nvar_dump(order_by_points($nums));\n",
  "    $result = array();\n    foreach ($nums as $key => $value) {\n        $sum =\
    \ 0;\n        $value = abs($value);\n        while ($value != 0) {\n         \
    \   $sum += $value % 10;\n            $value = intval($value / 10);\n        }\n\
    \        $result[$key] = $sum;\n    }\n    asort($result);\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $nums[$key];\n    }\n    return\
    \ $result;\n}\n\n$my_array = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($my_array));",
  "  // YOUR CODE HERE\n}", "  $nums_by_points = array();\n  foreach ($nums as $i\
    \ => $num) {\n    $point = 0;\n    while ($num > 0) {\n      $point += $num %\
    \ 10;\n      $num /= 10;\n    }\n    $nums_by_points[$i] = $point;\n  }\n  asort($nums_by_points);\n\
    \  $ordered_nums = array();\n  foreach ($nums_by_points as $i => $point) {\n \
    \   $ordered_nums[] = $nums[$i];\n  }\n  return $ordered_nums;\n}\n\n$nums = array(1,\
    \ 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "  $sum = array();\n\
    \  foreach ($nums as $key => $num) {\n    $keySum = array_sum(str_split($num));\n\
    \    $sum[$key] = $keySum;\n  }\n  asort($sum);\n  $result = array();\n  foreach\
    \ ($sum as $key => $value) {\n    $result[] = $nums[$key];\n  }\n  return $result;\n\
    }\n", "    $points = [];\n    foreach ($nums as $i => $num) {\n        $points[$i]\
    \ = array_sum(str_split($num));\n    }\n    array_multisort($points, $nums);\n\
    \    return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "  $with_sums = array();\n  foreach ($nums as $key => $value) {\n    $with_sums[$key]\
    \ = array_sum(str_split($value));\n  }\n  asort($with_sums);\n  foreach ($with_sums\
    \ as $key => $value) {\n    $new_nums[] = $nums[$key];\n  }\n  return $new_nums;\n\
    }\n", "\tif (count($nums) <= 1) return $nums;\n\t$count = count($nums);\n\tfor\
    \ ($i = 0; $i < $count; $i++) {\n\t\t$nums[$i] = array($nums[$i], sum_digits($nums[$i]));\n\
    \t}\n\tusort($nums, function($a, $b) {\n\t\tif ($a[1] == $b[1]) return $a[0] -\
    \ $b[0];\n\t\treturn $a[1] - $b[1];\n\t});\n\tfor ($i = 0; $i < $count; $i++)\
    \ {\n\t\t$nums[$i] = $nums[$i][0];\n\t}\n\treturn $nums;\n}\n", "  $results =\
    \ [];\n  foreach ($nums as $key => $value) {\n    $sum = 0;\n    $value = (string)$value;\n\
    \    for ($i = 0; $i < strlen($value); $i++) {\n      $sum += $value[$i];\n  \
    \  }\n    $results[$key] = $sum;\n  }\n  $final = array_keys($results);\n  for\
    \ ($i = 0; $i < count($results); $i++) {\n    for ($j = 0; $j < count($results);\
    \ $j++) {\n      if ($results[$i] < $results[$j]) {\n        $temp = $results[$i];\n\
    \        $results[$i] = $results[$j];\n        $results[$j] = $temp;\n       \
    \ $temp = $final[$i];\n        $final[$i] = $final[$j];\n        $final[$j] =\
    \ $temp;\n      }\n    }\n  }\n  $results = [];\n  foreach ($final as $key =>\
    \ $value) {\n    $results[] = $nums[$value];\n  }\n  return $results;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\necho \"<br />\";\nprint_r(order_by_points(array()));",
  "  if (empty($nums)) {\n    return $nums;\n  }\n  foreach ($nums as $key => $num)\
    \ {\n    $nums[$key] = ['num' => $num, 'key' => $key];\n  }\n  usort($nums, function($a,\
    \ $b) {\n    $aSum = array_sum(str_split($a['num']));\n    $bSum = array_sum(str_split($b['num']));\n\
    \    if ($aSum == $bSum) {\n      return $a['key'] - $b['key'];\n    }\n    return\
    \ $aSum - $bSum;\n  });\n  foreach ($nums as $key => $num) {\n    $nums[$key]\
    \ = $num['num'];\n  }\n  return $nums;\n}", "  $nums_map = array();\n  foreach\
    \ ($nums as $key => $num) {\n    $sum = 0;\n    foreach (str_split(abs($num))\
    \ as $i) {\n      $sum += $i;\n    }\n    $nums_map[$key] = $sum;\n  }\n  asort($nums_map);\n\
    \  $nums_res = array();\n  foreach ($nums_map as $key => $num) {\n    $nums_res[]\
    \ = $nums[$key];\n  }\n  return $nums_res;\n}", "    $sum_of_digits = [];\n  \
    \  for ($i = 0; $i < count($nums); $i++) {\n        $sum_of_digits[$i] = 0;\n\
    \        for ($j = 0; $j < strlen((string)$nums[$i]); $j++) {\n            $sum_of_digits[$i]\
    \ += (int)$nums[$i][$j];\n        }\n    }\n    $sorted_sum_of_digits = $sum_of_digits;\n\
    \    sort($sorted_sum_of_digits);\n    $ans = [];\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        for ($j = 0; $j < count($sum_of_digits); $j++) {\n        \
    \    if ($sorted_sum_of_digits[$i] == $sum_of_digits[$j]) {\n                $ans[]\
    \ = $nums[$j];\n                unset($sum_of_digits[$j]);\n                break;\n\
    \            }\n        }\n    }\n    return $ans;\n}\n", "    $sums = array();\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        foreach (str_split($num)\
    \ as $digit) {\n            $sum += $digit;\n        }\n        $sums[$key] =\
    \ $sum;\n    }\n    asort($sums);\n    $numsSorted = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $numsSorted[] = $nums[$key];\n    }\n    return\
    \ $numsSorted;\n}\necho '>>> order_by_points(array(1, 11, -1, -11, -12))' . PHP_EOL;\n\
    var_dump(order_by_points(array(1, 11, -1, -11, -12)));\necho '>>> order_by_points(array())'\
    \ . PHP_EOL;\nvar_dump(order_by_points(array()));\n", "\n}\n", "    $arr = array();\n\
    \    $res = array();\n    $i = 0;\n    foreach ($nums as $num) {\n        $arr[]\
    \ = [$num, sum_of_digits($num)];\n    }\n    foreach ($arr as $key => $row) {\n\
    \        $a[$key] = $row[1];\n    }\n    array_multisort($a, SORT_ASC, $arr);\n\
    \    foreach ($arr as $value) {\n        $res[] = $value[0];\n    }\n    return\
    \ $res;\n}", "  $total = [];\n  $newArray = [];\n  foreach ($nums as $key => $num)\
    \ {\n    $total[$key] = sum_of_digits($num);\n  }\n  array_multisort($total, SORT_ASC,\
    \ $nums);\n  return $nums;\n}", "    $number = array();\n    $sum = array();\n\
    \    $result = array();\n    $points = array();\n    foreach ($nums as $num) {\n\
    \        $digit = array();\n        $sum_num = 0;\n        while ($num > 0) {\n\
    \            $mod = $num % 10;\n            $num = (int)($num / 10);\n       \
    \     $digit[] = $mod;\n            $sum_num += $mod;\n        }\n        $number[]\
    \ = $digit;\n        $sum[] = $sum_num;\n    }\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $points[] = $sum[$i];\n    }\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        for ($j = 0; $j < count($nums) - 1; $j++) {\n            if\
    \ ($points[$j] > $points[$j + 1]) {\n                $temp = $points[$j];\n  \
    \              $points[$j] = $points[$j + 1];\n                $points[$j + 1]\
    \ = $temp;\n                $temp = $nums[$j];\n                $nums[$j] = $nums[$j\
    \ + 1];\n                $nums[$j + 1] = $temp;\n            }\n        }\n  \
    \  }\n    return $nums;\n}", "    $result = array();\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        while ($num != 0) {\n            $sum\
    \ += $num % 10;\n            $num = (int)($num / 10);\n        }\n        $result[$key]\
    \ = $sum;\n    }\n    asort($result);\n    $result = array_keys($result);\n  \
    \  $output = array();\n    foreach ($result as $key) {\n        $output[] = $nums[$key];\n\
    \    }\n    return $output;\n}\necho implode(', ', order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "}\n", "    $sums = array();\n    foreach ($nums as $index\
    \ => $num) {\n        $sum = 0;\n        $digits = str_split($num);\n        foreach\
    \ ($digits as $digit) {\n            $sum += $digit;\n        }\n        $sums[$index]\
    \ = $sum;\n    }\n    asort($sums);\n    $output = array();\n    foreach ($sums\
    \ as $index => $sum) {\n        $output[] = $nums[$index];\n    }\n    return\
    \ $output;\n}\n", "\n}", "  $nums_sum = array();\n  $result = array();\n  $i =\
    \ 0;\n  $len = count($nums);\n  foreach ($nums as $num) {\n    $num_str = (string)\
    \ $num;\n    $sum = 0;\n    for ($j = 0; $j < strlen($num_str); $j++) {\n    \
    \  $sum += $num_str[$j];\n    }\n    $nums_sum[$i] = $sum;\n    $i++;\n  }\n \
    \ asort($nums_sum);\n  foreach ($nums_sum as $key => $value) {\n    $result[]\
    \ = $nums[$key];\n  }\n  return $result;\n}\n\n$array = array(1, 11, -1, -11,\
    \ -12);\necho \"Origin array: \";\necho print_r($array);\necho \"<br>\";\necho\
    \ \"Sorted array: \";\necho print_r(order_by_points($array));\necho \"<br>\";",
  "  // intialise the array to store the result\n  $result = array();\n  // scan through\
    \ the array\n  foreach ($nums as $key => $num) {\n    // if it is positive, add\
    \ to the array with its sum of digits as key\n    if ($num > 0) {\n      $result[array_sum(str_split((string)$num))]\
    \ = $num;\n    }\n    // if it is negative, add to the array with its opposite\
    \ sum of digits as key\n    else {\n      $result[-array_sum(str_split((string)-$num))]\
    \ = $num;\n    }\n  }\n  // sort the array and keep the key (the sum of digits)\n\
    \  ksort($result);\n  // return the result\n  return $result;\n}", "  // Your\
    \ code here\n  foreach ($nums as $num) {\n    $num_sum = 0;\n    while ($num >\
    \ 0) {\n      $num_sum += $num % 10;\n      $num = floor($num / 10);\n    }\n\
    \    $sums[] = $num_sum;\n  }\n  array_multisort($sums, $nums);\n  return $nums;\n\
    }\n\n$tests = array(\n  array(1, 11, -1, -11, -12),\n  array(),\n  array(1, 11,\
    \ -1, -11, 12),\n  array(11, 11, 11, -11, -11, -11),\n  array(11, 11, -11, -11,\
    \ 11, -11),\n  array(11, -11, -11, 11, -11, 11),\n  array(11, -11, -11, -11, 11,\
    \ 11),\n  array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20),\n  array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1),\n  array(1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8,\
    \ 9, -9, 10, -10),\n  array(10, -10, 9, -9, 8, -8, 7, -7, 6, -6, 5, -5, 4, -4,\
    \ 3, -3, 2, -2, 1, -1),\n  array(9, 99, 999, 9999, 99999, 999999, 9999999, 99999999,\
    \ 999999999, 9999999999),\n  array(9, 99, 999999999, 999999999, 999999999, 999999999,\
    \ 999999999, 999999999, 999999999, 999999999),\n  array(1, 11, 111, 1111, 11111,\
    \ 111111,", "  $point_sum = array();\n  foreach ($nums as $key => $num) {\n  \
    \  $point_sum[$key] = array_sum(str_split($num));\n  }\n  array_multisort($point_sum,\
    \ SORT_ASC, $nums);\n  return $nums;\n}\n\nvar_dump(order_by_points(array(1, 11,\
    \ -1, -11, -12)));\nvar_dump(order_by_points(array()));", "    $sums = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum = 0;\n        foreach (str_split($value)\
    \ as $digit) {\n            $sum += $digit;\n        }\n        $sums[$key] =\
    \ $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }", "  $sums = array();\n  foreach ($nums as $index => $num) {\n    $sums[$index]\
    \ = array_sum(str_split($num));\n  }\n  asort($sums);\n  $result = array();\n\
    \  foreach ($sums as $index => $sum) {\n    $result[] = $nums[$index];\n  }\n\
    \  return $result;\n}\n", "  usort($nums, function($a, $b) {\n    $sumA = 0;\n\
    \    $sumB = 0;\n    for ($i = 0; $i < strlen($a); $i++) {\n      $sumA += $a[$i];\n\
    \    }\n    for ($i = 0; $i < strlen($b); $i++) {\n      $sumB += $b[$i];\n  \
    \  }\n    if ($sumA == $sumB) {\n      return 0;\n    }\n    return ($sumA < $sumB)\
    \ ? -1 : 1;\n  });\n  return $nums;\n}\n", "  $sum = array();\n  $new = array();\n\
    \  if (count($nums) == 0) {\n    return $nums;\n  }\n  else {\n    for ($i = 0;\
    \ $i < count($nums); $i++) {\n      $sum[$i] = array_sum(str_split($nums[$i]));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $val) {\n      $new[] =\
    \ $nums[$key];\n    }\n    return $new;\n  }\n}", "\t$index = 0;\n\t$digits =\
    \ [];\n\tforeach ($nums as $number) {\n\t\t$digits[$index] = $number;\n\t\t$digits[$index]\
    \ = str_split($digits[$index]);\n\t\t$sum = 0;\n\t\tforeach ($digits[$index] as\
    \ $digit) {\n\t\t\t$sum += $digit;\n\t\t}\n\t\t$digits[$index] = $sum;\n\t\t$index++;\n\
    \t}\n\tarray_multisort($digits, $nums);\n\treturn $nums;\n}\n", "    if (!count($nums))\
    \ {\n        return $nums;\n    }\n    $arr = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        $val = str_split($num);\n        foreach\
    \ ($val as $item) {\n            $sum += $item;\n        }\n        $arr[$key]\
    \ = $sum;\n    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key\
    \ => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n", "    $numbers = array();\n    $result = array();\n    foreach ($nums as\
    \ $num) {\n        $numbers[$num] = 0;\n        $num = abs($num);\n        while\
    \ ($num > 0) {\n            $numbers[$num] += $num % 10;\n            $num = (int)($num\
    \ / 10);\n        }\n    }\n    asort($numbers);\n    foreach ($numbers as $num\
    \ => $points) {\n        $result[] = $num;\n    }\n    return $result;\n}", " \
    \ // your code here\n  return $nums;\n}\n", "    $points = array();\n    $result\
    \ = array();\n    foreach ($nums as $key => $value) {\n        if ($value > 0)\
    \ {\n            $points[$key] = array_sum(str_split($value));\n        } else\
    \ {\n            $points[$key] = array_sum(str_split(abs($value))) * -1;\n   \
    \     }\n    }\n    asort($points);\n    foreach ($points as $key => $value) {\n\
    \        array_push($result, $nums[$key]);\n    }\n    return $result;\n}\n",
  "    $result = array();\n    $numbers_sum = array();\n    if(!empty($nums)) {\n\
    \        foreach($nums as $key => $num) {\n            $num_array = str_split($num);\n\
    \            $sum = 0;\n            foreach($num_array as $digit) {\n        \
    \        $sum += $digit;\n            }\n            $numbers_sum[$key] = $sum;\n\
    \        }\n        asort($numbers_sum);\n        foreach($numbers_sum as $key\
    \ => $sum) {\n            $result[] = $nums[$key];\n        }\n    }\n    return\
    \ $result;\n}\n$test_array = array(9, -99, -999, 1, -1, -11, -12, 11, 0, -98);\n\
    echo \"<pre>\";\nprint_r(order_by_points($test_array));\necho \"</pre>\";", " \
    \   $returnArray = [];\n    $resultArray = [];\n    foreach ($nums as $key =>\
    \ $value) {\n        if ($value < 0) {\n            $value = $value * -1;\n  \
    \      }\n        $sum = 0;\n        for ($i = 0; $i < strlen($value); $i++) {\n\
    \            $sum += $value % 10;\n            $value = (int)($value / 10);\n\
    \        }\n        $returnArray[$key] = $sum;\n    }\n    asort($returnArray);\n\
    \    foreach ($returnArray as $key => $value) {\n        $resultArray[] = $nums[$key];\n\
    \    }\n    return $resultArray;\n}\necho implode(\", \", order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    $new = array();\n    foreach\
    \ ($nums as $index => $num) {\n        $sum = array_sum(str_split(abs($num)));\n\
    \        $sums[$sum][] = $index;\n    }\n    ksort($sums);\n    foreach ($sums\
    \ as $sum => $indexes) {\n        foreach ($indexes as $index) {\n           \
    \ $new[] = $nums[$index];\n        }\n    }\n    return $new;\n}\n\necho '<pre>';\n\
    var_dump(order_by_points(array(1, 11, -1, -11, -12)));\nvar_dump(order_by_points(array()));\n\
    echo '</pre>';", "\t$retArray = [];\n\t$sums = [];\n\tfor ($i = 0; $i < count($nums);\
    \ $i++) {\n\t\t$sums[$i] = sum_digits($nums[$i]);\n\t}\n\t// Let's sort the sums!\n\
    \tsort($sums);\n\t// Now let's iterate the sorted sums, and add their\n\t// corresponding\
    \ elements from $nums to $retArray.\n\t// We iterate $sums instead of $nums, to\
    \ ensure that\n\t// the order is preserved.\n\tfor ($i = 0; $i < count($sums);\
    \ $i++) {\n\t\tfor ($j = 0; $j < count($nums); $j++) {\n\t\t\tif (sum_digits($nums[$j])\
    \ == $sums[$i]) {\n\t\t\t\tarray_push($retArray, $nums[$j]);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $retArray;\n}\n", "    $length = count($nums);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            $iSum = sumDigits($nums[$i]);\n            $jSum = sumDigits($nums[$j]);\n\
    \            if ($iSum > $jSum) {\n                $tmp = $nums[$i];\n       \
    \         $nums[$i] = $nums[$j];\n                $nums[$j] = $tmp;\n        \
    \    }\n        }\n    }\n    return $nums;\n}\n", "\t$num_array = array();\n\t\
    foreach ($nums as $num) {\n\t\t$num_string = strval($num);\n\t\t$num_array[] =\
    \ [$num, array_sum(str_split($num_string))];\n\t}\n\tusort($num_array, function($a,\
    \ $b) {\n\t\treturn $a[1] - $b[1];\n\t});\n\t$result = array();\n\tforeach ($num_array\
    \ as $value) {\n\t\t$result[] = $value[0];\n\t}\n\treturn $result;\n}", "    $sums\
    \ = array();\n    foreach ($nums as $i => $num) {\n        $sum = 0;\n       \
    \ while ($num > 0) {\n            $sum += $num % 10;\n            $num = intval($num\
    \ / 10);\n        }\n        $sums[$i] = $sum;\n    }\n    asort($sums);\n   \
    \ $result = array();\n    foreach ($sums as $i => $sum) {\n        $result[] =\
    \ $nums[$i];\n    }\n    return $result;\n}\n\n$test1 = array(1, 11, -1, -11,\
    \ -12);\n$test2 = array();\n$result1 = order_by_points($test1);\n$result2 = order_by_points($test2);\n\
    echo \"Expected array(-1, -11, 1, -12, 11), result: \";\nprint_r($result1);\n\
    echo \"<br>\";\necho \"Expected array(), result: \";\nprint_r($result2);\necho\
    \ \"<br>\";", "  $ordered = array();\n  foreach ($nums as $index => $num) {\n\
    \    $ordered[$index] = array_sum(str_split($num));\n  }\n  asort($ordered);\n\
    \  $result = array();\n  foreach ($ordered as $index => $num) {\n    $result[]\
    \ = $nums[$index];\n  }\n  return $result;\n}\n", "\t$orderedNums = array();\n\
    \t$sums = array();\n\t$sumsCount = 0;\n\tforeach ($nums as $num) {\n\t\t$curSum\
    \ = 0;\n\t\t$numAsStr = strval($num);\n\t\tfor ($i = 0; $i < strlen($numAsStr);\
    \ $i++) {\n\t\t\t$curSum += intval($numAsStr[$i]);\n\t\t}\n\t\t$sums[$curSum]\
    \ = $num;\n\t\t$sumsCount++;\n\t}\n\tksort($sums);\n\tforeach ($sums as $sum)\
    \ {\n\t\tarray_push($orderedNums, $sum);\n\t}\n\treturn $orderedNums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "  $points = [];\n\
    \  foreach ($nums as $i => $num) {\n    $points[$i] = 0;\n    while ($num > 0)\
    \ {\n      $points[$i] += $num % 10;\n      $num /= 10;\n    }\n  }\n  array_multisort($points,\
    \ $nums);\n  return $nums;\n}\n", "  $output = array();\n  $len = count($nums);\n\
    \  $nums_sum = array();\n  for ($i = 0; $i < $len; $i++) {\n    $nums_sum[$i]\
    \ = array_sum(str_split(strval($nums[$i])));\n  }\n  sort($nums_sum);\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    for ($j = 0; $j < $len; $j++) {\n      if ($nums_sum[$i]\
    \ == array_sum(str_split(strval($nums[$j])))) {\n        $output[] = $nums[$j];\n\
    \        $nums[$j] = -1;\n        break;\n      }\n    }\n  }\n  return $output;\n\
    }\n\n$test = array(1, 11, -1, -11, -12);\n$res = order_by_points($test);\nprint_r($res);",
  "  $nums_with_points = array();\n  foreach ($nums as $key => $num) {\n    if ($num\
    \ < 0) {\n      $num *= -1;\n    }\n    $points = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n      $points += $num[$i];\n    }\n    $nums_with_points[$points][]\
    \ = $num;\n  }\n  ksort($nums_with_points);\n  $result = array();\n  foreach ($nums_with_points\
    \ as $point => $point_nums) {\n    foreach ($point_nums as $point_num) {\n   \
    \   $key = array_search($point_num, $nums);\n      $result[$key] = $point_num;\n\
    \    }\n  }\n  ksort($result);\n  return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));\n", "    if (count($nums)\
    \ === 0) {\n        return $nums;\n    }\n\n    // We need a way to temporarily\
    \ keep track of the indexes of the original array,\n    // so I'll combine them\
    \ and then sort using the key\n    $num_array = array();\n    foreach ($nums as\
    \ $index => $num) {\n        $num_array[$index] = $num;\n    }\n\n    asort($num_array);\n\
    \n    $output = array();\n    foreach ($num_array as $key => $value) {\n     \
    \   $output[] = $value;\n    }\n\n    return $output;\n}\n", "    $map = array();\n\
    \    foreach ($nums as $index => $num) {\n        $map[$index] = sum_digits($num);\n\
    \    }\n    asort($map);\n    $result = array();\n    foreach ($map as $index\
    \ => $sum) {\n        $result[] = $nums[$index];\n    }\n    return $result;\n\
    }", "  // Your code here!\n}\n", "    if (empty($nums)) return $nums;\n    $nums_map\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        $nums_map[$key] = $sum;\n\
    \    }\n    asort($nums_map);\n    $ret = [];\n    foreach ($nums_map as $key\
    \ => $value) {\n        $ret[] = $nums[$key];\n    }\n    return $ret;\n}\n\n\
    $arr = [1, 11, -1, -11, -12];\nvar_dump(order_by_points($arr));", "    $points\
    \ = [];\n    foreach ($nums as $index => $num) {\n        $point = 0;\n      \
    \  for ($i = strlen($num) - 1; $i >= 0; $i--) {\n            $point += $num[$i];\n\
    \        }\n        $points[$index] = $point;\n    }\n    $indices = range(0,\
    \ count($nums) - 1);\n    array_multisort($points, $indices);\n    $result = [];\n\
    \    foreach ($indices as $index) {\n        $result[] = $nums[$index];\n    }\n\
    \    return $result;\n}", "    // \u0412\u044B\u0447\u0438\u0441\u043B\u044F\u0435\
    \u043C \u0441\u0443\u043C\u043C\u0443 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\
    \u0441\u043B\u0435 \u0438 \u0437\u0430\u043F\u0438\u0441\u044B\u0432\u0430\u0435\
    \u043C \u0435\u0435 \u0432 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\
    \u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0432 \u043D\u043E\u0432\u044B\u0439\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\n    foreach ($nums as $num) {\n      \
    \  $result[$num] = sum_of_digits($num);\n    }\n    // \u0421\u043E\u0440\u0442\
    \u0438\u0440\u0443\u0435\u043C \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043D\
    \u044B\u0439 \u043C\u0430\u0441\u0441\u0438\u0432 \u043F\u043E \u0437\u043D\u0430\
    \u0447\u0435\u043D\u0438\u044F\u043C \u0432 \u043F\u043E\u0440\u044F\u0434\u043A\
    \u0435 \u0432\u043E\u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u044F\n  \
    \  asort($result);\n    // \u0417\u0430\u043F\u0438\u0441\u044B\u0432\u0430\u0435\
    \u043C \u0438\u043D\u0434\u0435\u043A\u0441\u044B \u0441\u043E\u0440\u0442\u0438\
    \u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0433\u043E \u043C\u0430\u0441\u0441\
    \u0438\u0432\u0430 \u0432 \u043D\u043E\u0432\u044B\u0439 \u043C\u0430\u0441\u0441\
    \u0438\u0432, \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C\
    \ \u0435\u0433\u043E.\n    return array_keys($result);\n}\n", "  $indexes = [];\n\
    \  foreach ($nums as $i => $num) {\n    $indexes[$i] = sum_digits($num);\n  }\n\
    \  asort($indexes);\n  $sorted = [];\n  foreach ($indexes as $i => $sum) {\n \
    \   $sorted[] = $nums[$i];\n  }\n  return $sorted;\n}\n", "  if(empty($nums))\
    \ {\n    return $nums;\n  }\n  $map = [];\n  foreach($nums as $key => $value)\
    \ {\n    $sum = sum_digits($value);\n    if(!isset($map[$sum])) {\n      $map[$sum]\
    \ = [];\n    }\n    $map[$sum][] = $value;\n  }\n  ksort($map);\n  $res = [];\n\
    \  foreach($map as $value) {\n    foreach($value as $item) {\n      $res[] = $item;\n\
    \    }\n  }\n  return $res;\n}\n", "    // your code here\n    $res = [];\n  \
    \  foreach ($nums as $key => $val) {\n      $res[$key] = $val;\n      $res[$key]\
    \ = array_sum(str_split($val));\n    }\n    asort($res);\n    $arr = [];\n   \
    \ foreach ($res as $key => $val) {\n      $arr[] = $nums[$key];\n    }\n    return\
    \ $arr;\n}\n", "  // for each number in the array, use a for loop to add up the\
    \ digits in the number\n  // save the number, and the sum of digits into an array\n\
    \  // sort the array by sum of digits, asc\n  // return the first index of the\
    \ sorted array\n  $array = [];\n  foreach ($nums as $num) {\n    $sum = 0;\n \
    \   for ($i = 0; $i < strlen($num); $i++) {\n      $sum += (int)$num[$i];\n  \
    \  }\n    $array[] = [$num, $sum];\n  }\n  usort($array, function($a, $b) {\n\
    \    if ($a[1] === $b[1]) {\n      return 0;\n    }\n    return ($a[1] < $b[1])\
    \ ? -1 : 1;\n  });\n  $array = array_map(function($num){\n    return $num[0];\n\
    \  }, $array);\n  return $array;\n}", "    // Your code here\n}\n\necho '<pre>';\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));\necho '</pre>';\n\necho\
    \ '<pre>';\nprint_r(order_by_points(array()));\necho '</pre>';", "\t$nums_copy\
    \ = $nums;\n\tforeach ($nums_copy as $key => $value) {\n\t\t$sum = 0;\n\t\twhile\
    \ ($value) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = intval($value / 10);\n\
    \t\t}\n\t\t$nums_copy[$key] = $sum;\n\t}\n\tasort($nums_copy);\n\t$keys = array_keys($nums_copy);\n\
    \tforeach ($keys as $key => $value) {\n\t\t$keys[$key] = $nums[$value];\n\t}\n\
    \treturn $keys;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "\t$output = [];\n\tforeach ($nums as $num) {\n\t\t$digits = str_split($num);\n\t\
    \t$sum = 0;\n\t\tforeach ($digits as $digit) {\n\t\t\t$sum += $digit;\n\t\t}\n\
    \t\t$output[$num] = $sum;\n\t}\n\tasort($output);\n\treturn array_keys($output);\n\
    }", "  $sums = array();\n  $sorted_nums = array();\n  foreach ($nums as $key =>\
    \ $num) {\n    $sum = 0;\n    $chars = str_split($num);\n    foreach ($chars as\
    \ $c) {\n      $sum += intval($c);\n    }\n    $sums[$key] = $sum;\n  }\n  asort($sums);\n\
    \  foreach ($sums as $k => $v) {\n    $sorted_nums[] = $nums[$k];\n  }\n  return\
    \ $sorted_nums;\n}", "  $arr = [];\n  $total = 0;\n  for ($i = 0; $i < count($nums);\
    \ $i++) {\n    for ($j = 0; $j < strlen((string)$nums[$i]); $j++) {\n      $total\
    \ += $nums[$i][$j];\n    }\n    $arr[] = $total;\n    $total = 0;\n  }\n  print_r($arr);\n\
    \  echo \"---------------------------\\n\";\n  asort($arr);\n  print_r($arr);\n\
    \  echo \"---------------------------\\n\";\n  $keys = array_keys($arr);\n  $results\
    \ = [];\n  foreach ($keys as $key) {\n    $results[] = $nums[$key];\n  }\n  return\
    \ $results;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    //\
    \ your code here\n    $arr_sum_arr = [];\n    foreach ($nums as $key => $value)\
    \ {\n        $arr_sum_arr[$key] = $value;\n        $arr_sum_arr[$key] = array_sum(str_split(abs($value)));\n\
    \    }\n    asort($arr_sum_arr);\n    return array_keys($arr_sum_arr);\n}\n\n\
    $result = order_by_points(array(12, 1, 23, -1, -12));\nvar_dump($result);", " \
    \ $out = [];\n  foreach ($nums as $key => $val) {\n    $out[$key] = array_sum(str_split($val));\n\
    \  }\n  asort($out);\n  return array_keys($out);\n}\necho implode(', ', order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $newArray = [];\n    foreach ($nums as $number)\
    \ {\n        $number = abs($number);\n        $number = array_sum(str_split($number));\n\
    \        $newArray[] = $number;\n    }\n    array_multisort($newArray, $nums);\n\
    \    return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    $sum = array();\n    $total = 0;\n    $length = count($nums);\n    if ($length\
    \ === 0) {\n        return array();\n    }\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $temp = str_split($nums[$i]);\n        $total = 0;\n        foreach\
    \ ($temp as $item) {\n            $total += $item;\n        }\n        $sum[$i]\
    \ = $total;\n    }\n    //$temp = null;\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        for ($j = $i + 1; $j < $length; $j++) {\n            if ($sum[$i]\
    \ > $sum[$j]) {\n                $temp = $sum[$i];\n                $sum[$i] =\
    \ $sum[$j];\n                $sum[$j] = $temp;\n                $temp = $nums[$i];\n\
    \                $nums[$i] = $nums[$j];\n                $nums[$j] = $temp;\n\
    \            }\n        }\n    }\n    return $nums;\n}\n\n$a = array(1, 11, -1,\
    \ -11, -12);\nprint_r(order_by_points($a));\n", "\t$results = array();\n\tforeach\
    \ ($nums as $index => $num) {\n\t\t$sum = 0;\n\t\tfor ($i = 0; $i < strlen($num);\
    \ $i++) {\n\t\t\t$sum += substr($num, $i, 1);\n\t\t}\n\t\t$results[$index] = $sum;\n\
    \t}\n\tasort($results);\n\t$result = array();\n\tforeach ($results as $index =>\
    \ $value) {\n\t\t$result[] = $nums[$index];\n\t}\n\treturn $result;\n}\n", " \
    \   if (empty($nums)) return $nums;\n    $map = array();\n    foreach ($nums as\
    \ $key => $val) {\n        $sum = 0;\n        while ($val > 0) {\n           \
    \ $sum += $val % 10;\n            $val = floor($val / 10);\n        }\n      \
    \  $map[$key] = $sum;\n    }\n    asort($map);\n    $ret = array();\n    foreach\
    \ ($map as $key => $val) {\n        $ret[] = $nums[$key];\n    }\n    return $ret;\n\
    }", "    $output = [];\n    $sum_nums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sum_nums[$key] = sumDigits($num);\n    }\n    asort($sum_nums);\n\
    \    foreach ($sum_nums as $key => $val) {\n        $output[] = $nums[$key];\n\
    \    }\n    return $output;\n}\n", "    if(count($nums) === 0) {\n        return\
    \ $nums;\n    }\n    usort($nums, 'cmp');\n    return $nums;\n}\n", "    $sums\
    \ = array();\n    for ($i = 0; $i < count($nums); $i++) {\n        $sums[$i] =\
    \ sum_of_digits($nums[$i]);\n    }\n    $temp = array();\n    while (!empty($sums))\
    \ {\n        $min_sum = min($sums);\n        $temp[] = $nums[array_search($min_sum,\
    \ $sums)];\n        unset($sums[array_search($min_sum, $sums)]);\n        unset($nums[array_search($min_sum,\
    \ $sums)]);\n    }\n    return $temp;\n}\n", "\t$return_array = array();\n\tforeach\
    \ ($nums as $key => $num) {\n\t\t$string = (string) $num;\n\t\t$num_array = str_split($string);\n\
    \t\t$sum = 0;\n\t\tforeach ($num_array as $value) {\n\t\t\t$sum += (int) $value;\n\
    \t\t}\n\t\t$return_array[$key] = $sum;\n\t}\n\treturn array_multisort($return_array,\
    \ $nums);\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    //\
    \ Convert all numbers to strings, then sum them\n    $points = array_map(function($n)\
    \ {\n        return array_sum(str_split($n));\n    }, $nums);\n\n    // Based\
    \ on points, sort the numbers\n    array_multisort($points, $nums);\n\n    return\
    \ $nums;\n}\n", "    if (empty($nums)) {\n        return $nums;\n    }\n\n   \
    \ $digits = [];\n    foreach ($nums as $i => $num) {\n        $digits[$i] = array_sum(str_split($num));\n\
    \    }\n\n    array_multisort($digits, SORT_ASC, $nums);\n\n    return $nums;\n\
    }", "    $nums_assoc = array();\n    foreach ($nums as $index => $number) {\n\
    \        $sum = 0;\n        while ($number > 0) {\n            $sum += $number\
    \ % 10;\n            $number = (int)($number / 10);\n        }\n        $nums_assoc[$index]\
    \ = $sum;\n    }\n    asort($nums_assoc);\n    $nums_sorted = array();\n    foreach\
    \ ($nums_assoc as $index => $value) {\n        $nums_sorted[] = $nums[$index];\n\
    \    }\n    return $nums_sorted;\n}\n", "\n}\n\nvar_dump(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\n", "    $digits = array();\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $digits[$i] = array_sum(str_split(strval($nums[$i])));\n  \
    \  }\n    $points = array_combine($nums, $digits);\n    asort($points);\n    return\
    \ array_keys($points);\n}\n\n$test = array(1, 11, -1, -11, -12);\n$test2 = array();\n\
    print_r(order_by_points($test));\nprint_r(order_by_points($test2));", "  $nums_count\
    \ = count($nums);\n  for ($i = 0; $i < $nums_count; $i++) {\n    $j = $i + 1;\n\
    \    while ($j < $nums_count) {\n      $first_value = $nums[$i];\n      $second_value\
    \ = $nums[$j];\n      $first_value_sum = array_sum(str_split(abs($first_value)));\n\
    \      $second_value_sum = array_sum(str_split(abs($second_value)));\n      if\
    \ ($first_value_sum > $second_value_sum) {\n        $temp = $nums[$i];\n     \
    \   $nums[$i] = $nums[$j];\n        $nums[$j] = $temp;\n      }\n      $j++;\n\
    \    }\n  }\n  return $nums;\n}\n\n$input = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($input));",
  "    $tmp = [];\n    foreach ($nums as $index => $n) {\n        $tmp[$index] = get_sum_of_digits($n);\n\
    \    }\n    asort($tmp);\n    $result = [];\n    foreach ($tmp as $index => $sum)\
    \ {\n        $result[] = $nums[$index];\n    }\n    return $result;\n}\n", "\t\
    foreach ($nums as $key => $val) {\n\t\t$sum = 0;\n\t\twhile ($val > 0) {\n\t\t\
    \t$rem = $val % 10;\n\t\t\t$sum += $rem;\n\t\t\t$val = $val / 10;\n\t\t}\n\t\t\
    $sums[$key] = $sum;\n\t}\n\tasort($sums);\n\t$index = 0;\n\tforeach ($sums as\
    \ $key => $val) {\n\t\t$result[$index] = $nums[$key];\n\t\t$index++;\n\t}\n\t\
    return $result;\n}\n", "  // for each num in array, get sum of digits\n  // then\
    \ sort by that array and return it\n  $sumArray = [];\n  for ($i = 0; $i < count($nums);\
    \ $i++) {\n    $sum = 0;\n    foreach (str_split($nums[$i]) as $digit) {\n   \
    \   $sum += $digit;\n    }\n    $sumArray[$i] = $sum;\n  }\n  asort($sumArray);\n\
    \  foreach ($sumArray as $i => $sum) {\n    $sumArray[$i] = $nums[$i];\n  }\n\
    \  return $sumArray;\n}\n", "  $results = [];\n  foreach ($nums as $key => $num)\
    \ {\n    $sum = 0;\n    foreach (str_split($num) as $digit) {\n      $sum += $digit;\n\
    \    }\n    $results[$key] = $sum;\n  }\n  asort($results);\n  $new_arr = [];\n\
    \  foreach ($results as $key => $value) {\n    $new_arr[] = $nums[$key];\n  }\n\
    \  return $new_arr;\n}\n$nums = [1, 11, -1, -11, -12];\nprint_r(order_by_points($nums));",
  "  $result = array();\n  $sums = array();\n  foreach ($nums as $index => $num) {\n\
    \    $sum = 0;\n    $n = $num;\n    while ($n != 0) {\n      $sum += $n % 10;\n\
    \      $n = (int)($n / 10);\n    }\n    $sums[$index] = $sum;\n  }\n  asort($sums);\n\
    \  foreach ($sums as $index => $sum) {\n    $result[] = $nums[$index];\n  }\n\
    \  return $result;\n}\n", "\t// \t$results = [];\n\t// \t$array = array_map('intval',\
    \ str_split($num));\n\t// \t$sum = array_sum($array);\n\t// \t$results[$sum] =\
    \ $num;\n\t// \treturn $results;\n\t// }\n\t// $nums = array_map('order_by_points',\
    \ $nums);\n\t// ksort($nums);\n\t// $nums = array_keys($nums);\n\t// return $nums;\n\
    \t// }\n\t$sum_array = [];\n\tforeach ($nums as $key => $num) {\n\t\t$sum_array[$key]\
    \ = array_sum(str_split($num));\n\t}\n\t// sort($sum_array);\n\tarray_multisort($sum_array,\
    \ SORT_ASC, $nums);\n\treturn $nums;\n}\n", "  // your code here\n}", "    $sums\
    \ = array();\n    $i = 0;\n    foreach ($nums as $num) {\n        $sum = 0;\n\
    \        $digits = str_split($num);\n        foreach ($digits as $digit) {\n \
    \           $sum += intval($digit);\n        }\n        $sums[$i] = $sum;\n  \
    \      $i++;\n    }\n    asort($sums);\n    $ans = array();\n    foreach ($sums\
    \ as $i => $sum) {\n        $ans[] = $nums[$i];\n    }\n    return $ans;\n}\n",
  "  usort($nums, function($a, $b) {\n    $aSum = array_sum(str_split($a));\n    $bSum\
    \ = array_sum(str_split($b));\n    return $aSum - $bSum;\n  });\n  return $nums;\n\
    }\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "\tusort($nums, function($a,\
    \ $b) {\n\t\t$a_digits = array_sum(str_split($a));\n\t\t$b_digits = array_sum(str_split($b));\n\
    \t\t\n\t\tif ($a_digits == $b_digits) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn ($a_digits\
    \ < $b_digits) ? -1 : 1;\n\t});\n\treturn $nums;\n}\n", "    // TODO: Implement\
    \ me\n}", "  $totalNum = count($nums);\n  if ($totalNum == 0) {\n    return array();\n\
    \  }\n  $points = array();\n  $map = array();\n  for ($i = 0; $i < $totalNum;\
    \ $i++) {\n    $num = $nums[$i];\n    $point = 0;\n    $numStr = (string)$num;\n\
    \    for ($j = 0; $j < strlen($numStr); $j++) {\n      $point += $numStr[$j];\n\
    \    }\n    $points[$i] = $point;\n    $map[$point] = $map[$point] + 1;\n  }\n\
    \  $totalNum = count($nums);\n  $offset = 0;\n  for ($i = 0; $i < $totalNum; $i++)\
    \ {\n    $point = $points[$i];\n    $position = $i - $offset;\n    $map[$point]\
    \ = $map[$point] - 1;\n    $currentNum = $nums[$position];\n    $currentPoint\
    \ = $points[$position];\n    if ($currentPoint == $point) {\n      $offset++;\n\
    \      continue;\n    }\n    if ($map[$currentPoint] == 0) {\n      while ($currentPoint\
    \ != $point) {\n        $map[$currentPoint] = $map[$currentPoint] + 1;\n     \
    \   $offset++;\n        $tempPosition = $position + $offset;\n        $tempNum\
    \ = $nums[$tempPosition];\n        $tempPoint = $points[$tempPosition];\n    \
    \    $nums[$tempPosition] = $currentNum;\n        $points[$tempPosition] = $currentPoint;\n\
    \        $currentNum = $tempNum;\n        $currentPoint = $tempPoint;\n      }\n\
    \      $offset++;\n      $nums[$position] = $currentNum;\n      $points[$position]\
    \ = $currentPoint;\n    } else {\n      $map[$currentPoint] = $map[$currentPoint]\
    \ + 1;\n      $offset++;\n      $tempPosition = $position + $offset;\n      $tempNum\
    \ = $nums[", "    $sums = array();\n    foreach ($nums as $key => $num) {\n  \
    \      $sum = array_sum(str_split(abs($num)));\n        $sums[$key] = $sum;\n\
    \    }\n    asort($sums);\n    $result = array();\n    foreach ($sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "\t$sums = array();\n\t\
    $i = 0;\n\tforeach ($nums as $n) {\n\t\t$sums[$i] = sum_digits($n);\n\t\t$i++;\n\
    \t}\n\tarray_multisort($sums, $nums);\n\treturn $nums;\n}\n", "    $nums_length\
    \ = count($nums);\n    $nums_new = [];\n    if ($nums_length === 0) {\n      \
    \  return $nums_new;\n    }\n    // using insertion sort\n    for ($i = 0; $i\
    \ < $nums_length; $i++) {\n        $temp = $nums[$i];\n        $j = $i - 1;\n\
    \        while ($j >= 0 && $nums_new[$j]['sum'] > $temp['sum']) {\n          \
    \  $nums_new[$j + 1] = $nums_new[$j];\n            $j--;\n        }\n        $nums_new[$j\
    \ + 1] = $temp;\n    }\n    return $nums_new;\n}\n", "\t$nums_sums = array();\n\
    \t// iterate through nums array\n\tforeach ($nums as $key => $value) {\n\t\t//\
    \ convert each value to a string\n\t\t$value = (string)$value;\n\t\t// use str_split\
    \ function to split the string into an array\n\t\t$value_array = str_split($value);\n\
    \t\t// add each value in the new array\n\t\t$sum = 0;\n\t\tforeach ($value_array\
    \ as $item) {\n\t\t\t$sum += $item;\n\t\t}\n\t\t// assign the sum to a new array\
    \ with the original key\n\t\t$nums_sums[$key] = $sum;\n\t}\n\t// sort the new\
    \ array with the sums\n\tasort($nums_sums);\n\t// create an array to push the\
    \ new values in\n\t$sorted_nums = array();\n\t// iterate through the nums_sums\
    \ array\n\tforeach ($nums_sums as $key => $value) {\n\t\t// push the new values\
    \ into the sorted_nums array with the original key from nums\n\t\tarray_push($sorted_nums,\
    \ $nums[$key]);\n\t}\n\t// return the array with the sorted values\n\treturn $sorted_nums;\n\
    }\n\n$tests = array(\n\tarray(\n\t\t'input' => array(1, 11, -1, -11, -12),\n\t\
    \t'expected' => array(-1, -11, 1, -12, 11)\n\t),\n\tarray(\n\t\t'input' => array(0,\
    \ 0, 0, 0, 0),\n\t\t'expected' => array(0, 0, 0, 0, 0)\n\t),\n\tarray(\n\t\t'input'\
    \ => array(3, 2, 4, 1, 5),\n\t\t'expected' => array(1, 2, 3, 4, 5)\n\t),\n\tarray(\n\
    \t\t'input' => array(0, 0, 1, 0, 0),\n\t\t'expected' => array(0, 0, 0, 0, 1)\n\
    \t),\n\tarray(\n\t\t'input", "    $arr = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $num = array_sum(str_split($num));\n        $arr[$key] = $num;\n\
    \    }\n    asort($arr);\n    $arr1 = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $arr1[] = $nums[$key];\n    }\n    return $arr1;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "  // do not change code above this line\n  \n  // your\
    \ code here\n\n  // do not change code below this line\n  return $nums;\n}", " \
    \   return $nums;\n}", "  if (empty($nums)) {\n    return $nums;\n  }\n\n  usort($nums,\
    \ function($first, $second) {\n    $first_sum = array_sum(str_split($first));\n\
    \    $second_sum = array_sum(str_split($second));\n\n    if ($first_sum === $second_sum)\
    \ {\n      return 0;\n    }\n    return $first_sum < $second_sum ? -1 : 1;\n \
    \ });\n\n  return $nums;\n}\n", "\t// Your code here\n}", "    $sums = array();\n\
    \    foreach ($nums as $index => $num) {\n        $sum = 0;\n        $num = $num\
    \ < 0 ? $num * -1 : $num;\n        while ($num > 0) {\n            $sum += $num\
    \ % 10;\n            $num = intval($num / 10);\n        }\n        $sums[$index]\
    \ = $sum;\n    }\n    asort($sums);\n    $answer = array();\n    foreach ($sums\
    \ as $index => $sum) {\n        $answer[] = $nums[$index];\n    }\n    return\
    \ $answer;\n}", "  $nums = array_map('sum_digits', $nums);\n  $nums = array_combine(array_keys($nums),\
    \ $nums);\n  asort($nums);\n  return array_keys($nums);\n}\n", "\t$results = array();\n\
    \tif (!empty($nums)) {\n\t\tforeach ($nums as $key => $num) {\n\t\t\t$results[$key]\
    \ = array_sum(str_split($num));\n\t\t}\n\t\tasort($results);\n\t\t$results = array_keys($results);\n\
    \t\tforeach ($results as $key => $result) {\n\t\t\t$results[$key] = $nums[$result];\n\
    \t\t}\n\t}\n\treturn $results;\n}\n\n$nums = array(1, 11, -1, -11, -12);\n$result\
    \ = order_by_points($nums);\nvar_dump($result);\n\n$nums = array();\n$result =\
    \ order_by_points($nums);\nvar_dump($result);\n", "    if (empty($nums)) {\n \
    \       return $nums;\n    }\n\n    $keys = array_map(function($num) {\n     \
    \   return array_sum(str_split(abs($num)));\n    }, $nums);\n\n    array_multisort($keys,\
    \ SORT_ASC, $nums);\n\n    return $nums;\n}", "    $sums = array();\n    foreach\
    \ ($nums as $index => $num) {\n        $sums[$index] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = array();\n    foreach ($sums as $index\
    \ => $sum) {\n        $result[] = $nums[$index];\n    }\n    return $result;\n\
    }\n\nvar_dump(order_by_points(array(1, 11, -1, -11, -12)));\nvar_dump(order_by_points(array()));",
  "    // Write your code here\n}\n", "  $temp = [];\n  $output = [];\n  $arr = [];\n\
    \  $in = 0;\n  $cnt = count($nums);\n  for ($i = 0; $i < $cnt; $i++) {\n    if\
    \ ($nums[$i] < 0) {\n      $temp[$i] = $nums[$i] * -1;\n    } else {\n      $temp[$i]\
    \ = $nums[$i];\n    }\n  }\n  for ($j = 0; $j < $cnt; $j++) {\n    $temp[$j] =\
    \ str_split($temp[$j]);\n    $arr[$j] = array_sum($temp[$j]);\n  }\n  sort($arr);\n\
    \  for ($k = 0; $k < $cnt; $k++) {\n    for ($l = 0; $l < $cnt; $l++) {\n    \
    \  if ($nums[$l] < 0) {\n        $temp[$l] = $nums[$l] * -1;\n      } else {\n\
    \        $temp[$l] = $nums[$l];\n      }\n      $temp[$l] = str_split($temp[$l]);\n\
    \      $tot = array_sum($temp[$l]);\n      if ($tot == $arr[$k]) {\n        $output[$in]\
    \ = $nums[$l];\n        $in++;\n      }\n    }\n  }\n  return $output;\n}", " \
    \   // Your code here.\n}", "\t// first use a foreach loop to see if the array\
    \ is empty or not\n\tif (empty($nums)) {\n\t\treturn array();\n\t}\n\t// use a\
    \ foreach loop to go through the array\n\tforeach ($nums as $i => $v) {\n\t\t\
    // in the foreach loop, sum up the value of each integer and add it to a new array\n\
    \t\t$arr[] = array_sum(str_split($v));\n\t}\n\t// sort the new array in ascending\
    \ order\n\tsort($arr);\n\t// use a foreach loop to go through the new array\n\t\
    foreach ($arr as $i => $v) {\n\t\t// in the foreach loop, use the index of the\
    \ new array to find the index of the original array\n\t\t// and then put them\
    \ into a new array\n\t\t$nums1[] = $nums[array_search($v, array_values($arr))];\n\
    \t}\n\t// return the new array\n\treturn $nums1;\n}\n", "    usort($nums, function($a,\
    \ $b) {\n        $aSum = 0;\n        for($i = 0; $i < strlen((string)$a); $i++)\
    \ {\n            $aSum += $a % 10;\n            $a = (int)($a / 10);\n       \
    \ }\n        $bSum = 0;\n        for($i = 0; $i < strlen((string)$b); $i++) {\n\
    \            $bSum += $b % 10;\n            $b = (int)($b / 10);\n        }\n\
    \        if($aSum < $bSum) {\n            return -1;\n        } else if($aSum\
    \ > $bSum) {\n            return 1;\n        } else {\n            return 0;\n\
    \        }\n    });\n    return $nums;\n}\n", "    $result = array();\n    $data\
    \ = array();\n    foreach ($nums as $i => $num) {\n        $sum = 0;\n       \
    \ $n = $num;\n        while ($n != 0) {\n            $sum += $n % 10;\n      \
    \      $n = (int)($n / 10);\n        }\n        $result[$sum][] = $num;\n    \
    \    $data[$sum][] = $i;\n    }\n    ksort($result);\n    foreach ($result as\
    \ $k => $v) {\n        asort($data[$k]);\n        $result[$k] = array_combine($data[$k],\
    \ $v);\n    }\n    return array_merge(...$result);\n}\n", "    $sort_array = array();\n\
    \    if (count($nums) > 0) {\n        foreach ($nums as $key => $value) {\n  \
    \          $sum = 0;\n            while ($value > 0) {\n                $sum +=\
    \ $value % 10;\n                $value = intval($value / 10);\n            }\n\
    \            $sort_array[$key] = $sum;\n        }\n        asort($sort_array);\n\
    \        $sorted_array = array();\n        foreach ($sort_array as $key => $value)\
    \ {\n            $sorted_array[] = $nums[$key];\n        }\n        return $sorted_array;\n\
    \    } else {\n        return $nums;\n    }\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));\n", "\t$checkNums =\
    \ $nums;\n\t\n\t$sum = 0;\n\t$numSum = [];\n\t$size = count($nums);\n\t$sizeCheck\
    \ = count($checkNums);\n\tfor ($i = 0; $i < $size; $i++) {\n\t\tif ($nums[$i]\
    \ < 0) {\n\t\t\t$absNum = abs($nums[$i]);\n\t\t\t$numStr = (string)$absNum;\n\t\
    \t\t$sum = 0;\n\t\t\tfor ($x = 0; $x < strlen($numStr); $x++) {\n\t\t\t\t$sum\
    \ += (int)$numStr[$x];\n\t\t\t}\n\t\t\t$negSum = $sum * -1;\n\t\t\tarray_push($numSum,\
    \ $negSum);\n\t\t} else {\n\t\t\t$numStr = (string)$nums[$i];\n\t\t\t$sum = 0;\n\
    \t\t\tfor ($x = 0; $x < strlen($numStr); $x++) {\n\t\t\t\t$sum += (int)$numStr[$x];\n\
    \t\t\t}\n\t\t\tarray_push($numSum, $sum);\n\t\t}\n\t}\n\tsort($numSum);\n\t$orderedArray\
    \ = [];\n\tfor ($i = 0; $i < $sizeCheck; $i++) {\n\t\tfor ($x = 0; $x < $size;\
    \ $x++) {\n\t\t\tif ($checkNums[$i] < 0) {\n\t\t\t\t$absNum = abs($checkNums[$i]);\n\
    \t\t\t\t$numStr = (string)$absNum;\n\t\t\t\t$sum = 0;\n\t\t\t\tfor ($x = 0; $x\
    \ < strlen($numStr); $x++) {\n\t\t\t\t\t$sum += (int)$numStr[$x];\n\t\t\t\t}\n\
    \t\t\t\t$negSum = $sum * -1;\n\t\t\t\tif ($negSum == $numSum[$i]) {\n\t\t\t\t\t\
    array_push($orderedArray, $checkNums[$i", "    $temp_nums = array();\n    foreach\
    \ ($nums as $key => $num) {\n        if ($num >= 0) {\n            $num_of_digits\
    \ = strlen($num);\n            $sum = 0;\n            for ($i = 0; $i < $num_of_digits;\
    \ $i++) {\n                $sum += intval($num % 10);\n                $num =\
    \ intval($num / 10);\n            }\n            $temp_nums[$key] = $sum;\n  \
    \      } else {\n            $temp_nums[$key] = $num;\n        }\n    }\n    sort($temp_nums);\n\
    \    return $temp_nums;\n}\necho implode(', ', order_by_points(array(1, 11, -1,\
    \ -11, -12))).PHP_EOL;", "\t$result = [];\n\t$pairs = [];\n\t$result = $nums;\n\
    \tfor ($i = 0; $i < count($nums); $i++) {\n\t\t$pairs[] = [sum_digits($nums[$i]),\
    \ $i];\n\t}\n\tsort($pairs);\n\tforeach ($pairs as $pair) {\n\t\t$result[$pair[1]]\
    \ = $nums[$pair[1]];\n\t}\n\treturn $result;\n}\n", "    $data = array();\n  \
    \  foreach ($nums as $key => $num) {\n        $sum = 0;\n        while ($num)\
    \ {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n  \
    \      }\n        $data[$key] = $sum;\n    }\n    asort($data);\n    $ans = array();\n\
    \    foreach ($data as $key => $value) {\n        $ans[] = $nums[$key];\n    }\n\
    \    return $ans;\n}\n", "  if (sizeof($nums) == 0) {\n    return $nums;\n  }\n\
    \  $nums2 = array();\n  $first_position = $nums[0];\n  $nums2[] = $first_position;\n\
    \  unset($nums[0]);\n  while (sizeof($nums) > 0) {\n    $best_match = 0;\n   \
    \ $best_match_index = 0;\n    foreach ($nums as $k => $v) {\n      $v_digits =\
    \ get_digits($v);\n      $best_match_digits = get_digits($best_match);\n     \
    \ if ($v_digits <= $best_match_digits) {\n        $best_match = $v;\n        $best_match_index\
    \ = $k;\n      }\n    }\n    $nums2[] = $best_match;\n    unset($nums[$best_match_index]);\n\
    \  }\n  return $nums2;\n}", "  $numbers = array();\n  foreach ($nums as $i =>\
    \ $num) {\n    $numbers[$i] = 0;\n    while ($num > 0) {\n      $numbers[$i] +=\
    \ $num % 10;\n      $num = intval($num / 10);\n    }\n  }\n  $nums = sort_by_values($nums,\
    \ $numbers);\n  return $nums;\n}\n", "    if (empty($nums)) {\n        return\
    \ $nums;\n    }\n\n    usort($nums, function($a, $b) {\n        $sumA = sum_of_digits($a);\n\
    \        $sumB = sum_of_digits($b);\n\n        if ($sumA == $sumB) {\n       \
    \     return 0;\n        }\n\n        return $sumA < $sumB ? -1 : 1;\n    });\n\
    \n    return $nums;\n}\n", "\t// Your code here\n\tforeach ($nums as $n) {\n\t\
    \t$x = $n;\n\t\t$sum = 0;\n\t\twhile ($x) {\n\t\t\t$sum += $x % 10;\n\t\t\t$x\
    \ = floor($x / 10);\n\t\t}\n\t\t$sums[] = $sum;\n\t}\n\tarray_multisort($sums,\
    \ $nums);\n\treturn $nums;\n}\n", "    $sum_int = array();\n    foreach ($nums\
    \ as $key => $num) {\n        $sum_int[$key] = array_sum(str_split($num));\n \
    \   }\n    asort($sum_int);\n    $sorted_nums = array();\n    foreach ($sum_int\
    \ as $key => $value) {\n        $sorted_nums[] = $nums[$key];\n    }\n    return\
    \ $sorted_nums;\n}\n", "\t// $nums = array(1, 11, -1, -11, -12);\n\t$sums = array();\n\
    \tforeach ($nums as $key => $value) {\n\t\t$total = 0;\n\t\t$arr = str_split($value);\n\
    \t\tforeach ($arr as $k => $v) {\n\t\t\t$total += $v;\n\t\t}\n\t\t$sums[$key]\
    \ = $total;\n\t}\n\tasort($sums);\n\t$newArr = array();\n\tforeach ($sums as $key\
    \ => $value) {\n\t\t$newArr[] = $nums[$key];\n\t}\n\treturn $newArr;\n}", "  \
    \  $newArray = array();\n    $results = array();\n    foreach ($nums as $key =>\
    \ $val) {\n        $sumOfDigits = 0;\n        if ($val >= 0) {\n            for\
    \ ($i = 0; $i < strlen($val); $i++) {\n                $sumOfDigits += $val[$i];\n\
    \            }\n        } else {\n            for ($i = 1; $i < strlen($val);\
    \ $i++) {\n                $sumOfDigits += $val[$i];\n            }\n        }\n\
    \        $newArray[$key] = $sumOfDigits;\n    }\n    asort($newArray);\n    foreach\
    \ ($newArray as $key => $val) {\n        $results[] = $nums[$key];\n    }\n  \
    \  return $results;\n}\n\n$tests = array(\n    array(1, 11, -1, -11, -12),\n \
    \   array(),\n    array(1, -1, 2, -2, 3, -3, 4, -4),\n    array(1, 2, 3, 4),\n\
    \    array(-1, -2, -3, -4)\n);\n\nforeach ($tests as $test) {\n    echo '<pre>';\n\
    \    echo 'Input: ';\n    print_r($test);\n    echo 'Output: ';\n    print_r(order_by_points($test));\n\
    \    echo '</pre>';\n}", "    $sum_map = array();\n    $result = array();\n  \
    \  foreach ($nums as $index => $num) {\n        $sum = array_sum(str_split($num));\n\
    \        $sum_map[$sum][] = $index;\n    }\n    ksort($sum_map);\n    foreach\
    \ ($sum_map as $sum => $list) {\n        foreach ($list as $index) {\n       \
    \     $result[] = $nums[$index];\n        }\n    }\n    return $result;\n}\necho\
    \ '<pre>';\nvar_dump(order_by_points(array(1, 11, -1, -11, -12)));\necho '</pre>';\n",
  "  // Write your code here\n}", "\t$map = array();\n\tforeach ($nums as $key =>\
    \ $value) {\n\t\t$map[$key] = array_sum(str_split($value));\n\t}\n\tarray_multisort($map,\
    \ $nums);\n\treturn $nums;\n}", "    $len = count($nums);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $len2 = strlen($nums[$i]);\n        $sum = 0;\n   \
    \     for ($j = 0; $j < $len2; $j++) {\n            $sum += $nums[$i][$j];\n \
    \       }\n        $nums[$i] = $sum;\n    }\n    $a = [];\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $a[$i] = $nums[$i];\n    }\n    sort($nums);\n    $new_nums\
    \ = [];\n    for ($i = 0; $i < $len; $i++) {\n        $index = array_search($nums[$i],\
    \ $a);\n        $new_nums[$i] = $index;\n    }\n    $new_arr = [];\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $new_arr[$i] = $nums[$i];\n    }\n    return\
    \ $new_arr;\n}\necho '<pre>';\nvar_dump(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\nvar_dump(order_by_points(array()));\necho '</pre>';", "  $total = array();\n\
    \  $x = count($nums);\n  foreach ($nums as $num) {\n    $sum = 0;\n    $num =\
    \ str_split($num);\n    foreach ($num as $digit) {\n      $sum += $digit;\n  \
    \  }\n    $total[$sum] = $num;\n  }\n  ksort($total);\n  $output = array();\n\
    \  foreach ($total as $array) {\n    foreach ($array as $char) {\n      $output[]\
    \ = $char;\n    }\n  }\n  return $output;\n}\n\n$nums = array(1, 11, -1, -11,\
    \ -12);\necho implode(order_by_points($nums));", "    $result = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $result[$key] = sumDigits($num);\n    }\n\
    \    asort($result);\n    $result_array = [];\n    foreach ($result as $key =>\
    \ $item) {\n        $result_array[] = $nums[$key];\n    }\n    return $result_array;\n\
    }\n", "\t$sums = array();\n\tforeach ($nums as $key => $value) {\n\t\t$sums[$key]\
    \ = array_sum(str_split($value));\n\t}\n\tarray_multisort($sums, SORT_ASC, $nums);\n\
    \treturn $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    echo \"\\n\";\n", "    if(count($nums)==0) return $nums;\n    $map = [];\n   \
    \ foreach($nums as $i=>$n) {\n        $sum = array_sum(str_split($n));\n     \
    \   $map[$sum][] = $n;\n    }\n    ksort($map);\n    $result = [];\n    foreach($map\
    \ as $k=>$list) {\n        sort($list);\n        foreach($list as $n) {\n    \
    \        $result[] = $n;\n        }\n    }\n    return $result;\n}\n", "    //\
    \ your code goes here\n    if(sizeof($nums) == 0) {\n        return $nums;\n \
    \   }\n    if(sizeof($nums) == 1) {\n        return $nums;\n    }\n    $sums =\
    \ [];\n    foreach($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split(strval($num)));\n\
    \    }\n    asort($sums);\n    $returnArray = [];\n    foreach($sums as $key =>\
    \ $sum) {\n        $returnArray[] = $nums[$key];\n    }\n    return $returnArray;\n\
    }", "  $total_order = [];\n  $index_order = [];\n  foreach ($nums as $index =>\
    \ $num) {\n    $order = 0;\n    $n = abs($num);\n    while ($n) {\n      $order\
    \ += $n % 10;\n      $n = (int)($n / 10);\n    }\n    $total_order[] = $order;\n\
    \    $index_order[] = $index;\n  }\n  array_multisort($total_order, SORT_ASC,\
    \ SORT_NUMERIC, $index_order, SORT_ASC, SORT_NUMERIC);\n  $sorted = [];\n  foreach\
    \ ($index_order as $index) {\n    $sorted[] = $nums[$index];\n  }\n  return $sorted;\n\
    }", "    $sums = array();\n    $result = array();\n    foreach ($nums as $num)\
    \ {\n        $sum = 0;\n        $current = $num;\n        if ($num < 0) {\n  \
    \          $current = $num * -1;\n        }\n        while ($current > 0) {\n\
    \            $sum += $current % 10;\n            $current = floor($current / 10);\n\
    \        }\n        if ($num < 0) {\n            $sum *= -1;\n        }\n    \
    \    $sums[$num] = $sum;\n    }\n    asort($sums);\n    foreach ($sums as $num\
    \ => $sum) {\n        $result[] = $num;\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
