name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given array of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11,\
  \ -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\n\
  function order_by_points($nums) {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t// enter your code here.\n}", "    $sum = [];\n    $res = [];\n \
    \   foreach ($nums as $key => $val) {\n        $sum[$key] = sum_of_digits($val);\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $val) {\n        $res[]\
    \ = $nums[$key];\n    }\n    return $res;\n}\n", "\t$nums_with_points = array();\n\
    \t$sum_of_digits = 0;\n\t$sum_of_digits_array = array();\n\tforeach ($nums as\
    \ $num_key => $num) {\n\t\t$sum_of_digits = 0;\n\t\tif($num > 0) {\n\t\t\t$sum_of_digits\
    \ = array_sum(str_split($num));\n\t\t}\n\t\telse {\n\t\t\t$sum_of_digits = array_sum(str_split($num\
    \ * -1));\n\t\t}\n\t\t$nums_with_points[$num_key] = array(\n\t\t\t\"points\" =>\
    \ $sum_of_digits,\n\t\t\t\"number\" => $num\n\t\t);\n\t\t$sum_of_digits_array[]\
    \ = $sum_of_digits;\n\t}\n\tasort($sum_of_digits_array);\n\t$sorted_nums = array();\n\
    \tforeach ($sum_of_digits_array as $key => $value) {\n\t\tforeach ($nums_with_points\
    \ as $num_key => $num) {\n\t\t\tif($value == $num[\"points\"]) {\n\t\t\t\t$sorted_nums[]\
    \ = $num[\"number\"];\n\t\t\t\tunset($nums_with_points[$num_key]);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $sorted_nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "\t$m = array();\n\tforeach ($nums as $index => $num)\
    \ {\n\t\t$m[$index] = array_sum(str_split($num));\n\t}\n\tasort($m);\n\t$output\
    \ = array();\n\tforeach (array_keys($m) as $index) {\n\t\t$output[] = $nums[$index];\n\
    \t}\n\treturn $output;\n}\necho implode(', ', order_by_points(array(1, 11, -1,\
    \ -11, -12))), \"\\n\";", "    $sum = array();\n    foreach ($nums as $key =>\
    \ $value) {\n        $sum[$key] = $value;\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\nprint_r(order_by_points(array()));", "\tif (!empty($nums)) {\n\t\t\
    foreach ($nums as $key => $value) {\n\t\t\t$arr[] = [$key, sum_digits($value)];\n\
    \t\t}\n\t\tsort($arr);\n\t\t$new_arr = [];\n\t\tforeach ($arr as $key => $value)\
    \ {\n\t\t\t$new_arr[] = $nums[$value[0]];\n\t\t}\n\t\treturn $new_arr;\n\t} else\
    \ {\n\t\treturn [];\n\t}\n}\n", "    if (empty($nums)) {\n        return $nums;\n\
    \    }\n    $sum = array();\n    foreach ($nums as $key => $num) {\n        $sum[$key]\
    \ = array_sum(str_split($num));\n    }\n    array_multisort($sum, SORT_ASC, $nums);\n\
    \    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    for ($i = 0; $i < count($nums); $i++) {\n        $nums[$i] = [$nums[$i], array_sum(str_split($nums[$i]))];\n\
    \    }\n    array_multisort(array_column($nums, 1), SORT_ASC, $nums);\n    return\
    \ array_column($nums, 0);\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    echo '<br>';\nprint_r(order_by_points(array()));\n", "  $arr = array();\n  foreach\
    \ ($nums as $key => $value) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($value);\
    \ $i++) {\n      $sum += intval($value[$i]);\n    }\n    $arr[$key] = $sum;\n\
    \  }\n  array_multisort($arr, $nums);\n  return $nums;\n}\necho '<pre>';\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\necho '</pre>';", "    $sums = array();\n    foreach ($nums\
    \ as $index => $num) {\n        $sums[$index] = sum_of_digits($num);\n    }\n\
    \    asort($sums);\n    $sorted = array();\n    foreach ($sums as $index => $num)\
    \ {\n        $sorted[] = $nums[$index];\n    }\n    return $sorted;\n}", "  if\
    \ (!$nums) {\n    return $nums;\n  }\n  $sum_nums = [];\n  foreach ($nums as $key\
    \ => $num) {\n    $sum_nums[$key] = array_sum(str_split($num));\n  }\n  array_multisort($sum_nums,\
    \ SORT_ASC, $nums);\n  return $nums;\n}\n", "    $nums_count = count($nums);\n\
    \    if ($nums_count <= 1) {\n        return $nums;\n    }\n    $buckets = [];\n\
    \    $min_sum = -1;\n    $max_sum = -1;\n    for ($i = 0; $i < $nums_count; $i++)\
    \ {\n        $num = $nums[$i];\n        $digits = [];\n        $digit_sum = 0;\n\
    \        if ($num < 0) {\n            $num = -$num;\n        }\n        while\
    \ ($num > 0) {\n            $digit = $num % 10;\n            $num = floor($num\
    \ / 10);\n            $digits[] = $digit;\n            $digit_sum += $digit;\n\
    \        }\n        if ($min_sum == -1 || $digit_sum < $min_sum) {\n         \
    \   $min_sum = $digit_sum;\n        }\n        if ($max_sum == -1 || $digit_sum\
    \ > $max_sum) {\n            $max_sum = $digit_sum;\n        }\n        if (!array_key_exists($digit_sum,\
    \ $buckets)) {\n            $buckets[$digit_sum] = [];\n        }\n        $buckets[$digit_sum][]\
    \ = $i;\n    }\n    $result = [];\n    for ($sum = $min_sum; $sum <= $max_sum;\
    \ $sum++) {\n        if (!array_key_exists($sum, $buckets)) {\n            continue;\n\
    \        }\n        $positions = $buckets[$sum];\n        foreach ($positions\
    \ as $position) {\n            $result[] = $nums[$position];\n        }\n    }\n\
    \    return $result;\n}\n\nif (sizeof($argv) > 1) {\n    $nums = [];\n    for\
    \ ($i = 1; $i < sizeof($argv); $i++) {\n        $nums[] = intval($argv[$i]);\n\
    \    }\n    echo json_encode(order_by_points($nums)) . \"\\n\";\n}", "    if (empty($nums))\
    \ {\n        return $nums;\n    }\n    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $result[$key] = array_sum(str_split(abs($num)));\n    }\n\
    \    asort($result);\n    $order_nums = [];\n    foreach ($result as $key => $val)\
    \ {\n        $order_nums[] = $nums[$key];\n    }\n    return $order_nums;\n}\n\
    \n$a = order_by_points(array(1, 11, -1, -11, -12));\nprint_r($a);\n", "  // your\
    \ code goes here\n}", "\t$sum = 0;\n\t$result = [];\n\tforeach ($nums as $key\
    \ => $value) {\n\t\t// sum the digits of each number\n\t\t$number_array = str_split($value);\n\
    \t\t$sum = array_sum($number_array);\n\t\t// store the sum of the current number\
    \ in the result array\n\t\t// under the key $key\n\t\t$result[$key] = $sum;\n\t\
    }\n\t// sort the result array\n\tasort($result);\n\t// store the results array\
    \ as the key in a temporary array\n\t$new_result = [];\n\tforeach ($result as\
    \ $key => $value) {\n\t\t$new_result[$key] = $nums[$key];\n\t}\n\t// sort the\
    \ temporary array\n\tasort($new_result);\n\t// store the results from the temporary\
    \ array in the original array\n\t$i = 0;\n\tforeach ($new_result as $key => $value)\
    \ {\n\t\t$nums[$i] = $value;\n\t\t$i++;\n\t}\n\treturn $nums;\n}\necho implode(',\
    \ ', order_by_points(array(1, 11, -1, -11, -12)));\necho \"\\n\";\necho implode(',\
    \ ', order_by_points(array()));\necho \"\\n\";\necho implode(', ', order_by_points(array(1,\
    \ 99, -1, -99, -12)));\necho \"\\n\";", "    return array();\n}\n\necho \"order_by_points(array(1,\
    \ 11, -1, -11, -12)) should return [(-1, -11, 1, -12, 11)]<br/>\";\necho \"order_by_points(array(1,\
    \ 11, -1, -11, -12)) returns : \";\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\necho \"<br/>\";\necho \"order_by_points(array()) should return array()<br/>\"\
    ;\necho \"order_by_points(array()) returns : \";\nprint_r(order_by_points(array()));\n\
    echo \"<br/>\";", "  $points_sum = array();\n  foreach ($nums as $key => $value)\
    \ {\n    $points_sum[$key] = $value;\n    while($value != 0) {\n      $points_sum[$key]\
    \ += $value % 10;\n      $value = floor($value / 10);\n    }\n  }\n  asort($points_sum);\n\
    \  foreach ($points_sum as $key => $value) {\n    $result[] = $nums[$key];\n \
    \ }\n  return $result;\n}\n", "    $nums_as_string = array_map('strval', $nums);\n\
    \    $sum_of_digits = array_map('sum_of_digits', $nums_as_string);\n    array_multisort($sum_of_digits,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $point_map = array();\n   \
    \ foreach ($nums as $index => $num) {\n        $point_map[$index] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($point_map, $nums);\n    return $nums;\n}\n$nums =\
    \ array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "\t$nums_sum\
    \ = array();\n\tif (!empty($nums)) {\n\t\tforeach ($nums as $key => $value) {\n\
    \t\t\t$nums_sum[$key] = array_sum(str_split($value));\n\t\t}\n\t\tarray_multisort($nums_sum,\
    \ SORT_ASC, $nums);\n\t}\n\treturn $nums;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
