language: php
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $length = strlen($text);\n    for ($i\
    \ = 0; $i < $length / 2; $i++) {\n        if ($text[$i] != $text[$length - $i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    echo is_palindrome(\"abba\") ? \"true\" : \"false\";\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true'
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif (strlen($text) == 0) {\n\t\treturn true;\n\t}\n\tif (strlen($text) ==\
    \ 1) {\n\t\treturn true;\n\t}\n\tif (strlen($text) == 2) {\n\t\tif ($text[0] ==\
    \ $text[1]) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($text[0] == $text[strlen($text) - 1]) {\n\t\treturn is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n\t} else {\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$reversed = strrev($text);\n\treturn ($text == $reversed);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/', '',\
    \ $text);\n    $length = strlen($text);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        if ($text[$i] != $text[$length - $i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // your solution here\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg25106ny.php:20\n\
    Stack trace:\n#0 /tmp/tmpg25106ny.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg25106ny.php\
    \ on line 20\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text=strtolower($text);\n\t$text=str_replace(\" \",\"\",$text);\n\t$reversed=strrev($text);\n\
    \tif($text==$reversed) {\n\t\techo \"True\";\n\t} else {\n\t\techo \"False\";\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "True\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jzc9f2h.php:27\n\
    Stack trace:\n#0 /tmp/tmp9jzc9f2h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9jzc9f2h.php\
    \ on line 27\n"
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\tfor ($i = 0; $i < $length / 2; $i++) {\n\t\t\
    if ($text[$i] != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\t$i = 0;\n\twhile ($i < $length) {\n\t\tif ($text[$i]\
    \ != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t\t$i++;\n\t}\n\t\
    return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) <= 1)\n        return true;\n    if ($text[0] !== $text[strlen($text)\
    \ - 1])\n        return false;\n    return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $right = strlen($text) - 1;\n    $left = 0;\n    while ($left < $right)\
    \ {\n        if ($text[$left] != $text[$right]) {\n            return false;\n\
    \        }\n        $left++;\n        $right--;\n    }\n    return true;\n}\n\n\
    echo is_palindrome(\"aba\") . PHP_EOL;\necho is_palindrome(\"aaaaa\") . PHP_EOL;\n\
    echo is_palindrome(\"zbcd\") . PHP_EOL;\n\nfunction candidate(...$args) {\n  \
    \  return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    1


    '
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/', '',\
    \ $text);\n    $reverse = strrev($text);\n    return $text == $reverse;\n}\n\n\
    function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $reversed = reverse($text);\n    if ($reversed == $text) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function reverse() in\
    \ /tmp/tmpgqi4b3bl.php:12\nStack trace:\n#0 /tmp/tmpgqi4b3bl.php(21): is_palindrome('')\n\
    #1 /tmp/tmpgqi4b3bl.php(25): candidate('')\n#2 /tmp/tmpgqi4b3bl.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgqi4b3bl.php on line 12\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // YOUR CODE HERE\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw6qtnzr9.php:19\n\
    Stack trace:\n#0 /tmp/tmpw6qtnzr9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpw6qtnzr9.php\
    \ on line 19\n"
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $len = strlen($text);\n    $midpoint\
    \ = floor($len / 2);\n    for ($i = 0; $i < $midpoint; $i++) {\n        if ($text[$i]\
    \ != $text[$len - 1 - $i]) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (empty($text)) {\n        return true;\n    }\n    else {\n      \
    \  $length = strlen($text);\n        if ($length % 2 == 0) {\n            $left\
    \ = substr($text, 0, ($length / 2));\n            $right = substr($text, -($length\
    \ / 2));\n        }\n        else {\n            $left = substr($text, 0, floor($length\
    \ / 2));\n            $right = substr($text, -(floor($length / 2)));\n       \
    \ }\n        $left_rev = strrev($left);\n        if ($left_rev == $right) {\n\
    \            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif ($text == strrev($text)) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t\n\t$str_length = strlen($text);\n\t$str_length_half = floor($str_length\
    \ / 2);\n\t$str_rev = strrev($text);\n\t\n\tfor ($i = 0; $i < $str_length_half;\
    \ $i++) {\n\t\tif ($text[$i] != $str_rev[$i]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\t\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $array = str_split($text);\n    $size\
    \ = count($array);\n    $i = 0;\n    $match = true;\n    while ($i < $size/2)\
    \ {\n        if ($array[$i] !== $array[$size-$i-1]) {\n            $match = false;\n\
    \            break;\n        }\n        $i++;\n    }\n    return $match;\n}\n\n\
    function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text = strtolower($text);\n  $text = str_replace(' ', '', $text);\n  $text\
    \ = str_replace('\"', '', $text);\n  $text = str_replace('\\'', '', $text);\n\
    \  $text = str_replace('-', '', $text);\n  $text = str_replace('?', '', $text);\n\
    \  $text = str_replace('!', '', $text);\n  $text = str_replace('.', '', $text);\n\
    \  $text = str_replace(',', '', $text);\n  $text = str_replace(';', '', $text);\n\
    \  $text = str_replace(':', '', $text);\n  $text = str_replace('(', '', $text);\n\
    \  $text = str_replace(')', '', $text);\n  $text = str_replace('[', '', $text);\n\
    \  $text = str_replace(']', '', $text);\n  $text = str_replace('_', '', $text);\n\
    \  $text = str_replace('=', '', $text);\n  $text = str_replace('+', '', $text);\n\
    \  $text = str_replace('$', '', $text);\n  $text = str_replace('%', '', $text);\n\
    \  $text = str_replace('&', '', $text);\n  $text = str_replace('*', '', $text);\n\
    \  $text = str_replace('<', '', $text);\n  $text = str_replace('>', '', $text);\n\
    \  $text = str_replace('@', '', $text);\n  $text = str_replace('#', '', $text);\n\
    \  $text = str_replace('/', '', $text);\n  $text = str_replace('\\\\', '', $text);\n\
    \  $text = str_replace('|', '', $text);\n  $text = str_replace('`', '', $text);\n\
    \  $text = str_replace('~', '', $text);\n  $text = str_replace('^', '', $text);\n\
    \  $text =\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp_bhfqy0_.php on line 45

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\tfor ($i = 0; $i < $length / 2; $i++) {\n\t\t\
    if ($text[$i] != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n\nif (!debug_backtrace()) {\n\t$test_string_list = array(\"\
    \", \"aba\", \"aaaaa\", \"zbcd\");\n\tfor ($i = 0; $i < count($test_string_list);\
    \ $i++) {\n\t\techo(\">>> is_palindrome(\\\"\" . $test_string_list[$i] . \"\\\"\
    )\\n\");\n\t\tif (is_palindrome($test_string_list[$i])) {\n\t\t\techo(\"true\\\
    n\");\n\t\t} else {\n\t\t\techo(\"false\\n\");\n\t\t}\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '>>> is_palindrome("")

    true

    >>> is_palindrome("aba")

    true

    >>> is_palindrome("aaaaa")

    true

    >>> is_palindrome("zbcd")

    false

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\treturn $text == strrev($text);\n}\n\nassert(true == is_palindrome(\"\"\
    ));\nassert(true == is_palindrome(\"aba\"));\nassert(true == is_palindrome(\"\
    aaaaa\"));\nassert(false == is_palindrome(\"zbcd\"));\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text = preg_replace('/[^a-zA-Z]/', '', $text);\n  $text = strtolower($text);\n\
    \  $len = strlen($text);\n  for ($i = 0; $i < $len / 2; $i++) {\n    if ($text[$i]\
    \ != $text[$len - $i - 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $filtered = str_replace(array('.', ' ', ','), \"\", $text);\n  $reversed\
    \ = strrev($filtered);\n  if (strcasecmp($filtered, $reversed) == 0) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $len = strlen($text);\n    $half = floor($len\
    \ / 2);\n    for ($i = 0; $i < $half; $i++) {\n        if ($text[$i] != $text[$len\
    \ - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return strrev($text) == $text;\n}\n\necho is_palindrome('') . \"\\n\"\
    ;\necho is_palindrome('aba') . \"\\n\";\necho is_palindrome('aaaaa') . \"\\n\"\
    ;\necho is_palindrome('zbcd') . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    1

    1


    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$length = strlen($text);\n\tfor ($i = 0;\
    \ $i < $length; $i++) {\n\t\tif ($text[$i] != $text[$length - $i - 1]) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text_length = strlen($text);\n    $reverse_text = strrev($text);\n \
    \   if ($text_length == 0) {\n        return true;\n    } elseif ($text_length\
    \ == 1) {\n        return true;\n    } elseif ($text_length == 2) {\n        if\
    \ ($text == $reverse_text) {\n            return true;\n        } else {\n   \
    \         return false;\n        }\n    } else {\n        if ($text == $reverse_text)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    }\n}\n$text = \"abaa\";\necho is_palindrome($text);\necho \"<br>\"\
    ;\necho \"<br>\";\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: <br><br>
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/', '',\
    \ $text);\n    return $text == strrev($text);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$i = 0;\n\t$j = strlen($text) - 1;\n\twhile ($i < $j) {\n\t\tif ($text[$i]\
    \ !== $text[$j]) {\n\t\t\treturn false;\n\t\t}\n\t\t$i++;\n\t\t$j--;\n\t}\n\t\
    return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $length = strlen($text);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        if ($text[$i] != $text[$length - $i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppp41mxl9.php:20\n\
    Stack trace:\n#0 /tmp/tmppp41mxl9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppp41mxl9.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif (strlen($text) <= 1) {\n\t\treturn true;\n\t}\n\tif ($text[0] == $text[strlen($text)\
    \ - 1]) {\n\t\treturn is_palindrome(substr($text, 1, strlen($text) - 2));\n\t\
    }\n\treturn false;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$new = '';\n\tfor ($i = 0; $i < strlen($text);\
    \ $i++) {\n\t\tif (preg_match('/[a-z]/', $text[$i])) {\n\t\t\t$new .= $text[$i];\n\
    \t\t}\n\t}\n\t$text = $new;\n\t$length = strlen($text);\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\tif ($text[$i] !== $text[$length - $i - 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // $text = trim($text);\n  if (empty($text)) {\n    return true;\n  }\n\
    \  elseif (strlen($text) == 1) {\n    return true;\n  }\n  elseif (substr($text,\
    \ 0, 1) == substr($text, strlen($text) - 1, 1)) {\n    return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n  }\n  else {\n    return false;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $p = 0;\n    $q = strlen($text) - 1;\n    while ($p < $q) {\n       \
    \ if ($text[$p] != $text[$q]) {\n            return false;\n        }\n      \
    \  $p++;\n        $q--;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if ($text == '') {\n    return true;\n  }\n  if (strlen($text) == 1) {\n\
    \    return true;\n  }\n\n  $middle = strlen($text) / 2;\n  $half1 = substr($text,\
    \ 0, $middle);\n  $half2 = substr($text, -$middle);\n  $half2 = strrev($half2);\n\
    \n  if ($half1 == $half2) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 20


    Deprecated: Implicit conversion from float -1.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 21


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 20


    Deprecated: Implicit conversion from float -2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 21


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 20


    Deprecated: Implicit conversion from float -2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 21


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 20


    Deprecated: Implicit conversion from float -2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 21


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 20


    Deprecated: Implicit conversion from float -2.5 to int loses precision in /tmp/tmptpt6h7kt.php
    on line 21

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif ($text === strrev($text)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if ($text == strrev($text)) {\n    return \"true\";\n  } else {\n    return\
    \ \"false\";\n  }\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6yygw5ae.php:24\n\
    Stack trace:\n#0 /tmp/tmp6yygw5ae.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6yygw5ae.php\
    \ on line 24\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return strrev($text) == $text;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($text[$i] != $text[$len - $i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif ($text == \"\") {\n\t\treturn true;\n\t}\n\tif (strlen($text) % 2 ==\
    \ 0) {\n\t\t$text2 = strrev($text);\n\t\tif ($text == $text2) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\t$text2\
    \ = strrev($text);\n\t\tif ($text == $text2) {\n\t\t\treturn true;\n\t\t}\n\t\t\
    else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t// TODO: implement this function\n}\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3erca_5k.php:19\n\
    Stack trace:\n#0 /tmp/tmp3erca_5k.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3erca_5k.php\
    \ on line 19\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$max = strlen($text);\n\t$half = (int) ($max / 2);\n\t\n\tfor ($i = 0;\
    \ $i < $half; $i++) {\n\t\tif ($text[$i] != $text[$max - $i - 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\necho \"is_palindrome(\\\"\\\")\
    \ is \" . (is_palindrome(\"\") ? \"true\" : \"false\") . \"\\n\";\necho \"is_palindrome(\\\
    \"aba\\\") is \" . (is_palindrome(\"aba\") ? \"true\" : \"false\") . \"\\n\";\n\
    echo \"is_palindrome(\\\"aaaaa\\\") is \" . (is_palindrome(\"aaaaa\") ? \"true\"\
    \ : \"false\") . \"\\n\";\necho \"is_palindrome(\\\"zbcd\\\") is \" . (is_palindrome(\"\
    zbcd\") ? \"true\" : \"false\") . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'is_palindrome("") is true

    is_palindrome("aba") is true

    is_palindrome("aaaaa") is true

    is_palindrome("zbcd") is false

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) < 2) {\n        return true;\n    } else {\n      \
    \  if ($text[0] == $text[strlen($text) - 1]) {\n            return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n        } else {\n            return false;\n     \
    \   }\n    }\n}\n\necho is_palindrome(\"\"); // true\necho is_palindrome(\"aba\"\
    ); // true\necho is_palindrome(\"aaaaa\"); // true\necho is_palindrome(\"zbcd\"\
    ); // false\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '111'
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text_reverse = strrev($text);\n    return $text === $text_reverse;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$strlen = strlen($text);\n\tfor ($i = 0;\
    \ $i < $strlen / 2; $i++) {\n\t\tif ($text[$i] != $text[$strlen - $i - 1]) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $result = false;\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $text);\n    $reverse_text = strrev($text);\n    if ($text == $reverse_text)\
    \ {\n        $result = true;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text_length = strlen($text);\n    for ($i = 0; $i < $text_length; $i++)\
    \ {\n        if ($text[$i] != $text[$text_length - $i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $length = strlen($text);\n    if ($length < 2) {\n        return true;\n\
    \    } else {\n        return $text[0] == $text[$length - 1] && is_palindrome(substr($text,\
    \ 1, $length - 2));\n    }\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // base case: empty string\n  if ($text == \"\") {\n    return true;\n\
    \  }\n  // gets the first and last character\n  $first = $text[0];\n  $last =\
    \ $text[strlen($text) - 1];\n  // if first and last character are the same, return\
    \ \n  // is_palindrome on the string minus the first and last\n  // character\n\
    \  if ($first == $last) {\n    return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n  }\n  return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $reversed = strrev($text);\n    return $text == $reversed;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) <= 1) {\n        return true;\n    }\n    if ($text[0]\
    \ != $text[strlen($text) - 1]) {\n        return false;\n    }\n    return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$l = strlen($text);\n\tif ($l == 0) {\n\t\treturn true;\n\t} else if ($l\
    \ == 1) {\n\t\treturn true;\n\t} else {\n\t\tif ($text[0] == $text[$l-1]) {\n\t\
    \t\treturn is_palindrome(substr($text, 1, $l-2));\n\t\t} else {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (empty($text)) {\n    return true;\n  }\n  if (ord($text[0]) != ord($text[strlen($text)\
    \ - 1])) {\n    return false;\n  }\n  return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}\n\necho is_palindrome(\"\") . \"\\n\";\necho is_palindrome(\"aba\"\
    ) . \"\\n\";\necho is_palindrome(\"aaaaa\") . \"\\n\";\necho is_palindrome(\"\
    zbcd\") . \"\\n\";\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    1

    1


    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // If a string is less than 2 characters, it's always a palindrome\n\
    \    if (strlen($text) < 2) {\n        return true;\n    }\n    // Same as a[0]\
    \ or a.charAt(0)\n    $first_char = $text[0];\n    // Same as a[a.length - 1]\
    \ or a.charAt(a.length - 1)\n    $last_char = $text[strlen($text) - 1];\n    //\
    \ If the first and last char are different, it's not a palindrome\n    if ($first_char\
    \ != $last_char) {\n        return false;\n    }\n    // Otherwise, we strip the\
    \ first and last characters and\n    // check if the remaining string is a palindrome\n\
    \    return is_palindrome(substr($text, 1, strlen($text) - 2));\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text1 = str_split($text);\n\t$text2 = str_split(strrev($text));\n\t$array\
    \ = array_intersect_assoc($text1, $text2);\n\tif (count($array) == strlen($text))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcud038qs.php:27\n\
    Stack trace:\n#0 /tmp/tmpcud038qs.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcud038qs.php\
    \ on line 27\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $length = strlen($text);\n    for ($i = 0; $i < $length / 2; $i++) {\n\
    \        if ($text[$i] != $text[$length - $i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$rev = strrev($text);\n\tif($text == $rev) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // Write your code here\n  // To print results to the standard output you\
    \ can use print\n  // Example: print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtwo55z8.php:21\n\
    Stack trace:\n#0 /tmp/tmpvtwo55z8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvtwo55z8.php\
    \ on line 21\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $reverse_text = strrev($text);\n    if ($text == $reverse_text) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (strlen($text) < 2) {\n    return true;\n  }\n  if ($text[0] != $text[strlen($text)\
    \ - 1]) {\n    return false;\n  }\n  return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (empty($text)) {\n        return true;\n    } else {\n        if ($text[0]\
    \ == $text[strlen($text) - 1]) {\n            return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n        } else {\n            return false;\n     \
    \   }\n    }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif (empty($text)) {\n\t\treturn true;\n\t} else {\n\t\t$length = strlen($text);\n\
    \t\tif (substr($text, 0, 1) === substr($text, $length - 1, 1)) {\n\t\t\treturn\
    \ is_palindrome(substr($text, 1, $length - 2));\n\t\t} else {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text_len = strlen($text);\n\t$half_len = $text_len / 2;\n\tfor ($i = 0;\
    \ $i < $half_len; $i++) {\n\t\tif ($text[$i] != $text[$text_len - $i - 1]) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\necho is_palindrome(\"\"\
    );\necho is_palindrome(\"aba\");\necho is_palindrome(\"aaaaa\");\necho is_palindrome(\"\
    zbcd\");\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '111'
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text = strtolower($text);\n  $len = strlen($text);\n  $half = floor($len\
    \ / 2);\n  for ($i = 0; $i < $half; $i++) {\n    if ($text[$i] != $text[$len -\
    \ $i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $i = 0;\n    $j = strlen($text) - 1;\n    $s = $text;\n    while($i <\
    \ $j) {\n        if ($s[$i] != $s[$j]) {\n            return false;\n        }\n\
    \        $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif (strlen($text) < 2) {\n\t\treturn true;\n\t}\n\tif ($text[0] != $text[strlen($text)\
    \ - 1]) {\n\t\treturn false;\n\t}\n\treturn is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufrtbbwn.php:19\n\
    Stack trace:\n#0 /tmp/tmpufrtbbwn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpufrtbbwn.php\
    \ on line 19\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    if($len == 0) {\n        return true;\n  \
    \  } else {\n        $end = $len - 1;\n        $start = 0;\n        while($start\
    \ < $end) {\n            if($text[$start] != $text[$end]) {\n                return\
    \ false;\n            }\n            $start++;\n            $end--;\n        }\n\
    \        return true;\n    }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text_len = strlen($text);\n  for ($i = 0; $i < $text_len; $i++) {\n  \
    \  if ($text[$i] != $text[$text_len - $i - 1]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $strLen = strlen($text);\n  for ($i = 0; $i < $strLen / 2; $i++) {\n  \
    \  if ($text[$i] != $text[$strLen - $i - 1]) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (strlen($text) > 1) {\n    $first = substr($text, 0, 1);\n    $last\
    \ = substr($text, -1);\n    $text = substr($text, 1, -1);\n    return ($first\
    \ == $last && is_palindrome($text));\n  }\n  return true;\n}\n\n$in = stream_get_line(STDIN,\
    \ 1024, PHP_EOL);\nif (is_palindrome($in)) {\n  echo \"true\" . PHP_EOL;\n} else\
    \ {\n  echo \"false\" . PHP_EOL;\n}\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text_len = strlen($text);\n    $is_palindrome = true;\n    for ($i =\
    \ 0; $i < $text_len; $i++) {\n        if ($text[$i] != $text[$text_len - $i -\
    \ 1]) {\n            $is_palindrome = false;\n            break;\n        }\n\
    \    }\n    return $is_palindrome;\n}\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text_length = strlen($text);\n  $current_index = 0;\n  $is_palindrome\
    \ = true;\n  while ($current_index < $text_length / 2) {\n    if ($text[$current_index]\
    \ != $text[$text_length - 1 - $current_index]) {\n      $is_palindrome = false;\n\
    \      break;\n    }\n    $current_index++;\n  }\n  return $is_palindrome;\n}\n\
    \necho is_palindrome(\"\") . \"\\n\";\necho is_palindrome(\"aba\") . \"\\n\";\n\
    echo is_palindrome(\"aaaaa\") . \"\\n\";\necho is_palindrome(\"zbcd\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    1

    1


    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $length = strlen($text);\n  for ($i = 0; $i < $length / 2; $i++) {\n  \
    \  if ($text[$i] != $text[$length - $i - 1])\n      return false;\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $rev = strrev($text);\n    if($text == $rev) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return $text == strrev($text);\n}\n\nvar_dump(is_palindrome(\"\"));\nvar_dump(is_palindrome(\"\
    aba\"));\nvar_dump(is_palindrome(\"aaaaa\"));\nvar_dump(is_palindrome(\"zbcd\"\
    ));\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)

    bool(true)

    bool(true)

    bool(false)

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text = strtolower($text);\n  $text_len = strlen($text);\n  for ($i = 0;\
    \ $i < ceil($text_len / 2); $i++) {\n    if ($text[$i] != $text[$text_len - $i\
    \ - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if ($text === '') {\n        return true;\n    }\n    $is_palindrome\
    \ = true;\n    $text = strtolower($text);\n    $len = strlen($text);\n    for\
    \ ($i = 0; $i < $len / 2; $i++) {\n        if ($text[$i] !== $text[$len - $i -\
    \ 1]) {\n            $is_palindrome = false;\n            break;\n        }\n\
    \    }\n    return $is_palindrome;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\t$halfLength = intval($length / 2);\n\tfor ($i\
    \ = 0; $i < $halfLength; $i++) {\n\t\tif ($text[$i] != $text[$length - $i - 1])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_palindrome(\"\
    \") . \"\\n\";\necho is_palindrome(\"aba\") . \"\\n\";\necho is_palindrome(\"\
    aaaaa\") . \"\\n\";\necho is_palindrome(\"zbcd\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    1

    1


    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\tif ($length <= 1) {\n\t\treturn true;\n\t}\
    \ else {\n\t\t$half = floor($length / 2);\n\t\t$front = substr($text, 0, $half);\n\
    \t\t$back = substr($text, -$half);\n\t\treturn $front == strrev($back);\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text_len = strlen($text);\n    $is_palindrome = true;\n    for ($i =\
    \ 0; $i < $text_len / 2; $i++) {\n        if ($text[$i] != $text[$text_len - $i\
    \ - 1]) {\n            $is_palindrome = false;\n            break;\n        }\n\
    \    }\n    return $is_palindrome;\n}\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // return true;\n    // your solution here\n    if(strlen($text) <= 1)\
    \ return true;\n    if($text[0] != $text[strlen($text)-1]) return false;\n   \
    \ return is_palindrome(substr($text, 1, strlen($text)-2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $length = strlen($text);\n    for ($i = 0; $i < $length / 2; $i++) {\n\
    \        if ($text[$i] != $text[$length - $i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return $text == strrev($text);\n}\n\nif (is_palindrome(\"\")) {\n  echo\
    \ \"true\";\n} else {\n  echo \"false\";\n}\n\nif (is_palindrome(\"aba\")) {\n\
    \  echo \"true\";\n} else {\n  echo \"false\";\n}\n\nif (is_palindrome(\"aaaaa\"\
    )) {\n  echo \"true\";\n} else {\n  echo \"false\";\n}\n\nif (is_palindrome(\"\
    zbcd\")) {\n  echo \"true\";\n} else {\n  echo \"false\";\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: truetruetruefalse
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = trim($text);\n\t$text_length = strlen($text);\n\tfor ($i = 0; $i\
    \ < $text_length / 2; $i++) {\n\t\tif ($text[$i] != $text[$text_length - $i -\
    \ 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $text);\n    $text1 = strrev($text);\n    if ($text == $text1) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $reversed = strrev($text);\n    return $text == $reversed;\n}\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $new = str_split($text);\n  for ($i = 0; $i < sizeof($new); $i++) {\n \
    \   if ($new[$i] != $new[sizeof($new) - $i - 1]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$result = false;\n\tif (empty($text)) {\n\t\t$result = true;\n\t} else\
    \ {\n\t\t$n = strlen($text);\n\t\t$i = 0;\n\t\t$j = $n - 1;\n\t\twhile ($i < $j)\
    \ {\n\t\t\tif ($text[$i] == $text[$j]) {\n\t\t\t\t$i++;\n\t\t\t\t$j--;\n\t\t\t\
    } else {\n\t\t\t\t$i = $n;\n\t\t\t}\n\t\t}\n\t\tif ($i == $j || $i == $j + 1)\
    \ {\n\t\t\t$result = true;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4eym1byn.php:41\n\
    Stack trace:\n#0 /tmp/tmp4eym1byn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4eym1byn.php\
    \ on line 41\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    if ($len <= 1) {\n        return true;\n \
    \   }\n    return ($text[0] == $text[$len - 1]) && is_palindrome(substr($text,\
    \ 1, $len - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$rev = strrev($text);\n\tif($text == $rev) {\n\t\techo \"true\\n\";\n\t\
    } else {\n\t\techo \"false\\n\";\n\t}\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m5pe_m8.php:25\n\
    Stack trace:\n#0 /tmp/tmp_m5pe_m8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_m5pe_m8.php\
    \ on line 25\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $textLength = strlen($text);\n    $textMiddle\
    \ = (int) $textLength / 2;\n    $lengthEven = $textLength % 2 == 0;\n    for ($i\
    \ = 0; $i < $textMiddle; $i++) {\n        if ($text[$i] != $text[$textLength -\
    \ 1 - $i]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_palindrome(\"aba\") ? \"YES\\n\" : \"NO\\n\";\necho is_palindrome(\"\
    zbcd\") ? \"YES\\n\" : \"NO\\n\";\necho is_palindrome(\"\") ? \"YES\\n\" : \"\
    NO\\n\";\necho is_palindrome(\"aaaaa\") ? \"YES\\n\" : \"NO\\n\";\necho is_palindrome(\"\
    abbab\") ? \"YES\\n\" : \"NO\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'YES

    NO

    YES

    YES

    NO

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // $text = \"This is not a palindrome\";\n    $textlength = strlen($text);\n\
    \    if($textlength % 2 == 0) {\n        for($i = 0; $i < $textlength/2; $i++)\
    \ {\n            if($text[$i] != $text[$textlength - $i - 1]) {\n            \
    \    return false;\n            }\n        }\n    } else {\n        for($i = 0;\
    \ $i < ($textlength-1)/2; $i++) {\n            if($text[$i] != $text[$textlength\
    \ - $i - 1]) {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $lower_text = strtolower($text);\n    return strrev($lower_text) == $lower_text;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\treturn strrev($text) == $text;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) <= 1) {\n        return true;\n    }\n    if ($text[0]\
    \ != $text[strlen($text) - 1]) {\n        return false;\n    }\n    return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (strlen($text) == 0) {\n    return true;\n  } else {\n    $char = $text[0];\n\
    \    $end = strlen($text) - 1;\n    if ($char != $text[$end]) {\n      return\
    \ false;\n    } else {\n      return is_palindrome(substr($text, 1, -1));\n  \
    \  }\n  }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (empty($text)) {\n        return true;\n    }\n    if (substr($text,\
    \ 0, 1) == substr($text, -1)) {\n        return is_palindrome(substr($text, 1,\
    \ -1));\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text_nospace = str_replace(' ', '', $text);\n\tif (strrev($text_nospace)\
    \ == $text_nospace) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (empty($text)) return true;\n  elseif (strlen($text) === 1) return true;\n\
    \  elseif (strlen($text) === 2) return ($text[0] === $text[1]);\n  elseif ($text[0]\
    \ !== $text[strlen($text) - 1]) return false;\n  else return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n}\n\necho is_palindrome(\"aba\") ? \"True\\n\" : \"\
    False\\n\";\necho is_palindrome(\"c\") ? \"True\\n\" : \"False\\n\";\necho is_palindrome(\"\
    \") ? \"True\\n\" : \"False\\n\";\necho is_palindrome(\"abba\") ? \"True\\n\"\
    \ : \"False\\n\";\necho is_palindrome(\"abcd\") ? \"True\\n\" : \"False\\n\";\n\
    echo is_palindrome(\"cbbd\") ? \"True\\n\" : \"False\\n\";\necho is_palindrome(\"\
    ab\") ? \"True\\n\" : \"False\\n\";\necho is_palindrome(\"bb\") ? \"True\\n\"\
    \ : \"False\\n\";\necho is_palindrome(\"aa\") ? \"True\\n\" : \"False\\n\";\n\
    function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'True

    True

    True

    True

    False

    False

    False

    True

    True

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return $text == strrev($text);\n}\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) == 0) {\n        return true;\n    }\n    $start =\
    \ 0;\n    $end = strlen($text) - 1;\n    while ($start < $end) {\n        if ($text[$start]\
    \ != $text[$end]) {\n            return false;\n        }\n        $start++;\n\
    \        $end--;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif (strlen($text) > 0 && strlen($text) <= 1000000) {\n\t\t$rev = strrev($text);\n\
    \t\tif ($text == $rev) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"\
    false\";\n\t\t}\n\t} else {\n\t\techo \"string is out of range\";\n\t}\n}\necho\
    \ is_palindrome(\"racec\");\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "falsestring is out of range\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7hhth53g.php:29\nStack trace:\n#0 /tmp/tmp7hhth53g.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7hhth53g.php on line 29\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (empty($text)) {\n    return true;\n  }\n  if (strlen($text) == 1) {\n\
    \    return true;\n  }\n  $half_length = ceil(strlen($text) / 2);\n  for ($i =\
    \ 0; $i < $half_length; $i++) {\n    if ($text[$i] != $text[strlen($text) - $i\
    \ - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$text = str_replace(\" \", \"\", $text);\n\
    \t$textlen = strlen($text);\n\tfor ($i = 0; $i < $textlen; $i++){\n\t\tif ($text[$i]\
    \ != $text[$textlen-1-$i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = preg_replace('/[^A-Za-z]/', '', $text); // Strip non alphabetic\
    \ chars\n\t$text = strtolower($text);\n\t$reverse = strrev($text);\n\treturn $text\
    \ == $reverse;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    $half = floor($len / 2);\n    for ($i = 0;\
    \ $i < $half; $i++) {\n        if ($text[$i] != $text[$len - $i - 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $length = strlen($text);\n    if($length == 0) {\n        return true;\n\
    \    }\n    for($i = 0; $i < $length; $i++) {\n        if($text[$i] != $text[$length\
    \ - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\tfor ($i = 0; $i < $length; $i++) {\n\t\tif\
    \ ($text[$i] != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return strrev($text) == $text;\n}\n$text = 'abba';\nif (is_palindrome($text))\
    \ {\n  echo \"Yes, it is.\";\n} else {\n  echo \"No, it is not.\";\n}\necho \"\
    <br>\";\necho \"<br>\";\necho \"<br>\";\n\nfunction candidate(...$args) {\n  \
    \  return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Yes, it is.<br><br><br>
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\treturn strrev($text) == $text;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $len = strlen($text);\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        if ($text[$i] != $text[$len - $i - 1]) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // TODO\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9355jte.php:20\n\
    Stack trace:\n#0 /tmp/tmps9355jte.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps9355jte.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text_len = strlen($text);\n    $rev_str = strrev($text);\n    if ($text\
    \ == $rev_str) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $length = strlen($text);\n    for ($i = 0; $i < ($length / 2); $i++)\
    \ {\n        if ($text[$i] != $text[$length - $i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$text = preg_replace('/[^a-zA-Z]/', '', $text);\n\
    \n\t$letters = preg_split('//', $text, -1, PREG_SPLIT_NO_EMPTY);\n\t$result =\
    \ true;\n\t$last_index = count($letters) - 1;\n\t$half_last_index = $last_index\
    \ / 2;\n\tfor ($i = 0; $i <= $half_last_index; $i++) {\n\t\tif ($letters[$i] !=\
    \ $letters[$last_index - $i]) {\n\t\t\t$result = false;\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text_length = strlen($text);\n  $i = 0;\n  $j = $text_length - 1;\n  while\
    \ ($i < $j) {\n    if ($text[$i] != $text[$j]) {\n      return false;\n    }\n\
    \    $i += 1;\n    $j -= 1;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return $text == strrev($text);\n}\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\treturn $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // \u0423\u0431\u0435\u0440\u0451\u043C \u043F\u0440\u043E\u0431\u0435\
    \u043B\u044B, \u0437\u0430\u043C\u0435\u043D\u0438\u043C \u0437\u0430\u0433\u043B\
    \u0430\u0432\u043D\u044B\u0435 \u0431\u0443\u043A\u0432\u044B \u043D\u0430 \u0441\
    \u0442\u0440\u043E\u0447\u043D\u044B\u0435, \u043F\u0440\u0438\u0432\u0435\u0434\
    \u0451\u043C \u043A \u043E\u0434\u043D\u043E\u043C\u0443 \u0440\u0435\u0433\u0438\
    \u0441\u0442\u0440\u0443\n    $text = preg_replace('/\\s+/', '', $text);\n   \
    \ $text = mb_strtolower($text);\n    $len = mb_strlen($text);\n    for ($i = 0;\
    \ $i < $len / 2; $i++) {\n        if ($text[$i] != $text[$len - $i - 1])\n   \
    \         return false;\n    }\n    return true;\n}\n\n$_100 = str_repeat('ab',\
    \ 50);\n$_101 = str_repeat('ab', 50);\n$_102 = str_repeat('ab', 50);\n$_103 =\
    \ str_repeat('ab', 50);\n$_104 = str_repeat('ab', 50);\n$_105 = str_repeat('ab',\
    \ 50);\n$_106 = str_repeat('ab', 50);\n$_107 = str_repeat('ab', 50);\n$_108 =\
    \ str_repeat('ab', 50);\n$_109 = str_repeat('ab', 50);\n$_110 = str_repeat('ab',\
    \ 50);\n$_111 = str_repeat('ab', 50);\n$_112 = str_repeat('ab', 50);\n$_113 =\
    \ str_repeat('ab', 50);\n$_114 = str_repeat('ab', 50);\n$_115 = str_repeat('ab',\
    \ 50);\n$_116 = str_repeat('ab', 50);\n$_117 = str_repeat('ab', 50);\n$_118 =\
    \ str_repeat('ab', 50);\n$_119 = str_repeat('ab', 50);\n$_120 = str_repeat('ab',\
    \ 50);\n$_121 = str_repeat('ab', 50);\n$_122 = str_repeat('ab', 50);\n$_123 =\
    \ str_repeat('ab', 50);\n$_124 =\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpg2zwvwrv.php on line 48

    '
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmgnykgc.php:20\n\
    Stack trace:\n#0 /tmp/tmpvmgnykgc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvmgnykgc.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) <= 1) {\n        return true;\n    }\n    if ($text[0]\
    \ != $text[strlen($text) - 1]) {\n        return false;\n    }\n    return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t// your code here\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdthtcmi.php:19\n\
    Stack trace:\n#0 /tmp/tmprdthtcmi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprdthtcmi.php\
    \ on line 19\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\tfor ($i = 0; $i < $length / 2; $i++) {\n\t\t\
    if ($text[$i] != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // todo\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpud2je2pc.php:20\n\
    Stack trace:\n#0 /tmp/tmpud2je2pc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpud2je2pc.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text = strtolower($text);\n  $length = strlen($text);\n  $half = floor($length\
    \ / 2);\n  for ($i = 0; $i < $half; $i++) {\n    if ($text[$i] != $text[$length\
    \ - $i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // IMPLEMENT ME!\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcn2mv03v.php:20\n\
    Stack trace:\n#0 /tmp/tmpcn2mv03v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcn2mv03v.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // your code here...\n  $length = strlen($text);\n  $i = 0;\n  $reverse\
    \ = \"\";\n  while ($i < $length) {\n    $reverse = $text[$i] . $reverse;\n  \
    \  $i++;\n  }\n  if ($reverse == $text) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $pali = true;\n    for ($i = 0; $i < strlen($text); $i++) {\n       \
    \ if ($text[$i] != $text[strlen($text) - 1 - $i]) {\n            $pali = false;\n\
    \        }\n    }\n    return $pali;\n}\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpta8k86vc.php:23\n\
    Stack trace:\n#0 /tmp/tmpta8k86vc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpta8k86vc.php\
    \ on line 23\n"
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // Your code goes here\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpys_mwo73.php:21\n\
    Stack trace:\n#0 /tmp/tmpys_mwo73.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpys_mwo73.php\
    \ on line 21\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    if ($len <= 1) {\n        return true;\n \
    \   }\n    else if ($text[0] != $text[$len - 1]) {\n        return false;\n  \
    \  }\n    else {\n        return is_palindrome(substr($text, 1, $len - 2));\n\
    \    }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$text = preg_replace('/[^a-zA-Z0-9]/', '',\
    \ $text);\n\t\n\tfor ($i = 0; $i < strlen($text) / 2; $i++) {\n\t\tif ($text[$i]\
    \ != $text[strlen($text) - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t\
    return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if ($text == \"\") {\n        return true;\n    }\n    if (strlen($text)\
    \ == 1) {\n        return true;\n    }\n    $x = strlen($text) - 1;\n    for ($i\
    \ = 0; $i < ceil(strlen($text) / 2); $i++) {\n        if ($text[$i] != $text[$x\
    \ - $i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    if ($len === 0) {\n        return true;\n\
    \    }\n    else {\n        $i = 0;\n        $j = $len - 1;\n        while ($i\
    \ < $j) {\n            if ($text[$i] !== $text[$j]) {\n                return\
    \ false;\n            }\n            $i += 1;\n            $j -= 1;\n        }\n\
    \        return true;\n    }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\treturn $text == strrev($text);\n}\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if ($text == strrev($text)) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: -1
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$length = strlen($text);\n\t$middle = floor($length / 2);\n\tfor ($i =\
    \ 0; $i < $middle; $i++) {\n\t\tif ($text[$i] != $text[$length - $i - 1]) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n$count = 0;\nfor ($i = 100;\
    \ $i < 1000; $i++) {\n\tfor ($j = 100; $j < 1000; $j++) {\n\t\t$n = $i * $j;\n\
    \t\tif (is_palindrome($n)) {\n\t\t\t$count++;\n\t\t}\n\t}\n}\necho \"count: $count\\\
    n\";\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: 'b''\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php
    on line 15\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpt01wk1mp.php '
  timestamp: 1659978753
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $l = strlen($text);\n  for ($i = 0; $i < $l / 2; $i++) {\n    if ($text[$i]\
    \ != $text[$l - $i - 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) < 2) return true;\n    if ($text[0] != $text[strlen($text)\
    \ - 1]) return false;\n    return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}\n\necho 'Testing is_palindrome with \"\"';\necho is_palindrome(\"\"\
    ) ? \"OK\" : \"Fail\";\necho \"\\n\";\n\necho 'Testing is_palindrome with \"aba\"\
    ';\necho is_palindrome(\"aba\") ? \"OK\" : \"Fail\";\necho \"\\n\";\n\necho 'Testing\
    \ is_palindrome with \"aaaaa\"';\necho is_palindrome(\"aaaaa\") ? \"OK\" : \"\
    Fail\";\necho \"\\n\";\n\necho 'Testing is_palindrome with \"zbcd\"';\necho is_palindrome(\"\
    zbcd\") ? \"OK\" : \"Fail\";\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Testing is_palindrome with ""OK

    Testing is_palindrome with "aba"OK

    Testing is_palindrome with "aaaaa"OK

    Testing is_palindrome with "zbcd"Fail

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  $text = trim($text);\n  $i = 0;\n  $j = strlen($text) - 1;\n  while ($i\
    \ < $j) {\n    if ($text[$i] != $text[$j]) {\n      return false;\n    }\n   \
    \ $i += 1;\n    $j -= 1;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // returns true if the text is a palindrome, false otherwise\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71qd5r_g.php:20\n\
    Stack trace:\n#0 /tmp/tmp71qd5r_g.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp71qd5r_g.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (strlen($text) < 2) {\n    return true;\n  }\n  if ($text[0] != $text[strlen($text)\
    \ - 1]) {\n    return false;\n  }\n  return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}\n\n$f = fopen(\"php://stdin\", \"r\");\n$line = trim(fgets($f));\n\
    echo (is_palindrome($line) ? \"true\" : \"false\") . \"\\n\";\nfclose($f);\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    $len = strlen($text);\n    for ($i =\
    \ 0; $i < $len / 2; $i++) {\n        if ($text[$i] != $text[$len - $i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    if ($len == 0) {\n        return true;\n \
    \   } else {\n        for ($i = 0; $i < ($len/2); $i++) {\n            if ($text[$i]\
    \ != $text[$len-$i-1]) {\n                return false;\n            }\n     \
    \   }\n        return true;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $length = strlen($text);\n    $res = true;\n    for ($i = 0; $i < $length\
    \ / 2; $i++) {\n        if ($text[$i] != $text[$length - $i - 1]) {\n        \
    \    $res = false;\n            break;\n        }\n    }\n    return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$len = strlen($text);\n\t$mid = $len / 2;\n\
    \tif ($len <= 1) {\n\t\treturn true;\n\t} else {\n\t\tif ($text[0] == $text[$len\
    \ - 1]) {\n\t\t\treturn is_palindrome(substr($text, 1, $len - 2));\n\t\t} else\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) <= 1) {\n        return true;\n    } else {\n     \
    \   if ($text[0] != $text[strlen($text) - 1]) {\n            return false;\n \
    \       } else {\n            return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n        }\n    }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmgnykgc.php:20\n\
    Stack trace:\n#0 /tmp/tmpvmgnykgc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvmgnykgc.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $reversed = strrev($text);\n    return $text == $reversed;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = preg_replace('/[^a-zA-Z]/', '', $text);\n\t$text = strtolower($text);\n\
    \t$length = strlen($text);\n\t$half = floor($length / 2);\n\t$i = 0;\n\t$result\
    \ = TRUE;\n\twhile ($i < $half) {\n\t\tif ($text[$i] != $text[$length - $i - 1])\
    \ {\n\t\t\t$result = FALSE;\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$len = strlen($text);\n\tfor ($i = 0; $i < $len / 2; $i++) {\n\t\tif ($text[$i]\
    \ != $text[$len - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (empty($text)) {\n    return true;\n  }\n  return $text[0] == $text[strlen($text)\
    \ - 1] ? is_palindrome(substr($text, 1, strlen($text) - 2)) : false;\n}\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if ($text == \"\") {\n    return true;\n  } else if (strlen($text) == 1)\
    \ {\n    return true;\n  } else if (strlen($text) == 2) {\n    return $text[0]\
    \ == $text[1];\n  } else {\n    return $text[0] == $text[strlen($text) - 1] &&\
    \ is_palindrome(substr($text, 1, strlen($text) - 2));\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  return $text == strrev($text);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10r0nfvi.php:23\n\
    Stack trace:\n#0 /tmp/tmp10r0nfvi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp10r0nfvi.php\
    \ on line 23\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text_new = strtolower($text);\n    $text_new = str_replace(\" \", \"\
    \", $text_new);\n    $length = strlen($text_new);\n    for ($i = 0; $i < $length\
    \ / 2; $i++) {\n        if ($text_new[$i] != $text_new[$length - $i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if(!empty($text)){\n    $length = strlen($text);\n    $half = $length /\
    \ 2;\n    $first = substr($text, 0, $half);\n    $second = substr($text, ($length\
    \ % 2 == 0) ? $half : $half + 1);\n    $second = strrev($second);\n    return\
    \ $first == $second;\n  } else {\n    return true;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 15


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 16


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 15


    Deprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 16


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 15


    Deprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 16


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 15


    Deprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 16


    Deprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 15


    Deprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpln0kh0tm.php
    on line 16

    '
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // TODO\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60911rcw.php:19\n\
    Stack trace:\n#0 /tmp/tmp60911rcw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp60911rcw.php\
    \ on line 19\n"
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t// replace other characters with \"\"\n\t$str = preg_replace(\"/[^A-Za-z0-9\
    \ ]/\", '', $text);\n\t$str = strtolower($str);\n\t$str1 = str_split($str);\n\t\
    $str2 = array_reverse($str1);\n\tif($str1 == $str2) {\n\t\treturn \"true\";\n\t\
    } else {\n\t\treturn \"false\";\n\t}\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7ui_56q.php:29\n\
    Stack trace:\n#0 /tmp/tmpy7ui_56q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy7ui_56q.php\
    \ on line 29\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t// Removes non-letters, non-numbers and whitespace\n\t$text = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $text);\n\t$text = strtolower($text);\n\t$length = strlen($text);\n\t//\
    \ If it's even, the lengths will be the same\n\t// If it's odd, the middle character\
    \ doesn't matter\n\t$middle = intval($length / 2);\n\t// Go through the string\
    \ to see if it is a palindrome\n\tfor ($i = 0; $i < $middle; $i++) {\n\t\tif ($text[$i]\
    \ != $text[$length - $i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = preg_replace('/[^a-z]/', '', strtolower($text));\n    if ($text\
    \ == strrev($text)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // PUT YOUR CODE HERE\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9l5ndso2.php:19\n\
    Stack trace:\n#0 /tmp/tmp9l5ndso2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9l5ndso2.php\
    \ on line 19\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) < 2) {\n        return true;\n    } else if (strtolower($text[0])\
    \ == strtolower($text[strlen($text) - 1])) {\n        return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n    } else {\n        return false;\n    }\n}\necho\
    \ is_palindrome(\"\") . \"\\n\";\necho is_palindrome(\"aba\") . \"\\n\";\necho\
    \ is_palindrome(\"aaaaa\") . \"\\n\";\necho is_palindrome(\"zbcd\") . \"\\n\"\
    ;\necho is_palindrome(\"abba\") . \"\\n\";\necho is_palindrome(\"abbbb\") . \"\
    \\n\";\necho is_palindrome(\"abbbb\") . \"\\n\";\necho is_palindrome(\"abbb\"\
    ) . \"\\n\";\necho is_palindrome(\"zbbbb\") . \"\\n\";\necho is_palindrome(\"\
    cbbbz\") . \"\\n\";\necho is_palindrome(\"cbbz\") . \"\\n\";\necho is_palindrome(\"\
    cbbbc\") . \"\\n\";\necho is_palindrome(\"bcbbbc\") . \"\\n\";\necho is_palindrome(\"\
    cbbb\") . \"\\n\";\necho is_palindrome(\"zbbb\") . \"\\n\";\necho is_palindrome(\"\
    zbb\") . \"\\n\";\necho is_palindrome(\"zb\") . \"\\n\";\necho is_palindrome(\"\
    z\") . \"\\n\";\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    1

    1


    1







    1






    1

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (empty($text)) {\n    return true;\n  }\n  $last_index = strlen($text)\
    \ - 1;\n  for ($i = 0; $i < $last_index; $i++) {\n    if ($text[$i] != $text[$last_index\
    \ - $i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\treturn $text == strrev($text);\n}\nfunction candidate(...$args) {\n   \
    \ return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // $text_reverse = strrev($text);\n  // return ($text === $text_reverse);\n\
    \  $text_size = strlen($text);\n  for ($i = 0; $i < $text_size / 2; $i++) {\n\
    \    if ($text[$i] !== $text[$text_size - $i - 1]) {\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) == 0) {\n        return true;\n    }\n    else {\n\
    \        $lhs = substr($text, 0, 1);\n        $rhs = substr($text, -1);\n    \
    \    if ($lhs == $rhs) {\n            return is_palindrome(substr($text, 1, -1));\n\
    \        }\n        else {\n            return false;\n        }\n    }\n}\n\n\
    function candidate(...$args) {\n    return is_palindrome(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  // Insert code here.\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4suns9_.php:19\n\
    Stack trace:\n#0 /tmp/tmpo4suns9_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpo4suns9_.php\
    \ on line 19\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (strlen($text) <= 1) {\n    return true;\n  }\n  if ($text[0] != $text[strlen($text)\
    \ - 1]) {\n    return false;\n  }\n  return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\tif ($text == '') {\n\t\treturn true;\n\t}\n\telse {\n\t\t$text = strtolower($text);\n\
    \t\t$i = 0;\n\t\t$j = strlen($text) - 1;\n\t\twhile ($text[$i] == $text[$j]) {\n\
    \t\t\t$i++;\n\t\t\t$j--;\n\t\t\tif ($i >= $j) {\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t}\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t// your code here\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjng2xuf5.php:20\n\
    Stack trace:\n#0 /tmp/tmpjng2xuf5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjng2xuf5.php\
    \ on line 20\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t// check if string is empty\n\tif ($text == \"\") {\n\t\treturn true;\n\
    \t}\n\t// reverse string\n\t$reversed_text = strrev($text);\n\t// compare texts\n\
    \tif ($text == $reversed_text) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return $text == strrev($text);\n}\nfunction candidate(...$args) {\n \
    \   return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n   $len = strlen($text);\n   for ($i = 0; $i < $len / 2; $i++) {\n      \
    \ if ($text[$i] != $text[$len - $i - 1]) {\n           return false;\n       }\n\
    \   }\n   return true;\n}\n$test = array(\"\", \"aba\", \"aaaaa\", \"zbcd\");\n\
    for ($i = 0; $i < count($test); $i++) {\n   echo \"is_palindrome(\\\"\" . $test[$i]\
    \ . \"\\\") = \" .\n       (is_palindrome($test[$i]) ? \"true\" : \"false\") .\
    \ \"\\n\";\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'is_palindrome("") = true

    is_palindrome("aba") = true

    is_palindrome("aaaaa") = true

    is_palindrome("zbcd") = false

    '
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$text = str_replace(\" \", \"\", $text);\n\
    \t$text = str_replace(\"!\", \"\", $text);\n\t$text = str_replace(\".\", \"\"\
    , $text);\n\t$text = str_replace(\",\", \"\", $text);\n\t$text = str_replace(\"\
    ?\", \"\", $text);\n\t$text = str_replace(\"'\", \"\", $text);\n\t$text = str_replace(\"\
    -\", \"\", $text);\n\t$text = str_replace(\"_\", \"\", $text);\n\t$text = str_replace(\"\
    +\", \"\", $text);\n\t$text = str_replace(\"=\", \"\", $text);\n\t$text = str_replace(\"\
    (\", \"\", $text);\n\t$text = str_replace(\")\", \"\", $text);\n\t$text = str_replace(\"\
    {\", \"\", $text);\n\t$text = str_replace(\"}\", \"\", $text);\n\t$text = str_replace(\"\
    [\", \"\", $text);\n\t$text = str_replace(\"]\", \"\", $text);\n\t$text = str_replace(\"\
    *\", \"\", $text);\n\t$text = str_replace(\"/\", \"\", $text);\n\t$text = str_replace(\"\
    \\\\\", \"\", $text);\n\t$text = str_replace(\"%\", \"\", $text);\n\t$text = str_replace(\"\
    <\", \"\", $text);\n\t$text = str_replace(\">\", \"\", $text);\n\t$text = str_replace(\"\
    ^\", \"\", $text);\n\t$text = str_replace(\"&\", \"\", $text);\n\t$text = str_replace(\"\
    $\", \"\", $text);\n\t$text = str_replace(\"#\", \"\", $text);\n\t$text = str_replace(\"\
    @\", \"\", $text);\n\t$text = str_replace(\"~\", \"\", $text);\n\t$text = str_replace(\"\
    `\", \"\", $text);\n\t$text = str_replace(\":\", \"\", $text);\n\t$text = str_replace(\"\
    ;\", \"\", $text);\n\t$text = str_replace\nfunction candidate(...$args) {\n  \
    \  return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmphip3fz1u.php
    on line 45

    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = strtolower($text);\n\t$text_len = strlen($text);\n\tfor ($i = 0;\
    \ $i < $text_len / 2; $i++) {\n\t\tif ($text[$i] != $text[$text_len - $i - 1])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = strtolower($text);\n    if ($text == '') {\n        return true;\n\
    \    }\n    if (strlen($text) == 1) {\n        return true;\n    }\n    if (strlen($text)\
    \ == 2) {\n        return ($text[0] == $text[1]);\n    }\n    if ($text[0] ==\
    \ $text[strlen($text) - 1]) {\n        return is_palindrome(substr($text, 1, strlen($text)\
    \ - 2));\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $len = strlen($text);\n    if ($len < 2) {\n        return true;\n  \
    \  }\n    $rev = \"\";\n    for ($i = $len - 1; $i >= 0; $i--) {\n        $rev\
    \ .= $text[$i];\n    }\n    return ($rev == $text);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $n = strlen($text);\n    if ($n == 0) {\n        return true;\n    }\n\
    \    $i = 0;\n    $j = $n - 1;\n    while ($i < $j) {\n        if ($text[$i] !=\
    \ $text[$j]) {\n            return false;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    // Empty string is a palindrome\n    if (empty($text)) {\n        return\
    \ true;\n    }\n\n    // Only 1 letter is a palindrome\n    if (strlen($text)\
    \ == 1) {\n        return true;\n    }\n\n    // If there are 2 letters, and they\
    \ are the same, it's a palindrome\n    if (strlen($text) == 2) {\n        if ($text[0]\
    \ == $text[1]) {\n            return true;\n        }\n    }\n\n    // If the\
    \ first letter and the last letter are the same, recursively test the middle\n\
    \    if ($text[0] == $text[strlen($text) - 1]) {\n        return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n    }\n\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $rev_text = strrev($text);\n    if ($text == $rev_text) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\necho \"is_palindrome(\\\
    \"\\\")\";\necho \"\\n\";\nvar_dump(is_palindrome(\"\"));\necho \"\\n\";\necho\
    \ \"is_palindrome(\\\"aba\\\")\";\necho \"\\n\";\nvar_dump(is_palindrome(\"aba\"\
    ));\necho \"\\n\";\necho \"is_palindrome(\\\"aaaaa\\\")\";\necho \"\\n\";\nvar_dump(is_palindrome(\"\
    aaaaa\"));\necho \"\\n\";\necho \"is_palindrome(\\\"zbcd\\\")\";\necho \"\\n\"\
    ;\nvar_dump(is_palindrome(\"zbcd\"));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"aba\") !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"aaaaa\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'is_palindrome("")

    bool(true)


    is_palindrome("aba")

    bool(true)


    is_palindrome("aaaaa")

    bool(true)


    is_palindrome("zbcd")

    bool(false)


    '
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$len = strlen($text);\n\t$text = strtolower($text);\n\tfor ($i = 0; $i\
    \ < $len / 2; $i++) {\n\t\tif ($text[$i] != $text[$len - $i - 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    $text = preg_replace('/[^A-Za-z]/', '', $text);\n    $text = strtolower($text);\n\
    \    if (strlen($text) < 2) {\n        return true;\n    }\n    if ($text[0] !=\
    \ $text[strlen($text) - 1]) {\n        return false;\n    }\n    return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if (strlen($text) <= 1) {\n        return true;\n    } else {\n     \
    \   if ($text[0] == $text[strlen($text) - 1]) {\n            return is_palindrome(substr($text,\
    \ 1, strlen($text) - 2));\n        } else {\n            return false;\n     \
    \   }\n    }\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if ($text === strrev($text)) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if (empty($text)) {\n    return true;\n  } else if (substr($text, 0, 1)\
    \ == substr($text, -1)) {\n    return is_palindrome(substr($text, 1, -1));\n \
    \ } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n\t$text = preg_replace('/[^a-zA-Z0-9 ]/', '', $text);\n\t$text = strtolower($text);\n\
    \t$text = str_replace(' ', '', $text);\n\t$l = strlen($text);\n\t$j = 1;\n\t$palindrome\
    \ = TRUE;\n\tfor ($i = 0; $i < floor($l/2); $i++) {\n\t\tif ($text[$i] !== $text[$l-$j])\
    \ {\n\t\t\t$palindrome = FALSE;\n\t\t\tbreak;\n\t\t}\n\t\t$j++;\n\t}\n\treturn\
    \ $palindrome;\n}\n\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 255
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    return true;\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4p_fl1m.php:22\n\
    Stack trace:\n#0 /tmp/tmpl4p_fl1m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpl4p_fl1m.php\
    \ on line 22\n"
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n    if ($text == strrev($text)) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aaaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    zbcd\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyx\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywyz\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xywzx\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\
    \")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"\
    aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text)\
    \ {\n  if ($text == '') {\n    return true;\n  }\n  if (substr($text, 0, 1) !=\
    \ substr($text, -1)) {\n    return false;\n  }\n  return is_palindrome(substr($text,\
    \ 1, -1));\n}\nfunction candidate(...$args) {\n    return is_palindrome(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aba\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aaaaa\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"zbcd\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyx\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywyz\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xywzx\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978747
