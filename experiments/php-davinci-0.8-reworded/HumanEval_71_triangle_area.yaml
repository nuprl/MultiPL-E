name: HumanEval_71_triangle_area
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return the\
  \ area of\n// the triangle rounded to 2 decimal points if the three sides form a\
  \ valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n// than the third side.\n// Example:\n\
  // >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction\
  \ triangle_area($a, $b, $c) {\n"
tests: "function candidate(...$args) {\n    return triangle_area(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(3, 4, 5) !== 6.0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 10) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 8, 5) !== 8.18) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== 1.73) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== 16.25) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 6, 3) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== 0.43) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example:\n    // print \"Hello world!\";\n\
    \    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b\
    \ + $c) / 2;\n        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \        return round($area, 2);\n    }\n    return -1;\n}\n\n$test_cases = [[3,\
    \ 4, 5], [1, 2, 10]];\nforeach ($test_cases as $case) {\n    $res = triangle_area($case[0],\
    \ $case[1], $case[2]);\n    print_r($res);\n    echo PHP_EOL;\n}", "    $p = ($a\
    \ + $b + $c) / 2;\n    if ($p - $a <= 0 || $p - $b <= 0 || $p - $c <= 0) {\n \
    \       return -1;\n    } else {\n        return round(sqrt($p * ($p - $a) * ($p\
    \ - $b) * ($p - $c)), 2);\n    }\n}\n", "\tif($a + $b > $c && $a + $c > $b &&\
    \ $b + $c > $a) {\n\t\treturn round(($a + $b + $c) / 2, 2);\n\t} else {\n\t\t\
    return -1;\n\t}\n}", "    if ($a+$b > $c && $a+$c > $b && $b+$c > $a) {\n    \
    \    $s = ($a+$b+$c)/2;\n        $area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n \
    \       return $area;\n    } else {\n        return -1;\n    }\n}\n", "    if($a\
    \ + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $p = ($a + $b + $c) /\
    \ 2;\n        $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return\
    \ round($s, 2);\n    }\n    return -1;\n}", "    // Fill in your code here\n}",
  "    if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a) {\n        return -1;\n\
    \    }\n    $s = ($a + $b + $c) / 2;\n    return round(sqrt($s * ($s - $a) * ($s\
    \ - $b) * ($s - $c)), 2);\n}\n\necho triangle_area(3, 4, 5);\necho \"\\n\";\n\
    echo triangle_area(1, 2, 10);\necho \"\\n\";", "    if (($a + $b > $c) && ($a\
    \ + $c > $b) && ($b + $c > $a)) {\n        $p = ($a + $b + $c) / 2;\n        $s\
    \ = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return round($s, 2);\n\
    \    } else {\n        return -1;\n    }\n}\n\necho triangle_area(3, 4, 5);",
  "\tif ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n\t\t$s = ($a + $b + $c)\
    \ / 2;\n\t\t$area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\t\treturn\
    \ round($area, 2);\n\t}\n\treturn -1;\n}\n\nprint_r(triangle_area(3, 4, 5));\n\
    echo \"\\n\";\nprint_r(triangle_area(1, 2, 10));\necho \"\\n\";\nprint_r(triangle_area(5,\
    \ 5, 5));\necho \"\\n\";\nprint_r(triangle_area(10, 5, 7));\necho \"\\n\";", "\t\
    $max = max($a, $b, $c);\n\tif ($max == $a) {\n\t\t$med = max($b, $c);\n\t\t$min\
    \ = min($b, $c);\n\t} elseif ($max == $b) {\n\t\t$med = max($a, $c);\n\t\t$min\
    \ = min($a, $c);\n\t} else {\n\t\t$med = max($a, $b);\n\t\t$min = min($a, $b);\n\
    \t}\n\tif ($max > $med + $min) {\n\t\treturn -1;\n\t} else {\n\t\t$s = ($a + $b\
    \ + $c) / 2;\n\t\treturn round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n\
    \t}\n}", "    if (($a + $b) > $c && ($a + $c) > $b && ($b + $c) > $a) {\n    \
    \    return round(sqrt(($a + $b + $c) * ($a + $b - $c) * ($a - $b + $c) * (-$a\
    \ + $b + $c)) / 4, 2);\n    }\n    return -1;\n}\necho triangle_area(3, 4, 5)\
    \ . \"\\n\";\necho triangle_area(1, 2, 10) . \"\\n\";", "  if($a + $b > $c &&\
    \ $a + $c > $b && $b + $c > $a) {\n    $p = ($a + $b + $c) / 2;\n    $area = sqrt($p\
    \ * ($p - $a) * ($p - $b) * ($p - $c));\n    return round($area, 2);\n  } else\
    \ {\n    return -1;\n  }\n}\n", "\tif ($a+$b<=$c || $a+$c<=$b || $b+$c<=$a) {\n\
    \t\treturn -1;\n\t}\n\t$p = ($a+$b+$c)/2;\n\t$s = sqrt($p*($p-$a)*($p-$b)*($p-$c));\n\
    \treturn round($s, 2);\n}\n\necho triangle_area(3, 4, 5) . \"\\n\";\necho triangle_area(1,\
    \ 2, 10) . \"\\n\";\necho triangle_area(4, 5, 4) . \"\\n\";\necho triangle_area(1,\
    \ 1, 1) . \"\\n\";\necho triangle_area(5, 5, 3) . \"\\n\";\necho triangle_area(5,\
    \ 1, 3) . \"\\n\";\necho triangle_area(5, 5, 6) . \"\\n\";\necho triangle_area(5,\
    \ 5, 7) . \"\\n\";", "  // your code here\n  $p = ($a + $b + $c) / 2;\n  $s =\
    \ sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n  return ($s > 0 ? $s : -1);\n\
    }\n\necho triangle_area(3, 4, 5).\"\\n\";\necho triangle_area(1, 2, 10).\"\\n\"\
    ;\n", "    if ($a <= 0 || $b <= 0 || $c <= 0) {\n        return -1;\n    }\n \
    \   if (($a + $b) <= $c || ($a + $c) <= $b || ($b + $c) <= $a) {\n        return\
    \ -1;\n    }\n    $p = ($a + $b + $c) / 2;\n    $area = sqrt($p * ($p - $a) *\
    \ ($p - $b) * ($p - $c));\n    return number_format($area, 2);\n}\n", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use print\n    // Example:\n    // print \"Hello world!\";\n    if ($a + $b\
    \ > $c && $a + $c > $b && $b + $c > $a) {\n        return round((sqrt(($a + $b\
    \ + $c) * ($a + $b - $c) * ($a + $c - $b) * ($b + $c - $a)) / 4), 2);\n    } else\
    \ {\n        return -1;\n    }\n}\n\necho triangle_area(3, 4, 5);", "    if (($a\
    \ + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n        $p = ($a + $b + $c)\
    \ / 2;\n        $s = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n        return\
    \ round($s, 2);\n    } else {\n        return -1;\n    }\n}\n", "  $valid_triangle\
    \ = false;\n  if (($a + $b) > $c && ($a + $c) > $b && ($b + $c) > $a) {\n    $valid_triangle\
    \ = true;\n  }\n  if ($valid_triangle) {\n    $p = ($a + $b + $c) / 2;\n    $a\
    \ = sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    return number_format($a,\
    \ 2);\n  } else {\n    return -1;\n  }\n}\necho 'triangle_area(3, 4, 5) ==> '\
    \ . triangle_area(3, 4, 5) . PHP_EOL;\necho 'triangle_area(1, 2, 10) ==> ' . triangle_area(1,\
    \ 2, 10) . PHP_EOL;\n\necho '--------------------------------' . PHP_EOL;\n",
  "\tif ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n\t\treturn round(sqrt(($a\
    \ + $b + $c) * ($a + $b - $c) * ($a - $b + $c) * (-$a + $b + $c)) / 4, 2);\n\t\
    } else {\n\t\treturn -1;\n\t}\n}\necho triangle_area(3, 4, 5) . PHP_EOL;\necho\
    \ triangle_area(1, 2, 10) . PHP_EOL;\n", "    if($a <= 0 || $b <= 0 || $c <= 0)\
    \ {\n        return -1;\n    } else if($a + $b <= $c || $a + $c <= $b || $b +\
    \ $c <= $a) {\n        return -1;\n    } else {\n        $s = 0.5 * ($a + $b +\
    \ $c);\n        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n      \
    \  return round($area, 2);\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
