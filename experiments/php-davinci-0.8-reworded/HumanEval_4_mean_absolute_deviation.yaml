name: HumanEval_4_mean_absolute_deviation
language: php
prompt: "<?php\n// For a given array of input numbers, calculate Mean Absolute Deviation\n\
  // around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute\
  \ difference between each\n// element and a centerpoint (mean in this case):\n//\
  \ MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0, 2.0, 3.0,\
  \ 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n"
tests: "function candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
  \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  // Calculate the average of input numbers.\n  $n = count($numbers);\n\
    \  $sum = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $sum += $numbers[$i];\n  }\n\
    \  $mean = $sum / $n;\n\n  // Calculate the sum of absolute difference from the\
    \ mean.\n  $diff_sum = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $diff_sum += abs($numbers[$i]\
    \ - $mean);\n  }\n\n  // Return the average absolute difference.\n  return $diff_sum\
    \ / $n;\n}\n", "\t$mean = mean($numbers);\n\t$abs = array_map(function($x) use\
    \ ($mean) {\n\t\treturn abs($x - $mean);\n\t}, $numbers);\n\treturn mean($abs);\n\
    }\n", "  $sum = 0;\n  $count = count($numbers);\n  $mean = mean($numbers);\n \
    \ foreach ($numbers as $number) {\n    $sum += abs($number - $mean);\n  }\n  return\
    \ $sum / $count;\n}\n", "  $mean = average($numbers);\n  $absolute_deviations\
    \ = array();\n  foreach ($numbers as $number) {\n    $absolute_deviations[] =\
    \ abs($number - $mean);\n  }\n  return average($absolute_deviations);\n}\n", " \
    \ $mean = array_sum($numbers) / count($numbers);\n  $absolute_deviations = array();\n\
    \  foreach ($numbers as $number) {\n    $absolute_deviations[] = abs($number -\
    \ $mean);\n  }\n  return array_sum($absolute_deviations) / count($absolute_deviations);\n\
    }\n", "    $total = count($numbers);\n    $mean = array_sum($numbers) / $total;\n\
    \    $deviation = array();\n    foreach ($numbers as $number) {\n        $deviation[]\
    \ = abs($number - $mean);\n    }\n    return array_sum($deviation) / $total;\n\
    }", "\t$n = count($numbers);\n\t$sum = 0;\n\t$sum_squares = 0;\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\t$sum += $numbers[$i];\n\t\t$sum_squares += $numbers[$i]\
    \ * $numbers[$i];\n\t}\n\t$mean = $sum / $n;\n\t$variance = ($sum_squares - $sum\
    \ * $sum / $n) / ($n - 1);\n\treturn sqrt($variance);\n}\n", "    // Calculate\
    \ the mean\n    $mean = array_sum($numbers) / count($numbers);\n    // And then\
    \ the mean absolute deviation.\n    $mad = 0.0;\n    foreach ($numbers as $number)\
    \ {\n        $mad += abs($number - $mean);\n    }\n    $mad /= count($numbers);\n\
    \    return $mad;\n}\n\n$file = fopen(\"input.txt\", \"r\");\n$values = [];\n\
    while (($buffer = fgets($file)) !== false) {\n    $values[] = (int) $buffer;\n\
    }\nfclose($file);\n\n$mean = array_sum($values) / count($values);\n\n$mad = mean_absolute_deviation($values);\n\
    echo \"mean=\".$mean.\"\\n\";\necho \"mad=\".$mad.\"\\n\";\necho \"upper=\".(floor($mean\
    \ + $mad)).\"\\n\";\necho \"lower=\".(ceil($mean - $mad)).\"\\n\";", "  $mean\
    \ = mean($numbers);\n  $absolute_deviations = array();\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    $absolute_deviations[] = abs($numbers[$i] - $mean);\n  }\n  return\
    \ mean($absolute_deviations);\n}\n", "    $deviations = array();\n    $mean =\
    \ array_sum($numbers) / count($numbers);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $deviations[] = abs($numbers[$i] - $mean);\n    }\n    return\
    \ array_sum($deviations) / count($deviations);\n}\n", "    $mean = mean($numbers);\n\
    \    $deviations = array();\n    foreach ($numbers as $x) {\n        $deviations[]\
    \ = abs($x - $mean);\n    }\n    return mean($deviations);\n}", "    $total =\
    \ 0;\n    $count = count($numbers);\n    $mean = array_sum($numbers) / $count;\n\
    \    foreach ($numbers as $number) {\n        $total += abs($number - $mean);\n\
    \    }\n    return $total / $count;\n}", "\t$mean = mean($numbers);\n\t$abs_differences\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\t$abs_differences[] = abs($number\
    \ - $mean);\n\t}\n\treturn mean($abs_differences);\n}\n", "    $length = count($numbers);\n\
    \    $mean = array_sum($numbers) / $length;\n    $abs_deviation = array();\n \
    \   foreach ($numbers as $number) {\n        $abs_deviation[] = abs($number -\
    \ $mean);\n    }\n    return array_sum($abs_deviation) / $length;\n}", "  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviations = array();\n  foreach\
    \ ($numbers as $number) {\n    $deviations[] = abs($number - $mean);\n  }\n  return\
    \ array_sum($deviations) / count($deviations);\n}\n", "\t$sum = 0;\n\tforeach\
    \ ($numbers as $number) {\n\t\t$sum += $number;\n\t}\n\t$avg = $sum / count($numbers);\n\
    \t$sum = 0;\n\tforeach ($numbers as $number) {\n\t\t$sum += abs($number - $avg);\n\
    \t}\n\treturn $sum / count($numbers);\n}\n", "    // return 0 if list is empty\
    \ or it only has one value\n    if (count($numbers) <= 1) return 0;\n    // get\
    \ mean of values\n    $mean = mean($numbers);\n    // sum of all differences\n\
    \    $sum = 0;\n    foreach ($numbers as $value) {\n        $sum += abs($value\
    \ - $mean);\n    }\n    // return the mean of all differences\n    return $sum\
    \ / count($numbers);\n}", "  // Remember to sort from smallest to largest, using\
    \ your sorting algorithm!\n  $numbers = insertion_sort($numbers);\n  // Find the\
    \ mean of the array\n  $mean = mean($numbers);\n  // Loop through the array, calculating\
    \ each element's deviation from the mean\n  // Add these deviations to a temporary\
    \ array\n  $deviations = array();\n  foreach ($numbers as $number) {\n    $deviations[]\
    \ = abs($number - $mean);\n  }\n  // Return the mean of the deviations.\n  return\
    \ mean($deviations);\n}\n", "    $mean = array_sum($numbers) / count($numbers);\n\
    \    $diffs = array();\n    foreach ($numbers as $number) {\n        $diffs[]\
    \ = abs($number - $mean);\n    }\n    return array_sum($diffs) / count($diffs);\n\
    }\n", "  // Check that array is not empty\n  if (sizeof($numbers) == 0) {\n  \
    \  return NULL;\n  }\n  // Calculate mean of the numbers\n  $mean = array_sum($numbers)\
    \ / sizeof($numbers);\n  // Calculate deviation from mean for each element\n \
    \ $deviation = array();\n  foreach ($numbers as $number) {\n    $deviation[] =\
    \ abs($number - $mean);\n  }\n  // Calculate mean of deviations\n  return array_sum($deviation)\
    \ / sizeof($deviation);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
