name: HumanEval_44_change_base
language: php
prompt: "<?php\n// Change numerical base of input number x to base.\n// return string\
  \ representation after the conversion.\n// base numbers are less than 10.\n// >>>\
  \ change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
  \ 2)\n// \"111\"\nfunction change_base($x, $base) {\n"
tests: "function candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $x = intval($x);\n    $base = intval($base);\n    $result = \"\"\
    ;\n    while ($x > 0) {\n        $result = (string)($x % $base) . $result;\n \
    \       $x = intval($x / $base);\n    }\n    return $result;\n}\n", "\t$res =\
    \ '';\n\t$res_arr = [];\n\twhile ($x > 0) {\n\t\t$res_arr[] = $x % $base;\n\t\t\
    $x = intval($x / $base);\n\t}\n\tfor ($i = count($res_arr) - 1; $i >= 0; $i--)\
    \ {\n\t\t$res .= strval($res_arr[$i]);\n\t}\n\treturn $res;\n}\n", "  $rv = '';\n\
    \  while ($x > 0) {\n    $rv = strval($x % $base) . $rv;\n    $x = intval($x /\
    \ $base);\n  }\n  return $rv;\n}\n", "  $result = \"\";\n  do {\n    $result =\
    \ ($x % $base) . $result;\n    $x = (int)($x / $base);\n  } while ($x != 0);\n\
    \  return $result;\n}\n", "    $res = \"\";\n    while ($x > 0) {\n        $n\
    \ = $x % $base;\n        $res = strval($n) . $res;\n        $x /= $base;\n   \
    \ }\n    return $res;\n}\n", "    $arr = [];\n    $temp = $x;\n    while ($temp\
    \ > 0) {\n        $arr[] = $temp % $base;\n        $temp = intval($temp / $base);\n\
    \    }\n    $str = \"\";\n    for ($i = count($arr) - 1; $i >= 0; $i--) {\n  \
    \      $str .= strval($arr[$i]);\n    }\n    return $str;\n}", "  if ($x == 0)\
    \ {\n    return 0;\n  }\n  $conv = array();\n  while ($x > 0) {\n    $conv[] =\
    \ $x % $base;\n    $x = (int)($x / $base);\n  }\n  return implode('', array_reverse($conv));\n\
    }\n", "    $ret = \"\";\n    while ($x > 0) {\n        $ret = strval($x % $base)\
    \ . $ret;\n        $x = (int)($x / $base);\n    }\n    return $ret;\n}\n", " \
    \ $quotient = $x;\n  $string = \"\";\n  while ($quotient != 0) {\n    $string\
    \ = strval($quotient % $base) . $string;\n    $quotient = intval($quotient / $base);\n\
    \  }\n  return $string;\n}\n", "    if ($x < $base) {\n        return (string)$x;\n\
    \    } else {\n        return change_base(floor($x / $base), $base) . (string)($x\
    \ % $base);\n    }\n}\n", "    if($x < 0) return change_base(-1 * $x, $base);\n\
    \    $str = \"\";\n    while($x >= $base) {\n        $str = $x % $base . $str;\n\
    \        $x = (int)($x / $base);\n    }\n    $str = $x . $str;\n    return $str;\n\
    }\n\necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho\
    \ change_base(7, 2) . \"\\n\";", "    $result = '';\n    while ($x >= $base) {\n\
    \        $remainder = $x % $base;\n        $x = ($x - $remainder) / $base;\n \
    \       $result = strval($remainder) . $result;\n    }\n    $result = strval($x)\
    \ . $result;\n    return $result;\n}", "\n}\n", "  $numbers = array('0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9');\n  $result = '';\n  while ($x > 0)\
    \ {\n    $result = $numbers[$x % $base] . $result;\n    $x = floor($x / $base);\n\
    \  }\n  return $result;\n}\n", "    $result = \"\";\n    while ($x > 0) {\n  \
    \      $remainder = $x % $base;\n        $x = (int)($x / $base);\n        $result\
    \ = strval($remainder) . $result;\n    }\n    return $result;\n}\n", "    $result\
    \ = \"\";\n    while($x > 0) {\n        $rem = $x % $base;\n        $x = (int)($x\
    \ / $base);\n        $result = $rem . $result;\n    }\n    return $result;\n}\n\
    \necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7,\
    \ 2) . \"\\n\";", "  $r = '';\n  while($x != 0) {\n    $r = $x % $base . $r;\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}\n\nfor ($i = 0; $i < 100; $i++)\
    \ {\n  $x = $i + 1;\n  echo \"10\u9032\u6570: $x, 2\u9032\u6570: \", change_base($x,\
    \ 2), \", 3\u9032\u6570: \", change_base($x, 3), \"\\n\";\n}", "  if ($x === 0)\
    \ return \"0\";\n  $result = \"\";\n  while ($x > 0) {\n    $result = ($x % $base)\
    \ . $result;\n    $x = floor($x / $base);\n  }\n  return $result;\n}\n", "\tif\
    \ ($x <= 0) {\n\t\treturn '0';\n\t}\n\t$result = '';\n\t$numbers = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9'];\n\twhile ($x > 0) {\n\t\t$result =\
    \ $numbers[$x % $base] . $result;\n\t\t$x = floor($x / $base);\n\t}\n\treturn\
    \ $result;\n}\n\n$r = change_base(8, 3);\nassert($r == '22');\n\n$r = change_base(8,\
    \ 2);\nassert($r == '1000');\n\n$r = change_base(7, 2);\nassert($r == '111');\n",
  "    $result = '';\n    while ($x > 0) {\n        $result = strval($x % $base) .\
    \ $result;\n        $x = intval($x / $base);\n    }\n    return $result;\n}\n",
  "    $digits = '';\n    do {\n        $last = $x % $base;\n        $digits = (string)$last\
    \ . $digits;\n        $x = intval($x / $base);\n    } while ($x > 0);\n    return\
    \ $digits;\n}\n", "\t// TODO\n\treturn \"\";\n}\n", "\t$base_string = \"\";\n\t\
    $base_number = $x;\n\twhile ($base_number > 0) {\n\t\t$reminder = $base_number\
    \ % $base;\n\t\t$base_number = (int)($base_number / $base);\n\t\t$base_string\
    \ = (string)$reminder . $base_string;\n\t}\n\treturn $base_string;\n}\n", "\t\
    if($x < $base) {\n\t\treturn \"$x\";\n\t}\n\t$result = '';\n\t$quotient = $x;\n\
    \twhile($quotient >= $base) {\n\t\t$remainder = $quotient % $base;\n\t\t$quotient\
    \ = floor($quotient / $base);\n\t\t$result = \"$remainder$result\";\n\t}\n\t$result\
    \ = \"$quotient$result\";\n\treturn $result;\n}\n", "  $mapping = array_flip(range(0,\
    \ 9));\n  $result = array();\n  while ($x > 0) {\n    $result[] = $mapping[$x\
    \ % $base];\n    $x = floor($x / $base);\n  }\n  return implode('', array_reverse($result));\n\
    }\n\nassert(change_base(8, 3) == '22');\nassert(change_base(8, 2) == '1000');\n\
    assert(change_base(7, 2) == '111');", "\t$string = \"\";\n\t$num = $x;\n\twhile($num\
    \ > 0) {\n\t\t$string = ($num % $base).$string;\n\t\t$num = intval($num / $base);\n\
    \t}\n\treturn $string;\n}\n", "    // TODO\n}", "    $num = array();\n    $i =\
    \ 0;\n    while ($x != 0) {\n        $num[$i] = $x % $base;\n        $x = floor($x\
    \ / $base);\n        $i++;\n    }\n    for ($j = $i - 1; $j >= 0; $j--) {\n  \
    \      echo $num[$j];\n    }\n    echo \"\\n\";\n}\n\nchange_base(8, 3);\nchange_base(8,\
    \ 2);\nchange_base(7, 2);", "    $y = '';\n    while ($x > 0) {\n        $y =\
    \ ($x % $base) . $y;\n        $x = floor($x / $base);\n    }\n    return $y;\n\
    }\n", "    $ret = \"\";\n    while($x >= $base) {\n        $ret = ($x % $base)\
    \ . $ret;\n        $x = floor($x / $base);\n    }\n    $ret = $x . $ret;\n   \
    \ return $ret;\n}\n", "  $res = \"\";\n  while ($x != 0) {\n    $res = $x % $base\
    \ . $res;\n    $x = (int)($x / $base);\n  }\n  return $res;\n}\n", "    $n = 1;\n\
    \    $ret = array();\n    while ($x >= $base ** $n) {\n        $n++;\n    }\n\
    \    while ($n >= 1) {\n        $y = (int)($x / $base ** ($n - 1));\n        $x\
    \ -= $y * $base ** ($n - 1);\n        $ret[] = $y;\n        $n--;\n    }\n   \
    \ return implode('', $ret);\n}\n", "    // Fill in the blank.\n    return $x;\n\
    }\n", "\t// TODO: fill the code\n\t$returnVal = \"\";\n\tif ($x > 0) {\n\t\tif\
    \ ($x < $base) {\n\t\t\t$returnVal = $x;\n\t\t} else {\n\t\t\t$returnVal = change_base(intval($x\
    \ / $base), $base) . ($x % $base);\n\t\t}\n\t}\n\treturn $returnVal;\n}\n", " \
    \   if ($x < $base) {\n        return $x;\n    } else {\n        return change_base(intval($x\
    \ / $base), $base) . ($x % $base);\n    }\n}\n\necho change_base(8, 3) . \"\\\
    n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7, 2) . \"\\n\";", "\t\
    $result = \"\";\n\t\n\t// TODO: implement\n\t\n\treturn $result;\n}\n\n$x = $_POST[\"\
    x\"];\n$base = $_POST[\"base\"];\n$out = change_base($x, $base);", "  $result\
    \ = '';\n  while ($x) {\n    $result = strval($x % $base) . $result;\n    $x =\
    \ intval($x / $base);\n  }\n  return $result;\n}", "  if ($x == 0) {\n    return\
    \ '0';\n  }\n  $res = '';\n  while ($x > 0) {\n    $n = $x % $base;\n    $res\
    \ = (string)$n . $res;\n    $x = ($x - $n) / $base;\n  }\n  return $res;\n}\n",
  "    // TODO\n}\n", "  $str = '';\n  while($x) {\n    $str = ($x % $base) . $str;\n\
    \    $x = floor($x / $base);\n  }\n  return $str;\n}\n", "  $result = \"\";\n\
    \  while ($x >= $base) {\n    $result = $x % $base . $result;\n    $x = (int)($x\
    \ / $base);\n  }\n  return $x . $result;\n}\n", "    if ($x < $base) {\n     \
    \   return strval($x);\n    }\n    return change_base(floor($x / $base), $base)\
    \ . strval($x % $base);\n}\n", "\t$result = \"\";\n\tdo {\n\t\t$result = (string)($x\
    \ % $base) . $result;\n\t\t$x = (int)($x / $base);\n\t} while ($x != 0);\n\treturn\
    \ $result;\n}\n", "    if ($x < $base) {\n        return (string)$x;\n    } else\
    \ {\n        return change_base($x / $base, $base) . ($x % $base);\n    }\n}\n",
  "  if ($x < $base) {\n    return (string)$x;\n  } else {\n    return change_base(floor($x\
    \ / $base), $base) . $x % $base;\n  }\n}\n", "    $res = '';\n    while ($x >\
    \ 0) {\n        $res = (string)($x % $base) . $res;\n        $x = (int)($x / $base);\n\
    \    }\n    return $res;\n}\n", "    $quotient = $x;\n    $remainder = 0;\n  \
    \  $result = array();\n    while($quotient > 0) {\n        $remainder = $quotient\
    \ % $base;\n        $quotient = intval($quotient / $base);\n        array_push($result,\
    \ $remainder);\n    }\n    return implode('', array_reverse($result));\n}\n\n\
    class ChangeBaseTest extends PHPUnit_Framework_TestCase {\n    public function\
    \ test_change_base() {\n        $this->assertEquals(change_base(8, 3), \"22\"\
    );\n        $this->assertEquals(change_base(8, 2), \"1000\");\n        $this->assertEquals(change_base(7,\
    \ 2), \"111\");\n    }\n}", "\t$result = '';\n\twhile ($x > 0) {\n\t\t$result\
    \ = ($x % $base) . $result;\n\t\t$x = (int)($x / $base);\n\t}\n\treturn $result;\n\
    }\n", "\t$i = 0;\n\t$remainders = [];\n\twhile ($x != 0) {\n\t\t$remainders[$i]\
    \ = $x % $base;\n\t\t$x = (int)($x / $base);\n\t\t$i += 1;\n\t}\n\t$s = \"\";\n\
    \tfor ($j = $i - 1; $j >= 0; $j--) {\n\t\t$s .= $remainders[$j];\n\t}\n\treturn\
    \ $s;\n}\n", "\t$result = \"\";\n\t$quotient = $x;\n\twhile ($quotient >= $base)\
    \ {\n\t\t$remainder = $quotient % $base;\n\t\t$quotient = (int)($quotient / $base);\n\
    \t\t$result = strval($remainder) . $result;\n\t}\n\t$result = strval($quotient)\
    \ . $result;\n\treturn $result;\n}", "    if ($x < $base) {\n        return (string)$x;\n\
    \    }\n    $ans = \"\";\n    while ($x > 0) {\n        $ans = (string)($x % $base)\
    \ . $ans;\n        $x = intval($x / $base);\n    }\n    return $ans;\n}\n", "\t\
    $res = '';\n\twhile ($x >= $base) {\n\t\t$res = ($x % $base) . $res;\n\t\t$x =\
    \ floor($x / $base);\n\t}\n\t$res = $x . $res;\n\treturn $res;\n}\n", "    $result\
    \ = \"\";\n    while ($x >= $base) {\n        $result = ($x % $base) . $result;\n\
    \        $x = (int)($x / $base);\n    }\n    $result = $x . $result;\n    return\
    \ $result;\n}\n", "\t$result = \"\";\n\twhile ($x >= $base) {\n\t\t$result = ($x\
    \ % $base) . $result;\n\t\t$x = floor($x / $base);\n\t}\n\t$result = $x . $result;\n\
    \treturn $result;\n}", "\t$res = \"\";\n\twhile ($x > 0) {\n\t\t$res = $x % $base\
    \ . $res;\n\t\t$x = (int)($x / $base);\n\t}\n\treturn $res;\n}\n", "    $res =\
    \ \"\";\n    while ($x > 0) {\n        $remainder = $x % $base;\n        $x =\
    \ (int)($x / $base);\n        $res = ((string)$remainder) . $res;\n    }\n   \
    \ return $res;\n}\n", "  $result = '';\n  do {\n    $result = ($x % $base) . $result;\n\
    \    $x = intval($x / $base);\n  } while ($x > 0);\n  return $result;\n}\necho\
    \ change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7,\
    \ 2) . \"\\n\";", "  $ret = \"\";\n  while($x > 0) {\n    $remainder = $x % $base;\n\
    \    $x = ($x - $remainder) / $base;\n    $ret = $remainder . $ret;\n  }\n  return\
    \ $ret;\n}\n\necho change_base(7, 2);", "  // Fill in the blank.\n}", "    $ans\
    \ = \"\";\n    while ($x > 0) {\n        $ans = (($x % $base) . $ans);\n     \
    \   $x = floor($x / $base);\n    }\n    return $ans;\n}\n", "\tif($x == 0) return\
    \ '0';\n\t$answer = '';\n\twhile($x > 0) {\n\t\t$answer = $x % $base . $answer;\n\
    \t\t$x = (int)($x / $base);\n\t}\n\treturn $answer;\n}\n\nvar_dump(change_base(8,\
    \ 3));\necho '<br/>';\nvar_dump(change_base(8, 2));\necho '<br/>';\nvar_dump(change_base(7,\
    \ 2));\necho '<br/>';\nvar_dump(change_base(37, 3));\necho '<br/>';\nvar_dump(change_base(37,\
    \ 2));\necho '<br/>';\nvar_dump(change_base(21, 2));\necho '<br/>';\nvar_dump(change_base(7,\
    \ 3));\necho '<br/>';\nvar_dump(change_base(25, 2));\necho '<br/>';\nvar_dump(change_base(25,\
    \ 8));\necho '<br/>';\nvar_dump(change_base(25, 16));\necho '<br/>';\nvar_dump(change_base(35,\
    \ 2));\necho '<br/>';\nvar_dump(change_base(10, 10));\necho '<br/>';\nvar_dump(change_base(100,\
    \ 10));\necho '<br/>';\nvar_dump(change_base(100, 2));\necho '<br/>';\nvar_dump(change_base(0,\
    \ 10));\necho '<br/>';\nvar_dump(change_base(0, 2));\necho '<br/>';\nvar_dump(change_base(0,\
    \ 4));\necho '<br/>';\nvar_dump(change_base(0, 8));\necho '<br/>';\nvar_dump(change_base(0,\
    \ 16));\necho '<br/>';\nvar_dump(change_base(1, 10));\necho '<br/>';\nvar_dump(change_base(1,\
    \ 2));\necho '<br/>';\nvar_dump(change_base(1, 4));\necho '<br/>';\nvar", "  if\
    \ ($x < $base) {\n    return $x;\n  }\n  $q = intval($x / $base);\n  $r = $x %\
    \ $base;\n  return change_base($q, $base) . $r;\n}\n", "  $remainders = array();\n\
    \  while ($x > 0) {\n    $remainders[] = ($x % $base);\n    $x = (int)($x / $base);\n\
    \  }\n  $result = array_reverse($remainders);\n  return implode($result);\n}\n",
  "\t$result = \"\";\n\twhile ($x > 0) {\n\t\t$result = (string)($x % $base) . $result;\n\
    \t\t$x = floor($x / $base);\n\t}\n\treturn $result;\n}\n\necho change_base(8,\
    \ 2) . \"\\n\";\necho change_base(8, 3) . \"\\n\";\necho change_base(7, 2) . \"\
    \\n\";\n", "    if ($x < $base) {\n        return $x;\n    } else {\n        return\
    \ change_base($x / $base, $base) . $x % $base;\n    }\n}\n\necho change_base(8,\
    \ 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7, 2) . \"\
    \\n\";", "  $ans = [];\n  while($x > 0) {\n    $ans[] = $x % $base;\n    $x =\
    \ (int)($x / $base);\n  }\n  $ans = array_reverse($ans);\n  return implode(\"\"\
    , $ans);\n}\n", "    $base_num = '';\n    while ($x > 0) {\n        $base_num\
    \ = $x % $base . $base_num;\n        $x = floor($x / $base);\n    }\n    return\
    \ $base_num;\n}\n", "    // if x == 0 return 0\n    if ($x == 0) {\n        return\
    \ '0';\n    }\n    // set num to empty string\n    $num = '';\n    // while x\
    \ != 0\n    while ($x != 0) {\n        // add the remainder of x / base to num\n\
    \        $num = $x % $base . $num;\n        // divide x by base\n        $x =\
    \ floor($x / $base);\n    }\n    // return num\n    return $num;\n}\n", "\t$result\
    \ = '';\n\twhile ($x > 0) {\n\t\t$result = $x % $base . $result;\n\t\t$x = (int)($x\
    \ / $base);\n\t}\n\treturn $result;\n}\n", "\t$result = \"\";\n\twhile($x != 0)\
    \ {\n\t\t$digit = $x % $base;\n\t\t$result = strval($digit) . $result;\n\t\t$x\
    \ = floor($x / $base);\n\t}\n\treturn $result;\n}\n", "  if ($x < $base) {\n \
    \   return strval($x);\n  } else {\n    return change_base(floor($x / $base),\
    \ $base) . strval($x % $base);\n  }\n}\n\nif (count($argv) < 3) {\n  echo \"Usage:\
    \ php change_base.php <number> <base>\\n\";\n  exit(1);\n}\n\n$x = intval($argv[1]);\n\
    $base = intval($argv[2]);\n\necho change_base($x, $base) . \"\\n\";", "\t// write\
    \ your code here\n}\n", "  $arr = [];\n  while ($x > 0) {\n    $mod = $x % $base;\n\
    \    $x = intval($x / $base);\n    array_push($arr, $mod);\n  }\n  $result = \"\
    \";\n  for ($i = count($arr) - 1; $i >= 0; $i--) {\n    $result .= $arr[$i];\n\
    \  }\n  return $result;\n}\n", "    $res = \"\";\n    while ($x > 0) {\n     \
    \   $rem = $x % $base;\n        $res = $rem . $res;\n        $x = intval($x /\
    \ $base);\n    }\n    return $res;\n}\n", "    $base_arr = array();\n    $base_arr_rev\
    \ = array();\n    $s = '';\n    $y = 0;\n    $n = 0;\n    $count = 0;\n    $n\
    \ = $x;\n    while ($n >= $base) {\n        $y = $n / $base;\n        $n = $n\
    \ % $base;\n        $base_arr[$count] = $n;\n        $count++;\n        $n = $y;\n\
    \    }\n    $base_arr[$count] = $n;\n    $base_arr_rev = array_reverse($base_arr);\n\
    \    for ($i = 0; $i < count($base_arr_rev); $i++) {\n        $s = $s . $base_arr_rev[$i];\n\
    \    }\n    return $s;\n}\n", "  if ($x < $base) {\n    return $x;\n  } else {\n\
    \    return change_base(floor($x / $base), $base) . fmod($x, $base);\n  }\n}\n",
  "\t$remainders = array();\n\t$quotient = $x;\n\twhile ($quotient >= $base) {\n\t\
    \t$remainders[] = $quotient % $base;\n\t\t$quotient = floor($quotient / $base);\n\
    \t}\n\t$remainders[] = $quotient;\n\t$representation = '';\n\tfor ($i = count($remainders)\
    \ - 1; $i >= 0; $i--) {\n\t\t$representation .= $remainders[$i];\n\t}\n\treturn\
    \ $representation;\n}\n\necho change_base(8, 3), \"\\n\";\necho change_base(8,\
    \ 2), \"\\n\";\necho change_base(7, 2), \"\\n\";", "\tif($x > 0){\n\t\t$arr =\
    \ [];\n\t\twhile($x > 0){\n\t\t\t$arr[] = $x % $base;\n\t\t\t$x = floor($x / $base);\n\
    \t\t}\n\t\treturn implode(array_reverse($arr));\n\t}\n\telse{\n\t\treturn \"0\"\
    ;\n\t}\n}\n", "  $output = '';\n  while ($x > 0) {\n    $output = ($x % $base)\
    \ . $output;\n    $x = (int)($x / $base);\n  }\n  return $output;\n}", "\t$str\
    \ = \"\";\n\t$quotient = $x;\n\twhile ($quotient != 0) {\n\t\t$remainder = $quotient\
    \ % $base;\n\t\t$quotient = floor($quotient / $base);\n\t\t$str = strval($remainder)\
    \ . $str;\n\t}\n\treturn $str;\n}\n", "    $r = '';\n    while ($x) {\n      \
    \  $r = $x % $base . $r;\n        $x = intval($x / $base);\n    }\n    return\
    \ $r;\n}\n", "    $result = \"\";\n    while ($x > 0) {\n        $result = ($x\
    \ % $base) . $result;\n        $x = floor($x / $base);\n    }\n    return $result;\n\
    }\n\necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho\
    \ change_base(7, 2) . \"\\n\";\n", "  $out = '';\n  while ($x > 0) {\n    $out\
    \ = (string)($x % $base) . $out;\n    $x = floor($x / $base);\n  }\n  return $out;\n\
    }\n", "\t$base_string = \"\";\n\twhile ($x > 0) {\n\t\t$base_string = (string)($x\
    \ % $base) . $base_string;\n\t\t$x = floor($x / $base);\n\t}\n\treturn $base_string;\n\
    }\necho \"8 in binary is \".change_base(8, 2).\"\\n\";\necho \"8 in base 3 is\
    \ \".change_base(8, 3).\"\\n\";\necho \"7 in binary is \".change_base(7, 2).\"\
    \\n\";", "    $str = \"\";\n    while ($x != 0) {\n        $str = strval($x %\
    \ $base) . $str;\n        $x = intval($x / $base);\n    }\n    return $str;\n\
    }\n", "    // TODO\n}", "    $ret = \"\";\n    if ($x == 0) {\n        return\
    \ \"0\";\n    }\n    while ($x > 0) {\n        $ret = strval($x % $base) . $ret;\n\
    \        $x = (int)($x / $base);\n    }\n    return $ret;\n}\necho change_base(8,\
    \ 3);\necho \"\\n\";\necho change_base(8, 2);\necho \"\\n\";\necho change_base(7,\
    \ 2);\necho \"\\n\";", "    $result = \"\";\n    do {\n        $result = ($x %\
    \ $base) . $result;\n        $x = (int)($x / $base);\n    } while ($x > 0);\n\
    \    return $result;\n}\n", "  $r = [];\n  while ($x) {\n    $r[] = $x % $base;\n\
    \    $x = intval($x / $base);\n  }\n  return implode(array_reverse($r));\n}\n\
    echo change_base(7, 2);", "    if ($x == 0) {\n        return \"0\";\n    }\n\
    \    $result = \"\";\n    while ($x > 0) {\n        $result = (string)($x % $base)\
    \ . $result;\n        $x = floor($x / $base);\n    }\n    return $result;\n}\n",
  "\t$result = '';\n\tdo {\n\t\t$result = ($x % $base) . $result;\n\t\t$x = intval($x\
    \ / $base);\n\t} while ($x != 0);\n\treturn $result;\n}\n", "    if ($x > 1)\n\
    \        return change_base(floor($x / $base), $base) . ($x % $base);\n    else\
    \ return '' . $x;\n}", "  $result = \"\";\n  while ($x > 0) {\n    $remainder\
    \ = $x % $base;\n    $x = floor($x / $base);\n    $result = (string)$remainder\
    \ . $result;\n  }\n  return $result;\n}\necho change_base(8, 3); // 22\necho change_base(8,\
    \ 2); // 1000\necho change_base(7, 2); // 111\n", "\t$r = \"\";\n\twhile ($x >\
    \ 0) {\n\t\t$r = ($x % $base).$r;\n\t\t$x = (int)($x / $base);\n\t}\n\treturn\
    \ $r;\n}\n", "    if ($x == 0) {\n        return \"0\";\n    }\n    $result =\
    \ \"\";\n    while ($x > 0) {\n        $result = (string)($x % $base) . $result;\n\
    \        $x = floor($x / $base);\n    }\n    return $result;\n}\n", "  $mod =\
    \ $x % $base;\n  $rest = ($x - $mod) / $base;\n  $str = \"\";\n  if ($rest > 0)\
    \ {\n    $str = change_base($rest, $base);\n  }\n  $str .= $mod;\n  return $str;\n\
    }\n\nif (count($argv) != 3) {\n  print(\"Usage: ./change_base.php <x> <base>\\\
    n\");\n  exit(1);\n}\n\n$x = intval($argv[1]);\n$base = intval($argv[2]);\nprint(change_base($x,\
    \ $base) . \"\\n\");", "\tif ($x == 0) {\n\t\treturn \"0\";\n\t}\n\n\t$base_table\
    \ = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n\t$result = array();\n\twhile ($x >\
    \ 0) {\n\t\t$result[] = $base_table[$x % $base];\n\t\t$x = (int)($x / $base);\n\
    \t}\n\t$result = array_reverse($result);\n\treturn implode(\"\", $result);\n}\n",
  "    $x = (int)$x;\n    $base = (int)$base;\n    $converted_number = \"\";\n   \
    \ if ($x == 0) {\n        return \"0\";\n    }\n    while ($x >= 1) {\n      \
    \  $converted_number = strval($x % $base) . $converted_number;\n        $x = intval($x\
    \ / $base);\n    }\n    return $converted_number;\n}\n\necho change_base(7, 2);",
  "\t$base_array = array(0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7\
    \ => 7, 8 => 8, 9 => 9);\n\t$quotient = $x;\n\t$i = 1;\n\t$result = array();\n\
    \twhile ($quotient != 0) {\n\t\t$result[$i] = $base_array[$quotient % $base];\n\
    \t\t$quotient = floor($quotient / $base);\n\t\t$i = $i + 1;\n\t}\n\treturn implode(\"\
    \", array_reverse($result));\n}", "  $ans = \"\";\n  while ($x > 0) {\n    $rem\
    \ = $x % $base;\n    $ans = strval($rem) . $ans;\n    $x = ($x - $rem) / $base;\n\
    \  }\n  return $ans;\n}\n", "  $str = \"\";\n  while ($x >= $base) {\n    $rem\
    \ = $x % $base;\n    $x = (int)($x / $base);\n    $str = (string)$rem . $str;\n\
    \  }\n  $str = (string)$x . $str;\n  return $str;\n}\n\n$fp = fopen(\"php://stdin\"\
    , \"r\");\nwhile ( $line = trim(fgets($fp)) ) {\n  list($x, $base) = explode(\"\
    \ \", $line);\n  $x = (int)$x;\n  $base = (int)$base;\n  echo change_base($x,\
    \ $base) . \"\\n\";\n}", '}', "    $answer = \"\";\n    while($x >= $base) {\n\
    \        $answer = ($x % $base) . $answer;\n        $x = floor($x / $base);\n\
    \    }\n    $answer = $x . $answer;\n    return $answer;\n}\n", "    if ($x ==\
    \ 0) {\n        return '0';\n    }\n\n    $s = '';\n    while ($x > 0) {\n   \
    \     $s = (string)($x % $base) . $s;\n        $x = (int)($x / $base);\n    }\n\
    \    return $s;\n}\n", "    if ($x == 0) {\n        return 0;\n    }\n    $res\
    \ = \"\";\n    while ($x > 0) {\n        $res = $x % $base . $res;\n        $x\
    \ = (int)($x / $base);\n    }\n    return $res;\n}\n", "  $num_array = [];\n \
    \ $result = '';\n  $temp = $x;\n  while($temp > 0) {\n    $num_array[] = $temp\
    \ % $base;\n    $temp = floor($temp / $base);\n  }\n  $num_array = array_reverse($num_array);\n\
    \  foreach($num_array as $num) {\n    $result .= strval($num);\n  }\n  return\
    \ $result;\n}\n\necho change_base(8, 3).\"\\n\";\necho change_base(8, 2).\"\\\
    n\";\necho change_base(7, 2).\"\\n\";", "  if ($x < $base) return $x;\n  return\
    \ change_base(floor($x / $base), $base) . ($x % $base);\n}\n", "\n}", "    $result\
    \ = '';\n    $base = intval($base);\n    if ($base < 2 || $base > 10) {\n    \
    \    throw new Exception('base should be in range [2, 10].');\n    }\n    $current_num\
    \ = $x;\n    while ($current_num > 0) {\n        $remainder = $current_num % $base;\n\
    \        $current_num = floor($current_num / $base);\n        $result = strval($remainder)\
    \ . $result;\n    }\n    return $result;\n}\n", "  if ($x == 0) {\n    return\
    \ \"0\";\n  }\n  $result = \"\";\n  while ($x > 0) {\n    $result = $x % $base\
    \ . $result;\n    $x = intval($x / $base);\n  }\n  return $result;\n}\necho change_base(100,\
    \ 2);", "\t// if base is equal to one, return str(x).\n\tif ($base == 1) {\n\t\
    \t$str = \"\";\n\t\tfor ($i = 0; $i < $x; $i++) {\n\t\t\t$str = $str . \"1\";\n\
    \t\t}\n\t\treturn $str;\n\t}\n\t// use recursion to get the conversion.\n\t$ans\
    \ = $x % $base;\n\treturn change_base(($x - $ans) / $base, $base) . strval($ans);\n\
    }\n", "\t$ret = '';\n\tdo {\n\t\t$r = $x % $base;\n\t\t$ret = $r . $ret;\n\t\t\
    $x = intval($x / $base);\n\t} while ($x > 0);\n\treturn $ret;\n}\n", "  $stack\
    \ = [];\n  $result = \"\";\n  $remainder = $x;\n  while ($remainder !== 0) {\n\
    \    $remainder = ($remainder - ($remainder % $base)) / $base;\n    array_push($stack,\
    \ $remainder);\n  }\n  while ($stack) {\n    $result = $result . array_pop($stack);\n\
    \  }\n  return $result;\n}\n", "    $a = $x;\n    $n = 0;\n    $mod = 1;\n   \
    \ $s = \"\";\n    do {\n        $mod = $a % $base;\n        $a = ($a - $mod) /\
    \ $base;\n        $s = $mod . $s;\n        $n = $n + 1;\n    } while ($a > 0);\n\
    \    return $s;\n}\n", "\t$base10_num = 0;\n\tfor ($i = 0; $i < strlen($x); $i++)\
    \ {\n\t\t$base10_num += intval($x[$i]) * pow($base, strlen($x) - $i - 1);\n\t\
    }\n\t$answer = '';\n\twhile ($base10_num != 0) {\n\t\t$answer = strval($base10_num\
    \ % $base) . $answer;\n\t\t$base10_num = intval($base10_num / $base);\n\t}\n\t\
    return $answer;\n}\n", "    // IMPLEMENT ME\n}", "    $res = \"\";\n    while\
    \ ($x > 0) {\n        $res = ($x % $base) . $res;\n        $x = (int)($x / $base);\n\
    \    }\n    return $res;\n}\n", "    $result = \"\";\n    while ($x > 0) {\n \
    \       $r = $x % $base;\n        $x = floor($x / $base);\n        $result = strval($r)\
    \ . $result;\n    }\n    return $result;\n}\n", "  $arr = [];\n  while ($x >=\
    \ $base) {\n    $q = floor($x / $base);\n    $r = $x % $base;\n    $arr[] = $r;\n\
    \    $x = $q;\n  }\n  $arr[] = $x;\n  return implode(array_reverse($arr));\n}\n",
  "    $res = '';\n    while ($x > 0) {\n        $res = (string)($x % $base) . $res;\n\
    \        $x = (int)($x / $base);\n    }\n    return $res;\n}\n\n$test = (object)array(\n\
    \    'x' => 8,\n    'base' => 3,\n    'expected' => '22',\n);\n\n$ret = change_base($test->x,\
    \ $test->base);\n\necho ($ret === $test->expected) ? 'Success!' : $ret;\necho\
    \ \"\\n\";", "\t$res = \"\";\n\twhile ($x >= $base) {\n\t\t$res = strval($x %\
    \ $base) . $res;\n\t\t$x = (int)($x / $base);\n\t}\n\t$res = strval($x) . $res;\n\
    \treturn $res;\n}", "  $digits = array();\n  while ($x > 0) {\n    $digits[] =\
    \ $x % $base;\n    $x = (int)($x / $base);\n  }\n  $digits = array_reverse($digits);\n\
    \  return implode('', $digits);\n}\n\n$stdin = fopen('php://stdin', 'r');\n$stdout\
    \ = fopen('php://stdout', 'w');\n\nfscanf(STDIN, \"%d\", $n);\nfscanf(STDIN, \"\
    %d\", $x);\nfscanf(STDIN, \"%d\", $base);\n\necho change_base($x, $base), \"\\\
    n\";", "\tif($x == 0) {\n\t\treturn \"0\";\n\t}\n\t$ans = \"\";\n\twhile($x >\
    \ 0) {\n\t\t$ans = (string)($x % $base) . $ans;\n\t\t$x = floor($x / $base);\n\
    \t}\n\treturn $ans;\n}\n", "  $n = $x;\n  $r = array();\n  while($n > 0) {\n \
    \   $r[] = $n % $base;\n    $n = intval($n / $base);\n  }\n  return implode(array_reverse($r));\n\
    }\n\n$result = change_base(8, 3);\nprint_r($result . \"\\n\");\n\n$result = change_base(8,\
    \ 2);\nprint_r($result . \"\\n\");\n\n$result = change_base(7, 2);\nprint_r($result\
    \ . \"\\n\");", "  $res = \"\";\n  while ($x >= $base) {\n    $res = $x % $base\
    \ . $res;\n    $x = intval($x / $base);\n  }\n  $res = $x . $res;\n  return $res;\n\
    }\n", "  $converted = \"\";\n  while ($x > 0) {\n    $converted = strval($x %\
    \ $base) . $converted;\n    $x = floor($x / $base);\n  }\n  return $converted;\n\
    }\n", "    $output = \"\";\n    $rest = $x;\n    while ($rest >= $base) {\n  \
    \      $remainder = $rest % $base;\n        $rest = intval($rest / $base);\n \
    \       $output = (string)$remainder . $output;\n    }\n    return (string)$rest\
    \ . $output;\n}\n", "\t$s = \"\";\n\twhile ($x != 0) {\n\t\t$r = $x % $base;\n\
    \t\t$s = $r . $s;\n\t\t$x = ($x - $r) / $base;\n\t}\n\treturn $s;\n}\n\nif (isset($_POST['base'])\
    \ && isset($_POST['num'])) {\n\techo change_base($_POST['num'], $_POST['base']);\n\
    } else {\n\techo \"Input error!\";\n}", "    $result = \"\";\n    while ($x >\
    \ 0) {\n        $result = $x % $base . $result;\n        $x = intval($x / $base);\n\
    \    }\n    return $result;\n}\n\necho change_base(8, 3).\"\\n\";\necho change_base(8,\
    \ 2).\"\\n\";\necho change_base(7, 2).\"\\n\";", "    $a = array();\n    while\
    \ ($x != 0) {\n        $a[] = $x % $base;\n        $x = intval($x / $base);\n\
    \    }\n    return implode('', array_reverse($a));\n}\n", "  $str = \"\";\n  do\
    \ {\n    $str = (string)($x % $base) . $str;\n    $x = (int)($x / $base);\n  }\
    \ while ($x > 0);\n  return $str;\n}", "    $result = \"\";\n    while ($x > 0)\
    \ {\n        $result = (string)($x % $base) . $result;\n        $x = (int)($x\
    \ / $base);\n    }\n    return $result;\n}\n\necho change_base(8, 3) . \"\\n\"\
    ;\necho change_base(8, 2) . \"\\n\";\necho change_base(7, 2) . \"\\n\";", "  \
    \  if ($x < $base) {\n        return strval($x);\n    } else {\n        return\
    \ change_base(floor($x / $base), $base) . strval($x % $base);\n    }\n}\n\n$fp\
    \ = fopen(\"php://stdin\", \"r\");\n\nfscanf($fp, \"%d\", $x);\nfscanf($fp, \"\
    %d\", $base);\n\necho change_base($x, $base);\n\nfclose($fp);", "  // TODO: write\
    \ your code here.\n}\n", "  $quotient = $x;\n  $result = \"\";\n  while ($quotient\
    \ >= $base) {\n    $remainder = $quotient % $base;\n    $quotient = intval($quotient\
    \ / $base);\n    $result = strval($remainder) . $result;\n  }\n  $result = strval($quotient)\
    \ . $result;\n  return $result;\n}", "\tif ($x < $base) {\n\t\treturn strval($x);\n\
    \t}\n\treturn change_base($x / $base, $base) . strval($x % $base);\n}\n\necho\
    \ change_base(2, 3) . PHP_EOL;\necho change_base(7, 2) . PHP_EOL;\necho change_base(5,\
    \ 2) . PHP_EOL;\necho change_base(3, 2) . PHP_EOL;\necho change_base(1, 2) . PHP_EOL;\n\
    echo change_base(2, 2) . PHP_EOL;\necho change_base(3, 2) . PHP_EOL;\necho change_base(4,\
    \ 2) . PHP_EOL;\necho change_base(5, 2) . PHP_EOL;\necho change_base(6, 2) . PHP_EOL;\n\
    echo change_base(7, 2) . PHP_EOL;\necho change_base(8, 2) . PHP_EOL;\necho change_base(9,\
    \ 2) . PHP_EOL;\necho change_base(10, 2) . PHP_EOL;\necho change_base(11, 2) .\
    \ PHP_EOL;\necho change_base(12, 2) . PHP_EOL;\necho change_base(13, 2) . PHP_EOL;\n\
    echo change_base(14, 2) . PHP_EOL;\necho change_base(15, 2) . PHP_EOL;\necho change_base(16,\
    \ 2) . PHP_EOL;\necho change_base(17, 2) . PHP_EOL;\necho change_base(18, 2) .\
    \ PHP_EOL;\necho change_base(19, 2) . PHP_EOL;\necho change_base(20, 2) . PHP_EOL;\n\
    echo change_base(21, 2) . PHP_EOL;\necho change_base(22, 2) . PHP_EOL;\necho change_base(23,\
    \ 2) . PHP_EOL;\necho change_base(24, 2) . PHP_EOL;\necho change_base(25, 2) .\
    \ PHP_EOL", "    $output = \"\";\n    $base_arr = array();\n    do {\n       \
    \ $remainder = $x % $base;\n        $base_arr[] = $remainder;\n        $x = ($x\
    \ - $remainder) / $base;\n    } while ($x > 0);\n    for ($i = count($base_arr)\
    \ - 1; $i >= 0; $i--) {\n        $output .= $base_arr[$i];\n    }\n    return\
    \ $output;\n}\n", "    $str = '';\n    while ($x != 0) {\n        $str = ($x %\
    \ $base) . $str;\n        $x = intval($x / $base);\n    }\n    return $str;\n\
    }\n\n$x = 8;\n$base = 2;\n$ret = change_base($x, $base);\nprint $ret;", "  $result\
    \ = \"\";\n  do {\n    $result = ($x % $base) . $result;\n    $x = floor($x /\
    \ $base);\n  } while ($x > 0);\n  return $result;\n}\n", "\t$stack = new SplStack();\n\
    \t$result = \"\";\n\twhile ($x > 0) {\n\t\t$stack->push($x % $base);\n\t\t$x =\
    \ (int)($x / $base);\n\t}\n\twhile (!$stack->isEmpty()) {\n\t\t$result .= $stack->pop();\n\
    \t}\n\treturn $result;\n}\n\necho change_base(8, 3).\"\\n\";\necho change_base(8,\
    \ 2).\"\\n\";\necho change_base(7, 2).\"\\n\";\n", "    $result = '';\n    while\
    \ ($x > 0) {\n        $result = ($x % $base) . $result;\n        $x = (int)($x\
    \ / $base);\n    }\n    return $result;\n}\n\necho change_base(8, 3);\necho \"\
    \\n\";\necho change_base(8, 2);\necho \"\\n\";\necho change_base(7, 2);\necho\
    \ \"\\n\";", "    $result = \"\";\n    while ($x > 0) {\n        $result = ($x\
    \ % $base) . $result;\n        $x = (int)($x / $base);\n    }\n    return $result;\n\
    }\n", "    $result = \"\";\n    while($x != 0) {\n        $remainder = $x % $base;\n\
    \        $x = (int)($x / $base);\n        $result = $remainder . $result;\n  \
    \  }\n    return $result;\n}\n", "    $base_string = \"\";\n    $remainder = 0;\n\
    \    while ($x > 0) {\n        $remainder = $x % $base;\n        $x = (int)($x\
    \ / $base);\n        $base_string = $remainder . $base_string;\n    }\n    return\
    \ $base_string;\n}\n\n$stdin = fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin,\
    \ \"%[^\\n]\", $x_temp);\n$x = explode(' ', $x_temp);\n\n$x = intval($x[0]);\n\
    \nfscanf($stdin, \"%[^\\n]\", $base_temp);\n$base = explode(' ', $base_temp);\n\
    \n$base = intval($base[0]);\n\n$result = change_base($x, $base);\n\nfwrite($fptr,\
    \ $result . \"\\n\");\n\nfclose($stdin);\nfclose($fptr);", "    $num_array = [];\n\
    \    $result = '';\n    while ($x >= $base) {\n        $num_array[] = $x % $base;\n\
    \        $x = floor($x / $base);\n    }\n    $num_array[] = $x;\n    while (count($num_array)\
    \ > 0) {\n        $result .= array_pop($num_array);\n    }\n    return $result;\n\
    }\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$stdin = fopen(\"php://stdin\"\
    , \"r\");\n\nfscanf($stdin, \"%d\\n\", $n);\n\n$result = change_base($n, 3);\n\
    \nfwrite($fptr, $result . \"\\n\");\n\nfclose($stdin);\nfclose($fptr);", "\t$pow\
    \ = 0;\n\t$result = \"\";\n\twhile($x >= $base) {\n\t\t$d = $x % $base;\n\t\t\
    $result = $d.$result;\n\t\t$x = ($x - $d) / $base;\n\t}\n\t$result = $x.$result;\n\
    \treturn $result;\n}\n\n$n = 0;\nwhile($n++ < 500) {\n\t$b10 = $n;\n\t$b2 = change_base($b10,\
    \ 2);\n\t$b8 = change_base($b10, 8);\n\t$b16 = change_base($b10, 16);\n\techo\
    \ \"$b10 $b2 $b8 $b16\\n\";\n}\n", "    $a = array();\n    while ($x > 0) {\n\
    \        $a[] = $x % $base;\n        $x = floor($x / $base);\n    }\n    $a =\
    \ array_reverse($a);\n    $s = \"\";\n    foreach ($a as $n) {\n        $s .=\
    \ $n;\n    }\n    return $s;\n}\n", "\t$result = \"\";\n\twhile ($x > 0) {\n\t\
    \t$result = (string)($x % $base) . $result;\n\t\t$x = intval($x / $base);\n\t\
    }\n\treturn $result;\n}", "  $list_digits = array();\n  if ($x == 0) {\n    return\
    \ 0;\n  } else if ($x >= 0) {\n    while ($x != 0) {\n      $list_digits[] = $x\
    \ % $base;\n      $x = floor($x / $base);\n    }\n    $string_digits = implode('',\
    \ array_reverse($list_digits));\n    return $string_digits;\n  } else {\n    //\
    \ input number is less than 0, and we don't support negative numbers.\n    //\
    \ just return -1\n    return -1;\n  }\n}\n\n$x = 7;\n$base = 2;\necho $x . \"\
    \ in base \" . $base . \" is \" . change_base($x, $base) . \"\\n\";\n\n$x = 8;\n\
    $base = 3;\necho $x . \" in base \" . $base . \" is \" . change_base($x, $base)\
    \ . \"\\n\";\n\n$x = 8;\n$base = 2;\necho $x . \" in base \" . $base . \" is \"\
    \ . change_base($x, $base) . \"\\n\";\n\n$x = -1;\n$base = 4;\necho $x . \" in\
    \ base \" . $base . \" is \" . change_base($x, $base) . \"\\n\";\n", "    // fill\
    \ the code\n}\n\necho change_base(8, 3).\"\\n\";\necho change_base(8, 2).\"\\\
    n\";\necho change_base(7, 2).\"\\n\";", "    $arr = [];\n    while ($x > 0) {\n\
    \        $arr[] = $x % $base;\n        $x = floor($x / $base);\n    }\n    return\
    \ implode(\"\", array_reverse($arr));\n}\necho change_base(8, 3);\necho \"<br>\"\
    ;\necho change_base(8, 2);\necho \"<br>\";\necho change_base(7, 2);", "    //\
    \ Implement change_base()\n    $result = '';\n    while($x>0){\n        $r = $x\
    \ % $base;\n        $x = intval($x / $base);\n        $result = $r.$result;\n\
    \    }\n    return $result;\n}\n\n$y = change_base(8, 3);\nprint(\"change_base(8,\
    \ 3) = $y\\n\");\n\n$y = change_base(8, 2);\nprint(\"change_base(8, 2) = $y\\\
    n\");\n\n$y = change_base(7, 2);\nprint(\"change_base(7, 2) = $y\\n\");", "  if\
    \ ($x < $base) {\n    return strval($x);\n  } else {\n    return change_base(floor($x\
    \ / $base), $base) . strval($x % $base);\n  }\n}\n", "    $quotient = floor($x\
    \ / $base);\n    $remainder = $x % $base;\n    if ($quotient == 0) {\n       \
    \ return strval($remainder);\n    } else {\n        return change_base($quotient,\
    \ $base) . strval($remainder);\n    }\n}\n", "\t$result = array();\n\t$itr = 0;\n\
    \twhile($x > 0) {\n\t\t$result[$itr] = $x % $base;\n\t\t$x = (int)($x / $base);\n\
    \t\t$itr++;\n\t}\n\t$result = array_reverse($result);\n\treturn implode($result);\n\
    }\n", "    // Your code goes here!\n    $result = \"\";\n    while ($x > 0) {\n\
    \        $result = ($x % $base) . $result;\n        $x = (int)($x / $base);\n\
    \    }\n    return $result;\n}\n", "    if ($x < $base) {\n        return $x;\n\
    \    } else {\n        return change_base(floor($x / $base), $base) . ($x % $base);\n\
    \    }\n}\n", "  if ($x === 0) {\n    return 0;\n  }\n  $rem = $x % $base;\n \
    \ $quotient = intval($x / $base);\n  return change_base($quotient, $base) . $rem;\n\
    }\n", "    $result = '';\n    while ($x > 0) {\n        $result = strval($x %\
    \ $base) . $result;\n        $x = floor($x / $base);\n    }\n    return $result;\n\
    }\n", "    if ($x == 0) {\n        return \"0\";\n    }\n    $result = \"\";\n\
    \    while ($x != 0) {\n        $result = (string)($x % $base) . $result;\n  \
    \      $x = floor($x / $base);\n    }\n    return $result;\n}\n", "    // YOUR\
    \ CODE GOES HERE\n}\n", "    $base_nums = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n\
    \    $result = '';\n    while ($x > 0) {\n        $y = $x % $base;\n        $result\
    \ = strval($base_nums[$y]) . $result;\n        $x = ($x - $y) / $base;\n    }\n\
    \    return $result;\n}\n", "    if ($x == 0) return \"0\";\n    $ret = \"\";\n\
    \    while ($x > 0) {\n        $ret = ($x % $base) . $ret;\n        $x = floor($x\
    \ / $base);\n    }\n    return $ret;\n}\n", "  $digits = \"0123456789\";\n  $quotient\
    \ = $x;\n  $remainder = 0;\n  $result = \"\";\n  while ($quotient > 0) {\n   \
    \ $remainder = $quotient % $base;\n    $quotient = intval($quotient / $base);\n\
    \    $result = $digits[$remainder] . $result;\n  }\n  return $result;\n}\n", " \
    \   $digits = \"0123456789\";\n    $rep = \"\";\n    do {\n        $rep = $digits[$x\
    \ % $base] . $rep;\n        $x = intval($x / $base);\n    } while ($x);\n    return\
    \ $rep;\n}\n", "\t$ans = \"\";\n\twhile ($x) {\n\t\t$ans = $x % $base . $ans;\n\
    \t\t$x = (int)($x / $base);\n\t}\n\treturn $ans;\n}\necho change_base(8, 3) .\
    \ \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7, 2) . \"\\n\"\
    ;\n", "    $ret = '';\n    $digit = 0;\n    while ($x > 0) {\n        $digit =\
    \ $x % $base;\n        $x = floor($x / $base);\n        $ret = (string)$digit\
    \ . $ret;\n    }\n    return $ret;\n}\n", "    if ($x < $base) {\n        return\
    \ (string)$x;\n    }\n    return change_base(floor($x / $base), $base) . ($x %\
    \ $base);\n}\n", "\t$result = \"\";\n\twhile ($x > 0) {\n\t\t$remainder = $x %\
    \ $base;\n\t\t$x = ($x - $remainder) / $base;\n\t\t$result = strval($remainder)\
    \ . $result;\n\t}\n\treturn $result;\n}\n\necho change_base(8, 2) . \"\\n\";\n\
    echo change_base(9, 2) . \"\\n\";\necho change_base(30, 2) . \"\\n\";", "\n}",
  "    $result = \"\";\n    while ($x >= $base) {\n        $remainder = $x % $base;\n\
    \        $x = (int)($x / $base);\n        $result = (string)$remainder . $result;\n\
    \    }\n    $result = (string)$x . $result;\n    return $result;\n}\n", "\t$answer\
    \ = \"\";\n\t$m = $x;\n\twhile ($m > 0) {\n\t\t$answer = (string)($m % $base)\
    \ . $answer;\n\t\t$m = (int)($m / $base);\n\t}\n\treturn $answer;\n}\n", "\t$digits\
    \ = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\
    \ 'E', 'F');\n\t$y = array();\n\tdo {\n\t\t$y[] = $digits[$x % $base];\n\t\t$x\
    \ = floor($x / $base);\n\t} while ($x > 0);\n\treturn join(array_reverse($y));\n\
    }\n", "  $s = '';\n  while ($x > 0) {\n    $s = strval($x % $base) . $s;\n   \
    \ $x = (int)($x / $base);\n  }\n  return $s;\n}\n", "  // Implement change_base\
    \ function here\n  //\n  // $string = (string) $x;\n  // $sum = 0;\n  // for ($i\
    \ = 0; $i < strlen($string); $i++) {\n  //   $sum += intval($string[$i]) * pow($base,\
    \ (strlen($string) - 1 - $i));\n  // }\n  // return (string) $sum;\n  //\n  if\
    \ ($x == 0) {\n    return \"0\";\n  }\n  $result = \"\";\n  while ($x > 0) {\n\
    \    $result = (string) ($x % $base) . $result;\n    $x = (int) ($x / $base);\n\
    \  }\n  return $result;\n}", "\t// your code here.\n}\n", "    if ($x < $base)\
    \ {\n        return strval($x);\n    } else {\n        return change_base(intval($x\
    \ / $base), $base) . strval($x % $base);\n    }\n}\n", "    // TODO\n}", "\t$result\
    \ = '';\n\twhile ($x > 0) {\n\t\t$result = ($x % $base) . $result;\n\t\t$x = floor($x\
    \ / $base);\n\t}\n\treturn $result;\n}\n", "\t// base case\n\tif ($x < $base)\
    \ {\n\t\treturn (string)$x;\n\t}\n\n\t// recursive case\n\t$base_string = change_base($x\
    \ / $base, $base);\n\t$remainder = $x % $base;\n\treturn $base_string . (string)$remainder;\n\
    }\n", "  $ans = \"\";\n  $rem = $x % $base;\n  $ans = (string)$rem . $ans;\n \
    \ $x = ($x - $rem) / $base;\n  while ($x > 0) {\n    $rem = $x % $base;\n    $ans\
    \ = (string)$rem . $ans;\n    $x = ($x - $rem) / $base;\n  }\n  return $ans;\n\
    }\n", "    $answer = \"\";\n    while ($x != 0) {\n        $answer = (string)($x\
    \ % $base) . $answer;\n        $x = intval($x / $base);\n    }\n    return $answer;\n\
    }\n", "  $n = 1;\n  $b = array();\n  do {\n    $r = $x % $base;\n    $x = ($x\
    \ - $r) / $base;\n    $b[$n] = $r;\n    $n++;\n  } while ($x > 0);\n  return implode(\"\
    \", array_reverse($b));\n}\n", "}\n", '}', "    $result = \"\";\n    if ($x <\
    \ $base) {\n        $result = $x;\n    } else {\n        $result = change_base(floor($x\
    \ / $base), $base);\n        $result .= $x % $base;\n    }\n    return $result;\n\
    }\n\n$x = 7;\n$base = 2;\n\necho change_base($x, $base);", "\t$result = array();\n\
    \tdo {\n\t\t$mod = $x % $base;\n\t\t$x = (int)($x / $base);\n\t\tarray_push($result,\
    \ $mod);\n\t} while ($x > 0);\n\treturn implode(\"\", array_reverse($result));\n\
    }\n", "    // fill here!\n    if ($x < $base) {\n        return strval($x);\n\
    \    } else {\n        return change_base(floor($x / $base), $base) . strval($x\
    \ % $base);\n    }\n}", "\t$result = \"\";\n\tif ($x > 0) {\n\t\t$r = $x % $base;\n\
    \t\t$result = change_base(($x - $r) / $base, $base) . $r;\n\t}\n\treturn $result;\n\
    }\n\necho change_base(7, 2) . PHP_EOL;", "    if ($x < $base) return (string)$x;\n\
    \    $remainder = $x % $base;\n    $quotient = intval($x / $base);\n    return\
    \ change_base($quotient, $base) . (string)$remainder;\n}\necho change_base(8,\
    \ 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7, 2) . \"\
    \\n\";", "  $y = '';\n  $rem = '';\n  while ($x >= $base) {\n    $rem = $x % $base;\n\
    \    $x = floor($x / $base);\n    $y = $rem . $y;\n  }\n  $y = $x . $y;\n  return\
    \ $y;\n}\n", "\t$res = \"\";\n\twhile ($x > 0) {\n\t\t$res = ($x % $base).$res;\n\
    \t\t$x = floor($x / $base);\n\t}\n\treturn $res;\n}\n\necho change_base(8, 3);\n\
    echo \"\\n\";\necho change_base(8, 2);\necho \"\\n\";\necho change_base(7, 2);\n\
    echo \"\\n\";", "    if ($x == 0) return '0';\n    $ret = '';\n    while ($x >\
    \ 0) {\n        $ret = (string)($x % $base) . $ret;\n        $x = (int)($x / $base);\n\
    \    }\n    return $ret;\n}", "    $ret = \"\";\n    while($x) {\n        $ret\
    \ = $x % $base . $ret;\n        $x = intval($x / $base);\n    }\n    return $ret;\n\
    }\n\necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho\
    \ change_base(7, 2) . \"\\n\";", "    $result = '';\n    while ($x != 0) {\n \
    \       $result = strval($x % $base) . $result;\n        $x = intval($x / $base);\n\
    \    }\n    return $result;\n}", "    $str = \"\";\n    while ($x > 0) {\n   \
    \     $str = (string)($x % $base) . $str;\n        $x = floor($x / $base);\n \
    \   }\n    return $str;\n}\n", "    if ($x == 0) return \"0\";\n    $ans = \"\"\
    ;\n    while ($x > 0) {\n        $ans = strval($x % $base) . $ans;\n        $x\
    \ = intval($x / $base);\n    }\n    return $ans;\n}\n\necho change_base(8, 3);\n\
    echo \"\\n\";\necho change_base(8, 2);\necho \"\\n\";\necho change_base(7, 2);\n\
    echo \"\\n\";\n", "\t$out = '';\n\twhile ($x > 0) {\n\t\t$out = (string)($x %\
    \ $base) . $out;\n\t\t$x = (int)($x / $base);\n\t}\n\treturn $out;\n}\n\n$x =\
    \ 8;\n$base = 3;\necho change_base($x, $base);\n", "  $result = \"\";\n  while\
    \ ($x > 0) {\n    $result = strval($x % $base) . $result;\n    $x = floor($x /\
    \ $base);\n  }\n  return $result;\n}\n\n$x = 8;\n$base = 3;\n$result = change_base($x,\
    \ $base);\necho $result;\n\n$x = 8;\n$base = 2;\n$result = change_base($x, $base);\n\
    echo $result;\n\n$x = 7;\n$base = 2;\n$result = change_base($x, $base);\necho\
    \ $result;", "\t$digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t$result\
    \ = \"\";\n\twhile ($x > 0) {\n\t\t$c = $x % $base;\n\t\t$result = $digits[$c]\
    \ . $result;\n\t\t$x = ($x - $c) / $base;\n\t}\n\treturn $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
